     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/01/2024 - Retro DOS v4.1 ((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9B476                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [E861]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [5816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [6116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [1317]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [2E17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [3417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [A215]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [CE15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [7C13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [D513]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [E113]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [4817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [5217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [A00F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [870E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [0F1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [F117]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [211F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [B31F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [9717]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [0D1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [121F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [F31E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [5D18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5706]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [820E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [770E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [2F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [310F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5706]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5706]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [700F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5706]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [171F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [1C1F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [A917]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [7F17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [A80E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [AD10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [081F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [031F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [240F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [630A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [800A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [9F0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [B00A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [680C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [640E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [3F0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [8C61]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [720F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [5A0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [990E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [410E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [D50E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [6F0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [0D22]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [5921]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [9421]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [AA6F]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [D36E]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [0467]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [1568]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [7B68]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [FA6F]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [8068]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [B76F]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [6E22]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [3569]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [5369]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [EA20]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [7F62]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [F963]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [D563]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [665B]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [C461]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [5C5B]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [2620]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [7C20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [660F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [D50F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [630C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [9C10]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [2070]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [E768]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [2E64]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [E90E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [AB70]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [9370]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [8C72]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [1465]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [1D6A]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [8269]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [6E6E]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5706]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [090F]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [F20C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [EF0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [5167]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [3767]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [9F11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [3767]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5706]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [4171]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [1407]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3909]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [292F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [CA0E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [3309]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [9150]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [6316]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [6753]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [E658]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [2730]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [AB5A]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [4073]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [722C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [5C2C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [F50A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [0B12]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [DF58]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [0B12]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [D811]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [F011]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [3C50]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [2359]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [825A]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [7F66]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [E26A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [8D6A]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [936E]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [9C0B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [350C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [920B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [B611]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [D069]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [4C66]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [6E6E]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7E06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [CA41]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [0B12]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [FE11]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [AD12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [0467]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [B312]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [1568]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [6F12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [F012]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [DF12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [0D13]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [1113]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5706]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[F711]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8BB4C                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E82956                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8B20D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8C40D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E8E831                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E82734                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E82B0D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E89203                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E83A0D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E8C436                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E88231                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL, 1		; No increment; need carry flag
  4981 00000600 7216                    	JC	SHORT SKIPGET
  4982 00000602 E88864                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985 00000607 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4986 00000609 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4987 0000060C 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4988 0000060E F9                      	STC				;DCR.			;AN000;
  4989 0000060F A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4990 00000612 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4991                                  SKIPGET:
  4992 00000618 58                      	POP	AX
  4993 00000619 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4994                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4995                                  	;jnc	short getbp_t
  4996                                  	;retn
  4997                                  getbp_t:
  4998 0000061B C42E[A205]              	LES	BP,[THISCDS]
  4999                                  	; 15/12/2022
  5000 0000061F 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5001                                  	; 07/12/2022
  5002                                  	;TEST	WORD [ES:BP+43H],8000H
  5003                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5004 00000624 7408                    	JZ	SHORT GETBP_CDS
  5005 00000626 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5006 0000062C F9                      	STC
  5007                                  GETBP_RETN:
  5008 0000062D C3                      	RETN
  5009                                  
  5010                                  GETBP_CDS:
  5011                                  	;LES	BP,[ES:BP+45H]
  5012 0000062E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5013                                  GOTDPB:
  5014                                  	; Load THISDPB from ES:BP
  5015 00000632 892E[8A05]              	MOV	[THISDPB],BP
  5016 00000636 8C06[8C05]              	MOV	[THISDPB+2],ES
  5017 0000063A C3                      	RETN
  5018                                  
  5019                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5020                                  
  5021                                  ;----------------------------------------------------------------------------
  5022                                  ;
  5023                                  ; Procedure Name : SYS_RETURN
  5024                                  ;
  5025                                  ; These are the general system call exit mechanisms. All internal system
  5026                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5027                                  ; is to set the user's flags and set his AX register for return.
  5028                                  ;
  5029                                  ;----------------------------------------------------------------------------
  5030                                  
  5031                                          ;procedure   SYS_RETURN,NEAR
  5032                                  SYS_RETURN:        
  5033                                          ;entry	SYS_RET_OK
  5034                                  SYS_RET_OK:   
  5035 0000063B E847FE                  	call    Get_User_Stack
  5036                                  		; turn off user's carry flag
  5037                                  SYS_RET_OK_clc: ; 25/06/2019 
  5038                                          ;;and	word [SI+16h],0FFFEh 
  5039                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5040                                          ; 25/06/2019
  5041 0000063E 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5042 00000642 EB10                    	JMP     SHORT DO_RET
  5043                                  
  5044                                          ;entry   SYS_RET_ERR
  5045                                  SYS_RET_ERR:        
  5046 00000644 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5047 00000646 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5048 00000649 E81A00                  	CALL	ErrorMap
  5049                                  
  5050                                  	;entry	From_GetSet
  5051                                  From_GetSet:
  5052 0000064C E836FE                          call    Get_User_Stack
  5053                                  		 ; signal carry to user
  5054                                  	;;or	word [SI+16h],1
  5055                                  	;OR	word [SI+user_env.user_F],f_Carry
  5056                                  	; 25/06/2019
  5057 0000064F 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5058 00000653 F9                      	STC			; also, signal internal error
  5059                                  DO_RET:
  5060                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5061 00000654 8904                    	MOV	[SI],AX
  5062 00000656 C3                      	RETN
  5063                                  
  5064                                  	;entry	FCB_RET_OK
  5065                                  FCB_RET_OK:
  5066                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5067                                  NO_OP:
  5068 00000657 30C0                    	XOR	AL,AL
  5069 00000659 C3                      	retn
  5070                                  
  5071                                  	;entry	FCB_RET_ERR
  5072                                  FCB_RET_ERR:
  5073 0000065A 30E4                    	XOR	AH,AH
  5074 0000065C 36A3[2403]              	mov	[ss:EXTERR],AX
  5075 00000660 E80300                  	CALL	ErrorMap
  5076 00000663 B0FF                    	MOV	AL,-1
  5077 00000665 C3                      	retn
  5078                                  
  5079                                  	;entry	ErrorMap
  5080                                  ErrorMap:
  5081 00000666 56                      	PUSH	SI
  5082                                  				; ERR_TABLE_21 is now in DOSDATA
  5083 00000667 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5084                                  				; SS override for FAILERR and EXTERR
  5085 0000066A 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5086 00000670 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5087                                  		 ; Ooops, this is the REAL reason
  5088                                  	;mov	word [SS:EXTERR],53h
  5089 00000672 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5090                                  EXTENDED_NORMAL:
  5091 00000679 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5092 0000067C 5E                      	POP	SI
  5093 0000067D C3                      	retn
  5094                                  
  5095                                  	;EndProc SYS_RETURN
  5096                                  
  5097                                  ;---------------------------------------------------------------------------
  5098                                  ;
  5099                                  ; Procedure Name : CAL_LK
  5100                                  ;
  5101                                  ; Inputs:
  5102                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5103                                  ;		(DS NEED not be DOSDATA)
  5104                                  ;	[EXTERR] is set with error
  5105                                  ; Function:
  5106                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5107                                  ; Outputs:
  5108                                  ;	[EXTERR_CLASS] set
  5109                                  ;	[EXTERR_ACTION] set
  5110                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5111                                  ; Destroys SI, FLAGS
  5112                                  ;
  5113                                  ;---------------------------------------------------------------------------
  5114                                  
  5115                                  	;procedure CAL_LK,NEAR
  5116                                  CAL_LK:
  5117 0000067E 1E                      	PUSH	DS
  5118 0000067F 50                      	PUSH	AX
  5119 00000680 53                      	PUSH	BX
  5120                                  
  5121                                  ;M048	Context DS		; DS:SI -> Table
  5122                                  ;
  5123                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5124                                  ; is DOSDATA
  5125                                  
  5126                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5127                                  	; 15/05/2019 - Retro DOS v4.0
  5128 00000681 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5129                                  
  5130                                  	; 18/07/2018
  5131                                  	;push	ss
  5132                                  	;pop	ds
  5133                                  
  5134 00000686 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5135                                  TABLK1:
  5136 0000068A AC                      	LODSB
  5137                                  
  5138 0000068B 3CFF                    	CMP	AL,0FFH
  5139 0000068D 7409                    	JZ	short GOT_VALS	; End of table
  5140 0000068F 38D8                    	CMP	AL,BL
  5141 00000691 7405                    	JZ	short GOT_VALS	; Got entry
  5142 00000693 83C603                  	ADD	SI,3		; Next table entry
  5143                                  	; 15/08/2018
  5144 00000696 EBF2                    	JMP	short TABLK1
  5145                                  
  5146                                  GOT_VALS:
  5147 00000698 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5148                                  
  5149 00000699 80FCFF                  	CMP	AH,0FFH
  5150 0000069C 7404                    	JZ	short NO_SET_ACT
  5151 0000069E 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5152                                  NO_SET_ACT:
  5153 000006A2 3CFF                    	CMP	AL,0FFH
  5154 000006A4 7403                    	JZ	short NO_SET_CLS
  5155 000006A6 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5156                                  NO_SET_CLS:
  5157 000006A9 AC                      	LODSB			; Get LOCUS
  5158                                  
  5159 000006AA 3CFF                    	CMP	AL,0FFH
  5160 000006AC 7403                    	JZ	short NO_SET_LOC
  5161 000006AE A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5162                                  NO_SET_LOC:
  5163 000006B1 5B                      	POP	BX
  5164 000006B2 58                      	POP	AX
  5165 000006B3 1F                      	POP	DS
  5166 000006B4 C3                      	retn
  5167                                  
  5168                                  	;EndProc CAL_LK
  5169                                  
  5170                                  ;---------------------------------------------------------------------------
  5171                                  ;
  5172                                  ; Procedure Name : ETAB_LK
  5173                                  ;
  5174                                  ; Inputs:
  5175                                  ;	AX is error code
  5176                                  ;	[USER_IN_AX] has AH value of system call involved
  5177                                  ; Function:
  5178                                  ;	Make sure error code is appropriate to this call.
  5179                                  ; Outputs:
  5180                                  ;	AX MAY be mapped error code
  5181                                  ;	[EXTERR] = Input AX
  5182                                  ; Destroys ONLY AX and FLAGS
  5183                                  ;
  5184                                  ;---------------------------------------------------------------------------
  5185                                  
  5186                                  	;procedure ETAB_LK,NEAR
  5187                                  
  5188                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5189 000006B5 1E                      	PUSH	DS
  5190 000006B6 56                      	PUSH	SI
  5191 000006B7 51                      	PUSH	CX
  5192 000006B8 53                      	PUSH	BX
  5193                                  
  5194                                  	;Context DS			; SS is DOSDATA
  5195                                  
  5196 000006B9 16                      	push	ss
  5197 000006BA 1F                      	pop	ds
  5198                                  
  5199 000006BB A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5200                                  
  5201                                  					; I21_MAP_E_TAB is now in DOSCODE
  5202 000006BE BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5203 000006C1 88C7                    	MOV	BH,AL			; Real code to BH
  5204 000006C3 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5205                                  TABLK2:
  5206                                  	; 15/05/2019 - Retro DOS v4.0
  5207 000006C7 2E                      	cs
  5208 000006C8 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5209                                  	
  5210                                  	; 18/07/2018 - Retro DOS v3.0
  5211                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5212                                  
  5213 000006C9 3CFF                    	CMP	AL,0FFH 		; End of table?
  5214 000006CB 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5215 000006CD 38D8                    	CMP	AL,BL			; Found call?
  5216 000006CF 740C                    	JZ	short GOT_CALL		; Yes
  5217 000006D1 86E0                    	XCHG	AH,AL			; Count to AL
  5218 000006D3 30E4                    	XOR	AH,AH			; Make word for add
  5219 000006D5 01C6                    	ADD	SI,AX			; Next table entry
  5220 000006D7 EBEE                    	JMP	short TABLK2
  5221                                  
  5222                                  NOT_IN_TABLE:
  5223 000006D9 88F8                    	MOV	AL,BH			; Restore original code
  5224 000006DB EB0C                    	JMP	SHORT NO_MAP
  5225                                  
  5226                                  GOT_CALL:
  5227 000006DD 88E1                    	MOV	CL,AH
  5228 000006DF 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5229                                  CHECK_CODE:
  5230                                  	; 15/05/2019 - Retro DOS v4.0
  5231 000006E1 2E                      	cs
  5232 000006E2 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5233                                  
  5234                                  	; 18/07/2018
  5235                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5236                                  
  5237 000006E3 38F8                    	CMP	AL,BH			; Code OK?
  5238 000006E5 7402                    	JZ	short NO_MAP		; Yes
  5239 000006E7 E2F8                    	LOOP	CHECK_CODE
  5240                                  NO_MAP:
  5241 000006E9 30E4                    	XOR	AH,AH			; AX is now valid code
  5242 000006EB 5B                      	POP	BX
  5243 000006EC 59                      	POP	CX
  5244 000006ED 5E                      	POP	SI
  5245 000006EE 1F                      	POP	DS
  5246 000006EF C3                      	retn
  5247                                  
  5248                                  	;EndProc ETAB_LK
  5249                                  
  5250                                  ; 18/07/2018 - Retro DOS v3.0
  5251                                  ;---------------------------------------------------------------------------
  5252                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5253                                  
  5254                                  ;IF installed ; (*)
  5255                                  
  5256                                  ;---------------------------------------------------------------------------
  5257                                  ;
  5258                                  ; Procedure Name : SetBad
  5259                                  ;
  5260                                  ; SetBad sets up info for bad functions
  5261                                  ;
  5262                                  ;---------------------------------------------------------------------------
  5263                                  
  5264                                  SetBad:
  5265                                  	;mov	ax,1
  5266 000006F0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5267                                  
  5268                                  	; MSDOS 3.3
  5269                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5270                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5271                                  
  5272                                  ;	set up ds to point to DOSDATA
  5273                                  
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275                                  	; MSDOS 6.0
  5276 000006F3 1E                      	push	ds
  5277                                  
  5278                                  	;getdseg <ds>
  5279 000006F4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5280                                  
  5281 000006F9 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5282                                  
  5283 000006FE 1F                      	pop	ds	  	;hkn; restore ds
  5284                                  
  5285 000006FF F9                      	STC
  5286 00000700 C3                      	retn
  5287                                  
  5288                                  ;--------------------------------------------------------------------------
  5289                                  ;
  5290                                  ; Procedure Name : BadCall
  5291                                  ;
  5292                                  ; BadCall is the initial routine for bad function calls
  5293                                  ;
  5294                                  ;--------------------------------------------------------------------------
  5295                                  
  5296                                  BadCall:
  5297 00000701 E8ECFF                  	call	SetBad
  5298 00000704 CB                      	retf
  5299                                  
  5300                                  ;--------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; OKCall always sets carry to off.
  5303                                  ;
  5304                                  ;-----------------------------------------------------------------------
  5305                                  
  5306                                  OKCall:
  5307 00000705 F8                      	CLC
  5308 00000706 CB                      	retf
  5309                                  
  5310                                  ;---------------------------------------------------------------------------
  5311                                  ;
  5312                                  ; Procedure Name : INT2F
  5313                                  ;
  5314                                  ; INT 2F handler works as follows:
  5315                                  ;   PUSH    AX
  5316                                  ;   MOV     AX,multiplex:function
  5317                                  ;   INT     2F
  5318                                  ;   POP     ...
  5319                                  ; The handler itself needs to make the AX available for the various routines.
  5320                                  ;
  5321                                  ;----------------------------------------------------------------------------
  5322                                  
  5323                                  ; 15/05/2019 - Retro DOS v4.0
  5324                                  
  5325                                  ;KERNEL_SEGMENT equ 70h
  5326                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5327                                  DOSBIODATASEG equ 70h
  5328                                  
  5329                                  ; retrodos4.s - offset in BIOSDATA
  5330                                  bios_i2f equ 5
  5331                                  
  5332                                  ;PUBLIC	Int2F
  5333                                  ;INT2F	PROC	FAR
  5334                                  
  5335                                  ; 15/05/2019
  5336                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5337                                  
  5338                                  ; 04/11/2022
  5339                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5340                                  
  5341                                  	; 05/01/2024	
  5342                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5343                                  	; 18/07/2018 - Retro DOS v3.0
  5344                                  INT2F:
  5345                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5346                                  INT2FNT:
  5347                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5348 00000707 FB                      	STI
  5349                                  	;cmp	ah,11h
  5350 00000708 80FC11                  	CMP	AH,MultNET
  5351 0000070B 750A                    	JNZ	short INT2FSHR
  5352                                  TestInstall:
  5353 0000070D 08C0                    	OR	AL,AL
  5354 0000070F 7403                    	JZ	short Leave2F
  5355                                  BadFunc:
  5356 00000711 E8DCFF                  	CALL	SetBad
  5357                                  
  5358                                  	;entry	Leave2F
  5359                                  Leave2F:
  5360 00000714 CA0200                  	RETF	2			; long return + clear flags off stack
  5361                                  
  5362                                  INT2FSHR:
  5363                                  	;cmp	ah,10h
  5364 00000717 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5365 0000071A 74F1                    	JZ	short TestInstall	; yes, check for installation
  5366                                  INT2FNLS:
  5367                                  	;cmp	ah,14h
  5368 0000071C 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5369 0000071F 74EC                    	JZ	short TestInstall	; yes check for installation
  5370                                  INT2FDOS:
  5371                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5372                                  
  5373                                  	; 18/07/2018
  5374                                  	; MSDOS 3.3
  5375                                  	;;cmp	ah,12h	
  5376                                  	;CMP	AH,MultDOS
  5377                                  	;jz	short DispatchDOS
  5378                                  	;iret
  5379                                  
  5380                                  	; 15/05/2019
  5381                                  	; MSDOS 6.0
  5382                                  	;cmp	ah,12h	; 07/12/2022
  5383 00000721 80FC12                  	CMP	AH,MultDOS
  5384 00000724 7503                    	JNZ	short check_win		;check if win386 broadcast
  5385 00000726 E9F201                  	jmp	DispatchDOS
  5386                                  
  5387                                  	; .... win386 .... 
  5388                                  
  5389                                  check_win:
  5390                                  	;cmp	ah,16h
  5391 00000729 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5392 0000072C 7408                    	je	short Win386_Msg
  5393                                  
  5394                                  	; M044
  5395                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5396                                  	; of Windows. If so, do special action of going and saving last para
  5397                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5398                                  	; bug
  5399                                  
  5400 0000072E 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5401                                  	;jne	short next_i2f		; no, chain on
  5402                                  	; 15/12/2022
  5403                                  	;jmp	winold_swap		; yes, do desired action
  5404 00000731 7442                    	je	short winold_swap
  5405 00000733 E90501                  	jmp	next_i2f
  5406                                  
  5407                                  	; 15/12/2022
  5408                                  ;next_i2f:
  5409                                  ;	;;;jmp	bios_i2f
  5410                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5411                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5412                                  ;	; 04/11/2022
  5413                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5414                                  
  5415                                  ;	IRET				; This assume that we are at the head
  5416                                  					; of the list
  5417                                  ;INT2F	ENDP
  5418                                  
  5419                                  ; 15/05/2019 - Retro DOS v4.0
  5420                                  
  5421                                  ; We have received a message from Win386. There are three possible
  5422                                  ; messages we could get from Win386:
  5423                                  ;
  5424                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5425                                  ;		  to the Win386 startup info structure.
  5426                                  ; Exit		- for this, we clear the IsWin386 flag.
  5427                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5428                                  ;		  has already been handled. this is indicated by setting
  5429                                  ;		  CX to a non-zero value.
  5430                                  
  5431                                  Win386_Msg:
  5432 00000736 1E                      	push	ds
  5433                                  
  5434                                  	;getdseg <DS>			; ds is DOSDATA
  5435 00000737 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5436                                  
  5437                                  	; For WIN386 2.xx instance data
  5438                                  
  5439 0000073C 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5440 0000073E 7503                    	jne	short Win386_Msg_exit
  5441 00000740 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5442                                  Win386_Msg_exit:
  5443 00000743 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5444 00000745 7503                    	jne	short Win386_Msg_devcall
  5445 00000747 E92C01                  	jmp	Win386_Leaving
  5446                                  Win386_Msg_devcall:
  5447 0000074A 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5448 0000074C 7503                    	jne	short Win386_Msg_init
  5449 0000074E E96001                  	jmp	Win386_Query
  5450                                  Win386_Msg_init:
  5451 00000751 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5452 00000753 7403                    	je	short Win386_Starting
  5453 00000755 E9E200                  	jmp	win_nexti2f		; no, return
  5454                                  Win386_Starting:
  5455                                  	; 17/12/2022
  5456 00000758 F6C201                  	test	dl,1
  5457                                  	;test	dx,1			; is this really win386?
  5458 0000075B 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5459 0000075D E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5460                                  Win386_vchk:
  5461                                  	; M018 -- start of block changes
  5462                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5463                                  	; than 030Ah, we skip the VxD presence check
  5464                                  
  5465                                  ;M067 -- Begin changes
  5466                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5467                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5468                                  ;So, we null out the VxD ptr before the check.
  5469                                  
  5470                                  	;mov	word [Win386_Info+6],0
  5471 00000760 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5472                                  	;mov	word [Win386_Info+8],0
  5473 00000766 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5474                                  
  5475                                  ;M067 -- End changes
  5476                                  
  5477                                  ;ifdef JAPAN
  5478                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5479                                  ;else
  5480 0000076C 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5481                                  ;endif
  5482                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5483 00000770 724E                    	jb	short Win386_vxd
  5484 00000772 E9DD00                  	jmp	noVxD31
  5485                                  
  5486                                  	; 15/12/2022
  5487                                  winold_swap:
  5488 00000775 1E                      	push	ds
  5489 00000776 06                      	push	es
  5490 00000777 56                      	push	si
  5491 00000778 57                      	push	di
  5492 00000779 51                      	push	cx
  5493                                  
  5494                                  	;getdseg <ds>			;ds = DOSDATA
  5495 0000077A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5496                                  
  5497 0000077F 3C01                    	cmp	al,1			;swap Windows out call
  5498 00000781 751B                    	jne	short swapin		;no, check if Swap in call
  5499 00000783 E88801                  	call	getwinlast
  5500 00000786 1E                      	push	ds
  5501 00000787 07                      	pop	es
  5502 00000788 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5503 0000078A 31F6                    	xor	si,si
  5504 0000078C BF[0600]                	mov	di,WinoldPatch1
  5505 0000078F B90800                  	mov	cx,8
  5506 00000792 FC                      	cld
  5507 00000793 51                      	push	cx
  5508 00000794 F3A4                    	rep	movsb			;save first 8 bytes
  5509 00000796 59                      	pop	cx
  5510 00000797 BF[CD0D]                	mov	di,WinoldPatch2
  5511 0000079A F3A4                    	rep	movsb			;save next 8 bytes
  5512 0000079C EB1B                    	jmp	short winold_done
  5513                                  swapin:
  5514 0000079E 3C02                    	cmp	al,2			;swap Windows in call?
  5515 000007A0 7517                    	jne	short winold_done	;no, something else, pass it on
  5516 000007A2 E86901                  	call	getwinlast
  5517 000007A5 8EC6                    	mov	es,si
  5518 000007A7 31FF                    	xor	di,di
  5519 000007A9 BE[0600]                	mov	si,WinoldPatch1
  5520 000007AC B90800                  	mov	cx,8
  5521 000007AF FC                      	cld
  5522 000007B0 51                      	push	cx
  5523 000007B1 F3A4                    	rep	movsb			;restore first 8 bytes
  5524 000007B3 59                      	pop	cx
  5525 000007B4 BE[CD0D]                	mov	si,WinoldPatch2
  5526 000007B7 F3A4                    	rep	movsb			;restore next 8 bytes
  5527                                  winold_done:
  5528 000007B9 59                      	pop	cx
  5529 000007BA 5F                      	pop	di
  5530 000007BB 5E                      	pop	si
  5531 000007BC 07                      	pop	es
  5532 000007BD 1F                      	pop	ds
  5533 000007BE EB7B                    	jmp	short next_i2f		;chain on
  5534                                  	; 15/12/2022
  5535                                  	;jmp	next_i2f	
  5536                                  
  5537                                  Win386_vxd:
  5538 000007C0 50                      	push	ax
  5539 000007C1 53                      	push	bx
  5540 000007C2 51                      	push	cx
  5541 000007C3 52                      	push	dx
  5542 000007C4 56                      	push	si
  5543 000007C5 57                      	push	di			; save regs !!dont change order!!
  5544                                  
  5545 000007C6 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5546 000007CA 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5547 000007CD 741F                    	je	short Vxd31		; N: continue
  5548                                  					; Y: save arena associated with 
  5549                                  					;    umb_head
  5550                                  
  5551 000007CF C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5552                                  					; umb_arena
  5553 000007D4 1E                      	push	ds
  5554 000007D5 06                      	push	es
  5555                                  
  5556                                  	;mov	ax,ds
  5557                                  	;mov	es,ax			; es - > dosdata
  5558                                  	; 05/01/2024
  5559 000007D6 1E                      	push	ds
  5560 000007D7 07                      	pop	es
  5561                                  
  5562 000007D8 8EDB                    	mov	ds,bx
  5563 000007DA 31F6                    	xor	si,si			; ds:si -> umb_head
  5564                                  
  5565 000007DC FC                      	cld
  5566                                  
  5567 000007DD BF[FA11]                	mov	di,UmbSave1
  5568 000007E0 B90B00                  	mov	cx,11
  5569 000007E3 F3A4                    	rep	movsb
  5570                                  
  5571 000007E5 BF[D50D]                	mov	di,UmbSave2
  5572                                  	;mov	cx,5
  5573                                  	; 18/12/2022
  5574 000007E8 B105                    	mov	cl,5
  5575 000007EA F3A4                    	rep	movsb	
  5576                                  
  5577 000007EC 07                      	pop	es
  5578 000007ED 1F                      	pop	ds			; M062 - End
  5579                                  
  5580                                  Vxd31:
  5581                                  	;test	byte [DOS_FLAG],2
  5582 000007EE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5583 000007F3 7408                    	jz	short Dont_Supress		; M066
  5584 000007F5 5F                      	pop	di				; M066
  5585 000007F6 5E                      	pop	si				; M066
  5586 000007F7 5A                      	pop	dx				; M066
  5587 000007F8 59                      	pop	cx				; M066
  5588 000007F9 5B                      	pop	bx				; M066
  5589 000007FA 58                      	pop	ax				; M066
  5590 000007FB EB55                    	jmp	short noVxD31			; M066
  5591                                  
  5592                                  	; We check here if the VxD is available in the root of the boot drive. 
  5593                                  	; We do an extended open to suppress any error messages
  5594                                  	
  5595                                  Dont_Supress:
  5596 000007FD A0[6900]                	mov	al,[BOOTDRIVE]
  5597 00000800 0440                    	add	al,'A' - 1		; get drive letter
  5598 00000802 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5599                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5600                                  	;mov	al,0			; no extended attributes
  5601                                  	; 18/12/2022
  5602 00000805 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5603 00000808 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5604                                  					; no inherit, suppress crit err
  5605 0000080B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5606 0000080E BA0100                  	mov	dx,1			; fail if file does not exist
  5607 00000811 BE[3110]                	mov	si,VxDpath	
  5608                                  					; path of VxD file
  5609 00000814 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5610                                  
  5611 00000817 CD21                    	int	21h			; do extended open
  5612                                  
  5613 00000819 5F                      	pop	di
  5614 0000081A 5E                      	pop	si
  5615 0000081B 5A                      	pop	dx
  5616 0000081C 59                      	pop	cx
  5617                                  
  5618 0000081D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5619                                  
  5620                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5621                                  	; to indicate error to Windows after displaying message to user that 
  5622                                  	; VxD needs to be present to run Windows in enhanced mode.
  5623                                  
  5624 0000081F 52                      	push	dx
  5625 00000820 1E                      	push	ds
  5626 00000821 56                      	push	si
  5627 00000822 BE[B709]                	mov	si,NoVxDErrMsg
  5628 00000825 0E                      	push	cs
  5629 00000826 1F                      	pop	ds
  5630 00000827 B96300                  	mov	cx,VxDMesLen ; 99	;
  5631 0000082A B402                    	mov	ah,2			; write char to console
  5632 0000082C FC                      	cld
  5633                                  vxdlp:
  5634 0000082D AC                      	lodsb
  5635 0000082E 86D0                    	xchg	dl,al			; get char in dl
  5636 00000830 CD21                    	int	21h
  5637 00000832 E2F9                    	loop	vxdlp
  5638                                  
  5639 00000834 5E                      	pop	si
  5640 00000835 1F                      	pop	ds
  5641 00000836 5A                      	pop	dx
  5642 00000837 5B                      	pop	bx
  5643 00000838 58                      	pop	ax			;all registers restored
  5644 00000839 41                      	inc	cx			;cx != 0 to indicate error
  5645                                  	; 15/12/22022
  5646                                  	;jmp	win_nexti2f		;chain on
  5647                                  	;jmp	short win_nexti2f
  5648                                  
  5649                                  	; 15/12/2022
  5650                                  win_nexti2f:
  5651 0000083A 1F                      	pop	ds
  5652                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5653                                  	; 15/12/2022
  5654                                  next_i2f:
  5655                                  	;;;jmp	bios_i2f
  5656                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5657                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5658                                  	; 04/11/2022
  5659 0000083B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5660                                  
  5661                                  VxDthere:
  5662 00000840 89C3                    	mov	bx,ax
  5663 00000842 B43E                    	mov	ah,CLOSE ; 3Eh
  5664 00000844 CD21                    	int	21h			;close the file
  5665                                  
  5666                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5667                                  
  5668                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5669                                  	;mov	bx,Win386_Info
  5670                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5671                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5672                                  	; 15/12/2022
  5673 00000846 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5674 0000084C 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5675                                  
  5676 00000850 5B                      	pop	bx
  5677 00000851 58                      	pop	ax
  5678                                  noVxD31:
  5679                                  	; M018; End of block changes
  5680                                  
  5681 00000852 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5682 00000857 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5683                                  
  5684                                  	; M002;
  5685                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5686                                  
  5687 0000085C 52                      	push	dx			; M002
  5688 0000085D 89DA                    	mov	dx,bx			; M002
  5689                                  					; point ES:BX to Win386_Info ; M002
  5690 0000085F BB[E20F]                	mov	bx,Win386_Info 
  5691 00000862 895702                  	mov	[bx+2],dx		; M002
  5692 00000865 8C4704                  	mov	[bx+4],es		; M002
  5693 00000868 5A                      	pop	dx			; M002
  5694 00000869 1E                      	push	ds			; M002
  5695 0000086A 07                      	pop	es			; M002
  5696                                  	;jmp	win_nexti2f		; M002
  5697                                  	; 15/12/2022
  5698 0000086B EBCD                    	jmp	short win_nexti2f
  5699                                  
  5700                                  	; 15/12/2022
  5701                                  	; Code to return Win386 2.xx instance table
  5702                                  OldWin386Init:
  5703 0000086D 58                      	pop	ax			; discard ds pushed on stack
  5704 0000086E BE[CD11]                	mov	si,OldInstanceJunk 
  5705                                  					; ds:si = instance table
  5706 00000871 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5707                                  	;jmp	next_i2f
  5708                                  	; 15/12/2022
  5709 00000874 EBC5                    	jmp	short next_i2f
  5710                                  
  5711                                  Win386_Leaving:
  5712                                  	; 15/12/2022
  5713 00000876 F6C201                  	test 	dl,1
  5714                                  	;test	dx,1			; is this really win386?
  5715                                  	;jz	short Win386_Leaving_c
  5716                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5717                                  	; 15/12/2022
  5718 00000879 75BF                    	jnz	short win_nexti2f	
  5719                                  
  5720                                  Win386_Leaving_c:
  5721                                  					; M062 - Start
  5722 0000087B 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5723                                  					;    up.
  5724 00000880 7523                    	jne	short noumb		; N: not saved 
  5725 00000882 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5726                                  					;    previously saved umb_head
  5727                                  	; 05/01/2024
  5728                                  	;push	ax ; (not necessary)
  5729 00000887 06                      	push	es
  5730 00000888 51                      	push	cx
  5731 00000889 56                      	push	si
  5732 0000088A 57                      	push	di
  5733                                  
  5734                                  	;mov	ax,[UMB_HEAD]
  5735                                  	;mov	es,ax
  5736                                  	; 05/01/2024
  5737 0000088B 8E06[8C00]              	mov	es,[UMB_HEAD]
  5738 0000088F 31FF                    	xor	di,di			; es:di -> umb_head
  5739                                  
  5740 00000891 FC                      	cld
  5741                                  
  5742 00000892 BE[FA11]                	mov	si,UmbSave1
  5743 00000895 B90B00                  	mov	cx,11
  5744 00000898 F3A4                    	rep	movsb
  5745 0000089A BE[D50D]                	mov	si,UmbSave2
  5746                                  	;mov	cx,5
  5747                                  	; 18/12/2022
  5748 0000089D B105                    	mov	cl,5
  5749 0000089F F3A4                    	rep	movsb
  5750                                  
  5751 000008A1 5F                      	pop	di
  5752 000008A2 5E                      	pop	si
  5753 000008A3 59                      	pop	cx
  5754 000008A4 07                      	pop	es
  5755                                  	; 05/01/2024
  5756                                  	;pop	ax
  5757                                  noumb:					; M062 - End
  5758 000008A5 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5759 000008AA 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5760 000008AF EB89                    	jmp	short win_nexti2f
  5761                                  
  5762                                  ;	; 15/12/2022
  5763                                  ;	; Code to return Win386 2.xx instance table
  5764                                  ;OldWin386Init:
  5765                                  ;	pop	ax			; discard ds pushed on stack
  5766                                  ;	mov	si,OldInstanceJunk 
  5767                                  ;					; ds:si = instance table
  5768                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5769                                  ;	;jmp	next_i2f
  5770                                  ;	; 15/12/2022
  5771                                  ;	jmp	short _next_i2f
  5772                                  
  5773                                  Win386_Query:
  5774 000008B1 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5775 000008B4 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5776 000008B6 09C9                    	or	cx,cx			; is it an instance query?
  5777 000008B8 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5778 000008BA 41                      	inc	cx			; indicate that data is instanced
  5779                                  ;
  5780                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5781                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5782                                  ; M001;  
  5783                                  ; M001; OFFSETS STRUC
  5784                                  ; M001; 	Major_version	db	?
  5785                                  ; M001; 	Minor_version	db	?
  5786                                  ; M001; 	SaveDS		dw	?
  5787                                  ; M001; 	SaveBX		dw	?
  5788                                  ; M001; 	Indos		dw	?
  5789                                  ; M001; 	User_id		dw	?
  5790                                  ; M001; 	CritPatch	dw	?
  5791                                  ; M001; OFFSETS	ENDS
  5792                                  ; M001; 
  5793                                  ; M001; User_Id is the only variable really important for proper functioning  
  5794                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5795                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5796                                  ; M001; pass this table because Win386 depends on this table to get the 
  5797                                  ; M001; User_Id offset.
  5798                                  ; M001; 
  5799 000008BB BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5800 000008BE 1E                      	push	ds			; M001
  5801 000008BF 07                      	pop	es			; es:bx points at offset table ; M001
  5802 000008C0 EB40                    	jmp	short PopIret		; M001
  5803                                  
  5804                                  ; 15/12/2022
  5805                                  ;	; Code to return Win386 2.xx instance table
  5806                                  ;OldWin386Init:
  5807                                  ;	pop	ax			; discard ds pushed on stack
  5808                                  ;	mov	si,OldInstanceJunk 
  5809                                  ;					; ds:si = instance table
  5810                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5811                                  ;	;jmp	next_i2f
  5812                                  ;	; 15/12/2022
  5813                                  ;	jmp	short _next_i2f
  5814                                  
  5815                                  dosmgr_func:
  5816 000008C2 49                      	dec	cx
  5817 000008C3 7435                    	jz	short win386_patch	; call to patch DOS
  5818 000008C5 49                      	dec	cx
  5819 000008C6 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5820 000008C8 49                      	dec	cx
  5821 000008C9 7439                    	jz	short win386_size	; get size of DOS data structures
  5822 000008CB 49                      	dec	cx
  5823 000008CC 7428                    	jz	short win386_inst	; instance more data
  5824                                  	;dec	cx
  5825                                  	;jnz	short PopIret		; no functions above this
  5826                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5827 000008CE E232                    	loop	PopIret
  5828                                  
  5829                                  	; Get DOS device driver size -- es:di points at device driver header
  5830                                  	; In DOS 4.x, the para before the device header contains an arena 
  5831                                  	; header for the driver.
  5832                                  
  5833 000008D0 8CC0                    	mov	ax,es			; ax = device header segment
  5834                                  
  5835                                  	; We check to see if we have a memory arena for this device driver. 
  5836                                  	; The way to do this would be to look at the previous para to see if
  5837                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5838                                  	; in the arena is the same as the device header segment. These two 
  5839                                  	; checks together should take care of all cases
  5840                                  
  5841 000008D2 48                      	dec	ax			; get arena header
  5842 000008D3 06                      	push	es
  5843 000008D4 8EC0                    	mov	es,ax			; arena header for device driver
  5844                                  
  5845 000008D6 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5846 000008DA 7517                    	jnz	short cantsize		; no, cant size this driver
  5847 000008DC 40                      	inc	ax			; get back device header segment
  5848 000008DD 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5849 000008E1 7510                    	jnz	short cantsize		; no, not a proper arena
  5850                                  
  5851 000008E3 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5852 000008E7 07                      	pop	es
  5853                                  
  5854                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5855                                  	; Speed is not critical and so we choose the shortest method 
  5856                                  	; -- use "mul"
  5857                                  
  5858 000008E8 BB1000                  	mov	bx,16
  5859 000008EB F7E3                    	mul	bx
  5860 000008ED 89C1                    	mov	cx,ax
  5861 000008EF 89D3                    	mov	bx,dx
  5862 000008F1 EB09                    	jmp	short win386_done	; return with device driver size
  5863                                  cantsize:
  5864 000008F3 07                      	pop	es
  5865 000008F4 31C0                    	xor	ax,ax
  5866                                  win386_inst:	; 05/01/2024
  5867 000008F6 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5868 000008F8 EB08                    	jmp	short PopIret		; return
  5869                                  
  5870                                  win386_patch:
  5871                                  	; dx contains bits marking the patches to be applied. We return 
  5872                                  	; the field with all bits set to indicate that all patches have been
  5873                                  	; done
  5874                                  
  5875 000008FA 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5876                                   	;jmp	short win386_done	; done, return
  5877                                  	; 15/12/2022
  5878                                  	; 15/12/2022
  5879                                  win386_done:
  5880 000008FC B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5881 000008FF BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5882                                  PopIret:
  5883 00000902 1F                      	pop	ds
  5884 00000903 CF                      	iret	
  5885                                  
  5886                                  win386_size:
  5887                                  	; Return the size of DOS data structures -- currently only CDS size
  5888                                  
  5889                                  	; 17/12/2022
  5890 00000904 F6C201                  	test	dl,1
  5891                                  	;test	dx,1			; check for CDS size bit
  5892 00000907 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5893                                  
  5894 00000909 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5895 0000090C EBEE                    	jmp	short win386_done	; return with the size
  5896                                  
  5897                                  ; 05/01/2024
  5898                                  %if 0
  5899                                  win386_inst:
  5900                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5901                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5902                                  	; this by returning a status of not previously instanced. The basic
  5903                                  	; structure of these things have not changed and so the current
  5904                                  	; DOSMGR code should be able to work it out
  5905                                  
  5906                                  	xor	dx,dx			; make sure dx has a not done value
  5907                                  	jmp	short PopIret		; skip done indication
  5908                                  %endif
  5909                                  
  5910                                  	; 15/12/2022
  5911                                  ;win386_done:
  5912                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5913                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5914                                  ;PopIret:
  5915                                  ;	pop	ds
  5916                                  ;	iret				; return back up the chain
  5917                                  
  5918                                  	; 15/12/2022
  5919                                  ;win_nexti2f:
  5920                                  	;pop	ds
  5921                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5922                                  
  5923                                  ;End WIN386 support
  5924                                  
  5925                                  ; 15/05/2019
  5926                                  
  5927                                  ;M044; Start of changes
  5928                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5929                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5930                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5931                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5932                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5933                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5934                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5935                                  ; last para of the Windows memory block and then restore this para on the
  5936                                  ; Windows swapin callout. 
  5937                                  
  5938                                  getwinlast:
  5939                                  	; 07/12/2022
  5940 0000090E 8B36[3003]              	mov	si,[CurrentPDB]
  5941 00000912 4E                      	dec	si
  5942 00000913 8EC6                    	mov	es,si
  5943 00000915 2603360300              	add	si,[es:3]
  5944 0000091A C3                      	retn
  5945                                  
  5946                                  ; 15/12/2022
  5947                                  %if 0
  5948                                  winold_swap:
  5949                                  	push	ds
  5950                                  	push	es
  5951                                  	push	si
  5952                                  	push	di
  5953                                  	push	cx
  5954                                  
  5955                                  	;getdseg <ds>			;ds = DOSDATA
  5956                                  	mov	ds,[cs:DosDSeg]
  5957                                  
  5958                                  	cmp	al,1			;swap Windows out call
  5959                                  	jne	short swapin		;no, check if Swap in call
  5960                                  	call	getwinlast
  5961                                  	push	ds
  5962                                  	pop	es
  5963                                  	mov	ds,si			;ds = memory arena of Windows
  5964                                  	xor	si,si
  5965                                  	mov	di,WinoldPatch1
  5966                                  	mov	cx,8
  5967                                  	cld
  5968                                  	push	cx
  5969                                  	rep	movsb			;save first 8 bytes
  5970                                  	pop	cx
  5971                                  	mov	di,WinoldPatch2
  5972                                  	rep	movsb			;save next 8 bytes
  5973                                  	jmp	short winold_done
  5974                                  swapin:
  5975                                  	cmp	al,2			;swap Windows in call?
  5976                                  	jne	short winold_done	;no, something else, pass it on
  5977                                  	call	getwinlast
  5978                                  	mov	es,si
  5979                                  	xor	di,di
  5980                                  	mov	si,WinoldPatch1
  5981                                  	mov	cx,8
  5982                                  	cld
  5983                                  	push	cx
  5984                                  	rep	movsb			;restore first 8 bytes
  5985                                  	pop	cx
  5986                                  	mov	si,WinoldPatch2
  5987                                  	rep	movsb			;restore next 8 bytes
  5988                                  winold_done:
  5989                                  	pop	cx
  5990                                  	pop	di
  5991                                  	pop	si
  5992                                  	pop	es
  5993                                  	pop	ds
  5994                                  	jmp	next_i2f		;chain on
  5995                                  
  5996                                  %endif
  5997                                  
  5998                                  ;M044; End of changes
  5999                                  
  6000                                  ; 15/05/2019
  6001                                  
  6002                                  DispatchDOS:
  6003 0000091B 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6004 00000920 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6005 00000925 50                      	PUSH	AX			; push index
  6006 00000926 55                      	PUSH	BP
  6007 00000927 89E5                    	MOV	BP,SP
  6008                                  		; stack looks like:
  6009                                  		;   0	BP
  6010                                  		;   2	DISPATCH
  6011                                  		;   4	TABLE
  6012                                  		;   6	RETURN
  6013                                  		;   8	LONG-RETURN
  6014                                  		;   C	FLAGS
  6015                                  		;   E	AX
  6016                                  	
  6017 00000929 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6018 0000092C 5D                      	POP	BP
  6019 0000092D E8F508                  	call	TableDispatch
  6020 00000930 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6021                                  
  6022                                  INT2F_etcetera:
  6023                                  	;entry	DosGetGroup
  6024                                  DosGetGroup:
  6025                                  	; MSDOS 3.3
  6026                                  	;push	cs
  6027                                  	;pop	ds
  6028                                  	;retn
  6029                                  
  6030                                  	; MSDOS 6.0
  6031                                  ;SR; Cannot use CS now
  6032                                  ;
  6033                                  ;	PUSH	CS
  6034                                  ;	POP	DS
  6035                                  
  6036                                  	; 04/11/2022
  6037                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6038                                  
  6039                                  	;getdseg <ds>
  6040 00000933 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6041 00000938 C3                      	retn
  6042                                  
  6043                                  	;entry	DOSInstall
  6044                                  DOSInstall:
  6045 00000939 B0FF                    	MOV	AL,0FFh
  6046 0000093B C3                      	retn
  6047                                  
  6048                                  ;ENDIF ; (*)
  6049                                  
  6050                                  
  6051                                  ; 15/05/2019 - Retro DOS v4.0
  6052                                  
  6053                                  ;------------------------------------------------------------------------
  6054                                  ;
  6055                                  ; Procedure Name : RW32_CONVERT
  6056                                  ;
  6057                                  ;Input: same as ABSDRD and ABSDWRT
  6058                                  ;	 ES:BP -> DPB
  6059                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6060                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6061                                  ;	 carry clear, parms ok
  6062                                  ;
  6063                                  ;------------------------------------------------------------------------
  6064                                  
  6065                                  	; 06/01/2024
  6066                                  RW32_CONVERT:
  6067 0000093C 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6068 0000093F 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6069 00000941 49                      	dec	cx ; *
  6070 00000942 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6071 00000943 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6072 00000944 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6073 00000948 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6074 0000094C 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6075 0000094F 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6076                                  	;INC	DL			;>32mb			;AN000;
  6077                                  	; 17/12/2022
  6078 00000951 42                      	inc	dx
  6079 00000952 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6080 00000954 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6081 00000956 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6082                                  letold:
  6083 00000958 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6084 00000959 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6085 0000095A 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6086                                  
  6087 0000095C 1E                      	push	ds
  6088                                  	;getdseg <ds>
  6089 0000095D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6090 00000962 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6091 00000968 1F                      	pop	ds
  6092                                  
  6093 00000969 F9                      	STC				;>32mb			;AN000;
  6094 0000096A C3                      	retn				;>32mb			;AN000;
  6095                                  
  6096                                  new32format:
  6097                                  	;mov	dx,[bx+2]
  6098 0000096B 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6099                                  
  6100 0000096E 1E                      	push	ds			; set up ds to DOSDATA
  6101                                  	;getdseg <ds>
  6102 0000096F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6103 00000974 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6104 00000978 1F                      	pop	ds
  6105                                  
  6106 00000979 8B17                    	mov	dx,[bx]
  6107                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6108                                  	;mov	cx,[bx+4]
  6109 0000097B 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6110                                  	;lds	bx,[bx+6]
  6111 0000097E C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6112                                  old_style:				;>32mb			;AN000;
  6113                                  	; 06/01/2024
  6114                                  	; cf=0
  6115                                  	;CLC				;>32mb			;AN000;
  6116 00000981 C3                      	retn				;>32mb			;AN000;
  6117                                  
  6118                                  ;------------------------------------------------------------------------
  6119                                  ;
  6120                                  ; Procedure Name : Fastxxx_Purge
  6121                                  ;
  6122                                  ; Input: None
  6123                                  ; Functions: Purge Fastopen/ Cache Buffers
  6124                                  ; Output: None
  6125                                  ;
  6126                                  ;------------------------------------------------------------------------
  6127                                  
  6128                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6129                                  
  6130                                  Fastxxx_Purge:
  6131 00000982 50                      	PUSH	AX			; save regs.	;AN000;
  6132 00000983 56                      	PUSH	SI						;AN000;
  6133 00000984 52                      	PUSH	DX						;AN000;
  6134                                  topen:
  6135 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6136                                  	;getdseg <ds>
  6137 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6138                                  
  6139 0000098B F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6140                                  					; fastopen installed ?	;AN000;
  6141 00000990 1F                      	pop	ds
  6142 00000991 740B                    	JZ	short nofast		; no			;AN000;
  6143 00000993 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6144                                  dofast:
  6145 00000995 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6146                                  	;;mov	dl,[es:bp+0]
  6147                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6148                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6149                                  	; 15/12/2022
  6150 00000997 268A5600                	mov	dl,[es:bp]
  6151                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6152 0000099B E8591D                  	call	Fast_Dispatch
  6153                                  nofast:
  6154 0000099E 5A                      	POP	DX						;AN000;
  6155 0000099F 5E                      	POP	SI			; restore regs		;AN000;
  6156 000009A0 58                      	POP	AX			 			;AN000;
  6157 000009A1 C3                      	retn				; exit
  6158                                  
  6159                                  ;============================================================================
  6160                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6161                                  ;============================================================================
  6162                                  ; 29/04/2019 - Retro DOS v4.0
  6163                                  
  6164                                  ;include dossym.inc
  6165                                  ;include dosmac.inc
  6166                                  ;include doscntry.inc
  6167                                  
  6168                                  ; DOSCODE Segment
  6169                                  
  6170                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6171                                  ; ---------------------------------------------------------------------------
  6172                                  ;include divmes.inc
  6173                                  
  6174                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6175                                  ; -------------------------------------
  6176                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6177                                  
  6178                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6179                                  	;PUBLIC	DIVMES
  6180                                  
  6181 000009A2 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6181 000009AB 6F766572666C6F770D-
  6181 000009B4 0A                 
  6182                                  
  6183                                  	;PUBLIC	DivMesLen
  6184                                  DivMesLen:
  6185 000009B5 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6186                                  
  6187                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6188                                  ; -------------------------------------
  6189                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6190                                  
  6191                                  ; (MSDOS 6.0)
  6192                                  ; VxD not found error message
  6193                                  
  6194                                  NoVxDErrMsg:
  6195 000009B7 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6195 000009C0 686176652074686520-
  6195 000009C9 66696C652057494E41-
  6195 000009D2 32302E33383620696E-
  6195 000009DB 2074686520726F6F74-
  6195 000009E4 206F6620796F757220-
  6195 000009ED 626F6F742064726976-
  6195 000009F6 65                 
  6196 000009F7 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6196 00000A00 57696E646F77732069-
  6196 00000A09 6E20456E68616E6365-
  6196 00000A12 64204D6F64650D0A   
  6197                                  
  6198                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6199                                  
  6200                                  ; 13/05/2019 - Retro DOS v4.0
  6201                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6202                                  
  6203                                  ;include yesno.asm  (MNSDOS 6.0)
  6204                                  ; -------------------------------------
  6205                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6206                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6207                                  
  6208                                  ; This is for country Yes and No
  6209                                  
  6210 00000A1A 59                      NLS_YES:	db 'Y'
  6211 00000A1B 4E                      NLS_NO:		db 'N'
  6212 00000A1C 79                      NLS_yes2:	db 'y'
  6213 00000A1D 6E                      NLS_no2:	db 'n'
  6214                                  
  6215                                  ; ---------------------------------------------------------------------------
  6216                                  
  6217                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6219                                  
  6220                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6221                                  
  6222                                  ; The following two tables implement the current buffered input editing
  6223                                  ; routines. The tables are pairwise associated in reverse order for ease
  6224                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6225                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6226                                  
  6227                                  	;PUBLIC	CANCHAR
  6228                                  CANCHAR:
  6229 00000A1E 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6230                                  	
  6231                                  	;PUBLIC	ESCCHAR
  6232                                  ESCCHAR:
  6233 00000A1F 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6234                                  	
  6235                                  	;IF	NOT Rainbow
  6236                                  
  6237                                  ESCTAB:	; LABEL BYTE
  6238                                  
  6239                                  	;IF	IBM
  6240 00000A20 40                      	DB	64		; Ctrl-Z - F6
  6241 00000A21 4D                      	DB	77		; Copy one char - -->
  6242 00000A22 3B                      	DB	59		; Copy one char - F1
  6243 00000A23 53                      	DB	83		; Skip one char - DEL
  6244 00000A24 3C                      	DB	60		; Copy to char - F2
  6245 00000A25 3E                      	DB	62		; Skip to char - F4
  6246 00000A26 3D                      	DB	61		; Copy line - F3
  6247 00000A27 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6248 00000A28 3F                      	DB	63		; Reedit line (new template) - F5
  6249 00000A29 4B                      	DB	75		; Backspace - <--
  6250 00000A2A 52                      	DB	82		; Enter insert mode - INS (toggle)
  6251 00000A2B 52                      	DB	82		; Exit insert mode - INS (toggle)
  6252 00000A2C 41                      	DB	65		; Escape character - F7
  6253 00000A2D 41                      	DB	65		; End of table
  6254                                  	;ENDIF
  6255                                  
  6256                                  ESCEND: ; LABEL BYTE
  6257                                  
  6258                                  ESCTABLEN EQU ESCEND-ESCTAB
  6259                                  
  6260                                  ESCFUNC: ; LABEL WORD
  6261                                  	
  6262 00000A2E [1A14]                  	short_addr  GETCH	; Ignore the escape sequence
  6263 00000A30 [9714]                  	short_addr  TWOESC
  6264 00000A32 [8C15]                  	short_addr  EXITINS
  6265 00000A34 [8C15]                  	short_addr  ENTERINS
  6266 00000A36 [9214]                  	short_addr  BACKSP
  6267 00000A38 [7815]                  	short_addr  REEDIT
  6268 00000A3A [7F14]                  	short_addr  KILNEW
  6269 00000A3C [0E15]                  	short_addr  COPYLIN
  6270 00000A3E [4015]                  	short_addr  SKIPSTR
  6271 00000A40 [1415]                  	short_addr  COPYSTR
  6272 00000A42 [3715]                  	short_addr  SKIPONE
  6273 00000A44 [1915]                  	short_addr  COPYONE
  6274 00000A46 [1915]                  	short_addr  COPYONE
  6275 00000A48 [9315]                  	short_addr  CTRLZ
  6276                                  
  6277                                  	;ENDIF
  6278                                  
  6279                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6280                                  ; ---------------------------------------------------------------------------
  6281                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6282                                  
  6283                                  ; OEMFunction key is expected to process a single function
  6284                                  ;   key input from a device and dispatch to the proper
  6285                                  ;   routines leaving all registers UNTOUCHED.
  6286                                  ;
  6287                                  ; Inputs:   CS, SS are DOSGROUP
  6288                                  ; Outputs:  None. This function is expected to JMP to onw of
  6289                                  ;           the following labels:
  6290                                  ;
  6291                                  ;           GetCh       - ignore the sequence
  6292                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6293                                  ;           ExitIns     - toggle insert mode
  6294                                  ;           EnterIns    - toggle insert mode
  6295                                  ;           BackSp      - move backwards one space
  6296                                  ;           ReEdit      - reedit the line with a new template
  6297                                  ;           KilNew      - discard the current line and start from scratch
  6298                                  ;           CopyLin     - copy the rest of the template into the line
  6299                                  ;           SkipStr     - read the next character and skip to it in the template
  6300                                  ;           CopyStr     - read next char and copy from template to line until char
  6301                                  ;           SkipOne     - advance position in template one character
  6302                                  ;           CopyOne     - copy next character in template into line
  6303                                  ;           CtrlZ       - place a ^Z into the template
  6304                                  ; Registers that are allowed to be modified by this function are:
  6305                                  ;           AX, CX, BP
  6306                                  
  6307                                  ; 13/05/2019 - Retro DOS v4.0
  6308                                  ; -------------------------------------
  6309                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6310                                  
  6311                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6314                                  
  6315                                  OEMFunctionKey:
  6316 00000A4A E82F09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6317 00000A4D B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6318 00000A4F 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6319 00000A50 BF[200A]                	MOV     DI,ESCTAB		; offset of second byte table
  6320 00000A53 06                      	push	es
  6321 00000A54 0E                      	push	cs
  6322 00000A55 07                      	pop	es
  6323 00000A56 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6324 00000A58 07                      	pop	es
  6325 00000A59 5F                      	POP     DI                      ; restore DI
  6326 00000A5A D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6327 00000A5C 89CD                    	MOV     BP,CX                   ; move to indexable register
  6328                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6329 00000A5E 2EFFA6[2E0A]            	JMP	word [CS:BP+ESCFUNC]
  6330                                  
  6331                                  ;DOSCODE ENDS
  6332                                  	
  6333                                  ;============================================================================
  6334                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6335                                  ;============================================================================
  6336                                  ; Retro DOS v3.0 - 18/07/2018
  6337                                  
  6338                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6339                                  ;----------------------------------------------------------------------------
  6340                                  ; Retro DOS v2.0 - 13/03/2018
  6341                                  
  6342                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6343                                  
  6344                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6345                                  
  6346                                  ;**	$GET_DATE - Get Current Date
  6347                                  ;----------------------------------------
  6348                                  ;	ENTRY	none
  6349                                  ;	EXIT	(cx:dx) = current date
  6350                                  ;	USES	all
  6351                                  
  6352                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6353                                  
  6354                                  _$GET_DATE:	;System call 42
  6355                                  
  6356 00000A63 16                      	PUSH	SS
  6357 00000A64 1F                      	POP	DS
  6358 00000A65 E8B700                  	CALL	READTIME	;Check for rollover to next day
  6359 00000A68 A1[5203]                	MOV	AX,[YEAR]
  6360                                  
  6361                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6362                                  
  6363 00000A6B 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6364 00000A6F E813FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6365                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6366 00000A72 895C06                  	MOV	[SI+user_env.user_DX],BX
  6367 00000A75 05BC07                  	ADD	AX,1980		;Put bias back
  6368                                  	;MOV	[SI+4],AX	;CX=year
  6369 00000A78 894404                  	MOV	[SI+user_env.user_CX],AX
  6370 00000A7B 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6371                                  RET20:	; 05/11/2022
  6372                                  RET24:	; 18/12/2022
  6373 00000A7F C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_DATE - Set Current Date
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = current date
  6378                                  ;	EXIT	(al) = -1 iff bad date
  6379                                  ;		(al) = 0 if ok
  6380                                  ;	USES	all
  6381                                  
  6382                                  _$SET_DATE:	;System call 43
  6383                                  
  6384 00000A80 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6385 00000A82 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6386                                  	;JC	SHORT RET24	;Error if not big enough
  6387                                  	; 05/11/2022
  6388 00000A86 72F7                    	jc	short RET20
  6389 00000A88 83F977                  	CMP	CX,119		;Year must be less than 2100
  6390 00000A8B 77F2                    	JA	SHORT RET24
  6391 00000A8D 08F6                    	OR	DH,DH
  6392                                  	;JZ	SHORT RET24
  6393                                   	; 05/11/2022
  6394 00000A8F 74EE                    	jz	short RET20
  6395 00000A91 08D2                    	OR	DL,DL
  6396                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6397                                  	; 05/11/2022
  6398 00000A93 74EA                    	jz	short RET20
  6399 00000A95 80FE0C                  	CMP	DH,12		;Check against max. month
  6400 00000A98 77E5                    	JA	SHORT RET24
  6401 00000A9A 16                      	PUSH	SS
  6402 00000A9B 1F                      	POP	DS
  6403                                  	;CALL	DODATE
  6404                                  	; 18/12/2022
  6405 00000A9C E91301                  	jmp	DODATE
  6406                                  ;RET24:  
  6407                                  	;RETN
  6408                                  
  6409                                  ;**	$GET_TIME - Get Current Time
  6410                                  ;----------------------------------------
  6411                                  ;	ENTRY	none
  6412                                  ;	EXIT	(cx:dx) = current time
  6413                                  ;	USES	all
  6414                                  
  6415                                  _$GET_TIME:			;System call 44
  6416                                  
  6417 00000A9F 16                      	PUSH	SS
  6418 00000AA0 1F                      	POP	DS
  6419 00000AA1 E87B00                  	CALL	READTIME
  6420 00000AA4 E8DEF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6421                                  	;MOV	[SI+6],DX
  6422 00000AA7 895406                  	MOV	[SI+user_env.user_DX],DX
  6423                                  	;MOV	[SI+4],CX
  6424 00000AAA 894C04                  	MOV	[SI+user_env.user_CX],CX
  6425                                  set_time_ok:	; 06/01/2024
  6426 00000AAD 30C0                    	XOR	AL,AL
  6427                                  RET26:  
  6428 00000AAF C3                      	RETN
  6429                                  
  6430                                  ;**	$SET_TIME - Set Current Time
  6431                                  ;----------------------------------------
  6432                                  ;	ENTRY	(cx:dx) = time
  6433                                  ;	EXIT	(al) = 0 if 0k
  6434                                  ;		(al) = -1 if invalid
  6435                                  ;	USES	ALL
  6436                                  
  6437                                  _$SET_TIME:			;System call 45
  6438                                  
  6439 00000AB0 B0FF                    	MOV	AL,-1		;Flag in case of error
  6440 00000AB2 80FD18                  	CMP	CH,24		;Check hours
  6441 00000AB5 73F8                    	JAE	SHORT RET26
  6442 00000AB7 80F93C                  	CMP	CL,60		;Check minutes
  6443 00000ABA 73F3                    	JAE	SHORT RET26
  6444 00000ABC 80FE3C                  	CMP	DH,60		;Check seconds
  6445 00000ABF 73EE                    	JAE	SHORT RET26
  6446 00000AC1 80FA64                  	CMP	DL,100		;Check 1/100's
  6447 00000AC4 73E9                    	JAE	SHORT RET26
  6448 00000AC6 51                      	PUSH	CX
  6449 00000AC7 52                      	PUSH	DX
  6450 00000AC8 16                      	PUSH	SS
  6451 00000AC9 1F                      	POP	DS
  6452 00000ACA BB[B603]                	MOV	BX,TIMEBUF
  6453 00000ACD B90600                  	MOV	CX,6
  6454                                  	;XOR	DX,DX
  6455                                  	;MOV	AX,DX
  6456 00000AD0 31C0                    	xor	ax,ax
  6457 00000AD2 99                      	cwd	; 06/01/2024
  6458 00000AD3 53                      	PUSH	BX
  6459 00000AD4 E8063C                  	CALL	SETREAD
  6460 00000AD7 1E                      	PUSH	DS
  6461 00000AD8 C536[2E00]              	LDS	SI,[BCLOCK]
  6462 00000ADC E8883B                  	CALL	DEVIOCALL2	;Get correct day count
  6463 00000ADF 1F                      	POP	DS
  6464 00000AE0 5B                      	POP	BX
  6465 00000AE1 E82C3C                  	CALL	SETWRITE
  6466 00000AE4 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6467 00000AE8 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6468 00000AEC C536[2E00]              	LDS	SI,[BCLOCK]
  6469 00000AF0 E8743B                  	CALL	DEVIOCALL2	;Set the time
  6470                                  	; 06/01/2024
  6471                                  	;XOR	AL,AL
  6472                                  	;RETN
  6473 00000AF3 EBB8                    	jmp	short set_time_ok
  6474                                  
  6475                                  ; 11/07/2018 - Retro DOS v3.0
  6476                                  ; Retro DOS v2.0 - 14/03/2018
  6477                                  
  6478                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6479                                  
  6480                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6481                                  ;----------------------------------------------------------
  6482                                  ; Date16 returns the current date in AX, current time in DX
  6483                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6484                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6485                                  
  6486                                  DATE16:
  6487                                  	
  6488                                  ;M048	Context DS
  6489                                  ;
  6490                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6491                                  ; is DOSDATA
  6492                                  
  6493                                  	;push	ss
  6494                                  	;pop	ds
  6495                                  
  6496                                  	;getdseg <ds>		; M048
  6497                                  
  6498                                  	; 13/05/2019 - Retro DOS v4.0
  6499 00000AF5 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6500                                  
  6501 00000AFA 51                      	PUSH	CX
  6502 00000AFB 06                      	PUSH	ES
  6503 00000AFC E82000                  	CALL	READTIME
  6504 00000AFF 07                      	POP	ES
  6505 00000B00 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6506 00000B02 D0E1                    	SHL	CL,1
  6507 00000B04 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6508 00000B06 D1E1                    	SHL	CX,1
  6509 00000B08 D1E1                    	SHL	CX,1
  6510 00000B0A D0EE                    	SHR	DH,1		;Count every two seconds
  6511 00000B0C 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6512 00000B0E 89CA                    	MOV	DX,CX
  6513                                  
  6514                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6515                                  
  6516 00000B10 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6517 00000B13 B104                    	MOV	CL,4
  6518 00000B15 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6519 00000B17 D1E0                    	SHL	AX,1
  6520 00000B19 59                      	POP	CX
  6521 00000B1A 0A06[5003]              	OR	AL,[DAY]
  6522                                  RET21:
  6523 00000B1E C3                      	RETN
  6524                                  
  6525                                  ;----------------------------------------------------------
  6526                                  
  6527                                  READTIME:
  6528                                  
  6529                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6530                                  ;Uses AX, CX, DX.
  6531                                  
  6532 00000B1F C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6533 00000B25 56                      	PUSH	SI
  6534 00000B26 53                      	PUSH	BX
  6535                                  
  6536 00000B27 BB[B603]                	MOV	BX,TIMEBUF
  6537                                  
  6538 00000B2A B90600                  	MOV	CX,6
  6539                                  	;XOR	DX,DX
  6540                                  	;MOV	AX,DX
  6541                                  	; 06/01/2024
  6542 00000B2D 31C0                    	xor	ax,ax
  6543 00000B2F 99                      	cwd
  6544 00000B30 E8AA3B                  	CALL	SETREAD
  6545 00000B33 1E                      	PUSH	DS
  6546 00000B34 C536[2E00]              	LDS	SI,[BCLOCK]
  6547 00000B38 E82C3B                  	CALL	DEVIOCALL2	;Get correct date and time
  6548 00000B3B 1F                      	POP	DS
  6549 00000B3C 5B                      	POP	BX
  6550 00000B3D 5E                      	POP	SI
  6551 00000B3E A1[B603]                	MOV	AX,[TIMEBUF]
  6552 00000B41 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6553 00000B45 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6554 00000B49 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6555                                  	;JZ	SHORT RET22
  6556 00000B4D 74CF                    	JZ	SHORT RET21 ; 18/07/2018
  6557                                  	;cmp	ax,43830
  6558 00000B4F 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6559 00000B52 733D                    	JAE	SHORT RET22	;Ignore if too large
  6560 00000B54 A3[5403]                	MOV	[DAYCNT],AX
  6561 00000B57 56                      	PUSH	SI
  6562 00000B58 51                      	PUSH	CX
  6563 00000B59 52                      	PUSH	DX		;Save time
  6564 00000B5A 31D2                    	XOR	DX,DX
  6565                                  	;mov	cx,1461
  6566 00000B5C B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6567 00000B5F F7F1                    	DIV	CX		;Compute number of 4-year units
  6568 00000B61 D1E0                    	SHL	AX,1
  6569 00000B63 D1E0                    	SHL	AX,1
  6570 00000B65 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6571 00000B67 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6572                                  
  6573 00000B69 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6574                                  
  6575 00000B6C E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6576 00000B6F D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6577 00000B71 7304                    	JNC	SHORT SK	;Extra half-year?
  6578 00000B73 81C2C800                	ADD	DX,200
  6579                                  SK:
  6580 00000B77 E82200                  	CALL	SETYEAR
  6581 00000B7A B101                    	MOV	CL,1		;At least at first month in year
  6582                                  
  6583 00000B7C BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6584                                  	
  6585 00000B7F E81000                  	CALL	DSLIDE		;Find out which month we're in
  6586 00000B82 880E[5103]              	MOV	[MONTH],CL
  6587 00000B86 42                      	INC	DX		;Remainder is day of month (start with one)
  6588 00000B87 8816[5003]              	MOV	[DAY],DL
  6589 00000B8B E89400                  	CALL	WKDAY		;Set day of week
  6590 00000B8E 5A                      	POP	DX
  6591 00000B8F 59                      	POP	CX
  6592 00000B90 5E                      	POP	SI
  6593                                  RET22:  
  6594 00000B91 C3                      	RETN
  6595                                  
  6596                                  ;----------------------------------------------------------
  6597                                  
  6598                                  DSLIDE:
  6599                                  	;MOV	AH,0
  6600                                  	; 06/01/2024
  6601                                  	; (AH = 0)
  6602                                  DSLIDE1:
  6603 00000B92 AC                      	LODSB			;Get count of days
  6604 00000B93 39C2                    	CMP	DX,AX		;See if it will fit
  6605                                  	;JB	SHORT RET23	;If not, done
  6606 00000B95 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6607 00000B97 29C2                    	SUB	DX,AX
  6608 00000B99 41                      	INC	CX		;Count one more month/year
  6609 00000B9A EBF6                    	JMP	SHORT DSLIDE1
  6610                                  
  6611                                  ;----------------------------------------------------------
  6612                                  
  6613                                  SETYEAR:
  6614                                  
  6615                                  ;Set year with value in CX. Adjust length of February for this year.
  6616                                  
  6617                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6618                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6619                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6620                                  ;	preserve DS as CHKYR is also called as a routine.
  6621                                  
  6622                                  	; MSDOS 6.0 (18/07/2018) ; *
  6623                                  
  6624                                  	;GETDSEG DS
  6625                                  
  6626                                  	;PUSH	CS  ; *
  6627                                  	;POP	DS  ; *
  6628                                  
  6629                                  	; 13/05/2019 - Retro DOS v4.0
  6630 00000B9C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6631                                  
  6632                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6633                                  	; 05/11/2022 
  6634                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6635                                  
  6636 00000BA1 880E[5203]              	MOV	[YEAR],CL
  6637                                  CHKYR:
  6638 00000BA5 F6C103                  	TEST	CL,3		;Check for leap year
  6639 00000BA8 B01C                    	MOV	AL,28
  6640 00000BAA 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6641 00000BAC FEC0                    	INC	AL		;Add leap day
  6642                                  SAVFEB:
  6643 00000BAE A2[1D0D]                	mov	[february],al
  6644                                  	;MOV	[MONTAB+1],AL	;Store for February
  6645                                  RET23:  
  6646 00000BB1 C3                      	RETN
  6647                                  
  6648                                  ;----------------------------------------------------------
  6649                                  
  6650                                  DODATE:
  6651 00000BB2 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6652 00000BB5 88F0                    	MOV	AL,DH
  6653                                  
  6654 00000BB7 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6655                                  
  6656 00000BBA D7                      	XLAT			;Look up days in month
  6657 00000BBB 38D0                    	CMP	AL,DL
  6658 00000BBD B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6659                                  	;JB	SHORT RET25	;Error if too many days
  6660 00000BBF 72F0                    	jb	short RET23 ; 18/07/2018
  6661 00000BC1 E8D8FF                  	CALL	SETYEAR
  6662                                  ;
  6663                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6664                                  ;
  6665 00000BC4 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6666 00000BC8 D1E9                    	SHR	CX,1
  6667 00000BCA D1E9                    	SHR	CX,1
  6668                                  	;mov	ax,1461
  6669 00000BCC B8B505                  	MOV	AX,FOURYEARS
  6670 00000BCF 89D3                    	MOV	BX,DX
  6671 00000BD1 F7E1                    	MUL	CX
  6672 00000BD3 8A0E[5203]              	MOV	CL,[YEAR]
  6673 00000BD7 80E103                  	AND	CL,3
  6674                                  
  6675 00000BDA BE[140D]                	MOV	SI,YRTAB
  6676                                  
  6677 00000BDD 89C2                    	MOV	DX,AX
  6678 00000BDF D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6679 00000BE1 E85100                  	CALL	DSUM		;Add up the days in each year
  6680 00000BE4 88F9                    	MOV	CL,BH		;Month of year
  6681                                  
  6682 00000BE6 BE[1C0D]                	MOV	SI,MONTAB
  6683                                  
  6684 00000BE9 49                      	DEC	CX		;Account for months starting with one
  6685 00000BEA E84800                  	CALL	DSUM		;Add up days in each month
  6686 00000BED 88D9                    	MOV	CL,BL		;Day of month
  6687 00000BEF 49                      	DEC	CX		;Account for days starting with one
  6688 00000BF0 01CA                    	ADD	DX,CX		;Add in to day total
  6689 00000BF2 92                      	XCHG	AX,DX		;Get day count in AX
  6690 00000BF3 A3[5403]                	MOV	[DAYCNT],AX
  6691 00000BF6 56                      	PUSH	SI
  6692 00000BF7 53                      	PUSH	BX
  6693 00000BF8 50                      	PUSH	AX
  6694                                  
  6695 00000BF9 BB[B603]                	MOV	BX,TIMEBUF
  6696                                  
  6697 00000BFC B90600                  	MOV	CX,6
  6698                                  	;XOR	DX,DX
  6699                                  	;MOV	AX,DX
  6700                                  	; 06/01/2024
  6701 00000BFF 31C0                    	xor	ax,ax
  6702 00000C01 99                      	cwd
  6703 00000C02 53                      	PUSH	BX
  6704 00000C03 E8D73A                  	CALL	SETREAD
  6705                                  
  6706 00000C06 1E                      	PUSH	DS
  6707 00000C07 C536[2E00]              	LDS	SI,[BCLOCK]
  6708 00000C0B E8593A                  	CALL	DEVIOCALL2	;Get correct date and time
  6709 00000C0E 1F                      	POP	DS
  6710 00000C0F 5B                      	POP	BX
  6711 00000C10 E8FD3A                  	CALL	SETWRITE
  6712 00000C13 8F06[B603]              	POP	WORD [TIMEBUF]
  6713 00000C17 1E                      	PUSH	DS
  6714 00000C18 C536[2E00]              	LDS	SI,[BCLOCK]
  6715 00000C1C E8483A                  	CALL	DEVIOCALL2	;Set the date
  6716 00000C1F 1F                      	POP	DS
  6717 00000C20 5B                      	POP	BX
  6718 00000C21 5E                      	POP	SI
  6719                                  WKDAY:
  6720 00000C22 A1[5403]                	MOV	AX,[DAYCNT]
  6721 00000C25 31D2                    	XOR	DX,DX
  6722 00000C27 B90700                  	MOV	CX,7
  6723 00000C2A 40                      	INC	AX
  6724 00000C2B 40                      	INC	AX		;First day was Tuesday
  6725 00000C2C F7F1                    	DIV	CX		;Compute day of week
  6726 00000C2E 8816[5603]              	MOV	[WEEKDAY],DL
  6727 00000C32 30C0                    	XOR	AL,AL		;Flag OK
  6728                                  RET25:
  6729 00000C34 C3                      	RETN
  6730                                  
  6731                                  ;----------------------------------------------------------
  6732                                  
  6733                                  ;**	DSUM - Compute the sum of a string of bytes
  6734                                  ;
  6735                                  ;	ENTRY	(cx) = byte count
  6736                                  ;		(ds:si) = byte address
  6737                                  ;		(dx) = sum register, initialized by caller
  6738                                  ;	EXIT	(dx) updated
  6739                                  ;	USES	ax, cx, dx, si, flags
  6740                                  
  6741                                  DSUM:
  6742 00000C35 B400                    	MOV	AH,0
  6743 00000C37 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6744                                  	;JCXZ	RET25 ; 18/07/2018
  6745                                  DSUM1:
  6746 00000C39 AC                      	LODSB
  6747 00000C3A 01C2                    	ADD	DX,AX
  6748 00000C3C E2FB                    	LOOP	DSUM1
  6749                                  DSUM9:
  6750 00000C3E C3                      	RETN
  6751                                  
  6752                                  ;============================================================================
  6753                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6754                                  ;============================================================================
  6755                                  ; 29/04/2019 - Retro DOS v4.0
  6756                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6757                                  
  6758                                  ; 12/03/2018 - Retro DOS v2.0 
  6759                                  
  6760                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6761                                  ;NAME	GETSET
  6762                                  
  6763                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6764                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6765                                  
  6766                                  ;USERNUM:
  6767                                  ;	DW	0			; 24 bit user number
  6768                                  ;       DB      0
  6769                                  ;;	IF      IBM
  6770                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6771                                  ;;	ELSE
  6772                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6773                                  ;;	ENDIF
  6774                                  
  6775                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6776                                  ;; 08/07/2018 - Retro DOS v3.0
  6777                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6778                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6779                                  
  6780                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6781                                  ;----------------------------------------------------------------------------
  6782                                  
  6783                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6784                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6785                                  
  6786                                  _$GET_VERSION:
  6787                                  
  6788                                  ; Inputs:
  6789                                  ;       None
  6790                                  ; Function:
  6791                                  ;       Return MS-DOS version number
  6792                                  ; Outputs:
  6793                                  ;       OEM number in BH
  6794                                  ;       User number in BL:CX (24 bits)
  6795                                  ;       Version number as AL.AH in binary
  6796                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6797                                  
  6798                                  ; MSDOS 6.0
  6799                                  ;
  6800                                  ;	Fake_Count is used to lie about the version numbers to support
  6801                                  ;	old binarys. See ms_table.asm for more info.
  6802                                  ;
  6803                                  ;		if input al = 00
  6804                                  ;		  (bh) = OEM number			
  6805                                  ;		else if input al = 01
  6806                                  ;		  (bh) = version flags
  6807                                  ;		 
  6808                                  ;		       	 bits 0-2 = DOS internal revision
  6809                                  ;		       	 bits 3-7 = DOS type flags
  6810                                  ;		              bit 3    = DOS is in ROM
  6811                                  ;		              bit 4    = DOS in in HMA
  6812                                  ;		              bits 5-7 = reserved
  6813                                  ;               M007 change - only bit 3 is now valid. Other bits
  6814                                  ;               are 0 when AL = 1
  6815                                  
  6816                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6817 00000C3F 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6818 00000C44 8CDB                    	mov	bx, ds
  6819                                  
  6820                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6821                                  	;--------------------------------------
  6822                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6823                                  
  6824 00000C46 16                              PUSH    SS
  6825 00000C47 1F                              POP     DS
  6826                                          
  6827                                  	; 06/01/2024
  6828                                  	;MOV	BX,[USERNUM+2]
  6829                                          ;MOV	CX,[USERNUM]
  6830                                  
  6831                                  	; 13/05/2019 - Retro DOS v4.0
  6832                                  
  6833                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6834                                  	;DOS flags
  6835                                  
  6836 00000C48 3C01                    	cmp	AL,1
  6837 00000C4A 7502                    	jne	short Norm_Vers
  6838                                  
  6839                                  ;ifdef ROMDOS
  6840                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6841                                  ;				(DOSINROM = 8)
  6842                                  ;else
  6843 00000C4C 30FF                            xor     bh,bh		; Otherwise return 0
  6844                                  ;endif				;M007 end
  6845                                  
  6846                                  Norm_Vers:
  6847                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6848                                  
  6849                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6850                                  	; 13/05/2019 - Retro DOS v4.0
  6851 00000C4E 1E                      	push	ds		; Get the version number from the
  6852 00000C4F 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6853                                  	;mov	ax,[40h]
  6854 00000C53 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6855                                  	; 07/12/2022
  6856 00000C56 1F                      	pop	ds
  6857 00000C57 E82BF8                  	call	Get_User_Stack
  6858                                  				; Put values for return registers
  6859                                  				; in the proper place on the user's	 
  6860                                  				; stack addressed by DS:SI
  6861                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6862                                  gdrvfspc_ret:
  6863                                          ;MOV	[SI+user_env.user_AX],AX
  6864 00000C5A 8904                            MOV	[SI],AX
  6865                                          ;MOV	[SI+4],CX
  6866 00000C5C 894C04                  	mov	[SI+user_env.user_CX],CX
  6867                                  set_user_bx:
  6868                                  	;MOV	[SI+2],BX
  6869 00000C5F 895C02                  	mov	[SI+user_env.user_BX],BX
  6870                                  
  6871 00000C62 C3                      	RETN
  6872                                  
  6873                                  ; 18/07/2018 - Retro DOS v3.0
  6874                                  
  6875                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6876                                  ;----------------------------------------------------------------------------
  6877                                  
  6878                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6879                                  ;
  6880                                  ;	ENTRY	none
  6881                                  ;	EXIT	(al) = value of VERIFY flag
  6882                                  ;	USES	all
  6883                                  
  6884                                  
  6885                                  _$GET_VERIFY_ON_WRITE:
  6886                                  
  6887                                  ;hkn; SS override
  6888 00000C63 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6889 00000C67 C3                      	retn
  6890                                  
  6891                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6892                                  ;
  6893                                  ;	ENTRY	(al) = value of VERIFY flag
  6894                                  ;	EXIT	none
  6895                                  ;	USES	all
  6896                                  
  6897                                  _$SET_VERIFY_ON_WRITE:
  6898                                  
  6899 00000C68 2401                    	AND	AL,1
  6900                                  ;hkn; SS override
  6901 00000C6A 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6902                                  RET27:	; 18/07/2018
  6903 00000C6E C3                      	retn
  6904                                  
  6905                                  ; 19/07/2018 - Retro DOS v3.0
  6906                                  
  6907                                  ;BREAK <$International - return country-dependent information>
  6908                                  ;----------------------------------------------------------------------------
  6909                                  ;
  6910                                  ; Procedure Name : $INTERNATIONAL
  6911                                  ;
  6912                                  ; Inputs:
  6913                                  ;	MOV	AH,International
  6914                                  ;	MOV	AL,country	(al = 0 => current country)
  6915                                  ;      [MOV	BX,country]
  6916                                  ;	LDS	DX,block
  6917                                  ;	INT	21
  6918                                  ; Function:
  6919                                  ;	give users an idea of what country the application is running
  6920                                  ; Outputs:
  6921                                  ;	IF DX != -1 on input (get country)
  6922                                  ;	  AL = 0 means return current country table.
  6923                                  ;	  0<AL<0FFH means return country table for country AL
  6924                                  ;	  AL = 0FF means return country table for country BX
  6925                                  ;	  No Carry:
  6926                                  ;	     Register BX will contain the 16-bit country code.
  6927                                  ;	     Register AL will contain the low 8 bits of the country code.
  6928                                  ;	     The block pointed to by DS:DX is filled in with the information
  6929                                  ;	     for the particular country.
  6930                                  ;		BYTE  Size of this table excluding this byte and the next
  6931                                  ;		BYTE  Country code represented by this table
  6932                                  ;			A sequence of n bytes, where n is the number specified
  6933                                  ;			by the first byte above and is not > internat_block_max,
  6934                                  ;			in the correct order for being returned by the
  6935                                  ;			INTERNATIONAL call as follows:
  6936                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6937                                  ;		5 BYTE	Currency symbol null terminated
  6938                                  ;		2 BYTE	thousands separator null terminated
  6939                                  ;		2 BYTE	Decimal point null terminated
  6940                                  ;		2 BYTE	Date separator null terminated
  6941                                  ;		2 BYTE	Time separator null terminated
  6942                                  ;		1 BYTE	Bit field.  Currency format.
  6943                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6944                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6945                                  ;		1 BYTE	No. of significant decimal digits in currency
  6946                                  ;		1 BYTE	Bit field.  Time format.
  6947                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6948                                  ;		DWORD	Call address of case conversion routine
  6949                                  ;		2 BYTE	Data list separator null terminated.
  6950                                  ;	  Carry:
  6951                                  ;	     Register AX has the error code.
  6952                                  ;	IF DX = -1 on input (set current country)
  6953                                  ;	  AL = 0 is an error
  6954                                  ;	  0<AL<0FFH means set current country to country AL
  6955                                  ;	  AL = 0FF means set current country to country BX
  6956                                  ;	  No Carry:
  6957                                  ;	    Current country SET
  6958                                  ;	    Register AL will contain the low 8 bits of the country code.
  6959                                  ;	  Carry:
  6960                                  ;	     Register AX has the error code.
  6961                                  ;-----------------------------------------------------------------------------
  6962                                  
  6963                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6964                                  
  6965                                  ; 13/05/2019 - Retro DOS v4.0
  6966                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6967                                  
  6968                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6969                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6970                                  
  6971                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6972                                  	 
  6973 00000C6F 3CFF                    	CMP	AL,0FFH
  6974 00000C71 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6975 00000C73 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6976 00000C75 30FF                    	XOR	BH,BH
  6977                                  BX_HAS_CODE:
  6978 00000C77 1E                      	PUSH	DS
  6979 00000C78 07                      	POP	ES
  6980 00000C79 52                      	PUSH	DX
  6981 00000C7A 5F                      	POP	DI			; User buffer to ES:DI
  6982                                  
  6983                                  ;hkn; SS is DOSDATA
  6984                                  ;	context DS
  6985                                  
  6986 00000C7B 16                      	push	ss
  6987 00000C7C 1F                      	pop	ds
  6988                                  
  6989 00000C7D 83FFFF                  	CMP	DI,-1
  6990 00000C80 745D                    	JZ	short international_set
  6991 00000C82 09DB                    	OR	BX,BX
  6992 00000C84 7505                    	JNZ	short international_find
  6993                                  
  6994                                  ;hkn; country_cdpg is in DOSDATA segment.
  6995 00000C86 BE[0512]                	MOV	SI,COUNTRY_CDPG
  6996                                  
  6997 00000C89 EB39                    	JMP	SHORT international_copy
  6998                                  
  6999                                  international_find:
  7000                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7001                                  	; 06/01/2024
  7002 00000C8B 31ED                    	xor	bp,bp ; 0
  7003 00000C8D E80A00                  	CALL	international_get
  7004 00000C90 7255                    	JC	short errtn
  7005                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7006                                  	; 06/01/2024
  7007 00000C92 09DB                    	or	bx,bx
  7008 00000C94 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7009 00000C96 89D3                    	MOV	BX,DX			 ; put country back
  7010 00000C98 EB3A                    	JMP	SHORT international_ok3
  7011                                  
  7012                                  international_get:
  7013 00000C9A BE[0512]                	MOV	SI,COUNTRY_CDPG
  7014                                  
  7015                                  ;hkn; country_cdpg is in DOSDATA segment.
  7016                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7017                                  
  7018                                  	; MSDOS 3.3
  7019                                  	;;cmp	bx,[SI+63h]
  7020                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7021                                  	;jz	short RET27
  7022                                  
  7023                                  	; 13/05/2019 - Retro DOS v4.0
  7024                                  
  7025                                  	; MSDOS 6.0
  7026                                  	;cmp	bx,[ss:si+68h]
  7027 00000C9D 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7028 00000CA1 74CB                    	jz	short RET27			; return if equal
  7029                                  
  7030 00000CA3 89DA                    	MOV	DX,BX
  7031 00000CA5 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7032                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7033 00000CA7 B80014                  	mov	ax,1400h
  7034 00000CAA CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7035                                  			; Return: AL = 00h not installed, OK to install
  7036                                  			; 01h not installed, not OK
  7037                                  			; FFh installed
  7038 00000CAC 3CFF                    	CMP	AL,0FFH
  7039 00000CAE 7510                    	JNZ	short interr		; not in memory
  7040                                  	
  7041                                  	; 06/01/2024
  7042 00000CB0 B80314                  	mov	ax,1403h		; set country info
  7043                                  
  7044                                  	;cmp	bp,0
  7045 00000CB3 09ED                    	or	bp,bp			; GetCntry ?
  7046 00000CB5 7501                    	JNZ	short stcdpg
  7047                                  	
  7048                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7049                                  	;mov	ax,1404h
  7050 00000CB7 40                      	inc	ax	; AX = 1404h ; get country info
  7051                                  
  7052                                  	; 06/01/2024
  7053                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7054                                  	;		; BX = code page, DX = country code,
  7055                                  	;		; DS:SI -> internal code page structure
  7056                                  	;		; ES:DI -> user buffer
  7057                                  	;		; Return: AL = status
  7058                                  	;
  7059                                  	;JMP	short chkok
  7060                                  	
  7061                                  	;nop
  7062                                  
  7063                                  stcdpg:
  7064                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7065                                  	; 06/01/2024
  7066                                  	;mov     ax,1403h
  7067                                  gscdpg:
  7068 00000CB8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7069                                  			; DS:SI -> internal code page structure
  7070                                  			; BX = code page, DX = country code
  7071                                  			; Return: AL = status
  7072                                  chkok:
  7073 00000CBA 08C0                    	or	al,al			; success ?
  7074                                  	;retz				; yes
  7075 00000CBC 74B0                    	jz	short RET27
  7076                                  
  7077                                  setcarry:
  7078 00000CBE F9                      	STC				; set carry
  7079 00000CBF C3                      	retn
  7080                                  interr:
  7081 00000CC0 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7082 00000CC2 EBFA                    	JMP	short setcarry
  7083                                  
  7084                                  international_copy:
  7085                                  
  7086                                  ;hkn; country_cdpg is in DOSDATA segment.
  7087                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7088                                  
  7089                                  	; MSDOS 3.3
  7090                                  	;;mov	bx,[SI+63h]
  7091                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7092                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7093                                  
  7094                                  	; 13/05/2019 - Retro DOS v4.0
  7095                                  
  7096                                  	; MSDOS 6.0
  7097                                  	;mov	bx,[ss:si+68h]
  7098 00000CC4 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7099 00000CC8 BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7100                                  
  7101                                  	;mov	cx,24
  7102 00000CCB B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7103                                  
  7104                                  	; MSDOS 6.0
  7105                                  
  7106                                  ;hkn;	must set up DS to SS so that international info can be copied
  7107                                  	
  7108 00000CCE 1E                      	push	ds
  7109                                  
  7110 00000CCF 16                      	push	ss			; cs -> ss
  7111 00000CD0 1F                      	pop	ds
  7112                                  
  7113 00000CD1 F3A4                    	REP	MOVSB			; copy country info
  7114                                  
  7115                                  	; MSDOS 6.0
  7116                                  
  7117 00000CD3 1F                      	pop	ds	;hkn;	restore ds
  7118                                  
  7119                                  international_ok3:
  7120 00000CD4 E8AEF7                  	call	Get_User_Stack
  7121                                  ;ASSUME	DS:NOTHING
  7122                                  	;MOV	[SI+2],BX
  7123 00000CD7 895C02                  	MOV	[SI+user_env.user_BX],BX
  7124                                  international_ok:
  7125 00000CDA 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7126                                  ;SYS_RET_OK_jmp:
  7127                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7128                                  nono:	; 15/12/2022
  7129                                  SYS_RET_OK_jmp:
  7130 00000CDC E95CF9                  	jmp	SYS_RET_OK
  7131                                  
  7132                                  international_set:
  7133                                  
  7134                                  ;hkn; ASSUME	DS:DOSGROUP
  7135                                  ;ASSUME	DS:DOSDATA
  7136                                  
  7137 00000CDF BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7138 00000CE2 E8B5FF                  	CALL	international_get
  7139 00000CE5 73F3                    	JNC	short international_ok
  7140                                  errtn:
  7141 00000CE7 3CFF                    	CMP	AL,0FFH
  7142 00000CE9 7403                    	JZ	short errtn2
  7143                                  errtn1:
  7144 00000CEB E956F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7145                                  errtn2:
  7146                                  	;error	error_invalid_function	; NLSFUNC not existent
  7147                                  
  7148                                  	;mov	al,1
  7149 00000CEE B001                    	mov	al,error_invalid_function 
  7150 00000CF0 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7151                                  ;errtn3:
  7152                                  ;	jmp	SYS_RET_ERR
  7153                                  
  7154                                  ;EndProc $INTERNATIONAL
  7155                                  
  7156                                  ; 19/07/2018
  7157                                  
  7158                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7159                                  
  7160                                  ;----------------------------------------------------------------------------
  7161                                  ;
  7162                                  ; Procedure Name : $GetExtCntry
  7163                                  ;
  7164                                  ; Inputs:
  7165                                  ;	if AL >= 20H
  7166                                  ;	  AL= 20H    capitalize single char, DL= char
  7167                                  ;	      21H    capitalize string, CX= string length
  7168                                  ;	      22H    capitalize ASCIIZ string
  7169                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7170                                  ;	      80H bit 0 = use normal upper case table
  7171                                  ;		      1 = use file upper case table
  7172                                  ;	   DS:DX points to string
  7173                                  ;
  7174                                  ;	else
  7175                                  ;
  7176                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7177                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7178                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7179                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7180                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7181                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7182                                  ;	INT	21
  7183                                  ; Function:
  7184                                  ;	give users extended country dependent information
  7185                                  ;	or capitalize chars
  7186                                  ; Outputs:
  7187                                  ;	  No Carry:
  7188                                  ;	     extended country info is succesfully returned
  7189                                  ;	  Carry:
  7190                                  ;	     Register AX has the error code.
  7191                                  ;	     AX=0, NO	 for YES/NO CHECK
  7192                                  ;		1, YES
  7193                                  ;----------------------------------------------------------------------------
  7194                                  
  7195                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7196                                  
  7197                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7198                                  
  7199                                  	; MSDOS 6.0
  7200                                  _$GetExtCntry:
  7201 00000CF2 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7202 00000CF4 7269                    	JB	short notcap
  7203                                  capcap: 				;
  7204 00000CF6 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7205 00000CF8 7505                    	JNZ	short fileupper		; file upper case
  7206                                  
  7207                                  ;hkn; UCASE_TAB in DOSDATA
  7208 00000CFA BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7209 00000CFD EB05                    	JMP	SHORT capit
  7210                                  
  7211                                  fileupper:
  7212                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7213                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7214                                  	; AL >= 80h
  7215 00000CFF 247F                    	and	al,7Fh
  7216                                  
  7217                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7218 00000D01 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7219                                  capit:					;
  7220 00000D04 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7221 00000D06 750D                    	JNZ	short chkyes		; no
  7222 00000D08 88D0                    	MOV	AL,DL			; set up AL
  7223 00000D0A E85443                  	call	GETLET3 		; upper case it
  7224 00000D0D E875F7                  	call	Get_User_Stack		; get user stack
  7225                                  	;mov	[si+6],al
  7226 00000D10 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7227 00000D13 EBC7                    	JMP	SHORT nono		; done
  7228                                  chkyes: 				;
  7229 00000D15 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7230 00000D17 7522                    	JNZ	short capstring		; no
  7231                                  
  7232 00000D19 31C0                    	XOR	AX,AX			; presume NO
  7233                                  		      
  7234                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7235                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7236                                  
  7237                                  	; 06/08/2018 - Retro DOS v3.0
  7238                                  	; 13/05/2019 - Retro DOS v4.0
  7239                                  	;cmp	dl,'Y'
  7240 00000D1B 2E3A16[1A0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7241 00000D20 7416                    	JZ	short yesyes		; yes
  7242                                  	;cmp	dl,'y'
  7243 00000D22 2E3A16[1C0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7244 00000D27 740F                    	JZ	short yesyes		; yes
  7245                                  	;cmp	dl,'N'
  7246 00000D29 2E3A16[1B0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7247 00000D2E 74AC                    	JZ	short nono		; no
  7248                                  	;cmp	dl,'n'
  7249 00000D30 2E3A16[1D0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7250 00000D35 74A5                    	JZ	short nono		; no
  7251                                  ;dbcs_char:				;
  7252 00000D37 40                      	INC	AX			; not YES or NO
  7253                                  yesyes: 				;
  7254 00000D38 40                      	INC	AX			; return 1
  7255                                  	; 15/12/2022
  7256                                  ;nono:	
  7257 00000D39 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7258                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7259                                  	;jmp	SYS_RET_OK		; done
  7260                                  
  7261                                  capstring:				;
  7262 00000D3B 89D6                    	MOV	SI,DX			; si=dx
  7263 00000D3D 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7264 00000D3F 750D                    	JNZ	short capascii		; no
  7265                                  	;OR	CX,CX			; check count 0
  7266                                  	;JZ	short nono		; yes finished
  7267                                  	; 06/01/2024
  7268 00000D41 E399                    	jcxz	nono
  7269                                  concap: 				;
  7270 00000D43 AC                      	LODSB				; get char
  7271 00000D44 E81A43                  	call	GETLET3 		; upper case it
  7272 00000D47 8844FF                  	MOV	byte [SI-1],AL		; store back
  7273                                  ;next99: 				;
  7274 00000D4A E2F7                    	LOOP	concap			; continue
  7275 00000D4C EB8E                    	JMP	short nono		; done
  7276                                  capascii:				;
  7277 00000D4E 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7278 00000D50 7545                    	JNZ	short capinval		; no
  7279                                  concap2:				;
  7280 00000D52 AC                      	LODSB				; get char
  7281 00000D53 08C0                    	or	al,al			; end of string ?
  7282 00000D55 7485                    	JZ	short nono		; yes
  7283 00000D57 E80743                  	call	GETLET3 		; upper case it
  7284 00000D5A 8844FF                  	MOV	[SI-1],AL		; store back
  7285 00000D5D EBF3                    	JMP	short concap2 		; continue
  7286                                  
  7287                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7288                                  
  7289                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7290                                  ; _$GetExtCntry:
  7291                                  
  7292                                  notcap:
  7293 00000D5F 83F905                  	CMP	CX,5			; minimum size is 5
  7294 00000D62 7277                    	jb	short sizeerror
  7295                                  
  7296                                  GEC_CONT:
  7297                                  ;hkn; SS is DOSDATA
  7298                                  	;context DS
  7299                                  
  7300 00000D64 16                      	push	ss
  7301                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7302 00000D65 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7303                                  	
  7304                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7305 00000D66 BE[0512]                	MOV	SI,COUNTRY_CDPG
  7306                                  
  7307 00000D69 83FAFF                  	CMP	DX,-1			; active country ?
  7308 00000D6C 7503                    	JNZ	short GETCDPG 		; no
  7309                                  
  7310                                  ;hkn; use DS override to accesss country_cdpg fields
  7311                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7312                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7313 00000D6E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7314                                  					; get active country id;smr;use DS
  7315                                  GETCDPG:
  7316 00000D71 83FBFF                  	CMP	BX,-1			; active code page?
  7317 00000D74 7503                    	JNZ	short CHKAGAIN		; no, check again
  7318                                  
  7319                                  ;hkn; use DS override to accesss country_cdpg fields
  7320                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7321                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7322 00000D76 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7323                                  					; get active code page id;smr;Use DS
  7324                                  CHKAGAIN:
  7325                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7326 00000D79 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7327                                  					; same as active country id?;smr;use DS
  7328 00000D7C 7550                    	JNZ	short CHKNLS		; no
  7329                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7330 00000D7E 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7331                                  					; same as active code pg id?;smr;use DS
  7332 00000D81 754B                    	JNZ	short CHKNLS		; no
  7333                                  CHKTYPE:
  7334                                  	;mov	bx,[si+48h]
  7335 00000D83 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7336                                  					; bx = sys code page id;smr;use DS
  7337 00000D86 51                      	PUSH	CX			; save cx
  7338                                  	;mov	cx,[si+4Ah]
  7339 00000D87 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7340                                  	;mov	si,COUNTRY_CDPG+76
  7341 00000D8A BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7342                                  NXTENTRY:
  7343 00000D8D 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7344 00000D8F 740B                    	JZ	short FOUNDIT
  7345 00000D91 83C605                  	ADD	SI,5			; next entry
  7346 00000D94 E2F7                    	LOOP	NXTENTRY
  7347 00000D96 59                      	POP	CX
  7348                                  capinval:
  7349                                  	;error	error_invalid_function	; info type not found
  7350                                  	;mov	al,1
  7351 00000D97 B001                    	mov	al,error_invalid_function
  7352                                  ;SYS_RET_ERR_jmp:
  7353                                  	;jmp	SYS_RET_ERR
  7354                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7355                                  SYS_RET_ERR_jmp:
  7356 00000D99 E9A8F8                  	jmp	SYS_RET_ERR	
  7357                                  
  7358                                  FOUNDIT:
  7359 00000D9C A4                      	MOVSB				; move info id byte
  7360 00000D9D 59                      	POP	CX			; restore char count
  7361                                  	;cmp	al,1
  7362 00000D9E 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7363 00000DA0 7415                    	JZ	short setsize
  7364 00000DA2 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7365 00000DA5 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7366                                  OK_RETN:
  7367 00000DA8 F3A4                    	REP	MOVSB			; copy info
  7368 00000DAA 89C1                    	MOV	CX,AX			; CX = actual length returned
  7369 00000DAC 89D8                    	MOV	AX,BX			; return sys code page in ax
  7370                                  GETDONE:
  7371 00000DAE E8D4F6                  	call	Get_User_Stack		; return actual length to user's CX
  7372                                  	;mov	[si+4],cx 
  7373 00000DB1 894C04                  	MOV	[SI+user_env.user_CX],CX
  7374                                  	;jmp	SYS_RET_OK
  7375                                  	; 15/12/2022
  7376                                  	; 25/06/2019
  7377 00000DB4 E987F8                  	jmp	SYS_RET_OK_clc
  7378                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7379                                  	; 15/12/2022
  7380                                  ;nono_jmp:
  7381                                  	;jmp	short nono
  7382                                  setsize:
  7383 00000DB7 83E903                  	SUB	CX,3			; size after length field
  7384 00000DBA 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7385 00000DBC 7302                    	JAE	short setsize2		; no
  7386 00000DBE 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7387                                  setsize2:
  7388 00000DC0 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7389                                  	;ADD	DI,2			; update index
  7390                                  	;ADD	SI,2
  7391                                  	; 06/01/2024
  7392 00000DC3 47                      	inc	di
  7393 00000DC4 47                      	inc	di
  7394 00000DC5 46                      	inc	si
  7395 00000DC6 46                      	inc	si
  7396 00000DC7 89C8                    	MOV	AX,CX
  7397 00000DC9 83C003                  	ADD	AX,3			; AX has the actual length
  7398 00000DCC EBDA                    	JMP	short OK_RETN 		; go move it
  7399                                  CHKNLS:
  7400 00000DCE 30E4                    	XOR	AH,AH
  7401                                  	;PUSH	AX			; save info type
  7402                                  	;POP	BP			; bp = info type
  7403                                  	; 06/01/2024
  7404 00000DD0 89C5                    	mov	bp,ax
  7405                                  	
  7406                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7407 00000DD2 B80014                  	mov     ax,1400h
  7408 00000DD5 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7409                                  			; Return: AL = 00h not installed, OK to install
  7410                                  			; 01h not installed, not OK
  7411                                  			; FFh installed
  7412 00000DD7 3CFF                    	CMP	AL,0FFH
  7413 00000DD9 7404                    	JZ	short NLSNXT		; in memory
  7414                                  
  7415                                  sizeerror:
  7416                                  	;error	error_invalid_function
  7417                                  	;mov	al,1
  7418 00000DDB B001                    	mov	al,error_invalid_function
  7419                                  	;jmp	SYS_RET_ERR
  7420                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7421                                  sys_ret_err_jmp2:
  7422 00000DDD EBBA                    	jmp	short SYS_RET_ERR_jmp
  7423                                  
  7424                                  NLSNXT: 
  7425                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7426 00000DDF B80214                  	mov     ax,1402h
  7427 00000DE2 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7428                                  			; BP = subfunction, BX = code page
  7429                                  			; DX = country code, DS:SI -> internal code page structure
  7430                                  			; ES:DI -> user buffer, CX = size of user buffer
  7431                                  			; Return: AL = status
  7432                                  			; 00h successful
  7433                                  			; else DOS error code
  7434                                  
  7435 00000DE4 3C00                    	CMP	AL,0			; success ?
  7436 00000DE6 7505                    	JNZ	short NLSERROR
  7437                                  	;mov	ax,[si+48h] ; 13/05/2019
  7438 00000DE8 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7439                                  			; ax = sys code page id;smr;use ds;
  7440                                  			;BUGBUG;check whether DS is OK after the above calls
  7441 00000DEB EBC1                    	JMP	short GETDONE
  7442                                  seterr:
  7443                                  	; 15/12/2022
  7444                                  NLSERROR:
  7445                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7446                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7447                                  	;jmp	short sys_ret_err_jmp2
  7448                                  	; 15/12/2022
  7449 00000DED EBAA                    	jmp	short SYS_RET_ERR_jmp
  7450                                  
  7451                                  ;EndProc $GetExtCntry
  7452                                  
  7453                                  ; 13/05/2019 - Retro DOS v4.0
  7454                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7455                                  
  7456                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7457                                  ;----------------------------------------------------------------------------
  7458                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7459                                  ;
  7460                                  ;   System call format:
  7461                                  ;
  7462                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7463                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7464                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7465                                  ;	INT	21
  7466                                  ;
  7467                                  ;	ENTRY	(al) = n
  7468                                  ;		(bx) = code page
  7469                                  ;	EXIT	'C' clear
  7470                                  ;		  global code page is set	(set global code page)
  7471                                  ;		  (BX) = active code page id	(get global code page)
  7472                                  ;		  (DX) = system code page id	(get global code page)
  7473                                  ;		'C' set
  7474                                  ;		  (AX) = error code
  7475                                  
  7476                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7477                                  
  7478                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7479                                  	; DOSCODE:4BC9h
  7480                                  
  7481                                  _$GetSetCdPg:
  7482                                  
  7483                                  ;hkn; SS is DOSDATA
  7484                                  	;context DS
  7485                                  
  7486 00000DEF 16                      	push	ss
  7487 00000DF0 1F                      	pop	ds
  7488                                  
  7489                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7490 00000DF1 BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7491                                  
  7492 00000DF4 3C01                    	CMP	AL,1		       ; get global code page
  7493 00000DF6 7512                    	JNZ	short setglpg 	       ; set global code page
  7494                                  	
  7495                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7496                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7497 00000DF8 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7498                                  					; get active code page id;smr;use ds
  7499                                  	;mov	dx,[si+48h]
  7500 00000DFB 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7501                                  				  	; get sys code page id;smr;use ds
  7502 00000DFE E884F6                  	call	Get_User_Stack
  7503                                  ;ASSUME DS:NOTHING
  7504                                  	;;mov	[si+2],bx
  7505                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7506                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7507 00000E01 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7508                                  	;mov	[si+6],dx
  7509 00000E04 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7510                                  OK_RETURN:
  7511                                  	; 15/12/2022
  7512                                  	;transfer SYS_RET_OK
  7513 00000E07 E931F8                  	jmp	SYS_RET_OK
  7514                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7515                                  	;jmp	short nono_jmp
  7516                                  
  7517                                  ;hkn; ASSUME DS:DOSGROUP
  7518                                  ;ASSUME	DS:DOSDATA
  7519                                  
  7520                                  setglpg:
  7521 00000E0A 3C02                    	CMP	AL,2
  7522 00000E0C 752F                    	JNZ	short nomem
  7523                                  	
  7524                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7525                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7526 00000E0E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7527                                  	
  7528                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7529 00000E11 B80014                  	mov     ax,1400h
  7530 00000E14 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7531                                  			; Return: AL = 00h not installed, OK to install
  7532                                  			; 01h not installed, not OK
  7533                                  			; FFh installed
  7534 00000E16 3CFF                    	CMP	AL,0FFH
  7535 00000E18 7523                    	JNZ	short nomem		; not in memory
  7536                                  
  7537                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7538 00000E1A B80114                  	mov     ax,1401h
  7539 00000E1D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7540                                  			; DS:SI -> internal code page structure
  7541                                  			; BX = new code page, DX = country code???
  7542                                  			; Return: AL = status
  7543                                  			; 00h successful
  7544                                  			; else DOS error code
  7545                                  	;cmp	al,0
  7546 00000E1F 08C0                    	or	al,al			; success ?
  7547 00000E21 74E4                    	JZ	short OK_RETURN		; yes
  7548                                  
  7549 00000E23 3C41                    	CMP	AL,65			; set device code page failed
  7550 00000E25 75C6                    	JNZ	short seterr
  7551                                  	;MOV	AX,65
  7552                                  	; 06/01/2024
  7553 00000E27 98                      	cbw
  7554 00000E28 A3[2403]                	MOV	[EXTERR],AX
  7555                                  	;mov	byte [EXTERR_ACTION],6
  7556                                  	;mov	byte [EXTERR_CLASS],5
  7557                                  	;mov	byte [EXTERR_LOCUS],4
  7558 00000E2B C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7559 00000E30 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7560 00000E35 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7561                                  	;transfer From_GetSet
  7562 00000E3A E90FF8                  	jmp	From_GetSet
  7563                                  
  7564                                  	; 15/12/2022
  7565                                  ;seterr:
  7566                                  	;;;transfer SYS_RET_ERR
  7567                                  	;;jmp	SYS_RET_ERR
  7568                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7569                                  	;jmp	short NLSERROR
  7570                                  
  7571                                  nomem:
  7572                                  	;error	error_invalid_function	; function not defined
  7573                                  	;mov	al,1
  7574 00000E3D B001                    	mov	al,error_invalid_function
  7575 00000E3F EBAC                    	jmp	short seterr
  7576                                  
  7577                                  ;EndProc $GetSetCdPg
  7578                                  
  7579                                  ; 09/01/2024
  7580                                  ; 13/05/2019 - Retro DOS v4.0
  7581                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7582                                  
  7583                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7584                                  ;----------------------------------------------------------------------------
  7585                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7586                                  ;
  7587                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7588                                  ;		drive.
  7589                                  ;
  7590                                  ;	This call returns the same info in the same registers (except for the
  7591                                  ;	FAT pointer) as the old FAT pointer calls
  7592                                  ;
  7593                                  ;	ENTRY	DL = Drive number
  7594                                  ;	EXIT	AX = Sectors per allocation unit
  7595                                  ;		   = -1 if bad drive specified
  7596                                  ;		On User Stack
  7597                                  ;		    BX = Number of free allocation units
  7598                                  ;		    DX = Total Number of allocation units on disk
  7599                                  ;		    CX = Sector size
  7600                                  
  7601                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7602                                  
  7603                                  _$GET_DRIVE_FREESPACE:
  7604                                  
  7605                                  ;hkn; SS is DOSDATA
  7606                                  	;context DS
  7607 00000E41 16                      	push	ss
  7608 00000E42 1F                      	pop	ds
  7609                                  
  7610 00000E43 88D0                    	MOV	AL,DL
  7611                                  	;invoke	GetThisDrv		; Get drive
  7612 00000E45 E8455C                  	call	GETTHISDRV
  7613                                  SET_AX_RET:
  7614 00000E48 7212                    	JC	short BADFDRV
  7615                                  	;invoke	DISK_INFO
  7616 00000E4A E88B1E                  	call	DISK_INFO
  7617 00000E4D 87D3                    	XCHG	DX,BX
  7618                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7619                                  	; 06/01/2024
  7620 00000E4F 720B                    	jc	short BADFDRV
  7621 00000E51 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7622                                  DoSt:
  7623 00000E53 E82FF6                  	call	Get_User_Stack
  7624                                  ;ASSUME	DS:NOTHING
  7625                                  	;mov	[si+6],dx
  7626                                  	;;mov	[si+4],cx
  7627                                  	;;mov	[si+2],bx
  7628                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7629 00000E56 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7630                                  	;MOV	[SI+user_env.user_CX],CX
  7631                                  	;MOV	[SI+user_env.user_BX],BX
  7632                                  	;;MOV	[SI+user_env.user_AX],AX
  7633                                  	;mov	[si],ax
  7634                                  	;;return
  7635                                  	;retn
  7636                                  	; 09/01/2024
  7637 00000E59 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7638                                  
  7639                                  BADFDRV:
  7640                                  	; MSDOS 3.3
  7641                                  	;;mov	al,0Fh
  7642                                  	;mov	al,error_invalid_drive	; Assume error
  7643                                  
  7644                                  	; 13/05/2019 - Retro DOS v4.0
  7645                                  
  7646                                  	; MSDOS 6.0 & MSDOS 3.3
  7647                                  	;invoke	FCB_RET_ERR
  7648 00000E5C E8FBF7                  	call	FCB_RET_ERR
  7649                                  	
  7650 00000E5F B8FFFF                  	MOV	AX,-1
  7651 00000E62 EBEF                    	JMP	short DoSt
  7652                                  
  7653                                  ;EndProc $GET_DRIVE_FREESPACE
  7654                                  
  7655                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7656                                  ;----------------------------------------------------------------------------
  7657                                  ;**	$Get_DMA - Get Disk Transfer Address
  7658                                  ;
  7659                                  ;	ENTRY	none
  7660                                  ;	EXIT	ES:BX is current transfer address
  7661                                  ;	USES	all
  7662                                  
  7663                                  	; 09/01/2024
  7664                                  _$GET_DMA:
  7665 00000E64 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7666 00000E69 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7667 00000E6E E814F6                  	call	Get_User_Stack
  7668                                  	;mov	[si+2],bx
  7669                                  	;mov	[si+10h],cx
  7670                                  	; 09/01/2024
  7671                                  	;MOV	[SI+user_env.user_BX],BX
  7672 00000E71 894C10                  	MOV	[SI+user_env.user_ES],CX
  7673                                  	;retn
  7674                                  	; 09/01/2024
  7675 00000E74 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7676                                  
  7677                                  ;**	$Set_DMA - Set Disk Transfer Address
  7678                                  ;----------------------------------------------------------------------------
  7679                                  ;	ENTRY	DS:DX is current transfer address
  7680                                  ;	EXIT	none
  7681                                  ;	USES	all
  7682                                  
  7683                                  _$SET_DMA:
  7684 00000E77 368916[2C03]            	MOV	[SS:DMAADD],DX
  7685 00000E7C 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7686 00000E81 C3                      	retn
  7687                                  
  7688                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7689                                  ;------------------------------------------------------------------------------
  7690                                  
  7691                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7692                                  ;-----------------------------------------------------
  7693                                  ;	ENTRY	none
  7694                                  ;	EXIT	(AL) = drive number
  7695                                  ;	USES	all
  7696                                  
  7697                                  _$GET_DEFAULT_DRIVE:
  7698 00000E82 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7699 00000E86 C3                      	retn
  7700                                  
  7701                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7702                                  ;-----------------------------------------------------
  7703                                  ;	ENTRY	(DL) = Drive number for new default drive
  7704                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7705                                  
  7706                                  _$SET_DEFAULT_DRIVE:
  7707 00000E87 88D0                    	MOV	AL,DL
  7708 00000E89 FEC0                    	INC	AL			; A=1, B=2...
  7709 00000E8B E8E35B                  	call	GetVisDrv		; see if visible drive
  7710 00000E8E 7204                    	JC	short SETRET		; errors do not set
  7711 00000E90 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7712                                  
  7713                                  SETRET:
  7714 00000E94 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7715 00000E98 C3                      	retn
  7716                                  
  7717                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7718                                  ;----------------------------------------------------------------------------
  7719                                  
  7720                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7721                                  ;---------------------------------------------------
  7722                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7723                                  ;	contents of an interrupt vector.
  7724                                  ;
  7725                                  ;	ENTRY	(AL) = interrupt number
  7726                                  ;	EXIT	(ES:BX) = current interrupt vector
  7727                                  
  7728                                  _$GET_INTERRUPT_VECTOR:
  7729 00000E99 E82E00                  	CALL	RECSET
  7730 00000E9C 26C41F                  	LES	BX,[ES:BX]
  7731 00000E9F E8E3F5                  	call	Get_User_Stack
  7732                                  set_user_es_bx:
  7733                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7734                                  	;;mov	[si+2],bx
  7735                                  	;mov	[si+10h],es
  7736                                  	;MOV	[SI+user_env.user_BX],BX
  7737 00000EA2 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7738                                  	;retn
  7739 00000EA5 E9B7FD                  	jmp	set_user_bx
  7740                                  
  7741                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7742                                  ;---------------------------------------------------
  7743                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7744                                  ;	contents of an interrupt vector.
  7745                                  ;
  7746                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7747                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7748                                  ;	for explanation.
  7749                                  ;
  7750                                  ;	ENTRY	(AL) = interrupt number
  7751                                  ;		(ds:dx) = desired new vector value
  7752                                  ;	EXIT	none
  7753                                  ;	USES	all
  7754                                  
  7755                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7756                                  ; 13/05/2019 - Retro DOS v4.0
  7757                                  
  7758                                  _$SET_INTERRUPT_VECTOR:
  7759 00000EA8 E81F00                  	CALL	RECSET
  7760 00000EAB FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7761 00000EAC 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7762 00000EAF 268C5F02                	MOV	[ES:BX+2],DS
  7763 00000EB3 FB                      	STI
  7764                                  					; M004, M068 - Start
  7765                                  	; MSDOS 6.0
  7766 00000EB4 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7767                                  					; Q: was the previous call an int 21h
  7768                                  					;    exec call
  7769                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7770                                  	;jnz	short siv_1		; Y: go set count
  7771                                  	;retn				; N: return
  7772                                  	; 15/12/2022
  7773 00000EBA 740D                    	jz	short siv_2
  7774                                  siv_1:	
  7775 00000EBC 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7776 00000EC2 7505                    	jnz	short siv_2		 ; N: done
  7777                                  	; 20/09/2023
  7778 00000EC4 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7779                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7780                                  					 ; dispatcher to turn A20 Off before
  7781                                  					 ; returning to user.
  7782                                  siv_2:
  7783                                  	; 07/12/2022
  7784 00000EC9 C3                      	retn				; M004, M068 - End
  7785                                  	
  7786                                  RECSET:
  7787 00000ECA 31DB                    	XOR	BX,BX
  7788 00000ECC 8EC3                    	MOV	ES,BX
  7789 00000ECE 88C3                    	MOV	BL,AL
  7790 00000ED0 D1E3                    	SHL	BX,1
  7791 00000ED2 D1E3                    	SHL	BX,1
  7792 00000ED4 C3                      	retn
  7793                                  
  7794                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7795                                  ;-------------------------------------------------------------------------------------
  7796                                  
  7797                                  ;**	$Char_Oper - Manipulate Switch Character
  7798                                  ;
  7799                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7800                                  ;
  7801                                  ;	ENTRY	AL = function:
  7802                                  ;		    0 - read switch char
  7803                                  ;		    1 - set switch char (char in DL)
  7804                                  ;		    2 - read device availability
  7805                                  ;			Always returns available
  7806                                  ;		    3 - set device availability
  7807                                  ;			No longer supported (NOP)
  7808                                  ;	EXIT	(al) = 0xff iff error
  7809                                  ;		(al) != 0xff if ok
  7810                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7811                                  ;	USES	AL, DL
  7812                                  ;
  7813                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7814                                  ;		The character / is always returned for subfunction 0,
  7815                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7816                                  
  7817                                  ; 13/05/2019 - Retro DOS v4.0
  7818                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7819                                  
  7820                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7821                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7822                                  
  7823                                  _$CHAR_OPER:
  7824                                  	; MSDOS 6.0
  7825 00000ED5 08C0                    	or	al,al				; get switch?
  7826 00000ED7 B22F                    	mov	dl,'/'				; assume yes
  7827 00000ED9 7407                    	jz	short chop_1			; jump if yes
  7828 00000EDB 3C02                    	cmp	al,2				; check device availability?
  7829 00000EDD B2FF                    	mov	dl,-1				; assume yes
  7830 00000EDF 7401                    	jz	short chop_1			; jump if yes
  7831 00000EE1 C3                      	retn					; otherwise just quit
  7832                                  
  7833                                  ; subfunctions requiring return of value to user come here. DL holds
  7834                                  ; value to return
  7835                                  
  7836                                  chop_1:
  7837 00000EE2 E8A0F5                  	call	Get_User_Stack
  7838 00000EE5 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7839 00000EE8 C3                      	retn
  7840                                  
  7841                                  	; MSDOS 3.3
  7842                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7843                                  	;push	ss
  7844                                  	;pop	ds
  7845                                  	;cmp	al,1
  7846                                  	;jb	short chop_1
  7847                                  	;jz	short chop_2
  7848                                  	;cmp	al,3
  7849                                  	;jb	short chop_3
  7850                                  	;jz	short chop_5
  7851                                  	;mov	al,0FFh
  7852                                  	;retn
  7853                                  ;chop_1:
  7854                                  	;mov	dl,[chSwitch]
  7855                                  	;jmp	short chop_4
  7856                                  ;chop_2:
  7857                                  	;mov	[chSwitch],dl
  7858                                  	;retn
  7859                                  ;chop_3:
  7860                                  	;mov	dl, FFh
  7861                                  ;chop_4:
  7862                                  	;call	Get_User_Stack
  7863                                  	;mov	[si+6],dx
  7864                                  ;chop_5:
  7865                                  	;retn
  7866                                  
  7867                                  ;**	$GetExtendedError - Return Extended error code
  7868                                  ;----------------------------------------------------------------------------
  7869                                  ;	This function reads up the extended error info from the static
  7870                                  ;	variables where it was stored.
  7871                                  ;
  7872                                  ;	ENTRY	none
  7873                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7874                                  ;		BL = recommended action
  7875                                  ;		BH = class of error
  7876                                  ;		CH = locus of error
  7877                                  ;		ES:DI = may be pointer
  7878                                  ;	USES	ALL
  7879                                  
  7880                                  	; 09/01/2024
  7881                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7882                                  
  7883                                  _$GetExtendedError:
  7884 00000EE9 16                      	push	ss
  7885 00000EEA 1F                      	pop	ds
  7886 00000EEB A1[2403]                	MOV	AX,[EXTERR]
  7887 00000EEE C43E[2803]              	LES	DI,[EXTERRPT]
  7888 00000EF2 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7889 00000EF6 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7890 00000EFA E888F5                  	call	Get_User_Stack
  7891                                  	;mov	[si+0Ah],di
  7892 00000EFD 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7893                                  
  7894                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7895                                  	;;mov	[si+10h],es
  7896                                  	;MOV	[SI+user_env.user_ES],ES
  7897                                  	;;mov	[si+2],bx
  7898                                  	;MOV	[SI+user_env.user_BX],BX
  7899 00000F00 E89FFF                  	call	set_user_es_bx
  7900                                  
  7901                                  	;mov	[si+4],cx
  7902 00000F03 894C04                  	MOV	[SI+user_env.user_CX],CX
  7903                                  jmp_SYS_RET_OK:
  7904                                  	; 15/12/2022
  7905                                  	;jmp	SYS_RET_OK
  7906                                  	; 25/06/2019
  7907 00000F06 E935F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7908                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7909                                  ;jmp_SYS_RET_OK:
  7910                                  	;jmp	SYS_RET_OK
  7911                                  
  7912                                  ; --------------------------------------------------------------------------
  7913                                  ; 09/01/2024
  7914                                  %if 0
  7915                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7916                                  	; DOSCODE:4CF3h
  7917                                  ;patch_or_unknown:
  7918                                  ;get_code_page:
  7919                                  	push    si
  7920                                  	mov     si, COUNTRY_CDPG
  7921                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7922                                  	mov     ax, [ss:si+6Ah]
  7923                                  	pop     si
  7924                                  	retn
  7925                                  %endif
  7926                                  ; --------------------------------------------------------------------------
  7927                                  
  7928                                  ; 29/04/2019 - Retro DOS v4.0
  7929                                  
  7930                                  ;BREAK	<ECS_call - Extended Code System support function>
  7931                                  ;---------------------------------------------------------------------------
  7932                                  ; Inputs:
  7933                                  ;	AL = 0	get lead byte table
  7934                                  ;		on return DS:SI has the table location
  7935                                  ;
  7936                                  ;	AL = 1	set / reset interim console flag
  7937                                  ;		DL = flag (00H or 01H)
  7938                                  ;		no return
  7939                                  ;
  7940                                  ;	AL = 2	get interim console flag
  7941                                  ;		on return DL = current flag value
  7942                                  ;
  7943                                  ;	AL = OTHER then error, and returns with:
  7944                                  ;		AX = error_invalid_function
  7945                                  ;
  7946                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7947                                  ;	 SS:SP WILL BE PRESERVED!
  7948                                  ;---------------------------------------------------------------------------
  7949                                  
  7950                                  _$ECS_Call:
  7951 00000F09 08C0                    	or	al,al			; AL = 0 (get table)?
  7952                                  	;jnz	short _okok
  7953                                  	; 15/12/2022
  7954 00000F0B 7403                    	jz	short get_lbt
  7955                                  ;_okok:
  7956 00000F0D E92BF7                  	jmp	SYS_RET_OK
  7957                                  get_lbt:
  7958 00000F10 E872F5                  	call	Get_User_Stack		; *
  7959                                  
  7960                                  ;hkn; dbcs_table moved low to dosdata
  7961                                  	;mov	word [si+8],DBCS_TAB+2
  7962 00000F13 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7963                                  
  7964 00000F18 06                      	push	es
  7965                                  	;getdseg <es>			; es = DOSDATA
  7966 00000F19 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7967                                  	;mov	[si+14],es
  7968 00000F1E 8C440E                  	mov	[SI+user_env.user_DS],es
  7969 00000F21 07                      	pop	es
  7970                                  
  7971                                  	; 15/12/2022
  7972 00000F22 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7973                                  ;_okok:
  7974                                  	; 15/12/2022	
  7975                                  	;;transfer SYS_RET_OK
  7976                                  	;jmp	short jmp_SYS_RET_OK
  7977                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7978                                  	;;jmp	SYS_RET_OK
  7979                                  	;jmp	short jmp_SYS_RET_OK
  7980                                  
  7981                                  ;============================================================================
  7982                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7983                                  ;============================================================================
  7984                                  ; 19/07/2018 - Retro DOS v3.0
  7985                                  ; 15/05/2019 - Retro DOS v4.0
  7986                                  
  7987                                  ; System calls for parsing command lines
  7988                                  ;
  7989                                  ;   $PARSE_FILE_DESCRIPTOR
  7990                                  ;
  7991                                  ;   Modification history:
  7992                                  ;
  7993                                  ;       Created: ARR 30 March 1983
  7994                                  ;               EE PathParse 10 Sept 1983
  7995                                  ;
  7996                                  
  7997                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7998                                  ;---------------------------------------------------------------------------
  7999                                  ; Inputs:
  8000                                  ;       DS:SI Points to a command line
  8001                                  ;       ES:DI Points to an empty FCB
  8002                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8003                                  ;                   = 0 Parse stops if separator encountered
  8004                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8005                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8006                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8007                                  ;                   = 0  "       "      "       - put blanks in FCB
  8008                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8009                                  ;                   = 0  "       "      "        - put blanks in FCB
  8010                                  ; Function:
  8011                                  ;       Parse command line into FCB
  8012                                  ; Returns:
  8013                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8014                                  ;       DS:SI points to first character after filename
  8015                                  ;---------------------------------------------------------------------------
  8016                                  
  8017                                  _$PARSE_FILE_DESCRIPTOR:
  8018 00000F24 E8DC3F                  	call	MAKEFCB
  8019 00000F27 56                      	PUSH    SI
  8020 00000F28 E85AF5                  	call	Get_User_Stack
  8021                                  	;pop	word [si+8]
  8022 00000F2B 8F4408                  	POP     word [SI+user_env.user_SI]
  8023 00000F2E C3                      	retn
  8024                                  
  8025                                  ;============================================================================
  8026                                  ; MISC.ASM, MSDOS 6.0, 1991
  8027                                  ;============================================================================
  8028                                  ; 19/07/2018 - Retro DOS v3.0
  8029                                  
  8030                                  ; 29/04/2019 - Retro DOS v4.0
  8031                                  
  8032                                  ;ENTRYPOINTSEG	EQU	0CH
  8033                                  ;MAXDIF		EQU	0FFFH
  8034                                  ;SAVEXIT 	EQU	10
  8035                                  ;WRAPOFFSET	EQU	0FEF0h
  8036                                  
  8037                                  ;
  8038                                  ;----------------------------------------------------------------------------
  8039                                  ;
  8040                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8041                                  ;
  8042                                  ;	Return Stuff sort of like old get fat call
  8043                                  ;
  8044                                  ;	ENTRY	none
  8045                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8046                                  ;			GOD help anyone who tries to do ANYTHING except
  8047                                  ;			READ this ONE byte.
  8048                                  ;		DX = Total Number of allocation units on disk
  8049                                  ;		CX = Sector size
  8050                                  ;		AL = Sectors per allocation unit
  8051                                  ;		   = -1 if bad drive specified
  8052                                  ;	USES	all
  8053                                  ;
  8054                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8055                                  ;
  8056                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8057                                  ;
  8058                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8059                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8060                                  ;			GOD help anyone who tries to do ANYTHING except
  8061                                  ;			READ this ONE byte.
  8062                                  ;		DX = Total Number of allocation units on disk
  8063                                  ;		CX = Sector size
  8064                                  ;		AL = Sectors per allocation unit
  8065                                  ;		   = -1 if bad drive specified
  8066                                  ;	USES	all
  8067                                  ;
  8068                                  ;----------------------------------------------------------------------------
  8069                                  ;
  8070                                  
  8071                                  _$SLEAZEFUNC:
  8072                                  	; 10/01/2024
  8073                                  	; 15/05/2019 - Retro DOS v4.0
  8074 00000F2F B200                    	MOV	DL,0
  8075                                  _$SLEAZEFUNCDL:
  8076 00000F31 16                      	push	ss
  8077 00000F32 1F                      	pop	ds
  8078                                  	
  8079 00000F33 88D0                    	MOV	AL,DL
  8080 00000F35 E8555B                  	call	GETTHISDRV		; Get CDS structure
  8081                                  SET_AL_RET:
  8082                                  	; MSDOS 3.3
  8083                                  	;;mov	al, 0Fh
  8084                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8085                                  	
  8086                                  	; MSDOS 6.0 & MSDOS 3.3
  8087 00000F38 721D                    	JC	short BADSLDRIVE
  8088                                  
  8089 00000F3A E89B1D                  	call	DISK_INFO
  8090                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8091 00000F3D 7218                    	jc	short BADSLDRIVE
  8092 00000F3F 8826[9805]              	MOV	[FATBYTE],AH
  8093                                  
  8094                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8095                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8096                                  ; CALL AGAIN
  8097                                  
  8098                                  	; 10/01/2024
  8099                                  	;MOV	DI,FATBYTE
  8100 00000F43 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8101 00000F45 E83DF5                  	call	Get_User_Stack
  8102                                  	;mov	[si+4],cx
  8103                                  	;mov	[si+6],bx
  8104                                  	;mov	[si+2],di
  8105 00000F48 894C04                  	MOV	[SI+user_env.user_CX],CX
  8106 00000F4B 895C06                  	MOV	[SI+user_env.user_DX],BX
  8107                                  	;MOV	[SI+user_env.user_BX],DI
  8108                                  	; 10/01/2024
  8109 00000F4E C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8110                                  	
  8111                                  	;mov	[si+0Eh],ss
  8112 00000F53 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8113                                  
  8114 00000F56 C3                      	retn
  8115                                  
  8116                                  BADSLDRIVE:
  8117 00000F57 E900F7                  	jmp	FCB_RET_ERR
  8118                                  
  8119                                  ;
  8120                                  ;----------------------------------------------------------------------------
  8121                                  ;
  8122                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8123                                  ;
  8124                                  ;	Returns location of DOS status for interrupt routines
  8125                                  ;
  8126                                  ;	ENTRY	none
  8127                                  ;	EXIT	(es:bx) = flag location
  8128                                  ;	USES	all
  8129                                  ;
  8130                                  ;----------------------------------------------------------------------------
  8131                                  ;
  8132                                  
  8133                                  _$GET_INDOS_FLAG:
  8134 00000F5A E828F5                          CALL	Get_User_Stack
  8135                                          ;MOV	WORD [SI+2],INDOS
  8136 00000F5D C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8137                                  getin_segm:	; 13/01/2024
  8138                                  	;MOV	[SI+10H],SS
  8139 00000F62 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8140 00000F65 C3                      	RETN 
  8141                                  ;
  8142                                  ;----------------------------------------------------------------------------
  8143                                  ;
  8144                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8145                                  ;
  8146                                  ;	Return a pointer to interesting DOS variables This call is version
  8147                                  ;	dependent and is subject to change without notice in future versions.
  8148                                  ;	Use at risk.
  8149                                  ;
  8150                                  ;	ENTRY	none
  8151                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8152                                  ;	uses	ALL
  8153                                  ;
  8154                                  ;----------------------------------------------------------------------------
  8155                                  ;
  8156                                  
  8157                                  	; 13/01/2024
  8158                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8159                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8160                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8161                                  
  8162                                  _$GET_IN_VARS:
  8163 00000F66 E81CF5                  	CALL	Get_User_Stack
  8164                                  	;MOV	WORD [SI+2],SYSINITVAR
  8165                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8166 00000F69 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8167                                  	; 13/01/2024
  8168                                  	;;MOV	[SI+10H],SS
  8169                                  	;MOV	[SI+user_env.user_ES],SS
  8170                                  	;RETN
  8171 00000F6E EBF2                    	jmp	short getin_segm
  8172                                  
  8173                                  ;
  8174                                  ;----------------------------------------------------------------------------
  8175                                  ;
  8176                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8177                                  ;
  8178                                  ;	Return pointer to drive parameter table for default drive
  8179                                  ;
  8180                                  ;	ENTRY	none
  8181                                  ;	EXIT	(ds:bx) = DPB address
  8182                                  ;	USES	all
  8183                                  ;
  8184                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8185                                  ;
  8186                                  ;	Return pointer to a specified drive parameter table
  8187                                  ;
  8188                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8189                                  ;	EXIT	(al) = 0 iff ok
  8190                                  ;		  (ds:bx) = DPB address
  8191                                  ;		(al) = -1 if bad drive
  8192                                  ;	USES	all
  8193                                  ;
  8194                                  ;----------------------------------------------------------------------------
  8195                                  ;
  8196                                  
  8197                                  ; 15/05/2019 - Retro DOS v4.0
  8198                                  
  8199                                  _$GET_DEFAULT_DPB:
  8200 00000F70 B200                    	MOV	DL,0
  8201                                  _$GET_DPB:
  8202 00000F72 16                      	push	ss
  8203 00000F73 1F                      	pop	ds
  8204                                  
  8205 00000F74 88D0                    	MOV	AL,DL
  8206 00000F76 E8145B                  	call	GETTHISDRV		; Get CDS structure
  8207 00000F79 7222                    	JC	short ISNODRV 		; no valid drive
  8208 00000F7B C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8209                                  	;;test	word [es:di+43h],8000h
  8210                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8211                                  	;test	byte [es:di+44h],80h
  8212 00000F7F 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8213 00000F84 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8214 00000F86 E88903                  	call	ECritDisk
  8215 00000F89 E83E47                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8216 00000F8C E89E03                  	call	LCritDisk
  8217 00000F8F 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8218                                  					;   have.
  8219 00000F91 E8F1F4                  	call	Get_User_Stack
  8220                                  	;mov	[si+2],bp
  8221 00000F94 896C02                  	MOV	[SI+user_env.user_BX],BP
  8222                                  	;mov	[si+0Eh],es
  8223 00000F97 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8224 00000F9A 30C0                    	XOR	AL,AL
  8225 00000F9C C3                      	retn
  8226                                  ISNODRV:
  8227 00000F9D B0FF                    	MOV	AL,-1
  8228 00000F9F C3                      	retn
  8229                                  
  8230                                  ;
  8231                                  ;----------------------------------------------------------------------------
  8232                                  ;
  8233                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8234                                  ;
  8235                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8236                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8237                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8238                                  ;
  8239                                  ;	ENTRY	none
  8240                                  ;	EXIT	none
  8241                                  ;	USES	all
  8242                                  ;
  8243                                  ;----------------------------------------------------------------------------
  8244                                  ;
  8245                                  
  8246                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8247                                  	; DOSCODE:4D94h
  8248                                  _$DISK_RESET:
  8249                                  	; 15/05/2019 - Retro DOS v4.0
  8250 00000FA0 B0FF                    	mov	al,0FFh	; -1
  8251 00000FA2 16                      	push	ss
  8252 00000FA3 1F                      	pop	ds
  8253                                  	; 06/11/2022
  8254                                  	;MOV	AL,-1
  8255 00000FA4 E86B03                  	call	ECritDisk
  8256                                  	; MSDOS 6.0
  8257                                  	;;or	word [DOS34_FLAG],4
  8258                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8259 00000FA7 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8260 00000FAC E8944A                  	call	FLUSHBUF
  8261                                  	; MSDOS 6.0
  8262                                  	;and	word [DOS34_FLAG],0FFFBh
  8263                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8264                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8265                                  	; 15/12/2022
  8266 00000FAF 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8267 00000FB4 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8268                                  ;
  8269                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8270                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8271                                  ; let's do it.
  8272                                  ;
  8273                                  ; Invalidate 'last-buffer' used
  8274                                  ;
  8275 00000FBA BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8276 00000FBD 891E[2000]              	MOV	[LastBuffer+2],BX
  8277 00000FC1 891E[1E00]              	MOV	[LastBuffer],BX
  8278                                  
  8279                                  	; MSDOS 3.3 
  8280                                  	; IBMDOS.COM, Offset 1C66h
  8281                                  	;;;;
  8282                                  	;lds	si,[BUFFHEAD]
  8283                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8284                                  				; .buf_flags, AH = 0, reset/clear
  8285                                  ;DRST_1:
  8286                                  	;;mov	[si+4],ax
  8287                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8288                                  	;lds	si,[SI]
  8289                                  	;cmp	si,bx ; -1
  8290                                  	;je	short DRST_2
  8291                                  	;;mov	[si+4],ax
  8292                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8293                                  	;lds	si,[SI]
  8294                                  	;cmp	si,bx
  8295                                  	;jne	short DRST_1
  8296                                  	;;;;
  8297                                  ;DRST_2:
  8298 00000FC5 E86503                  	call	LCritDisk
  8299 00000FC8 B8FFFF                  	MOV	AX,-1
  8300                                  	; 07/12/2022
  8301                                  	;mov	ax,0FFFFh
  8302                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8303 00000FCB 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8304 00000FCC B82011                  	mov     ax,1120h
  8305 00000FCF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8306                                  			; DS = DOS CS
  8307                                  			; Return: CF clear (successful)
  8308 00000FD1 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8309                                  	
  8310 00000FD2 C3                      	retn
  8311                                  
  8312                                  	; 19/07/2018 - Retro DOS v3.0
  8313                                  
  8314                                  ;
  8315                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8316                                  ;
  8317                                  ;----------------------------------------------------------------------------
  8318                                  ;
  8319                                  ;**	$SetDPB - Create a DPB
  8320                                  ;
  8321                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8322                                  ;
  8323                                  ;	ENTRY	ES:BP Points to DPB
  8324                                  ;		DS:SI Points to BPB
  8325                                  ;	EXIT	DPB setup
  8326                                  ;	USES	ALL but BP, DS, ES
  8327                                  ;
  8328                                  ;----------------------------------------------------------------------------
  8329                                  ;
  8330                                  
  8331                                  ; 10/05/2019 - Retro DOS v4.0
  8332                                  
  8333                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8334                                  
  8335                                  ; MSDOS 6.0
  8336 00000FD3 0300                    word3:	dw	3			; M008 -- word value for divides
  8337                                  
  8338                                  ; 13/01/2024
  8339                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8340                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8341                                  
  8342                                  ;procedure   $SETDPB,NEAR
  8343                                  
  8344                                  _$SETDPB:
  8345 00000FD5 89EF                    	MOV	DI,BP
  8346                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8347                                  	; 13/01/2024
  8348 00000FD7 47                      	inc	di
  8349 00000FD8 47                      	inc	di
  8350 00000FD9 AD                      	LODSW
  8351 00000FDA AB                      	STOSW				; dpb_sector_size
  8352                                  	; MSDOS 6.0
  8353                                  	;cmp	byte [si+3],0
  8354 00000FDB 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8355 00000FDF 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8356                                  	;mov	byte [es:di+4],0
  8357 00000FE1 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8358                                  	; 13/01/2024
  8359 00000FE6 89C3                    	mov	bx,ax
  8360 00000FE8 EB70                    	JMP	short setend			     ; NO		;AN000;
  8361                                  
  8362                                  yesfat: ; 10/08/2018
  8363 00000FEA 89C2                    	MOV	DX,AX
  8364 00000FEC AC                      	LODSB
  8365                                  	;DEC	AL
  8366                                  	; 17/12/2022
  8367 00000FED 48                      	dec	ax
  8368 00000FEE AA                      	STOSB				; dpb_cluster_mask
  8369                                  	;INC	AL
  8370 00000FEF 40                      	inc	ax
  8371 00000FF0 30E4                    	XOR	AH,AH
  8372                                  LOG2LOOP:
  8373 00000FF2 A801                    	test	AL,1
  8374 00000FF4 7506                    	JNZ	short SAVLOG
  8375 00000FF6 FEC4                    	INC	AH
  8376 00000FF8 D0E8                    	SHR	AL,1
  8377 00000FFA EBF6                    	JMP	SHORT LOG2LOOP
  8378                                  SAVLOG:
  8379 00000FFC 88E0                    	MOV	AL,AH
  8380 00000FFE AA                      	STOSB				; dpb_cluster_shift
  8381 00000FFF 88C3                    	MOV	BL,AL
  8382 00001001 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8383 00001002 AC                      	LODSB
  8384 00001003 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8385                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8386                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8387 00001004 88C7                    	MOV	BH,AL
  8388 00001006 AD                      	LODSW
  8389 00001007 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8390 00001008 B105                    	MOV	CL,5
  8391 0000100A D3EA                    	SHR	DX,CL			; Directory entries per sector
  8392 0000100C 48                      	DEC	AX
  8393 0000100D 01D0                    	ADD	AX,DX			; Cause Round Up
  8394 0000100F 89D1                    	MOV	CX,DX
  8395 00001011 31D2                    	XOR	DX,DX
  8396 00001013 F7F1                    	DIV	CX
  8397 00001015 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8398 00001017 47                      	INC	DI
  8399 00001018 47                      	INC	DI			; Skip dpb_first_sector
  8400 00001019 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8401 0000101A AC                      	LODSB
  8402                                  	;mov	[es:bp+17h],al
  8403 0000101B 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8404 0000101F AD                      	LODSW				; Number of sectors in a FAT
  8405                                  	
  8406                                  	;;;
  8407                                  	;MSDOS 3.3
  8408                                  	;
  8409                                  	;STOSB		; DPB.FAT_SIZE
  8410                                  	;MUL	BH
  8411                                  	
  8412                                  	;MSDOS 6.0
  8413                                  	;
  8414 00001020 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8415 00001021 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8416 00001023 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8417 00001025 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8418                                  	;;;
  8419                                  	
  8420                                  	;add	ax,[es:bp+6]
  8421 00001027 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8422 0000102B AB                      	STOSW				; dpb_dir_sector
  8423 0000102C 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8424                                  	;mov	[es:bp+0Bh],ax
  8425 0000102E 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8426                                  	
  8427                                  	; MSDOS 6.0
  8428 00001032 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8429                                  	;;cmp	word [es:bp+0Dh],0
  8430                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8431                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8432                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8433                                  	; 15/12/2022
  8434                                  	; 28/07/2019
  8435 00001034 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8436 00001038 09DB                    	or	bx,bx
  8437 0000103A 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8438                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8439                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8440                                  	
  8441                                  
  8442 0000103C 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8443                                  	;mov	bx,[si+8]
  8444 0000103E 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8445                                  	;mov	dx,[si+10]
  8446 00001041 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8447 00001044 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8448 00001046 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8449 00001049 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8450 0000104B 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8451                                  rott:					;AN000;;F.C. >32mb
  8452 0000104D F8                      	CLC				;AN000;;F.C. >32mb
  8453 0000104E D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8454 00001050 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8455 00001052 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8456                                  norot:					;AN000;
  8457                                  	; 15/12/2022
  8458                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8459 00001054 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8460                                  normal_dpb:
  8461                                  	;;sub	ax,[es:bp+0Dh]
  8462                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8463                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8464                                  	; 15/12/2022
  8465                                  	; bx = [es:bp+DSKSIZ]
  8466                                  	;sub	ax,bx ; 28/07/2019
  8467                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8468                                  	; 15/12/2022
  8469 00001056 29C3                    	sub	bx,ax
  8470                                  	;NEG	AX			; Sectors in data area
  8471                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8472                                  	; 15/12/2022
  8473                                  	; CL = cluster shift
  8474                                  	; BX = number of data sectors 
  8475                                  	;SHR	AX,CL			; Div by sectors/cluster
  8476 00001058 D3EB                    	shr	bx,cl 
  8477                                  setend:
  8478                                  ;	M008 - CAS
  8479                                  ;
  8480                                  	; 15/12/2022
  8481 0000105A 43                      	inc	bx
  8482                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8483                                  ;
  8484                                  ;	There has been a bug in our fatsize calculation for so long
  8485                                  ;	  that we can't correct it now without causing some user to
  8486                                  ;	  experience data loss. There are even cases where allowing
  8487                                  ;	  the number of clusters to exceed the fats is the optimal
  8488                                  ;	  case -- where adding 2 more fat sectors would make the
  8489                                  ;	  data field smaller so that there's nothing to use the extra
  8490                                  ;	  fat sectors for.
  8491                                  ;
  8492                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8493                                  ;	  still report that there was a cluster left when the disk was
  8494                                  ;	  actually full. Very graceful failure for a corrupt system
  8495                                  ;	  configuration. There may be worse cases that were never
  8496                                  ;	  properly traced back to this bug. The problem cases only
  8497                                  ;	  occurred when partition sizes were very near FAT sector
  8498                                  ;	  rounding boundaries, which were rare cases.
  8499                                  ;
  8500                                  ;	Also, it's possible that some third-party partition program might
  8501                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8502                                  ;	  scheme. In this hypothetical case, the number of allocation
  8503                                  ;	  clusters which don't actually have FAT entries to represent
  8504                                  ;	  them might be larger and might create a more catastrophic
  8505                                  ;	  failure. So we'll provide the safeguard of limiting the
  8506                                  ;	  max_cluster to the amount that will fit in the FATs.
  8507                                  ;
  8508                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8509                                  
  8510                                  ;	make sure the number of fat sectors is actually enough to
  8511                                  ;	  hold that many clusters. otherwise, back the number of
  8512                                  ;	  clusters down
  8513                                  
  8514                                  	; 15/12/2022
  8515                                  	; bx = number of clusters
  8516                                  
  8517                                  	; 19/07/2018 - Retro DOS v3.0
  8518                                  	; MSDOS 6.0
  8519                                  	; 15/12/2022
  8520                                  	;mov	bx,ax			; remember calculated # clusters
  8521                                  
  8522                                  	; 01/08/2018 (MSDOS 3.3)
  8523                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8524                                  	;xor	ah,ah 
  8525                                  
  8526                                  	; 10/05/2019 - Retro DOS v4.0
  8527                                  	;mov	ax,[ES:BP+0Fh]
  8528 0000105B 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8529                                  
  8530                                  	;mul	word [es:bp+2]	
  8531 0000105F 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8532 00001063 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8533 00001067 720D                    	jb	short setend_fat12
  8534 00001069 D1EA                    	shr	dx,1
  8535                                  
  8536                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8537                                  	; 15/12/2022
  8538                                  ;cs3 7/2/92
  8539 0000106B 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8540                                  					; than enough for the maximum FAT,
  8541                                  					; so go ahead and use the calculated
  8542                                  					; number of clusters.
  8543                                  ;cs3 7/2/92
  8544                                  
  8545 0000106D D1D8                    	rcr	ax,1			; find number of entries
  8546 0000106F 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8547                                  ;					;  into 12-bit fatland?
  8548 00001072 7215                    	jb	short setend_faterr	; then go ahead and let the
  8549                                  ;					;  inconsistency pass through
  8550                                  ;					;  rather than lose data by
  8551                                  ;					;  correcting the fat type
  8552 00001074 EB0E                    	jmp	short setend_fat16
  8553                                  
  8554                                  setend_fat12:
  8555 00001076 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8556 00001078 11D2                    	adc	dx,dx
  8557                                  
  8558                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8559                                  ;cs3 7/2/92
  8560                                  	; 15/12/2022
  8561 0000107A 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8562 0000107D 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8563                                  					; here. Check for it and use
  8564                                  					; the calculated size in this case.
  8565                                  ;cs3 7/2/92
  8566                                  
  8567 0000107F 2EF736[D30F]            	div	word [cs:word3]
  8568                                  
  8569                                  setend_fat16:
  8570 00001084 48                      	dec	ax			; limit at 1
  8571 00001085 39D8                    	cmp	ax,bx			; is fat big enough?
  8572 00001087 7602                    	jbe	short setend_fat	; use max value that'll fit
  8573                                  
  8574                                  setend_faterr:
  8575 00001089 89D8                    	mov	ax,bx			; use calculated value
  8576                                  
  8577                                  setend_fat:
  8578                                  
  8579                                  ;	now ax = maximum legal cluster
  8580                                  
  8581                                  ;	end M008
  8582                                  
  8583                                  	;mov	[es:bp+0Dh], ax
  8584 0000108B 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8585                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8586                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8587 0000108F 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8588                                  					; Init so first ALLOC starts at
  8589                                  					; begining of FAT
  8590                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8591                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8592 00001095 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8593                                  
  8594 0000109B C3                      	retn
  8595                                  
  8596                                  ;EndProc $SETDPB
  8597                                  
  8598                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8599                                  
  8600                                  ;
  8601                                  ;----------------------------------------------------------------------------
  8602                                  ;
  8603                                  ;**	$Dup_PDB
  8604                                  ;
  8605                                  ; Inputs:   DX is new segment address of process
  8606                                  ;	    SI is end of new allocation block
  8607                                  ;
  8608                                  ;----------------------------------------------------------------------------
  8609                                  ;
  8610                                  
  8611                                  _$DUP_PDB:
  8612                                  
  8613                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8614                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8615                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8616                                  
  8617                                  	; MSDOS 3.3
  8618                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8619                                  	;MOV	DS,[CS:CurrentPDB]
  8620                                  
  8621                                  	; 15/05/2019 - Retro DOS v4.0
  8622                                  	; MSDOS 6.0
  8623 0000109C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8624 000010A1 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8625 000010A6 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8626                                  
  8627 000010AA 56                      	PUSH	SI
  8628 000010AB EB0A                    	JMP	SHORT CreateCopy
  8629                                  
  8630                                  ;
  8631                                  ;----------------------------------------------------------------------------
  8632                                  ;
  8633                                  ; Inputs:
  8634                                  ;	DX = Segment number of new base
  8635                                  ; Function:
  8636                                  ;	Set up program base and copy term and ^C from int area
  8637                                  ; Returns:
  8638                                  ;	None
  8639                                  ; Called at DOS init
  8640                                  ;
  8641                                  ;----------------------------------------------------------------------------
  8642                                  ;
  8643                                  
  8644                                  ; 15/05/2019 - Retro DOS v4.0
  8645                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8646                                  
  8647                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8648                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8649                                  
  8650                                  _$CREATE_PROCESS_DATA_BLOCK:
  8651                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8652 000010AD E8D5F3                  	CALL	Get_User_Stack
  8653                                  	;mov	ds,[si+14h]
  8654 000010B0 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8655                                  	;push	word [2]
  8656 000010B3 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8657                                  CreateCopy:
  8658 000010B7 8EC2                    	MOV	ES,DX
  8659                                  
  8660 000010B9 31F6                    	XOR	SI,SI			; copy entire PDB
  8661 000010BB 89F7                    	MOV	DI,SI
  8662 000010BD B98000                  	MOV	CX,128
  8663 000010C0 F3A5                    	REP	MOVSW
  8664                                  
  8665                                  ; DOS 3.3 7/9/86
  8666                                  	;mov	cx,20
  8667                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8668                                  	; 15/12/2022
  8669 000010C2 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8670                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8671                                  	;mov	cx,FILPERPROC
  8672                                  
  8673                                  	;mov	di,18h
  8674 000010C4 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8675                                  	;;PUSH	DS ; * 15/05/2019
  8676                                  	;;lds	si,[34h]
  8677                                  	;LDS	SI,[PDB.JFN_Pointer]
  8678                                  	;REP	MOVSB
  8679                                  	;;POP	DS ; * 15/05/2019
  8680                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8681                                  	; 05/12/2022
  8682                                  	; (push ds then pop ds is not needed here!)
  8683                                  	;push	ds
  8684                                  	;lds	si,[34h]
  8685 000010C7 C5363400                	lds	si,[PDB.JFN_Pointer]
  8686 000010CB F3A4                    	rep	movsb
  8687                                  	;pop	ds
  8688                                  
  8689                                  ; DOS 3.3 7/9/86
  8690                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8691                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8692                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8693                                  
  8694 000010CD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8695                                  
  8696                                  	;;test	byte [cs:CreatePDB],0FFh
  8697                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8698                                  	; 17/12/2022
  8699 000010D2 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8700                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8701 000010D6 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8702                                  
  8703                                  ; Here we set up for a new process...
  8704                                  
  8705                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8706                                  	;POP	DS
  8707                                  
  8708                                  	; MSDOS 6.0
  8709                                  	;;getdseg <ds>			; ds -> dosdata
  8710                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8711                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8712                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8713                                  	; 15/12/2022
  8714                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8715                                  
  8716 000010D8 31DB                    	XOR	BX,BX			; dup all jfns
  8717                                  	;mov	cx,20
  8718                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8719                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8720                                  	; 15/12/2022
  8721 000010DA B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8722                                  
  8723                                  Create_dup_jfn:
  8724 000010DC 06                      	PUSH	ES ;**			; save new PDB
  8725 000010DD E88955                  	call	SFFromHandle		; get sf pointer
  8726 000010E0 B0FF                    	MOV	AL,-1			; unassigned JFN
  8727 000010E2 7224                    	JC	short CreateStash	; file was not really open
  8728                                  	;;test	word [es:di+5],1000h
  8729                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8730                                  	; 15/05/2019
  8731                                  	;test	byte [es:di+6],10h
  8732 000010E4 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8733 000010E9 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8734                                  
  8735                                  ; We do not inherit network file handles.
  8736                                  
  8737                                  	;mov	ah,[es:di+2]
  8738 000010EB 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8739                                  	;and	ah,0F0h
  8740 000010EF 80E4F0                  	AND	AH,SHARING_MASK
  8741                                  	;cmp	ah,70h
  8742 000010F2 80FC70                  	CMP	AH,SHARING_NET_FCB
  8743 000010F5 7411                    	jz	short CreateStash
  8744                                  
  8745                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8746                                  ; duplication operation.
  8747                                  
  8748 000010F7 893E[9E05]              	MOV	[THISSFT],DI
  8749 000010FB 8C06[A005]              	MOV	[THISSFT+2],ES
  8750 000010FF E82E19                  	call	DOS_DUP 		; signal duplication
  8751                                  
  8752                                  ; get the old sfn for copy
  8753                                  
  8754 00001102 E84755                  	call	pJFNFromHandle		; ES:DI is jfn
  8755 00001105 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8756                                  
  8757                                  ; Take AL (old sfn or -1) and stash it into the new position
  8758                                  
  8759                                  CreateStash:
  8760 00001108 07                      	POP	ES ;**
  8761                                  	;mov	[es:bx+18h],al
  8762 00001109 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8763 0000110D 43                      	INC	BX			; next jfn...
  8764 0000110E E2CC                    	LOOP	Create_dup_jfn
  8765                                  
  8766 00001110 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8767                                  	; 06/11/2022
  8768                                  	;mov	[es:16h],bx
  8769 00001114 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8770 00001119 8C06[3003]              	MOV	[CurrentPDB],ES
  8771                                  	;MOV	DS,BX ; 28/07/2019
  8772                                  	; 07/12/2022
  8773                                  	;mov	ds,[cs:DosDSeg]
  8774                                  	; 15/12/2022
  8775                                  	; ds = [cs:DosDSeg]
  8776 0000111D C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8777                                  	;mov	ds,bx
  8778                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8779                                  	; 15/12/2022
  8780                                  	;mov	ds,bx
  8781                                  
  8782                                  ; end of new process create
  8783                                  
  8784                                  Create_PDB_cont:
  8785                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8786                                  
  8787                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8788                                  
  8789                                  	;; 28/07/2019
  8790                                  	;;push	ds
  8791                                  	;;mov	ds,[cs:DosDSeg]
  8792                                  	;mov	byte [CreatePDB],0
  8793                                  	;;pop	ds
  8794                                  
  8795                                  ; 05/12/2022
  8796                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8797                                  ;	; (push-pop ds is nonsense here! 
  8798                                  ;	;  but i am using same code with original MSDOS.SYS
  8799                                  ;	;  for address compatibility.)
  8800                                  ;	push	ds
  8801                                  ;	; ds = [cs:DosDSeg] !
  8802                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8803                                  ;	mov	byte [CreatePDB],0
  8804                                  ;	pop	ds
  8805                                  
  8806 00001122 58                      	POP	AX ;*
  8807                                  
  8808                                  	;entry	SETMEM
  8809                                  
  8810                                  	; 17/12/2022
  8811                                  	; cx = 0
  8812                                  
  8813                                  ;---------------------------------------------------------------------------
  8814                                  ; Inputs:
  8815                                  ;	AX = Size of memory in paragraphs
  8816                                  ;	DX = Segment
  8817                                  ; Function:
  8818                                  ;	Completely prepares a program base at the
  8819                                  ;	specified segment.
  8820                                  ; Called at DOS init
  8821                                  ; Outputs:
  8822                                  ;	DS = DX
  8823                                  ;	ES = DX
  8824                                  ;	[0] has INT int_abort
  8825                                  ;	[2] = First unavailable segment
  8826                                  ;	[5] to [9] form a long call to the entry point
  8827                                  ;	[10] to [13] have exit address (from int_terminate)
  8828                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8829                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8830                                  ; DX,BP unchanged. All other registers destroyed.
  8831                                  ;---------------------------------------------------------------------------
  8832                                  
  8833                                  SETMEM:
  8834                                  	;XOR	CX,CX
  8835                                  	; 17/12/2022
  8836                                  	; cx = 0
  8837 00001123 8ED9                    	MOV	DS,CX
  8838 00001125 8EC2                    	MOV	ES,DX
  8839                                  	;mov	si,88h
  8840 00001127 BE8800                  	MOV	SI,addr_int_terminate
  8841                                  	;mov	di,10 ; 0Ah
  8842 0000112A BF0A00                  	MOV	DI,SAVEXIT
  8843                                  	;MOV	CX,6
  8844                                  	; 15/12/2022
  8845 0000112D B106                    	mov	cl,6
  8846 0000112F F3A5                    	REP	MOVSW
  8847 00001131 26A30200                	MOV	[ES:2],AX
  8848 00001135 29D0                    	SUB	AX,DX
  8849 00001137 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8850 0000113A 7603                    	JBE	short HAVDIF
  8851 0000113C B8FF0F                  	MOV	AX,MAXDIF
  8852                                  HAVDIF:
  8853 0000113F 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8854 00001142 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8855 00001145 29C3                    	SUB	BX,AX
  8856 00001147 B104                    	MOV	CL,4
  8857 00001149 D3E0                    	SHL	AX,CL
  8858 0000114B 8EDA                    	MOV	DS,DX
  8859                                  
  8860                                  	; (MSDOS 6.0 note)
  8861                                  	;
  8862                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8863                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8864                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8865                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8866                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8867                                  	; making this equvalence valid for this particular case. If however
  8868                                  	; there is less than 64K remaining the address in BX:AX will not 
  8869                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8870                                  	; into the PSP.
  8871                                  	;
  8872                                  	; Therefore for the case where there is less than 64K remaining in 
  8873                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8874                                  	; requirements will not work. Call 5, however will continue to work
  8875                                  	; for all cases.
  8876                                  	;
  8877                                  
  8878                                  	;mov	[6],ax
  8879                                  	;mov	[8],bx
  8880                                  
  8881 0000114D A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8882 00001150 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8883                                  
  8884                                  	; 06/05/2019 - Retro DOS v4.0
  8885 00001154 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8886                                  					;    memory left
  8887 00001157 740C                    	je	short addr_ok		; Y: the above calculated address is
  8888                                  					;    OK
  8889                                  					; N: 
  8890                                  
  8891 00001159 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8892 0000115F C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8893                                  addr_ok:
  8894                                  	;mov	word [0],20CDh
  8895 00001165 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8896                                  	;mov	byte [5],9Ah
  8897 0000116B C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8898                                  	;mov	word [50h],21CDh
  8899 00001170 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8900                                  	;mov	byte [52h],0CBh
  8901 00001176 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8902                                  	;mov	word [34h],18h
  8903 0000117B C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8904                                  	;mov	word [36h],ds
  8905 00001181 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8906                                  	;mov	word [32h],20
  8907 00001185 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8908                                  ;
  8909                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8910                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8911                                  ; particular SFT.  We perform this by requiring that the server link together
  8912                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8913                                  ; initialize this pointer.
  8914                                  ;
  8915                                   	;mov	word [38h],-1
  8916 0000118B C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8917                                  	;mov	word [3Ah],-1
  8918 00001191 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8919                                  
  8920                                  	; 06/05/2019
  8921                                  	; Set the real version number in the PSP - 5.00
  8922                                  
  8923                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8924                                  	; 07/12/2022
  8925 00001197 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8926                                  
  8927 0000119E C3                      	retn
  8928                                  
  8929                                  ; 29/04/2019 - Retro DOS v4.0
  8930                                  
  8931                                  ;BREAK <$GSetMediaID -- get set media ID>
  8932                                  
  8933                                  ;---------------------------------------------------------------------------
  8934                                  ; Inputs:
  8935                                  ;	BL= drive number as defined in IOCTL
  8936                                  ;	AL= 0 get media ID
  8937                                  ;	    1 set media ID
  8938                                  ;	DS:DX= buffer containing information
  8939                                  ;		DW  0  info level (set on input)
  8940                                  ;		DD  ?  serial #
  8941                                  ;		DB  11 dup(?)  volume id
  8942                                  ;		DB   8 dup(?)  file system type
  8943                                  ; Function:
  8944                                  ;	Get or set media ID
  8945                                  ; Returns:
  8946                                  ;	carry clear, DS:DX is filled
  8947                                  ;	carry set, error
  8948                                  ;---------------------------------------------------------------------------
  8949                                  
  8950                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8951                                  _$GSetMediaID:
  8952                                  	; RAWIO - GET_MEDIA_ID
  8953 0000119F B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8954 000011A2 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8955 000011A4 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8956                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8957                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8958                                  	; 15/12/2022
  8959 000011A6 FEC8                    	dec	al
  8960 000011A8 7507                    	jnz	short errorfunc ; al > 1
  8961                                  	; RAWIO - SET_MEDIA_ID
  8962                                  	;mov	cx,0846h	      ;AN001;MS.;
  8963                                  	; 15/12/2022
  8964 000011AA B146                    	mov	cl,46h	; cx = 0846h 
  8965                                  doioctl:			      ;AN000;
  8966 000011AC B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8967                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8968                                  	;call	_$IOCTL
  8969                                  	;retn			      ;AN000;MS.;
  8970                                  	; 15/12/2022
  8971 000011AE E9BD10                  	jmp	_$IOCTL
  8972                                  errorfunc:			      ;AN000;
  8973                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8974                                  	;mov	al,1
  8975 000011B1 B001                    	mov	al,error_invalid_function
  8976 000011B3 E98EF4                  	jmp	SYS_RET_ERR
  8977                                  
  8978                                  ; 16/05/2019 - Retro DOS v4.0
  8979                                  
  8980                                  ;============================================================================
  8981                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8982                                  ;============================================================================
  8983                                  ; 20/07/2018 - Retro DOS v3.0
  8984                                  ; 29/04/2019 - Retro DOS v4.0
  8985                                  
  8986                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8987                                  ;----------------------------------------------------------------------------
  8988                                  ;
  8989                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8990                                  ;	     Strings of different lengths don't match.
  8991                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8992                                  ;   Outputs: Z if strings same, NZ if different
  8993                                  ;   Registers modified: NONE
  8994                                  ;----------------------------------------------------------------------------
  8995                                  
  8996                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8997                                  StrCmp:
  8998 000011B6 56                      	push	si
  8999 000011B7 57                      	push	di
  9000 000011B8 50                      	push	ax
  9001                                  Cmplp:
  9002 000011B9 AC                      	LODSB
  9003 000011BA E87F3E                  	call	UCase			; convert to upper case
  9004 000011BD E8D13E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9005 000011C0 88C4                    	MOV	AH,AL
  9006 000011C2 268A05                  	MOV	AL,[ES:DI]
  9007 000011C5 47                      	INC	DI
  9008 000011C6 E8733E                  	call	UCase			; convert to upper case
  9009 000011C9 E8C53E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9010 000011CC 38C4                    	CMP	AH,AL
  9011 000011CE 7504                    	JNZ	short PopRet		; Strings dif
  9012                                  
  9013 000011D0 08C0                    	OR	AL,AL
  9014 000011D2 75E5                    	JNZ	short Cmplp		; More string
  9015                                  PopRet:
  9016 000011D4 58                      	pop	ax
  9017 000011D5 5F                      	pop	di
  9018 000011D6 5E                      	pop	si
  9019 000011D7 C3                      	retn
  9020                                  
  9021                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9022                                  ;----------------------------------------------------------------------------
  9023                                  ;
  9024                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9025                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9026                                  ;	characters.
  9027                                  ;
  9028                                  ;   Inputs:	DS:SI - pointer to source string
  9029                                  ;		ES:DI - pointer to destination string
  9030                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9031                                  ;		DS:SI point byte after nul byte at end of source string
  9032                                  ;   Registers modified: SI,DI
  9033                                  ;----------------------------------------------------------------------------
  9034                                  
  9035                                  StrCpy:
  9036 000011D8 50                      	push	ax
  9037                                  CPYLoop:
  9038 000011D9 AC                      	LODSB
  9039 000011DA E85F3E                  	call	UCase			; convert to upper case
  9040 000011DD E8B13E                  	call	PATHCHRCMP		; convert / to \ ;
  9041 000011E0 AA                      	STOSB
  9042                                  
  9043 000011E1 08C0                    	OR	AL,AL
  9044 000011E3 75F4                    	JNZ	short CPYLoop
  9045 000011E5 58                      	pop	ax
  9046 000011E6 C3                      	retn
  9047                                  
  9048                                  ;----------------------------------------------------------------------------
  9049                                  ; Procedure Name : FStrCpy
  9050                                  ;----------------------------------------------------------------------------
  9051                                  
  9052                                  FStrCpy:
  9053 000011E7 50                      	push	ax
  9054                                  FCPYLoop:
  9055 000011E8 AC                      	LODSB
  9056 000011E9 AA                      	STOSB
  9057 000011EA 08C0                    	OR	AL,AL
  9058 000011EC 75FA                    	JNZ	short FCPYLoop
  9059 000011EE 58                      	pop	ax
  9060 000011EF C3                      	retn
  9061                                  
  9062                                  ; 20/07/2018 - Retro DOS v3.0
  9063                                  ;----------------------------------------------------------------------------
  9064                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9065                                  ;----------------------------------------------------------------------------
  9066                                  ;
  9067                                  ;UCase:	
  9068                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9069                                  ;	retn
  9070                                  
  9071                                  ;Break <StrLen - compute length of string ES:DI>
  9072                                  ;----------------------------------------------------------------------------
  9073                                  ;**	StrLen - Compute Length of String
  9074                                  ;
  9075                                  ;	StrLen computes the length of a string, including the trailing 00
  9076                                  ;
  9077                                  ;	ENTRY	(es:di) = address of string
  9078                                  ;	EXIT	(cx) = size of string
  9079                                  ;	USES	cx, flags
  9080                                  ;----------------------------------------------------------------------------
  9081                                  
  9082                                  StrLen:
  9083 000011F0 57                      	push	di
  9084 000011F1 50                      	push	ax
  9085                                  	;MOV	CX,-1
  9086 000011F2 B9FFFF                  	mov	cx,65535
  9087 000011F5 30C0                    	XOR	AL,AL
  9088 000011F7 F2AE                    	REPNE	SCASB
  9089 000011F9 F7D1                    	NOT	CX
  9090 000011FB 58                      	pop	ax
  9091 000011FC 5F                      	pop	di
  9092 000011FD C3                      	retn
  9093                                  
  9094                                  ;----------------------------------------------------------------------------
  9095                                  ;**	DStrLen - Compute Length of String
  9096                                  ;
  9097                                  ;	ENTRY	(ds:si) = address of string
  9098                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9099                                  ;	USES	cx, flags
  9100                                  ;----------------------------------------------------------------------------
  9101                                  
  9102                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9103 000011FE E80300                  	CALL	XCHGP
  9104 00001201 E8ECFF                  	CALL	StrLen
  9105                                  	;CALL	XCHGP
  9106                                  	;retn
  9107                                  	; 18/12/2022
  9108                                  	;jmp	short XCHGP
  9109                                  
  9110                                  ;----------------------------------------------------------------------------
  9111                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9112                                  ;
  9113                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9114                                  ;
  9115                                  ;	ENTRY	none
  9116                                  ;	EXIT	pairs exchanged
  9117                                  ;	USES	SI, DI, DS, ES
  9118                                  ;----------------------------------------------------------------------------
  9119                                  
  9120                                  XCHGP:
  9121 00001204 1E                      	push	ds
  9122 00001205 06                      	push	es
  9123 00001206 1F                      	pop	ds
  9124 00001207 07                      	pop	es
  9125 00001208 87F7                    	XCHG	SI,DI
  9126                                  xchgp_retn:
  9127 0000120A C3                      	retn
  9128                                  
  9129                                  ;Break	<Idle - wait for a specified amount of time>
  9130                                  ;----------------------------------------------------------------------------
  9131                                  ;
  9132                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9133                                  ;   	   we spin until RetryLoop is exhausted.
  9134                                  ;
  9135                                  ;   Inputs:	RetryLoop is the number of times we spin
  9136                                  ;   Outputs:	Wait
  9137                                  ;   Registers modified: none
  9138                                  ;----------------------------------------------------------------------------
  9139                                  
  9140                                  Idle:
  9141                                  	;test	byte [SS:FSHARING],0FFh
  9142 0000120B 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9143                                  	;retnz
  9144 00001211 75F7                    	jnz	short xchgp_retn
  9145                                  	;SAVE	<CX>
  9146 00001213 51                      	push	cx
  9147 00001214 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9148 00001219 E308                    	JCXZ	Idle3
  9149                                  Idle1:	
  9150 0000121B 51                      	PUSH	CX
  9151 0000121C 31C9                    	XOR	CX,CX
  9152                                  Idle2:	
  9153 0000121E E2FE                    	LOOP	Idle2
  9154 00001220 59                      	POP	CX
  9155 00001221 E2F8                    	LOOP	Idle1
  9156                                  Idle3:	
  9157                                  	;RESTORE <CX>
  9158 00001223 59                      	pop	cx
  9159 00001224 C3                      	retn
  9160                                  
  9161                                  ;Break	<TableDispatch - dispatch to a table>
  9162                                  ;----------------------------------------------------------------------------
  9163                                  ;
  9164                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9165                                  ;   routine. Preserve all input registers to the routine.
  9166                                  ;
  9167                                  ;   Inputs:	Push	return address
  9168                                  ;		Push	Table address
  9169                                  ;		Push	index (byte)
  9170                                  ;   Outputs:	appropriate routine gets jumped to.
  9171                                  ;		return indicates invalid index
  9172                                  ;   Registers modified: none.
  9173                                  ;----------------------------------------------------------------------------
  9174                                  
  9175                                  struc TFrame	 ; TableFrame
  9176 00000000 ????                    .OldBP:	 resw 1  ; 0
  9177 00000002 ????                    .OldRet: resw 1  ; 2
  9178 00000004 ??                      .Index:	 resb 1  ; 4
  9179 00000005 ??                      .Pad:	 resb 1  ; 5  
  9180 00000006 ????                    .Tab:	 resw 1  ; 6
  9181 00000008 ????                    .NewRet: resw 1  ; 8
  9182                                  endstruc
  9183                                  
  9184                                  TableDispatch:
  9185 00001225 55                      	PUSH	BP
  9186 00001226 89E5                    	MOV	BP,SP
  9187 00001228 53                      	PUSH	BX			; save BX
  9188                                  	;mov	bx,[bp+6]
  9189 00001229 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9190 0000122C 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9191                                  	;cmp	[bp+4],bl
  9192 0000122F 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9193 00001232 7317                    	JAE	short TableError	; yes
  9194                                  	;mov	bl,[bp+4]
  9195 00001234 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9196 00001237 30FF                    	XOR	BH,BH			; convert to word
  9197 00001239 D1E3                    	SHL	BX,1			; convert to word pointer
  9198 0000123B 43                      	INC	BX			; point past first length byte
  9199                                  	; 17/08/2018
  9200                                  	;add	bx,[bp+6]
  9201 0000123C 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9202 0000123F 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9203                                  	;mov	[bp+6],bx
  9204 00001242 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9205 00001245 5B                      	POP	BX			; restore BX
  9206 00001246 5D                      	POP	BP			; restore BP
  9207 00001247 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9208 0000124A C3                      	retn				; do operation
  9209                                  TableError:
  9210 0000124B 5B                      	POP	BX			; restore BX
  9211 0000124C 5D                      	POP	BP			; restore BP
  9212 0000124D C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9213                                  
  9214                                  ;Break	<TestNet - determine if a CDS is for the network>
  9215                                  ;----------------------------------------------------------------------------
  9216                                  ;
  9217                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9218                                  ;	network CDS. This will handle NULL cds also.
  9219                                  ;
  9220                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9221                                  ;   Outputs:	ES:DI = ThisCDS
  9222                                  ;		carry Set => network
  9223                                  ;		carry Clear => local
  9224                                  ;   Registers modified: none.
  9225                                  ;----------------------------------------------------------------------------
  9226                                  
  9227                                  TestNet:
  9228                                  	;LES	DI,[CS:THISCDS]
  9229                                  
  9230                                  	; 16/05/2019 - Retro DOS v4.0
  9231 00001250 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9232 00001255 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9233 0000125A 83FFFF                  	CMP	DI,-1
  9234 0000125D 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9235                                  	;;test	word [es:di+43h],8000h
  9236                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9237                                  	;test	byte [es:di+44h],80h
  9238 0000125F 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9239 00001264 7501                    	JNZ	short CMCRet		; jump has carry clear
  9240 00001266 C3                      	retn				; carry is clear
  9241                                  CMCRet: 
  9242 00001267 F5                      	CMC
  9243 00001268 C3                      	retn
  9244                                  
  9245                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9246                                  ;----------------------------------------------------------------------------
  9247                                  ;
  9248                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9249                                  ;	network file.
  9250                                  ;
  9251                                  ;   Inputs:	ES:DI point to SFT
  9252                                  ;   Outputs:	Zero set if not network sft
  9253                                  ;		zero reset otherwise
  9254                                  ;		Carry CLEAR!!!
  9255                                  ;   Registers modified: none.
  9256                                  ;----------------------------------------------------------------------------
  9257                                  
  9258                                  IsSFTNet:
  9259                                  	;;test	word [es:di+5],8000h
  9260                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9261                                  	; 16/05/2019 
  9262                                  	;test	byte [es:di+6],80h
  9263 00001269 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9264 0000126E C3                      	retn
  9265                                  
  9266                                  ;Break	<FastInit - Initialize FastTable entries >
  9267                                  ;----------------------------------------------------------------------------
  9268                                  ;   DOS 4.00   2/9/87
  9269                                  ;   FastInit  - initialize the FASTXXX routine entry
  9270                                  ;		  in the FastTable
  9271                                  ;
  9272                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9273                                  ;		DS:SI = address of FASTXXX routine entry
  9274                                  ;		   SI = -1 for query only
  9275                                  ;   Outputs:	Carry flag clear, if success
  9276                                  ;		Carry flag set,   if failure
  9277                                  ;
  9278                                  ;
  9279                                  ;----------------------------------------------------------------------------
  9280                                  
  9281                                  ;Procedure FastInit,NEAR
  9282                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9283                                  
  9284                                  ;	; MSDOS 3.3
  9285                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9286                                  ;FastInit:
  9287                                  ;	mov	di,FastTable ; FastOpenTable
  9288                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9289                                  ;	mov	bx,cs			; get DOS segment
  9290                                  ;	cmp	ax,bx			; first time installed ?	
  9291                                  ;	je	short ok_install	; yes
  9292                                  ;	stc				; set carry
  9293                                  ;	retn				; (cf=1 means) already installed !
  9294                                  ;
  9295                                  ;ok_install:
  9296                                  ;	mov	bx,FastTable ; FastOpenTable
  9297                                  ;	mov	cx,ds
  9298                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9299                                  ;	mov	[cs:bx+4],cx
  9300                                  ;	mov	[cs:bx+2],si
  9301                                  ;	retn
  9302                                  
  9303                                  ; 16/05/2019 - Retro DOS v4.0
  9304                                  
  9305                                  FastInit:
  9306                                  	; MSDOS 6.0
  9307                                  	;hkn; set up es to dosdataseg.
  9308 0000126F 06                      	push	es
  9309                                  	;getdseg <es>			; es -> dosdata
  9310 00001270 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9311                                  
  9312                                  	;hkn; FastTable is in DOSDATA
  9313 00001275 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9314 00001278 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9315 00001279 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9316 0000127B D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9317 0000127D D1E3                    	SHL	BX,1			;AN000;FO.
  9318 0000127F 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9319 00001281 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9320                                  fcheck: 				;AN000;
  9321 00001285 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9322 00001287 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9323 00001289 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9324 0000128B 09C0                    	OR	AX,AX			;AN000;FO.;
  9325                                  	;JZ	short ok_install	;AN000;FO.;
  9326                                  	;STC				;AN000;FO.;; already installed !
  9327                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9328                                  	; 14/01/2024
  9329 0000128D F9                      	stc
  9330 0000128E 7517                    	jnz	short FSret
  9331                                  ok_install:				;AN000;
  9332 00001290 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9333 00001293 7412                    	JZ	short FSret		;AN000;FO.; yes
  9334 00001295 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9335 00001297 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9336 0000129B 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9337                                  
  9338                                  ;hkn; FastFlg moved to DOSDATA
  9339 0000129E BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9340 000012A1 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9341                                  	;or	byte [es:di],80h
  9342 000012A3 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9343                                  FSret:					;AN000;
  9344 000012A7 07                      	pop	es
  9345 000012A8 C3                      	retn				;AN000;FO.
  9346                                  
  9347                                  ;EndProc FastInit
  9348                                  
  9349                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9350                                  ;----------------------------------------------------------------------------
  9351                                  ;   DOS 3.3   6/10/86
  9352                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9353                                  ;
  9354                                  ;   Inputs:	None
  9355                                  ;   Outputs:	AX = -1 and carry flag set
  9356                                  ;
  9357                                  ;   Registers modified: none.
  9358                                  ;----------------------------------------------------------------------------
  9359                                  
  9360                                  FastRet:
  9361                                  	;mov	ax,-1
  9362                                  	;stc
  9363                                  	;retf
  9364 000012A9 F9                      	STC
  9365 000012AA 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9366 000012AC CB                      	RETF
  9367                                  
  9368                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9369                                  ;----------------------------------------------------------------------------
  9370                                  ;   DOS 3.3   6/10/86
  9371                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9372                                  ;
  9373                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9374                                  ;   Outputs:	same output as $OPEN
  9375                                  ;
  9376                                  ;----------------------------------------------------------------------------
  9377                                  
  9378                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9379                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9380                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9381                                  
  9382                                  NLS_OPEN:
  9383                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9384                                  ;	MOV	BYTE [CPSWFLAG],0
  9385                                  ;	PUSH	BX		 ; save current state
  9386                                  
  9387 000012AD 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9388 000012AF E8215C                  	call	_$OPEN
  9389                                  
  9390                                  ;	POP	BX		 ; restore current state
  9391                                  ;	MOV	[CPSWFLAG],BL
  9392                                  	
  9393 000012B2 C3                      	RETN
  9394                                  
  9395                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9396                                  ;----------------------------------------------------------------------------
  9397                                  ;   DOS 3.3   6/10/86
  9398                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9399                                  ;
  9400                                  ;   Inputs:	BP = open mode
  9401                                  ;   Outputs:	same output as $LSEEK
  9402                                  ;
  9403                                  ;----------------------------------------------------------------------------
  9404                                  
  9405                                  ; 16/05/2019 - Retro DOS v4.0
  9406                                  
  9407                                  NLS_LSEEK:
  9408 000012B3 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9409 000012B8 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9410 000012BD E81000                  	CALL	Fake_User_Stack
  9411 000012C0 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9412 000012C2 E8BB55                  	call	_$LSEEK
  9413 000012C5 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9414 000012CA 368F06[8405]            	POP	word [SS:USER_SP]
  9415 000012CF C3                      	RETN
  9416                                  
  9417                                  ;Break	<Fake_User_Stack - save user stack>
  9418                                  ;----------------------------------------------------------------------------
  9419                                  ;   DOS 3.3   6/10/86
  9420                                  ;   Fake_User_Stack - save user stack pointer
  9421                                  ;
  9422                                  ;----------------------------------------------------------------------------
  9423                                  
  9424                                  Fake_User_Stack:
  9425 000012D0 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9426 000012D4 36A3[8405]              	MOV	[SS:USER_SP],AX
  9427 000012D8 8CD0                    	MOV	AX,SS
  9428 000012DA 36A3[8605]              	MOV	[SS:USER_SS],AX
  9429 000012DE C3                      	RETN
  9430                                  
  9431                                  ;Break	<GetDevList - get device header list pointer>
  9432                                  ;----------------------------------------------------------------------------
  9433                                  ;   DOS 3.3   7/25/86
  9434                                  ;   GetDevList - get device header list pointer
  9435                                  ;
  9436                                  ;   Output: AX:BX points to the device header list
  9437                                  ;----------------------------------------------------------------------------
  9438                                  
  9439                                  GetDevList:
  9440                                  	; 16/05/2019 - Retro DOS v4.0
  9441 000012DF BE[280D]                	MOV	SI,SysInitTable
  9442 000012E2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9443 000012E7 C534                    	LDS	SI,[SI]
  9444                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9445 000012E9 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9446                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9447 000012EC 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9448 000012EF C3                      	RETN
  9449                                  
  9450                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9451                                  ;----------------------------------------------------------------------------
  9452                                  ;   DOS 3.3   7/25/86
  9453                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9454                                  ;
  9455                                  ;   Inputs:	BP = function code 0CH
  9456                                  ;   Outputs:	same output as generic $IOCTL
  9457                                  ;
  9458                                  ;----------------------------------------------------------------------------
  9459                                  
  9460                                  NLS_IOCTL:
  9461                                  	; 16/05/2019 - Retro DOS v4.0
  9462 000012F0 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9463 000012F5 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9464 000012FA E8D3FF                  	CALL	Fake_User_Stack
  9465 000012FD 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9466 000012FF E86C0F                  	call	_$IOCTL
  9467 00001302 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9468 00001307 368F06[8405]            	POP	word [SS:USER_SP]
  9469 0000130C C3                      	RETN
  9470                                  
  9471                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9472                                  ;----------------------------------------------------------------------------
  9473                                  ;   DOS 3.3   7/25/86
  9474                                  ;   NLS_GETEXT	-
  9475                                  ;
  9476                                  ;   Inputs:	none
  9477                                  ;   Outputs:	AX = extended error
  9478                                  ;
  9479                                  ;----------------------------------------------------------------------------
  9480                                  
  9481                                  NLS_GETEXT:
  9482                                  	; 16/05/2019 - Retro DOS v4.0
  9483 0000130D 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9484                                  	; 23/09/2023
  9485                                  MSG_RETRIEVAL:
  9486 00001311 C3                      	RETN
  9487                                  
  9488                                  ; 29/04/2019 - Retro DOS v4.0
  9489                                  
  9490                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9491                                  
  9492                                  ;----------------------------------------------------------------------------
  9493                                  ;   DOS 4.00
  9494                                  ;
  9495                                  ;   Inputs:	DL=0 get extended error message addr
  9496                                  ;		  =1 set extended error message addr
  9497                                  ;		  =2 get parser error message addr
  9498                                  ;		  =3 set parser error message addr
  9499                                  ;		  =4 get critical error message addr
  9500                                  ;		  =5 set critical error message addr
  9501                                  ;		  =6 get file system error message addr
  9502                                  ;		  =7 set file system error message addr
  9503                                  ;		  =8 get address for code reduction
  9504                                  ;		  =9 set address for code reduction
  9505                                  ;   Function:	get/set message address
  9506                                  ;   Outputs:	ES:DI points to addr when get
  9507                                  ;----------------------------------------------------------------------------
  9508                                  
  9509                                  ;Procedure MSG_RETRIEVAL,NEAR
  9510                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9511                                  
  9512                                  ; 23/09/2023
  9513                                  ;MSG_RETRIEVAL:
  9514                                  
  9515                                  ;;	NOTE:  This function lives in command.com resident code now.
  9516                                  ;;	If the int 2F ever gets this far, we'll return registers
  9517                                  ;;	unchanged, which produces the same result as before, if
  9518                                  ;;	command.com wasn't present (and therefore no messages available).
  9519                                  ;;
  9520                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9521                                  ;;	No_Op zeroes AL.
  9522                                  ;;
  9523                                  ;;;hkn; set up ds to point to DOSDATA
  9524                                  ;;	push	ds
  9525                                  ;;	getdseg	<ds>			; ds -> dosdata
  9526                                  ;;
  9527                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9528                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9529                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9530                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9531                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9532                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9533                                  ;;	DEC	AL		    ;AN000;;MS.
  9534                                  ;;toget:				    ;AN000;
  9535                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9536                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9537                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9538                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9539                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9540                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9541                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9542                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9543                                  ;;getget: 				     ;AN000;
  9544                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9545                                  ;;MSGret: 				     ;AN000;
  9546                                  ;;	POP	SI			     ;AN000;;MS.
  9547                                  ;;	POP	AX			     ;AN000;;MS.
  9548                                  ;;
  9549                                  ;;	pop	ds
  9550                                  
  9551                                  ;	return				     ;AN000;;MS. exit
  9552                                  
  9553                                  ; 23/09/2023
  9554                                  ;	retn	; 29/04/2019
  9555                                  
  9556                                  ;============================================================================
  9557                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9558                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9559                                  ;============================================================================
  9560                                  ; 20/07/2018 - Retro DOS v3.0
  9561                                  
  9562                                  ;	; MSDOS 3.3
  9563                                  ;	; 08/08/2018 - Retro DOS v3.0
  9564                                  ;ECritMEM:
  9565                                  ;ECritSFT:
  9566                                  ;	;
  9567                                  ;ECritDisk:
  9568                                  ;	retn
  9569                                  ;	;push	ax
  9570                                  ;	
  9571                                  ;	mov	ax,8001h
  9572                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9573                                  ;			; AL = critical section number (00h-0Fh)
  9574                                  ;	pop	ax
  9575                                  ;	retn
  9576                                  ;
  9577                                  ;	; MSDOS 3.3
  9578                                  ;	; 08/08/2018 - Retro DOS v3.0
  9579                                  ;LCritMEM:
  9580                                  ;LCritSFT:
  9581                                  ;	;
  9582                                  ;LCritDisk:
  9583                                  ;	retn
  9584                                  ;	;push	ax
  9585                                  ;	
  9586                                  ;	mov	ax,8101h
  9587                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9588                                  ;			; AL = critical section number (00h-0Fh)
  9589                                  ;	pop	ax
  9590                                  ;	retn
  9591                                  ;
  9592                                  ;ECritDevice:
  9593                                  ;	retn
  9594                                  ;	;push	ax
  9595                                  ;	
  9596                                  ;	mov	ax,8002h
  9597                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9598                                  ;			; AL = critical section number (00h-0Fh)
  9599                                  ;	pop	ax
  9600                                  ;	retn
  9601                                  ;
  9602                                  ;LCritDevice:
  9603                                  ;	retn
  9604                                  ;	;push	ax
  9605                                  ;	
  9606                                  ;	mov	ax,8102h
  9607                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9608                                  ;			; AL = critical section number (00h-0Fh)
  9609                                  ;	pop	ax
  9610                                  ;	retn
  9611                                  
  9612                                  ;============================================================================
  9613                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9614                                  ;============================================================================
  9615                                  ; 12/05/2019 - Retro DOS v4.0
  9616                                  
  9617                                  ; Critical Section Routines
  9618                                  
  9619                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9620                                  
  9621                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9622                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9623                                  
  9624                                  ; ---------------------------------------------------------------------------
  9625                                  ; Each handler must leave everything untouched; including flags!
  9626                                  ;
  9627                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9628                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9629                                  ; ---------------------------------------------------------------------------
  9630                                  
  9631                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9632                                  ; ---------------------------------------------------------------------------
  9633                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9634                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9635                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9636                                  ; ---------------------------------------------------------------------------
  9637                                  
  9638                                  ;%macro POPFF 0
  9639                                  ;	jmp	$+3
  9640                                  ;	iret
  9641                                  ;	push	cs
  9642                                  ;	call	$-2
  9643                                  ;%endmacro
  9644                                  
  9645                                  ; ---------------------------
  9646                                  
  9647                                  ;Procedure  ECritDisk,NEAR
  9648                                  	;public  ECritMEM
  9649                                  	;public  ECritSFT
  9650                                  ECritMEM:
  9651                                  ECritSFT:
  9652                                  ;
  9653                                  ECritDisk:
  9654                                  
  9655                                  ;SR; Check if critical section is to be entered
  9656                                  
  9657 00001312 9C                      	pushf
  9658 00001313 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9659 00001319 740D                    	jz	short ECritDisk_2
  9660                                  
  9661                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9662                                  ;	;popff  ; * (macro)
  9663                                  ;	jmp	short ECritDisk_1 ; *
  9664                                  ;
  9665                                  ;ECritDisk_iret: ; *
  9666                                  ;	iret ; *
  9667                                  
  9668                                  	; 16/12/2022
  9669                                  	; 13/11/2022
  9670                                  	;jmp	short ECritDisk_1
  9671                                  	; 06/11/2022
  9672                                  ;ECritDisk_iret:
  9673                                  ;	iret	
  9674                                  
  9675                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9676                                  ECritDisk_1:
  9677 0000131B 0E                      	push	cs ; *
  9678 0000131C E80800                  	call	ECritDisk_iret ; *		
  9679                                  	
  9680                                  ECritDisk_0:
  9681 0000131F 50                      	PUSH    AX
  9682                                  	;MOV	AX,8000h+critDisk
  9683                                  	;INT	int_IBM
  9684 00001320 B80180                  	mov	ax,8001h
  9685 00001323 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9686                                  			; AL = critical section number (00h-0Fh)
  9687 00001325 58                      	POP     AX
  9688 00001326 C3                      	retn
  9689                                  
  9690                                  	; 16/12/2022
  9691                                  	; 13/11/2022
  9692                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9693                                  LCritDisk_iret: 
  9694 00001327 CF                      	iret
  9695                                  
  9696                                  ECritDisk_2:
  9697                                  	;;popff ; *
  9698                                  	;;retn
  9699                                  ;	jmp	short ECritDisk_3 ; *
  9700                                  ;ECritDisk_iret2: ; *
  9701                                  ;	iret
  9702                                  	
  9703                                  	; 16/12/2022
  9704                                  	; 13/11/2022
  9705                                  	;jmp	short ECritDisk_3
  9706                                  ;ECritDisk_iret2:
  9707                                  	;iret
  9708                                  
  9709                                  ECritDisk_3:
  9710 00001328 0E                      	push    cs ; *
  9711                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9712                                  	;call	ECritDisk_iret2 ; *
  9713                                  	;retn
  9714                                  	; 16/12/2022
  9715 00001329 E8FBFF                  	call	ECritDisk_iret
  9716 0000132C C3                      	retn
  9717                                  
  9718                                  ;EndProc ECritDisk
  9719                                  
  9720                                  ; ---------------------------
  9721                                  
  9722                                  ;Procedure   LCritDisk,NEAR
  9723                                  	;public  LCritMEM
  9724                                  	;public  LCritSFT
  9725                                  LCritMEM:
  9726                                  LCritSFT:
  9727                                  ;
  9728                                  LCritDisk:
  9729                                  
  9730                                  ;SR; Check if critical section is to be entered
  9731                                  
  9732 0000132D 9C                      	pushf
  9733 0000132E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9734 00001334 740C                    	jz	short LCritDisk_2
  9735                                  	;popff  ; * (macro)
  9736                                  ;	jmp	short LCritDisk_1 ; *
  9737                                  ;
  9738                                  ;LCritDisk_iret: ; *
  9739                                  ;	iret ; *
  9740                                  
  9741                                  	; 16/12/2022
  9742                                  	; 13/11/2022
  9743                                  	;jmp	short LCritDisk_1
  9744                                  ;LCritDisk_iret:
  9745                                  	;iret
  9746                                  
  9747                                  LCritDisk_1:
  9748 00001336 0E                      	push	cs ; *
  9749 00001337 E8EDFF                  	call	LCritDisk_iret ; *		
  9750                                  	
  9751                                  LCritDisk_0:
  9752 0000133A 50                      	PUSH	AX
  9753                                  	;MOV	AX,8100h+critDisk
  9754                                  	;INT	int_IBM
  9755 0000133B B80181                  	mov	ax,8101h
  9756 0000133E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9757                                  			; AL = critical section number (00h-0Fh)
  9758 00001340 58                      	POP	AX
  9759 00001341 C3                      	retn
  9760                                  
  9761                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9762                                  ;	iret
  9763                                  
  9764                                  LCritDisk_2:
  9765                                  	;;popff ; *
  9766                                  	;;retn
  9767                                  ;	jmp	short LCritDisk_3 ; *
  9768                                  ;LCritDisk_iret2: ; *
  9769                                  ;	iret
  9770                                  
  9771                                  	; 16/12/2022
  9772                                  	; 13/11/2022
  9773                                  	;jmp	short LCritDisk_3
  9774                                  ;LCritDisk_iret2:
  9775                                  	;iret
  9776                                  
  9777                                  LCritDisk_3:
  9778 00001342 0E                      	push    cs ; *
  9779                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9780                                  	;call	LCritDisk_iret2 ; *
  9781                                  	;retn
  9782                                  	; 16/12/2022
  9783 00001343 E8E1FF                  	call	LCritDisk_iret
  9784 00001346 C3                      	retn
  9785                                  
  9786                                  ;EndProc LCritDisk
  9787                                  
  9788                                  ; ---------------------------
  9789                                  
  9790                                  ;Procedure   ECritDevice,NEAR
  9791                                  
  9792                                  ECritDevice:
  9793                                  
  9794                                  ;SR; Check if critical section is to be entered
  9795                                  
  9796 00001347 9C                      	pushf
  9797 00001348 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9798 0000134E 740D                    	jz	short ECritDevice_2
  9799                                  	;popff  ; * (macro)
  9800                                  ;	jmp	short ECritDevice_1 ; *
  9801                                  ;
  9802                                  ;ECritDevice_iret: ; *
  9803                                  ;	iret ; *
  9804                                  
  9805                                  	; 16/12/2022	
  9806                                  	; 13/11/2022
  9807                                  	;jmp	short ECritDevice_1
  9808                                  ;ECritDevice_iret:
  9809                                  	;iret
  9810                                  
  9811                                  ECritDevice_1:
  9812 00001350 0E                      	push	cs ; *
  9813 00001351 E80800                  	call	ECritDevice_iret ; *		
  9814                                  	
  9815                                  ECritDevice_0:
  9816 00001354 50                      	PUSH	AX
  9817                                  	;MOV	AX,8000h+critDevice
  9818                                  	;INT	int_IBM
  9819 00001355 B80280                  	mov	ax,8002h
  9820 00001358 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9821                                  			; AL = critical section number (00h-0Fh)
  9822 0000135A 58                      	POP     AX
  9823 0000135B C3                      	retn
  9824                                  
  9825                                  	; 16/12/2022
  9826                                  	; 06/12/2022
  9827                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9828                                  LCritDevice_iret: 
  9829 0000135C CF                      	iret
  9830                                  
  9831                                  ECritDevice_2:
  9832                                  	;;popff ; *
  9833                                  	;;retn
  9834                                  ;	jmp	short ECritDevice_3 ; *
  9835                                  ;ECritDevice_iret2: ; *
  9836                                  ;	iret
  9837                                  
  9838                                  	; 16/12/2022
  9839                                  	; 13/11/2022
  9840                                  	;jmp	short ECritDevice_3
  9841                                  ;ECritDevice_iret2:
  9842                                  	;iret
  9843                                  
  9844                                  ECritDevice_3:
  9845 0000135D 0E                      	push    cs ; *
  9846                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9847                                  	;call	ECritDevice_iret2 ; *
  9848                                  	;retn
  9849                                  	; 16/12/2022
  9850 0000135E E8FBFF                  	call	ECritDevice_iret
  9851 00001361 C3                      	retn
  9852                                  
  9853                                  ;EndProc ECritDevice
  9854                                  
  9855                                  ; ---------------------------
  9856                                  
  9857                                  ;Procedure   LCritDevice,NEAR
  9858                                  
  9859                                  LCritDevice:
  9860                                  
  9861                                  ;SR; Check if critical section is to be entered
  9862                                  
  9863 00001362 9C                      	pushf
  9864 00001363 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9865 00001369 740C                    	jz	short LCritDevice_2
  9866                                  	;popff  ; * (macro)
  9867                                  ;	jmp	short LCritDevice_1 ; *
  9868                                  ;
  9869                                  ;LCritDevice_iret: ; *
  9870                                  ;	iret ; *
  9871                                  
  9872                                  	; 16/12/2022
  9873                                  	; 13/11/2022
  9874                                  	;jmp	short LCritDevice_1
  9875                                  ;LCritDevice_iret:
  9876                                  	;iret
  9877                                  
  9878                                  LCritDevice_1:
  9879 0000136B 0E                      	push	cs ; *
  9880 0000136C E8EDFF                  	call	LCritDevice_iret ; *		
  9881                                  	
  9882                                  LCritDevice_0:
  9883 0000136F 50                      	PUSH	AX
  9884                                  	;MOV	AX,8100h+critDevice
  9885                                  	;INT	int_IBM
  9886 00001370 B80281                  	mov	ax,8102h
  9887 00001373 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9888                                  			; AL = critical section number (00h-0Fh)
  9889 00001375 58                      	POP     AX
  9890 00001376 C3                      	retn
  9891                                  
  9892                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9893                                  ;	iret
  9894                                  
  9895                                  LCritDevice_2:
  9896                                  	;;popff ; *
  9897                                  	;;retn
  9898                                  ;	jmp	short LCritDevice_3 ; *
  9899                                  ;LCritDevice_iret2: ; *
  9900                                  ;	iret
  9901                                  
  9902                                  	; 16/12/2022
  9903                                  	; 13/11/2022
  9904                                  	;jmp	short LCritDevice_3
  9905                                  ;LCritDevice_iret2:
  9906                                  	;iret
  9907                                  
  9908                                  LCritDevice_3:
  9909 00001377 0E                      	push    cs ; *
  9910                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9911                                  	;call	LCritDevice_iret2 ; *
  9912                                  	;retn
  9913                                  	; 16/12/2022
  9914 00001378 E8E1FF                  	call	LCritDevice_iret
  9915 0000137B C3                      	retn
  9916                                  
  9917                                  ;EndProc LCritDevice
  9918                                  
  9919                                  ;============================================================================
  9920                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9921                                  ;============================================================================
  9922                                  ; 20/07/2018 - Retro DOS v3.0
  9923                                  
  9924                                  ;============================================================================
  9925                                  ; STDIO.ASM - (MSDOS 2.0)
  9926                                  ;============================================================================
  9927                                  
  9928                                  ;
  9929                                  ; Standard device IO for MSDOS (first 12 function calls)
  9930                                  ;
  9931                                  
  9932                                  ;.xlist
  9933                                  ;.xcref
  9934                                  ;INCLUDE STDSW.ASM
  9935                                  ;INCLUDE DOSSEG.ASM
  9936                                  ;.cref
  9937                                  ;.list
  9938                                  
  9939                                  ;TITLE   STDIO - device IO for MSDOS
  9940                                  ;NAME    STDIO
  9941                                  
  9942                                  ;INCLUDE IO.ASM
  9943                                  
  9944                                  ; ---------------------------------------------------------------------------
  9945                                  ;
  9946                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9947                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9948                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9949                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9950                                  ;			    to restore MSDOS 2.0 device IO source code 
  9951                                  ;
  9952                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9953                                  	
  9954                                  ;============================================================================
  9955                                  ; STDIO.ASM - (MSDOS 2.0)
  9956                                  ;============================================================================
  9957                                  
  9958                                  ;
  9959                                  ; Standard device IO for MSDOS (first 12 function calls)
  9960                                  ;
  9961                                  
  9962                                  ;.xlist
  9963                                  ;.xcref
  9964                                  ;INCLUDE STDSW.ASM
  9965                                  ;INCLUDE DOSSEG.ASM
  9966                                  ;.cref
  9967                                  ;.list
  9968                                  
  9969                                  ;TITLE   STDIO - device IO for MSDOS
  9970                                  ;NAME    STDIO
  9971                                  
  9972                                  ;INCLUDE IO.ASM
  9973                                  
  9974                                  ; ---------------------------------------------------------------------------
  9975                                  ;
  9976                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9977                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9978                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9979                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9980                                  ;			    to restore MSDOS 2.0 device IO source code 
  9981                                  ;
  9982                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9983                                  ;
  9984                                  ;============================================================================
  9985                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9986                                  ;============================================================================
  9987                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9988                                  
  9989                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9990                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9991                                  
  9992                                  ;============================================================================
  9993                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9994                                  ;============================================================================
  9995                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9996                                  
  9997                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9998                                  
  9999                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10000                                  ;
 10001                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10002                                  ;	NAME	IBMCPMIO
 10003                                  
 10004                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10005                                  ;
 10006                                  ;	$Std_Con_Input_No_Echo
 10007                                  ;	$Std_Con_String_Output
 10008                                  ;	$Std_Con_String_Input
 10009                                  ;	$RawConIO
 10010                                  ;	$RawConInput
 10011                                  ;	RAWOUT
 10012                                  ;	RAWOUT2
 10013                                  ;
 10014                                  
 10015                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10016                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10017                                  ; references to be SS or CS relative which is desired.
 10018                                  
 10019                                  ; ---------------------------------------------------------------------------
 10020                                  
 10021                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10022                                  ;	NAME	CPMIO2
 10023                                  
 10024                                  ;
 10025                                  ;	Microsoft Confidential
 10026                                  ;	Copyright (C) Microsoft Corporation 1991
 10027                                  ;	All Rights Reserved.
 10028                                  ;
 10029                                  
 10030                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10031                                  ;
 10032                                  ;	$Std_Con_Input
 10033                                  ;	$Std_Con_Output
 10034                                  ;	OUTT
 10035                                  ;	TAB
 10036                                  ;	BUFOUT
 10037                                  ;	$Std_Aux_Input
 10038                                  ;	$Std_Aux_Output
 10039                                  ;	$Std_Printer_Output
 10040                                  ;	$Std_Con_Input_Status
 10041                                  ;	$Std_Con_Input_Flush
 10042                                  ;
 10043                                  ;	Revision History:
 10044                                  ;
 10045                                  ;	  AN000	 version 4.00 - Jan. 1988
 10046                                  
 10047                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10048                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10049                                  ; references to be SS or CS relative which is desired.
 10050                                  
 10051                                  ;DOSCODE SEGMENT
 10052                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10053                                  
 10054                                  
 10055                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10056                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10057                                  ;hkn;	not valid. 
 10058                                  
 10059                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10060                                  ; 08/11/2022
 10061                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10062                                  
 10063                                  ;
 10064                                  ;----------------------------------------------------------------------------
 10065                                  ;
 10066                                  ; Procedure : $Std_Con_Input_No_Echo
 10067                                  ;
 10068                                  ;----------------------------------------------------------------------------
 10069                                  ;
 10070                                  
 10071                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10072                                  
 10073                                  ; Inputs:
 10074                                  ;	None
 10075                                  ; Function:
 10076                                  ;	Input character from console, no echo
 10077                                  ; Returns:
 10078                                  ;	AL = character
 10079                                  
 10080 0000137C 1E                      	push	ds
 10081 0000137D 56                      	push	si
 10082                                  INTEST:
 10083 0000137E E8DA3D                  	call	STATCHK
 10084 00001381 753B                    	jnz	short GET ; 08/09/2018
 10085                                  ;*************************************************************************
 10086                                  ;hkn; SS override
 10087 00001383 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10088 00001389 7505                    	jnz	short no_sys_wait
 10089 0000138B B405                    	mov	ah,5			; get input status with system wait
 10090 0000138D E80231                  	call	IOFUNC
 10091                                  no_sys_wait:
 10092                                  ;**************************************************************************
 10093 00001390 B484                    	MOV	AH,84h
 10094 00001392 CD2A                    	INT	int_IBM	 ; int 2Ah
 10095                                  
 10096                                  ;;; 7/15/86  update the date in the idle loop
 10097                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10098                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10099                                  
 10100                                  ;hkn; SS override
 10101 00001394 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10102 0000139A 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10103                                  
 10104 0000139C 50                      	PUSH	AX
 10105 0000139D 53                      	PUSH	BX			; following is tricky,
 10106 0000139E 51                      	PUSH	CX			; it may be called by critical handler
 10107 0000139F 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10108                                  					; other's READ or WRITE
 10109 000013A0 1E                      	PUSH	DS			; save DS = SFT's segment
 10110                                  
 10111                                  ;hkn; READTIME must use ds = DOSDATA
 10112                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10113                                  
 10114 000013A1 16                      	PUSH	SS ; 04/05/2019
 10115 000013A2 1F                      	POP	DS
 10116                                  
 10117 000013A3 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10118 000013A6 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10119                                  	;invoke	READTIME		; readtime
 10120 000013A9 E873F7                  	call	READTIME
 10121 000013AC B80100                  	MOV	AX,1
 10122 000013AF E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10123                                  
 10124                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10125                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10126                                  ;	push	bx
 10127                                  ;	mov	bx,DATE_FLAG
 10128                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10129                                  ;	cmp	word [cs:bx],5872h
 10130                                  ;	jz	short FETCHI_TAG_chk_ok
 10131                                  ;	call	DOSINIT
 10132                                  ;FETCHI_TAG_chk_ok:
 10133                                  ;	pop	bx
 10134                                  
 10135 000013B2 1F                      	POP	DS			; restore DS
 10136 000013B3 5A                      	POP	DX
 10137 000013B4 59                      	POP	CX
 10138 000013B5 5B                      	POP	BX
 10139 000013B6 58                      	POP	AX
 10140                                  NoUpdate:
 10141                                  
 10142                                  ;hkn; SS override
 10143 000013B7 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10144                                  
 10145                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10146 000013BC EBC0                    	JMP	short INTEST
 10147                                  GET:
 10148 000013BE 30E4                    	XOR	AH,AH
 10149 000013C0 E8CF30                  	call	IOFUNC
 10150 000013C3 5E                      	POP	SI
 10151 000013C4 1F                      	POP	DS
 10152                                  ;;; 7/15/86
 10153                                  
 10154                                  ;hkn; SS override
 10155                                  	; MSDOS 6.0
 10156 000013C5 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10157                                  	;
 10158 000013CB 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10159 000013CD 7505                    	JNZ	short noscan
 10160                                  
 10161                                  ;hkn; SS override
 10162                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10163                                  	; 20/06/2023
 10164 000013CF 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10165                                  noscan:
 10166 000013D4 C3                      	retn
 10167                                  ;
 10168                                  ;----------------------------------------------------------------------------
 10169                                  ;
 10170                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10171                                  ;
 10172                                  ;
 10173                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10174                                  ;	EXIT	none
 10175                                  ;	USES	ALL
 10176                                  ;
 10177                                  ;----------------------------------------------------------------------------
 10178                                  ;
 10179                                  
 10180                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10181                                  
 10182 000013D5 89D6                    	mov	si,dx
 10183                                  STRING_OUT1:	
 10184 000013D7 AC                      	lodsb
 10185 000013D8 3C24                    	cmp	al,'$'
 10186 000013DA 74F8                    	je	short noscan
 10187                                  NEXT_STR1:
 10188 000013DC E88402                  	call	OUTT
 10189 000013DF EBF6                    	jmp	short STRING_OUT1
 10190                                  
 10191                                  ;----------------------------------------------------------------------------
 10192                                  ;
 10193                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10194                                  ;
 10195                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10196                                  ;
 10197                                  ;	ENTRY	(ds:dx) = input buffer
 10198                                  ;	EXIT	none
 10199                                  ;	USES	ALL
 10200                                  ;
 10201                                  ;----------------------------------------------------------------------------
 10202                                  
 10203                                  	; 15/01/2024
 10204                                  
 10205                                  _$STD_CON_STRING_INPUT:		;System call 10
 10206                                  
 10207                                  	; 15/01/2024
 10208                                  	;mov	ax,ss
 10209                                  	;mov	es,ax
 10210 000013E1 16                      	push	ss
 10211 000013E2 07                      	pop	es
 10212                                  
 10213 000013E3 89D6                    	mov	si,dx
 10214 000013E5 30ED                    	xor	ch,ch
 10215 000013E7 AD                      	lodsw
 10216                                  
 10217                                  ;	(AL) = the buffer length
 10218                                  ;	(AH) = the template length
 10219                                  
 10220 000013E8 08C0                            or	al,al
 10221 000013EA 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10222 000013EC 88E3                    	mov	bl,ah		;Init template counter
 10223 000013EE 88EF                            mov	bh,ch		;Init template counter
 10224                                  
 10225                                  ;	(BL) = the number of bytes in the template
 10226                                  
 10227 000013F0 38D8                            cmp	al,bl
 10228 000013F2 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10229 000013F4 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10230 000013F7 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10231                                  
 10232                                  ; The number of chars in the template is >= the number of chars in buffer or
 10233                                  ; there is no CR at the end of the template. This is an inconsistant state
 10234                                  ; of affairs. Pretend that the template was empty:
 10235                                  ;
 10236                                  
 10237                                  NOEDIT:	
 10238 000013F9 88EB                    	mov	bl,ch		;Reset buffer
 10239                                  EDITON: 
 10240 000013FB 88C2                    	mov	dl,al
 10241 000013FD 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10242                                  
 10243                                  ;	Top level. We begin to read a line in.
 10244                                  
 10245                                  NEWLIN: 
 10246 000013FE 36A0[F901]              	mov	al,[SS:CARPOS]
 10247 00001402 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10248                                  
 10249 00001406 56                      	push	si
 10250 00001407 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10251 0000140A 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10252 0000140F 88EF                    	mov	bh,ch		;No chars from template yet
 10253 00001411 88EE                    	mov	dh,ch		;No chars to new line yet
 10254 00001413 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10255 00001416 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10256 00001418 7503                    	jnz	short GOTCH
 10257                                  
 10258                                  ;	This is the main loop of reading in a character and processing it.
 10259                                  ;
 10260                                  ;	(BH) = the index of the next byte in the template
 10261                                  ;	(BL) = the length of the template
 10262                                  ;	(DH) = the number of bytes in the buffer
 10263                                  ;	(DL) = the length of the buffer
 10264                                  
 10265                                  GETCH:
 10266 0000141A E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10267                                  GOTCH:
 10268                                  ;
 10269                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10270                                  ; input queue.
 10271                                  ;
 10272 0000141D 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10273 0000141F 74F9                    	jz	short GETCH
 10274                                  
 10275                                  ;	If the leading char is the function-key lead byte
 10276                                  
 10277                                  	;cmp	al,[SS:ESCCHAR]
 10278                                  
 10279                                  	; 04/05/2019 - Retro DOS v4.0
 10280                                  
 10281                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10282                                  
 10283 00001421 2E3A06[1F0A]            	CMP	AL,[cs:ESCCHAR]
 10284 00001426 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10285                                  
 10286                                  ;	Rubout and ^H are both destructive backspaces.
 10287                                  
 10288 00001428 3C7F                            cmp	al,c_DEL ; 7FH
 10289                                          ;jz	short BACKSPJ
 10290                                          ; 15/01/2024
 10291 0000142A 7466                    	je	short BACKSP
 10292 0000142C 3C08                    	cmp	al,c_BS  ; 8
 10293                                          ;jz	short BACKSPJ
 10294                                          ; 15/01/2024
 10295 0000142E 7462                    	je	short BACKSP
 10296                                  
 10297                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10298                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10299                                  	;	   	after CMP and a CMP again!
 10300                                  	;		
 10301                                  	;		-It would be better if they use a 'JMP short' to 
 10302                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10303                                  	;		between them. Then, they would be able use a patch
 10304                                  	;		between 5271h and 5279h when if it will be required.
 10305                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10306                                  	;	
 10307                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10308                                  
 10309                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10310                                  	;
 10311                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10312                                  
 10313                                  ;DOSCODE:526D	cmp     al, 8
 10314                                  ;DOSCODE:526F	jz      short BACKSPJ
 10315                                  ;DOSCODE:5271	cmp     al, 17h
 10316                                  ;DOSCODE:5273	nop
 10317                                  ;DOSCODE:5274	nop
 10318                                  ;DOSCODE:5275	cmp     al, 15h
 10319                                  ;DOSCODE:5277	nop
 10320                                  ;DOSCODE:5278	nop
 10321                                  ;DOSCODE:5279	cmp     al, 0Dh
 10322                                  ;DOSCODE:527B	jz      short ENDLIN
 10323                                  ;DOSCODE:527D	cmp     al, 0Ah
 10324                                  ;DOSCODE:527F	jz      short PHYCRLF
 10325                                  	
 10326                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10327                                  	; DOSCODE:525Dh
 10328                                  
 10329                                  ; 16/12/2022
 10330                                  %if 0
 10331                                  	; MSDOS 6.0
 10332                                  ;	^W deletes backward once and then backs up until a letter is before the
 10333                                  ;	cursor
 10334                                  
 10335                                  	CMP     AL,"W"-"@" ; 17h
 10336                                  
 10337                                  ;	The removal of the comment characters before the jump statement will
 10338                                  ;	cause ^W to backup a word.
 10339                                  
 10340                                  ;***	JZ	short WordDel
 10341                                  	NOP
 10342                                  	NOP
 10343                                  
 10344                                  	CMP     AL,"U"-"@" ; 15h
 10345                                  
 10346                                  ;	The removal of the comment characters before the jump statement will
 10347                                  ;	cause ^U to clear a line.
 10348                                  
 10349                                  ;***	JZ	short LineDel
 10350                                  	NOP
 10351                                  	NOP
 10352                                  
 10353                                  %endif
 10354                                  
 10355                                  ;	CR terminates the line.
 10356                                  
 10357 00001430 3C0D                            cmp	al,c_CR ; 0Dh
 10358 00001432 7430                            jz	short ENDLIN
 10359                                  
 10360                                  ;	LF goes to a new line and keeps on reading.
 10361                                  
 10362 00001434 3C0A                            cmp	al,c_LF ; 0Ah
 10363 00001436 7442                    	jz	short PHYCRLF
 10364                                  
 10365                                  ;	^X (or ESC) deletes the line and starts over
 10366                                  
 10367                                  	; MSDOS 3.3
 10368                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10369                                  	;jz	short KILNEW
 10370                                  
 10371                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10372                                  
 10373                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10374                                  
 10375 00001438 2E3A06[1E0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10376 0000143D 7440                    	jz	short KILNEW
 10377                                  	
 10378                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10379                                  	;jz	short KILNEW
 10380                                  
 10381                                  ; Otherwise, we save the input character.
 10382                                  
 10383                                  SAVCH:	
 10384 0000143F 38D6                    	cmp	dh,dl
 10385 00001441 7317                    	jnb	short BUFFUL		; buffer is full.
 10386 00001443 AA                              stosb
 10387 00001444 FEC6                    	inc	dh                      ; increment count in buffer.
 10388 00001446 E8AE02                  	call	BUFOUT			; Print control chars nicely
 10389                                  
 10390 00001449 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10391 0000144F 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10392 00001451 38DF                            cmp	bh,bl
 10393 00001453 73C5                            jnb	short GETCH		; no more characters in template
 10394 00001455 46                              inc	si                      ; Skip to next char in template
 10395 00001456 FEC7                            inc	bh                      ; remember position in template
 10396 00001458 EBC0                            jmp	short GETCH
 10397                                  
 10398                                  	; 15/01/2024
 10399                                  ;BACKSPJ: 
 10400                                  	;jmp	short BACKSP
 10401                                  
 10402                                  BUFFUL: 
 10403 0000145A B007                    	mov	al, 7			; Bell to signal full buffer
 10404 0000145C E80402                  	call	OUTT
 10405 0000145F EBB9                    	jmp	short GETCH
 10406                                  
 10407                                  ESCAPE: 
 10408                                  	;transfer OEMFunctionKey
 10409 00001461 E9E6F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10410                                  
 10411                                  ENDLIN:
 10412 00001464 AA                              stosb				; Put the CR in the buffer
 10413 00001465 E8FB01                  	call	OUTT                    ; Echo it
 10414 00001468 5F                              pop	di                      ; Get start of user buffer
 10415 00001469 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10416 0000146C FEC6                            inc	dh			; DH is length including CR
 10417                                  
 10418                                  COPYNEW:
 10419                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10420                                  	;mov	bp, es
 10421                                  	;mov	bx, ds
 10422                                  	;mov	es, bx
 10423                                  	;mov	ds, bp
 10424                                  	;mov	si, INBUF
 10425                                  	;mov	cl, dh
 10426                                  	;rep	movsb
 10427                                  	;retn
 10428                                  
 10429                                  	; CPMIO.ASM (MSDOS 6.0)
 10430                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10431                                  	;SAVE	<DS,ES>
 10432 0000146E 1E                      	PUSH	DS
 10433 0000146F 06                      	PUSH	ES
 10434                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10435 00001470 1F                      	POP	DS
 10436 00001471 07                      	POP	ES
 10437                                  
 10438                                  ;;hkn; INBUF is in DOSDATA
 10439 00001472 BE[FB01]                        MOV     SI,INBUF
 10440 00001475 88F1                            MOV     CL,DH                   ; set up count
 10441 00001477 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10442                                  OLDBAK_RETN:
 10443 00001479 C3                              RETN
 10444                                  
 10445                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10446                                  
 10447                                  PHYCRLF:
 10448 0000147A E81B01                  	CALL	CRLF
 10449 0000147D EB9B                            JMP	short GETCH
 10450                                  
 10451                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10452                                  
 10453                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10454                                  
 10455                                  	; Note: Following routines were not used in IBMDOS.COM
 10456                                  	;	-CRTL+W, CRTL+U is not activated-
 10457                                  	;	but they were in the kernel code!?)
 10458                                  
 10459                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10460                                  	; DOSCODE:52B6h
 10461                                  
 10462                                  ;;;;;;;;
 10463                                  
 10464                                  ; 16/12/2022
 10465                                  %if 0
 10466                                  ;
 10467                                  ; Delete the previous line
 10468                                  ;
 10469                                  LineDel:
 10470                                  	OR      DH,DH
 10471                                  	JZ	short GETCH	 ; 06/12/2022
 10472                                  	Call    BackSpace
 10473                                  	JMP	short LineDel
 10474                                  
 10475                                  %endif
 10476                                  
 10477                                  ;
 10478                                  ; delete the previous word.
 10479                                  ;
 10480                                  WordDel:
 10481                                  WordLoop:
 10482                                  ;	Call    BackSpace               ; backspace the one spot
 10483                                  ;	OR      DH,DH
 10484                                  ;	JZ	short GetChj
 10485                                  ;	MOV     AL,[ES:DI-1]
 10486                                  ;	cmp     al,'0'
 10487                                  ;	jb	short GetChj
 10488                                  ;	cmp     al,'9'
 10489                                  ;	jbe	short WordLoop
 10490                                  ;	OR      AL,20h
 10491                                  ;	CMP     AL,'a'
 10492                                  ;	JB	short GetChj
 10493                                  ;	CMP     AL,'z'
 10494                                  ;	JBE	short WordLoop
 10495                                  ;GetChj: 
 10496                                  ;	JMP	GETCH
 10497                                  
 10498                                  ; 16/12/2022
 10499                                  %if 0
 10500                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10501                                  	; (Worddel is not called or jumped from anywhere!)
 10502                                  WordDel:
 10503                                  WordLoop:
 10504                                  	Call    BackSpace               ; backspace the one spot
 10505                                  	OR      DH,DH
 10506                                  	JZ	short GetChj
 10507                                  	MOV     AL,[ES:DI-1]
 10508                                  	cmp     al,'0'
 10509                                  	jb	short GetChj
 10510                                  	cmp     al,'9'
 10511                                  	jbe	short WordLoop
 10512                                  	OR      AL,20h
 10513                                  	CMP     AL,'a'
 10514                                  	JB	short GetChj
 10515                                  	CMP     AL,'z'
 10516                                  	JBE	short WordLoop
 10517                                  GetChj: 
 10518                                  	JMP	GETCH
 10519                                  
 10520                                  %endif
 10521                                  
 10522                                  ;;;;;;;;
 10523                                  
 10524                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10525                                  
 10526                                  ; The user wants to throw away what he's typed in and wants to start over.
 10527                                  ; We print the backslash and then go to the next line and tab to the correct
 10528                                  ; spot to begin the buffered input.
 10529                                  
 10530                                  KILNEW:
 10531 0000147F B05C                            mov	al,'\'
 10532 00001481 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10533 00001484 5E                              pop	si		;Remember start of edit buffer
 10534                                  PUTNEW:
 10535 00001485 E81001                  	call	CRLF            ;Go to next line on screen
 10536 00001488 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10537 0000148C E84802                  	call	TAB             ;Tab over
 10538 0000148F E96CFF                          JMP     NEWLIN		;Start over again
 10539                                  
 10540                                  ;	Destructively back up one character position
 10541                                  
 10542                                  BACKSP:
 10543                                  	; 09/09/2018
 10544 00001492 E80800                  	Call    BackSpace
 10545 00001495 EB83                    	JMP     short GETCH	; 15/01/2024
 10546                                  
 10547                                  	; 15/01/2024
 10548                                  ;User really wants an ESC character in his line
 10549                                  TWOESC:	
 10550 00001497 2EA0[1F0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10551 0000149B EBA2                    	jmp	short SAVCH
 10552                                  
 10553                                  BackSpace:
 10554 0000149D 08F6                    	or	dh,dh
 10555 0000149F 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10556 000014A1 E85800                  	call	BACKUP          ;Do the backup
 10557 000014A4 268A05                  	mov	al,[es:di]	;Get the deleted char
 10558 000014A7 3C20                            cmp	al,20h	; ' '
 10559 000014A9 730F                    	jnb	short OLDBAK	;Was a normal char
 10560 000014AB 3C09                            cmp	al,c_HT ; 9
 10561 000014AD 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10562                                  ;; 9/27/86 fix for ctrl-U backspace
 10563 000014AF 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10564 000014B1 7407                    	JZ	short OLDBAK
 10565 000014B3 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10566 000014B5 7403                    	JZ	short OLDBAK
 10567                                  ;; 9/27/86 fix for ctrl-U backspace
 10568 000014B7 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10569                                  OLDBAK:
 10570 000014BA 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10571 000014C0 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10572 000014C2 08FF                    	or	bh,bh
 10573 000014C4 74B3                            jz	short OLDBAK_RETN 
 10574                                  				;Not advanced in template, stay where we are
 10575 000014C6 FECF                    	dec	bh		;Go back in template
 10576 000014C8 4E                              dec	si
 10577 000014C9 C3                      	retn
 10578                                  BAKTAB:
 10579 000014CA 57                              push	di
 10580 000014CB 4F                              dec	di		;Back up one char
 10581 000014CC FD                              std			;Go backward
 10582 000014CD 88F1                            mov	cl,dh		;Number of chars currently in line
 10583 000014CF B020                            mov	al,20h	; ' '
 10584 000014D1 53                              push	bx
 10585 000014D2 B307                            mov	bl,7		;Max
 10586 000014D4 E30E                            jcxz	FIGTAB		;At start, do nothing
 10587                                  FNDPOS:
 10588 000014D6 AE                              scasb			;Look back
 10589 000014D7 7609                    	jbe	short CHKCNT
 10590 000014D9 26807D0109              	cmp	byte [es:di+1],9
 10591 000014DE 7409                    	jz	short HAVTAB	;Found a tab
 10592 000014E0 FECB                    	dec	bl		;Back one char if non tab control char
 10593                                  CHKCNT:
 10594 000014E2 E2F2                            loop	FNDPOS
 10595                                  FIGTAB:		
 10596 000014E4 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10597                                  HAVTAB:
 10598 000014E9 28F3                    	sub	bl,dh
 10599 000014EB 00D9                    	add	cl,bl
 10600 000014ED 80E107                  	and	cl,7		;CX has correct number to erase
 10601 000014F0 FC                      	cld			;Back to normal
 10602 000014F1 5B                      	pop	bx
 10603 000014F2 5F                      	pop	di
 10604 000014F3 74C5                    	jz	short OLDBAK	;Nothing to erase
 10605                                  TABBAK:
 10606 000014F5 E80700                  	call	BACKMES
 10607 000014F8 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10608 000014FA EBBE                    	jmp	short OLDBAK
 10609                                  
 10610                                  BACKUP:
 10611 000014FC FECE                            dec	dh		;Back up in line
 10612 000014FE 4F                              dec	di
 10613                                  BACKMES:
 10614 000014FF B008                            mov	al,c_BS ; 8	;Backspace
 10615 00001501 E85F01                          call	OUTT
 10616 00001504 B020                            mov	al,20h ; ' '	;Erase
 10617 00001506 E85A01                          call	OUTT
 10618 00001509 B008                            mov	al,c_BS ; 8	;Backspace
 10619 0000150B E95501                  	jmp	OUTT		;Done
 10620                                  
 10621                                  	; 15/01/2024
 10622                                  ;User really wants an ESC character in his line
 10623                                  ;TWOESC:	
 10624                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10625                                  ;	jmp	SAVCH
 10626                                  
 10627                                  ;Copy the rest of the template
 10628                                  COPYLIN:
 10629 0000150E 88D9                            mov	cl,bl		;Total size of template
 10630 00001510 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10631 00001512 EB07                            jmp	short COPYEACH
 10632                                  
 10633                                  COPYSTR:
 10634 00001514 E83200                  	call	FINDOLD         ;Find the char
 10635 00001517 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10636                                  
 10637                                  ;Copy one char from template to line
 10638                                  COPYONE:
 10639 00001519 B101                            mov	cl,1
 10640                                  ;Copy CX chars from template to line
 10641                                  COPYEACH:
 10642 0000151B 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10643 00001521 38D6                    	cmp	dh,dl
 10644 00001523 740F                            jz	short GETCH2		;At end of line, can't do anything
 10645 00001525 38DF                            cmp	bh,bl
 10646 00001527 740B                            jz	short GETCH2		;At end of template, can't do anything
 10647 00001529 AC                              lodsb
 10648 0000152A AA                              stosb
 10649 0000152B E8C901                  	call	BUFOUT
 10650 0000152E FEC7                            inc	bh			;Ahead in template
 10651 00001530 FEC6                            inc	dh			;Ahead in line
 10652 00001532 E2E7                            loop	COPYEACH
 10653                                  GETCH2:
 10654 00001534 E9E3FE                          jmp	GETCH
 10655                                  
 10656                                  ;Skip one char in template
 10657                                  SKIPONE:
 10658 00001537 38DF                    	cmp	bh,bl
 10659 00001539 74F9                    	jz	short GETCH2		;At end of template
 10660 0000153B FEC7                    	inc	bh			;Ahead in template
 10661 0000153D 46                      	inc	si
 10662                                          ;jmp	GETCH
 10663                                  	; 15/01/2024
 10664 0000153E EBF4                    	jmp	short GETCH2
 10665                                  
 10666                                  SKIPSTR:
 10667 00001540 E80600                  	call	FINDOLD                 ;Find out how far to go
 10668 00001543 01CE                            add	si,cx			;Go there
 10669 00001545 00CF                            add	bh,cl
 10670                                          ;jmp	GETCH
 10671                                  	; 15/01/2024
 10672 00001547 EBEB                    	jmp	short GETCH2
 10673                                  
 10674                                  ;Get the next user char, and look ahead in template for a match
 10675                                  ;CX indicates how many chars to skip to get there on output
 10676                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10677                                  ;       address is popped off and a jump to GETCH is taken.
 10678                                  ;       Make sure nothing extra on stack when this routine
 10679                                  ;       is called!!! (no PUSHes before calling it).
 10680                                  
 10681                                  FINDOLD:
 10682 00001549 E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10683                                  
 10684                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10685                                  
 10686                                  	;CMP	AL,[SS:ESCCHAR]	
 10687                                  	;JNZ	SHORT FINDSETUP
 10688                                  
 10689                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10690                                  
 10691                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10692                                  
 10693 0000154C 2E3A06[1F0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10694 00001551 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10695                                  
 10696 00001553 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10697 00001556 EB1D                            JMP	SHORT NOTFND		; go try again
 10698                                  FINDSETUP:
 10699 00001558 88D9                    	mov	cl,bl
 10700 0000155A 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10701 0000155C 7417                    	jz	short NOTFND	;At end of template
 10702 0000155E 49                              dec	cx		;Cannot point past end, limit search
 10703 0000155F 7414                            jz	short NOTFND	;If only one char in template, forget it
 10704 00001561 06                      	push	es
 10705 00001562 1E                      	push	ds
 10706 00001563 07                      	pop	es
 10707 00001564 57                      	push	di
 10708 00001565 89F7                    	mov	di,si		;Template to ES:DI
 10709 00001567 47                      	inc	di
 10710 00001568 F2AE                    	repne	scasb		;Look
 10711 0000156A 5F                      	pop	di
 10712 0000156B 07                      	pop	es
 10713 0000156C 7507                    	jnz	short NOTFND	;Didn't find the char
 10714 0000156E F6D1                            not	cl		;Turn how far to go into how far we went
 10715 00001570 00D9                            add	cl,bl		;Add size of template
 10716 00001572 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10717                                  FINDOLD_RETN:
 10718 00001574 C3                      	retn
 10719                                  
 10720                                  NOTFND:
 10721 00001575 5D                      	pop	bp              ;Chuck return address
 10722                                  	;jmp	GETCH
 10723                                  	; 15/01/2024
 10724                                  GETCH2_j:
 10725 00001576 EBBC                    	jmp	short GETCH2
 10726                                  
 10727                                  REEDIT:
 10728 00001578 B040                    	mov	al,'@'		;Output re-edit character
 10729 0000157A E8E600                  	call	OUTT
 10730 0000157D 5F                      	pop	di
 10731 0000157E 57                      	push	di
 10732 0000157F 06                      	push	es
 10733 00001580 1E                      	push	ds
 10734 00001581 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10735 00001584 1F                      	pop	ds
 10736 00001585 07                      	pop	es
 10737 00001586 5E                      	pop	si
 10738 00001587 88F3                    	mov	bl,dh		;Size of line is new size template
 10739 00001589 E9F9FE                  	jmp	PUTNEW		;Start over again
 10740                                  
 10741                                  EXITINS:
 10742                                  ENTERINS:
 10743 0000158C 36F616[7905]            	not	byte [SS:INSMODE]
 10744                                  	;jmp	GETCH
 10745                                  	; 15/01/2024
 10746 00001591 EBE3                    	jmp	short GETCH2_j
 10747                                  
 10748                                  ;Put a real live ^Z in the buffer (embedded)
 10749                                  CTRLZ:
 10750 00001593 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10751 00001595 E9A7FE                          jmp	SAVCH
 10752                                  
 10753                                  ;Output a CRLF
 10754                                  CRLF:
 10755 00001598 B00D                    	mov	al,c_CR ; 0Dh 
 10756 0000159A E8C600                  	call	OUTT
 10757 0000159D B00A                    	mov	al,c_LF ; 0Ah
 10758 0000159F E9C100                  	jmp	OUTT
 10759                                  
 10760                                  ;
 10761                                  ;----------------------------------------------------------------------------
 10762                                  ;
 10763                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10764                                  ;
 10765                                  ;	Input or output raw character from console, no echo
 10766                                  ;
 10767                                  ;	ENTRY	DL = -1 if input
 10768                                  ;		   =  output character if output
 10769                                  ;	EXIT	(AL) = input character if input
 10770                                  ;	USES	all
 10771                                  ;
 10772                                  ;----------------------------------------------------------------------------
 10773                                  ; 20/07/2018 - Retro DOS v3.0
 10774                                  
 10775                                  ; 04/05/2019 - Retro DOS v4.0
 10776                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10777                                  
 10778                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10779                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10780                                  
 10781                                  _$RAW_CON_IO:			; System call 6
 10782 000015A2 88D0                    	MOV	AL,DL
 10783 000015A4 3CFF                    	CMP	AL,-1
 10784 000015A6 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10785                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10786                                  	;jz	short rci1
 10787                                  	;jmp	short RAWOUT
 10788                                  	; 16/12/202
 10789                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10790                                  	;nop
 10791                                  rci1:
 10792                                  			; Get pointer to register save area
 10793 000015A8 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10794 000015AD 31DB                    	XOR	BX,BX
 10795                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10796 000015AF E89A20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10797                                          ;JC	SHORT RET17
 10798 000015B2 72C0                            jc	short FINDOLD_RETN
 10799 000015B4 B401                    	MOV	AH,1
 10800 000015B6 E8D92E                  	CALL	IOFUNC
 10801 000015B9 750B                    	JNZ	SHORT RESFLG
 10802 000015BB E86F3B                  	CALL	SPOOLINT
 10803                                  	;OR	BYTE [ES:DI+16H],40H
 10804 000015BE 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10805 000015C3 30C0                    	XOR	AL,AL
 10806                                  RET17:
 10807 000015C5 C3                      	RETN
 10808                                  
 10809                                  RESFLG:
 10810                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10811 000015C6 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10812                                  				; Reset user's zero flag
 10813                                  ;RILP:
 10814                                  rci0:
 10815 000015CB E85F3B                  	CALL	SPOOLINT
 10816                                  ;
 10817                                  ;----------------------------------------------------------------------------
 10818                                  ;
 10819                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10820                                  ;
 10821                                  ;	Input raw character from console, no echo
 10822                                  ;
 10823                                  ;	ENTRY	none
 10824                                  ;	EXIT	(al) = character
 10825                                  ;	USES	all
 10826                                  ;
 10827                                  ;----------------------------------------------------------------------------
 10828                                  ;
 10829                                  
 10830                                  ;rci0:	invoke	SPOOLINT
 10831                                  
 10832                                  	;entry	$RAW_CON_INPUT
 10833                                  
 10834                                  	; 04/05/2019 - Retro DOS v4.0
 10835                                  
 10836                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10837                                  
 10838                                  _$RAW_CON_INPUT:		; System call 7
 10839 000015CE 53                      	push	bx
 10840 000015CF 31DB                    	XOR	BX,BX
 10841                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10842 000015D1 E87820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10843 000015D4 5B                      	pop	bx
 10844 000015D5 72EE                    	JC	SHORT RET17
 10845 000015D7 B401                    	MOV	AH,1
 10846 000015D9 E8B62E                  	CALL	IOFUNC
 10847                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10848                                  	;XOR	AH,AH
 10849                                          ;CALL	IOFUNC
 10850                                          ;RETN
 10851 000015DC 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10852 000015DE B484                    	MOV	AH,84h
 10853 000015E0 CD2A                    	INT	int_IBM  ; int 2Ah
 10854 000015E2 EBE7                    	JMP	short rci0
 10855                                  rci5:	
 10856 000015E4 30E4                    	XOR	AH,AH
 10857                                  	;CALL	IOFUNC
 10858                                  	;RETN
 10859                                  	; 18/12/2022
 10860 000015E6 E9A92E                  	jmp	IOFUNC
 10861                                  
 10862                                  ;       Output the character in AL to stdout
 10863                                  ;
 10864                                  	;entry	RAWOUT
 10865                                  RAWOUT:
 10866 000015E9 53                      	PUSH    BX
 10867 000015EA BB0100                  	MOV     BX,1
 10868                                  
 10869                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10870 000015ED E85C20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10871 000015F0 721B                    	JC	SHORT RAWRET1
 10872                                  
 10873                                  	;
 10874                                  	; MSDOS 2.11
 10875                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10876                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10877                                          ;PUSH	DS
 10878                                          ;PUSH	SI
 10879                                          ;LDS	SI,[SI+19H]		; output to special?
 10880                                  	;TEST	BYTE [SI+4],ISSPEC
 10881                                  	;POP	SI
 10882                                  	;
 10883                                          
 10884                                  	; MSDOS 3.3 & MSDOS 6.0
 10885                                  	;mov	bx,[si+5]
 10886 000015F2 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10887                                   ;
 10888                                   ; If we are a network handle OR if we are not a local device then go do the
 10889                                   ; output the hard way.
 10890                                   ;	
 10891                                  	;and	bx,8080h
 10892 000015F5 81E38080                	AND	BX,sf_isnet+devid_device
 10893                                  	;cmp	bx,80h
 10894 000015F9 81FB8000                	CMP	BX,devid_device
 10895 000015FD 7510                    	jnz     short RAWNORM
 10896 000015FF 1E                      	push    ds
 10897                                  	;lds	bx,[si+7]
 10898 00001600 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10899                                  	;test	byte [bx+4],10h
 10900 00001603 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10901                                  	;
 10902                                  
 10903 00001607 1F                      	POP	DS
 10904 00001608 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10905                                  
 10906 0000160A CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10907                                  
 10908                                  	;JMP	SHORT RAWRET
 10909                                  ;RAWNORM:
 10910                                  ;	CALL    RAWOUT3
 10911                                  RAWRET: 
 10912 0000160C F8                      	CLC
 10913                                  RAWRET1:
 10914 0000160D 5B                      	POP     BX
 10915                                  RAWRET2:
 10916 0000160E C3                      	RETN
 10917                                  RAWNORM:
 10918 0000160F E80700                  	CALL    RAWOUT3
 10919 00001612 EBF8                    	jmp	short RAWRET
 10920                                  
 10921                                  ;	Output the character in AL to handle in BX
 10922                                  ;
 10923                                  ;	entry	RAWOUT2
 10924                                  
 10925                                  RAWOUT2:
 10926                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10927                                  	;JC	SHORT RET18
 10928 00001614 E83520                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10929 00001617 72F5                    	JC	SHORT RAWRET2
 10930                                  RAWOUT3:
 10931 00001619 50                      	PUSH	AX
 10932 0000161A EB0C                    	JMP	SHORT RAWOSTRT
 10933                                  ROLP:
 10934 0000161C E80E3B                  	CALL	SPOOLINT
 10935                                  
 10936                                  	; 01/05/2019 - Retro DOS v4.0
 10937                                  
 10938                                  	; MSDOS 6.0
 10939                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10940                                  	; 17/12/2022
 10941 0000161F 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10942                                  	;or	word [ss:DOS34_FLAG],200h
 10943                                  				;AN002; set control break
 10944                                  	;invoke DSKSTATCHK
 10945 00001625 E8823A                  	call	DSKSTATCHK	;AN002; check control break
 10946                                  RAWOSTRT:
 10947 00001628 B403                    	MOV	AH,3
 10948 0000162A E8652E                  	CALL	IOFUNC
 10949 0000162D 74ED                    	JZ	SHORT ROLP
 10950                                  
 10951                                  	; MSDOS 6.0
 10952                                  ;SR;
 10953                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10954                                  ;the user failed. We do not send a char if this happens. We however return
 10955                                  ;to the caller with carry clear because this DOS call does not return any
 10956                                  ;status. 
 10957                                  ;
 10958 0000162F 40                      	inc	ax		;fail on I24 if ax = -1
 10959 00001630 58                      	POP	AX
 10960 00001631 7405                    	jz	short nosend	;yes, do not send char
 10961 00001633 B402                    	MOV	AH,2
 10962 00001635 E85A2E                  	call	IOFUNC
 10963                                  nosend:
 10964 00001638 F8                      	CLC			; Clear carry indicating successful
 10965 00001639 C3                      	retn
 10966                                  
 10967                                  	; MSDOS 3.3 & MSDOS 2.11
 10968                                  	;POP	AX
 10969                                  	;MOV	AH,2
 10970                                          ;CALL	IOFUNC
 10971                                  	;CLC			; Clear carry indicating successful
 10972                                  ;RET18:    
 10973                                  	;RETN
 10974                                  
 10975                                  ;;10/08/2018
 10976                                  ; 20/07/2018 - Retro DOS v3.0
 10977                                  ; ---------------------------------------------------------------------------
 10978                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10979                                  ; ---------------------------------------------------------------------------
 10980                                  
 10981                                  ; This routine is called at DOS init
 10982                                  
 10983                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10984                                  ;;OUTMES:
 10985                                  ;;	;LODS	CS:BYTE PTR [SI]
 10986                                  ;;	CS	LODSB
 10987                                  ;;	CMP     AL,"$" ; 24h
 10988                                  ;;	JZ	SHORT RET18
 10989                                  ;;	CALL	OUTT
 10990                                  ;;	JMP     SHORT OUTMES
 10991                                  
 10992                                  ; ---------------------------------------------------------------------------
 10993                                  
 10994                                  ; 20/07/2018 - Retro DOS v3.0
 10995                                  
 10996                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10997                                  
 10998                                  ;
 10999                                  ;----------------------------------------------------------------------------
 11000                                  ;
 11001                                  ; Inputs:
 11002                                  ;	AX=0 save the DEVCALL request packet
 11003                                  ;	  =1 restore the DEVCALL request packet
 11004                                  ; Function:
 11005                                  ;	save or restore the DEVCALL packet
 11006                                  ; Returns:
 11007                                  ;	none
 11008                                  ;
 11009                                  ;----------------------------------------------------------------------------
 11010                                  ;
 11011                                  
 11012                                  ; 04/05/2019 - Retro DOS v4.0
 11013                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11014                                  
 11015                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11016                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11017                                  
 11018                                  ; 12/05/2019
 11019                                  
 11020                                  	; 15/01/2024
 11021                                  
 11022                                  Save_Restore_Packet:
 11023 0000163A 1E                      	PUSH	DS
 11024 0000163B 06                      	PUSH	ES
 11025 0000163C 56                      	PUSH	SI
 11026 0000163D 57                      	PUSH	DI
 11027                                  
 11028                                  	; 16/12/2022
 11029                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11030                                  	; 09/09/2018
 11031 0000163E BF[6C0D]                	mov	di,FAKE_STACK_2F
 11032 00001641 BE[5A03]                	mov	si,DEVCALL
 11033                                  	;
 11034                                  	; 21/09/2023
 11035 00001644 09C0                    	or	ax,ax
 11036                                  	;CMP	AX,0		; save packet
 11037 00001646 7402                    	JZ	short save_packet ; 16/12/2022
 11038                                  	;je	short set_seg
 11039                                  
 11040                                  	; MSDOS 6.0
 11041                                  restore_packet:
 11042                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11043                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11044                                  	; MSDOS 3.3
 11045                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11046                                  	;mov	di,DEVCALL  ; 09/09/2018
 11047                                  	;
 11048                                  	;JMP	short set_seg
 11049                                  
 11050                                  	; 16/12/2022	
 11051                                  	; 09/09/2018
 11052 00001648 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11053                                  
 11054                                  ; 16/12/2022
 11055                                  %if 0
 11056                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11057                                  	cmp	ax,0		; save packet
 11058                                  	jz	short save_packet
 11059                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11060                                  	mov	di,DEVCALL 
 11061                                  	jmp	short set_seg
 11062                                  
 11063                                  	; MSDOS 6.0
 11064                                  save_packet:
 11065                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11066                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11067                                  	; 09/09/2018
 11068                                  	; MSDOS 3.3
 11069                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11070                                  	;mov	si,DEVCALL ; 09/09/2018
 11071                                  
 11072                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11073                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11074                                  	mov	si,DEVCALL
 11075                                  %endif
 11076                                  
 11077                                  ; 15/01/2024
 11078                                  ; 16/12/2022
 11079                                  save_packet:
 11080                                  ;set_seg:
 11081                                  	; MSDOS 3.3
 11082                                  	;mov	ax,cs
 11083                                  
 11084                                  	; MSDOS 6.0
 11085                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11086                                  	;MOV	DS,AX
 11087                                  	;MOV	ES,AX
 11088                                  	; 15/01/2024
 11089 0000164A 16                      	push	ss
 11090 0000164B 1F                      	pop	ds
 11091 0000164C 1E                      	push	ds
 11092 0000164D 07                      	pop	es
 11093                                  
 11094 0000164E B90B00                  	MOV	CX,11		; 11 words to move
 11095 00001651 F3A5                    	REP	MOVSW
 11096                                  
 11097 00001653 5F                      	POP	DI
 11098 00001654 5E                      	POP	SI
 11099 00001655 07                      	POP	ES
 11100 00001656 1F                      	POP	DS
 11101 00001657 C3                      	retn
 11102                                  
 11103                                  ;============================================================================
 11104                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11105                                  ;============================================================================
 11106                                  ; 20/07/2018 - Retro DOS v3.0
 11107                                  ; 01/05/2019 - Retro DOS v4.0
 11108                                  
 11109                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11110                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11111                                  ;hkn;	not valid. 
 11112                                  
 11113                                  ;
 11114                                  ;----------------------------------------------------------------------------
 11115                                  ;
 11116                                  ;**	$STD_CON_INPUT - System Call 1
 11117                                  ;
 11118                                  ;	Input character from console, echo
 11119                                  ;
 11120                                  ;	ENTRY	none
 11121                                  ;	EXIT	(al) = character
 11122                                  ;	USES	ALL
 11123                                  ;
 11124                                  ;----------------------------------------------------------------------------
 11125                                  ;
 11126                                  
 11127                                  _$STD_CON_INPUT:	;System call 1
 11128                                  	
 11129 00001658 E821FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11130 0000165B 50                      	PUSH	AX
 11131 0000165C E80400                  	CALL	OUTT
 11132 0000165F 58                      	POP	AX
 11133                                  CON_INPUT_RETN:	
 11134 00001660 C3                      	RETN
 11135                                  
 11136                                  ;
 11137                                  ;----------------------------------------------------------------------------
 11138                                  ;
 11139                                  ;**	$STD_CON_OUTPUT - System Call 2
 11140                                  ;
 11141                                  ;	Output character to console
 11142                                  ;
 11143                                  ;	ENTRY	(dl) = character
 11144                                  ;	EXIT	none
 11145                                  ;	USES	all
 11146                                  ;
 11147                                  ;----------------------------------------------------------------------------
 11148                                  ;
 11149                                  
 11150                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11151                                  
 11152                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11153                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11154                                  
 11155                                  _$STD_CON_OUTPUT:	;System call 2
 11156                                  
 11157 00001661 88D0                    	MOV	AL,DL
 11158                                  OUTT:
 11159 00001663 3C20                    	CMP	AL,20H ; " "
 11160 00001665 725C                    	JB	SHORT CTRLOUT
 11161 00001667 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11162 00001669 7405                    	JZ	SHORT OUTCH
 11163                                  OUTCHA:	
 11164                                  	;INC	BYTE PTR [CARPOS]
 11165 0000166B 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11166                                  OUTCH:
 11167 00001670 1E                      	PUSH	DS
 11168 00001671 56                      	PUSH	SI
 11169                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11170                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11171 00001672 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11172                                  	;AND	BYTE [SS:CHARCO],00111111B
 11173                                  	; 01/05/2019 - Retro DOS v4.0
 11174 00001677 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11175 0000167D 7505                    	JNZ	SHORT OUTSKIP
 11176                                  
 11177 0000167F 50                      	PUSH	AX
 11178 00001680 E8D83A                  	CALL	STATCHK
 11179 00001683 58                      	POP	AX
 11180                                  OUTSKIP:
 11181 00001684 E862FF                  	CALL	RAWOUT				;output the character
 11182                                  
 11183 00001687 5E                      	POP	SI
 11184 00001688 1F                      	POP	DS
 11185                                  
 11186                                  	;TEST	BYTE PTR [PFLAG],-1
 11187                                  	;retz
 11188 00001689 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11189 0000168F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11190                                  
 11191 00001691 53                      	PUSH	BX
 11192 00001692 1E                      	PUSH	DS
 11193 00001693 56                      	PUSH	SI
 11194 00001694 BB0100                  	MOV	BX,1
 11195                                  	; 20/07/2018 - Retro DOS v3.0
 11196                                  	; MSDOS 3.3
 11197                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11198 00001697 E8B21F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11199                                  					;hkn; to sft entry
 11200 0000169A 7224                    	JC	SHORT TRIPOPJ
 11201                                  
 11202                                  	; 01/05/2019 - Retro DOS v4.0
 11203                                  
 11204                                  	;mov	bx,[si+5]
 11205 0000169C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11206                                  	;test	bx,8000h
 11207                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11208 0000169F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11209 000016A2 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11210                                  	;;test	bx,80h
 11211                                  	;TEST	BX,devid_device 		; output to file?
 11212 000016A4 F6C380                  	test	bl,devid_device ; 80h
 11213 000016A7 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11214                                  	; 14/03/2018
 11215                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11216                                  	;jc	short TRIPOPJ
 11217                                  	; MSDOS 2.11
 11218                                  	;test	byte [SI+18H], 80h
 11219                                  	;jz	short TRIPOPJ
 11220 000016A9 BB0400                  	MOV	BX,4
 11221 000016AC E89D1F                  	CALL	GET_IO_SFT
 11222 000016AF 720F                    	JC	SHORT TRIPOPJ
 11223                                  	;;test	word [si+5], 800h
 11224                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11225                                  	;test	byte [si+6],8 ; 08/11/2022
 11226 000016B1 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11227                                  						; StdPrn redirected?
 11228                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11229                                  	;jz	LISSTRT2 ; 10/08/2018 
 11230                                  	; 16/12/2022
 11231 000016B5 7503                    	jnz	short outch1
 11232 000016B7 E98700                  	jmp	LISSTRT2
 11233                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11234                                  	;jz	short LISSTRT2J
 11235                                  outch1:
 11236                                  	;MOV	BYTE [PFLAG],0
 11237 000016BA 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11238                                  	; MSDOS 2.11
 11239                                  	;mov	bx,4
 11240                                  	;jmp	short LISSTRT2
 11241                                  	
 11242                                  TRIPOPJ:
 11243                                  	; 20/07/2018
 11244 000016C0 E98100                  	JMP	TRIPOP
 11245                                  
 11246                                  	; 16/12/2022
 11247                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11248                                  ;LISSTRT2J:
 11249                                  ;	JMP	LISSTRT2
 11250                                  
 11251                                  CTRLOUT:
 11252 000016C3 3C0D                    	CMP	AL,c_CR ; 0Dh
 11253 000016C5 7420                    	JZ	SHORT ZERPOS
 11254 000016C7 3C08                    	CMP	AL,c_BS ; 8
 11255 000016C9 7424                    	JZ	SHORT BACKPOS
 11256 000016CB 3C09                    	CMP	AL,c_HT ; 9
 11257 000016CD 75A1                    	JNZ	SHORT OUTCH
 11258                                  	;MOV	AL,[CARPOS]
 11259 000016CF 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11260 000016D3 0CF8                    	OR	AL,0F8H
 11261 000016D5 F6D8                    	NEG	AL
 11262                                  TAB:
 11263 000016D7 51                      	PUSH	CX
 11264 000016D8 88C1                    	MOV	CL,AL
 11265 000016DA B500                    	MOV	CH,0
 11266 000016DC E307                    	JCXZ	POPTAB
 11267                                  TABLP:
 11268 000016DE B020                    	MOV	AL," "
 11269 000016E0 E880FF                  	CALL	OUTT
 11270 000016E3 E2F9                    	LOOP	TABLP
 11271                                  POPTAB:
 11272 000016E5 59                      	POP	CX
 11273                                  
 11274 000016E6 C3                      	RETN
 11275                                  
 11276                                  ZERPOS:
 11277                                  	;MOV	BYTE PTR [CARPOS],0
 11278 000016E7 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11279                                  	; 10/08/2018
 11280 000016ED EB81                    	JMP	short OUTCH ; 04/05/2019
 11281                                  	
 11282                                  	; 18/12/2022
 11283                                  ;OUTJ:	
 11284                                  	;JMP	OUTT
 11285                                  
 11286                                  BACKPOS:
 11287                                  	;DEC	BYTE PTR [CARPOS]
 11288 000016EF 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11289 000016F4 E979FF                  	JMP	OUTCH
 11290                                  
 11291                                  BUFOUT:
 11292 000016F7 3C20                    	CMP	AL," "
 11293 000016F9 7315                    	JAE	SHORT OUTJ		;Normal char
 11294 000016FB 3C09                    	CMP	AL,9
 11295 000016FD 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11296                                  	;DOS 3.3  7/14/86
 11297 000016FF 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11298 00001701 740D                    	JZ	short CTRLU
 11299 00001703 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11300 00001705 7409                    	JZ	short CTRLU
 11301                                  NOT_CTRLU:
 11302                                  	;DOS 3.3  7/14/86
 11303 00001707 50                      	PUSH	AX
 11304 00001708 B05E                    	MOV	AL,"^"
 11305 0000170A E856FF                  	CALL	OUTT		;Print '^' before control chars
 11306 0000170D 58                      	POP	AX
 11307 0000170E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11308                                  CTRLU:
 11309                                  	;CALL	OUTT
 11310                                  	; 18/12/2022
 11311                                  OUTJ:
 11312 00001710 E950FF                  	jmp	OUTT
 11313                                  ;BUFOUT_RETN:
 11314                                  	;RETN
 11315                                  
 11316                                  ;
 11317                                  ;----------------------------------------------------------------------------
 11318                                  ;
 11319                                  ;**	$STD_AUX_INPUT - System Call 3
 11320                                  ;
 11321                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11322                                  ;
 11323                                  ;	ENTRY	none
 11324                                  ;	EXIT	(al) = character
 11325                                  ;	USES	all
 11326                                  ;
 11327                                  ;----------------------------------------------------------------------------
 11328                                  ;
 11329                                  
 11330                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11331                                  
 11332                                  _$STD_AUX_INPUT:	;System call 3
 11333                                  
 11334 00001713 E8453A                  	CALL	STATCHK
 11335 00001716 BB0300                  	MOV	BX,3
 11336 00001719 E8301F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11337                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11338                                  	;retc
 11339                                  	; 16/12/2022
 11340                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11341                                  	;JC	SHORT BUFOUT_RETN
 11342                                  	;JMP	SHORT TAISTRT
 11343                                  	; 07/12/2022
 11344 0000171C 7304                    	jnc	SHORT TAISTRT
 11345 0000171E C3                      	retn	
 11346                                  
 11347                                  AUXILP:
 11348 0000171F E80B3A                  	CALL	SPOOLINT
 11349                                  TAISTRT:
 11350 00001722 B401                    	MOV	AH,1
 11351 00001724 E86B2D                  	CALL	IOFUNC
 11352 00001727 74F6                    	JZ	SHORT AUXILP
 11353 00001729 30E4                    	XOR	AH,AH
 11354                                  	; 16/12/2022
 11355                                  	;CALL	IOFUNC
 11356                                  	;RETN
 11357                                  	; 07/12/2022
 11358 0000172B E9642D                  	jmp	IOFUNC
 11359                                  
 11360                                  ;
 11361                                  ;----------------------------------------------------------------------------
 11362                                  ;
 11363                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11364                                  ;
 11365                                  ;	ENTRY	(dl) = character
 11366                                  ;	EXIT	none
 11367                                  ;	USES	all
 11368                                  ;
 11369                                  ;----------------------------------------------------------------------------
 11370                                  ;
 11371                                  
 11372                                  _$STD_AUX_OUTPUT:	;System call 4
 11373                                  
 11374 0000172E 53                      	PUSH	BX
 11375 0000172F BB0300                  	MOV	BX,3
 11376 00001732 EB04                    	JMP	SHORT SENDOUT
 11377                                  
 11378                                  ;
 11379                                  ;----------------------------------------------------------------------------
 11380                                  ;
 11381                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11382                                  ;
 11383                                  ;	ENTRY	(dl) = character
 11384                                  ;	EXIT	none
 11385                                  ;	USES	all
 11386                                  ;
 11387                                  ;----------------------------------------------------------------------------
 11388                                  ;
 11389                                  
 11390                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11391                                  
 11392 00001734 53                      	PUSH	BX
 11393 00001735 BB0400                  	MOV	BX,4
 11394                                  
 11395                                  SENDOUT:
 11396 00001738 88D0                    	MOV	AL,DL
 11397 0000173A 50                      	PUSH	AX
 11398 0000173B E81D3A                  	CALL	STATCHK
 11399 0000173E 58                      	POP	AX
 11400 0000173F 1E                      	PUSH	DS
 11401 00001740 56                      	PUSH	SI
 11402                                  LISSTRT2:
 11403 00001741 E8D0FE                  	CALL	RAWOUT2
 11404                                  TRIPOP:
 11405 00001744 5E                      	POP	SI
 11406 00001745 1F                      	POP	DS
 11407 00001746 5B                      	POP	BX
 11408                                  SCIS_RETN:	; 20/07/2018
 11409 00001747 C3                      	RETN
 11410                                  ;
 11411                                  ;----------------------------------------------------------------------------
 11412                                  ;
 11413                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11414                                  ;
 11415                                  ;	Check console input status
 11416                                  ;
 11417                                  ;	ENTRY	none
 11418                                  ;	EXIT	AL = -1 character available, = 0 no character
 11419                                  ;	USES	all
 11420                                  ;
 11421                                  ;----------------------------------------------------------------------------
 11422                                  ;
 11423                                  
 11424                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11425                                  
 11426 00001748 E8103A                  	CALL	STATCHK
 11427 0000174B B000                    	MOV	AL,0		; no xor!!
 11428                                  	;retz
 11429 0000174D 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11430 0000174F 0CFF                    	OR	AL,-1
 11431                                  ;SCIS_RETN:
 11432 00001751 C3                      	RETN
 11433                                  
 11434                                  ;
 11435                                  ;----------------------------------------------------------------------------
 11436                                  ;
 11437                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11438                                  ;
 11439                                  ;	Flush console input buffer and perform call in AL
 11440                                  ;
 11441                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11442                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11443                                  ;		return arguments for the fcn supplied in (AL)
 11444                                  ;	USES	all
 11445                                  ;
 11446                                  ;----------------------------------------------------------------------------
 11447                                  ;
 11448                                  
 11449                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11450                                  
 11451 00001752 50                      	PUSH	AX
 11452 00001753 52                      	PUSH	DX
 11453 00001754 31DB                    	XOR	BX,BX
 11454 00001756 E8F31E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11455                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11456 00001759 7205                    	JC	SHORT BADJFNCON
 11457 0000175B B404                    	MOV	AH,4
 11458 0000175D E8322D                  	CALL	IOFUNC
 11459                                  
 11460                                  BADJFNCON:
 11461 00001760 5A                      	POP	DX
 11462 00001761 58                      	POP	AX
 11463 00001762 88C4                    	MOV	AH,AL
 11464 00001764 3C01                    	CMP	AL,1
 11465 00001766 7413                    	JZ	SHORT REDISPJ
 11466 00001768 3C06                    	CMP	AL,6
 11467 0000176A 740F                    	JZ	SHORT REDISPJ
 11468 0000176C 3C07                    	CMP	AL,7
 11469 0000176E 740B                    	JZ	SHORT REDISPJ
 11470 00001770 3C08                    	CMP	AL,8
 11471 00001772 7407                    	JZ	SHORT REDISPJ
 11472 00001774 3C0A                    	CMP	AL,10
 11473 00001776 7403                    	JZ	SHORT REDISPJ
 11474 00001778 B000                    	MOV	AL,0
 11475 0000177A C3                      	RETN
 11476                                  
 11477                                  REDISPJ:
 11478 0000177B FA                      	CLI
 11479                                  	;transfer REDISP
 11480 0000177C E908EC                  	JMP	REDISP
 11481                                  
 11482                                  ;============================================================================
 11483                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11484                                  ;============================================================================
 11485                                  ; 20/07/2018 - Retro DOS v3.0
 11486                                  ; 17/05/2019 - Retro DOS v4.0
 11487                                  
 11488                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11489                                  ;
 11490                                  ;	$GET_FCB_POSITION
 11491                                  ;	$FCB_DELETE
 11492                                  ;	$GET_FCB_FILE_LENGTH
 11493                                  ;	$FCB_CLOSE
 11494                                  ;	$FCB_RENAME
 11495                                  ;	SaveFCBInfo
 11496                                  ;	ResetLRU
 11497                                  ;	SetOpenAge
 11498                                  ;	LRUFCB
 11499                                  ;	FCBRegen
 11500                                  ;	BlastSFT
 11501                                  ;	CheckFCB
 11502                                  ;	SFTFromFCB
 11503                                  ;	FCBHardErr
 11504                                  ;
 11505                                  ;	Revision history:
 11506                                  ;
 11507                                  ;		Created: ARR 4 April 1983"
 11508                                  ;			 MZ  6 June  1983 completion of functions
 11509                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11510                                  ;					  times.  Change so successive closes work by
 11511                                  ;					  always returning OK.	Also, detect I/O to
 11512                                  ;					  already closed FCB and return EOF.
 11513                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11514                                  ;					  out of sft into FCB for reconnection
 11515                                  ;
 11516                                  ;		A000	 version 4.00  Jan. 1988
 11517                                  
 11518                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11519                                  ;----------------------------------------------------------------------------
 11520                                  ;
 11521                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11522                                  ;	extent and next record field and set the random record field to point
 11523                                  ;	to that record
 11524                                  ;
 11525                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11526                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11527                                  ;   Registers modified: all
 11528                                  ;
 11529                                  ;----------------------------------------------------------------------------
 11530                                  ;
 11531                                  
 11532                                  _$GET_FCB_POSITION:
 11533 0000177F E8D404                  	call	GetExtended		; point to FCB
 11534 00001782 E8A504                  	call	GetExtent		; DX:AX is current record
 11535                                  	;mov	[si+21h],ax
 11536 00001785 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11537                                  	;mov	[si+23h],dl
 11538 00001788 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11539                                  	;cmp	word [si+0Eh],64
 11540 0000178B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11541 0000178F 7303                    	JAE	short GetFCBBye
 11542                                  	;mov	[si+24h],dh
 11543 00001791 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11544                                  GoodPath:	; 16/12/2022
 11545                                  GetFCBBye:
 11546 00001794 E9C0EE                  	jmp	FCB_RET_OK
 11547                                  
 11548                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11549                                  ;----------------------------------------------------------------------------
 11550                                  ;
 11551                                  ;**	$FCB_Delete - Delete from FCB Template
 11552                                  ;
 11553                                  ;	given an FCB, remove all directory entries in the current
 11554                                  ;	directory that have names that match the FCB's ?  marks.
 11555                                  ;
 11556                                  ;	ENTRY	(DS:DX) = address of FCB
 11557                                  ;	EXIT	entries matching the FCB are deleted
 11558                                  ;		(al) = ff iff no entries were deleted
 11559                                  ;	USES	all
 11560                                  ;
 11561                                  ;----------------------------------------------------------------------------
 11562                                  ;
 11563                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11564                                  
 11565                                  _$FCB_DELETE:		; System call 19
 11566                                  					; OpenBuf is in DOSDATA
 11567 00001797 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11568                                  
 11569 0000179A E86553                  	call	TransFCB		; convert FCB to path
 11570 0000179D 7207                    	JC	short BadPath 		; signal no deletions
 11571                                  
 11572 0000179F 16                      	push	SS
 11573 000017A0 1F                      	pop	DS			; SS is DOSDATA
 11574                                  
 11575 000017A1 E87C0D                  	call	DOS_DELETE		; wham
 11576                                  	;JC	short BadPath
 11577                                  	; 16/12/2022
 11578 000017A4 73EE                    	jnc 	short GoodPath
 11579                                  ;GoodPath:
 11580                                  ;	;jmp	FCB_RET_OK		; do a good return
 11581                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11582                                  ;	jmp	short GetFCBBye
 11583                                  
 11584                                  BadPath:
 11585                                  	; Error code is in AX
 11586                                  
 11587 000017A6 E9B1EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11588                                  
 11589                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11590                                  ;----------------------------------------------------------------------------
 11591                                  ;
 11592                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11593                                  ;	file in records (rounded up if partial).
 11594                                  ;
 11595                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11596                                  ;   Outputs:	Random record field updated to reflect the number of records
 11597                                  ;   Registers modified: all
 11598                                  ;
 11599                                  ;----------------------------------------------------------------------------
 11600                                  ;
 11601                                  	; 15/01/2024
 11602                                  
 11603                                  _$GET_FCB_FILE_LENGTH:
 11604                                  
 11605 000017A9 E8AA04                  	call	GetExtended		; get real FCB pointer
 11606                                  					; DX points to Input FCB
 11607                                  
 11608                                  					; OpenBuf is in DOSDATA
 11609 000017AC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11610                                  
 11611 000017AF 1E                      	push	ds			; save pointer to true FCB
 11612 000017B0 56                      	push	si
 11613 000017B1 E84E53                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11614 000017B4 5E                      	pop	si
 11615 000017B5 1F                      	pop	ds
 11616 000017B6 72EE                    	JC	short BadPath
 11617 000017B8 1E                      	push	ds			; save pointer
 11618 000017B9 56                      	push	si
 11619 000017BA 16                      	push	ss		
 11620 000017BB 1F                      	pop	ds
 11621 000017BC E87111                  	call	GET_FILE_INFO		; grab the info
 11622 000017BF 5E                      	pop	si			; get pointer back
 11623 000017C0 1F                      	pop	ds
 11624 000017C1 72E3                    	JC	short BadPath 		; invalid something
 11625                                  	; 15/01/2024
 11626                                  	;MOV	DX,BX (*)		; get high order size
 11627                                  	;MOV	AX,DI (**)		; get low order size
 11628 000017C3 89D8                    	mov	ax,bx ; hw of file size
 11629                                  	;
 11630                                  	;mov	bx,[si+0Eh]
 11631 000017C5 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11632 000017C8 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11633 000017CA 7502                    	JNZ	short GetSize 		; not empty
 11634                                  	;MOV	BX,128
 11635 000017CC B380                    	mov	bl,128	; 15/01/2024
 11636                                  GetSize:
 11637                                  	; 15/01/2024
 11638                                  	;MOV	DI,AX			; save low order word
 11639                                  	;MOV	AX,DX			; move high order for divide
 11640                                  	;xchg	ax,dx ; (*)
 11641                                  	; ax = hw of file size
 11642                                  
 11643 000017CE 31D2                    	XOR	DX,DX			; clear out high
 11644 000017D0 F7F3                    	DIV	BX			; wham
 11645 000017D2 50                      	PUSH	AX			; save dividend
 11646 000017D3 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11647 000017D5 F7F3                    	DIV	BX			; wham
 11648 000017D7 89D1                    	MOV	CX,DX			; save remainder
 11649 000017D9 5A                      	POP	DX			; get high order dividend
 11650 000017DA E306                    	JCXZ	LengthStore		; no roundup
 11651 000017DC 83C001                  	ADD	AX,1
 11652 000017DF 83D200                  	ADC	DX,0			; 32-bit increment
 11653                                  LengthStore:
 11654                                  	;mov	[si+21h],ax
 11655 000017E2 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11656                                  	;mov	[si+23h],dl
 11657 000017E5 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11658 000017E8 08F6                    	OR	DH,DH
 11659 000017EA 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11660                                  	;mov	[si+24h],dh
 11661 000017EC 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11662                                  	; 16/12/2022
 11663                                  GoodRet:
 11664                                  	;jmp	FCB_RET_OK
 11665 000017EF EBA3                    	jmp	short GoodPath
 11666                                  
 11667                                  ;Break <$FCB_Close - close a file>
 11668                                  ;----------------------------------------------------------------------------
 11669                                  ;
 11670                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11671                                  ;	as the FCB may be used for further I/O
 11672                                  ;
 11673                                  ;   Inputs:	DS:DX point to FCB
 11674                                  ;   Outputs:	AL = FF if file was not found on disk
 11675                                  ;   Registers modified: all
 11676                                  ;
 11677                                  ;----------------------------------------------------------------------------
 11678                                  ;
 11679                                  	; 16/01/2024
 11680                                  
 11681                                  _$FCB_CLOSE:		; System call 16
 11682                                  
 11683 000017F1 30C0                    	XOR	AL,AL			; default search attributes
 11684 000017F3 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11685 000017F6 7403                    	JZ	short NoAttr		; not extended
 11686 000017F8 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11687                                  NoAttr:
 11688                                  					; SS override
 11689 000017FB 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11690 000017FF E8C303                  	call	SFTFromFCB
 11691 00001802 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11692                                  
 11693                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11694                                  	; there is no need to set the SFT's attribute.
 11695                                  
 11696                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11697                                  	;;; done
 11698                                  
 11699                                  	;mov	al,[es:di+4]
 11700 00001804 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11701 00001808 30E4                    	XOR	AH,AH
 11702 0000180A 50                      	PUSH	AX
 11703                                  
 11704                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11705                                  	;;; done
 11706                                  
 11707 0000180B E8205B                  	call	CheckShare
 11708 0000180E 7508                    	JNZ	short NoStash
 11709 00001810 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11710                                  	;mov	[es:di+4],al
 11711 00001814 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11712                                  NoStash:
 11713                                  
 11714                                  ; 16/01/2024
 11715                                  %if 0
 11716                                  	;mov	ax,[si+14h]
 11717                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11718                                  	;mov	[es:di+0Fh],ax
 11719                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11720                                  	;mov	ax,[si+16h]
 11721                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11722                                  	;mov	[es:di+0Dh],ax
 11723                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11724                                  	;mov	ax,[si+10h]
 11725                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11726                                  	;mov	[es:di+11h],ax
 11727                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11728                                  	;mov	ax,[si+12h]
 11729                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11730                                  	;mov	[es:di+13h],ax
 11731                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11732                                  	;or	word [es:di+5],4000h
 11733                                  	; 17/12/2022
 11734                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11735                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11736                                  %else
 11737                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11738 00001818 1E                      	push	ds
 11739                                  	;lds	ax,[si+14h]
 11740 00001819 C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11741                                  	;mov	[es:di+0Fh],ax
 11742 0000181C 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11743                                  	;mov	[es:di+0Dh],ds		
 11744 00001820 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11745 00001824 1F                      	pop	ds
 11746                                  	;lds	ax,[si+10h]
 11747 00001825 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11748                                  	;mov	[es:di+11h],ax
 11749 00001828 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11750                                  	;mov	[es:di+13h],ds
 11751 0000182C 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11752                                  	; 16/01/2024
 11753                                  	;;or	word [es:di+5], 4000h
 11754                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11755 00001830 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11756                                  %endif
 11757                                  
 11758 00001835 16                      	push	ss
 11759 00001836 1F                      	pop	ds
 11760 00001837 E8EF16                  	call	DOS_CLOSE	; wham
 11761 0000183A C43E[9E05]              	LES	DI,[THISSFT]
 11762                                  
 11763                                  	;;; 9/8/86 F.C. restore SFT attribute
 11764 0000183E 59                      	POP	CX
 11765                                  	;mov	[es:di+4],cl
 11766 0000183F 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11767                                  	;;; 9/8/86 F.C. restore SFT attribute
 11768                                  
 11769 00001843 9C                      	PUSHF
 11770                                  	;test	word [es:di],0FFFFh
 11771                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11772                                  				; zero ref count gets blasted
 11773 00001844 26833D00                	cmp	word [ES:DI],0
 11774 00001848 7507                    	jnz     short CloseOK
 11775 0000184A 50                      	PUSH	AX
 11776 0000184B B04D                    	MOV	AL,'M' ; 4Dh
 11777 0000184D E8F202                  	call	BlastSFT
 11778 00001850 58                      	POP	AX
 11779                                  CloseOK:
 11780 00001851 9D                      	POPF
 11781 00001852 739B                    	JNC	short GoodRet
 11782                                  	;cmp	al,6
 11783 00001854 3C06                    	CMP	AL,error_invalid_handle
 11784 00001856 7497                    	JZ	short GoodRet
 11785                                  	;mov	al,2
 11786 00001858 B002                    	MOV	AL,error_file_not_found
 11787                                  fren90:
 11788                                  	; 16/12/2022
 11789                                  fcb_close_err:
 11790 0000185A E9FDED                  	jmp	FCB_RET_ERR
 11791                                  
 11792                                  ;
 11793                                  ;----------------------------------------------------------------------------
 11794                                  ;
 11795                                  ;**	$FCB_Rename - Rename a File
 11796                                  ;
 11797                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11798                                  ;	multiple files copying from the meta characters.
 11799                                  ;
 11800                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11801                                  ;		    name of the files to be renamed. Starting at offset 11h
 11802                                  ;		    in the FCB is the destination name.
 11803                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11804                                  ;		AL = FF -> some files may have been renamed but:
 11805                                  ;			rename to existing file or source file not found
 11806                                  ;	USES	ALL
 11807                                  ;
 11808                                  ;----------------------------------------------------------------------------
 11809                                  ;
 11810                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11811                                  
 11812                                  _$FCB_RENAME:		; System call 23
 11813                                  
 11814 0000185D E8F603                  	call	GetExtended		; get pointer to real FCB
 11815 00001860 52                      	push	dx
 11816 00001861 8A04                    	MOV	AL,[SI] 		; get drive byte
 11817 00001863 83C610                  	ADD	SI,10h			; point to destination
 11818                                  
 11819                                  					; RenBuf is in DOSDATA
 11820 00001866 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11821 00001869 FF34                    	push	word [SI]
 11822 0000186B 1E                      	push	ds
 11823                                  	;push	di			; save source pointer for TransFCB
 11824                                  	; 16/01/2024 - BugFix !
 11825 0000186C 56                      	push	si
 11826 0000186D 8804                    	MOV	[SI],AL			; drop in real drive
 11827 0000186F 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11828 00001871 E88E52                  	call	TransFCB		; munch this pathname
 11829 00001874 5E                      	pop	si
 11830 00001875 1F                      	pop	ds	
 11831 00001876 8F04                    	pop	WORD [SI]		; get path back
 11832 00001878 5A                      	pop	dx			; Original FCB pointer
 11833 00001879 72DF                    	JC	short fren90		; bad path -> error
 11834                                  
 11835                                  					; SS override for WFP_Start & Ren_WFP
 11836 0000187B 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11837 00001880 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11838                                  
 11839                                  					; OpenBuf is in DOSDATA
 11840 00001885 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11841 00001888 E87752                  	call	TransFCB		; wham
 11842                                  					; NOTE that this call is pointing
 11843                                  					;  back to the ORIGINAL FCB so
 11844                                  					;  SATTRIB gets set correctly
 11845 0000188B 72CD                    	JC	short fren90		; error
 11846 0000188D E86E0E                  	call	DOS_RENAME
 11847 00001890 72C8                    	JC	short fren90
 11848                                  	; 16/12/2022
 11849 00001892 E9C2ED                  	jmp	FCB_RET_OK
 11850                                  	
 11851                                  ;	Error -
 11852                                  ;
 11853                                  ;	(al) = error code
 11854                                  
 11855                                  	; 16/12/2022
 11856                                  ;fren90:	
 11857                                  ;	;jmp	FCB_RET_ERR
 11858                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11859                                  ;	jmp	short fcb_close_err
 11860                                  
 11861                                  ;Break <Misbehavior fixers>
 11862                                  ;
 11863                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11864                                  ;   user's space so he may move them at will. Second, they have a small
 11865                                  ;   reserved area that may be used for system information. Third, there was
 11866                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11867                                  ;   usage.
 11868                                  ;
 11869                                  ;   This results in the following misbehavior:
 11870                                  ;
 11871                                  ;	infinite opens of the same file:
 11872                                  ;
 11873                                  ;	While (TRUE) {			While (TRUE) {
 11874                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11875                                  ;	    Read (FCB); 		    Write (FCB);
 11876                                  ;	    }				    }
 11877                                  ;
 11878                                  ;	infinite opens of different files:
 11879                                  ;
 11880                                  ;	While (TRUE) {			While (TRUE) {
 11881                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11882                                  ;	    Read (FCB); 		    Write (FCB);
 11883                                  ;	    }				    }
 11884                                  ;
 11885                                  ;	multiple closes of the same file:
 11886                                  ;
 11887                                  ;	FCBOpen (FCB);
 11888                                  ;	while (TRUE)
 11889                                  ;	    FCBClose (FCB);
 11890                                  ;
 11891                                  ;	I/O after closing file:
 11892                                  ;
 11893                                  ;	FCBOpen (FCB);
 11894                                  ;	while (TRUE) {
 11895                                  ;	    FCBWrite (FCB);
 11896                                  ;	    FCBClose (FCB);
 11897                                  ;	    }
 11898                                  ;
 11899                                  ;   The following is am implementation of a methodology for emulating the
 11900                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11901                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11902                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11903                                  ;   the local machine.
 11904                                  ;
 11905                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11906                                  ;   structures depending on the file itself and the state of operations of the
 11907                                  ;   OS. The information contained in this reserved field is enough to
 11908                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11909                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11910                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11911                                  ;
 11912                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11913                                  ;
 11914                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11915                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11916                                  ;   regenerated.
 11917                                  ;
 11918                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11919                                  ;   longer available. We can make up for this by using the following
 11920                                  ;   information:
 11921                                  ;
 11922                                  ;	The Drive number (from the DPB).
 11923                                  ;	The physical sector of the directory that contains the entry.
 11924                                  ;	The relative position of the entry in the sector.
 11925                                  ;	The first cluster field.
 11926                                  ;	The last used SFT.
 11927                                  ;      OR In the case of a device FCB
 11928                                  ;	The low 6 bits of sf_flags (indicating device type)
 11929                                  ;	The pointer to the device header
 11930                                  ;
 11931                                  ;   We read in the particular directory sector and examine the indicated
 11932                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11933                                  ;
 11934                                  ;   Some key items need to be remembered:
 11935                                  ;
 11936                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11937                                  ;	information. We enforce good behavior on the FCBs.
 11938                                  ;
 11939                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11940                                  ;	open VCs. The VCs may be closed only at process termination.
 11941                                  ;
 11942                                  ;	If this is not an installed version of the DOS, file sharing will
 11943                                  ;	always be present.
 11944                                  ;
 11945                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11946                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11947                                  ;
 11948                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11949                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11950                                  ;	proper OI record.
 11951                                  ;
 11952                                  ;   The test bits are:
 11953                                  ;
 11954                                  ;	00 -> local file
 11955                                  ;	40 -> sharing local
 11956                                  ;	80 -> network
 11957                                  ;	C0 -> local device
 11958                                  
 11959                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11960                                  ;----------------------------------------------------------------------------
 11961                                  ;
 11962                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11963                                  ;	pieces of information into the FCB to allow for subsequent
 11964                                  ;	regeneration. Poke LRU also.
 11965                                  ;
 11966                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11967                                  ;		DS:SI point to the FCB (not an extended one)
 11968                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11969                                  ;		DS:SI preserved
 11970                                  ;		ES:DI point to sft
 11971                                  ;   Registers modified: All
 11972                                  ;
 11973                                  ;
 11974                                  ;----------------------------------------------------------------------------
 11975                                  ;
 11976                                  	; 20/01/2024
 11977                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11978                                  
 11979                                  SaveFCBInfo:
 11980                                  
 11981 00001895 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11982 0000189A E8CCF9                  	call	IsSFTNet
 11983 0000189D 740B                    	JZ	short SaveLocal		; if not network then save local info
 11984                                  ;
 11985                                  ;----- In net support -----
 11986                                  ;
 11987                                  	; 17/05/2019 - Retro DOS v4.0
 11988                                  
 11989                                  	; MSDOS 3.3
 11990                                  	;;mov	ax,[es:di+1Dh]
 11991                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11992                                  	;;mov	[si+1Ah],ax
 11993                                  	;mov	[si+fcb_net_handle],ax
 11994                                  	;push	es
 11995                                  	;push	di
 11996                                  	;;les	di,[es:di+19h]
 11997                                  	;LES	DI,[ES:DI+sf_netid]
 11998                                  	;;mov	[si+1Ch],di
 11999                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12000                                  	;;mov 	[si+1Eh],es
 12001                                  	;MOV	[SI+fcb_netID+2],ES
 12002                                  	;pop	di
 12003                                  	;pop	es
 12004                                  
 12005                                  	; MSDOS 6.0
 12006                                  	;mov	ax,[es:di+0Bh]
 12007 0000189F 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12008                                  	;mov	[si+1Ch],ax
 12009 000018A3 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12010                                  	
 12011                                  	;mov	bl,80h
 12012 000018A6 B380                    	MOV	BL,FCBNETWORK
 12013                                  ;
 12014                                  ;----- END In net support -----
 12015                                  ;
 12016 000018A8 EB63                    	jmp	SHORT SaveSFN
 12017                                  
 12018                                  SaveLocal:
 12019                                  	;IF	Installed
 12020 000018AA E8815A                  	call	CheckShare
 12021                                  	;JZ	short SaveNoShare	; no sharer
 12022                                  	;JMP	short SaveShare		; sharer present
 12023                                  	; 16/12/2022
 12024                                  	; 28/07/2019
 12025 000018AD 7559                    	jnz	short SaveShare
 12026                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12027                                  	;JZ	short SaveNoShare	; no sharer
 12028                                  	;JMP	short SaveShare		; sharer present
 12029                                  
 12030                                  SaveNoShare:
 12031                                  	;;test 	word [es:di+5],80h
 12032                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12033 000018AF 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12034 000018B4 7542                    	JNZ	short SaveNoShareDev	; Device
 12035                                  
 12036                                  	; Save no sharing local file information
 12037                                  
 12038                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12039                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12040 000018B6 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12041                                  	;mov	[si+1Dh],ax
 12042 000018BA 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12043                                  
 12044                                  	; MSDOS 6.0
 12045                                  
 12046                                  	;SR; Store high byte of directory sector
 12047                                  	;mov	ax,[es:di+1Dh]
 12048 000018BD 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12049                                  	
 12050                                  	; SR;
 12051                                  	; We have to store the read-only and archive attributes of the file.
 12052                                  	; We extract it from the SFT and store it in the top two bits of the 
 12053                                  	; sector number ( sector number == 22 bits only )
 12054                                  
 12055                                  	;mov	bl,[es:di+4]
 12056 000018C1 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12057 000018C5 88DF                    	mov	bh,bl
 12058 000018C7 D0CB                    	ror	bl,1
 12059 000018C9 D0E7                    	shl	bh,1
 12060 000018CB 08FB                    	or	bl,bh
 12061 000018CD 80E3C0                  	and	bl,0C0h
 12062 000018D0 08D8                    	or	al,bl
 12063                                  	;mov	[si+18h],al ; 08/11/2022
 12064 000018D2 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12065                                  
 12066                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12067                                  	;mov	al,[es:di+1Fh]
 12068 000018D5 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12069                                  	;mov	[si+1Fh],al
 12070 000018D9 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12071                                  	;mov	ax,[es:di+0Bh]
 12072 000018DC 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12073                                  	;mov	[si+1Bh],ax
 12074 000018E0 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12075 000018E3 B300                    	MOV	BL,0
 12076                                  
 12077                                  	; Create the bits field from the dirty/device bits of the flags word 
 12078                                  	; and the mode byte
 12079                                  
 12080                                  SetFCBBits:
 12081                                  	;mov	ax,[es:di+5]
 12082 000018E5 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12083 000018E9 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12084                                  	;or	al,[es:di+2]
 12085 000018EB 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12086                                  	;mov	[si+1Ah], al
 12087 000018EF 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12088                                  
 12089                                  	; MSDOS 6.0
 12090                                  	
 12091                                  	; SR;
 12092                                  	; Check if we came here for local file or device. If for local file, 
 12093                                  	; skip setting of SFT index
 12094                                  	
 12095 000018F2 08DB                    	or	bl,bl
 12096 000018F4 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12097                                  
 12098 000018F6 EB15                    	JMP	short SaveSFN 		; go and save SFN
 12099                                  
 12100                                  	; Save no sharing local device information
 12101                                  
 12102                                  SaveNoShareDev:
 12103                                  	; 20/01/2024
 12104                                  	;;mov	ax,[es:di+7]
 12105                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12106                                  	;;mov	[si+1Ah],ax
 12107                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12108                                  	;;mov	ax,[es:di+9]
 12109                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12110                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12111                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12112 000018F8 06                      	push	es
 12113 000018F9 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12114 000018FD 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12115 00001900 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12116 00001903 07                      	pop	es
 12117                                  	
 12118                                  	;mov	bl,40h
 12119 00001904 B340                    	MOV	BL,FCBDEVICE
 12120                                  	; 28/12/2022
 12121 00001906 EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12122                                  
 12123                                  SaveShare:
 12124                                  	;ENDIF
 12125                                  
 12126                                  ;----- In share support -----
 12127                                  
 12128                                  	;call	far [ss:ShSave]
 12129 00001908 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12130                                  
 12131                                  ;----- end in share support -----
 12132                                  
 12133                                  	; 17/05/2019
 12134                                  
 12135                                  SaveSFN:
 12136                                  	;lea	ax,[di-6]
 12137 0000190D 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12138                                  	
 12139                                  	; Adjust for offset to table.
 12140                                  	
 12141 00001910 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12142                                  
 12143 00001915 53                      	push	bx			;bx = FCB type (net/Share or local)
 12144                                  	;;mov	bl,53 ; MSDOS 3.3
 12145                                  	;mov	bl,59 ; MSDOS 6.0
 12146 00001916 B33B                    	MOV	BL,SF_ENTRY.size
 12147 00001918 F6F3                    	DIV	BL
 12148                                  	;mov	[si+18h],al
 12149 0000191A 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12150 0000191D 5B                      	pop	bx			;restore bx
 12151                                  
 12152                                  SaveNoSFN:
 12153                                  	;mov	ax,[es:di+5]
 12154 0000191E 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12155 00001922 243F                    	AND	AL,3Fh			; get real drive
 12156 00001924 08D8                    	OR	AL,BL
 12157                                  	;mov	[si+19h],al
 12158 00001926 884419                  	MOV	[SI+fcb_l_drive],AL
 12159                                  
 12160 00001929 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12161 0000192D 40                      	INC	AX
 12162                                  	;mov	[es:di+15h],ax
 12163 0000192E 26894515                	MOV	[ES:DI+sf_LRU],AX
 12164 00001932 7506                    	JNZ	short SimpleStuff
 12165                                  	
 12166                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12167                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12168                                  	
 12169                                  	;mov	bx,15h
 12170 00001934 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12171 00001937 E80500                  	call	ResetLRU
 12172                                  
 12173                                  	; Set new LRU to AX
 12174                                  SimpleStuff:
 12175 0000193A 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12176 0000193E C3                      	retn
 12177                                  
 12178                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12179                                  ;----------------------------------------------------------------------------
 12180                                  ;
 12181                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12182                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12183                                  ;   at 0.
 12184                                  ;
 12185                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12186                                  ;		ES:DI point to SFT currently being updated
 12187                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12188                                  ;		AX has 8000h
 12189                                  ;   Registers modified: none
 12190                                  ;
 12191                                  ;----------------------------------------------------------------------------
 12192                                  ;
 12193                                  
 12194                                  	; 17/05/2019 - Retro DOS v4.0
 12195                                  ResetLRU:
 12196                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12197                                  	; DOSDATA
 12198                                  
 12199 0000193F B80080                  	MOV	AX,8000h
 12200 00001942 06                      	push	es
 12201 00001943 57                      	push	di
 12202                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12203 00001944 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12204                                  	;mov	cx,[es:di+4]
 12205 00001949 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12206                                  	;lea	di,[di+6]
 12207 0000194D 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12208                                  ovScan:
 12209 00001950 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12210 00001953 7703                    	JA	short ovLoop
 12211 00001955 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12212                                  ovLoop:
 12213                                  	;;add	di,53	; MSDOS 3.3
 12214                                  	;add	di,59	; MSDOS 6.0	
 12215 00001958 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12216 0000195B E2F3                    	LOOP	ovScan
 12217 0000195D 5F                      	pop	di
 12218 0000195E 07                      	pop	es
 12219 0000195F 268901                  	MOV	[ES:DI+BX],AX
 12220 00001962 C3                      	retn
 12221                                  
 12222                                  ;IF  0  ; We dont need this routine any more.
 12223                                  ;
 12224                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12225                                  ;----------------------------------------------------------------------------
 12226                                  ;
 12227                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12228                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12229                                  ;   count here and fill in the appropriate field.
 12230                                  ;
 12231                                  ;   Inputs:	ES:DI point to SFT
 12232                                  ;   Outputs:	ES:DI has the open age field filled in.
 12233                                  ;		If open age has wraparound, we will have subtracted 8000h
 12234                                  ;		    from all open ages.
 12235                                  ;   Registers modified: AX
 12236                                  ;
 12237                                  ;----------------------------------------------------------------------------
 12238                                  ;
 12239                                  ;SetOpenAge:
 12240                                  ;	; 20/07/2018 - Retro DOS v3.0
 12241                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12242                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12243                                  ;
 12244                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12245                                  ;
 12246                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12247                                  ;	INC	AX
 12248                                  ;	;mov	[es:di+17h],ax
 12249                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12250                                  ;	JNZ	short SetDone
 12251                                  ;	;mov	bx,17h
 12252                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12253                                  ;	call	ResetLRU
 12254                                  ;SetDone:
 12255                                  ;	MOV	[CS:OpenLRU],AX
 12256                                  ;	retn
 12257                                  ;
 12258                                  ;ENDIF	; SetOpenAge no longer needed
 12259                                  
 12260                                  ; 21/07/2018 - Retro DOS v3.0
 12261                                  ; LRUFCB for MSDOS 6.0 !
 12262                                  
 12263                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12264                                  ;----------------------------------------------------------------------------
 12265                                  ;
 12266                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12267                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12268                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12269                                  ;
 12270                                  ;   Inputs:	none
 12271                                  ;   Outputs:	ES:DI point to SFT
 12272                                  ;		ThisSFT points to SFT
 12273                                  ;		SFT is zeroed
 12274                                  ;		Carry set of closes failed
 12275                                  ;   Registers modified: none
 12276                                  ;
 12277                                  ;----------------------------------------------------------------------------
 12278                                  ;
 12279                                  ; MSDOS 6.0
 12280                                  ;IF 0	; rewritten this routine
 12281                                  ;
 12282                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12283                                  ;	call	save_world
 12284                                  ;	
 12285                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12286                                  ; to find the lease recently used one that is younger than the open age.  We
 12287                                  ; operate be scanning the list n times finding the least age that is greater
 12288                                  ; or equal to the previous minimum age.
 12289                                  ;
 12290                                  ;   BP is the count of times we need to go through this loop.
 12291                                  ;   AX is the current acceptable minimum age to consider
 12292                                  ;
 12293                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12294                                  ;	XOR	AX,AX			; low = 0;
 12295                                  ;
 12296                                  ; If we've scanned the table n times, then we are done.
 12297                                  ;
 12298                                  ;lru1:
 12299                                  ;	CMP	bp,0			; while (k--) {
 12300                                  ;	JZ	short lru75
 12301                                  ;	DEC	bp
 12302                                  ;
 12303                                  ; Set up for scan.
 12304                                  ;
 12305                                  ;   AX is the minimum age for consideration
 12306                                  ;   BX is the minimum age found during the scan
 12307                                  ;   SI is the position of the entry that corresponds to BX
 12308                                  ;
 12309                                  ;	MOV	BX,-1			;     min = 0xffff;
 12310                                  ;	MOV	si,BX			;     pos = 0xffff;
 12311                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12312                                  ;	;mov	cx,[es:di+4]
 12313                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12314                                  ;	;lea	di,[di+6]
 12315                                  ;	LEA	DI,[DI+SFT.SFTable]
 12316                                  ;
 12317                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12318                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12319                                  ; are done.  In both cases, we use the found entry.
 12320                                  ;
 12321                                  ;lru2:
 12322                                  ;	cmp	word [es:di],0
 12323                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12324                                  ;	jz	short lru25
 12325                                  ;	;cmp	word [es:di],-1
 12326                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12327                                  ;	cmp	word [es:di],sf_busy
 12328                                  ;	jnz	short lru3
 12329                                  ;
 12330                                  ; The entry is usable without further scan.  Go and use it.
 12331                                  ;
 12332                                  ;lru25:
 12333                                  ;	MOV	si,DI			;	      pos = i;
 12334                                  ;	JMP	short lru11		;	      goto got;
 12335                                  ;
 12336                                  ; See if the entry is for the network or for the sharer.
 12337                                  ;
 12338                                  ;  If for the sharer or network then
 12339                                  ;	if the age < current minimum AND >= allowed minimum then
 12340                                  ;	    this entry becomes current minimum
 12341                                  ;
 12342                                  ;lru3:
 12343                                  ;	;test	word [es:di+5],8000h
 12344                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12345                                  ;					;	  if (!net[i]
 12346                                  ;	JNZ	short lru35
 12347                                  ;if installed
 12348                                  ;	call	CheckShare		;		&& !sharing)
 12349                                  ;	JZ	short lru5		;	  else
 12350                                  ;ENDIF
 12351                                  ;
 12352                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12353                                  ; current minimum.
 12354                                  ;
 12355                                  ;lru35:
 12356                                  ;	;mov	dx,[es:di+17h]
 12357                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12358                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12359                                  ;	JB	short lru5
 12360                                  ;	CMP	DX,BX
 12361                                  ;	JAE	short lru5		;	      age[i] < min) {
 12362                                  ;
 12363                                  ; entry is new minimum.  Remember his age.
 12364                                  ;
 12365                                  ;	mov	bx,DX			;	      min = age[i];
 12366                                  ;	mov	si,di			;	      pos = i;
 12367                                  ;
 12368                                  ; End of loop.	gp back for more
 12369                                  ;
 12370                                  ;lru5:
 12371                                  ;	;add	di,53
 12372                                  ;	add	di,SF_ENTRY.size
 12373                                  ;	loop	lru2			;	      }
 12374                                  ;
 12375                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12376                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12377                                  ; complete.  Go find LRU.
 12378                                  ;
 12379                                  ;lru6:	
 12380                                  ;	cmp	si,-1			; position not -1?
 12381                                  ;	jz	short lru75		; no, done with everything
 12382                                  ;	lea	ax,[bx+1]		; set new threshold age
 12383                                  ;	jmp	short lru1		; go and loop for more
 12384                                  ;lru65:	
 12385                                  ;	stc
 12386                                  ;	jmp	short LRUDead		;	  return -1;
 12387                                  ;
 12388                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12389                                  ; network entry. We now make a second pass through to find the LRU entry
 12390                                  ; that is local-no-share or has age >= AX
 12391                                  ;
 12392                                  ;lru75:
 12393                                  ;	mov	bx,-1			; min = 0xffff;
 12394                                  ;	mov	si,bx			; pos = 0xffff;
 12395                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12396                                  ;	;mov	cx,[es:di+4]
 12397                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12398                                  ;	;lea	di,[di+6]
 12399                                  ;	LEA	DI,[DI+SFT.SFTable]
 12400                                  ;
 12401                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12402                                  ; then check for lru.
 12403                                  ;
 12404                                  ;lru8:
 12405                                  ;	;test	word [es:di+5],8000h
 12406                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12407                                  ;	jnz	short lru85		; is for network, go check age
 12408                                  ;	call	CheckShare		; sharer here?
 12409                                  ;	jz	short lru86		; no, go check lru
 12410                                  ;
 12411                                  ; Network or sharer.  Check age
 12412                                  ;
 12413                                  ;lru85:
 12414                                  ;	;cmp	[es:di+17h],ax
 12415                                  ;	cmp	[es:di+sf_OpenAge],ax
 12416                                  ;	jb	short lru9		; age is before threshold, skip it
 12417                                  ;
 12418                                  ; Check LRU
 12419                                  ;
 12420                                  ;lru86:
 12421                                  ;	;cmp	[es:di+15h],bx
 12422                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12423                                  ;	jae	short lru9		; no, skip this
 12424                                  ;	mov	si,di			; remember position
 12425                                  ;	;mov	bx,[es:di+15h]
 12426                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12427                                  ;
 12428                                  ; Done with this entry, go back for more.
 12429                                  ;
 12430                                  ;lru9:
 12431                                  ;	;add	di, 53
 12432                                  ;	add	di,SF_ENTRY.size
 12433                                  ;	loop	lru8
 12434                                  ;
 12435                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12436                                  ; out. The conditions here are:
 12437                                  ;
 12438                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12439                                  ;
 12440                                  ;lru10:
 12441                                  ;	cmp	si,-1			; if no one f
 12442                                  ;	jz	short lru65		;     return -1;
 12443                                  ;lru11:
 12444                                  ;	mov	di,si
 12445                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12446                                  ;	MOV	[CS:THISSFT+2],ES
 12447                                  ;
 12448                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12449                                  ; is 0.
 12450                                  ;
 12451                                  ;	;test	word [es:di+5],8000h
 12452                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12453                                  ;	JNZ	short LRUClose
 12454                                  ;IF INSTALLED
 12455                                  ;	call	CheckShare
 12456                                  ;	JZ	short LRUDone
 12457                                  ;ENDIF
 12458                                  ;
 12459                                  ; Repeat close until ref count is 0
 12460                                  ;
 12461                                  ;LRUClose:
 12462                                  ;	push	ss
 12463                                  ;	pop	ds
 12464                                  ;	LES	DI,[THISSFT]
 12465                                  ;	cmp     word [es:di],0
 12466                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12467                                  ;	JZ	short LRUDone 		; nope, all done
 12468                                  ;	call	DOS_CLOSE
 12469                                  ;	jnc	short LRUClose		; no error => clean up
 12470                                  ;	;cmp	al,6
 12471                                  ;	cmp	al,error_invalid_handle
 12472                                  ;	jz	short LRUClose
 12473                                  ;	stc
 12474                                  ;	JMP	short LRUDead
 12475                                  ;LRUDone:
 12476                                  ;	XOR	AL,AL
 12477                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12478                                  ;
 12479                                  ;LRUDead:
 12480                                  ;	call	restore_world
 12481                                  ;	LES     DI,[CS:THISSFT]
 12482                                  ;	jnc	short LRUFCB_retn
 12483                                  ;LRUFCB_err:
 12484                                  ;	; mov	al, 23h	
 12485                                  ;	MOV	AL,error_FCB_unavailable
 12486                                  ;LRUFCB_retn:	
 12487                                  ;	retn:
 12488                                  ;
 12489                                  ;ENDIF	; LRUFCB has been rewritten below.
 12490                                  
 12491                                  ; 17/05/2019 - Retro DOS v4.0
 12492                                  ; LRUFCB for MSDOS 6.0 !
 12493                                  ;----------------------------------------------------------------------------
 12494                                  ;
 12495                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12496                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12497                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12498                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12499                                  ; optimize regeneration operations by keeping track of the current local
 12500                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12501                                  ; local SFT in the SFT Block.
 12502                                  ;
 12503                                  ; Inputs: al = 0 => Regenerate SFT operation
 12504                                  ;	    = 1 => Allocate new SFT for Open/Create
 12505                                  ;
 12506                                  ; Outputs: Carry clear
 12507                                  ;	 	es:di = Address of allocated SFT
 12508                                  ;	  	ThisSFT = Address of allocated SFT
 12509                                  ;
 12510                                  ;	  carry set if closes of net/Share files failed 
 12511                                  ;		al = error_FCB_unavailable
 12512                                  ;
 12513                                  ; Registers affected: None
 12514                                  ;
 12515                                  ;----------------------------------------------------------------------------
 12516                                  
 12517                                  ;LruFCB	PROC	NEAR
 12518                                  LRUFCB:
 12519                                  	; 17/05/2019 - Retro DOS v4.0
 12520                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12521                                  
 12522                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12523                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12524                                  
 12525                                  	; 20/01/2024
 12526                                  
 12527 00001963 06                      	push	es	; * (MSDOS 6.21)
 12528                                  	
 12529 00001964 E8FFEA                  	call	save_world
 12530                                  	
 12531                                  	;getdseg <ds>		;ds = DOSDATA
 12532 00001967 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12533                                  
 12534 0000196C 08C0                    	or	al,al		;Check if regenerate allocation
 12535 0000196E 7516                    	jnz	short lru1	;Try to find SFT to use
 12536                                  
 12537                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12538                                  	; local SFT, just return that SFT to reuse
 12539                                  
 12540                                  	; 20/01/2024
 12541                                  	;mov	di,[LocalSFT]
 12542                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12543                                  	;jz	short lru1	;invalid local SFT, find one
 12544                                  
 12545                                  	; We have found a valid local SFT. Recycle this SFT
 12546                                  
 12547 00001970 C43E[4410]              	les	di,[LocalSFT]
 12548                                  
 12549                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12550 00001974 8CC1                    	mov	cx,es
 12551 00001976 09F9                    	or	cx,di		; is address == 0?
 12552 00001978 740C                    	jz	short lru1	; invalid local SFT, find one
 12553                                  
 12554                                  gotlocalSFT:
 12555 0000197A 893E[9E05]              	mov	[THISSFT],di
 12556 0000197E 8C06[A005]              	mov	[THISSFT+2],es
 12557 00001982 F8                      	clc
 12558 00001983 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12559                                  
 12560                                  lru1:
 12561 00001986 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12562                                  	;mov	cx,[es:di+4]
 12563 0000198A 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12564                                  	;lea	di,[di+6]
 12565 0000198E 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12566                                  
 12567                                  	; We scan through all the SFTs scanning for a free one. It also 
 12568                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12569                                  	; bx = min. LRU for local SFTs
 12570                                  	; si = pos. of local SFT with min. LRU
 12571                                  	; dx = min. LRU for net/Share SFTs
 12572                                  	; bp = pos. of net/Share SFT with min. LRU
 12573                                  
 12574 00001991 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12575 00001994 89DE                    	mov	si,bx
 12576 00001996 89DA                    	mov	dx,bx
 12577 00001998 89DD                    	mov	bp,bx
 12578                                  
 12579                                  findSFT:
 12580                                  	;See if this SFT is a free one. If so, return it
 12581 0000199A 26830D00                	or	word [es:di],0
 12582                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12583 0000199E 744C                    	jz	short gotSFT	;yes, SFT is free
 12584                                  	;;cmp	word [es:di],-1
 12585                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12586 000019A0 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12587 000019A4 7446                    	jz	short gotSFT	;no, can use it
 12588                                  
 12589                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12590                                  	; used for a later regen.
 12591                                  
 12592                                  	; 16/12/2022
 12593                                  	; 08/11/2022
 12594                                  	;test	byte [es:di+6],80h
 12595 000019A6 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12596                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12597                                  	;;test	word [es:di+5],8000h
 12598                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12599 000019AB 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12600                                  
 12601                                  ;IF installed
 12602 000019AD E87E59                  	call	CheckShare	;Share present?
 12603                                  ;ENDIF
 12604 000019B0 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12605                                  
 12606                                  	;Local SFT, register its address
 12607                                  
 12608                                  	; !!HACK!!!
 12609                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12610                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12611                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12612                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12613                                  	; out the code that previously existed at label 'gotSFT'
 12614                                  
 12615                                  hackpoint:
 12616 000019B2 893E[4410]              	mov	[LocalSFT],di
 12617 000019B6 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12618                                  
 12619 000019BA 08C0                    	or	al,al		;Is operation = REGEN?
 12620 000019BC 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12621                                  
 12622                                  	;Get LRU for local files
 12623                                  	
 12624                                  	;cmp	[es:di+15h],bx
 12625 000019BE 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12626 000019C2 7306                    	jae	short lru4	;no, skip
 12627                                  
 12628                                  	;mov	bx,[es:di+15h]
 12629 000019C4 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12630 000019C8 89FE                    	mov	si,di		;store SFT position
 12631                                  lru4:
 12632                                  	;add	di,59
 12633 000019CA 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12634 000019CD E2CB                    	loop	findSFT
 12635                                  	
 12636                                  	; 20/01/2024
 12637 000019CF 49                      	dec	cx ; -1
 12638                                  
 12639                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12640                                  	; available, we will reuse it instead of net/Share LRU
 12641                                  
 12642 000019D0 89F7                    	mov	di,si
 12643                                  	;cmp	si,-1		;local SFT available?
 12644 000019D2 39CE                    	cmp	si,cx ; 20/01/2024
 12645 000019D4 7516                    	jnz	short gotSFT	;yes, return it
 12646                                  
 12647                                  	;No local SFT, see if we got a net/Share SFT
 12648                                  
 12649 000019D6 89EF                    	mov	di,bp
 12650                                  
 12651 000019D8 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12652                                  	;cmp	bp,-1		;net/Share SFT available?
 12653 000019DA 752D                    	jnz	short gotnetSFT	;yes, return it
 12654                                  noSFT:
 12655                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12656                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12657                                  	; count is not maintained properly.
 12658                                  
 12659 000019DC EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12660                                  
 12661                                  	; Handle the LRU for net/Share SFTs
 12662                                  lru5:
 12663                                  	;cmp	[es:di+15h],dx
 12664 000019DE 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12665 000019E2 73E6                    	jae	short lru4	;no, skip
 12666                                  
 12667                                  	;mov	dx,[es:di+15h]
 12668 000019E4 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12669                                  
 12670 000019E8 89FD                    	mov	bp,di		;store SFT position
 12671 000019EA EBDE                    	jmp	short lru4	;continue with next SFT
 12672                                  
 12673                                  gotSFT:
 12674 000019EC 08C0                    	or	al,al
 12675 000019EE 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12676                                  
 12677                                  	; HACK!!!
 12678                                  	; The code here differs from the code at 'hackpoint' only in the
 12679                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12680                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12681                                  	; has been commented out below and replaced by the code just above.
 12682                                  
 12683                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12684                                  ;
 12685                                  ;	or	al,al		  ;Regen?
 12686                                  ;	jnz	short notlocaluse ;yes, register it and return
 12687                                  ;
 12688                                  ;Register this SFT as a local one
 12689                                  ;
 12690                                  ;	mov	[LocalSFT],di
 12691                                  ;	mov	[LocalSFT+2],es
 12692                                  ;	jmp	gotlocalSFT	;return to caller
 12693                                  ;
 12694                                  ;notlocaluse:
 12695                                  
 12696                                  	; The caller is probably going to use this SFT for a net/Share file.
 12697                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12698                                  	; does not really know whether it is a local file or not. We
 12699                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12700                                  	; registered as a local SFT that can be recycled.
 12701                                  
 12702 000019F0 8CC0                    	mov	ax,es
 12703 000019F2 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12704 000019F6 750E                    	jne	short notinvalid
 12705 000019F8 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12706                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12707                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12708 000019FC 7508                    	jne	short notinvalid
 12709                                  zerolocalSFT:	
 12710 000019FE 31C0                    	xor	ax,ax ; 0
 12711 00001A00 A3[4410]                	mov	[LocalSFT],ax
 12712 00001A03 A3[4610]                	mov	[LocalSFT+2],ax
 12713                                  	
 12714                                  notinvalid:
 12715 00001A06 E971FF                  	jmp	gotlocalSFT
 12716                                  
 12717                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12718                                  	; Invalidate this variable i.e LocalSFT = NULL
 12719                                  
 12720                                  ;zerolocalSFT:
 12721                                  	;xor	ax,ax ; 0
 12722                                  	;mov	[LocalSFT],ax
 12723                                  	;mov	[LocalSFT+2],ax
 12724                                  	;
 12725                                  	;jmp	gotlocalSFT
 12726                                  
 12727                                  gotnetSFT:
 12728                                  	; We have an SFT that is currently net/Share. If it is going to be
 12729                                  	; used for a regen, we know it has to be a local SFT. Update the
 12730                                  	; LocalSFT variable
 12731                                  
 12732 00001A09 08C0                    	or	al,al
 12733 00001A0B 7508                    	jnz	short closenet
 12734                                  
 12735 00001A0D 893E[4410]              	mov	[LocalSFT],di
 12736 00001A11 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12737                                  closenet:
 12738 00001A15 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12739 00001A19 8C06[A005]              	mov	[THISSFT+2],es
 12740                                  
 12741                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12742                                  	; count is 0.
 12743                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12744                                  	; recycled -- no need to check for this.
 12745                                  
 12746                                  LRUClose:
 12747 00001A1D 26833D00                	cmp	word [es:di],0
 12748                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12749 00001A21 740C                    	jz	short LRUDone	; nope, all done
 12750                                  
 12751 00001A23 E80315                  	call	DOS_CLOSE
 12752 00001A26 73F5                    	jnc	short LRUClose	; no error => clean up
 12753                                  
 12754                                  	; Bugbug: I dont know why we are trying to close after we get an
 12755                                  	; error closing. Seems like we could have a potential infinite loop
 12756                                  	; here. This has to be verified.
 12757                                  
 12758 00001A28 3C06                    	cmp	al,error_invalid_handle ; 6
 12759 00001A2A 74F1                    	je	short LRUClose
 12760                                  errorbadSFT:
 12761 00001A2C F9                      	stc
 12762 00001A2D EB05                    	JMP	short LRUDead
 12763                                  LRUDone:
 12764 00001A2F 30C0                    	XOR	AL,AL
 12765 00001A31 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12766                                  
 12767                                  LRUDead:
 12768 00001A34 E818EA                  	call	restore_world		; use macro
 12769                                  	
 12770 00001A37 07                      	pop	es ; * (MSDOS 6.21)
 12771                                  
 12772                                  	;getdseg <es>
 12773 00001A38 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12774 00001A3D 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12775                                  
 12776                                  	;;retnc
 12777                                  	;jc	short LruFCB_err
 12778                                  	;retn
 12779                                  
 12780                                  	; 16/12/2022
 12781                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12782 00001A42 7302                    	jnc	short LruFCB_retn
 12783                                  	;jc	short LruFCB_err
 12784                                  	;retn
 12785                                  		
 12786                                  LruFCB_err:
 12787 00001A44 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12788                                  LruFCB_retn:
 12789 00001A46 C3                      	retn
 12790                                  	
 12791                                  ;LruFCB	ENDP
 12792                                  
 12793                                  ; 17/05/2019 - Retro DOS v4.0
 12794                                  
 12795                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12796                                  
 12797                                  ; --------------------------------------------------------------------------
 12798                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12799                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12800                                  ; to copy the name to different destinations
 12801                                  ;
 12802                                  ; Inputs: ds:si = source string
 12803                                  ;	 es:di = destination string
 12804                                  ;	 cx = length of string
 12805                                  ;
 12806                                  ; Outputs: String copied to destination
 12807                                  ;
 12808                                  ; Registers affected: cx,di,si
 12809                                  ; --------------------------------------------------------------------------
 12810                                  
 12811                                  RegenCopyName:
 12812                                  CopyName:
 12813 00001A47 AC                      	lodsb			;load character
 12814 00001A48 E8F135                  	call	UCase		; convert char to upper case
 12815                                  StuffChar2:
 12816 00001A4B AA                      	STOSB			;store converted character
 12817 00001A4C E2F9                    	LOOP	CopyName	;
 12818                                  DoneName:
 12819 00001A4E C3                      	retn
 12820                                  
 12821                                  ; --------------------------------------------------------------------------
 12822                                  
 12823                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12824                                  FCBRegen:
 12825                                  	; called from SFTFromFCB. SS already DOSDATA
 12826                                  
 12827                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12828                                  	; we do not fill, size we do no fill, position we do not fill,
 12829                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12830                                  
 12831                                  	;mov	al,[si+19h]
 12832 00001A4F 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12833                                  
 12834                                  	; We discriminate based on the first two bits in the reserved field.
 12835                                  	
 12836                                  	;test	al,80h
 12837 00001A52 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12838 00001A54 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12839                                  
 12840                                  	; The FCB is for a network or a sharing based system. At this point 
 12841                                  	; we have already closed the SFT for this guy and reconnection is 
 12842                                  	; impossible.
 12843                                  	;
 12844                                  	; Remember that he may have given us a FCB with bogus information in
 12845                                  	; it. Check to see if sharing is present or if the redir is present.
 12846                                  	; If either is around, presume that we have cycled out the FCB and 
 12847                                  	; give the hard error. Otherwise, just return with carry set.
 12848                                  
 12849 00001A56 E8D558                  	call	CheckShare		; test for sharer
 12850 00001A59 7509                    	JNZ	short RegenFail		; yep, fail this.
 12851                                  	
 12852                                  	;mov	ax,1100h
 12853 00001A5B B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12854 00001A5E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12855                                  			; Return: AL = 00h  not installed, OK to install
 12856                                  			; 01h  not installed, not OK to install
 12857                                  			; FFh  installed
 12858 00001A60 08C0                    	OR	AL,AL			; is it there?
 12859 00001A62 740C                    	JZ	short RegenDead		; no, just fail the operation
 12860                                  RegenFail:
 12861                                  	; 17/05/2019 - Retro DOS v4.0
 12862                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12863 00001A64 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12864                                  
 12865                                  	;cmp	ah,10h
 12866 00001A68 80FC10                  	cmp	AH,FCB_CLOSE
 12867 00001A6B 7403                    	jz	short RegenDead
 12868 00001A6D E88B01                  	call	FCBHardErr		; massive hard error.
 12869                                  RegenDead:
 12870 00001A70 F9                      	STC				; carry set
 12871                                  FCBRegen_retn:
 12872 00001A71 C3                      	retn
 12873                                  
 12874                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12875                                  	; so fail the operation.
 12876                                  
 12877                                  RegenNoSharing:
 12878 00001A72 E8B958                  	call	CheckShare		; Sharing around?
 12879 00001A75 75ED                    	JNZ	short RegenFail
 12880                                  	
 12881                                  	; Find an SFT for this guy.
 12882                                  	
 12883                                  	; 17/05/2019 - Retro DOS v4.0
 12884                                  
 12885                                  	; MSDOS 3.3
 12886                                  	;call	LRUFCB
 12887                                  	;jc	short FCBRegen_retn
 12888                                  	
 12889                                  	; MSDOS 6.0
 12890 00001A77 50                      	push	ax
 12891 00001A78 B000                    	mov	al,0			;indicate it is a regen operation
 12892 00001A7A E8E6FE                  	call	LRUFCB
 12893 00001A7D 58                      	pop	ax
 12894 00001A7E 72F1                    	jc	short FCBRegen_retn
 12895                                  
 12896                                  	;mov	word [es:di+2],8002h
 12897 00001A80 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12898 00001A86 243F                    	AND	AL,3Fh			; get drive number for flags
 12899 00001A88 98                      	CBW
 12900                                  	;or	ax,4000h
 12901 00001A89 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12902                                  
 12903                                  	; The bits field consists of the upper two bits (dirty and device) 
 12904                                  	; from the SFT and the low 4 bits from the open mode.
 12905                                  
 12906                                  	;mov	cl,[si+1Ah]
 12907 00001A8C 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12908 00001A8F 88CD                    	MOV	CH,CL
 12909 00001A91 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12910 00001A94 08E8                    	OR	AL,CH
 12911                                  	;and	cl,0Fh
 12912 00001A96 80E10F                  	AND	CL,access_mask		; get the mode bits
 12913                                  	;mov	[es:di+2],cl
 12914 00001A99 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12915                                  	;mov	[es:di+5],ax
 12916 00001A9D 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12917                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12918 00001AA1 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12919                                  	;mov	[es:di+31h],ax
 12920 00001AA5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12921 00001AA9 1E                      	push	ds
 12922 00001AAA 56                      	push	si
 12923 00001AAB 06                      	push	es
 12924 00001AAC 57                      	push	di
 12925 00001AAD 16                      	push	ss
 12926 00001AAE 07                      	pop	es
 12927 00001AAF BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12928                                  
 12929 00001AB2 B90800                  	MOV	CX,8
 12930 00001AB5 46                      	INC	SI			; Skip past drive byte to name in FCB
 12931                                  
 12932                                  	; MSDOS 3.3
 12933                                  ;RegenCopyName:
 12934                                  	;lodsb
 12935                                  	;call	UCase
 12936                                  	;stosb
 12937                                  	;loop	RegenCopyName
 12938                                  
 12939                                  	; MSDOS 6.0
 12940 00001AB6 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12941                                  
 12942 00001AB9 16                      	push	ss	; SS is DOSDATA
 12943 00001ABA 1F                      	pop	ds
 12944                                  
 12945                                  	;mov	byte [ATTRIB],16h
 12946 00001ABB C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12947                                  					; Must set this to something interesting
 12948                                  					; to call DEVNAME.
 12949 00001AC0 E80727                  	call	DEVNAME 		; check for device
 12950 00001AC3 5E                      	pop	si
 12951 00001AC4 07                      	pop	es
 12952 00001AC5 5E                      	pop	si
 12953 00001AC6 1F                      	pop	ds
 12954 00001AC7 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12955                                  
 12956                                  	; Device found. We can ignore disk-specific info
 12957                                  
 12958                                  	;mov	[es:di+5],bh
 12959 00001AC9 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12960                                  	;mov	byte [es:di+4],0
 12961 00001ACD 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12962                                  					; SS override
 12963                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12964 00001AD2 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12965                                  	;mov	[es:di+7],si
 12966 00001AD7 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12967                                  	;mov	[es:di+9],ds
 12968 00001ADB 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12969 00001ADF C3                      	retn				; carry is clear
 12970                                  
 12971                                  RegenDeadJ:
 12972 00001AE0 EB8E                    	JMP	short RegenDead
 12973                                  
 12974                                  	; File found. Just copy in the remaining pieces.
 12975                                  
 12976                                  RegenFileNoSharing:
 12977                                  	;mov	ax,[es:di+5]
 12978 00001AE2 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12979 00001AE6 83E03F                  	AND	AX,03Fh
 12980 00001AE9 1E                      	push	ds
 12981 00001AEA 56                      	push	si
 12982 00001AEB E8CD4E                  	call	FIND_DPB
 12983                                  	;mov	[es:di+7],si
 12984 00001AEE 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12985                                  	;mov	[es:di+9],ds
 12986 00001AF2 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12987 00001AF6 5E                      	pop	si
 12988 00001AF7 1F                      	pop	ds
 12989 00001AF8 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12990                                  					; indicator was bogus
 12991                                  	;mov	ax,[si+1Dh]
 12992 00001AFA 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12993                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12994                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12995 00001AFD 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12996                                  
 12997                                  	; MSDOS 6.0
 12998                                  
 12999                                  	; SR;
 13000                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13001                                  	; number
 13002                                  
 13003                                  	;mov	al,[si+18h]
 13004 00001B01 8A4418                  	mov	al,[si+fcb_sfn]
 13005 00001B04 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13006 00001B06 88C4                    	mov	ah,al
 13007 00001B08 D0C4                    	rol	ah,1
 13008 00001B0A D0E8                    	shr	al,1
 13009 00001B0C 08E0                    	or	al,ah
 13010 00001B0E 243F                    	and	al,03Fh		;mask off unused bits
 13011                                  	;mov	[es:di+4],al
 13012 00001B10 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13013                                  
 13014                                  	; SR;
 13015                                  	; Update the higher word of the directory sector from the FCB
 13016                                  
 13017                                  	;;mov	al,[si+18h]
 13018 00001B14 8A4418                  	mov	al,[si+fcb_sfn]
 13019 00001B17 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13020 00001B19 28E4                    	sub	ah,ah
 13021                                  	;mov	[es:di+1Dh],ax
 13022 00001B1B 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13023                                  
 13024                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13025                                  	;mov	ax,[si+1Bh]
 13026 00001B1F 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13027                                  	;mov	[es:di+0Bh],ax
 13028 00001B22 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13029                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13030                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13031 00001B26 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13032                                  	;mov	al,[si+1Fh]
 13033 00001B2A 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13034                                  	;mov  	[es:di+1Fh],al
 13035 00001B2D 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13036                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13037 00001B31 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13038                                  					; Existing FCB entries would be
 13039                                  					; flushed unnecessarily because of
 13040                                  					; check in CheckFCB of the ref_count.
 13041                                  					; July 22/85 - BAS
 13042                                  	;lea	si,[si+1]
 13043 00001B34 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13044                                  	;lea	di,[di+20h]
 13045 00001B37 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13046                                  	;mov	cx,11
 13047 00001B3A B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13048                                  	
 13049                                  	; MSDOS 6.0
 13050 00001B3D E807FF                  	call	RegenCopyName	;copy name to SFT 
 13051                                  	
 13052                                  	; MSDOS 3.3
 13053                                  ;RegenCopyName2:
 13054                                  	;lodsb
 13055                                  	;call    UCase
 13056                                  	;stosb
 13057                                  	;loop    RegenCopyName2
 13058                                  
 13059 00001B40 F8                      	clc
 13060 00001B41 C3                      	retn
 13061                                  
 13062                                  ; 17/05/2019 - Retro DOS v4.0
 13063                                  
 13064                                  ;**	BlastSFT - FIll SFT with Garbage
 13065                                  ; --------------------------------------------------------------------------
 13066                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13067                                  ;	various garbage values to put into the SFT.  I don't know why,
 13068                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13069                                  ;	necessary to show that the SFT is free after filling it.
 13070                                  ;
 13071                                  ;	ENTRY	(es:di) = address of SFT
 13072                                  ;		(al) = fill character
 13073                                  ;	EXIT	(ax) = -1
 13074                                  ;		'C' clear
 13075                                  ;	USES	AX, CX, Flags
 13076                                  
 13077                                  BlastSFT:
 13078 00001B42 57                      	push	di
 13079                                  	;mov	cx,53 ; MSDOS 3.3
 13080                                  	;mov	cx,59 ; MSDOS 6.0
 13081 00001B43 B93B00                  	mov	cx,SF_ENTRY.size
 13082 00001B46 F3AA                    	rep	stosb
 13083 00001B48 5F                      	pop	di
 13084 00001B49 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13085 00001B4B 268905                  	mov	[es:di],ax
 13086                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13087                                  	;mov	[es:di+15h],ax
 13088 00001B4E 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13089 00001B52 48                      	dec	ax	; -1					    ;
 13090                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13091 00001B53 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13092                                  BlastSFT_retn:
 13093 00001B57 C3                      	retn				; return with 'C' clear     ;
 13094                                  
 13095                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13096                                  ; --------------------------------------------------------------------------
 13097                                  ;
 13098                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13099                                  ;   regenerated.
 13100                                  ;
 13101                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13102                                  ;		AL is SFT index
 13103                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13104                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13105                                  ;   Registers modified: AX and BX
 13106                                  ;
 13107                                  ; --------------------------------------------------------------------------
 13108                                  
 13109                                  	; 21/01/2024
 13110                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13111                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13112                                  CheckFCB:
 13113                                  		
 13114                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13115                                  
 13116                                  	; MSDOS 3.3
 13117                                  
 13118                                  	; LES	DI,[CS:SFTFCB]
 13119                                  
 13120                                  	; MSDOS 6.0
 13121                                  	
 13122                                  	; SR;
 13123                                  	; We check if the given FCB is for a local file. If so, we return a 
 13124                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13125                                  
 13126                                  	;test	byte [si+19h],0C0h
 13127 00001B58 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13128 00001B5C 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13129 00001B5E 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13130                                  
 13131                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13132                                  	;cmp	[es:di+4],al
 13133 00001B63 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13134 00001B67 723C                    	JC	short BadSFT
 13135                                  	;;mov	bl,53 ; MSDOS 3.3
 13136                                  	;mov	bl,59 ; MSDOS 6.0
 13137 00001B69 B33B                    	MOV	BL,SF_ENTRY.size
 13138 00001B6B F6E3                    	MUL	BL
 13139                                  	;lea	di,[di+6]
 13140 00001B6D 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13141 00001B70 01C7                    	ADD	DI,AX
 13142                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13143 00001B72 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13144                                  	;cmp	[es:di+31h],ax
 13145 00001B76 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13146 00001B7A 7529                    	JNZ	short BadSFT		; must match process
 13147 00001B7C 26833D00                	cmp	word [es:di],0
 13148                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13149 00001B80 7423                    	JZ	short BadSFT		; must also be in use
 13150                                  	;mov	al,[si+19h]
 13151 00001B82 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13152                                  	;test	al,80h
 13153 00001B85 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13154 00001B87 7428                    	JZ	short CheckNoShare	; No. try local or device
 13155                                  
 13156                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13157                                  	; FCBSHARE is a superset of FCBNETWORK.
 13158                                  
 13159 00001B89 50                      	PUSH	AX
 13160                                  	;and	al,0C0h
 13161 00001B8A 24C0                    	AND	AL,FCBMASK
 13162                                  	;cmp	al,0C0h
 13163 00001B8C 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13164 00001B8E 58                      	POP	AX
 13165 00001B8F 7516                    	JNZ	short CheckNet		; yes
 13166                                  ;
 13167                                  ;----- In share support -----
 13168                                  ;
 13169                                  	;call	far [cs:JShare+(11*4)]
 13170 00001B91 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13171 00001B96 720D                    	JC	short BadSFT
 13172                                  
 13173                                  ; 21/01/2024
 13174                                  %if 0
 13175                                  	JMP	SHORT CheckD
 13176                                  ;
 13177                                  ;----- End in share support -----
 13178                                  ;
 13179                                  	; 09/11/2022
 13180                                  	; (There is not any procedure/sub
 13181                                  	;  which calls or jumps to CheckFirClus here)
 13182                                  	;;;
 13183                                  CheckFirClus:
 13184                                  	;cmp     bx,[es:di+0Bh]
 13185                                  	; 07/12/2022
 13186                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13187                                  	JNZ	short BadSFT
 13188                                  	;;;
 13189                                  %endif
 13190                                  
 13191                                  CheckD: 
 13192 00001B98 243F                    	AND	AL,3Fh
 13193                                  	;mov	ah,[es:di+5]
 13194 00001B9A 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13195 00001B9E 80E43F                  	AND	AH,3Fh
 13196 00001BA1 38C4                    	CMP	AH,AL
 13197                                  	; 16/12/2022
 13198 00001BA3 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13199                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13200                                  	;jnz	short BadSFT
 13201                                  ;CheckD_retn:
 13202                                  	;retn
 13203                                  BadSFT: 
 13204 00001BA5 F9                      	STC
 13205 00001BA6 C3                      	retn
 13206                                  				
 13207                                  CheckNet:
 13208                                  	; 17/05/2019 - Retro DOS v4.0
 13209                                  	
 13210                                  ;----- In net support -----
 13211                                  
 13212                                  	; MSDOS 3.3
 13213                                  	;;mov	ax,[si+1Ah]
 13214                                  	;mov	ax,[si+fcb_net_handle]
 13215                                  	;;cmp	ax,[es:di+1Dh]
 13216                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13217                                  	;jnz	short BadSFT
 13218                                  	;;cmp	ax,[es:di+19h]
 13219                                  	;cmp	ax,[ES:DI+sf_netid]
 13220                                  	;jnz     short BadSFT
 13221                                  	;;mov	ax,[si+1Eh]
 13222                                  	;mov	ax,[si+fcb_l_attr]
 13223                                  	;;cmp	ax,[es:di+1Bh]
 13224                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13225                                  	;jnz     short BadSFT
 13226                                  
 13227                                  	; MSDOS 6.0
 13228                                  	;mov	ax,[si+1Ch]
 13229 00001BA7 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13230                                  	; 09/11/2022
 13231                                  	;cmp	ax,[es:di+0Bh] 
 13232 00001BAA 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13233 00001BAE 75F5                    	JNZ	short BadSFT
 13234                                  
 13235                                  ;----- END In net support -----
 13236                                  
 13237                                  CheckNet_retn:
 13238 00001BB0 C3                      	retn
 13239                                  
 13240                                  CheckNoShare:
 13241                                  
 13242                                  ; 16/12/2022
 13243                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13244                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13245                                  ;	;test	al,40h
 13246                                  ;	test	AL,FCBDEVICE		; Device?
 13247                                  ;	;jnz	short $+2 ; 09/11/2022
 13248                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13249                                  
 13250                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13251                                  	;;mov	bx,[si+1Dh]
 13252                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13253                                  	;;cmp	bx,[es:di+1Dh]
 13254                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13255                                  	;jnz	short BadSFT
 13256                                  	;;mov	bl,[si+1Fh]
 13257                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13258                                  	;;cmp	bl,[es:di+1Fh]
 13259                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13260                                  	;jnz	short BadSFT
 13261                                  	;;mov	bl,[si+1Ah]
 13262                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13263                                  	;;mov	bh,[es:di+5]
 13264                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13265                                  	;xor	bh,bl
 13266                                  	;and	bh,0C0h
 13267                                  	;jnz	short BadSFT
 13268                                  	;;xor	bl,[es:di+2]
 13269                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13270                                  	;and	bl,0Fh
 13271                                  	;jnz	short BadSFT
 13272                                  	;push	di
 13273                                  	;push	si
 13274                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13275                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13276                                  	;;lea	si,[si+1]
 13277                                  	;LEA	SI,[SI+SYS_FCB.name]
 13278                                  	;;mov	cx,11
 13279                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13280                                  	;repe	cmpsb
 13281                                  	;pop	si
 13282                                  	;pop	di
 13283                                  	;jnz	short BadSFT
 13284                                  	;;mov	bx,[si+1Bh]
 13285                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13286                                  	;jmp	short CheckFirClus
 13287                                  
 13288                                  	; MSDOS 6.0
 13289                                  
 13290                                  	; SR;
 13291                                  	; The code below to match a local FCB with its SFT can no longer be
 13292                                  	; used. We just return a no-match status. This check is done right
 13293                                  	; at the top.
 13294                                  
 13295                                  CheckNoShareDev:
 13296                                  	;mov	bx,[si+1Ah]
 13297 00001BB1 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13298                                  	;cmp	bx,[es:di+7]
 13299 00001BB4 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13300 00001BB8 75EB                    	JNZ	short BadSFT
 13301                                  	;mov	bx,[si+1Ch]
 13302 00001BBA 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13303                                  	;cmp	bx,[es:di+9]
 13304 00001BBD 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13305 00001BC1 75E2                    	JNZ	short BadSFT
 13306 00001BC3 EBD3                    	JMP	short CheckD
 13307                                  
 13308                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13309                                  ;----------------------------------------------------------------------------
 13310                                  ;
 13311                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13312                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13313                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13314                                  ;	with PID
 13315                                  ;
 13316                                  ;   Inputs:	DS:SI point to FCB
 13317                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13318                                  ;		Carry clear -> OK ES:DI -> SFT
 13319                                  ;		Carry set -> error in ax
 13320                                  ;   Registers modified: ES,DI, AX
 13321                                  ;
 13322                                  ;----------------------------------------------------------------------------
 13323                                  
 13324                                  SFTFromFCB:
 13325                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13326                                  
 13327                                  	; 17/05/2019 - Retro DOS v4.0
 13328                                  
 13329 00001BC5 50                      	push	ax
 13330 00001BC6 53                      	push	bx
 13331                                  	;mov	al,[si+18h]
 13332 00001BC7 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13333 00001BCA E88BFF                  	call	CheckFCB
 13334 00001BCD 5B                      	pop	bx
 13335 00001BCE 58                      	pop	ax
 13336                                  	;MOV	[CS:THISSFT],DI		; SS override
 13337                                  	;MOV	[CS:THISSFT+2],ES
 13338 00001BCF 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13339 00001BD4 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13340 00001BD9 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13341                                  	
 13342                                  	; 09/11/2022 (MSDOS 5.0)
 13343                                  	; 31/05/2019
 13344 00001BDB 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13345 00001BDC E887E8                  	call	save_world
 13346 00001BDF E86DFE                  	call	FCBRegen
 13347 00001BE2 E86AE8                  	call	restore_world		; use macro restore world
 13348 00001BE5 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13349                                  
 13350                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13351 00001BE6 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13352 00001BEA 72C4                    	jc	short CheckNet_retn
 13353                                  
 13354                                  Set_SFT: 
 13355                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13356 00001BEC 36C43E[9E05]            	les	di,[ss:THISSFT]
 13357                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13358 00001BF1 36FF36[3C03]            	push	word [ss:PROC_ID]
 13359                                  	;pop	word [es:di+31h]
 13360 00001BF6 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13361 00001BFA C3                      	retn				; carry is clear
 13362                                  
 13363                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13364                                  ;----------------------------------------------------------------------------
 13365                                  ;
 13366                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13367                                  ;	unavailable FCB.
 13368                                  ;
 13369                                  ;   Inputs:	none.
 13370                                  ;   Outputs:	none.
 13371                                  ;   Registers modified: all
 13372                                  ;
 13373                                  ;----------------------------------------------------------------------------
 13374                                  
 13375                                  FCBHardErr:
 13376                                  	; 17/05/2019 - Retro DOS v4.0
 13377 00001BFB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13378                                  	;
 13379                                  	;mov	ax,23h
 13380 00001C00 B82300                  	MOV	AX,error_FCB_unavailable
 13381                                  	;;mov	byte [cs:ALLOWED],8
 13382                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13383 00001C03 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13384                                  	
 13385                                  	;LES	BP,[CS:THISDPB]
 13386 00001C09 26C42E[8A05]            	les	bp,[es:THISDPB]
 13387                                  	
 13388 00001C0E BF0100                  	MOV	DI,1			; Fake some registers
 13389 00001C11 89F9                    	MOV	CX,DI
 13390                                  	;mov	dx,[es:bp+0Bh]
 13391 00001C13 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13392 00001C17 E8E036                  	call	HARDERR
 13393 00001C1A F9                      	STC
 13394 00001C1B C3                      	retn
 13395                                  
 13396                                  ;============================================================================
 13397                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13398                                  ;============================================================================
 13399                                  ; 21/07/2018 - Retro DOS v3.0
 13400                                  ; 17/05/2019 - Retro DOS v4.0
 13401                                  
 13402                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13403                                  ;
 13404                                  ;	GetRR
 13405                                  ;	GetExtent
 13406                                  ;	SetExtent
 13407                                  ;	GetExtended
 13408                                  ;	GetRecSize
 13409                                  ;	FCBIO
 13410                                  ;	$FCB_OPEN
 13411                                  ;	$FCB_CREATE
 13412                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13413                                  ;	$FCB_RANDOM_READ_BLOCK
 13414                                  ;	$FCB_SEQ_READ
 13415                                  ;	$FCB_SEQ_WRITE
 13416                                  ;	$FCB_RANDOM_READ
 13417                                  ;	$FCB_RANDOM_WRITE
 13418                                  ;
 13419                                  ;	Revision history:
 13420                                  ;
 13421                                  ;		Created: ARR 4 April 1983
 13422                                  ;			 MZ  6 June  1983 completion of functions
 13423                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13424                                  ;				  times.  Change so successive closes work by
 13425                                  ;				  always returning OK.	Also, detect I/O to
 13426                                  ;				  already closed FCB and return EOF.
 13427                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13428                                  ;				  out of sft into FCB for reconnection
 13429                                  ;
 13430                                  ;	    A000   version 4.00	Jan. 1988
 13431                                  
 13432                                  ; Defintions for FCBOp flags
 13433                                  
 13434                                  RANDOM	equ 2				; random operation
 13435                                  FCBREAD equ 4				; doing a read
 13436                                  BLOCK	equ 8				; doing a block I/O
 13437                                  
 13438                                  ;Break <GetRR - return the random record field in DX:AX>
 13439                                  ;---------------------------------------------------------------------------
 13440                                  ;
 13441                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13442                                  ;	from the FCB pointed to by DS:SI
 13443                                  ;
 13444                                  ;   Inputs:	DS:SI point to an FCB
 13445                                  ;		BX has record size
 13446                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13447                                  ;   Registers modified: none
 13448                                  ;---------------------------------------------------------------------------
 13449                                  
 13450                                  GetRR:
 13451                                  	;mov	ax,[si+21h]
 13452 00001C1C 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13453                                  	;mov	dx,[si+23h]
 13454 00001C1F 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13455 00001C22 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13456 00001C25 7202                    	JB	short GetRRBye
 13457                                  GetExtent_bye:	; 21/01/2024
 13458 00001C27 30F6                    	XOR	DH,DH
 13459                                  GetRRBye:
 13460 00001C29 C3                      	retn
 13461                                  
 13462                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13463                                  ;---------------------------------------------------------------------------
 13464                                  ;
 13465                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13466                                  ;	NR fields in the FCB.
 13467                                  ;
 13468                                  ;   Inputs:	DS:SI - point to FCB
 13469                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13470                                  ;   Registers modified: none
 13471                                  ;---------------------------------------------------------------------------
 13472                                  
 13473                                  GetExtent:
 13474                                  	;mov	al,[si+20h]
 13475 00001C2A 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13476                                  	;mov	dx,[si+0Ch]
 13477 00001C2D 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13478 00001C30 D0E0                    	SHL	AL,1
 13479 00001C32 D1EA                    	SHR	DX,1
 13480 00001C34 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13481 00001C36 88D4                    	MOV	AH,DL
 13482 00001C38 88F2                    	MOV	DL,DH
 13483                                  	; 21/01/2024
 13484                                  	;XOR	DH,DH
 13485                                  	;retn
 13486 00001C3A EBEB                    	jmp	short GetExtent_bye
 13487                                  
 13488                                  ;Break <SetExtent - update the extent/NR field>
 13489                                  ;---------------------------------------------------------------------------
 13490                                  ;
 13491                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13492                                  ;	fields
 13493                                  ;
 13494                                  ;   Inputs:	DS:SI point to FCB
 13495                                  ;		DX:AX is a record location in file
 13496                                  ;   Outputs:	Extent/NR fields are filled in
 13497                                  ;   Registers modified: CX
 13498                                  ;---------------------------------------------------------------------------
 13499                                  
 13500                                  SetExtent:
 13501 00001C3C 50                      	push	ax
 13502 00001C3D 52                      	push	dx
 13503 00001C3E 89C1                    	MOV	CX,AX
 13504 00001C40 247F                    	AND	AL,7FH			; next rec field
 13505                                  	;mov	[si+20h],al
 13506 00001C42 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13507 00001C45 80E180                  	AND	CL,80H			; save upper bit
 13508 00001C48 D1E1                    	SHL	CX,1
 13509 00001C4A D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13510 00001C4C 88E8                    	MOV	AL,CH
 13511 00001C4E 88D4                    	MOV	AH,DL
 13512                                  	;mov	[si+0Ch], ax
 13513 00001C50 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13514 00001C53 5A                      	pop	dx
 13515 00001C54 58                      	pop	ax
 13516 00001C55 C3                      	retn
 13517                                  
 13518                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13519                                  ;---------------------------------------------------------------------------
 13520                                  ;
 13521                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13522                                  ;
 13523                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13524                                  ;   Outputs:	DS:SI point to the FCB part
 13525                                  ;		zeroflag set if not extended fcb
 13526                                  ;   Registers modified: SI
 13527                                  ;---------------------------------------------------------------------------
 13528                                  
 13529                                  GetExtended:
 13530 00001C56 89D6                    	MOV	SI,DX			; point to Something
 13531 00001C58 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13532 00001C5B 7503                    	JNZ	short GetBye		; not there
 13533 00001C5D 83C607                  	ADD	SI,7			; point to FCB
 13534                                  GetBye:
 13535 00001C60 39D6                    	CMP	SI,DX			; set condition codes
 13536                                  getextd_retn:
 13537 00001C62 C3                      	retn
 13538                                  
 13539                                  ;Break <GetRecSize - return in BX the FCB record size>
 13540                                  ;---------------------------------------------------------------------------
 13541                                  ;
 13542                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13543                                  ;
 13544                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13545                                  ;   Outputs:	BX contains the record size
 13546                                  ;   Registers modified: None
 13547                                  ;---------------------------------------------------------------------------
 13548                                  
 13549                                  	; 22/01/2024
 13550                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13551                                  GetRecSize:
 13552                                  	;mov	bx,[si+0Eh]
 13553 00001C63 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13554 00001C66 09DB                    	OR	BX,BX			; is it nul?
 13555                                  	;jz	short getextd_retn
 13556                                  	; 22/01/2024 (BugFix)
 13557 00001C68 75F8                    	jnz	short getextd_retn
 13558                                  	;MOV	BX,128			; use default size
 13559 00001C6A B380                    	mov	bl,128
 13560                                  	;mov	[si+0Eh],bx
 13561 00001C6C 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13562 00001C6F C3                      	retn
 13563                                  
 13564                                  ;BREAK <FCBIO - do internal FCB I/O>
 13565                                  ;---------------------------------------------------------------------------
 13566                                  ;
 13567                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13568                                  ;
 13569                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13570                                  ;		DS:DX point to FCB
 13571                                  ;		CX may have count of number of records to xfer
 13572                                  ;   Outputs:	AL has error code
 13573                                  ;   Registers modified: all
 13574                                  ;---------------------------------------------------------------------------
 13575                                  
 13576                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13577                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13578                                  FCBIO:
 13579                                  
 13580                                  FEOF	EQU	1
 13581                                  FTRIM	EQU	2
 13582                                  
 13583                                  %define	FCBErr	byte [bp-1]  ; byte	
 13584                                  %define	cRec	word [bp-3]  ; word	
 13585                                  ;%define RecPos	word [bp-7]  ; dword
 13586                                  %define RecPosL	word [bp-7]  ; word
 13587                                  %define RecPosH	word [bp-5]  ; word
 13588                                  %define	RecSize	word [bp-9]  ; word
 13589                                  ;%define bPos	word [bp-13] ; dword
 13590                                  %define bPosL	word [bp-13] ; word
 13591                                  %define bPosH	word [bp-11] ; word
 13592                                  %define cByte	word [bp-15] ; word	
 13593                                  %define cResult word [bp-17] ; word	
 13594                                  %define	cRecRes	word [bp-19] ; word
 13595                                  %define	FCBOp	byte [bp-20] ; byte
 13596                                  
 13597                                  	;Enter
 13598                                  
 13599 00001C70 55                      	push	bp
 13600 00001C71 89E5                    	mov	bp,sp
 13601 00001C73 83EC14                  	sub	sp,20
 13602                                  	;mov	[bp-20],al
 13603 00001C76 8846EC                  	MOV	FCBOp,AL
 13604                                  	;mov	byte [bp-1],0
 13605 00001C79 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13606 00001C7D E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 13607                                  	;test	byte [bp-20],8
 13608 00001C80 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13609 00001C84 7503                    	JNZ	short GetPos
 13610 00001C86 B90100                  	MOV	CX,1			;	cRec = 1;
 13611                                  GetPos:
 13612                                  	;mov	[bp-3],cx
 13613 00001C89 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13614 00001C8C E89BFF                  	call	GetExtent		;   RecPos = GetExtent ();
 13615 00001C8F E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13616                                  	;mov	[bp-9],bx
 13617 00001C92 895EF7                  	MOV	RecSize,BX
 13618                                  	;test	byte [bp-20],2
 13619 00001C95 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13620 00001C99 7403                    	JZ	short GetRec
 13621 00001C9B E87EFF                  	call	GetRR			;	RecPos = GetRR ();
 13622                                  GetRec:
 13623                                  	;mov	[bp-7],ax
 13624 00001C9E 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13625                                  	;mov	[bp-5],dx
 13626 00001CA1 8956FB                  	MOV	RecPosH,DX
 13627 00001CA4 E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 13628                                  	;mov	ax,[bp-5]
 13629 00001CA7 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13630 00001CAA F7E3                    	MUL	BX
 13631 00001CAC 89C7                    	MOV	DI,AX
 13632                                  	;mov	ax,[bp-7]
 13633 00001CAE 8B46F9                  	MOV	AX,RecPosL
 13634 00001CB1 F7E3                    	MUL	BX
 13635 00001CB3 01FA                    	ADD	DX,DI
 13636                                  	;mov	[bp-13],ax
 13637 00001CB5 8946F3                  	MOV	bPosL,AX
 13638                                  	;mov	[bp-11],dx
 13639 00001CB8 8956F5                  	MOV	bPosH,DX
 13640                                  	;mov	ax,[bp-3]
 13641 00001CBB 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13642 00001CBE F7E3                    	MUL	BX
 13643                                  	;mov	[bp-15],ax
 13644 00001CC0 8946F1                  	MOV	cByte,AX
 13645                                  
 13646                                  ;hkn; 	SS override
 13647 00001CC3 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13648 00001CC8 83D200                  	ADC	DX,0
 13649 00001CCB 7419                    	JZ	short DoOper
 13650                                  	;mov	byte [bp-1],2
 13651 00001CCD C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13652                                  
 13653                                  ;hkn; 	SS override
 13654 00001CD1 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13655 00001CD5 F7D8                    	NEG	AX
 13656 00001CD7 7501                    	JNZ	short DoDiv
 13657 00001CD9 48                      	DEC	AX
 13658                                  DoDiv:
 13659 00001CDA 31D2                    	XOR	DX,DX
 13660 00001CDC F7F3                    	DIV	BX
 13661                                  	;mov	[bp-3],ax
 13662 00001CDE 8946FD                  	MOV	cRec,AX
 13663 00001CE1 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13664                                  	;mov	[bp-15],ax
 13665 00001CE3 8946F1                  	MOV	cByte,AX		;	}
 13666                                  DoOper:
 13667 00001CE6 31DB                    	XOR	BX,BX
 13668                                  	;mov	[bp-17],bx
 13669 00001CE8 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13670                                  	;cmp	[bp-15],bx
 13671 00001CEB 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13672 00001CEE 7506                    	JNZ	short DoGetExt
 13673                                  	;test	byte [bp-1],2
 13674 00001CF0 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13675                                  	;JZ	short DoGetExt
 13676                                  	;JMP	short SkipOp
 13677                                  	; 16/12/2022
 13678 00001CF4 7576                    	jnz	short SkipOp
 13679                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13680                                  	;JZ	short DoGetExt
 13681                                  	;JMP	short SkipOp
 13682                                  DoGetExt:
 13683 00001CF6 E8CCFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13684 00001CF9 730F                    	JNC	short ContinueOp
 13685                                  FCBDeath:
 13686 00001CFB E85CE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13687                                  	;mov	word [bp-19],0
 13688 00001CFE C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13689                                  	;mov	byte [bp-1],1
 13690 00001D03 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13691 00001D07 E9EF00                  	JMP	FCBSave 		; bam!
 13692                                  ContinueOp:
 13693                                  	;mov	ax,[si+10h]
 13694 00001D0A 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13695                                  	;mov	[es:di+11h],ax
 13696 00001D0D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13697                                  	;mov	ax,[si+12h]
 13698 00001D11 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13699                                  	;mov	[es:di+13h],ax
 13700 00001D14 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13701                                  	;mov	ax,[bp-13]
 13702 00001D18 8B46F3                  	MOV	AX,bPosL
 13703                                  	;mov	dx,[bp-11]
 13704 00001D1B 8B56F5                  	MOV	DX,bPosH
 13705                                  	;mov	[es:di+15h],ax
 13706 00001D1E 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13707                                  	;xchg	dx,[es:di+17h]
 13708 00001D22 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13709 00001D26 52                      	PUSH	DX			; save away Open age.
 13710                                  	;mov	cx,[bp-15]
 13711 00001D27 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13712                                  
 13713                                  ;hkn; DOS_Read is in DOSCODE
 13714 00001D2A BF[D032]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13715                                  	;test	byte [bp-20],4
 13716 00001D2D F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13717 00001D31 7503                    	JNZ	short DoContext
 13718                                  
 13719                                  ;hkn; DOS_Write is in DOSCODE
 13720 00001D33 BF[F934]                	MOV	DI,DOS_WRITE
 13721                                  DoContext:
 13722 00001D36 55                      	push	bp
 13723 00001D37 1E                      	push	ds
 13724 00001D38 56                      	push	si
 13725                                  
 13726                                  ;hkn; SS is DOSDATA
 13727 00001D39 16                      	push	ss
 13728 00001D3A 1F                      	pop	ds
 13729                                  
 13730                                  ;; Fix for disk full
 13731 00001D3B FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13732                                  	
 13733 00001D3D 5E                      	pop	si
 13734 00001D3E 1F                      	pop	ds
 13735 00001D3F 5D                      	pop	bp
 13736 00001D40 72B9                    	JC	short FCBDeath
 13737                                  	
 13738 00001D42 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13739 00001D48 740A                    	JZ	short NODSKFULL
 13740 00001D4A 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13741                                  	;mov	byte [bp-1],1 
 13742 00001D50 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13743                                  NODSKFULL:
 13744                                  ;; Fix for disk full
 13745                                  	;mov	[bp-17],cx
 13746 00001D54 894EEF                  	MOV	cResult,CX
 13747 00001D57 E83BFB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13748                                  	;pop	word [es:di+17h]	
 13749 00001D5A 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13750                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13751                                  	;mov	ax,[es:di+11h]
 13752 00001D5E 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13753                                  	;mov	[si+10h],ax
 13754 00001D62 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13755                                  	;mov	ax,[es:di+13h]
 13756 00001D65 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13757                                  	;mov	[si+12h],ax
 13758 00001D69 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13759                                  					;	}
 13760                                  SkipOp:
 13761                                  	;mov	ax,[bp-17]
 13762 00001D6C 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13763 00001D6F 31D2                    	XOR	DX,DX
 13764                                  	;div	word [bp-9]
 13765 00001D71 F776F7                  	DIV	RecSize
 13766                                  	;mov	[bp-19],ax
 13767 00001D74 8946ED                  	MOV	cRecRes,AX
 13768                                  	;add	[bp-7],ax
 13769 00001D77 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13770                                  	;adc	word [bp-5],0
 13771 00001D7A 8356FB00                	ADC	RecPosH,0
 13772                                  
 13773                                  ; If we have not gotten the expected number of records, we signal an EOF
 13774                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13775                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13776                                  ; do we.
 13777                                  
 13778                                  	;cmp	ax,[bp-3]
 13779 00001D7E 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13780 00001D81 7411                    	JZ	short TryBlank
 13781                                  	;test	byte [bp-20],4
 13782 00001D83 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13783 00001D87 7507                    	JNZ	short SetEOF
 13784                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13785                                  	; MSDOS 3.3
 13786                                  	;;test	word [es:di+5],80h
 13787                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13788                                  	;JNZ	short TryBlank
 13789                                  	; MSDOS 5.0 & MSDOS 6.0
 13790                                  	;test	byte [es:di+5],80h
 13791 00001D89 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13792 00001D8E 7504                    	jnz	short TryBlank
 13793                                  
 13794                                  SetEOF:
 13795                                  	;mov	byte [bp-1],1
 13796 00001D90 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13797                                  TryBlank:				;
 13798 00001D94 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13799 00001D96 7426                    	JZ	short SetExt
 13800                                  	;add	word [bp-7],1
 13801 00001D98 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13802                                  	;adc	word [bp-5],0
 13803 00001D9C 8356FB00                	ADC	RecPosH,0
 13804                                  	;test	byte [bp-20],4
 13805 00001DA0 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13806 00001DA4 7418                    	JZ	short SetExt
 13807                                  	;inc	word [bp-19]
 13808 00001DA6 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13809                                  	;mov	byte [bp-1],3
 13810 00001DA9 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13811                                  	;mov	cx,[bp-9]
 13812 00001DAD 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13813 00001DB0 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13814 00001DB2 30C0                    	XOR	AL,AL
 13815                                  ;hkn; 	SS override
 13816 00001DB4 36C43E[2C03]            	les     di,[ss:DMAADD]
 13817                                  	;add	di,[bp-17]
 13818 00001DB9 037EEF                  	ADD	DI,cResult
 13819 00001DBC F3AA                    	REP	STOSB			;   }	}
 13820                                  SetExt:
 13821                                  	;mov	dx,[bp-5]
 13822 00001DBE 8B56FB                  	MOV	DX,RecPosH
 13823                                  	;mov	ax,[bp-7]
 13824 00001DC1 8B46F9                  	MOV	AX,RecPosL
 13825                                  	;test	byte [bp-20],2
 13826 00001DC4 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13827 00001DC8 7406                    	JZ	short DoSetExt
 13828                                  	;test	byte [bp-20],8
 13829 00001DCA F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13830 00001DCE 7403                    	JZ	short TrySetRR
 13831                                  DoSetExt:
 13832 00001DD0 E869FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13833                                  TrySetRR:
 13834                                  	;test	byte [bp-20],8
 13835 00001DD3 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13836 00001DD7 740F                    	JZ	short TryReturn
 13837                                  	;mov	[si+21h],ax
 13838 00001DD9 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13839                                  	;mov	[si+23h],dl
 13840 00001DDC 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13841                                  	;cmp	word [si+0Eh],64
 13842 00001DDF 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13843 00001DE3 7303                    	JAE	short TryReturn
 13844                                  	;mov	[si+24h],dh
 13845 00001DE5 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13846                                  TryReturn: 
 13847                                  	;test	byte [bp-20],4
 13848 00001DE8 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13849 00001DEC 750B                    	JNZ	short FCBSave
 13850 00001DEE 1E                      	push	ds			;	FCB->FDate = date;
 13851 00001DEF E803ED                  	call	DATE16			;	FCB->FTime = time;
 13852 00001DF2 1F                      	pop	ds
 13853                                  	;mov	[si+14h],ax
 13854 00001DF3 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13855                                  	;mov	[si+16h],dx
 13856 00001DF6 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13857                                  FCBSave: 
 13858                                  	;test	byte [bp-20],8
 13859 00001DF9 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13860 00001DFD 7409                    	jz	short DoReturn
 13861                                  	;mov	cx,[bp-19]
 13862 00001DFF 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13863 00001E02 E880E6                  	call    Get_User_Stack
 13864                                  	;mov	[si+4],cx
 13865 00001E05 894C04                  	MOV	[SI+user_env.user_CX],CX
 13866                                  DoReturn:
 13867                                  	;mov	al,[bp-1]
 13868 00001E08 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13869                                  	;Leave	
 13870 00001E0B 89EC                    	mov     sp,bp
 13871 00001E0D 5D                      	pop     bp
 13872 00001E0E C3                      	retn
 13873                                  
 13874                                  ; 22/07/2018 - Retro DOS v3.0
 13875                                  
 13876                                  ;Break <$FCB_Open - open an old-style FCB>
 13877                                  ;---------------------------------------------------------------------------
 13878                                  ;
 13879                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13880                                  ;	for us and asked to have the rest filled in.
 13881                                  ;
 13882                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13883                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13884                                  ;		FCB has the following fields filled in:
 13885                                  ;		    Time/Date Extent/NR Size
 13886                                  ;---------------------------------------------------------------------------
 13887                                  
 13888                                  _$FCB_OPEN:			; System call 15
 13889                                  
 13890 00001E0F B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13891                                  
 13892                                  ;hkn; DOS_Open is in DOSCODE
 13893 00001E12 B9[702B]                	MOV	CX,DOS_OPEN
 13894                                  
 13895                                  ; The following is common code for Creation and openning of FCBs. AX is
 13896                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13897                                  ; the FCB
 13898                                  
 13899                                  DoAccess:
 13900 00001E15 1E                      	push	ds
 13901 00001E16 52                      	push	dx
 13902 00001E17 51                      	push	cx
 13903 00001E18 50                      	push	ax			; save FCB pointer away
 13904                                  
 13905                                  ;hkn; 	OpenBuf is in DOSDATA
 13906 00001E19 BF[BE03]                	MOV	DI,OPENBUF
 13907 00001E1C E8E34C                  	call	TransFCB		; crunch the fcb
 13908 00001E1F 58                      	pop	ax
 13909 00001E20 59                      	pop	cx
 13910 00001E21 5A                      	pop	dx
 13911 00001E22 1F                      	pop	ds			; get fcb
 13912 00001E23 7303                    	JNC	short FindFCB		; everything seems ok
 13913                                  FCBOpenErr:
 13914                                  	; AL has error code
 13915 00001E25 E932E8                  	jmp	FCB_RET_ERR
 13916                                  FindFCB:
 13917 00001E28 E82BFE                  	call	GetExtended		; DS:SI will point to FCB
 13918                                  
 13919                                  	; 17/05/2019 - Retro DOS v4.0
 13920                                  
 13921                                  	; MSDOS 3.3
 13922                                  	;call	LRUFCB
 13923                                  	;jc	short HardMessage
 13924                                  
 13925                                  	; MSDOS 6.0
 13926 00001E2B 50                      	push	ax
 13927 00001E2C B001                    	mov	al,1			;indicate Open/Create operation
 13928 00001E2E E832FB                  	call	LRUFCB			; get a sft entry (no error)
 13929 00001E31 58                      	pop	ax
 13930 00001E32 722A                    	jc	short HardMessage
 13931                                  	
 13932                                  	;mov	word [es:di+2],8000h
 13933 00001E34 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13934 00001E3A 1E                      	push	ds
 13935 00001E3B 56                      	push	si	
 13936 00001E3C 53                      	push	bx			; save fcb pointer
 13937 00001E3D 89CE                    	MOV	SI,CX
 13938                                  
 13939                                  ;hkn; SS is DOSDATA
 13940 00001E3F 16                      	push	ss
 13941 00001E40 1F                      	pop	ds			    ; let DOS_Open see variables
 13942 00001E41 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13943 00001E43 5B                      	pop	bx
 13944 00001E44 5E                      	pop	si
 13945 00001E45 1F                      	pop	ds			; get fcb
 13946                                  
 13947                                  ;hkn; SS override
 13948 00001E46 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13949 00001E4B 7318                    	JNC	short FCBOK		; operation succeeded
 13950                                  failopen:
 13951 00001E4D 50                      	PUSH	AX
 13952 00001E4E B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13953 00001E50 E8EFFC                  	call	BlastSFT
 13954 00001E53 58                      	POP	AX
 13955                                  	;cmp	ax,4
 13956 00001E54 83F804                  	CMP	AX,error_too_many_open_files
 13957 00001E57 7405                    	JZ	short HardMessage
 13958                                  	;cmp	ax,24h
 13959 00001E59 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13960 00001E5C 7505                    	jnz	short DeadFCB
 13961                                  HardMessage:
 13962 00001E5E 50                      	PUSH	AX
 13963 00001E5F E899FD                  	call	FCBHardErr
 13964 00001E62 58                      	POP	AX
 13965                                  DeadFCB:
 13966                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13967                                  	;jmp	FCB_RET_ERR
 13968 00001E63 EBC0                    	jmp	short FCBOpenErr
 13969                                  FCBOK:
 13970                                  	; MSDOS 6.0
 13971 00001E65 E801F4                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13972 00001E68 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13973 00001E6A E8C154                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13974 00001E6D 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13975                                  ;SR;
 13976                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13977                                  ; LocalSFT variable to reflect this.
 13978                                  
 13979 00001E6F 36893E[4410]            	mov	[ss:LocalSFT],di
 13980 00001E74 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13981                                  ;;SR;
 13982                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13983                                  ;;
 13984                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13985                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13986                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13987                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13988                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13989                                  
 13990                                  FCBOK2:
 13991                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13992 00001E79 26FF05                  	inc	word [es:di]
 13993                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13994 00001E7C E816FA                  	call	SaveFCBInfo
 13995                                  	; MSDOS 3.3
 13996                                  	;call	SetOpenAge
 13997                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13998                                  	;test	word [es:di+5],80h
 13999                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14000 00001E7F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14001 00001E84 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14002 00001E86 8A04                    	MOV	AL,[SI]			; get drive byte
 14003 00001E88 E8024C                  	call	GETTHISDRV		; convert
 14004                                  	;INC	AL
 14005                                  	; 17/12/2022
 14006 00001E8B 40                      	inc	ax
 14007 00001E8C 8804                    	MOV	[SI],AL			; stash in good drive letter
 14008                                  FCBNoDrive:
 14009                                  	;mov	word [si+0Eh],128
 14010 00001E8E C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14011                                  
 14012                                  	;mov	ax,[es:di+0Dh]
 14013 00001E93 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14014                                  	;mov	[si+16h],ax
 14015 00001E97 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 14016                                  	;mov	ax,[es:di+0Fh]
 14017 00001E9A 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14018                                  	;mov	[si+14h],ax
 14019 00001E9E 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14020                                  	;mov	ax,[es:di+11h]
 14021 00001EA1 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14022                                  	;mov	[si+10h],ax
 14023 00001EA5 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 14024                                  	;mov	ax,[es:di+13h]
 14025 00001EA8 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14026                                  	;mov	[si+12h],ax
 14027 00001EAC 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14028 00001EAF 31C0                    	XOR	AX,AX			; convenient zero
 14029                                  	;mov	[si+0Ch],ax
 14030 00001EB1 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14031                                  
 14032                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14033                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14034                                  
 14035                                  ;hkn; 	SS override
 14036 00001EB4 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14037                                  	;mov	ah,[es:di+4]
 14038 00001EB9 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14039                                  OpenScan:
 14040                                  	;cmp	al,[si+18h]
 14041 00001EBD 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14042 00001EC0 7407                    	JZ	short SkipCheck
 14043 00001EC2 50                      	push	ax			; preserve count
 14044 00001EC3 E892FC                  	call	CheckFCB		; do they match
 14045 00001EC6 58                      	pop	ax			; get count back
 14046 00001EC7 7309                    	JNC	short OpenFound		; found a match!
 14047                                  SkipCheck:
 14048 00001EC9 FEC0                    	INC	AL			; advance to next FCB
 14049 00001ECB 38E0                    	CMP	AL,AH			; table full?
 14050 00001ECD 75EE                    	JNZ	short OpenScan		; no, go for more
 14051                                  OpenDone:
 14052 00001ECF 30C0                    	xor	al,al			; return success
 14053 00001ED1 C3                      	retn
 14054                                  
 14055                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14056                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14057                                  ; Consider:
 14058                                  ;
 14059                                  ;   open (foo)	delete (foo) open (bar)
 14060                                  ;
 14061                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14062                                  ; foo even though foo is no longer needed; this is due to the server closing
 14063                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14064                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14065                                  ; bar and subsequent I/O would be lost to the redirector.
 14066                                  ;
 14067                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14068                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14069                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14070                                  ; around. This will allow us to access the same file through multiple network
 14071                                  ; connections and NOT prematurely terminate when the ref count on one
 14072                                  ; connection goes to zero.
 14073                                  
 14074                                  OpenFound:
 14075                                  	;mov	[si+18h],al
 14076 00001ED2 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14077 00001ED5 26FF05                  	inc	word [es:di]
 14078                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14079                                  					; remember this new invocation
 14080 00001ED8 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 14081                                  	;mov	[es:di+15h],ax
 14082 00001EDC 26894515                	MOV	[ES:DI+sf_LRU],AX
 14083                                  ;
 14084                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 14085                                  ; blast it to prevent other reuse.
 14086                                  ;
 14087 00001EE0 16                      	push	ss
 14088 00001EE1 1F                      	pop	ds
 14089 00001EE2 C43E[9E05]              	LES	DI,[THISSFT]
 14090 00001EE6 26FF0D                  	dec	word [es:di]
 14091                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14092                                  					; free the newly allocated SFT
 14093 00001EE9 E87A54                  	call	ShareEnd
 14094 00001EEC B043                    	MOV	AL,'C'	 ; 43h
 14095 00001EEE E851FC                  	call	BlastSFT
 14096 00001EF1 EBDC                    	JMP	short OpenDone
 14097                                  
 14098                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14099                                  ;----------------------------------------------------------------------------
 14100                                  ;
 14101                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14102                                  ;	FCB for us and asked to have the rest filled in.
 14103                                  ;
 14104                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14105                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14106                                  ;		FCB has the following fields filled in:
 14107                                  ;		    Time/Date Extent/NR Size
 14108                                  ;----------------------------------------------------------------------------
 14109                                  
 14110                                  _$FCB_CREATE:		; System call 22
 14111                                  
 14112                                  ;hkn; DOS_Create is in DOSCODE
 14113 00001EF3 B9[462A]                	MOV	CX,DOS_CREATE		; routine to call
 14114 00001EF6 31C0                    	XOR	AX,AX			; attributes to create
 14115 00001EF8 E85BFD                  	call	GetExtended		; get extended FCB
 14116 00001EFB 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14117 00001EFD 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14118                                  DoAccessJ:
 14119 00001F00 E912FF                  	JMP	DoAccess		; do dirty work
 14120                                  
 14121                                  ; 22/07/2018 - Retro DOS v3.0
 14122                                  
 14123                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 14124                                  ;----------------------------------------------------------------------------
 14125                                  ;
 14126                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 14127                                  ;	and write a number of blocks from it.
 14128                                  ;
 14129                                  ;   Inputs:	DS:DX point to an FCB
 14130                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 14131                                  ;		AL <> 0 Not enough room on disk for the output
 14132                                  ;
 14133                                  ;----------------------------------------------------------------------------
 14134                                  
 14135                                  _$FCB_RANDOM_WRITE_BLOCK:
 14136                                  	;mov	AL,0Ah	
 14137 00001F03 B00A                    	MOV	AL,RANDOM+BLOCK
 14138 00001F05 E968FD                  	JMP	FCBIO
 14139                                  
 14140                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 14141                                  ;----------------------------------------------------------------------------
 14142                                  ;
 14143                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 14144                                  ;	and read a number of blocks from it.
 14145                                  ;
 14146                                  ;   Inputs:	DS:DX point to an FCB
 14147                                  ;   Outputs:	AL = error codes defined above
 14148                                  ;
 14149                                  ;----------------------------------------------------------------------------
 14150                                  
 14151                                  _$FCB_RANDOM_READ_BLOCK:
 14152                                  	;mov	AL,0Eh	
 14153 00001F08 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 14154 00001F0A E963FD                  	JMP	FCBIO
 14155                                  
 14156                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 14157                                  ;----------------------------------------------------------------------------
 14158                                  ;
 14159                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 14160                                  ;	memory
 14161                                  ;
 14162                                  ;   Inputs:	DS:DX point to an FCB
 14163                                  ;   Outputs:	AL = error codes defined above
 14164                                  ;
 14165                                  ;----------------------------------------------------------------------------
 14166                                  
 14167                                  _$FCB_SEQ_READ:
 14168                                  	;mov	AL,4	
 14169 00001F0D B004                    	MOV	AL,FCBREAD
 14170 00001F0F E95EFD                  	JMP	FCBIO
 14171                                  
 14172                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 14173                                  ;----------------------------------------------------------------------------
 14174                                  ;
 14175                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 14176                                  ;	file
 14177                                  ;
 14178                                  ;   Inputs:	DS:DX point to an FCB
 14179                                  ;   Outputs:	AL = error codes defined above
 14180                                  ;
 14181                                  ;----------------------------------------------------------------------------
 14182                                  
 14183                                  _$FCB_SEQ_WRITE:
 14184 00001F12 B000                    	MOV	AL,0
 14185 00001F14 E959FD                  	jmp	FCBIO
 14186                                  
 14187                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 14188                                  ;----------------------------------------------------------------------------
 14189                                  ;
 14190                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 14191                                  ;	record from it.
 14192                                  ;
 14193                                  ;   Inputs:	DS:DX point to an FCB
 14194                                  ;   Outputs:	AL = error codes defined above
 14195                                  ;
 14196                                  ;----------------------------------------------------------------------------
 14197                                  
 14198                                  _$FCB_RANDOM_READ:
 14199                                  	;mov	AL,6	
 14200 00001F17 B006                    	MOV	AL,RANDOM+FCBREAD
 14201 00001F19 E954FD                  	jmp	FCBIO			; single block
 14202                                  
 14203                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 14204                                  ;----------------------------------------------------------------------------
 14205                                  ;
 14206                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 14207                                  ;	a record to it.
 14208                                  ;
 14209                                  ;   Inputs:	DS:DX point to an FCB
 14210                                  ;   Outputs:	AL = error codes defined above
 14211                                  ;
 14212                                  ;----------------------------------------------------------------------------
 14213                                  
 14214                                  _$FCB_RANDOM_WRITE:
 14215                                  	;mov	AL,2	
 14216 00001F1C B002                    	MOV	AL,RANDOM
 14217 00001F1E E94FFD                  	jmp	FCBIO
 14218                                  
 14219                                  ;============================================================================
 14220                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14221                                  ;============================================================================
 14222                                  ; 22/07/2018 - Retro DOS v3.0
 14223                                  ; 17/05/2019 - Retro DOS v4.0
 14224                                  
 14225                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14226                                  
 14227                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14228                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14229                                  
 14230                                  ;**	Search.asm
 14231                                  ;----------------------------------------------------------------------------
 14232                                  ;	Directory search system calls.
 14233                                  ;	These will be passed direct text of the pathname from the user. 
 14234                                  ;	They will need to be passed through the macro expander prior to
 14235                                  ;	being sent through the low-level stuff. 
 14236                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14237                                  ;
 14238                                  ;	$Dir_Search_First	  written
 14239                                  ;	$Dir_Search_Next	  written
 14240                                  ;	$Find_First	  written
 14241                                  ;	$Find_Next		  written
 14242                                  ;	PackName		  written
 14243                                  ;
 14244                                  ;	Modification history:
 14245                                  ;
 14246                                  ;	  Created: ARR 4 April 1983
 14247                                  
 14248                                  ;----------------------------------------------------------------------------
 14249                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14250                                  ;
 14251                                  ; Inputs:
 14252                                  ;	DS:DX Points to unopenned FCB
 14253                                  ; Function:
 14254                                  ;	Directory is searched for first matching entry and the directory
 14255                                  ;	entry is loaded at the disk transfer address
 14256                                  ; Returns:
 14257                                  ;	AL = -1 if no entries matched, otherwise 0
 14258                                  ;----------------------------------------------------------------------------
 14259                                  
 14260                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14261                                  
 14262                                  _$DIR_SEARCH_FIRST:
 14263 00001F21 368916[A605]            	MOV	[SS:THISFCB],DX
 14264 00001F26 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14265 00001F2B 89D6                    	MOV	SI,DX
 14266 00001F2D 803CFF                  	CMP	BYTE [SI],0FFH
 14267 00001F30 7503                    	JNZ	short NORMFCB4
 14268 00001F32 83C607                  	ADD	SI,7			; Point to drive select byte
 14269                                  NORMFCB4:
 14270 00001F35 FF34                    	push	word [SI]		; Save original drive byte for later
 14271                                  
 14272 00001F37 16                      	push	ss
 14273 00001F38 07                      	pop	es			; get es to address DOSGroup
 14274                                  
 14275 00001F39 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14276 00001F3C E8C34B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14277 00001F3F 7304                    	JNC	short SearchIt		; no error, go and look
 14278 00001F41 5B                      	pop	bx			; Clean stack
 14279                                  
 14280                                  ; Error code is in AX
 14281                                  
 14282                                  	; 09/11/2022
 14283                                  dcf_errj:
 14284 00001F42 E915E7                  	jmp	FCB_RET_ERR		; error
 14285                                  
 14286                                  SearchIt:
 14287 00001F45 16                      	push	ss
 14288 00001F46 1F                      	pop	ds			; get ready for search
 14289 00001F47 FF36[2C03]              	push	word [DMAADD]
 14290 00001F4B FF36[2E03]              	push	word [DMAADD+2]
 14291 00001F4F C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14292 00001F55 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14293                                  	; MSDOS 3.3
 14294                                  	;call	DOS_SEARCH_FIRST
 14295                                  	; MSDOS 6.0
 14296 00001F59 E88501                  	call	GET_FAST_SEARCH		; search
 14297 00001F5C 8F06[2E03]              	pop	word [DMAADD+2]
 14298 00001F60 8F06[2C03]              	pop	word [DMAADD]
 14299 00001F64 7303                    	JNC	short SearchSet		; no error, transfer info
 14300 00001F66 5B                      	pop	bx			; Clean stack
 14301                                  
 14302                                  ; Error code is in AX
 14303                                  
 14304                                  	; 09/11/2022
 14305                                  	;jmp	FCB_RET_ERR
 14306 00001F67 EBD9                    	jmp	short dcf_errj
 14307                                  
 14308                                  ; The search was successful (or the search-next). We store the information
 14309                                  ; into the user's FCB for continuation.
 14310                                  
 14311                                  SearchSet:
 14312 00001F69 BE[BE04]                	MOV	SI,SEARCHBUF
 14313 00001F6C C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14314 00001F70 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14315 00001F75 7403                    	JZ	short NORMFCB1
 14316 00001F77 83C707                  	ADD	DI,7			; Point past the extension
 14317                                  NORMFCB1:
 14318 00001F7A 5B                      	pop	bx			; Get original drive byte
 14319 00001F7B 08DB                    	OR	BL,BL
 14320 00001F7D 7506                    	JNZ	short SearchDrv
 14321 00001F7F 8A1E[3603]              	MOV	BL,[CURDRV]
 14322 00001F83 FEC3                    	INC	BL
 14323                                  SearchDrv:
 14324 00001F85 AC                      	LODSB				; Get correct search contin drive byte
 14325 00001F86 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14326 00001F88 47                      	INC	DI
 14327                                  	;STOSB				; Store the correct "user" drive byte
 14328                                  					;  at the start of the search info
 14329 00001F89 B90A00                  	MOV	CX,20/2
 14330 00001F8C F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14331 00001F8E 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14332                                  					;   byte to AL
 14333 00001F90 AA                      	STOSB				; Search contin drive byte at end of
 14334                                  					;   contin info
 14335 00001F91 C43E[2C03]              	LES	DI,[DMAADD]
 14336 00001F95 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14337 00001F9A 740D                    	JZ	short NORMFCB2
 14338 00001F9C B0FF                    	MOV	AL,0FFh
 14339 00001F9E AA                      	STOSB
 14340 00001F9F FEC0                    	INC	AL
 14341                                  	;MOV	CX,5
 14342                                  	; 17/12/2022
 14343 00001FA1 B105                    	mov	cl,5
 14344 00001FA3 F3AA                    	REP	STOSB
 14345 00001FA5 A0[6D05]                	MOV	AL,[SATTRIB]
 14346 00001FA8 AA                      	STOSB
 14347                                  NORMFCB2:
 14348 00001FA9 88D8                    	MOV	AL,BL			; User Drive byte
 14349 00001FAB AA                      	STOSB
 14350                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14351                                  	; 17/12/2022
 14352 00001FAC B110                    	mov	cl,16
 14353 00001FAE F3A5                    	REP	MOVSW
 14354 00001FB0 E9A4E6                  	jmp	FCB_RET_OK
 14355                                  
 14356                                  ;----------------------------------------------------------------------------
 14357                                  ;
 14358                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14359                                  ;
 14360                                  ; Inputs:
 14361                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14362                                  ; Function:
 14363                                  ;	Directory is searched for the next matching entry and the directory
 14364                                  ;	entry is loaded at the disk transfer address
 14365                                  ; Returns:
 14366                                  ;	AL = -1 if no entries matched, otherwise 0
 14367                                  ;----------------------------------------------------------------------------
 14368                                  
 14369                                  _$DIR_SEARCH_NEXT:
 14370 00001FB3 368916[A605]            	MOV	[SS:THISFCB],DX
 14371 00001FB8 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14372 00001FBD 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14373 00001FC3 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14374                                  
 14375 00001FC9 16                      	push	ss
 14376 00001FCA 07                      	pop	es
 14377                                  
 14378 00001FCB BF[BE04]                	MOV	DI,SEARCHBUF
 14379                                  
 14380 00001FCE 89D6                    	MOV	SI,DX
 14381 00001FD0 803CFF                  	CMP	BYTE [SI],0FFh
 14382 00001FD3 750D                    	JNZ	short NORMFCB6
 14383 00001FD5 83C606                  	ADD	SI,6
 14384 00001FD8 AC                      	LODSB
 14385                                  
 14386 00001FD9 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14387 00001FDD 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14388                                  NORMFCB6:
 14389 00001FE2 AC                      	LODSB				; Get original user drive byte
 14390 00001FE3 50                      	push	ax			; Put it on stack
 14391 00001FE4 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14392 00001FE7 AA                      	STOSB				; Put in correct place
 14393 00001FE8 B90A00                  	MOV	CX,20/2
 14394 00001FEB F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14395                                  
 14396 00001FED 16                      	push	ss
 14397 00001FEE 1F                      	pop	ds
 14398                                  
 14399 00001FEF FF36[2C03]              	push	word [DMAADD]
 14400 00001FF3 FF36[2E03]              	push	word [DMAADD+2]
 14401 00001FF7 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14402 00001FFD 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14403 00002001 E8200E                  	call	DOS_SEARCH_NEXT 	; Find it
 14404 00002004 8F06[2E03]              	pop	word [DMAADD+2]
 14405 00002008 8F06[2C03]              	pop	word [DMAADD]
 14406 0000200C 7203                    	JC	short SearchNoMore
 14407 0000200E E958FF                  	JMP	SearchSet		; Ok set return
 14408                                  
 14409                                  SearchNoMore:
 14410 00002011 C43E[A605]              	LES	DI,[THISFCB]
 14411 00002015 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14412 0000201A 7403                    	JZ	short NORMFCB8
 14413 0000201C 83C707                  	ADD	DI,7			; Point past the extension
 14414                                  NORMFCB8:
 14415 0000201F 5B                      	pop	bx			; Get original drive byte
 14416 00002020 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14417                                  					;  at the right spot
 14418                                  ; error code is in AX
 14419                                  
 14420 00002023 E934E6                  	jmp	FCB_RET_ERR
 14421                                  
 14422                                  ; 17/05/2019 - Retro DOS v4.0
 14423                                  
 14424                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14425                                  
 14426                                  ;---------------------------------------------------------------------------
 14427                                  ;
 14428                                  ;   Procedure Name : $FIND_FIRST
 14429                                  ; 
 14430                                  ;   Assembler usage:
 14431                                  ;	    MOV AH, FindFirst
 14432                                  ;	    LDS DX, name
 14433                                  ;	    MOV CX, attr
 14434                                  ;	    INT 21h
 14435                                  ;	; DMA address has datablock
 14436                                  ;
 14437                                  ;   Error Returns:
 14438                                  ;	    AX = error_path_not_found
 14439                                  ;	       = error_no_more_files
 14440                                  ;---------------------------------------------------------------------------
 14441                                  
 14442                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14443                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14444                                  
 14445                                  _$FIND_FIRST:
 14446 00002026 89D6                    	MOV	SI,DX			; get name in appropriate place
 14447 00002028 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14448                                  
 14449 0000202D BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14450                                  
 14451 00002030 E8354B                  	call	TransPathSet		; convert the path
 14452 00002033 7305                    	JNC	short Find_it 		; no error, go and look
 14453                                  FindError:
 14454                                  	;mov	al,3
 14455 00002035 B003                    	mov	al, error_path_not_found ; error and map into one.
 14456                                  	; 09/11/2022
 14457                                  FF_errj:
 14458 00002037 E90AE6                  	jmp	SYS_RET_ERR
 14459                                  Find_it:
 14460 0000203A 16                      	push	ss
 14461 0000203B 1F                      	pop	ds
 14462                                  
 14463 0000203C FF36[2C03]              	push	word [DMAADD]
 14464 00002040 FF36[2E03]              	push	word [DMAADD+2]
 14465 00002044 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14466 0000204A 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14467                                  	; MSDOS 3.3
 14468                                  	;call	DOS_SEARCH_FIRST
 14469                                  	; MSDOS 6.0
 14470 0000204E E89000                  	call	GET_FAST_SEARCH 	; search
 14471 00002051 8F06[2E03]              	pop	word [DMAADD+2]
 14472 00002055 8F06[2C03]              	pop	word [DMAADD]
 14473                                  	
 14474                                  	; 16/12/2022
 14475                                  	;JNC	short FindSet 		; no error, transfer info
 14476 00002059 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14477                                  	;
 14478                                  	;jmp	SYS_RET_ERR
 14479                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14480                                  ;FFF_errj:
 14481                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14482                                  
 14483                                  FindSet:
 14484 0000205B BE[BE04]                	MOV	SI,SEARCHBUF
 14485 0000205E C43E[2C03]              	LES	DI,[DMAADD]
 14486 00002062 B91500                  	MOV	CX,21
 14487 00002065 F3A4                    	REP	MOVSB
 14488 00002067 56                      	PUSH	SI			; Save pointer to start of entry
 14489                                  	;mov	al,[si+0Bh]
 14490 00002068 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14491 0000206B AA                      	STOSB
 14492                                  	;add	si,16h ; 22
 14493 0000206C 83C616                  	ADD	SI,dir_entry.dir_time
 14494 0000206F A5                      	MOVSW				; dir_time
 14495 00002070 A5                      	MOVSW				; dir_date
 14496 00002071 46                      	INC	SI
 14497 00002072 46                      	INC	SI			; Skip dir_first
 14498 00002073 A5                      	MOVSW				; dir_size (2 words)
 14499 00002074 A5                      	MOVSW
 14500 00002075 5E                      	POP	SI			; Point back to dir_name
 14501 00002076 E83500                   	CALL	PackName
 14502 00002079 E9BFE5                  	jmp	SYS_RET_OK		; bye with no errors
 14503                                  
 14504                                  ;---------------------------------------------------------------------------
 14505                                  ;
 14506                                  ;   Procedure Name : $FIND_NEXT
 14507                                  ;
 14508                                  ;   Assembler usage:
 14509                                  ;	; dma points at area returned by find_first
 14510                                  ;	    MOV AH, findnext
 14511                                  ;	    INT 21h
 14512                                  ;	; next entry is at dma
 14513                                  ;
 14514                                  ;   Error Returns:
 14515                                  ;	    AX = error_no_more_files
 14516                                  ;---------------------------------------------------------------------------
 14517                                  
 14518                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14519                                  _$FIND_NEXT:
 14520 0000207C 16                      	push	ss
 14521 0000207D 07                      	pop	es
 14522                                  
 14523 0000207E BF[BE04]                	MOV	DI,SEARCHBUF
 14524                                  
 14525 00002081 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14526                                  
 14527 00002086 B91500                  	MOV	CX,21
 14528 00002089 F3A4                    	REP	MOVSB			; Put the search continuation info
 14529                                  					;  in the right place
 14530 0000208B 16                      	push	ss
 14531 0000208C 1F                      	pop	ds			; get ready for search
 14532                                  	
 14533 0000208D FF36[2C03]              	push	word [DMAADD]
 14534 00002091 FF36[2E03]              	push	word [DMAADD+2]
 14535 00002095 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14536 0000209B 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14537 0000209F E8820D                  	call	DOS_SEARCH_NEXT 	; Find it
 14538 000020A2 8F06[2E03]              	pop	word [DMAADD+2]
 14539 000020A6 8F06[2C03]              	pop	word [DMAADD]
 14540 000020AA 73AF                    	JNC	short FindSet 		; No error, set info
 14541                                  	;jmp	SYS_RET_ERR
 14542                                  	; 16/12/2022
 14543 000020AC EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14544                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14545                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14546                                  
 14547                                  ;---------------------------------------------------------------------------
 14548                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14549                                  ;
 14550                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14551                                  ;	the ASCIZ format.
 14552                                  ;
 14553                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14554                                  ;		(ES:DI) = destination area (13 bytes)
 14555                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14556                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14557                                  ;---------------------------------------------------------------------------
 14558                                  
 14559                                  PackName:
 14560                                  ;	Move over 8 characters to cover the name component, then trim it's
 14561                                  ;	trailing blanks.
 14562                                  
 14563 000020AE B90800                  	MOV	CX,8			; Pack the name
 14564 000020B1 F3A4                    	REP	MOVSB			; Move all of it
 14565                                  main_kill_tail:
 14566 000020B3 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14567 000020B8 7507                    	JNZ	short find_check_dot
 14568 000020BA 4F                      	DEC	DI			; Back up over trailing space
 14569 000020BB 41                      	INC	CX
 14570 000020BC 83F908                  	CMP	CX,8
 14571 000020BF 72F2                    	JB	short main_kill_tail
 14572                                  find_check_dot:
 14573                                  	;CMP	WORD [SI],(" " << 8) | " "
 14574 000020C1 813C2020                	cmp     word [si],2020h 
 14575 000020C5 7506                    	JNZ	short got_ext 		; Some chars in extension
 14576 000020C7 807C0220                	CMP	BYTE [SI+2]," "
 14577 000020CB 7410                    	JZ	short find_done		; No extension
 14578                                  got_ext:
 14579 000020CD B02E                    	MOV	AL,"."	; 2Eh
 14580 000020CF AA                      	STOSB
 14581                                  	;MOV	CX,3
 14582                                  	; 18/12/2022
 14583                                  	;mov	cl,3
 14584                                  	;REP	MOVSB
 14585 000020D0 A4                      	movsb
 14586 000020D1 A4                      	movsb
 14587 000020D2 A4                      	movsb
 14588                                  ext_kill_tail:
 14589 000020D3 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14590 000020D8 7503                    	JNZ	short find_done
 14591 000020DA 4F                      	DEC	DI			; Back up over trailing space
 14592 000020DB EBF6                    	JMP	short ext_kill_tail
 14593                                  find_done:
 14594 000020DD 31C0                    	XOR	AX,AX
 14595 000020DF AA                      	STOSB				; NUL terminate
 14596 000020E0 C3                      	retn
 14597                                  
 14598                                  ;---------------------------------------------------------------------------
 14599                                  
 14600                                  	; 17/05/2019 - Retro DOS v4.0
 14601                                  GET_FAST_SEARCH:
 14602                                  	; 22/07/2018
 14603                                  	; MSDOS 6.0
 14604                                  	; 17/12/2022
 14605 000020E1 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14606                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14607                                  					;FO.trigger fastopen ;AN000;
 14608                                  	;call	DOS_SEARCH_FIRST
 14609                                  	;retn
 14610                                  	; 17/12/2022
 14611 000020E7 E94E0C                  	jmp	DOS_SEARCH_FIRST
 14612                                  
 14613                                  ;============================================================================
 14614                                  ; PATH.ASM, MSDOS 6.0, 1991
 14615                                  ;============================================================================
 14616                                  ; 06/08/2018 - Retro DOS v3.0
 14617                                  ; 17/05/2019 - Retro DOS v4.0
 14618                                  
 14619                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14620                                  
 14621                                  ;**	Directory related system calls. These will be passed direct text of the
 14622                                  ;	pathname from the user. They will need to be passed through the macro
 14623                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14624                                  ;	defined in DISPATCH. The system calls are:
 14625                                  ;
 14626                                  ;	$CURRENT_DIR  Written
 14627                                  ;	$RMDIR	  Written
 14628                                  ;	$CHDIR	  Written
 14629                                  ;	$MKDIR	  Written
 14630                                  ;
 14631                                  ;
 14632                                  ;	Modification history:
 14633                                  ;
 14634                                  ;	    Created: ARR 4 April 1983
 14635                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14636                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14637                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14638                                  ;				    current directory.
 14639                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14640                                  
 14641                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14642                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14643                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14644                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14645                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14646                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14647                                  ;	I_Need	cMeta,BYTE
 14648                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14649                                  
 14650                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14651                                  ;----------------------------------------------------------------------------
 14652                                  ;
 14653                                  ;   Procedure Name : $CURRENT_DIR
 14654                                  ;
 14655                                  ;   Assembler usage:
 14656                                  ;		LDS	SI,area
 14657                                  ;		MOV	DL,drive
 14658                                  ;		INT	21h
 14659                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14660                                  ;	    ; current directory.
 14661                                  ;   Error returns:
 14662                                  ;	    AX = error_invalid_drive
 14663                                  ;
 14664                                  ;----------------------------------------------------------------------------
 14665                                  
 14666                                  _$CURRENT_DIR:
 14667                                  	;06/08/2018 - Retro DOS v3.0
 14668                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14669 000020EA E825F2                  	call	ECritDisk
 14670 000020ED 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14671 000020EF E87F49                  	call	GetVisDrv		; grab it
 14672 000020F2 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14673                                  CurdirErr:
 14674 000020F4 E836F2                  	call	LCritDisk
 14675                                  
 14676                                  	; MSDOS 3.3
 14677                                  	;mov	al,0Fh
 14678                                  	
 14679                                  	; MSDOS 6.0
 14680 000020F7 1E                      	push	ds
 14681 000020F8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14682 000020FD A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14683 00002100 1F                      	pop	ds
 14684                                  
 14685                                  curdir_errj:
 14686 00002101 E940E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14687                                  
 14688                                  CurrentValidate:
 14689 00002104 1E                      	push	ds			; save destination
 14690 00002105 56                      	push	si
 14691                                  	
 14692                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14693                                  	
 14694                                  	; MSDOS 6.0
 14695 00002106 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14696 0000210B C536[A205]              	lds     si,[THISCDS]
 14697                                  
 14698                                  ; 16/12/2022
 14699                                  %if 0
 14700                                  	; 09/11/2022 (following test instruction is nonsense!)
 14701                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14702                                  
 14703                                  	;test	word [si+43h],8000h
 14704                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14705                                  	;jnz	short $+2  ; 09/11/2022	
 14706                                  	jnz	short DoCheck
 14707                                  %endif
 14708                                  
 14709                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14710                                  ; media check.
 14711                                  ;	CMP	word [SI+curdir.ID],0
 14712                                  ;	JZ	short GetDst
 14713                                  DoCheck:
 14714                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14715                                  
 14716                                  	; MSDOS 6.0
 14717 0000210F 1E                      	push	ds
 14718 00002110 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14719 00002115 C606[4C03]00            	mov	byte [NoSetDir],0
 14720 0000211A 1F                      	pop	ds
 14721                                  
 14722 0000211B BF[BE03]                	MOV	DI,OPENBUF
 14723 0000211E E83621                  	call	ValidateCDS		; output is ES:DI -> CDS
 14724                                  
 14725 00002121 06                      	push	es	 		; swap source and destination
 14726 00002122 57                      	push	di
 14727 00002123 5E                      	pop	si
 14728 00002124 1F                      	pop	ds
 14729                                  GetDst:
 14730 00002125 5F                      	pop	di
 14731 00002126 07                      	pop	es			; get real destination
 14732 00002127 72CB                    	JC	short CurdirErr
 14733                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14734                                  	;
 14735                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14736                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14737                                  	; 16/12/2022
 14738                                  	;add	si,0  ; add si,curdir.text
 14739                                  	;
 14740                                  	;add	si,[si+4Fh] ; 17/05/2019
 14741 00002129 03744F                  	ADD	SI,[SI+curdir.end]
 14742 0000212C 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14743 0000212F 7501                    	JNZ	short CurrentCopy
 14744 00002131 46                      	INC	SI
 14745                                  CurrentCopy:
 14746                                  ;	call	FStrCpy
 14747                                  ;; 10/29/86 E5 char
 14748 00002132 50                      	PUSH	AX
 14749 00002133 AC                      	LODSB				; get char
 14750 00002134 08C0                    	OR	AL,AL
 14751 00002136 7413                    	JZ	short FOK
 14752 00002138 3C05                    	CMP	AL,05H
 14753 0000213A 740D                    	JZ	short FCHANGE
 14754 0000213C EB01                    	JMP	short FFF
 14755                                  FCPYNEXT:
 14756 0000213E AC                      	LODSB				; get char
 14757                                  FFF:
 14758 0000213F 3C5C                    	CMP	AL,'\'			; beginning of directory
 14759 00002141 7508                    	JNZ	short FOK		; no
 14760 00002143 AA                      	STOSB				; put into user's buffer
 14761 00002144 AC                      	LODSB				; 1st char of dir is 05?
 14762 00002145 3C05                    	CMP	AL,05H
 14763 00002147 7502                    	JNZ	short FOK		; no
 14764                                  FCHANGE:
 14765 00002149 B0E5                    	MOV	AL,0E5H			; make it E5
 14766                                  FOK:
 14767 0000214B AA                      	STOSB				; put into user's buffer
 14768 0000214C 08C0                    	OR	AL,AL			; final char
 14769 0000214E 75EE                    	JNZ	short FCPYNEXT		; no
 14770 00002150 58                      	POP	AX
 14771                                  
 14772                                  ;; 10/29/86 E5 char
 14773 00002151 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14774 00002153 E8D7F1                  	call	LCritDisk
 14775 00002156 E9E2E4                  	jmp	SYS_RET_OK		; no more, bye!
 14776                                  
 14777                                  ; 17/05/2019 - Retro DOS v4.0
 14778                                  
 14779                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14780                                  
 14781                                  ;BREAK <$RmDir -- Remove a directory>
 14782                                  ;----------------------------------------------------------------------------
 14783                                  ;
 14784                                  ; Procedure Name : $RmDir
 14785                                  ;
 14786                                  ; Inputs:
 14787                                  ;	DS:DX Points to asciz name
 14788                                  ; Function:
 14789                                  ;	Delete directory if empty
 14790                                  ; Returns:
 14791                                  ;	STD XENIX Return
 14792                                  ;	AX = error_path_not_found If path bad
 14793                                  ;	AX = error_access_denied If
 14794                                  ;		Directory not empty
 14795                                  ;		Path not directory
 14796                                  ;		Root directory specified
 14797                                  ;		Directory malformed (. and .. not first two entries)
 14798                                  ;		User tries to delete a current directory
 14799                                  ;	AX = error_current_directory
 14800                                  ;
 14801                                  ;----------------------------------------------------------------------------
 14802                                  
 14803                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14804                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14805                                  
 14806                                  _$RMDIR:
 14807 00002159 52                      	push	dx			; Save ptr to name
 14808 0000215A 1E                      	push	ds
 14809 0000215B 89D6                    	mov	si,dx			; Load ptr into si
 14810 0000215D BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14811 00002160 57                      	push	di
 14812 00002161 E80C4A                  	call	TransPathNoSet		; Translate the name
 14813 00002164 5F                      	pop	di			; di = ptr to buf for trans name
 14814 00002165 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14815 00002167 1F                      	pop	ds
 14816 00002168 5A                      	pop	dx			; Restore the name
 14817                                  	;mov	al,3
 14818 00002169 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14819                                  	; 16/12/2022
 14820                                  rmdir_errj: ; 10/08/2018
 14821                                  chdir_errj:
 14822 0000216B EB94                    	jmp	short curdir_errj
 14823                                  	;jmp	SYS_RET_ERR
 14824                                  rmlset:
 14825 0000216D 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14826 00002173 7512                    	Jnz	short rmerr		;	return (-1);
 14827 00002175 16                      	push	ss
 14828 00002176 07                      	pop	es
 14829 00002177 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14830                                  rmloop: 
 14831 00002179 E86649                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14832 0000217C 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14833 0000217E E835F0                  	call	StrCmp			; Are the 2 paths the same?
 14834 00002181 7404                    	jz	short rmerr		; Yes, report error.
 14835 00002183 FEC0                    	inc	al			; No, inc al to next drive number
 14836 00002185 EBF2                    	jmp	short rmloop		; Go check next drive.
 14837                                  rmerr:
 14838 00002187 1F                      	pop	ds
 14839 00002188 5A                      	pop	dx			; Restore the name
 14840                                  	;mov	al,10h
 14841 00002189 B010                    	mov	al,error_current_directory ; error
 14842                                  	; 16/12/2022
 14843                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14844                                  ;chdir_errj:
 14845 0000218B EBDE                    	jmp	short rmdir_errj
 14846                                  rmcont:
 14847 0000218D 1F                      	pop	ds
 14848 0000218E 5A                      	pop	dx			; Restore the name
 14849 0000218F BE[F931]                	MOV	SI,DOS_RMDIR
 14850 00002192 EB7C                    	JMP	DoDirCall
 14851                                  
 14852                                  ; 17/05/2019 - Retro DOS v4.0
 14853                                  
 14854                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14855                                  
 14856                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14857                                  ;----------------------------------------------------------------------------
 14858                                  ;
 14859                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14860                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14861                                  ; several cases to consider:
 14862                                  ;
 14863                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14864                                  ;	it into a WFP.	We verify the existance of this directory and then
 14865                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14866                                  ;	directory cluster.
 14867                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14868                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14869                                  ;	WFP back into the CDS.
 14870                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14871                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14872                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14873                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14874                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14875                                  ;	to process the path but to return the logical CDS and the logical
 14876                                  ;	path.  We then copy the logical path into the logical CDS.
 14877                                  ;
 14878                                  ; Inputs:
 14879                                  ;	DS:DX Points to asciz name
 14880                                  ; Returns:
 14881                                  ;	STD XENIX Return
 14882                                  ;	AX = chdir_path_not_found if error
 14883                                  ;
 14884                                  ;----------------------------------------------------------------------------
 14885                                  
 14886                                  _$CHDIR:
 14887 00002194 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14888 00002197 89D6                    	MOV	SI,DX			; get source
 14889 00002199 E8C849                  	call	TransPath		; go munge the path and get real CDS
 14890 0000219C 7304                    	JNC	short ChDirCrack	; no errors, try path
 14891                                  ChDirErrP:
 14892                                  	;mov	al,3
 14893 0000219E B003                    	MOV	AL,error_path_not_found
 14894                                  ChDirErr:
 14895                                  	;jmp	SYS_RET_ERR 	; oops!
 14896                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14897 000021A0 EBC9                    	jmp	short chdir_errj
 14898                                  
 14899                                  ChDirCrack:
 14900 000021A2 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14901 000021A7 75F5                    	JNZ	short ChDirErrP
 14902                                  
 14903                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14904                                  ; found.
 14905                                  
 14906 000021A9 C43E[A205]              	LES	DI,[THISCDS]
 14907 000021AD 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14908 000021B0 74EC                    	JZ	short ChDirErrP		;	error ();
 14909                                  
 14910                                  ; Find out if the directory exists.
 14911                                  
 14912 000021B2 E80110                  	call	DOS_CHDIR
 14913                                  	;Jc	short ChDirErr
 14914                                  	; 16/12/2022
 14915 000021B5 72B4                    	jc	short chdir_errj
 14916                                  ;
 14917                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14918                                  ; not network). If one was seen, all we need to do is copy in the text
 14919                                  ;
 14920 000021B7 C43E[A205]              	LES	DI,[THISCDS]
 14921                                  	;test	word [es:di+43h],2000h
 14922                                  	; 17/12/2022
 14923 000021BB 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14924                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14925 000021C0 7425                    	JZ	short GotCDS
 14926                                  
 14927                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14928                                  
 14929 000021C2 06                      	push	es	
 14930 000021C3 57                      	push	di
 14931 000021C4 51                      	push	cx			; save CDS and cluster...
 14932 000021C5 E8BDE2                  	call	Get_User_Stack		; get original text
 14933                                  	
 14934                                  	;mov	di,[si+6]
 14935 000021C8 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14936                                  	;mov	ds,[si+0Eh]
 14937 000021CB 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14938                                  	
 14939 000021CE BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14940 000021D1 87F7                    	XCHG	SI,DI
 14941 000021D3 30C0                    	XOR	AL,AL			; do no splicing
 14942 000021D5 57                      	push	di
 14943 000021D6 E89749                  	call	TransPathNoSet		; Munge path
 14944 000021D9 5E                      	pop	si
 14945                                  
 14946                                  ; There should NEVER be an error here.
 14947                                  
 14948                                  ;IF FALSE
 14949                                  ;	JNC SKipErr
 14950                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14951                                  ;SkipErr:
 14952                                  ;ENDIF
 14953 000021DA C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14954                                  	;mov	word [es:di+49h],-1
 14955 000021DE 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14956                                  					; no valid cluster here...
 14957 000021E4 59                      	pop	cx
 14958 000021E5 5F                      	pop	di
 14959 000021E6 07                      	pop	es
 14960                                  
 14961                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14962                                  
 14963                                  GotCDS:
 14964                                  
 14965                                  ; wfp_start points to the text. See if it is long enough
 14966                                  
 14967                                  	; MSDOS 3.3
 14968                                  	;push	ss
 14969                                  	;pop	ds
 14970                                  	;mov	si,[WFP_START]
 14971                                  	;push	cx
 14972                                  	;call	DStrLen
 14973                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14974                                  	;pop	cx
 14975                                  	;ja	short ChDirErrP
 14976                                  
 14977                                  	; MSDOS 6.0
 14978 000021E7 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14979 000021EA 77B2                    	JA	short ChDirErrP
 14980                                  	; MSDOS 3.3 & MSDOS 6.0
 14981                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14982                                  	; 17/12/2022
 14983 000021EC 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14984 000021F1 7512                    	JNZ	short SkipRecency
 14985                                  	; MSDOS 6.0
 14986                                  	;test	word [es:di+43h],2000h
 14987                                  	; 17/12/2022
 14988 000021F3 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14989                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14990                                  					;PTM. for Join and Subst ;AN000;
 14991 000021F8 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14992 000021FA B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14993                                  setdirclus:
 14994                                  	;mov	[es:di+49h],cx
 14995 000021FD 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14996 00002201 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14997                                  SkipRecency:
 14998 00002205 E8DFEF                  	call	FStrCpy
 14999 00002208 30C0                    	XOR	AL,AL
 15000                                  mkdir_ok:
 15001 0000220A E92EE4                  	jmp	SYS_RET_OK
 15002                                  
 15003                                  ; 17/05/2019 - Retro DOS v4.0
 15004                                  
 15005                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15006                                  
 15007                                  ;BREAK <$MkDir - Make a directory entry>
 15008                                  ;---------------------------------------------------------------------------
 15009                                  ;
 15010                                  ; Procedure Name : $MkDir
 15011                                  ; Inputs:
 15012                                  ;	DS:DX Points to asciz name
 15013                                  ; Function:
 15014                                  ;	Make a new directory
 15015                                  ; Returns:
 15016                                  ;	STD XENIX Return
 15017                                  ;	AX = mkdir_path_not_found if path bad
 15018                                  ;	AX = mkdir_access_denied  If
 15019                                  ;		Directory cannot be created
 15020                                  ;		Node already exists
 15021                                  ;		Device name given
 15022                                  ;		Disk or directory(root) full
 15023                                  ;---------------------------------------------------------------------------
 15024                                  
 15025                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15026                                  
 15027                                  _$MKDIR:
 15028 0000220D BE[C630]                	MOV	SI,DOS_MKDIR
 15029                                  DoDirCall:
 15030 00002210 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15031                                  
 15032 00002213 56                      	push	si
 15033 00002214 89D6                    	MOV	SI,DX			; get source
 15034 00002216 E84B49                  	call	TransPath		; go munge the path
 15035 00002219 5E                      	pop	si
 15036 0000221A 7305                    	JNC	short MkDirCrack	; no errors, try path
 15037                                  MkErrP:
 15038 0000221C B003                    	MOV	AL,error_path_not_found	; oops!
 15039                                  MkErr:
 15040 0000221E E923E4                  	jmp	SYS_RET_ERR
 15041                                  MkDirCrack:
 15042 00002221 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15043 00002227 75F3                    	JNZ	short MkErrP
 15044                                  
 15045                                  	; MSDOS 3.3
 15046                                  	;push	ss
 15047                                  	;pop	ds
 15048                                  	;call	si
 15049                                  	;jb	short MkErr
 15050                                  	;;jmp	short mkdir_ok
 15051                                  	;jmp	SYS_RET_OK
 15052                                  
 15053                                  	; MSDOS 6.0
 15054 00002229 56                      	PUSH	SI			;PTM.			;AN000;
 15055 0000222A E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15056 0000222D 5E                      	POP	SI			;PTM.			;AN000;
 15057 0000222E 7604                    	JBE	short pathok		;PTM.			;AN000;
 15058                                  	;mov	al,5
 15059 00002230 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15060                                  	;jmp	SYS_RET_ERR		;PTM.
 15061 00002232 EBEA                    	jmp	short MkErr
 15062                                  pathok:
 15063 00002234 FFD6                    	CALL	SI			; go get file
 15064 00002236 72E6                    	JC	short MkErr		; no errors
 15065                                  	; 16/12/2022
 15066                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15067 00002238 EBD0                    	jmp	short mkdir_ok
 15068                                  	;jmp	SYS_RET_OK
 15069                                  
 15070                                  ;----------------------------------------------------------------------------
 15071                                  ;
 15072                                  ; Procedure Name : Check_PathLen
 15073                                  ;
 15074                                  ; Inputs:
 15075                                  ;	nothing
 15076                                  ; Function:
 15077                                  ;	check if final path length greater than 67
 15078                                  ; Returns:
 15079                                  ;	Above flag set if > 67
 15080                                  ;
 15081                                  ;---------------------------------------------------------------------------
 15082                                  
 15083                                  Check_PathLen:
 15084                                  	; 09/09/2018
 15085                                  	;mov	SI,[WFP_START]
 15086 0000223A 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15087                                  Check_PathLen2:
 15088 0000223F 16                      	push	ss
 15089 00002240 1F                      	pop	ds
 15090                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15091 00002241 51                      	push	CX	
 15092 00002242 E8B9EF                  	CALL	DStrLen
 15093 00002245 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15094 00002248 59                      	POP	CX
 15095 00002249 C3                      	retn
 15096                                  
 15097                                  ;============================================================================
 15098                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15099                                  ;============================================================================
 15100                                  ; 07/08/2018 - Retro DOS v3.0
 15101                                  ; 17/05/2019 - Retro DOS v4.0
 15102                                  
 15103                                  ;**	IOCTL system call.
 15104                                  ;----------------------------------------------------------------------------
 15105                                  ;	$IOCTL
 15106                                  ;
 15107                                  ;	  Revision history:
 15108                                  ;
 15109                                  ;		Created: ARR 4 April 1983
 15110                                  ;
 15111                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15112                                  ;
 15113                                  ;		A000	version 4.00	Jan. 1988
 15114                                  ;
 15115                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15116                                  ;
 15117                                  
 15118                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15119                                  ;---------------------------------------------------------------------------
 15120                                  ;
 15121                                  ;   Assembler usage:
 15122                                  ;	    MOV     BX, Handle
 15123                                  ;	    MOV     DX, Data
 15124                                  ;
 15125                                  ;	(or LDS     DX,BUF
 15126                                  ;	    MOV     CX,COUNT)
 15127                                  ;
 15128                                  ;	    MOV     AH, Ioctl
 15129                                  ;	    MOV     AL, Request
 15130                                  ;	    INT     21h
 15131                                  ;
 15132                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15133                                  ;	    attribute word in DX, handle in BX:
 15134                                  ;	    DH = high word of device driver attributes
 15135                                  ;	    DL = low byte of sf_flags
 15136                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15137                                  ;	    in BX.
 15138                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15139                                  ;	    into DS:DX.  Return number read in AX.
 15140                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15141                                  ;	    DS:DX.  Return bytes written in AX.
 15142                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15143                                  ;	    into DS:DX.  Return number read in AX.
 15144                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15145                                  ;	    DS:DX.  Return bytes written in AX.
 15146                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15147                                  ;	    device, AL = 0FFh, otherwise 0.
 15148                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15149                                  ;	    device, AL = 0FFh, otherwise 0.
 15150                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15151                                  ;	    removable media, 0 otherwise.
 15152                                  ;	 9  Return the contents of the device attribute word in DX for the
 15153                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15154                                  ;	    network. 8000h is the bit for local use.
 15155                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15156                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15157                                  ;	    the count and CX is the delay.
 15158                                  ;
 15159                                  ;   Error returns:
 15160                                  ;	    AX = error_invalid_handle
 15161                                  ;	       = error_invalid_function
 15162                                  ;	       = error_invalid_data
 15163                                  ;
 15164                                  ;-------------------------------------------------------------------------------
 15165                                  ;
 15166                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15167                                  ;   than the above
 15168                                  ;
 15169                                  ;	There are several basic forms of IOCTL calls:
 15170                                  ;
 15171                                  ;
 15172                                  ;	** Get/Set device information:	**
 15173                                  ;
 15174                                  ;	ENTRY	(AL) = function code
 15175                                  ;		  0 - Get device information
 15176                                  ;		  1 - Set device information
 15177                                  ;		(BX) = file handle
 15178                                  ;		(DX) = info for "Set Device Information"
 15179                                  ;	EXIT	'C' set if error
 15180                                  ;		  (AX) = error code
 15181                                  ;		'C' clear if OK
 15182                                  ;		  (DX) = info for "Get Device Information"
 15183                                  ;	USES	ALL
 15184                                  ;
 15185                                  ;
 15186                                  ;	**  Read/Write Control Data From/To Handle  **
 15187                                  ;
 15188                                  ;	ENTRY	(AL) = function code
 15189                                  ;		  2 - Read device control info
 15190                                  ;		  3 - Write device control info
 15191                                  ;		(BX) = file handle
 15192                                  ;		(CX) = transfer count
 15193                                  ;		(DS:DX) = address for data
 15194                                  ;	EXIT	'C' set if error
 15195                                  ;		  (AX) = error code
 15196                                  ;		'C' clear if OK
 15197                                  ;		  (AX) = count of bytes transfered
 15198                                  ;	USES	ALL
 15199                                  ;
 15200                                  ;
 15201                                  ;	**  Read/Write Control Data From/To Block Device  **
 15202                                  ;
 15203                                  ;	ENTRY	(AL) = function code
 15204                                  ;		  4 - Read device control info
 15205                                  ;		  5 - Write device control info
 15206                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15207                                  ;		(CX) = transfer count
 15208                                  ;		(DS:DX) = address for data
 15209                                  ;	EXIT	'C' set if error
 15210                                  ;		  (AX) = error code
 15211                                  ;		'C' clear if OK
 15212                                  ;		  (AX) = count of bytes transfered
 15213                                  ;	USES	ALL
 15214                                  ;
 15215                                  ;
 15216                                  ;	**  Get Input/Output Status  **
 15217                                  ;
 15218                                  ;	ENTRY	(AL) = function code
 15219                                  ;		  6 - Get Input status
 15220                                  ;		  7 - Get Output Status
 15221                                  ;		(BX) = file handle
 15222                                  ;	EXIT	'C' set if error
 15223                                  ;		  (AX) = error code
 15224                                  ;		'C' clear if OK
 15225                                  ;		  (AL) = 00 if not ready
 15226                                  ;		  (AL) = FF if ready
 15227                                  ;	USES	ALL
 15228                                  ;
 15229                                  ;
 15230                                  ;	**  Get Drive Information  **
 15231                                  ;
 15232                                  ;	ENTRY	(AL) = function code
 15233                                  ;		  8 - Check for removable media
 15234                                  ;		  9 - Get device attributes
 15235                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15236                                  ;	EXIT	'C' set if error
 15237                                  ;		  (AX) = error code
 15238                                  ;		'C' clear if OK
 15239                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15240                                  ;		  (DX) = device attribute word (func. 9)
 15241                                  ;	USES	ALL
 15242                                  ;
 15243                                  ;
 15244                                  ;	**  Get Redirected bit	**
 15245                                  ;
 15246                                  ;	ENTRY	(AL) = function code
 15247                                  ;		  0Ah - Network stuff
 15248                                  ;		(BX) = file handle
 15249                                  ;	EXIT	'C' set if error
 15250                                  ;		  (AX) = error code
 15251                                  ;		'C' clear if OK
 15252                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15253                                  ;	USES	ALL
 15254                                  ;
 15255                                  ;
 15256                                  ;	**  Change sharer retry parameters  **
 15257                                  ;
 15258                                  ;	ENTRY	(AL) = function code
 15259                                  ;		  0Bh - Set retry parameters
 15260                                  ;		(CX) = retry loop count
 15261                                  ;		(DX) = number of retries
 15262                                  ;	EXIT	'C' set if error
 15263                                  ;		  (AX) = error code
 15264                                  ;		'C' clear if OK
 15265                                  ;	USES	ALL
 15266                                  ;
 15267                                  ;
 15268                                  ;   =================================================================
 15269                                  ;
 15270                                  ;	**  New Standard Control  **
 15271                                  ;
 15272                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15273                                  ;	FORMS ARE OBSOLETE.
 15274                                  ;
 15275                                  ;   =================================================================
 15276                                  ;
 15277                                  ;	ENTRY	(AL) = function code
 15278                                  ;		  0Ch - Control Function subcode
 15279                                  ;		(BX) = File Handle
 15280                                  ;		(CH) = Category Indicator
 15281                                  ;		(CL) = Function within category
 15282                                  ;		(DS:DX) = address for data, if any
 15283                                  ;		(SI) = Passed to device as argument, use depends upon function
 15284                                  ;		(DI) = Passed to device as argument, use depends upon function
 15285                                  ;	EXIT	'C' set if error
 15286                                  ;		  (AX) = error code
 15287                                  ;		'C' clear if OK
 15288                                  ;		  (SI) = Return value, meaning is function dependent
 15289                                  ;		  (DI) = Return value, meaning is function dependent
 15290                                  ;		  (DS:DX) = Return address, use is function dependent
 15291                                  ;	USES	ALL
 15292                                  ;
 15293                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15294                                  ;     (See inc\ioctl.inc for more info)
 15295                                  ;
 15296                                  ;	ENTRY	(AL) = function code
 15297                                  ;		  0Dh - Control Function subcode
 15298                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15299                                  ;		(CH) = Category Indicator
 15300                                  ;		(CL) = Function within category
 15301                                  ;		(DS:DX) = address for data, if any
 15302                                  ;		(SI) = Passed to device as argument, use depends upon function
 15303                                  ;		(DI) = Passed to device as argument, use depends upon function
 15304                                  ;
 15305                                  ;	EXIT	'C' set if error
 15306                                  ;		  (AX) = error code
 15307                                  ;		'C' clear if OK
 15308                                  ;		  (DS:DX) = Return address, use is function dependent
 15309                                  ;	USES	ALL
 15310                                  ;
 15311                                  ;---------------------------------------------------------------------------
 15312                                  	
 15313                                  	; 17/05/2019 - Retro DOS v4.0
 15314                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15315                                  
 15316                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15317                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15318                                  
 15319                                  IOCTLJMPTABLE:	;label	word
 15320                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15321 0000224A [8622]                  	dw	ioctl_getset_data	; 0
 15322 0000224C [8622]                  	dw	ioctl_getset_data   	; 1
 15323 0000224E [D622]                  	dw	ioctl_control_string	; 2
 15324 00002250 [D622]                  	dw	ioctl_control_string	; 3
 15325 00002252 [2A24]                  	dw	ioctl_get_dev		; 4
 15326 00002254 [2A24]                  	dw	ioctl_get_dev		; 5
 15327 00002256 [F022]                  	dw	ioctl_status		; 6
 15328 00002258 [F022]                  	dw	ioctl_status		; 7
 15329 0000225A [9123]                  	dw	ioctl_rem_media		; 8
 15330 0000225C [CF23]                  	dw	ioctl_drive_attr	; 9
 15331 0000225E [1C24]                  	dw	ioctl_handle_redir	; A
 15332 00002260 [0C23]                  	dw	Set_Retry_Parameters	; B
 15333 00002262 [1A23]                  	dw	GENERICIOCTLHANDLE	; C
 15334 00002264 [3123]                  	dw	GENERICIOCTL		; D
 15335                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15336 00002266 [DB24]                  	dw	ioctl_drive_owner	; E
 15337 00002268 [DB24]                  	dw	ioctl_drive_owner	; F
 15338                                  	; MSDOS 6.0
 15339 0000226A [1A23]                  	dw	query_handle_support	; 10h
 15340 0000226C [3123]                  	dw	query_device_support	; 11h
 15341                                  
 15342                                  	; 11/11/2022
 15343                                  _$IOCTL:
 15344 0000226E 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15345 00002270 16                      	push	ss
 15346 00002271 1F                      	pop	ds			;hkn; SS is DOSDATA
 15347                                  
 15348                                  	; MSDOS 3.3
 15349                                  	;cmp	al,0Fh 
 15350                                  	; MSDOS 6.0
 15351 00002272 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15352 00002274 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15353                                  
 15354                                  	; 14/01/2024
 15355                                  	; 28/05/2019
 15356                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15357 00002276 89C7                    	mov	di,ax			; di NOT a PARM
 15358 00002278 81E7FF00                	and	di,0FFh			; di = al
 15359 0000227C D1E7                    	shl	di,1			; di = index into jmp table
 15360                                  	;pop	AX			; Restore AL for generic IOCTL
 15361                                  
 15362 0000227E 2EFFA5[4A22]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15363                                  
 15364                                  ioctl_bad_funj2:
 15365 00002283 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15366                                  
 15367                                  ;--------------------------------------------------------------------------
 15368                                  ;
 15369                                  ; IOCTL: AL = 0,1
 15370                                  ;
 15371                                  ; ENTRY: DS = DOSDATA
 15372                                  ;
 15373                                  ;--------------------------------------------------------------------------
 15374                                  
 15375                                  ioctl_getset_data:
 15376                                  	; MSDOS 6.0
 15377 00002286 E8E043                  	call	SFFromHandle		; ES:DI -> SFT
 15378 00002289 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15379                                  ioctl_bad_handle:
 15380                                  	;mov	al,6
 15381 0000228B B006                    	mov	al,error_invalid_handle
 15382                                  ioctl_error:
 15383 0000228D E9B4E3                  	jmp	SYS_RET_ERR
 15384                                  
 15385                                  ioctl_check_permissions:
 15386 00002290 3C00                    	CMP	AL,0
 15387                                  	;mov	al,[es:di+5]
 15388 00002292 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15389 00002296 741B                    	JZ	short ioctl_read	; read the byte
 15390                                  
 15391 00002298 08F6                    	or	dh,dh
 15392 0000229A 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15393                                  	;mov	al,0Dh
 15394 0000229C B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15395                                  	;jmp	SYS_RET_ERR
 15396 0000229E EBED                    	jmp	short ioctl_error
 15397                                  
 15398                                  ioctl_check_device:
 15399 000022A0 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15400 000022A2 74DF                    	jz	short ioctl_bad_funj2
 15401 000022A4 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15402                                  					;   device bit!! He can muck with the
 15403                                  					;   others at will.
 15404 000022A7 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15405 000022AC 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15406                                  ioctl_ok:
 15407 000022B0 E988E3                  	jmp	SYS_RET_OK
 15408                                  
 15409                                  ioctl_read:
 15410 000022B3 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15411 000022B8 30E4                    	XOR	AH,AH
 15412 000022BA A880                    	test	AL,devid_device 	; Should I set high byte
 15413 000022BC 740D                    	JZ	short ioctl_no_high	; no
 15414 000022BE C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15415                                  	;les	di,[es:di+7]
 15416 000022C3 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15417                                  	;mov	ah,[es:di+5]
 15418 000022C7 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15419                                  ioctl_no_high:
 15420 000022CB 89C2                    	MOV	DX,AX
 15421                                  ioctl_set_dx:	; 16/12/2022
 15422 000022CD E8B5E1                  	call	Get_User_Stack
 15423                                  	;mov	[si+6],dx
 15424 000022D0 895406                  	MOV	[SI+user_env.user_DX],DX
 15425                                  	;;jmp	SYS_RET_OK
 15426                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15427                                  ioctl_ok_j:
 15428                                  	; 16/12/2022
 15429 000022D3 E968E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15430                                  	;jmp	short ioctl_ok
 15431                                  	; 26/07/2019
 15432                                  	;jmp	SYS_RET_OK_clc
 15433                                  
 15434                                  ;--------------------------------------------------------------------------
 15435                                  ;
 15436                                  ; IOCTL: AL = 2,3
 15437                                  ;
 15438                                  ; ENTRY: DS = DOSDATA
 15439                                  ;	 SI = user's DS
 15440                                  ;
 15441                                  ;--------------------------------------------------------------------------
 15442                                  
 15443                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15444                                  ioctl_control_string:
 15445 000022D6 E89043                  	call	SFFromHandle		; ES:DI -> SFT
 15446 000022D9 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15447                                  	; 07/12/2022
 15448                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15449                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15450                                  	; MSDOS 5.0 & MSDOS 6.0
 15451 000022DB 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15452 000022E0 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15453 000022E2 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15454 000022E7 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15455 000022EB 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15456 000022ED E94201                  	JMP	ioctl_do_string
 15457                                  
 15458                                  ;--------------------------------------------------------------------------
 15459                                  ;
 15460                                  ; IOCTL: AL = 6,7
 15461                                  ;
 15462                                  ; ENTRY: DS = DOSDATA
 15463                                  ;
 15464                                  ;--------------------------------------------------------------------------
 15465                                  
 15466                                  ioctl_status:
 15467 000022F0 B401                    	MOV	AH,1
 15468 000022F2 2C06                    	SUB	AL,6			; 6=0,7=1
 15469 000022F4 7402                    	JZ	short ioctl_get_status
 15470 000022F6 B403                    	MOV	AH,3
 15471                                  ioctl_get_status:
 15472 000022F8 50                      	PUSH	AX
 15473 000022F9 E85013                  	call	GET_IO_SFT
 15474 000022FC 58                      	POP	AX
 15475                                  	;JNC	short DO_IOFUNC
 15476                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15477                                  	; 16/12/2022
 15478 000022FD 728C                    	jc	short ioctl_bad_handle
 15479                                  DO_IOFUNC:
 15480 000022FF E89021                  	call	IOFUNC
 15481 00002302 88C4                    	MOV	AH,AL
 15482 00002304 B0FF                    	MOV	AL,0FFH
 15483 00002306 7502                    	JNZ	short ioctl_status_ret
 15484 00002308 FEC0                    	INC	AL
 15485                                  ioctl_status_ret:
 15486                                  	;jmp	SYS_RET_OK
 15487                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15488                                  	;jmp	short ioctl_ok_j
 15489                                  	; 16/12/2022
 15490 0000230A EBA4                    	jmp	short ioctl_ok
 15491                                  
 15492                                  ;--------------------------------------------------------------------------
 15493                                  ;
 15494                                  ; IOCTL: AL = B
 15495                                  ;
 15496                                  ; ENTRY: DS = DOSDATA
 15497                                  ;
 15498                                  ;--------------------------------------------------------------------------
 15499                                  
 15500                                  Set_Retry_Parameters:
 15501                                  	; 09/09/2018
 15502 0000230C 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15503 00002310 09D2                    	OR	DX,DX			; zero retries not allowed
 15504 00002312 7475                    	JZ	short ioctl_bad_fun
 15505 00002314 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15506                                  doneok:
 15507                                  	;jmp	SYS_RET_OK		; Done
 15508                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15509                                  	;jmp	short ioctl_status_ret
 15510                                  	; 16/12/2022
 15511 00002318 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15512                                  
 15513                                  ;--------------------------------------------------------------------------
 15514                                  ;
 15515                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15516                                  ;
 15517                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15518                                  ;	SI:DX -> Users Device Parameter Table
 15519                                  ;	IOCALL -> IOCTL_Req structure
 15520                                  ;
 15521                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15522                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15523                                  ;	call.
 15524                                  ;
 15525                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15526                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15527                                  ;         return address off the stack if the drive is invalid.
 15528                                  ;
 15529                                  ;--------------------------------------------------------------------------
 15530                                  
 15531                                  query_handle_support:	; Entry point for handles
 15532                                  GENERICIOCTLHANDLE:
 15533 0000231A E84C43                  	call	SFFromHandle		; Get SFT for device.
 15534 0000231D 726F                    	jc	short ioctl_bad_handlej
 15535                                  
 15536                                  	;test	word [es:di+5],8000h
 15537                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15538                                  	;test	byte [es:di+6],80h
 15539 0000231F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15540 00002324 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15541                                  
 15542 00002326 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15543                                  	;les	di,[es:di+7]
 15544 0000232B 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15545 0000232F EB0F                    	jmp	short Do_GenIOCTL
 15546                                  
 15547                                  query_device_support:	; Entry point for devices:
 15548                                  GENERICIOCTL:
 15549 00002331 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15550 00002336 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15551 00002339 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15552                                  
 15553 0000233B E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15554 0000233E 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15555                                  
 15556                                  Do_GenIOCTL:
 15557                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15558                                  					; Can device handle Generic IOCTL funcs
 15559                                  	; 09/09/2018
 15560                                  	;test	byte [es:di+4],40h
 15561 00002340 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15562 00002345 7442                    	jz	short ioctl_bad_fun
 15563                                  
 15564                                  	; 17/05/2019 - Retro DOS v4.0
 15565                                  
 15566                                  	; MSDOS 6.0
 15567                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15568 00002347 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15569                                  	;cmp	al,10h
 15570 0000234C 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15571 0000234E 7C0C                    	jl	short SetIOCtlBlock
 15572                                  	
 15573                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15574                                  	;test	byte [es:di+4],80h 
 15575 00002350 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15576 00002355 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15577                                  	;
 15578                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15579 00002357 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15580                                  
 15581                                  SetIOCtlBlock:
 15582 0000235C 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15583 0000235D 57                      	PUSH	DI			; in DS:SI
 15584                                  					; Setup Generic IOCTL Request Block
 15585                                  	;mov	byte [IOCALL_REQLEN],23
 15586 0000235E C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15587                                  	; 07/09/2018 (MSDOS 3.3)
 15588                                  	;;mov	byte [IOCALL_REQFUNC],19
 15589                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15590                                  	;
 15591 00002363 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15592 00002367 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15593 0000236B 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15594 0000236F 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15595 00002373 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15596 00002377 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15597 0000237B 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15598                                  
 15599                                  ;hkn; IOCALL is in DOSDATA
 15600 0000237F BB[7C03]                	MOV	BX,IOCALL
 15601                                  
 15602 00002382 16                      	PUSH	SS
 15603 00002383 07                      	POP	ES
 15604                                  					; DS:SI -> Device header.
 15605 00002384 5E                      	POP	SI
 15606 00002385 1F                      	POP	DS
 15607                                  	; 10/08/2018
 15608 00002386 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15609                                  
 15610                                  ioctl_bad_fun:
 15611 00002389 B001                    	mov	al, error_invalid_function  ; 1
 15612 0000238B E9B6E2                  	jmp	SYS_RET_ERR	
 15613                                  
 15614                                  ioctl_bad_handlej:
 15615 0000238E E9FAFE                  	jmp	ioctl_bad_handle
 15616                                  
 15617                                  ;---------------------------------------------------------------------------
 15618                                  ;
 15619                                  ; IOCTL: AL = 8
 15620                                  ;
 15621                                  ; ENTRY: DS = DOSDATA
 15622                                  ;
 15623                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15624                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15625                                  ;         return address off the stack if the drive is invalid.
 15626                                  ;
 15627                                  ;-------------------------------------------------------------------------
 15628                                  
 15629                                  ioctl_rem_media:
 15630                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15631 00002391 E82B01                  	CALL	Check_If_Net
 15632 00002394 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15633                                  					;   certainly don't know how to do this
 15634                                  					;   call.
 15635                                  	;test	word [es:di+4],800h
 15636                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15637                                  	;test	byte [es:di+5],8
 15638 00002396 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15639 0000239B 74EC                    	JZ	short ioctl_bad_fun		; NO
 15640                                  
 15641                                  ;hkn; SS override for IOCALL
 15642 0000239D 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15643 000023A3 B00D                    	MOV	AL,REMHL  ; 13
 15644 000023A5 88DC                    	MOV	AH,BL			; Unit number
 15645 000023A7 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15646 000023AB 31C0                    	XOR	AX,AX
 15647 000023AD 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15648 000023B1 06                      	PUSH	ES
 15649 000023B2 1F                      	POP	DS
 15650 000023B3 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15651 000023B5 16                      	PUSH	SS
 15652 000023B6 07                      	POP	ES
 15653                                  
 15654                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15655 000023B7 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15656 000023BA 1E                      	push	ds
 15657 000023BB 56                      	push	si
 15658 000023BC E8A822                  	call	DEVIOCALL2
 15659 000023BF 5E                      	pop	si
 15660 000023C0 1F                      	pop	ds
 15661                                  
 15662                                  ;hkn; SS override
 15663 000023C1 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15664 000023C5 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15665 000023C8 B109                    	MOV	CL,9
 15666 000023CA D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15667                                  ioctl_da_ok_j:	; 11/11/2022
 15668 000023CC E96CE2                  	jmp	SYS_RET_OK
 15669                                  
 15670                                  ;-------------------------------------------------------------------------
 15671                                  ;
 15672                                  ; IOCTL: AL = 9
 15673                                  ;
 15674                                  ; ENTRY: DS = DOSDATA
 15675                                  ;
 15676                                  ;-------------------------------------------------------------------------
 15677                                  
 15678                                  ioctl_drive_attr:
 15679                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15680 000023CF 88D8                    	mov	al,bl
 15681 000023D1 E8B946                  	call	GETTHISDRV
 15682 000023D4 7241                    	jc	short ioctl_drv_err
 15683 000023D6 E8B800                  	call	Get_Driver_BL
 15684                                  	; MSDOS 6.0
 15685 000023D9 723C                    	JC	short ioctl_drv_err	; drive not valid
 15686                                  
 15687                                  	;mov	dx,[es:di+4]
 15688 000023DB 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15689                                  					; get device attribute word
 15690 000023DF 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15691                                  
 15692                                  ;hkn; SS override
 15693 000023E1 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15694                                  	;test	word [es:di+43h],8000h
 15695                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15696                                  	;test	byte [es:di+44h],80h
 15697 000023E6 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15698 000023EB 7403                    	JZ	short IOCTLShare
 15699                                  
 15700                                  	;or	dx,1000h ; (MSDOS 3.3)
 15701                                  
 15702                                  ;	Net devices don't return a device attribute word.
 15703                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15704                                  
 15705 000023ED BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15706                                  IOCTLShare:
 15707 000023F0 16                      	push	ss
 15708 000023F1 1F                      	pop	ds
 15709 000023F2 BE[BE03]                	MOV	SI,OPENBUF
 15710 000023F5 80C341                  	ADD	BL,"A"	; 41h
 15711 000023F8 881C                    	MOV	[SI],BL
 15712 000023FA C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15713 000023FF B80003                  	MOV	AX,0300h
 15714 00002402 F8                      	CLC
 15715                                  	;INT	int_IBM
 15716 00002403 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15717                                  			; DS:SI -> ASCIZ disk device name 
 15718                                  			; (may be full path or only drive
 15719                                  			; specifier--must include the colon)
 15720                                  			; Return: CF clear if absolute disk access allowed
 15721 00002405 7303                    	JNC	short IOCTLLocal	; Not shared
 15722                                  	;OR	DX,0200H		; Shared, bit 9
 15723                                  	; 17/12/2022
 15724 00002407 80CE02                  	or	dh,02h
 15725                                  IOCTLLocal:
 15726                                  	;test	word [es:di+43h],1000h
 15727                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15728                                  	;test	byte [es:di+44h],10h
 15729 0000240A 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15730                                  	;JZ	short ioctl_set_DX
 15731                                  	; 16/12/2022
 15732 0000240F 7403                    	jz	short _ioctl_set_DX
 15733                                  	;OR	DX,8000h
 15734                                  	; 17/12/2022
 15735 00002411 80CE80                  	or	dh,80h
 15736                                  ;ioctl_set_DX:
 15737                                  _ioctl_set_DX:
 15738                                  	; 16/12/2022
 15739 00002414 E9B6FE                  	jmp	ioctl_set_dx
 15740                                  ; 16/12/2022
 15741                                  %if 0	
 15742                                  	call	Get_User_Stack
 15743                                  	MOV	[SI+user_env.user_DX],DX
 15744                                  	;;jmp	SYS_RET_OK
 15745                                  	;; 25/06/2019
 15746                                  	;jmp	SYS_RET_OK_clc
 15747                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15748                                  ioctl_gd_ok_j:
 15749                                  	jmp	short ioctl_da_ok_j
 15750                                  %endif
 15751                                  
 15752                                  ioctl_drv_err:
 15753 00002417 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15754                                  ioctl_gd_err_j:	; 11/11/2022
 15755 00002419 E928E2                  	jmp	SYS_RET_ERR
 15756                                  
 15757                                  ;--------------------------------------------------------------------------
 15758                                  ;
 15759                                  ; IOCTL: AL = A
 15760                                  ;
 15761                                  ; ENTRY: DS = DOSDATA
 15762                                  ;
 15763                                  ;--------------------------------------------------------------------------
 15764                                  
 15765                                  ioctl_handle_redir:
 15766 0000241C E84A42                  	call	SFFromHandle		; ES:DI -> SFT
 15767 0000241F 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15768 00002421 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15769                                  
 15770                                  ioctl_got_sft:
 15771                                  	;mov	dx,[es:di+5]
 15772 00002424 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15773                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15774                                  	; 16/12/2022
 15775 00002428 EBEA                    	jmp	short _ioctl_set_DX
 15776                                  
 15777                                  	; 16/12/2022
 15778                                  ;ioctl_bad_funj:
 15779                                  	;JMP	ioctl_bad_fun
 15780                                  
 15781                                  ;--------------------------------------------------------------------------
 15782                                  ;
 15783                                  ; IOCTL: AL= 4,5
 15784                                  ;
 15785                                  ; ENTRY: DS = DOSDATA
 15786                                  ;	 SI = user's DS
 15787                                  ;
 15788                                  ;
 15789                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15790                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15791                                  ;         return address off the stack if the drive is invalid.
 15792                                  ;
 15793                                  ;-------------------------------------------------------------------------
 15794                                  
 15795                                  ioctl_get_dev:
 15796 0000242A E89200                  	CALL	Check_If_Net
 15797                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15798                                  					; certainly don't know how to do this
 15799                                  					; call.
 15800                                  	; 16/12/2022
 15801 0000242D 7403                    	jz	short ioctl_do_string
 15802                                  ioctl_bad_funj:
 15803 0000242F E957FF                  	JMP	ioctl_bad_fun
 15804                                  
 15805                                  ioctl_do_string:
 15806                                  	;test	word [es:di+4],4000h
 15807                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15808                                  	;test	byte [es:di+5],40h
 15809 00002432 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15810 00002437 74F6                    	JZ	short ioctl_bad_funj		; NO
 15811                                  					; assume IOCTL read
 15812 00002439 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15813                                  
 15814 0000243E A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15815 00002440 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15816                                  
 15817                                  					; it is an IOCTL write
 15818 00002442 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15819                                  
 15820                                  ioctl_control_call:
 15821 00002447 B016                    	MOV	AL,DRDWRHL ; 22
 15822                                  ioctl_setup_pkt:
 15823 00002449 88DC                    	MOV	AH,BL			; Unit number
 15824 0000244B A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15825 0000244E 31C0                    	XOR	AX,AX
 15826 00002450 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15827 00002453 A2[8903]                	MOV	[IOMED],AL
 15828 00002456 890E[8E03]              	MOV	[IOSCNT],CX
 15829 0000245A 8916[8A03]              	MOV	[IOXAD],DX
 15830 0000245E 8936[8C03]              	MOV	[IOXAD+2],SI
 15831 00002462 06                      	PUSH	ES
 15832 00002463 1F                      	POP	DS
 15833 00002464 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15834 00002466 16                      	PUSH	SS
 15835 00002467 07                      	POP	ES
 15836                                  
 15837 00002468 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15838                                  ioctl_do_IO:
 15839 0000246B E8F921                  	call	DEVIOCALL2
 15840                                  
 15841                                  ;hkn; SS override for IOCALL
 15842                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15843                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15844                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15845 0000246E 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15846 00002474 7507                    	JNZ	short ioctl_string_err
 15847                                  
 15848                                  ;hkn; SS override
 15849 00002476 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15850                                  	; 16/12/2022
 15851 0000247A E9BEE1                  	jmp	SYS_RET_OK
 15852                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15853                                  	;jmp	short ioctl_gd_ok_j
 15854                                  
 15855                                  ioctl_string_err:
 15856 0000247D 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15857                                  device_err:
 15858 00002482 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15859 00002486 89F8                    	MOV	AX,DI
 15860 00002488 E86B30                  	call	SET_I24_EXTENDED_ERROR
 15861                                  
 15862                                  ;hkn; use SS override
 15863                                  ;hkn;	mov	ax,[CS:EXTERR]
 15864 0000248B 36A1[2403]              	mov	ax,[SS:EXTERR]
 15865                                  	;jmp	SYS_RET_ERR
 15866                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15867 0000248F EB88                    	jmp	short ioctl_gd_err_j
 15868                                  
 15869                                  ; 17/05/2019 - Retro DOS v4.0
 15870                                  
 15871                                  ;--------------------------------------------------------------------------
 15872                                  ; Proc name : Get_Driver_BL
 15873                                  ;
 15874                                  ;	DS is DOSDATA
 15875                                  ;	BL is drive number (0=default)
 15876                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15877                                  ;	No regs modified
 15878                                  ;
 15879                                  ;---------------------------------------------------------------------------
 15880                                  
 15881                                  Get_Driver_BL:
 15882 00002491 50                      	PUSH	AX
 15883 00002492 88D8                    	MOV	AL,BL			; Drive
 15884 00002494 E8F645                  	call	GETTHISDRV
 15885 00002497 7224                    	jc	short ioctl_bad_drv
 15886 00002499 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15887 0000249B C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15888 000024A0 C43E[A205]              	LES	DI,[THISCDS]
 15889                                  	;test	word [es:di+43h],8000h
 15890                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15891                                  	;test	byte [es:di+44h],80h
 15892 000024A4 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15893                                  	;les	di,[es:di+45h]
 15894 000024A9 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15895 000024AD 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15896 000024AF C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15897                                  	;mov	bl,[es:di+1]
 15898 000024B4 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15899                                  	;les	di,[es:di+13h]
 15900 000024B8 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15901                                  got_dev_ptr:
 15902 000024BC F8                      	CLC
 15903                                  ioctl_bad_drv:
 15904 000024BD 58                      	POP	AX
 15905 000024BE C3                      	retn
 15906                                  
 15907                                  ;-------------------------------------------------------------------------
 15908                                  ; Proc Name : Check_If_Net:
 15909                                  ;
 15910                                  ;
 15911                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15912                                  ; If no device is found, the return address is popped off the stack, and a
 15913                                  ; jump is made to ioctl_drv_err.
 15914                                  ;
 15915                                  ; On Entry:
 15916                                  ; Registers same as those for Get_Driver_BL
 15917                                  ;
 15918                                  ; On Exit:
 15919                                  ; ZERO flag	- set if not a net device
 15920                                  ;		- reset if net device
 15921                                  ; ES:DI -> the device
 15922                                  ;
 15923                                  ;
 15924                                  ; BUGBUG: This function assumes the following stack setup on entry
 15925                                  ;
 15926                                  ;	  SP+2 -> Error return address
 15927                                  ;	  SP   -> Normal return address
 15928                                  ;
 15929                                  ;-------------------------------------------------------------------------
 15930                                  
 15931                                  Check_If_Net:
 15932                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15933 000024BF E8CFFF                  	CALL	Get_Driver_BL
 15934 000024C2 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15935 000024C4 06                      	PUSH	ES
 15936 000024C5 57                      	PUSH	DI
 15937 000024C6 C43E[A205]              	LES	DI,[THISCDS]
 15938                                  	;test	word [es:di+43h],8000h
 15939                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15940                                  	;test	byte [es:di+44h],80h
 15941 000024CA 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15942 000024CF 5F                      	POP	DI
 15943 000024D0 07                      	POP	ES
 15944 000024D1 C3                      	retn
 15945                                  
 15946                                  ioctl_drv_err_pop:
 15947 000024D2 58                      	pop	ax			; pop off return address
 15948 000024D3 E941FF                  	jmp	ioctl_drv_err
 15949                                  
 15950                                  ioctl_bad_funj3:
 15951 000024D6 E9B0FE                  	jmp	ioctl_bad_fun
 15952                                  
 15953                                  ioctl_string_errj:
 15954 000024D9 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15955                                  
 15956                                  ;--------------------------------------------------------------------------
 15957                                  ;
 15958                                  ; IOCTL: AL = E, F
 15959                                  ;
 15960                                  ; ENTRY: DS = DOSDATA
 15961                                  ;
 15962                                  ;
 15963                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15964                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15965                                  ;         return address off the stack if the drive is invalid.
 15966                                  ;
 15967                                  ;--------------------------------------------------------------------------
 15968                                  
 15969                                  ioctl_drive_owner:
 15970                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15971 000024DB E8E1FF                  	Call	Check_If_Net
 15972 000024DE 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15973                                  					;   certainly don't know how to do this
 15974                                  					;   call.
 15975                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15976                                  	; 09/09/2018
 15977                                  	;test	byte [es:di+4],40h
 15978 000024E0 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15979 000024E5 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15980                                  	;mov	byte [IOCALL_REQFUNC],23
 15981 000024E7 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15982 000024EC 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15983 000024EE 7405                    	jz	short GetOwner
 15984                                  SetOwner:
 15985 000024F0 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15986                                  GetOwner:
 15987 000024F5 B00D                    	MOV	AL,OWNHL ; 13
 15988 000024F7 88DC                    	MOV	AH,BL			; Unit number
 15989 000024F9 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15990 000024FC 31C0                    	XOR	AX,AX
 15991 000024FE A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15992 00002501 06                      	PUSH	ES
 15993 00002502 1F                      	POP	DS
 15994 00002503 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15995 00002505 16                      	PUSH	SS
 15996 00002506 07                      	POP	ES
 15997 00002507 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15998 0000250A 1E                      	push	ds
 15999 0000250B 56                      	push	si
 16000 0000250C E85821                  	call	DEVIOCALL2
 16001 0000250F 5E                      	pop	si
 16002 00002510 1F                      	pop	ds
 16003                                  ;hkn; SS override
 16004                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16005                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16006 00002511 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16007 00002517 75C0                    	jnz	short ioctl_string_errj
 16008 00002519 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16009                                  					; owner returned is 1-based.
 16010 0000251D E91BE1                  	jmp	SYS_RET_OK
 16011                                  
 16012                                  ;============================================================================
 16013                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16014                                  ;============================================================================
 16015                                  ; 07/08/2018 - Retro DOS v3.0
 16016                                  ; 17/05/2019 - Retro DOS v4.0
 16017                                  
 16018                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16019                                  ;	NAME	DOS_DELETE
 16020                                  
 16021                                  ;
 16022                                  ;	Microsoft Confidential
 16023                                  ;	Copyright (C) Microsoft Corporation 1991
 16024                                  ;	All Rights Reserved.
 16025                                  ;
 16026                                  
 16027                                  ;**	DELETE.ASM - Low level routine for deleting files
 16028                                  ;----------------------------------------------------------------------------
 16029                                  ;		DOS_DELETE
 16030                                  ;		REN_DEL_Check
 16031                                  ;		FastOpen_Delete	       ; DOS 3.3
 16032                                  ;		FastOpen_Update	       ; DOS 3.3
 16033                                  
 16034                                  ;   Revision history:
 16035                                  ;
 16036                                  ;   A000  version 4.00	Jan. 1988
 16037                                  ;   A001  Fastopen Rename fix	April 1989
 16038                                  
 16039                                  ;Installed = TRUE
 16040                                  
 16041                                  ;	i_need	NoSetDir,BYTE
 16042                                  ;	i_need	Creating,BYTE
 16043                                  ;	i_need	DELALL,BYTE
 16044                                  ;	i_need	THISDPB,DWORD
 16045                                  ;	i_need	THISSFT,DWORD
 16046                                  ;	i_need	THISCDS,DWORD
 16047                                  ;	i_need	CURBUF,DWORD
 16048                                  ;	i_need	ATTRIB,BYTE
 16049                                  ;	i_need	SATTRIB,BYTE
 16050                                  ;	i_need	WFP_START,WORD
 16051                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16052                                  ;	i_need	NAME1,BYTE			 ;BN001
 16053                                  ;	i_need	FoundDel,BYTE
 16054                                  ;	i_need	AUXSTACK,BYTE
 16055                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16056                                  ;	i_need	JShare,DWORD
 16057                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16058                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16059                                  ;
 16060                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16061                                  ;
 16062                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16063                                  ;	i_need	DMAADD,DWORD
 16064                                  ;	i_need	RENAMEDMA,BYTE
 16065                                  
 16066                                  ;----------------------------------------------------------------------------
 16067                                  ;
 16068                                  ; Procedure Name : DOS_DELETE
 16069                                  ;
 16070                                  ; Inputs:
 16071                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16072                                  ;		terminated)
 16073                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16074                                  ;		( = -1 if current dir not involved, else
 16075                                  ;		 Points to first char after last "/" of current dir part)
 16076                                  ;	[THISCDS] Points to CDS being used
 16077                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16078                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16079                                  ; Function:
 16080                                  ;	Delete the specified file(s)
 16081                                  ; Outputs:
 16082                                  ;	CARRY CLEAR
 16083                                  ;		OK
 16084                                  ;	CARRY SET
 16085                                  ;	    AX is error code
 16086                                  ;		error_file_not_found
 16087                                  ;			Last element of path not found
 16088                                  ;		error_path_not_found
 16089                                  ;			Bad path (not in curr dir part if present)
 16090                                  ;		error_bad_curr_dir
 16091                                  ;			Bad path in current directory part of path
 16092                                  ;		error_access_denied
 16093                                  ;			Attempt to delete device or directory
 16094                                  ;		***error_sharing_violation***
 16095                                  ;			Deny both access required, generates an INT 24.
 16096                                  ;			This error is NOT returned. The INT 24H is generated,
 16097                                  ;			  and the file is ignored (not deleted). Delete will
 16098                                  ;			  simply continue on looking for more files.
 16099                                  ;			  Carry will NOT be set in this case.
 16100                                  ; DS preserved, others destroyed
 16101                                  ;
 16102                                  ;----------------------------------------------------------------------------
 16103                                  
 16104                                  FILEFOUND   equ 01h
 16105                                  FILEDELETED equ 10h
 16106                                  
 16107                                  
 16108                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16109                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16110                                  
 16111                                  DOS_DELETE:
 16112                                  
 16113                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16114                                  ;hkn; appropriately at this point.
 16115                                  
 16116 00002520 E82DED                  	call	TestNet
 16117 00002523 7306                    	JNC	short LOCAL_DELETE
 16118                                  
 16119                                  ;IF NOT Installed
 16120                                  ;	transfer NET_DELETE
 16121                                  ;ELSE
 16122                                  	;MOV	AX,(MultNET SHL 8) | 19
 16123                                  	;INT	2FH
 16124                                  	;return
 16125                                  
 16126 00002525 B81311                  	mov	ax,1113h
 16127 00002528 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16128                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16129                                  			;		fully-qualified filename in DOS CS
 16130                                  			; SDA CDS pointer -> current directory structure for drive with file
 16131                                  			; Return: CF set on error
 16132 0000252A C3                      	retn
 16133                                  ;ENDIF
 16134                                  
 16135                                  LOCAL_DELETE:
 16136 0000252B C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16137 00002530 E8DFED                  	call	ECritDisk
 16138                                  	;mov	word [CREATING],0E500h
 16139 00002533 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16140 00002539 8B36[B205]              	MOV	SI,[WFP_START]
 16141                                  SKPNUL:
 16142 0000253D AC                      	LODSB
 16143 0000253E 08C0                    	OR	AL,AL
 16144 00002540 75FB                    	JNZ	short SKPNUL		; go to end
 16145 00002542 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16146 00002545 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16147 00002549 7506                    	JNZ	short TEST_QUEST
 16148 0000254B 807C022A                	CMP	BYTE [SI+2],"*"
 16149 0000254F 741F                    	JZ	short CHECK_ATTS
 16150                                  TEST_QUEST:
 16151 00002551 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16152 00002554 87FE                    	XCHG	DI,SI
 16153                                  
 16154 00002556 16                      	push	ss
 16155                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16156 00002557 07                      	pop	es ; 17/05/2019
 16157                                  
 16158 00002558 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16159 0000255B B90400                  	MOV	CX,4		; four sets of "??"
 16160 0000255E F3AF                    	REPE	SCASW
 16161 00002560 751C                    	JNZ	short NOT_ALL
 16162 00002562 87FE                    	XCHG	DI,SI
 16163 00002564 AD                      	LODSW
 16164 00002565 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16165 00002568 7514                    	JNZ	short NOT_ALL
 16166 0000256A AD                      	LODSW
 16167 0000256B 3D3F3F                  	CMP	AX,"??"
 16168 0000256E 750E                    	JNZ	short NOT_ALL
 16169                                  CHECK_ATTS:
 16170 00002570 A0[6D05]                	MOV	AL,[SATTRIB]
 16171                                  	;and	al,1Fh
 16172 00002573 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16173                                  					; Look only at hidden bits
 16174                                  	;cmp	al,1Fh
 16175 00002575 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16176                                  					; All must be set
 16177 00002577 7505                    	JNZ	short NOT_ALL
 16178                                  
 16179                                  ; NOTE WARNING DANGER-----
 16180                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16181                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16182                                  
 16183 00002579 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16184                                  NOT_ALL:
 16185 0000257E C606[4C03]01            	MOV	byte [NoSetDir],1
 16186 00002583 E89519                  	call	GetPathNoSet
 16187 00002586 7312                    	JNC	short Del_found
 16188 00002588 750B                    	JNZ	short _bad_path
 16189 0000258A 08C9                    	OR	CL,CL
 16190 0000258C 7407                    	JZ	short _bad_path
 16191                                  No_file:
 16192 0000258E B80200                  	MOV	AX,error_file_not_found
 16193                                  ErrorReturn:
 16194 00002591 F9                      	STC
 16195                                  	;call	LCritDisk
 16196                                  	;retn
 16197                                  	; 18/12/2022
 16198 00002592 E998ED                  	jmp	LCritDisk
 16199                                  
 16200                                  _bad_path:
 16201 00002595 B80300                  	MOV	AX,error_path_not_found
 16202 00002598 EBF7                    	JMP	short ErrorReturn
 16203                                  
 16204                                  Del_found:
 16205 0000259A 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16206 0000259C 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16207 000025A1 7405                    	JZ	short NOT_DIR
 16208                                  Del_access_err:
 16209 000025A3 B80500                  	MOV	AX,error_access_denied
 16210 000025A6 EBE9                    	JMP	short ErrorReturn
 16211                                  
 16212                                  NOT_DIR:
 16213 000025A8 08E4                    	OR	AH,AH			; Check if device name
 16214 000025AA 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16215                                  
 16216                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16217                                  
 16218                                  DELFILE:
 16219 000025AC 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16220                                  
 16221                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16222                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16223                                  
 16224 000025B1 1E                      	PUSH	DS
 16225 000025B2 8A26[7F05]              	MOV	AH,[DELALL]
 16226 000025B6 C53E[E205]              	LDS	DI,[CURBUF]
 16227                                  	
 16228                                  ;hkn; SS override
 16229 000025BA 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16230 000025C0 7509                    	JNZ	short DoDelete		; yes
 16231                                  
 16232 000025C2 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16233 000025C6 7403                    	JZ	short DoDelete		; not read only
 16234                                  
 16235 000025C8 1F                      	POP	DS
 16236 000025C9 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16237                                  
 16238                                  DoDelete:
 16239 000025CB E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16240 000025CE 7303                    	JNC	short DEL_SHARE_OK
 16241 000025D0 1F                      	POP	DS
 16242 000025D1 EB2A                    	JMP	SHORT DELNXT		; Skip it
 16243                                  
 16244                                  DEL_SHARE_OK:
 16245                                  	; 17/05/2019 - Retro DOS v4.0
 16246                                  	; MSDOS 6.0
 16247                                  	;test	byte [di+5],40h
 16248 000025D3 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16249                                  					;LB. if already dirty		  ;AN000;
 16250 000025D7 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16251 000025D9 E86C35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16252                                  	;or	byte [di+5],40h
 16253 000025DC 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16254                                  yesdirty:
 16255 000025E0 8827                    	mov	[bx],ah 
 16256                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16257 000025E2 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16258 000025E4 1F                      	POP	DS
 16259 000025E5 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16260                                  
 16261 000025EA 83FB02                  	CMP	BX,2
 16262 000025ED 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16263                                  	;cmp	bx,[es:bp+0Dh]
 16264 000025EF 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16265 000025F3 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16266                                  
 16267 000025F5 E8BE28                  	call	RELEASE 		; Free file data
 16268 000025F8 7252                    	JC	short No_fileJ
 16269                                  
 16270                                  ; DOS 3.3  FastOpen
 16271                                  
 16272 000025FA E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16273                                  
 16274                                  ; DOS 3.3  FastOpen
 16275                                  
 16276                                  DELNXT:
 16277 000025FD C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16278 00002601 E88218                  	call	GETENTRY		; Registers need to be reset
 16279 00002604 7246                    	JC	short No_fileJ
 16280 00002606 E8BB17                  	call	NEXTENT
 16281 00002609 73A1                    	JNC	short DELFILE
 16282 0000260B C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16283                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16284                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16285                                  	;;mov	al,[es:bp+0]
 16286                                  	; 15/12/2022
 16287 0000260F 268A4600                	MOV	AL,[ES:BP]
 16288 00002613 E82D34                  	call	FLUSHBUF
 16289 00002616 7234                    	JC	short No_fileJ
 16290                                  ;
 16291                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16292                                  ;
 16293                                  ;   not found not deleted		file not found
 16294                                  ;   not found	  deleted		*** impossible ***
 16295                                  ;	found not deleted		access denied (read-only)
 16296                                  ;	found	  deleted		no error
 16297                                  ;
 16298 00002618 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16299 0000261D 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16300                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16301                                  ; and to force the DOS to issue a media check.
 16302 0000261F F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16303 00002624 741C                    	jz	short No_Set_Flag
 16304 00002626 50                      	PUSH	AX
 16305 00002627 06                      	PUSH	ES
 16306 00002628 57                      	PUSH	DI
 16307 00002629 C43E[A205]              	LES	DI,[THISCDS]
 16308 0000262D 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16309 00002630 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16310 00002633 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16311                                  	
 16312                                  	; MSDOS 6.0
 16313 00002637 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16314 00002639 E8DC04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16315                                  	 
 16316 0000263C E88B30                  	call	FATREAD_CDS		; force media check
 16317 0000263F 5F                      	POP	DI
 16318 00002640 07                      	POP	ES
 16319 00002641 58                      	POP	AX
 16320                                  No_Set_Flag:
 16321                                  	;call	LCritDisk		; carry is clear
 16322                                  	;retn
 16323                                  	; 18/12/2022
 16324 00002642 E9E8EC                  	jmp	LCritDisk
 16325                                  DelError:
 16326 00002645 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16327 0000264A 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16328                                  No_fileJ:
 16329 0000264C E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16330                                  Del_access_errJ:
 16331 0000264F E951FF                  	JMP	Del_access_err ; 10/08/2018
 16332                                  
 16333                                  ; 08/08/2018 - Retro DOS v3.0
 16334                                  
 16335                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16336                                  ;---------------------------------------------------------------------------
 16337                                  ; Procedure Name : REN_DEL_Check
 16338                                  ;
 16339                                  ; Inputs:
 16340                                  ;	[THISDPB] set
 16341                                  ;	[CURBUF+2]:BX points to entry
 16342                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16343                                  ;	[WFP_Start] points to name
 16344                                  ; Function:
 16345                                  ;	Check for Exclusive access on given file.
 16346                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16347                                  ; Outputs:
 16348                                  ;	ES:BP = [THISDPB]
 16349                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16350                                  ;		last element will be loaded from the directory entry.  This is
 16351                                  ;		so the name given to the sharer doesn't have any meta chars in
 16352                                  ;		it.
 16353                                  ;	Carry set if sharing violation, INT 24H generated
 16354                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16355                                  ;		This is because input AX is preserved.
 16356                                  ;		Caller must set the error if needed.
 16357                                  ;	Carry clear
 16358                                  ;		OK
 16359                                  ; AX,DS,BX,SI,DI preserved
 16360                                  ;---------------------------------------------------------------------------
 16361                                  
 16362                                  REN_DEL_Check:
 16363                                  
 16364 00002652 1E                      	PUSH	DS
 16365 00002653 57                      	PUSH	DI
 16366 00002654 50                      	PUSH	AX
 16367 00002655 53                      	PUSH	BX
 16368 00002656 56                      	PUSH	SI		; Save CURBUF pointers
 16369                                  	
 16370 00002657 16                      	push	ss
 16371 00002658 07                      	pop	es
 16372                                  
 16373                                  ;hkn; context ES will assume ES to DOSDATA
 16374                                  ;hkn; ASSUME	ES:DOSGROUP
 16375                                  
 16376                                  ;hkn; SS override
 16377 00002659 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16378 0000265E 89DE                    	MOV	SI,BX
 16379                                  
 16380                                  ;hkn; SS override
 16381 00002660 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16382 00002665 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16383 00002667 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16384 0000266A E883EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16385 0000266D 49                      	DEC	CX		; Don't include nul in count
 16386 0000266E 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16387 00002670 E8D446                  	call	SkipBack	; Back up one element
 16388 00002673 47                      	INC	DI		; Point to start of last element
 16389                                  
 16390                                  	; 17/05/2019 - Retro DOS v4.0
 16391                                  ;hkn; SS override
 16392                                  	; MSDOS 6.0
 16393 00002674 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16394                                  	;
 16395 00002679 E832FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16396 0000267C 5E                      	POP	SI		; Get back entry pointers
 16397 0000267D 5B                      	POP	BX
 16398 0000267E 53                      	PUSH	BX
 16399 0000267F 56                      	PUSH	SI		; Back on stack
 16400                                  	
 16401 00002680 16                      	push	ss
 16402 00002681 1F                      	pop	ds
 16403                                  
 16404                                  ;hkn; context DS will assume ES to DOSDATA
 16405                                  ;hkn; ASSUME	DS:DOSGROUP
 16406                                  
 16407                                  ; Close the file if possible by us.
 16408                                  ;
 16409                                  ;if installed
 16410 00002682 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16411                                  ;else
 16412                                  ;	Call	ShCloseFile
 16413                                  ;endif
 16414 00002686 8C1E[A005]              	MOV	[THISSFT+2],DS
 16415                                  
 16416                                  ;hkn; AUXSTACK is in DOSDATA
 16417 0000268A C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16418                                  				; Scratch space
 16419 00002690 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16420 00002692 E8AB24                  	call	DOOPEN		; Fill in SFT for share check
 16421 00002695 C43E[9E05]              	LES	DI,[THISSFT]
 16422                                  	;mov	word [es:di+2],10h
 16423 00002699 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16424                                  				; requires exclusive access
 16425                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16426 0000269F 26C7050100              	mov	word [ES:DI],1
 16427 000026A4 E8C44C                  	call	ShareEnter
 16428 000026A7 720D                    	jc	short CheckDone
 16429 000026A9 C43E[9E05]              	LES	DI,[THISSFT]
 16430                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16431 000026AD 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16432                                  	
 16433 000026B2 E8B14C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16434 000026B5 F8                      	CLC
 16435                                  CheckDone:
 16436 000026B6 C42E[8A05]              	LES	BP,[THISDPB]
 16437 000026BA 5E                      	POP	SI
 16438 000026BB 5B                      	POP	BX
 16439 000026BC 58                      	POP	AX
 16440 000026BD 5F                      	POP	DI
 16441 000026BE 1F                      	POP	DS
 16442 000026BF C3                      	retn
 16443                                  
 16444                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16445                                  ;---------------------------------------------------------------------------
 16446                                  ; Procedure Name : FastOpen_Delete
 16447                                  ; Inputs:
 16448                                  ;	None
 16449                                  ; Function:
 16450                                  ;	Call FastOpen to delete the dir info.
 16451                                  ; Outputs:
 16452                                  ;	None
 16453                                  ;---------------------------------------------------------------------------
 16454                                  
 16455                                  FastOpen_Delete:
 16456 000026C0 9C                      	PUSHF			; save flag
 16457 000026C1 56                      	PUSH	SI		; save registers
 16458 000026C2 53                      	PUSH	BX
 16459 000026C3 50                      	PUSH	AX
 16460                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16461                                  ;hkn; SS override
 16462                                  	; 17/05/2019 - Retro DOS v4.0
 16463                                  	; MSDOS 6.0
 16464 000026C4 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16465                                  	
 16466 000026C9 B003                    	MOV	AL,FONC_delete	; al = 3
 16467                                  fastinvoke:
 16468                                  ;hkn; FastTable is in DOSDATA
 16469 000026CB BB[320D]                	MOV	BX,FastTable+2
 16470 000026CE FF1F                    	CALL	far [BX]	; call fastopen
 16471 000026D0 58                      	POP	AX		; restore registers
 16472 000026D1 5B                      	POP	BX
 16473 000026D2 5E                      	POP	SI
 16474 000026D3 9D                      	POPF			; restore flag
 16475 000026D4 C3                      	retn
 16476                                  
 16477                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16478                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16479                                  
 16480                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16481                                  ;---------------------------------------------------------------------------
 16482                                  ; PROCEDURE Name : FastOpen_Rename
 16483                                  ;
 16484                                  ; Inputs:
 16485                                  ;	 REN_WFP   = Path Name
 16486                                  ;	 NAME1	   = New Name
 16487                                  ; Function:
 16488                                  ;	Call FastOpen to rename the dir entry in the cache
 16489                                  ; Outputs:
 16490                                  ;	None
 16491                                  ;---------------------------------------------------------------------------
 16492                                  
 16493                                  FastOpen_Rename:
 16494                                  	; 17/05/2019 - Retro DOS v4.0
 16495                                  	; 08/08/2018 - Retro DOS v3.0
 16496                                  	; MSDOS 6.0
 16497 000026D5 9C                      	PUSHF			;AN001 save flag
 16498 000026D6 56                      	PUSH	SI		;AN001 save registers
 16499 000026D7 57                      	PUSH	DI		;AN001
 16500 000026D8 53                      	PUSH	BX		;AN001
 16501 000026D9 50                      	PUSH	AX		;AN001
 16502                                  	;
 16503                                  ;hkn; SS override
 16504 000026DA 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16505                                  
 16506                                  ;hkn; NAME1 is in DOSDATA
 16507 000026DF BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16508                                  	;mov	al,6
 16509 000026E2 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16510                                  	
 16511                                  ;hkn; FastTable is in DOSDATA
 16512 000026E4 BB[320D]                	MOV	BX,FastTable+2
 16513 000026E7 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16514                                  	
 16515 000026E9 58                      	POP	AX		; restore registers  ;AN001
 16516 000026EA 5B                      	POP	BX				     ;AN001
 16517 000026EB 5F                      	POP	DI				     ;AN001
 16518 000026EC 5E                      	POP	SI				     ;AN001
 16519 000026ED 9D                      	POPF			; restore flag	     ;AN001
 16520 000026EE C3                      	retn					     ;AN001
 16521                                  
 16522                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16523                                  ;---------------------------------------------------------------------------
 16524                                  ; Procedure Name : FastOpen_Update
 16525                                  ;
 16526                                  ; Inputs:
 16527                                  ;	DL     drive number (A=0,B=1,,,)
 16528                                  ;	CX     first cluster #
 16529                                  ;	AH     0 updates dir entry
 16530                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16531                                  ;	ES:DI  directory entry
 16532                                  ; Function:
 16533                                  ;	Call FastOpen to update the dir info.
 16534                                  ; Outputs:
 16535                                  ;	None
 16536                                  ;---------------------------------------------------------------------------
 16537                                  
 16538                                  FastOpen_Update:
 16539 000026EF 9C                      	PUSHF			; save flag
 16540 000026F0 56                      	PUSH	SI
 16541 000026F1 53                      	PUSH	BX		; save regs
 16542 000026F2 50                      	PUSH	AX
 16543 000026F3 B004                    	MOV	AL,FONC_update	; al = 4
 16544 000026F5 EBD4                    	JMP	short fastinvoke
 16545                                  
 16546                                  	; 17/05/2019
 16547                                  
 16548                                  	; MSDOS 6.0
 16549                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16550                                  ;---------------------------------------------------------------------------
 16551                                  Fast_Dispatch:
 16552                                  ;hkn; FastTable is in DOSDATA
 16553 000026F7 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16554                                  ;hkn; use SS override
 16555 000026FA 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16556 000026FD C3                      	retn
 16557                                  
 16558                                  ;============================================================================
 16559                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16560                                  ;============================================================================
 16561                                  ; 08/08/2018 - Retro DOS v3.0
 16562                                  ; 17/05/2019 - Retro DOS v4.0
 16563                                  
 16564                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16565                                  ;	NAME	DOS_RENAME
 16566                                  
 16567                                  ;**	Low level routine for renaming files
 16568                                  ;----------------------------------------------------------------------------
 16569                                  ;	DOS_RENAME
 16570                                  ;
 16571                                  ;	Modification history:
 16572                                  ;
 16573                                  ;	    Created: ARR 30 March 1983
 16574                                  
 16575                                  ;----------------------------------------------------------------------------
 16576                                  ;
 16577                                  ; Procedure Name : DOS_RENAME
 16578                                  ;
 16579                                  ; Inputs:
 16580                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16581                                  ;		chars, NUL terminated)
 16582                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16583                                  ;		( = -1 if current dir not involved, else
 16584                                  ;		 Points to first char after last "/" of current dir part)
 16585                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16586                                  ;		chars, NUL terminated)
 16587                                  ;	[THISCDS] Points to CDS being used
 16588                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16589                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16590                                  ; Function:
 16591                                  ;	Rename the specified file(s)
 16592                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16593                                  ; Outputs:
 16594                                  ;	CARRY CLEAR
 16595                                  ;	    OK
 16596                                  ;	CARRY SET
 16597                                  ;	    AX is error code
 16598                                  ;		error_file_not_found
 16599                                  ;			No match for source, or dest path invalid
 16600                                  ;		error_not_same_device
 16601                                  ;			Source and dest are on different devices
 16602                                  ;		error_access_denied
 16603                                  ;			Directory specified (not simple rename),
 16604                                  ;			Device name given, Destination exists.
 16605                                  ;			NOTE: In third case some renames may have
 16606                                  ;			 been done if metas.
 16607                                  ;		error_path_not_found
 16608                                  ;			Bad path (not in curr dir part if present)
 16609                                  ;			SOURCE ONLY
 16610                                  ;		error_bad_curr_dir
 16611                                  ;			Bad path in current directory part of path
 16612                                  ;			SOURCE ONLY
 16613                                  ;		error_sharing_violation
 16614                                  ;			Deny both access required, generates an INT 24.
 16615                                  ; DS preserved, others destroyed
 16616                                  ;
 16617                                  ;----------------------------------------------------------------------------
 16618                                  
 16619                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16620                                  
 16621                                  DOS_RENAME:
 16622                                  
 16623                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16624                                  ;hkn; at this point to DOSDATA.
 16625                                  
 16626 000026FE E84FEB                  	call	TestNet
 16627 00002701 7306                    	JNC	short LOCAL_RENAME
 16628                                  
 16629                                  ;IF NOT Installed
 16630                                  ;	transfer NET_RENAME
 16631                                  ;ELSE
 16632                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16633                                  	;INT	2FH
 16634                                  	;return
 16635                                  
 16636 00002703 B81111                  	mov     ax, 1111h
 16637 00002706 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16638                                  			; SS = DS = DOS CS, 
 16639                                  			; SDA first filename pointer = offset of fully-qualified old name
 16640                                  			; SDA CDS pointer -> current directory
 16641                                  			; Return: CF set on error
 16642 00002708 C3                      	retn
 16643                                  ;ENDIF
 16644                                  
 16645                                  LOCAL_RENAME:
 16646 00002709 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16647 0000270E 8B36[B205]              	MOV	SI,[WFP_START]
 16648 00002712 8B3E[B405]              	MOV	DI,[REN_WFP]
 16649 00002716 8A04                    	MOV	AL,[SI]
 16650 00002718 8A25                    	MOV	AH,[DI]
 16651 0000271A 0D2020                  	OR	AX,2020H		; Lower case
 16652 0000271D 38E0                    	CMP	AL,AH
 16653 0000271F 7405                    	JZ	short SAMEDRV
 16654 00002721 B81100                  	MOV	AX,error_not_same_device ; 11h
 16655 00002724 F9                      	STC
 16656 00002725 C3                      	retn
 16657                                  
 16658                                  SAMEDRV:
 16659 00002726 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16660 0000272A FF36[2C03]              	PUSH	WORD [DMAADD]
 16661 0000272E 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16662                                  
 16663                                  ;hkn; RENAMEDMA is in DOSDATA
 16664 00002732 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16665 00002738 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16666 0000273D E8D2EB                  	call	ECritDisk
 16667 00002740 E8F505                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16668                                  					;    points to entry
 16669 00002743 7314                    	JNC	short Check_Dev
 16670 00002745 83F812                  	CMP	AX,error_no_more_files ; 12h
 16671 00002748 7503                    	JNZ	short GOTERR
 16672 0000274A B80200                  	MOV	AX,error_file_not_found ; 2
 16673                                  GOTERR:
 16674 0000274D F9                      	STC
 16675                                  RENAME_POP:
 16676 0000274E 8F06[2C03]              	POP	WORD [DMAADD]
 16677 00002752 8F06[2E03]              	POP	WORD [DMAADD+2]
 16678                                  	;call	LCritDisk
 16679                                  	;retn
 16680                                  	; 16/12/2022
 16681 00002756 E9D4EB                  	jmp	LCritDisk
 16682                                  
 16683                                  Check_Dev:
 16684                                  	; 17/05/2019 - Retro DOS v4.0
 16685                                  	;mov	ax,5
 16686 00002759 B80500                  	MOV	AX,error_access_denied	; Assume error
 16687                                  	
 16688                                  	; MSDOS 6.0
 16689 0000275C 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16690 0000275D C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16691                                  	;add	si,21
 16692 00002761 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16693                                  	;test	byte [si+11],10h
 16694 00002764 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16695 00002768 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16696 0000276A 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16697 0000276E E8CEFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16698                                  notdir:
 16699 00002771 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16700 00002772 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16701                                  
 16702                                  	; MSDOS 3.3 & MSDOS 6.0
 16703 00002774 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16704 00002779 75D2                    	JNZ	short GOTERR
 16705                                  
 16706                                  ; At this point a source has been found. There is search continuation info (a
 16707                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16708                                  ; directory entry found.
 16709                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16710                                  ; throughout the RENAME since it is known at this point that the source and
 16711                                  ; destination are both on the same device.
 16712                                  ; [SATTRIB] is also set.
 16713                                  
 16714 0000277B 89DE                    	MOV	SI,BX
 16715                                  	;add	si,26
 16716 0000277D 83C61A                  	ADD	SI,dir_entry.dir_first
 16717 00002780 E8CFFE                  	call	REN_DEL_Check
 16718 00002783 7305                    	JNC	short REN_OK1
 16719 00002785 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16720 00002788 EBC4                    	JMP	short RENAME_POP
 16721                                  
 16722                                  ;------------------------------------------------------------------------------
 16723                                  ; Check if the source is a file or directory. If file, delete the entry
 16724                                  ; from the Fastopen cache. If directory, rename it later
 16725                                  ;------------------------------------------------------------------------------
 16726                                  
 16727                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16728                                  	; MSDOS 6.0
 16729 0000278A 56                      	PUSH	SI
 16730 0000278B C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16731                                  	;add	si,21
 16732 0000278F 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16733                                  	;test	byte [si+11],10h
 16734 00002792 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16735 00002796 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16736 00002798 5E                      	POP	SI			;BN00X
 16737 00002799 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16738                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16739 0000279B 5E                      	POP	SI
 16740                                  
 16741                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16742 0000279C E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16743                                  SWAP_SOURCE:
 16744                                  	; MSDOS 3.3
 16745                                  	;MOV	SI,[REN_WFP]
 16746                                  	;MOV	[WFP_START],SI
 16747                                  	; MSDOS 6.0
 16748 0000279F A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16749 000027A2 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16750 000027A6 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16751 000027AA A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16752                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16753 000027AD C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16754                                  	;mov	word [CREATING],0E5FFh
 16755 000027B3 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16756                                  					; A rename is like a CREATE_NEW as far
 16757                                  					; as the destination is concerned.
 16758 000027B9 E85F17                  	call	GetPathNoSet
 16759                                  
 16760                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16761                                  ;   since no files match the destination name. If it fails for any other
 16762                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16763                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16764                                  ;   if the rename should fail because we haven't built an explicit name by
 16765                                  ;   substituting for the meta chars in it. In this case the destination file
 16766                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16767                                  ;   in the directory entry part.
 16768                                  	
 16769 000027BC 7223                    	JC	short NODEST
 16770                                  	
 16771                                  	; MSDOS 6.0
 16772                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16773                                  	; !! MSDOS 3.3 !!
 16774                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16775                                  
 16776 000027BE 08E4                    	OR	AH,AH			; Device?
 16777 000027C0 792C                    	JNS	short SAVEDEST		; No, continue
 16778                                  BAD_ACC:
 16779 000027C2 B80500                  	MOV	AX,error_access_denied
 16780 000027C5 F9                      	STC
 16781                                  RENAME_CLEAN:
 16782 000027C6 9C                      	PUSHF				; Save carry state
 16783 000027C7 50                      	PUSH	AX			; and error code (if carry set)
 16784 000027C8 A0[7605]                	MOV	AL,[THISDRV]
 16785 000027CB E87532                  	call	FLUSHBUF
 16786 000027CE 58                      	POP	AX
 16787 000027CF 803E[4A03]00            	CMP	byte [FAILERR],0
 16788 000027D4 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16789 000027D6 9D                      	POPF
 16790 000027D7 E974FF                  	JMP	RENAME_POP
 16791                                  
 16792                                  BAD_ERR:
 16793 000027DA 58                      	POP	AX			; Saved flags
 16794                                  	; 16/12/202
 16795                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16796                                  BAD_PATH: ; *
 16797 000027DB B80300                  	MOV	AX,error_path_not_found
 16798 000027DE E96CFF                  	JMP	GOTERR
 16799                                  
 16800                                  NODEST:
 16801 000027E1 75F8                    	JNZ	short BAD_PATH
 16802 000027E3 803E[4A03]00            	CMP	byte [FAILERR],0
 16803 000027E8 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16804                                  					; because user FAILed on I 24
 16805                                  	; 14/11/2022
 16806 000027EA 08C9                    	OR	CL,CL
 16807                                  	;JNZ	short SAVEDEST
 16808                                  	; 17/05/2019
 16809 000027EC 74ED                    	jz	short BAD_PATH ; *
 16810                                  ;BAD_PATH: ; *
 16811                                  ;	MOV	AX,error_path_not_found
 16812                                  ;	;STC
 16813                                  ;	;JMP	RENAME_POP
 16814                                  ;	; 17/05/2019
 16815                                  ;	jmp	GOTERR 
 16816                                  
 16817                                  ; 16/12/2022
 16818                                  %if 0
 16819                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16820                                  	or	cl,cl
 16821                                  	jnz	short SAVEDEST
 16822                                  	;jz	short BAD_PATH ; *
 16823                                  BAD_PATH: ; *
 16824                                  	;mov	ax,3
 16825                                  	mov	ax,error_path_not_found
 16826                                  	stc
 16827                                  	jmp	RENAME_POP
 16828                                  %endif
 16829                                  
 16830                                  SAVEDEST:
 16831 000027EE 16                      	push	ss
 16832 000027EF 07                      	pop	es
 16833                                  
 16834                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16835 000027F0 BF[5705]                	MOV	DI,NAME2
 16836 000027F3 BE[4B05]                	MOV	SI,NAME1
 16837                                  
 16838 000027F6 B90B00                  	MOV	CX,11
 16839 000027F9 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16840 000027FB A1[C205]                	MOV	AX,[DIRSTART]
 16841 000027FE A3[6405]                	MOV	[DESTSTART],AX
 16842                                  BUILDDEST:
 16843 00002801 16                      	push	ss
 16844 00002802 07                      	pop	es			; needed due to JMP BUILDDEST below
 16845                                  
 16846                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16847 00002803 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16848 00002806 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16849 00002809 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16850                                  
 16851 0000280C B90B00                  	MOV	CX,11
 16852                                  
 16853                                  	; 17/05/2019 - Retro DOS v4.0
 16854                                  	
 16855                                  	; MSDOS 6.0
 16856 0000280F E81201                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16857                                  
 16858                                  	; MSDOS 3.3
 16859                                  
 16860                                  ; 08/08/2018 - Retro DOS v3.0
 16861                                  ; MSDOS 6.0 
 16862                                  ;---------------------------------------------------------------------------
 16863                                  ;Procedure: NEW_RENAME
 16864                                  ;
 16865                                  ;Input: DS:SI -> raw string with ?
 16866                                  ;	ES:DI -> destination string
 16867                                  ;	DS:BX -> source string
 16868                                  ;Function: replace ? chars of raw string with chars in source string and
 16869                                  ;	   put in destination string
 16870                                  ;Output: ES:DI-> new string
 16871                                  ;---------------------------------------------------------------------------
 16872                                  ;
 16873                                  ;NEW_RENAME:
 16874                                  ;NEWNAM:
 16875                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16876                                  ;	LODSB
 16877                                  ;	CMP	AL,"?"
 16878                                  ;	JNZ	short NOCHG
 16879                                  ;	MOV	AL,[BX] 		; Get replace char
 16880                                  ;NOCHG:
 16881                                  ;	STOSB
 16882                                  ;	INC	BX			; Next replace char
 16883                                  ;	LOOP	NEWNAM
 16884                                  ;	; MSDOS 6.0
 16885                                  ;	;retn
 16886                                  
 16887                                  	; MSDOS 3.3 & MSDOS 6.0
 16888                                  	;mov	byte [ATTRIB],16h
 16889 00002812 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16890 00002817 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16891 0000281C E8AB19                  	call	DEVNAME 		; Check if we built a device name
 16892 0000281F 73A1                    	JNC	short BAD_ACC
 16893 00002821 8B1E[6405]              	MOV	BX,[DESTSTART]
 16894 00002825 C42E[8A05]              	LES	BP,[THISDPB]
 16895 00002829 E88C16                  	call	SETDIRSRCH		; Reset search to start of dir
 16896 0000282C 7294                    	JC	short BAD_ACC 		; Screw up
 16897 0000282E E84615                  	call	FINDENTRY		; See if new name already exists
 16898 00002831 738F                    	JNC	short BAD_ACC 		; Error if found
 16899 00002833 803E[4A03]00            	CMP	byte [FAILERR],0
 16900 00002838 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16901 0000283A A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16902 0000283D 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16903 00002841 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16904                                  
 16905                                  	;mov	al,[RENAMEDMA+32]
 16906 00002843 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16907 00002846 A810                    	TEST	AL,attr_directory ; 10h
 16908 00002848 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16909                                  					; otherwise the . and .. entries get
 16910                                  					; wiped.
 16911 0000284A A2[6B05]                	MOV	[ATTRIB],AL
 16912 0000284D 8C1E[A005]              	MOV	[THISSFT+2],DS
 16913                                  
 16914                                  ;hkn; AUXSTACK is in DOSDATA
 16915                                  	;mov	si,[RENAMEDMA+145h]
 16916 00002851 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16917 00002854 8936[9E05]              	MOV	[THISSFT],SI
 16918                                  	;mov	word [SI+2],2
 16919 00002858 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16920 0000285D 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16921 0000285F E84621                  	call	RENAME_MAKE		; This is in mknode
 16922 00002862 7303                    	JNC	short GOT_DEST
 16923                                  BAD_ACCJ:
 16924 00002864 E95BFF                  	JMP	BAD_ACC
 16925                                  
 16926                                  GOT_DEST:
 16927 00002867 53                      	push	bx
 16928 00002868 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16929 0000286C E8F74A                  	call	ShareEnd		; we need to remove it.
 16930 0000286F 5B                      	pop	bx
 16931                                  
 16932                                  ; A zero length entry with the correct new name has now been made at
 16933                                  ;   [CURBUF+2]:BX.
 16934                                  
 16935 00002870 C43E[E205]              	LES	DI,[CURBUF]
 16936                                  
 16937                                  	; MSDOS 6.0
 16938                                  	;test	byte [es:di+5],40h
 16939 00002874 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16940                                  					;LB. if already dirty		  ;AN000;
 16941 00002879 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16942 0000287B E8CA32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16943                                  	;or	byte [es:di+5],40h
 16944 0000287E 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16945                                  yesdirty1:
 16946 00002883 89DF                    	MOV	DI,BX
 16947                                  	;add	di,11
 16948 00002885 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16949                                  
 16950                                  ;hkn; RENAMEDMA is in DOSDATA
 16951                                  	;mov	si,[RENAMEDMA+32]
 16952 00002888 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16953                                  	;mov	cx,21
 16954 0000288B B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16955 0000288E F3A4                    	REP	MOVSB
 16956 00002890 E87B00                  	CALL	GET_SOURCE
 16957 00002893 7276                    	JC	short RENAME_OVER
 16958 00002895 89DF                    	MOV	DI,BX
 16959 00002897 8E06[E405]              	MOV	ES,[CURBUF+2]
 16960 0000289B B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16961 0000289D AA                      	STOSB				; "free" the source
 16962 0000289E EB13                    	JMP	SHORT DIRTY_IT
 16963                                  
 16964                                  SIMPLE_RENAME:
 16965 000028A0 E86B00                  	CALL	GET_SOURCE		; Get the source back
 16966 000028A3 7266                    	JC	short RENAME_OVER
 16967 000028A5 89DF                    	MOV	DI,BX
 16968 000028A7 8E06[E405]              	MOV	ES,[CURBUF+2]
 16969                                  
 16970                                  ;hkn; NAME1 is in DOSDATA
 16971 000028AB BE[4B05]                	MOV	SI,NAME1		; New Name
 16972 000028AE B90B00                  	MOV	CX,11
 16973 000028B1 F3A4                    	REP	MOVSB
 16974                                  DIRTY_IT:
 16975 000028B3 8B3E[E205]              	MOV	DI,[CURBUF]
 16976                                  
 16977                                  	; MSDOS 6.0
 16978 000028B7 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16979                                  					;LB. if already dirty		  ;AN000;
 16980 000028BC 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16981 000028BE E88732                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16982                                  	
 16983 000028C1 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16984                                  
 16985                                  ;------------------------------------------------------------------------------
 16986                                  ; Check if the source is a directory of file. If directory rename it to the
 16987                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16988                                  ; previously deleted.
 16989                                  ;------------------------------------------------------------------------------
 16990                                  
 16991                                  yesdirty2:
 16992                                  	; MSDOS 6.0
 16993 000028C6 56                      	PUSH	SI
 16994 000028C7 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16995 000028CB 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16996 000028CE F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16997 000028D2 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16998 000028D4 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16999 000028D7 5E                      	POP	SI
 17000 000028D8 EB01                    	JMP	SHORT NOT_DIRTY1
 17001                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17002 000028DA 5E                      	POP	SI
 17003                                  NOT_DIRTY1:				;;BN00X
 17004                                  NEXT_SOURCE:
 17005                                  ;hkn; RENAMEDMA is in DOSDATA
 17006 000028DB BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17007                                  
 17008                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17009                                  ; to enter it before going to RENAME_Next.
 17010                                  
 17011 000028DE E831EA                  	call	ECritDisk
 17012 000028E1 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17013                                  				  ;  to FF when we made the prev new file).
 17014 000028E6 E88705                  	call	RENAME_NEXT
 17015                                  
 17016                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17017                                  ; we were before.
 17018                                  
 17019 000028E9 7220                    	JC	short RENAME_OVER
 17020                                  
 17021                                  	;lea	si,[bx+26]
 17022 000028EB 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17023 000028EE E861FD                  	call	REN_DEL_Check
 17024 000028F1 7306                    	JNC	short REN_OK2
 17025 000028F3 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17026                                  jmp_to_rename_clean: ; 28/12/2022
 17027 000028F6 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17028                                  
 17029                                  ;------------------------------------------------------------------------------
 17030                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17031                                  ; if directory, rename directory name in the Fastopen cache.
 17032                                  ;-----------------------------------------------------------------------------
 17033                                  
 17034                                  REN_OK2:
 17035                                  	; MSDOS 6.0
 17036                                  	;mov	al,[RERNAMEDMA+32]
 17037 000028F9 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17038                                  	;test	al,10h
 17039 000028FC A810                    	TEST	AL,attr_directory	;;BN00X directory
 17040 000028FE 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17041                                  	
 17042                                  	; MSDOS 3.3 & MSDOS 6.0
 17043 00002900 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17044                                  jmp_to_builddest: ; 28/12/2022
 17045 00002903 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 17046                                  
 17047                                  	; MSDOS 6.0
 17048                                  Ren_Directory:
 17049 00002906 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17050                                  	;JMP	BUILDDEST
 17051                                  	; 28/12/2022
 17052 00002909 EBF8                    	jmp	short jmp_to_builddest
 17053                                  
 17054                                  RENAME_OVER:
 17055 0000290B F8                      	CLC
 17056                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17057                                  	; 28/12/2022
 17058 0000290C EBE8                    	jmp	short jmp_to_rename_clean
 17059                                  
 17060                                  ;----------------------------------------------------------------------------
 17061                                  ; Procedure: GET_SOURCE
 17062                                  ;
 17063                                  ; Inputs:
 17064                                  ;	RENAMEDMA has source info
 17065                                  ; Function:
 17066                                  ;	Re-find the source
 17067                                  ; Output:
 17068                                  ;	[CURBUF] set
 17069                                  ;	[CURBUF+2]:BX points to entry
 17070                                  ;	Carry set if error (currently user FAILed to I 24)
 17071                                  ; DS preserved, others destroyed
 17072                                  ;----------------------------------------------------------------------------
 17073                                  
 17074                                  GET_SOURCE:
 17075 0000290E 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17076 00002912 C42E[8A05]              	LES	BP,[THISDPB]
 17077 00002916 E89F15                  	call	SETDIRSRCH
 17078 00002919 7214                    	JC	short gs_ret_label	; retc
 17079 0000291B E88B18                  	call	STARTSRCH
 17080 0000291E A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17081                                  	;call	GETENT
 17082                                  	; 18/12/2022
 17083 00002921 E96515                  	jmp	GETENT
 17084                                  ;gs_ret_label:
 17085                                  	;retn
 17086                                  
 17087                                  ; MSDOS 6.0 
 17088                                  ;---------------------------------------------------------------------------
 17089                                  ;Procedure: NEW_RENAME
 17090                                  ;
 17091                                  ;Input: DS:SI -> raw string with ?
 17092                                  ;	ES:DI -> destination string
 17093                                  ;	DS:BX -> source string
 17094                                  ;Function: replace ? chars of raw string with chars in source string and
 17095                                  ;	   put in destination string
 17096                                  ;Output: ES:DI-> new string
 17097                                  ;---------------------------------------------------------------------------
 17098                                  
 17099                                  NEW_RENAME:
 17100                                  	; 17/05/2019 - Retro DOS v4.0
 17101                                  NEWNAM:
 17102                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17103 00002924 AC                      	LODSB
 17104 00002925 3C3F                    	CMP	AL,"?" ; 3Fh
 17105 00002927 7502                    	JNZ	short NOCHG
 17106 00002929 8A07                    	MOV	AL,[BX] 		; Get replace char
 17107                                  NOCHG:
 17108 0000292B AA                      	STOSB
 17109 0000292C 43                      	INC	BX			; Next replace char
 17110 0000292D E2F5                    	LOOP	NEWNAM
 17111                                  	; MSDOS 6.0
 17112                                  gs_ret_label:	; 18/12/2022
 17113 0000292F C3                      	retn
 17114                                  
 17115                                  ;============================================================================
 17116                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17117                                  ;============================================================================
 17118                                  ; 08/08/2018 - Retro DOS v3.0
 17119                                  ; 17/05/2019 - Retro DOS v4.0
 17120                                  
 17121                                  ;**	Low level routines for returning file information and setting file
 17122                                  ;	attributes
 17123                                  ;
 17124                                  ;	GET_FILE_INFO
 17125                                  ;	SET_FILE_ATTRIBUTE
 17126                                  ;
 17127                                  ;	Modification history:
 17128                                  ;
 17129                                  ;	    Created: ARR 30 March 1983
 17130                                  ;
 17131                                  ;	M025: Return access_denied if attempting to set
 17132                                  ;	      attribute of root directory.
 17133                                  ;
 17134                                  
 17135                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17136                                  
 17137                                  ;---------------------------------------------------------------------------
 17138                                  ; Procedure Name : GET_FILE_INFO
 17139                                  ;
 17140                                  ; Inputs:
 17141                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17142                                  ;		terminated)
 17143                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17144                                  ;		( = -1 if current dir not involved, else
 17145                                  ;		 Points to first char after last "/" of current dir part)
 17146                                  ;	[THISCDS] Points to CDS being used
 17147                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17148                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17149                                  ; Function:
 17150                                  ;	Get Information about a file
 17151                                  ; Returns:
 17152                                  ;	CARRY CLEAR
 17153                                  ;	    AX = Attribute of file
 17154                                  ;	    CX = Time stamp of file
 17155                                  ;	    DX = Date stamp of file
 17156                                  ;	    BX:DI = Size of file (32 bit)
 17157                                  ;	CARRY SET
 17158                                  ;	    AX is error code
 17159                                  ;		error_file_not_found
 17160                                  ;			Last element of path not found
 17161                                  ;		error_path_not_found
 17162                                  ;			Bad path (not in curr dir part if present)
 17163                                  ;		error_bad_curr_dir
 17164                                  ;			Bad path in current directory part of path
 17165                                  ; DS preserved, others destroyed
 17166                                  ;---------------------------------------------------------------------------
 17167                                  
 17168                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17169                                  
 17170                                  GET_FILE_INFO:
 17171                                  
 17172                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17173                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17174                                  
 17175 00002930 E81DE9                  	call	TestNet
 17176 00002933 7306                    	JNC	short LOCAL_INFO
 17177                                  
 17178                                  ;IF NOT Installed
 17179                                  ;	transfer NET_GET_FILE_INFO
 17180                                  ;ELSE
 17181                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17182                                  ;	INT	2FH
 17183                                  ;	return
 17184                                  
 17185 00002935 B80F11                  	mov     ax, 110Fh
 17186 00002938 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17187                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17188                                  			; SDA CDS pointer -> current directory
 17189                                  			; Return: CF set on error, AX = file attributes
 17190 0000293A C3                      	retn
 17191                                  ;ENDIF
 17192                                  
 17193                                  LOCAL_INFO:
 17194 0000293B E8D4E9                  	call	ECritDisk
 17195 0000293E C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17196                                  	; MSDOS 3.3
 17197                                  	;call	GETPATH
 17198                                  	; MSDOS 6.0
 17199 00002943 E8D800                  	call	GET_FAST_PATH
 17200                                  	; MSDOS 3.3 & MSDOS 6.0
 17201 00002946 7312                    	JNC	short info_check_dev
 17202                                  NO_PATH:
 17203 00002948 750B                    	JNZ	short bad_path1
 17204 0000294A 08C9                    	OR	CL,CL
 17205 0000294C 7407                    	JZ	short bad_path1
 17206                                  info_no_file:
 17207 0000294E B80200                  	MOV	AX,error_file_not_found
 17208                                  BadRet:
 17209 00002951 F9                      	STC
 17210                                  JustRet:
 17211                                  	;call	LCritDisk
 17212                                  	;retn
 17213                                  	; 18/12/2022
 17214 00002952 E9D8E9                  	jmp	LCritDisk
 17215                                  
 17216                                  bad_path1:
 17217 00002955 B80300                  	MOV	AX,error_path_not_found
 17218 00002958 EBF7                    	jmp	short BadRet
 17219                                  
 17220                                  info_check_dev:
 17221 0000295A 08E4                    	OR	AH,AH
 17222 0000295C 78F0                    	JS	short info_no_file	; device
 17223                                  
 17224                                  	; MSDOS 6.0
 17225                                  ;SR;
 17226                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17227                                  ;for a root dir
 17228                                  
 17229 0000295E 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17230 00002963 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17231                                  
 17232 00002965 30E4                    	xor	ah,ah
 17233 00002967 B010                    	mov	al,attr_directory ; 10h
 17234                                  	;clc
 17235                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17236                                  	; (DOSCODE:683Eh)
 17237                                  	; 16/12/2022
 17238                                  	;clc
 17239 00002969 EBE7                    	jmp	short JustRet
 17240                                  
 17241                                  not_root:
 17242                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17243 0000296B 1E                      	PUSH	DS
 17244 0000296C 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17245 00002970 89DE                    	MOV	SI,BX
 17246 00002972 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17247 00002974 89DF                    	MOV	DI,BX
 17248                                  	;mov	cx,[si+16h]
 17249 00002976 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17250                                  	;mov	dx,[si+18h]
 17251 00002979 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17252 0000297C 30E4                    	XOR	AH,AH
 17253                                  	;mov	al,[si+0Bh]
 17254 0000297E 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17255                                  	;test	al,10h
 17256 00002981 A810                    	TEST	AL,attr_directory
 17257 00002983 7506                    	JNZ	short NO_SIZE
 17258                                  	;mov	di,[si+1Ch]
 17259 00002985 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17260                                  	;mov	bx,[si+1Eh]
 17261 00002988 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17262                                  NO_SIZE:
 17263 0000298B 1F                      	POP	DS
 17264                                  	;CLC
 17265                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17266                                  	; (DOSCODE:6864h)
 17267                                  	; 16/12/2022
 17268                                  	;clc
 17269 0000298C EBC4                    	jmp	short JustRet
 17270                                  
 17271                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17272                                  ;-------------------------------------------------------------------------------
 17273                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17274                                  ; Inputs:
 17275                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17276                                  ;		terminated)
 17277                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17278                                  ;		( = -1 if current dir not involved, else
 17279                                  ;		 Points to first char after last "/" of current dir part)
 17280                                  ;	[THISCDS] Points to CDS being used
 17281                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17282                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17283                                  ;	AX is new attributes to give to file
 17284                                  ; Function:
 17285                                  ;	Set File Attributes
 17286                                  ; Returns:
 17287                                  ;	CARRY CLEAR
 17288                                  ;	    No error
 17289                                  ;	CARRY SET
 17290                                  ;	    AX is error code
 17291                                  ;		error_file_not_found
 17292                                  ;			Last element of path not found
 17293                                  ;		error_path_not_found
 17294                                  ;			Bad path (not in curr dir part if present)
 17295                                  ;		error_bad_curr_dir
 17296                                  ;			Bad path in current directory part of path
 17297                                  ;		error_access_denied
 17298                                  ;			Attempt to set an attribute which cannot be set
 17299                                  ;			(attr_directory, attr_volume_ID)
 17300                                  ;		error_sharing_violation
 17301                                  ;			Sharing mode of file did not allow the change
 17302                                  ;			(this request requires exclusive write/read access)
 17303                                  ;			(INT 24H generated)
 17304                                  ; DS preserved, others destroyed
 17305                                  ;----------------------------------------------------------------------------
 17306                                  
 17307                                  SET_FILE_ATTRIBUTE:
 17308                                  
 17309                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17310                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17311                                  
 17312 0000298E A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17313 00002991 7414                    	JZ	short set_look
 17314                                  _BAD_ACC:
 17315 00002993 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17316 00002998 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17317 0000299D C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17318 000029A2 B80500                  	MOV	AX,error_access_denied ; 5
 17319 000029A5 F9                      	STC
 17320 000029A6 C3                      	retn
 17321                                  
 17322                                  set_look:
 17323 000029A7 E8A6E8                  	call	TestNet
 17324 000029AA 7308                    	JNC	short LOCAL_SET
 17325                                  
 17326                                  ;IF NOT Installed
 17327                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17328                                  ;ELSE
 17329 000029AC 50                      	PUSH	AX
 17330                                  	
 17331                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17332                                  	;INT	2FH
 17333                                  
 17334 000029AD B80E11                  	mov     ax, 110Eh
 17335 000029B0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17336                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17337                                  			; SDA CDS pointer -> current directory
 17338                                  			; STACK: WORD new file attributes
 17339                                  			; Return: CF set on error
 17340                                  
 17341 000029B2 5B                      	POP	BX			; clean stack
 17342 000029B3 C3                      	retn
 17343                                  ;ENDIF
 17344                                  
 17345                                  LOCAL_SET:
 17346 000029B4 E85BE9                  	call	ECritDisk
 17347 000029B7 50                      	PUSH	AX			; Save new attributes
 17348 000029B8 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17349 000029BD E85515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17350 000029C0 7303                    	JNC	short set_check_device
 17351 000029C2 5B                      	POP	BX			; Clean stack (don't zap AX)
 17352 000029C3 EB83                    	JMP	short NO_PATH
 17353                                  
 17354                                  set_check_device:
 17355 000029C5 08E4                    	OR	AH,AH
 17356 000029C7 7906                    	JNS	short set_check_share
 17357 000029C9 58                      	POP	AX
 17358 000029CA E860E9                  	call	LCritDisk
 17359 000029CD EBC4                    	JMP	short _BAD_ACC 		; device
 17360                                  
 17361                                  set_check_share:
 17362 000029CF 58                      	POP	AX			; Get new attributes
 17363                                  
 17364                                  	; MSDOS 6.0
 17365 000029D0 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17366 000029D5 740A                    	je	short cannot_set_root	; M025: Y: return error
 17367                                  
 17368                                  	; MSDOS 3.3 & MSDOS 6.0
 17369 000029D7 E878FC                  	call	REN_DEL_Check
 17370 000029DA 730B                    	JNC	short set_do
 17371 000029DC B82000                  	MOV	AX,error_sharing_violation ; 32
 17372 000029DF EB3A                    	jmp	short OK_BYE
 17373                                  
 17374                                  	; MSDOS 6.0
 17375                                  cannot_set_root:			; M025:
 17376 000029E1 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17377 000029E4 F9                      	stc				; M025: to set attr. of root
 17378 000029E5 EB34                    	jmp	short OK_BYE		; M025:
 17379                                  
 17380                                  set_do:
 17381                                  	; MSDOS 3.3 & MSDOS 6.0
 17382 000029E7 C43E[E205]              	LES	DI,[CURBUF]
 17383 000029EB 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17384 000029F0 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17385                                  
 17386                                  	; MSDOS 6.0
 17387 000029F4 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17388                                  					;LB. if already dirty		  ;AN000;
 17389 000029F9 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17390 000029FB E84A31                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17391                                  	
 17392 000029FE 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17393                                  yesdirty3:
 17394 00002A03 A0[7605]                	MOV	AL,[THISDRV]
 17395                                  ;;;; 10/1/86 F.C update fastopen cache
 17396 00002A06 52                      	PUSH	DX
 17397 00002A07 57                      	PUSH	DI
 17398 00002A08 B400                    	MOV	AH,0		  ; dir entry update
 17399 00002A0A 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17400 00002A0C 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17401 00002A0E E8DEFC                  	call	FastOpen_Update
 17402 00002A11 5F                      	POP	DI
 17403 00002A12 5A                      	POP	DX
 17404                                  ;;;; 9/11/86 F.C update fastopen cache
 17405 00002A13 E82D30                  	call	FLUSHBUF
 17406 00002A16 7303                    	JNC	short OK_BYE
 17407 00002A18 B80200                  	MOV	AX,error_file_not_found
 17408                                  OK_BYE:
 17409                                  	;call	LCritDisk
 17410                                  	;retn
 17411                                  	; 16/12/2022
 17412 00002A1B E90FE9                  	jmp	LCritDisk
 17413                                  
 17414                                  	; 17/05/2019 - Retro DOS v4.0
 17415                                  
 17416                                  	; MSDOS 6.0
 17417                                  GET_FAST_PATH:
 17418                                  ;hkn; use SS override for FastOpenFlg
 17419 00002A1E 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17420                                  					;FO. trigger fastopen	;AN000;
 17421 00002A24 E8EE14                  	call	GETPATH
 17422 00002A27 9C                      	PUSHF			 	;FO.			;AN000;
 17423 00002A28 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17424                                  					;FO. clear all fastopen flags ;AN000;
 17425 00002A2E 9D                      	POPF				;FO.			;AN000;
 17426 00002A2F C3                      	retn
 17427                                  
 17428                                  ;============================================================================
 17429                                  ; DUP.ASM, MSDOS 6.0, 1991
 17430                                  ;============================================================================
 17431                                  ; 08/08/2018 - Retro DOS v3.0
 17432                                  ; 17/05/2019 - Retro DOS v4.0
 17433                                  
 17434                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17435                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17436                                  ;
 17437                                  ;	DOS_DUP
 17438                                  ;
 17439                                  ;	Modification history:
 17440                                  ;
 17441                                  ;	  Created: ARR 30 March 1983
 17442                                  
 17443                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17444                                  ;---------------------------------------------------------------------------
 17445                                  ; Procedure Name : DOS_DUP
 17446                                  ;
 17447                                  ; Inputs:
 17448                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17449                                  ;		(a non net SFT is OK, in this case the ref
 17450                                  ;		 count is simply incremented)
 17451                                  ; Function:
 17452                                  ;	Signal to the devices that a logical open is occurring
 17453                                  ; Returns:
 17454                                  ;	ES:DI point to SFT
 17455                                  ;    Carry clear
 17456                                  ;	SFT ref_count is incremented
 17457                                  ; Registers modified: None.
 17458                                  ; NOTE:
 17459                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17460                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17461                                  ;	that time.
 17462                                  ;---------------------------------------------------------------------------
 17463                                  
 17464                                  DOS_DUP:
 17465                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17466                                  
 17467                                  	; MSDOS 6.0
 17468 00002A30 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17469 00002A35 26C43E[9E05]            	les	di,[es:THISSFT]
 17470                                  
 17471                                  	;Entry	Dos_Dup_Direct
 17472                                  DOS_Dup_Direct:
 17473 00002A3A E82CE8                  	call	IsSFTNet
 17474 00002A3D 7503                    	JNZ	short DO_INC
 17475 00002A3F E8A11B                  	call	DEV_OPEN_SFT
 17476                                  DO_INC:
 17477                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17478 00002A42 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17479                                  					;   we're in big trouble anyway)
 17480 00002A45 C3                      	retn
 17481                                  
 17482                                  ;============================================================================
 17483                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17484                                  ;============================================================================
 17485                                  ; 08/08/2018 - Retro DOS v3.0
 17486                                  ; 18/05/2019 - Retro DOS v4.0
 17487                                  
 17488                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17489                                  ;NAME	DOS_CREATE
 17490                                  ;----------------------------------------------------------------------------
 17491                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17492                                  ;
 17493                                  ;	DOS_CREATE
 17494                                  ;	DOS_CREATE_NEW
 17495                                  ;	SET_MKND_ERR
 17496                                  ;	SET_Media_ID
 17497                                  ;	SET_EXT_Mode
 17498                                  ;
 17499                                  ;	Revision history:
 17500                                  ;
 17501                                  ;	    A000 version 4.00	  Jan. 1988
 17502                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17503                                  
 17504                                  ;Installed = TRUE
 17505                                  
 17506                                  ;	i_need	THISSFT,DWORD
 17507                                  ;	i_need	THISCDS,DWORD
 17508                                  ;	I_need	EXTERR,WORD
 17509                                  ;	I_Need	ExtErr_locus,BYTE
 17510                                  ;	I_need	JShare,DWORD
 17511                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17512                                  ;	I_need	SATTRIB,BYTE
 17513                                  ;	I_need	CALLVIDM,DWORD
 17514                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17515                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17516                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17517                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17518                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17519                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17520                                  
 17521                                  ;***	DOS_CREATE - Create a File
 17522                                  ;----------------------------------------------------------------------------
 17523                                  ;	DOS_Create is called to create the specified file, truncating
 17524                                  ;	the old one if it exists.
 17525                                  ;
 17526                                  ;	ENTRY	AX is Attribute to create
 17527                                  ;		(ds) = DOSDATA
 17528                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17529                                  ;			terminated)
 17530                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17531                                  ;			( = -1 if current dir not involved, else
 17532                                  ;			 Points to first char after last "/" of current dir part)
 17533                                  ;		[THISCDS] Points to CDS being used
 17534                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17535                                  ;		[THISSFT] Points to SFT to fill in if file created
 17536                                  ;			(sf_mode field set so that FCB may be detected)
 17537                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17538                                  ;
 17539                                  ;	EXIT	sf_ref_count is NOT altered
 17540                                  ;		CARRY CLEAR
 17541                                  ;		    THISSFT filled in.
 17542                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17543                                  ;		CARRY SET
 17544                                  ;		    AX is error code
 17545                                  ;			error_path_not_found
 17546                                  ;				Bad path (not in curr dir part if present)
 17547                                  ;			error_bad_curr_dir
 17548                                  ;				Bad path in current directory part of path
 17549                                  ;			error_access_denied
 17550                                  ;				Attempt to re-create read only file , or
 17551                                  ;				create a second volume id or create a dir
 17552                                  ;			error_sharing_violation
 17553                                  ;				The sharing mode was correct but not allowed
 17554                                  ;				generates an INT 24
 17555                                  ;	USES	all but DS
 17556                                  ;----------------------------------------------------------------------------
 17557                                  
 17558                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17559                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17560                                  
 17561                                  DOS_CREATE:
 17562                                  	; 18/05/2019 - Retro DOS v4.0
 17563                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17564                                  
 17565                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17566                                  ;hkn; this point.
 17567                                  
 17568 00002A46 30E4                    	XOR	AH,AH		; Truncate is OK
 17569                                  
 17570                                  ;	Enter here from Dos_Create_New
 17571                                  ;
 17572                                  ;	(ah) = 0 iff truncate OK
 17573                                  
 17574                                  Create_inter:
 17575 00002A48 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17576                                  				; Mask out any meaningless bits
 17577 00002A4A 7511                    	JNZ	short AttErr
 17578 00002A4C A808                    	TEST	AL,attr_volume_id
 17579 00002A4E 7407                    	JZ	short NoReset
 17580                                  	
 17581                                  	; MSDOS 6.0
 17582                                  	; 16/12/2022
 17583 00002A50 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17584                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17585                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17586                                  	
 17587 00002A55 B008                    	MOV	AL,attr_volume_id ; 8
 17588                                  NoReset:
 17589 00002A57 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17590 00002A59 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17591 00002A5B 740A                    	JZ	short ATT_OK
 17592                                  AttErr:
 17593 00002A5D B80500                  	MOV	AX,5		; Attribute problem
 17594 00002A60 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17595 00002A65 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17596                                  				   ;	attr_device to be set.
 17597                                  ATT_OK:
 17598 00002A67 C43E[9E05]              	LES	DI,[THISSFT]
 17599 00002A6B 06                      	PUSH	ES
 17600 00002A6C C436[A205]              	LES	SI,[THISCDS]
 17601 00002A70 83FEFF                  	CMP	SI,-1
 17602 00002A73 751D                    	JNE	short TEST_RE_NET
 17603                                  
 17604                                  ;	No CDS, it must be redirected.
 17605                                  
 17606 00002A75 07                      	POP	ES
 17607                                  
 17608                                  	; MSDOS 6.0
 17609                                  ;Extended open hooks
 17610                                  	;test	byte [EXTOPEN_ON],1
 17611 00002A76 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17612 00002A7B 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17613                                  IFS_extopen:				    ;AN000;EO.
 17614 00002A7D 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17615                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17616 00002A7E B82E11                  	mov	ax,112Eh
 17617 00002A81 CD2F                    	INT	2FH			    ;AN000;EO.
 17618 00002A83 5B                      	POP	BX			    ;AN000;EO. trash bx
 17619 00002A84 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17620 00002A89 C3                      	retn				    ;AN000;EO.
 17621                                  NOEXTOP:				    ;AN000;
 17622                                  ;Extended open hooks
 17623                                  
 17624                                  ;IF NOT Installed
 17625                                  ;	transfer NET_SEQ_CREATE
 17626                                  ;ELSE
 17627 00002A8A 50                      	PUSH	AX
 17628                                  
 17629                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17630                                  	;INT	2FH
 17631                                  
 17632 00002A8B B81811                  	mov     ax,1118h
 17633 00002A8E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17634                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17635                                  			; SDA first filename pointer -> fully-qualified name of file
 17636                                  			; STACK: WORD file creation mode???
 17637                                  
 17638 00002A90 5B                      	POP	BX			; BX is trashed anyway
 17639 00002A91 C3                      	retn
 17640                                  ;ENDIF
 17641                                  
 17642                                  ;	We have a CDS. See if it's network
 17643                                  
 17644                                  TEST_RE_NET:
 17645                                  	;;test	word [es:si+43h],8000h
 17646                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17647                                  	; 07/12/2022
 17648                                  	;test	byte [es:si+44h],80h
 17649                                  	; 17/12/2022
 17650 00002A92 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17651 00002A97 07                      	POP	ES
 17652 00002A98 7419                    	JZ	short LOCAL_CREATE
 17653                                  
 17654                                  	; MSDOS 6.0
 17655 00002A9A E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17656 00002A9D 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17657                                  	;;or	word [es:di+2],2
 17658                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17659                                  	; 17/12/2022
 17660 00002A9F 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17661                                  
 17662                                  ;Extended open hooks
 17663                                  dochk:
 17664 00002AA4 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17665 00002AA9 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17666                                  ;Extended open hooks
 17667                                  
 17668                                  ;IF NOT Installed
 17669                                  ;	transfer NET_CREATE
 17670                                  ;ELSE
 17671 00002AAB 50                      	PUSH	AX
 17672                                  	
 17673                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17674                                  	;INT	2FH
 17675                                  	
 17676 00002AAC B81711                  	mov     ax,1117h
 17677 00002AAF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17678                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17679                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17680                                  			; SDA CDS pointer -> current directory
 17681                                  			; Return: CF set on error
 17682                                  
 17683 00002AB1 5B                      	POP	BX			; BX is trashed anyway
 17684                                  ;nomore:
 17685 00002AB2 C3                      	retn
 17686                                  ;ENDIF
 17687                                  
 17688                                  ;**	It's a local create. We have a local CDS for it.
 17689                                  
 17690                                  LOCAL_CREATE:
 17691                                  	; MSDOS 6.0
 17692 00002AB3 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17693 00002AB6 7205                    	JC	short setdone	;AN000;EO.
 17694                                  	
 17695                                  	; MSDOS 3.3 & MSDOS 6.0
 17696                                  	; 17/12/2022
 17697                                  	;;or	word [es:di+2],2
 17698                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17699                                  	;or	byte [es:di+2],2
 17700 00002AB8 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17701                                  setdone:
 17702 00002ABD E852E8                  	call	ECritDisk
 17703 00002AC0 E8BF1E                  	call	MakeNode
 17704 00002AC3 7317                    	JNC	short Create_ok
 17705 00002AC5 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17706 00002ACA E860E8                  	call	LCritDisk
 17707                                  
 17708                                  	;entry	SET_MKND_ERR
 17709                                  SET_MKND_ERR:
 17710                                  
 17711                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17712                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17713                                  
 17714                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17715 00002ACD BB[D42A]                	MOV     BX,CRTERRTAB
 17716                                  	;XLAT  ; MSDOS 3.3
 17717                                  	; 18/05/2019 - Retro DOS v4.0
 17718 00002AD0 2E                      	CS
 17719 00002AD1 D7                      	XLAT
 17720                                  CreatBadRet:
 17721 00002AD2 F9                      	STC
 17722 00002AD3 C3                      	retn
 17723                                  
 17724                                  ; 13/05/2019 - Retro DOS v4.0
 17725                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17726                                  ; ---------------------------------------------------------------------------
 17727                                  
 17728                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17729                                  
 17730                                  ; 17/07/2018 - Retro DOS v3.0
 17731                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17732                                  
 17733                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17734                                  ;	db	0,5,52h,50h,3,5,20h
 17735                                  
 17736                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17737                                  ;	db	0,5,52h,50h,3,5,20h,2
 17738                                  
 17739                                  ; 08/08/2018
 17740                                  
 17741                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17742 00002AD4 00                      	DB	0			; none
 17743 00002AD5 05                      	DB	error_access_denied	; MakeNode error 1
 17744 00002AD6 52                      	DB	error_cannot_make	; MakeNode error 2
 17745 00002AD7 50                      	DB	error_file_exists	; MakeNode error 3
 17746 00002AD8 03                      	DB	error_path_not_found	; MakeNode error 4
 17747 00002AD9 05                      	DB	error_access_denied	; MakeNode error 5
 17748 00002ADA 20                      	DB	error_sharing_violation ; MakeNode error 6
 17749                                  	; MSDOS 6.0
 17750 00002ADB 02                      	DB	error_file_not_found	; MakeNode error 7
 17751                                  
 17752                                  ; ---------------------------------------------------------------------------
 17753                                  
 17754                                  ; We have just created a new file. This results in the truncation of old
 17755                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17756                                  ; file to the current size.
 17757                                  
 17758                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17759                                  ; drive number to force a Build BPB after Media Check.
 17760                                  
 17761                                  ;;; FASTOPEN 8/29/86
 17762                                  Create_ok:
 17763 00002ADC E8E1FB                  	call	FastOpen_Delete
 17764                                  ;;; FASTOPEN 8/29/86
 17765 00002ADF A0[6D05]                	mov	al,[SATTRIB]
 17766 00002AE2 A808                    	test	al,attr_volume_id
 17767 00002AE4 741C                    	jz	short NoVolLabel
 17768 00002AE6 C43E[A205]              	LES	DI,[THISCDS]
 17769                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17770 00002AEA 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17771 00002AED 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17772 00002AF0 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17773                                  	
 17774                                  	; 18/05/2019 - Retro DOS v4.0
 17775                                  
 17776                                  	; MSDOS 6.0
 17777 00002AF4 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17778 00002AF6 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17779                                  	
 17780 00002AF9 E816E8                  	call	ECritDisk
 17781 00002AFC E8CB2B                  	call	FATREAD_CDS		; force a media check
 17782 00002AFF E82BE8                  	call	LCritDisk
 17783                                  
 17784                                  NoVolLabel:
 17785 00002B02 B80200                  	MOV	ax,2
 17786 00002B05 C43E[9E05]              	LES	DI,[THISSFT]
 17787                                  ;if installed
 17788                                  	;call	JShare + 14 * 4
 17789 00002B09 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17790                                  ;else
 17791                                  ;	Call	ShSU
 17792                                  ;endif
 17793 00002B0D E81DE8                  	call	LCritDisk
 17794 00002B10 E94901                  	jmp	SET_SFT_MODE
 17795                                  
 17796                                  ;---------------------------------------------------------------------------
 17797                                  ; Procedure Name : Dos_Create_New
 17798                                  ;
 17799                                  ; Inputs:
 17800                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17801                                  ;		terminated)
 17802                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17803                                  ;		( = -1 if current dir not involved, else
 17804                                  ;		 Points to first char after last "/" of current dir part)
 17805                                  ;	[THISCDS] Points to CDS being used
 17806                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17807                                  ;	[THISSFT] Points to SFT to fill in if file created
 17808                                  ;		(sf_mode field set so that FCB may be detected)
 17809                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17810                                  ;	AX is Attribute to create
 17811                                  ; Function:
 17812                                  ;	Try to create the specified file truncating an old one that exists
 17813                                  ; Outputs:
 17814                                  ;	sf_ref_count is NOT altered
 17815                                  ;	CARRY CLEAR
 17816                                  ;	    THISSFT filled in.
 17817                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17818                                  ;	CARRY SET
 17819                                  ;	    AX is error code
 17820                                  ;		error_path_not_found
 17821                                  ;			Bad path (not in curr dir part if present)
 17822                                  ;		error_bad_curr_dir
 17823                                  ;			Bad path in current directory part of path
 17824                                  ;		error_access_denied
 17825                                  ;			Create a second volume id or create a dir
 17826                                  ;		error_file_exists
 17827                                  ;			Already a file by this name
 17828                                  ; DS preserved, others destroyed
 17829                                  ;---------------------------------------------------------------------------
 17830                                  
 17831                                  DOS_Create_New:
 17832 00002B13 B401                    	MOV	AH,1		; Truncate is NOT OK
 17833 00002B15 E930FF                  	JMP	Create_inter
 17834                                  
 17835                                  ; MSDOS 6.0
 17836                                  ;---------------------------------------------------------------------------
 17837                                  ; Procedure Name : Set_Media_ID
 17838                                  ;
 17839                                  ; Inputs:
 17840                                  ;	NAME1= Volume ID
 17841                                  ;	BH= 0, delete volume id
 17842                                  ;	    1, set new volume id
 17843                                  ;	DS= DOSGROUP
 17844                                  ; Function:
 17845                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17846                                  ; Outputs:
 17847                                  ;	CARRY CLEAR
 17848                                  ;	    volume id set
 17849                                  ;	CARRY SET
 17850                                  ;	    AX is error code
 17851                                  ;---------------------------------------------------------------------------
 17852                                  
 17853                                  	; 18/05/2019 - Retro DOS v4.0
 17854                                  Set_Media_ID:
 17855 00002B18 50                      	PUSH	AX		;AN000;;>32mb
 17856 00002B19 06                      	PUSH	ES		;AN000;;>32mb
 17857 00002B1A 57                      	PUSH	DI		;AN000;;>32mb
 17858                                  
 17859 00002B1B FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17860 00002B1D 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17861 00002B1F B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17862 00002B21 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17863                                  
 17864                                  ;hkn; PACKET_TEMP is in DOSDATA
 17865 00002B24 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17866                                  
 17867 00002B27 53                      	PUSH	BX		;AN000;;>32mb
 17868 00002B28 52                      	PUSH	DX		;AN000;;>32mb
 17869 00002B29 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17870                                  
 17871                                  	;invoke	$IOCTL		;AN000;;>32mb
 17872 00002B2B E840F7                  	call	_$IOCTL	
 17873                                  
 17874 00002B2E 5A                      	POP	DX		;AN000;;>32mb
 17875 00002B2F 5B                      	POP	BX		;AN000;;>32mb
 17876 00002B30 7224                    	JC	short geterr	;AN000;;>32mb
 17877                                  
 17878 00002B32 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17879 00002B34 7405                    	JZ	short NoName	;AN000;>32mb yes
 17880                                  
 17881                                  ;hkn; NAME1 is in DOSDATA
 17882 00002B36 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17883                                  
 17884 00002B39 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17885                                  NoName: 			;AN000;
 17886                                  
 17887                                  ;hkn; NO_NAME_ID is in DOSDATA
 17888 00002B3B BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17889                                  
 17890                                  doset:				;AN000;
 17891 00002B3E 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17892                                  	;add	di,6
 17893 00002B40 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17894                                  
 17895                                  ;hkn; ES & DS must point to SS
 17896                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17897 00002B43 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17898                                  
 17899 00002B44 1F                      	POP	DS		;AN000;;>32mb
 17900                                  
 17901                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17902 00002B45 16                      	PUSH	SS		;AN000;;>32mb
 17903                                  
 17904 00002B46 07                      	POP	ES		;AN000;;>32mb
 17905 00002B47 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17906 00002B4A F3A4                    	REP	MOVSB		;AN000;;>32mb
 17907 00002B4C B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17908 00002B4F B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17909 00002B51 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17910                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17911 00002B53 E818F7                  	call	_$IOCTL	
 17912                                  geterr: 			;AN000;
 17913                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17914 00002B56 16                      	PUSH	SS		;AN000;>32mb
 17915                                  
 17916 00002B57 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17917                                  
 17918 00002B58 5F                      	POP	DI		;AN000;;>32mb
 17919 00002B59 07                      	POP	ES		;AN000;;>32mb
 17920 00002B5A 58                      	POP	AX		;AN000;;>32mb
 17921 00002B5B C3                      	retn			;AN000;>32mb
 17922                                  
 17923                                  ; MSDOS 6.0
 17924                                  ;---------------------------------------------------------------------------
 17925                                  ; Procedure Name : Set_EXT_mode
 17926                                  ;
 17927                                  ; Inputs:
 17928                                  ;	[EXTOPEN_ON]= flag for extended open
 17929                                  ;	SAVE_BX= mode specified in Extended Open
 17930                                  ; Function:
 17931                                  ;	Set mode in ThisSFT
 17932                                  ; Outputs:
 17933                                  ;	carry set,mode is set if from Extended Open
 17934                                  ;	carry clear, mode not set yet
 17935                                  ;---------------------------------------------------------------------------
 17936                                  
 17937                                  ; 13/05/2019 - Retro DOS v4.0
 17938                                  
 17939                                  Set_EXT_mode:
 17940                                  
 17941                                  ;hkn; SS override
 17942 00002B5C 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17943 00002B62 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17944 00002B64 50                      	PUSH	AX			    ;AN000;EO.
 17945                                  
 17946                                  ;hkn; SS override
 17947 00002B65 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17948                                  	;or	[es:di+2],ax
 17949 00002B69 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17950 00002B6D 58                      	POP	AX			    ;AN000;EO.
 17951 00002B6E F9                      	STC				    ;AN000;EO.
 17952                                  NOTEX:					    ;AN000;
 17953 00002B6F C3                      	retn				    ;AN000;EO.
 17954                                  
 17955                                  ;============================================================================
 17956                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17957                                  ;============================================================================
 17958                                  ; 08/08/2018 - Retro DOS v3.0
 17959                                  ; 18/05/2019 - Retro DOS v4.0
 17960                                  
 17961                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17962                                  ;	NAME	DOS_OPEN
 17963                                  
 17964                                  ;**	OPEN.ASM - File Open
 17965                                  ;----------------------------------------------------------------------------
 17966                                  ;	Low level routines for openning a file from a file spec.
 17967                                  ;	Also misc routines for sharing errors
 17968                                  ;
 17969                                  ;	DOS_Open
 17970                                  ;	Check_Access_AX
 17971                                  ;	SHARE_ERROR
 17972                                  ;	SET_SFT_MODE
 17973                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17974                                  ;
 17975                                  ;	Revision history:
 17976                                  ;
 17977                                  ;	    Created: ARR 30 March 1983
 17978                                  ;	    A000	version 4.00   Jan. 1988
 17979                                  ;
 17980                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17981                                  ; 	       remote extended opens and not save_cx.
 17982                                  ;
 17983                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17984                                  ;	       on the stack before calling off to the redir.
 17985                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17986                                  ;	       to handle open from exec. In this case set the appropriate bit
 17987                                  ;	       else do not.
 17988                                  ;----------------------------------------------------------------------------	
 17989                                  
 17990                                  ;Installed = TRUE
 17991                                  
 17992                                  ;	i_need	NoSetDir,BYTE
 17993                                  ;	i_need	THISSFT,DWORD
 17994                                  ;	i_need	THISCDS,DWORD
 17995                                  ;	i_need	CURBUF,DWORD
 17996                                  ;	i_need	CurrentPDB,WORD
 17997                                  ;	i_need	CURR_DIR_END,WORD
 17998                                  ;	I_need	RetryCount,WORD
 17999                                  ;	I_need	Open_Access,BYTE
 18000                                  ;	I_need	fSharing,BYTE
 18001                                  ;	i_need	JShare,DWORD
 18002                                  ;	I_need	FastOpenFlg,byte
 18003                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18004                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18005                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18006                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18007                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18008                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18009                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18010                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18011                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18012                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18013                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18014                                  ;
 18015                                  ;	I_need	DOS_FLAG,BYTE
 18016                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18017                                  
 18018                                  ;Break	<DOS_Open - internal file access>
 18019                                  ;---------------------------------------------------------------------------
 18020                                  ; Procedure Name : DOS_Open
 18021                                  ;
 18022                                  ; Inputs:
 18023                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18024                                  ;		terminated)
 18025                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18026                                  ;		( = -1 if current dir not involved, else
 18027                                  ;		 Points to first char after last "/" of current dir part)
 18028                                  ;	[THISCDS] Points to CDS being used
 18029                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18030                                  ;	[THISSFT] Points to SFT to fill in if file found
 18031                                  ;		(sf_mode field set so that FCB may be detected)
 18032                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18033                                  ;	AX is Access and Sharing mode
 18034                                  ;	  High NIBBLE of AL (Sharing Mode)
 18035                                  ;		sharing_compat	   file is opened in compatibility mode
 18036                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18037                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18038                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18039                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18040                                  ;	  Low NIBBLE of AL (Access Mode)
 18041                                  ;		open_for_read	file is opened for reading
 18042                                  ;		open_for_write	file is opened for writing
 18043                                  ;		open_for_both	file is opened for both reading and writing.
 18044                                  ;
 18045                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18046                                  ;		(not checked)
 18047                                  ; Function:
 18048                                  ;	Try to open the specified file
 18049                                  ; Outputs:
 18050                                  ;	sf_ref_count is NOT altered
 18051                                  ;	CARRY CLEAR
 18052                                  ;	    THISSFT filled in.
 18053                                  ;	CARRY SET
 18054                                  ;	    AX is error code
 18055                                  ;		error_file_not_found
 18056                                  ;			Last element of path not found
 18057                                  ;		error_path_not_found
 18058                                  ;			Bad path (not in curr dir part if present)
 18059                                  ;		error_bad_curr_dir
 18060                                  ;			Bad path in current directory part of path
 18061                                  ;		error_invalid_access
 18062                                  ;			Bad sharing mode or bad access mode or bad combination
 18063                                  ;		error_access_denied
 18064                                  ;			Attempt to open read only file for writting, or
 18065                                  ;			open a directory
 18066                                  ;		error_sharing_violation
 18067                                  ;			The sharing mode was correct but not allowed
 18068                                  ;			generates an INT 24 on compatibility mode SFTs
 18069                                  ; DS preserved, others destroyed
 18070                                  ;----------------------------------------------------------------------------
 18071                                  
 18072                                  ; 18/05/2019 - Retro DOS v4.0
 18073                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18074                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18075                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18076                                  
 18077                                  DOS_OPEN:
 18078                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18079                                  
 18080 00002B70 C606[4C03]00            	MOV	byte [NoSetDir],0
 18081 00002B75 E83301                  	CALL	Check_Access_AX
 18082 00002B78 722B                    	JC	short do_ret_label	    ; retc
 18083                                  
 18084 00002B7A C43E[9E05]              	LES	DI,[THISSFT]
 18085 00002B7E 30E4                    	XOR	AH,AH
 18086                                  
 18087                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18088                                  
 18089 00002B80 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18090 00002B84 06                      	PUSH	ES
 18091 00002B85 C436[A205]              	LES	SI,[THISCDS]
 18092                                  	; 18/08/2018
 18093 00002B89 83FEFF                  	CMP	SI,-1
 18094 00002B8C 7530                    	JNZ	short TEST_RE_NET1
 18095 00002B8E 07                      	POP	ES
 18096                                  
 18097                                  	; MSDOS 6.0
 18098                                  ;Extended open hooks
 18099 00002B8F F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18100 00002B94 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18101                                  _IFS_extopen:									;AN000;
 18102 00002B96 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18103                                  					    ; with which call was made. This
 18104                                  					    ; has the open access bits. 
 18105                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18106                                  	
 18107 00002B99 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18108                                  	;mov	ax,112Eh
 18109                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18110 00002B9A B82E11                  	mov	ax,(MultNET*256)+46 
 18111 00002B9D CD2F                    	INT	2FH			    ;FT.				;AN000;
 18112 00002B9F 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18113 00002BA0 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18114                                  
 18115                                  do_ret_label:
 18116 00002BA5 C3                      	retn				    ;FT.				;AN000;
 18117                                  _NOEXTOP:
 18118                                  ;Extended open hooks
 18119                                  	;
 18120                                  ;IF NOT Installed
 18121                                  	;transfer NET_SEQ_OPEN
 18122                                  ;ELSE
 18123                                  	
 18124                                  do_net_int2f:
 18125 00002BA6 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18126 00002BAB 7409                    	jz	short not_exec_open	; N: just do net open
 18127                                  					; Y: check to see if redir is aware
 18128                                  					;    of this 
 18129                                  	
 18130                                  					; M042 - start
 18131                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18132 00002BAD F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18133                                  					; Q: does this redir know how to 
 18134                                  					;    this
 18135 00002BB2 7402                    	jz	short not_exec_open	; N: just do net open
 18136                                  					; Y: set bit 3 of access byte and 
 18137                                  					;    set sharing mode to DENY_WRITE
 18138                                  					; M042 - end
 18139                                  	
 18140                                  	; NOTE: This specific mode has not been set for the code assembled
 18141                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18142                                  	; always one.
 18143                                  					; M035 - set the bits on the stack
 18144                                  	;mov	al,23h
 18145 00002BB4 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18146                                  	
 18147                                  not_exec_open:
 18148                                  	; MSDOS 3.3 & MSDOS 6.0
 18149 00002BB6 50                      	PUSH	AX
 18150                                  
 18151                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18152                                  	;INT	2FH
 18153                                  
 18154 00002BB7 B81611                  	mov     ax,1116h
 18155 00002BBA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18156                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18157                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18158                                  			; STACK: WORD file open mode
 18159                                  			; Return: CF set on error
 18160                                  
 18161 00002BBC 5B                      	POP	BX			; clean stack
 18162                                  ;do_ret_label: ; 09/08/2018
 18163 00002BBD C3                      	retn
 18164                                  ;ENDIF
 18165                                  
 18166                                  TEST_RE_NET1:
 18167                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18168                                  	; 17/12/2022
 18169 00002BBE 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18170 00002BC3 07                      	POP	ES
 18171                                  	; 18/05/2019
 18172 00002BC4 7409                    	JZ	short LOCAL_OPEN
 18173                                  
 18174                                  ;Extended open hooks
 18175                                  	; MSDOS 6.0
 18176 00002BC6 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18177 00002BCB 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18178                                  ;Extended open hooks
 18179                                  
 18180                                  ;IF NOT Installed
 18181                                  ;	transfer NET_OPEN
 18182                                  ;ELSE
 18183 00002BCD EBD7                    	jmp	short do_net_int2f
 18184                                  ;ENDIF
 18185                                  
 18186                                  LOCAL_OPEN:
 18187                                  	; MSDOS 3.3 & MSDOS 6.0
 18188 00002BCF E840E7                  	call	ECritDisk
 18189                                  
 18190                                  ; DOS 3.3 FastOPen 6/16/86
 18191                                  
 18192                                  	;or	byte [FastOpenFlg],5
 18193 00002BD2 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18194                                  
 18195 00002BD7 E83B13                  	call	GETPATH
 18196                                  
 18197                                  ; DOS 3.3 FastOPen 6/16/86
 18198                                  
 18199 00002BDA 731D                    	JNC	short Open_found
 18200 00002BDC 7511                    	JNZ	short bad_path2
 18201 00002BDE 08C9                    	OR	CL,CL
 18202 00002BE0 740D                    	JZ	short bad_path2
 18203                                  OpenFNF:
 18204 00002BE2 B80200                  	MOV	AX,error_file_not_found	; 2
 18205                                  OpenBadRet:
 18206                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18207                                  	; 12/08/2018
 18208                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18209                                  	; MSDOS 6.0
 18210 00002BE5 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18211 00002BEB F9                      	STC
 18212                                  	;call	LCritDisk
 18213                                  	; 16/12/2022
 18214 00002BEC E93EE7                  	jmp	LCritDisk
 18215                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18216                                  	;retn 	; 08/09/2018
 18217                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18218                                  	;jmp	Clear_FastOpen
 18219                                  
 18220                                  bad_path2:
 18221 00002BEF B80300                  	MOV	AX,error_path_not_found	; 3
 18222 00002BF2 EBF1                    	JMP	short OpenBadRet
 18223                                  
 18224                                  Open_Bad_Access:
 18225 00002BF4 B80500                  	MOV	AX,error_access_denied	; 5
 18226 00002BF7 EBEC                    	JMP	short OpenBadRet
 18227                                  
 18228                                  Open_found:
 18229 00002BF9 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18230 00002BFB 08E4                    	OR	AH,AH
 18231 00002BFD 783E                    	JS	short open_ok		; Devices don't have attributes
 18232 00002BFF 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18233                                  	;mov	al,[es:bx+0Bh]
 18234 00002C03 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18235 00002C07 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18236 00002C09 75E9                    	JNZ	short Open_Bad_Access
 18237 00002C0B A801                    	TEST	AL,attr_read_only	; check write on read only
 18238 00002C0D 742E                    	JZ	short open_ok
 18239                                  
 18240                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18241                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18242                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18243                                  ; processing until the actual write operation:
 18244                                  ;
 18245                                  ; If FCB, then we change the mode to be read_only.
 18246                                  ; If net_FCB, then we change the mode to be read_only.
 18247                                  ; If not open for read then error.
 18248                                  
 18249 00002C0F 1E                      	push	ds
 18250 00002C10 56                      	push	si
 18251 00002C11 C536[9E05]              	LDS	SI,[THISSFT]
 18252                                  	;mov	cx,[si+2]
 18253 00002C15 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18254                                  	; 17/12/2022
 18255                                  	;test	ch,80h
 18256 00002C18 F6C580                  	test	ch,sf_isFCB>>8
 18257                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18258 00002C1B 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18259 00002C1D 88CA                    	MOV	DL,CL
 18260 00002C1F 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18261 00002C22 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18262 00002C25 7508                    	JNZ	short NormalOpen	; no
 18263                                  ResetAccess:
 18264                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18265                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18266                                  	; 16/12/2022
 18267 00002C27 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18268                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18269 00002C2A 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18270 00002C2D EB0C                    	JMP	SHORT FillSFT
 18271                                  
 18272                                  ; The SFT is normal. See if the requested access is open_for_read
 18273                                  
 18274                                  NormalOpen:
 18275 00002C2F 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18276 00002C32 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18277 00002C35 7404                    	JZ	short FillSFT
 18278 00002C37 5E                      	pop	si
 18279 00002C38 1F                      	pop	ds
 18280 00002C39 EBB9                    	JMP	short Open_Bad_Access
 18281                                  ;
 18282                                  ; All done, restore registers and fill the SFT.
 18283                                  ;
 18284                                  FillSFT:
 18285 00002C3B 5E                      	pop	si
 18286 00002C3C 1F                      	pop	ds
 18287                                  open_ok:
 18288 00002C3D E8001F                  	call	DOOPEN			; Fill in SFT
 18289                                  
 18290                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18291                                  	; 18/05/2019
 18292                                  	;and	byte [ss:FastOpenFlag],80h
 18293 00002C40 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18294                                  	; 12/08/2018
 18295                                  	;and	byte [FastOpenFlg],Fast_yes	
 18296                                  
 18297                                  	; MSDOS 6.0
 18298 00002C46 E84300                  	CALL	DO_SHARE_CHECK
 18299 00002C49 7303                    	JNC	short SHARE_OK
 18300                                  	;call	LCritDisk
 18301                                  	; 16/12/2022
 18302 00002C4B E9DFE6                  	jmp	LCritDisk
 18303                                  	;;JMP	short Clear_FastOpen
 18304                                  	;retn	; 18/05/2019
 18305                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18306                                  	;jmp	short Clear_FastOpen	
 18307                                  
 18308                                  	; MSDOS 3.3
 18309                                  ;DO_SHARE_CHECK:
 18310                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18311                                  ;OpenShareRetry:
 18312                                  ;	push	cx			; Save number left to do
 18313                                  ;	call	SHARE_CHECK		; Final Check
 18314                                  ;	pop	cx			; CX = # left
 18315                                  ;	JNC	short SHARE_OK		; No problem with access
 18316                                  ;	call	Idle
 18317                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18318                                  ;OpenShareFail:
 18319                                  ;	LES	DI,[THISSFT]
 18320                                  ;	call	SHARE_ERROR
 18321                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18322                                  	
 18323                                  	;12/08/2018
 18324                                  	;mov	byte [ss:FastOpenFlg],0
 18325                                  	;08/09/2018
 18326                                  	;mov	byte [FastOpenFlg],0
 18327                                  	;call	LCritDisk
 18328                                  	;JMP	short Clear_FastOpen
 18329                                  	;retn
 18330                                  
 18331                                  SHARE_OK:
 18332                                  	; MSDOS 3.3 & MSDOS 6.0
 18333 00002C4E B80300                  	MOV	AX,3
 18334 00002C51 C43E[9E05]              	LES	DI,[THISSFT]
 18335                                  ;if installed
 18336                                  	;call	JShare + 14 * 4
 18337 00002C55 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18338                                  ;else
 18339                                  ;	Call	ShSU
 18340                                  ;endif
 18341 00002C59 E8D1E6                  	call	LCritDisk
 18342                                  	
 18343                                  	;FallThru Set_SFT_Mode
 18344                                  
 18345                                  ;----------------------------------------------------------------------------
 18346                                  ; Procedure Name : SET_SFT_MODE
 18347                                  ;
 18348                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18349                                  ;
 18350                                  ;   Inputs:
 18351                                  ;	ThisSFT points to SFT
 18352                                  ;
 18353                                  ;   Outputs:
 18354                                  ;	Carry clear
 18355                                  ;   Registers modified: AX.
 18356                                  ;---------------------------------------------------------------------------
 18357                                  
 18358                                  ;hkn; called from create. DS already set up to DOSDATA.
 18359                                  
 18360                                  SET_SFT_MODE:
 18361 00002C5C C43E[9E05]              	LES	DI,[THISSFT]
 18362 00002C60 E88019                  	call	DEV_OPEN_SFT
 18363                                  	;test	word [es:di+2],8000h
 18364                                  	; 17/12/2022
 18365                                  	;test	byte [es:di+3],80h
 18366 00002C63 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18367                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18368 00002C68 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18369 00002C6A A1[3003]                	MOV	AX,[CurrentPDB]
 18370                                  	;mov	[es:di+31h],ax
 18371 00002C6D 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18372                                  
 18373                                  Clear_FastOpen:
 18374 00002C71 C3                      	retn			       ;;;;; DOS 3.3
 18375                                  
 18376                                  ;----------------------------------------------------------------------------
 18377                                  ; Procedure Name : SHARE_ERROR
 18378                                  ;
 18379                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18380                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18381                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18382                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18383                                  ;---------------------------------------------------------------------------
 18384                                  
 18385                                  SHARE_ERROR:
 18386                                  	; 17/12/2022
 18387                                  	;test	byte [es:di+3],80h
 18388 00002C72 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18389                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18390 00002C77 7509                    	JNZ	short _HARD_ERR
 18391 00002C79 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18392 00002C7D 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18393                                  	;CMP	CL,SHARING_COMPAT ; 0
 18394                                  	;JNE	short _NO_HARD_ERR
 18395                                  	; 21/09/2023
 18396 00002C80 7505                    	jnz	short _NO_HARD_ERR
 18397                                  _HARD_ERR:
 18398 00002C82 E8BB46                  	call	SHARE_VIOLATION
 18399                                  	;retnc				; User wants retry
 18400 00002C85 73EA                    	jnc	short Clear_FastOpen
 18401                                  _NO_HARD_ERR:
 18402 00002C87 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18403 00002C8A F9                      	STC
 18404 00002C8B C3                      	retn
 18405                                  
 18406                                  ; MSDOS 6.0
 18407                                  ;----------------------------------------------------------------------------
 18408                                  ; Procedure Name : DO_SHARE_CHECK
 18409                                  ;
 18410                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18411                                  ; Functions: check file sharing mode is valid
 18412                                  ; Output: carry set, error
 18413                                  ;	  carry clear, share ok
 18414                                  ;----------------------------------------------------------------------------
 18415                                  
 18416                                  	; 18/05/2019 - Retro DOS v4.0
 18417                                  DO_SHARE_CHECK:
 18418 00002C8C E883E6                  	call	ECritDisk		; enter critical section
 18419                                  OPN_RETRY:
 18420 00002C8F 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18421                                  OpenShareRetry:
 18422 00002C93 51                      	push	cx			; Save number left to do
 18423 00002C94 E8A446                  	call	SHARE_CHECK		; Final Check
 18424 00002C97 59                      	pop	cx			; CX = # left
 18425 00002C98 730E                    	JNC	short Share_Ok2		; No problem with access
 18426 00002C9A E86EE5                  	call	Idle
 18427 00002C9D E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18428                                  OpenShareFail:
 18429 00002C9F C43E[9E05]              	LES	DI,[THISSFT]
 18430 00002CA3 E8CCFF                  	call	SHARE_ERROR
 18431 00002CA6 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18432                                  Share_Ok2:
 18433                                  	;call	LCritDisk		; leave critical section
 18434                                  	;retn
 18435                                  	; 18/12/2022
 18436 00002CA8 E982E6                  	jmp	LCritDisk
 18437                                  
 18438                                  ;-----------------------------------------------------------------------------
 18439                                  ; Procedure Name : Check_Access
 18440                                  ;
 18441                                  ; Inputs:
 18442                                  ;	AX is mode
 18443                                  ;	  High NIBBLE of AL (Sharing Mode)
 18444                                  ;		sharing_compat	   file is opened in compatibility mode
 18445                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18446                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18447                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18448                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18449                                  ;	  Low NIBBLE of AL (Access Mode)
 18450                                  ;		open_for_read	file is opened for reading
 18451                                  ;		open_for_write	file is opened for writing
 18452                                  ;		open_for_both	file is opened for both reading and writing.
 18453                                  ; Function:
 18454                                  ;	Check this access mode for correctness
 18455                                  ; Outputs:
 18456                                  ;	[open_access] = AL input
 18457                                  ;	Carry Clear
 18458                                  ;		Mode is correct
 18459                                  ;		AX unchanged
 18460                                  ;	Carry Set
 18461                                  ;		Mode is bad
 18462                                  ;		AX = error_invalid_access
 18463                                  ; No other registers effected
 18464                                  ;----------------------------------------------------------------------------
 18465                                  
 18466                                  Check_Access_AX:
 18467 00002CAB A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18468 00002CAE 53                      	PUSH	BX
 18469                                  
 18470                                  ;	If sharing, then test for special sharing mode for FCBs
 18471                                  
 18472 00002CAF 88C3                    	MOV	BL,AL
 18473 00002CB1 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18474 00002CB4 803E[7205]FF            	CMP	byte [FSHARING],-1
 18475 00002CB9 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18476 00002CBB 80FB70                  	CMP	BL,SHARING_NET_FCB
 18477 00002CBE 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18478                                  CheckShareMode:
 18479 00002CC0 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18480 00002CC3 770D                    	JA	short Make_Bad_Access
 18481                                  CheckAccessMode:
 18482 00002CC5 88C3                    	MOV	BL,AL
 18483 00002CC7 80E30F                  	AND	BL,access_mask
 18484 00002CCA 80FB02                  	CMP	BL,2
 18485 00002CCD 7703                    	JA	short Make_Bad_Access
 18486 00002CCF 5B                      	POP	BX
 18487 00002CD0 F8                      	CLC
 18488 00002CD1 C3                      	retn
 18489                                  
 18490                                  Make_Bad_Access:
 18491 00002CD2 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18492 00002CD5 5B                      	POP	BX
 18493 00002CD6 F9                      	STC
 18494 00002CD7 C3                      	retn
 18495                                  
 18496                                  ;============================================================================
 18497                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18498                                  ;============================================================================
 18499                                  ; 08/08/2018 - Retro DOS v3.0
 18500                                  ; 18/05/2019 - Retro DOS v4.0
 18501                                  
 18502                                  ;**	Low level routine for returning disk drive information from a local
 18503                                  ;	  or NET device
 18504                                  ;
 18505                                  ;	DISK_INFO
 18506                                  ;
 18507                                  ;	  Modification history:
 18508                                  ;
 18509                                  ;		Created: ARR 30 March 1983
 18510                                  
 18511                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18512                                  ;---------------------------------------------------------------------------
 18513                                  ; Procedure Name : DISK_INFO
 18514                                  ;
 18515                                  ; Inputs:
 18516                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18517                                  ;		(It MAY NOT be NUL, error not detected)
 18518                                  ; Function:
 18519                                  ;	Get Interesting Drive Information
 18520                                  ; Returns:
 18521                                  ;	DX = Number of free allocation units
 18522                                  ;	BX = Total Number of allocation units on disk
 18523                                  ;	CX = Sector size
 18524                                  ;	AL = Sectors per allocation unit
 18525                                  ;	AH = FAT ID BYTE
 18526                                  ;	Carry set if error (currently user FAILed to I 24)
 18527                                  ; Segs except ES preserved, others destroyed
 18528                                  ;----------------------------------------------------------------------------
 18529                                  
 18530                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18531                                  ;hkn; DOSDATA. 
 18532                                  
 18533                                  DISK_INFO:
 18534                                  	; 08/08/2018 - Retro DOS v3.0
 18535                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18536                                  
 18537 00002CD8 E875E5                  	call	TestNet
 18538 00002CDB 7306                    	JNC	short LOCAL_DSK_INFO
 18539                                  
 18540                                  ;IF NOT Installed
 18541                                  ;	transfer NET_DISK_INFO
 18542                                  ;ELSE
 18543                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18544                                  	;INT	2FH
 18545                                  	;return
 18546                                  
 18547 00002CDD B80C11                  	mov     ax,110Ch
 18548 00002CE0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18549                                  			; ES:DI -> current directory
 18550                                  			; Return: AL = sectors per cluster, BX = total clusters
 18551                                  			; CX = bytes per sector, DX = number of available clusters
 18552 00002CE2 C3                      	retn
 18553                                  ;ENDIF
 18554                                  
 18555                                  LOCAL_DSK_INFO:
 18556 00002CE3 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18557 00002CE8 E827E6                  	call	ECritDisk
 18558 00002CEB E8DC29                  	call	FATREAD_CDS		; perform media check.
 18559 00002CEE 7241                    	JC	short CRIT_LEAVE
 18560 00002CF0 BB0200                  	MOV	BX,2
 18561 00002CF3 E83E28                  	call	UNPACK			; Get first FAT sector into CURBUF
 18562 00002CF6 7239                    	JC	short CRIT_LEAVE
 18563 00002CF8 C536[E205]              	LDS	SI,[CURBUF]
 18564                                  	;mov	ah,[si+20]
 18565 00002CFC 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18566                                  
 18567                                  ;hkn; SS is DOSDATA
 18568 00002CFF 16                      	push	ss
 18569 00002D00 1F                      	pop	ds
 18570                                  	;mov	cx,[es:bp+0Dh]
 18571 00002D01 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18572                                  
 18573                                  ; Examine the current free count. If it indicates that we have an invalid
 18574                                  ; count, do the expensive calculation.
 18575                                  
 18576                                  	;mov	dx,[es:bp+1Fh]
 18577 00002D05 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18578 00002D09 83FAFF                  	CMP	DX,-1			; is it valid?
 18579 00002D0C 7404                    	JZ	short DoScan
 18580                                  
 18581                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18582                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18583                                  ; the count.
 18584                                  
 18585 00002D0E 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18586 00002D10 7222                    	JB	short GotVal		; yes, trust it.
 18587                                  DoScan:
 18588 00002D12 31D2                    	XOR	DX,DX
 18589 00002D14 49                      	DEC	CX
 18590                                  SCANFREE:
 18591 00002D15 E81C28                  	call	UNPACK
 18592 00002D18 7217                    	JC	short CRIT_LEAVE
 18593 00002D1A 7501                    	JNZ	short NOTFREECLUS
 18594 00002D1C 42                      	INC	DX			; A free one
 18595                                  NOTFREECLUS:
 18596 00002D1D 43                      	INC	BX			; Next cluster
 18597 00002D1E E2F5                    	LOOP	SCANFREE
 18598 00002D20 4B                      	DEC	BX			; BX was next cluster. Convert to
 18599                                  ReturnVals:
 18600 00002D21 4B                      	DEC	BX			; count
 18601                                  	;mov	al,[es:bp+4]
 18602 00002D22 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18603 00002D26 FEC0                    	INC	AL			; Sectors/cluster
 18604                                  	;mov	cx,[es:bp+2]
 18605 00002D28 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18606                                  	;mov	[es:bp+1Fh],dx
 18607 00002D2C 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18608 00002D30 F8                      	CLC
 18609                                  CRIT_LEAVE:
 18610                                  	;call	LCritDisk
 18611                                  	;retn
 18612                                  	; 17/12/2022
 18613 00002D31 E9F9E5                  	jmp	LCritDisk
 18614                                  
 18615                                  ; We have correctly computed everything previously. Load up registers for
 18616                                  ; return.
 18617                                  
 18618                                  GotVal: 
 18619 00002D34 89CB                    	MOV	BX,CX			; get cluster count
 18620 00002D36 EBE9                    	JMP	short ReturnVals
 18621                                  
 18622                                  ;============================================================================
 18623                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18624                                  ;============================================================================
 18625                                  ; 22/07/2018 - Retro DOS v3.0
 18626                                  
 18627                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18628                                  ;	NAME	DOS_SEARCH
 18629                                  
 18630                                  ;**	Low level routines for doing local and NET directory searches
 18631                                  ;
 18632                                  ;	DOS_SEARCH_FIRST
 18633                                  ;	DOS_SEARCH_NEXT
 18634                                  ;	RENAME_NEXT
 18635                                  ;
 18636                                  ;	Revision history:
 18637                                  ;
 18638                                  ;	    Created: ARR 30 March 1983
 18639                                  ;	    A000	version 4.00  Jan. 1988
 18640                                  ;	    A001	PTM 3564 -- search for fastopen
 18641                                  
 18642                                  ;Installed = TRUE
 18643                                  
 18644                                  ;--------------------------------------------------------------------------
 18645                                  ;
 18646                                  ; Procedure Name : DOS_SEARCH_FIRST
 18647                                  ;
 18648                                  ; Inputs:
 18649                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18650                                  ;		terminated)
 18651                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18652                                  ;		( = -1 if current dir not involved, else
 18653                                  ;		 Points to first char after last "/" of current dir part)
 18654                                  ;	[THISCDS] Points to CDS being used
 18655                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18656                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18657                                  ;	[DMAADD] Points to 53 byte buffer
 18658                                  ; Function:
 18659                                  ;	Initiate a search for the given file spec
 18660                                  ; Outputs:
 18661                                  ;	CARRY CLEAR
 18662                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18663                                  ;
 18664                                  ;	LOCAL
 18665                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18666                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18667                                  ;	    11 byte search name with Meta chars in it
 18668                                  ;	    Search Attribute Byte, attribute of search
 18669                                  ;	    WORD LastEnt value
 18670                                  ;	    WORD DirStart
 18671                                  ;	    4 byte pad
 18672                                  ;	    32 bytes of the directory entry found
 18673                                  ;	NET
 18674                                  ;	    21 bytes First byte has high bit set
 18675                                  ;	    32 bytes of the directory entry found
 18676                                  ;
 18677                                  ;	CARRY SET
 18678                                  ;	    AX = error code
 18679                                  ;		error_no_more_files
 18680                                  ;			No match for this file
 18681                                  ;		error_path_not_found
 18682                                  ;			Bad path (not in curr dir part if present)
 18683                                  ;		error_bad_curr_dir
 18684                                  ;			Bad path in current directory part of path
 18685                                  ; DS preserved, others destroyed
 18686                                  ;---------------------------------------------------------------------------
 18687                                  
 18688                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18689                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18690                                  
 18691                                  DOS_SEARCH_FIRST:
 18692                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18693                                  
 18694 00002D38 C43E[A205]              	LES	DI,[THISCDS]
 18695 00002D3C 83FFFF                  	CMP	DI,-1
 18696 00002D3F 7506                    	JNZ	short TEST_RE_NET2
 18697                                  
 18698                                  ;IF NOT Installed
 18699                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18700                                  ;ELSE
 18701                                  	;mov	ax,1119h
 18702 00002D41 B81911                  	MOV	AX,(MultNET<<8)|25
 18703 00002D44 CD2F                    	INT	2Fh
 18704 00002D46 C3                      	retn
 18705                                  ;ENDIF
 18706                                  
 18707                                  TEST_RE_NET2:
 18708                                  	;test	word [es:di+43h],8000h
 18709                                  	; 17/12/2022
 18710                                  	;test	byte [es:di+44h],80h
 18711                                  	; 28/12/2022
 18712 00002D47 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18713                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18714 00002D4C 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18715                                  
 18716                                  ;IF NOT Installed
 18717                                  ;	transfer NET_SEARCH_FIRST
 18718                                  ;ELSE
 18719                                  	;mov	ax,111Bh
 18720 00002D4E B81B11                  	MOV	AX,(MultNET<<8)|27
 18721 00002D51 CD2F                    	INT	2FH
 18722 00002D53 C3                      	retn
 18723                                  ;ENDIF
 18724                                  	; 18/05/2019 - Retro DOS v4.0
 18725                                  LOCAL_SEARCH_FIRST:
 18726 00002D54 E8BBE5                  	call	ECritDisk
 18727                                  	; MSDOS 6.0
 18728                                  	;;test	word [DOS34_FLAG],400h
 18729                                  	; 17/12/2022
 18730                                  	;test	byte [DOS34_FLAG+1],04h
 18731 00002D57 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18732                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18733 00002D5C 7405                    	JZ	short NOFN			;AN000;
 18734                                  	;or	byte [FastOpenFlg],1
 18735 00002D5E 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18736                                  NOFN:						;AN000;
 18737 00002D63 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18738                                  	; MSDOS 6.0
 18739 00002D68 E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18740 00002D6B 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18741                                  	;and	byte [FastOpenFlg],80h
 18742 00002D6D 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18743                                  norm_GETPATH:
 18744 00002D72 E8A011                  	call	GETPATH
 18745                                  	; BX = offset NAME1
 18746                                  ;_getdone:
 18747 00002D75 7318                    	JNC	short find_check_dev
 18748 00002D77 7511                    	JNZ	short bad_path3
 18749 00002D79 08C9                    	OR	CL,CL
 18750 00002D7B 740D                    	JZ	short bad_path3
 18751                                  find_no_more:
 18752                                  	;mov	ax,12h
 18753 00002D7D B81200                  	MOV	AX,error_no_more_files
 18754                                  BadBye:
 18755                                  	; MSDOS 6.0
 18756 00002D80 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18757                                  
 18758 00002D86 F9                      	STC
 18759                                  	;call	LCritDisk
 18760                                  	;retn
 18761                                  	; 18/12/2022
 18762 00002D87 E9A3E5                  	jmp	LCritDisk
 18763                                  
 18764                                  bad_path3:
 18765                                  	;mov	ax,3
 18766 00002D8A B80300                  	MOV	AX,error_path_not_found
 18767 00002D8D EBF1                    	JMP	short BadBye
 18768                                  
 18769                                  find_check_dev:
 18770 00002D8F 08E4                    	OR	AH,AH
 18771 00002D91 790A                    	JNS	short found_entry
 18772 00002D93 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18773 00002D99 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18774                                  found_entry:
 18775                                  
 18776                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18777                                  ; a search-next may not have wfp_start set correctly
 18778                                  
 18779 00002D9D C43E[2C03]              	LES	DI,[DMAADD]
 18780 00002DA1 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18781 00002DA5 AC                      	LODSB
 18782 00002DA6 2C40                    	SUB	AL,'A'-1                ; logical drive
 18783 00002DA8 AA                      	STOSB				; High bit not set (local)
 18784                                  found_it:
 18785 00002DA9 C43E[2C03]              	LES	DI,[DMAADD]
 18786 00002DAD 47                      	INC	DI
 18787                                  
 18788                                  	; MSDOS 6.0
 18789 00002DAE 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18790                                  	;test	byte [FastOpenFlg],10h
 18791 00002DAF F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18792 00002DB4 7408                    	JZ	short notfast			  ;FO.;AN001;
 18793 00002DB6 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18794 00002DB8 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18795 00002DBC EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18796                                  
 18797                                  notfast:
 18798 00002DBE BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18799                                  movmov:
 18800                                  ; Special E5 code
 18801 00002DC1 A4                      	MOVSB
 18802 00002DC2 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18803 00002DC7 7505                    	JNZ	short NOTKANJB
 18804 00002DC9 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18805                                  NOTKANJB:
 18806 00002DCE B90A00                  	MOV	CX,10
 18807 00002DD1 F3A4                    	REP	MOVSB
 18808                                  
 18809                                  	; 08/09/2018
 18810 00002DD3 1F                      	POP	DS			;FO.;AN001; restore ds
 18811                                  
 18812 00002DD4 A0[6B05]                	MOV	AL,[ATTRIB]
 18813 00002DD7 AA                      	STOSB
 18814 00002DD8 50                      	PUSH	AX			; Save AH device info
 18815 00002DD9 A1[4803]                	MOV	AX,[LASTENT]
 18816 00002DDC AB                      	STOSW
 18817 00002DDD A1[C205]                	MOV	AX,[DIRSTART]
 18818 00002DE0 AB                      	STOSW
 18819                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18820 00002DE1 83C704                  	ADD	DI,4
 18821 00002DE4 58                      	POP	AX			; Recover AH device info
 18822 00002DE5 08E4                    	OR	AH,AH
 18823 00002DE7 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18824 00002DE9 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18825 00002DEE 7510                    	JNZ	short OKSTORE
 18826                                  
 18827                                  	; MSDOS 6.0
 18828 00002DF0 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18829                                  					;AN000;;FO. from fastopen and is good
 18830 00002DF5 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18831                                  
 18832                                  	; The user has specified the root directory itself, rather than some
 18833                                  	; contents of it. We can't "find" that.
 18834                                  
 18835 00002DF7 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18836                                  					;   stuffing a -1 at Lastent
 18837 00002DFD E97DFF                  	JMP	find_no_more
 18838                                  
 18839                                  OKSTORE:
 18840 00002E00 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18841                                  DOSREL:
 18842                                  	; BX = offset NAME1 (from GETPATH)
 18843 00002E04 89DE                    	MOV	SI,BX			; SI-> start of entry
 18844                                  
 18845                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18846                                  
 18847                                  	;mov	cx,32
 18848 00002E06 B92000                  	MOV	CX,dir_entry.size
 18849                                  ;;;;; 7/29/86
 18850 00002E09 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18851 00002E0B F3A4                    	REP	MOVSB
 18852 00002E0D 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18853 00002E0F 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18854 00002E13 7504                    	JNZ	short NO05
 18855 00002E15 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18856                                  NO05:
 18857                                  
 18858                                  ;;;;; 7/29/86
 18859                                  
 18860                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18861                                  	; 16/12/2022
 18862                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18863                                  	; MSDOS 6.0
 18864                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18865                                  	; 18/05/2019 - Retro DOS v4.0
 18866 00002E19 16                      	push	ss
 18867 00002E1A 1F                      	pop	ds
 18868                                  	; 16/12/2022
 18869 00002E1B 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18870                                  
 18871                                  ;hkn; SS is DOSDATA
 18872                                  	;push	ss
 18873                                  	;pop	ds
 18874 00002E20 F8                      	CLC
 18875                                  	;call	LCritDisk
 18876                                  	;retn
 18877                                  	; 16/12/2022
 18878 00002E21 E909E5                  	jmp	LCritDisk
 18879                                  
 18880                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18881                                  ;----------------------------------------------------------------------------
 18882                                  ;
 18883                                  ; Procedure Name : DOS_SEARCH_NEXT
 18884                                  ;
 18885                                  ; Inputs:
 18886                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18887                                  ;	    (only first 21 bytes must have valid information)
 18888                                  ; Function:
 18889                                  ;	Look for subsequent matches
 18890                                  ; Outputs:
 18891                                  ;	CARRY CLEAR
 18892                                  ;	    The 53 bytes at DMAADD are updated for next call
 18893                                  ;		(see DOS_SEARCH_FIRST)
 18894                                  ;	CARRY SET
 18895                                  ;	    AX = error code
 18896                                  ;		error_no_more_files
 18897                                  ;			No more files to find
 18898                                  ; DS preserved, others destroyed
 18899                                  ;---------------------------------------------------------------------------
 18900                                  
 18901                                  ;hkn; called from search.asm. DS already set up at this point.
 18902                                  
 18903                                  DOS_SEARCH_NEXT:
 18904 00002E24 C43E[2C03]              	LES	DI,[DMAADD]
 18905 00002E28 268A05                  	MOV	AL,[ES:DI]
 18906 00002E2B A880                    	TEST	AL,80H			; Test for NET
 18907 00002E2D 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18908                                  ;IF NOT Installed
 18909                                  ;	transfer NET_SEARCH_NEXT
 18910                                  ;ELSE
 18911                                  	;mov	ax,111Ch
 18912 00002E2F B81C11                  	MOV	AX,(MultNET<<8)|28
 18913 00002E32 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18914                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18915                                  		     ; Return: CF set on error, AX = DOS error code
 18916                                  		     ; CF clear if successful
 18917 00002E34 C3                      	retn
 18918                                  ;ENDIF
 18919                                  
 18920                                  LOCAL_SEARCH_NEXT:
 18921                                  	;AL is drive A=1
 18922                                  	;mov	byte [EXTERR_LOCUS],2
 18923 00002E35 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18924 00002E3A E8D5E4                  	call	ECritDisk
 18925                                  
 18926                                  ;hkn; DummyCDS is in DOSDATA
 18927 00002E3D C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18928                                  ;hkn; Segment address is DOSDATA - use ds
 18929                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18930 00002E43 8C1E[A405]              	mov	[THISCDS+2],DS
 18931                                  
 18932 00002E47 0440                    	ADD	AL,'A'-1
 18933 00002E49 E8843B                  	call	InitCDS
 18934                                  
 18935                                  ;	call	GETTHISDRV		; Set CDS pointer
 18936                                  
 18937 00002E4C 7236                    	JC	short No_files		; Bogus drive letter
 18938 00002E4E C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18939                                  	;les	bp,[es:di+45h]
 18940 00002E52 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18941 00002E56 E8D9D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18942                                  
 18943                                  	 ;16/12/2022
 18944 00002E59 268A4600                	mov	al,[ES:BP]
 18945                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18946                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18947 00002E5D A2[7605]                	mov	[THISDRV],AL
 18948                                  	;mov	word [CREATING],0E500h
 18949 00002E60 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18950 00002E66 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18951 00002E6B C536[2C03]              	LDS	SI,[DMAADD]
 18952 00002E6F AC                      	LODSB				; Drive Byte
 18953                                  
 18954                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18955                                  RENAME_NEXT:
 18956                                  	;context ES
 18957 00002E70 16                      	push	ss
 18958 00002E71 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18959                                  
 18960                                  ;hkn; NAME1 is in DOSDATA
 18961 00002E72 BF[4B05]                	MOV	DI,NAME1
 18962                                  
 18963 00002E75 B90B00                  	MOV	CX,11
 18964 00002E78 F3A4                    	REP	MOVSB			; Search name
 18965 00002E7A AC                      	LODSB				; Attribute
 18966                                  
 18967                                  ;hkn; SS override
 18968 00002E7B 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18969 00002E7F AD                      	LODSW				; LastEnt
 18970 00002E80 09C0                    	OR	AX,AX
 18971 00002E82 7903                    	JNS	short cont_load
 18972                                  No_files:
 18973 00002E84 E9F6FE                  	JMP	find_no_more
 18974                                  
 18975                                  cont_load:
 18976 00002E87 50                      	PUSH	AX			; Save LastEnt
 18977 00002E88 AD                      	LODSW				; DirStart
 18978 00002E89 89C3                    	MOV	BX,AX
 18979                                  
 18980                                  ;hkn; SS is DOSDATA
 18981                                  	;context DS
 18982 00002E8B 16                      	push	ss
 18983 00002E8C 1F                      	pop	ds
 18984 00002E8D C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18985                                  	;invoke	SetDirSrch
 18986 00002E91 E82410                  	call	SETDIRSRCH
 18987 00002E94 7303                    	JNC	short SEARCH_GOON
 18988 00002E96 58                      	POP	AX			; Clean stack
 18989 00002E97 EBEB                    	JMP	short No_files
 18990                                  
 18991                                  SEARCH_GOON:
 18992 00002E99 E80D13                  	call	STARTSRCH
 18993 00002E9C 58                      	POP	AX
 18994 00002E9D E8E90F                  	call	GETENT
 18995 00002EA0 72E2                    	JC	short No_files
 18996 00002EA2 E81F0F                  	call	NEXTENT
 18997 00002EA5 72DD                    	JC	short No_files
 18998 00002EA7 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18999 00002EA9 E9FDFE                  	JMP	found_it ; 10/08/2018
 19000                                  
 19001                                  ; MSDOS 6.0
 19002                                  ;---------------------------------------------------------------------------
 19003                                  ;
 19004                                  ; Procedure Name : CHECK_QUESTION
 19005                                  ;
 19006                                  ; Input: [WFP_START]= pointer to final path
 19007                                  ; Function: check '?' char
 19008                                  ; Output: carry clear, if no '?'
 19009                                  ;	 carry set, if '?' exists
 19010                                  ;---------------------------------------------------------------------------
 19011                                  
 19012                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19013                                  CHECK_QUESTION:
 19014                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19015                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19016 00002EAC 16                      	push	ss
 19017 00002EAD 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 19018                                  	; 16/12/2022
 19019                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19020 00002EAE 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 19021                                  	;mov	si,[ss:WFP_START]
 19022                                  getnext:				;AN000;
 19023 00002EB2 AC                      	LODSB				;AN000;;FO. get char
 19024 00002EB3 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 19025 00002EB5 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 19026 00002EB7 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19027 00002EB9 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 19028 00002EBB F9                      	STC				;AN000;;FO.
 19029                                  NO_Question:				;AN000;
 19030 00002EBC C3                      	retn				;AN000;;FO.
 19031                                  
 19032                                  ;============================================================================
 19033                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19034                                  ;============================================================================
 19035                                  ; 23/07/2018 - Retro DOS v3.0
 19036                                  ; 18/05/2019 - Retro DOS v4.0
 19037                                  
 19038                                  ;**
 19039                                  ;
 19040                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19041                                  ;  If process has NET resources a close all is sent out over the net.
 19042                                  ;
 19043                                  ;   DOS_ABORT
 19044                                  ;
 19045                                  ;   Modification history:
 19046                                  ;
 19047                                  ;       Created: ARR 30 March 1983
 19048                                  ;
 19049                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19050                                  ;				being terminated only if it is busy.
 19051                                  ;
 19052                                  
 19053                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19054                                  ;--------------------------------------------------------------------------
 19055                                  ;
 19056                                  ; Procedure Name : DOS_ABORT
 19057                                  ;
 19058                                  ; Inputs:
 19059                                  ;       [CurrentPDB] set to PID of process aborting
 19060                                  ; Function:
 19061                                  ;       Close all files and free all SFTs for this PID
 19062                                  ; Returns:
 19063                                  ;       None
 19064                                  ; All destroyed except stack
 19065                                  ;---------------------------------------------------------------------------
 19066                                  
 19067                                  DOS_ABORT:
 19068 00002EBD 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19069 00002EC2 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19070                                  reset_free_jfn:
 19071 00002EC7 89CB                    	MOV     BX,CX
 19072 00002EC9 51                      	PUSH    CX
 19073 00002ECA 4B                      	DEC     BX                      ; get jfn (start with last one)
 19074                                  
 19075 00002ECB E83638                  	CALL	_$CLOSE
 19076 00002ECE 59                      	POP     CX
 19077 00002ECF E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19078                                  
 19079                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19080                                  ; are running in the no-sharing no-network environment, we are simulating the
 19081                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19082                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19083                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19084                                  ;
 19085                                  ; If sharing is loaded, then the following call to close process will
 19086                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19087                                  ;
 19088                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19089                                  ; known network resources. These resources are then responsible for cleaning
 19090                                  ; up after this process.
 19091                                  ;
 19092                                  ; Sleazy, eh?
 19093                                  
 19094                                  	;context DS			; SS is DOSDATA
 19095 00002ED1 16                      	push	ss
 19096 00002ED2 1F                      	pop	ds  ; 09/09/2018
 19097                                  
 19098                                  	;CallInstall Net_Abort, MultNET, 29
 19099 00002ED3 B81D11                  	mov	ax, 111Dh
 19100 00002ED6 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19101                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19102                                  			; DS???, SS = DOS CS
 19103                                  ;if installed
 19104 00002ED8 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19105                                  ;else
 19106                                  ;	call 	MFTCloseP
 19107                                  ;endif
 19108                                  
 19109                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19110                                  ; counts.
 19111                                  					; SS override
 19112 00002EDC 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19113                                  	;mov	cx,[es:di+4]
 19114 00002EE1 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19115 00002EE5 E317                    	jcxz    FCBScanDone
 19116                                  	;lea	di,[di+6]
 19117 00002EE7 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19118 00002EEA 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19119                                  FCBTest:
 19120                                  	;cmp	[es:di+31h],ax
 19121 00002EEE 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19122 00002EF2 7505                    	jnz	short FCBNext		; no, skip it
 19123 00002EF4 26C7050000              	mov	word [es:di],0
 19124                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19125                                  FCBNext:
 19126 00002EF9 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19127 00002EFC E2F0                    	loop    FCBTest
 19128                                  FCBScanDone:
 19129                                  
 19130                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19131                                  
 19132 00002EFE 31DB                    	XOR     BX,BX
 19133                                  Scan:
 19134 00002F00 53                      	push    bx
 19135 00002F01 E87B37                  	call	SFFromSFN
 19136 00002F04 5B                      	pop     bx
 19137                                  	;jnc	short Scan1
 19138                                  	;retn
 19139                                  	; 18/12/2022
 19140 00002F05 72B5                    	jc	short NO_Question ; retn
 19141                                  
 19142                                  ;M038
 19143                                  ; Do what the comment above says, check for busy state
 19144                                  
 19145                                  Scan1:
 19146                                  	;cmp	word [es:di],0
 19147                                  	;jz	short scan_next  ; MSDOS 3.3
 19148                                  	; MSDOS 6.0
 19149 00002F07 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19150                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19151                                  				; Is Sft busy? ;M038
 19152 00002F0B 7519                    	jnz	short scan_next
 19153                                  ;
 19154                                  ; we have a SFT that is busy. See if it is for the current process
 19155                                  ;
 19156 00002F0D 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19157                                  	;cmp	[es:di+31h],ax
 19158 00002F11 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19159 00002F15 750F                    	jnz	short scan_next
 19160 00002F17 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19161                                  	;cmp	[es:di+2Fh],ax
 19162 00002F1B 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19163 00002F1F 7505                    	jnz	short scan_next
 19164                                  
 19165                                  ; This SFT is labelled as ours.
 19166                                  
 19167 00002F21 26C7050000              	mov	word [es:di],0
 19168                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19169                                  scan_next:
 19170 00002F26 43                      	inc     bx
 19171 00002F27 EBD7                    	jmp     short Scan
 19172                                  
 19173                                  ;============================================================================
 19174                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19175                                  ;============================================================================
 19176                                  ; 23/07/2018 - Retro DOS v3.0
 19177                                  ; 18/05/2019 - Retro DOS v4.0
 19178                                  
 19179                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19180                                  ;
 19181                                  ;	DOS_CLOSE
 19182                                  ;	DOS_COMMIT
 19183                                  ;	FREE_SFT
 19184                                  ;	SetSFTTimes
 19185                                  ;
 19186                                  ;	Revision history:
 19187                                  ;
 19188                                  ;	   AN000  version 4.00	Jan. 1988
 19189                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19190                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19191                                  
 19192                                  ;Installed = TRUE
 19193                                  
 19194                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19195                                  ;---------------------------------------------------------------------------
 19196                                  ;
 19197                                  ; Procedure Name : DOS_CLOSE
 19198                                  ;
 19199                                  ; Inputs:
 19200                                  ;	[THISSFT] set to the SFT for the file being used
 19201                                  ; Function:
 19202                                  ;	Close the indicated file via the SFT
 19203                                  ; Returns:
 19204                                  ;	sf_ref_count decremented otherwise
 19205                                  ;	ES:DI point to SFT
 19206                                  ;	Carry set if error
 19207                                  ;	    AX has error code
 19208                                  ; DS preserved, others destroyed
 19209                                  ;---------------------------------------------------------------------------
 19210                                  
 19211                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 19212                                  
 19213                                  ; 18/05/2019 - Retro DOS v4.0
 19214                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19215                                  
 19216                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19217                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19218                                  
 19219                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19220                                  
 19221                                  DOS_CLOSE:
 19222 00002F29 C43E[9E05]              	LES	DI,[THISSFT]
 19223                                  	;mov	bx,[ES:DI+5]
 19224 00002F2D 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19225                                  
 19226                                  ; Network closes are handled entirely by the net code.
 19227                                  
 19228                                  	;;test	bx,8000h
 19229                                  	;TEST	BX,sf_isnet
 19230                                  	; 17/12/2022
 19231                                  	;test	bh,80h
 19232 00002F31 F6C780                  	test	bh,(sf_isnet>>8)
 19233 00002F34 7406                    	JZ	short LocalClose
 19234                                  
 19235                                  	;CallInstall Net_Close,MultNET,6
 19236 00002F36 B80611                  	mov     ax,1106h
 19237 00002F39 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19238                                  			; ES:DI -> SFT
 19239                                  			; SFT DPB field -> DPB of drive containing file
 19240                                  			; Return: CF set on error, AX = DOS error code
 19241                                  			; CF clear if successful
 19242 00002F3B C3                      	retn
 19243                                  
 19244                                  ; All closes release the sharing information.
 19245                                  ; No commit releases sharing information
 19246                                  ;
 19247                                  ; All closes decrement the ref count.
 19248                                  ; No commit decrements the ref count.
 19249                                  
 19250                                  LocalClose:
 19251 00002F3C E8D3E3                  	call	ECritDisk
 19252 00002F3F E86401                  	CALL	SetSFTTimes
 19253 00002F42 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19254                                  
 19255                                  ;hkn; SS is DOSDATA
 19256                                  	;Context DS
 19257 00002F45 16                      	push	ss
 19258 00002F46 1F                      	pop	ds
 19259                                  
 19260 00002F47 50                      	push	ax
 19261 00002F48 53                      	push	bx
 19262 00002F49 E81A44                  	call	ShareEnd
 19263 00002F4C 5B                      	pop	bx
 19264 00002F4D 58                      	pop	ax
 19265                                  
 19266                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19267                                  
 19268                                  CloseEntry:
 19269 00002F4E 50                      	PUSH	AX
 19270                                  
 19271                                  ; File clean or device does not get stamped nor disk looked at.
 19272                                  
 19273                                  	;test	bx,0C0h
 19274                                  	; 17/12/2022
 19275 00002F4F F6C3C0                  	test	bl,devid_file_clean+devid_device
 19276                                  	;TEST	BX,devid_file_clean+devid_device
 19277 00002F52 7403                    	JZ	short rdir
 19278                                  	; 14/11/2022
 19279 00002F54 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19280                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19281                                  
 19282                                  ; Retrieve the directory entry for the file
 19283                                  
 19284                                  rdir:
 19285 00002F57 E8DA00                  	CALL	DirFromSFT
 19286                                  	;mov	al,5
 19287 00002F5A B005                    	MOV	AL,error_access_denied
 19288 00002F5C 7303                    	JNC	short clook
 19289                                  	; 14/11/2022
 19290 00002F5E E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19291                                  	;jc	short CloseFinish ; 24/07/2019
 19292                                  clook:
 19293                                  
 19294                                  ; ES:DI points to entry
 19295                                  ; DS:SI points to SFT
 19296                                  ; ES:BX points to buffer header
 19297                                  
 19298 00002F61 57                      	push	di
 19299 00002F62 56                      	push	si
 19300                                  	;lea	si,[si+20h]
 19301 00002F63 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19302                                  
 19303                                  ; ES:DI point to directory entry
 19304                                  ; DS:SI point to unpacked name
 19305                                  
 19306 00002F66 E89BE2                  	call	XCHGP
 19307                                  
 19308                                  ; ES:DI point to unpacked name
 19309                                  ; DS:SI point to directory entry
 19310                                  
 19311 00002F69 E8B60E                  	call	MetaCompare
 19312 00002F6C E895E2                  	call	XCHGP
 19313 00002F6F 5E                      	pop	si
 19314 00002F70 5F                      	pop	di
 19315 00002F71 740C                    	JZ	short CLOSE_GO		; Name OK
 19316                                  Bye:	
 19317 00002F73 89F7                    	MOV	DI,SI
 19318 00002F75 1E                      	PUSH	DS
 19319 00002F76 07                      	POP	ES			; ES:DI points to SFT
 19320 00002F77 16                      	PUSH	SS
 19321 00002F78 1F                      	POP	DS
 19322 00002F79 F9                      	STC
 19323                                  	;mov	al,2
 19324 00002F7A B002                    	MOV	AL,error_file_not_found
 19325 00002F7C E99600                  	JMP	CloseFinish ; 24/07/2019
 19326                                  
 19327                                  	; 18/05/2019 - Retro DOS v4.0
 19328                                  CLOSE_GO:
 19329                                  	; MSDOS 6.0
 19330                                  	;test	word [si+2],8000h
 19331                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19332                                  	; 17/12/2022
 19333                                  	;test	byte [si+3],80h
 19334 00002F7F F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19335 00002F83 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19336                                  	; MSDOS 3.3 & MSDOS 6.0
 19337                                  	;mov	ch,[es:di+0Bh]
 19338 00002F85 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19339                                  	;mov	al,[si+4]
 19340 00002F89 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19341                                  
 19342                                  ;hkn; SS override
 19343 00002F8C 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19344                                  	; MSDOS 3.3
 19345                                  	;;call	MatchAttributes
 19346                                  	;;JNZ	short Bye		; attributes do not match
 19347                                  	; 18/05/2019
 19348 00002F90 EB07                    	JMP	SHORT setattr		;FT.
 19349                                  nofcb:
 19350                                  	; MSDOS 6.0
 19351                                  	;mov	al,[si+4]
 19352 00002F92 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19353 00002F95 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19354                                  setattr:
 19355                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19356                                  	;or	byte [es:di+0Bh],20h
 19357 00002F99 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19358                                  	; MSDOS 6.0
 19359                                  	;mov	ax,[es:di+1Ah]
 19360 00002F9E 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19361                                  					;F.O. save old first cluster
 19362                                  ;hkn; SS override
 19363 00002FA2 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19364                                  
 19365                                  	;mov	ax,[si+0Bh]
 19366 00002FA6 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19367                                  	;mov	[es:di+1Ah],ax
 19368 00002FA9 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19369                                  	;mov	ax,[si+11h]
 19370 00002FAD 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19371                                  	;mov	[es:di+1Ch],ax
 19372 00002FB0 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19373                                  	;mov	ax,[si+13h]
 19374 00002FB4 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19375                                  	;mov	[es:di+1Eh],ax
 19376 00002FB7 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19377                                  	;mov	ax,[si+0Fh]
 19378 00002FBB 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19379                                  	;mov	[es:di+18h],ax
 19380 00002FBE 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19381                                  	;mov	ax,[si+0Dh]
 19382 00002FC2 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19383                                  	;mov	[es:di+16h],ax
 19384 00002FC5 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19385                                  
 19386                                  	; MSDOS 6.0
 19387                                  ;; File Tagging
 19388 00002FC9 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19389                                  				  ;LB. if already dirty		    ;AN000;
 19390 00002FCE 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19391                                  	; 02/06/2019
 19392 00002FD0 E8752B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19393                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19394                                  	;or	byte [es:bx+5],40h
 19395 00002FD3 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19396                                  yesdirty4:
 19397 00002FD8 1E                      	push	ds
 19398 00002FD9 56                      	push	si
 19399                                  	; MSDOS 6.0
 19400                                  	;mov	cx,[si+0Bh]
 19401                                  	; 07/12/2022
 19402 00002FDA 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19403                                  ;hkn; SS override
 19404 00002FDD 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19405                                  	; MSDOS 3.3 
 19406                                  	;push	ss
 19407                                  	;pop	ds
 19408                                  	;MOV	AL,[THISDRV]
 19409                                  ;;; 10/1/86  update fastopen cache
 19410                                  	; MSDOS 3.3 & MSDOS 6.0
 19411 00002FE1 52                      	PUSH	DX
 19412 00002FE2 B400                    	MOV	AH,0			; dir entry update
 19413 00002FE4 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19414                                  	; MSDOS 6.0
 19415 00002FE6 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19416 00002FE8 750D                    	JNZ	short do_update2	;AN005; no, do update
 19417 00002FEA B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19418                                  	;mov	di,[si+1Bh]
 19419 00002FEC 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19420                                  	;mov	cx,[si+1Dh]
 19421 00002FEF 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19422                                  	;mov	dh,[si+1Fh]
 19423 00002FF2 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19424 00002FF5 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19425                                  do_update2:				;AN011;F.O.
 19426                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19427                                  	; 
 19428 00002FF7 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19429 00002FFC 7407                    	JZ	short do_update		;AN011;F.O. yes
 19430 00002FFE B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19431 00003000 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19432                                  do_update:				;AN005;
 19433                                  ;hkn; SS is DOSDATA
 19434                                  	;Context DS
 19435 00003005 16                      	push	ss
 19436 00003006 1F                      	pop	ds	
 19437                                  	; MSDOS 3.3 & MSDOS 6.0
 19438 00003007 E8E5F6                  	call	FastOpen_Update 	; invoke fastopen
 19439 0000300A 5A                      	POP	DX
 19440                                  
 19441                                  ;;; 10/1/86  update fastopen cache
 19442 0000300B E8352A                  	call	FLUSHBUF		; flush all relevant buffers
 19443 0000300E 5F                      	pop	di
 19444 0000300F 07                      	pop	es
 19445                                  	;mov	al,5
 19446 00003010 B005                    	MOV	AL,error_access_denied
 19447 00003012 7201                    	JC	short CloseFinish
 19448                                  FREE_SFT_OK:
 19449 00003014 F8                      	CLC				; signal no error.
 19450                                  CloseFinish:
 19451                                  
 19452                                  ; Indicate to the device that the SFT is being closed.
 19453                                  
 19454                                  ;;;; 7/21/86
 19455 00003015 9C                      	PUSHF				; save flag from DirFromSFT
 19456 00003016 E8D215                  	call	DEV_CLOSE_SFT
 19457 00003019 9D                      	POPF
 19458                                  ;;;; 7/21/86
 19459                                  ;
 19460                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19461                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19462                                  ; going to be moving from busy to free.
 19463                                  ;
 19464 0000301A 59                      	POP	CX			; get old ref count
 19465 0000301B 9C                      	PUSHF
 19466 0000301C 49                      	DEC	CX			; if cx != 1
 19467 0000301D 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19468 0000301F 26890D                  	mov	[es:di],cx
 19469                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19470                                  NoFree:
 19471 00003022 E808E3                  	call	LCritDisk
 19472 00003025 9D                      	POPF
 19473 00003026 C3                      	retn
 19474                                  
 19475                                  ;---------------------------------------------------------------------------
 19476                                  ;
 19477                                  ; Procedure Name : FREE_SFT
 19478                                  ;
 19479                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19480                                  ; Flags preserved. Return old ref count in AX
 19481                                  ;
 19482                                  ; Note that busy is indicated by the SFT ref count being -1.
 19483                                  ;
 19484                                  ;---------------------------------------------------------------------------
 19485                                  
 19486                                  FREE_SFT:
 19487 00003027 9C                      	PUSHF		; Save carry state
 19488 00003028 268B05                  	mov	ax,[es:di]
 19489                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19490 0000302B 48                      	DEC	AX
 19491 0000302C 7501                    	JNZ	short SetCount
 19492 0000302E 48                      	DEC	AX
 19493                                  SetCount:
 19494 0000302F 268705                  	xchg	ax,[es:di]
 19495                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19496 00003032 9D                      	POPF
 19497 00003033 C3                      	retn
 19498                                  
 19499                                  	; 18/05/2019 - Retro DOS v4.0
 19500                                  
 19501                                  ;----------------------------------------------------------------------------
 19502                                  ;
 19503                                  ; Procedure Name : DirFromSFT
 19504                                  ;
 19505                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19506                                  ;
 19507                                  ;   Inputs:	ES:DI point to SFT
 19508                                  ;		DS = DOSDATA
 19509                                  ;   Outputs:
 19510                                  ;		EXTERR_LOCUS = errLOC_Disk
 19511                                  ;		CurBuf points to buffer
 19512                                  ;		Carry Clear -> operation OK
 19513                                  ;		    ES:DI point to entry
 19514                                  ;		    ES:BX point to buffer
 19515                                  ;		    DS:SI point to SFT
 19516                                  ;		Carry SET   -> operation failed
 19517                                  ;		    registers trashified
 19518                                  ;   Registers modified: ALL
 19519                                  ;----------------------------------------------------------------------------
 19520                                  
 19521                                  DirFromSFT:
 19522                                  	;mov	byte [EXTERR_LOCUS],2
 19523 00003034 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19524 00003039 06                      	push	es
 19525 0000303A 57                      	push	di
 19526                                  	; MSDOS 3.3
 19527                                  	;;mov	dx,[es:di+1Dh]
 19528                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19529                                  	; MSDOS 6.0
 19530                                  	;mov	dx,[es:[di+1Dh]
 19531 0000303B 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19532 0000303F 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19533                                  	;mov	dx,[es:di+1Bh]
 19534 00003043 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19535                                  	; 19/05/2019
 19536 00003047 FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19537                                  	; MSDOS 3.3 & MSDOS 6.0
 19538 0000304B 52                      	PUSH	DX
 19539 0000304C E86B26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19540                                  					; [THISDPB] set
 19541 0000304F 5A                      	POP	DX
 19542 00003050 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19543 00003054 721E                    	JC	short PopDone
 19544                                  	; 22/09/2023
 19545                                  	;XOR	AL,AL	; *		; Pre read
 19546                                  	;;mov	byte [ALLOWED],18h
 19547                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19548                                  	;call	GETBUFFR
 19549                                  	; 22/09/2023
 19550 00003056 E8E628                  	call	GETBUFFER ; * 		; Pre read
 19551 00003059 7219                    	JC	short PopDone
 19552 0000305B 5E                      	pop	si
 19553 0000305C 1F                      	pop	ds			; Get back SFT pointer
 19554                                  
 19555                                  ;hkn; SS override
 19556 0000305D 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19557                                  	;or	byte [es:di+5],4
 19558 00003062 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19559 00003067 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19560                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19561                                  	;lea	di,[di+20] ; MSDOS 6.0
 19562 00003069 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19563                                  	;mov	al,32
 19564 0000306C B020                    	MOV	AL,dir_entry.size
 19565                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19566 0000306E F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19567 00003071 01C7                    	ADD	DI,AX			; Point at the entry
 19568 00003073 C3                      	retn				; carry is clear
 19569                                  PopDone:
 19570 00003074 5F                      	pop	di
 19571 00003075 07                      	pop	es
 19572                                  PopDone_retn:
 19573 00003076 C3                      	retn
 19574                                  
 19575                                  ;----------------------------------------------------------------------------
 19576                                  ;
 19577                                  ;**	DOS_Commit - UPdate Directory Entries
 19578                                  ;
 19579                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19580                                  ;		(DS) = DOSGROUP
 19581                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19582                                  ;	USES	all but DS
 19583                                  ;
 19584                                  ;----------------------------------------------------------------------------
 19585                                  
 19586                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19587                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19588                                  
 19589                                  DOS_COMMIT:
 19590                                  	;hkn; called from srvcall. DS already set up.
 19591 00003077 C43E[9E05]              	LES	DI,[THISSFT]
 19592                                  	;mov	bx,[es:di+5]
 19593 0000307B 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19594                                  	;test	bx,0C0h
 19595                                  	; 17/12/2022
 19596 0000307F F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19597                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19598 00003082 75F2                    	jnz	short PopDone_retn
 19599                                  	;test	bx,8000h
 19600                                  	; 17/12/2022
 19601                                  	;test	bh,80h
 19602 00003084 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19603                                  	;TEST	BX,sf_isnet ; 8000h
 19604 00003087 7406                    	JZ	short LOCAL_COMMIT
 19605                                  
 19606                                  ;IF NOT Installed
 19607                                  ;	transfer NET_COMMIT
 19608                                  ;ELSE
 19609                                  	;mov	ax,1107h
 19610 00003089 B80711                  	MOV	AX,(MultNET<<8)|7
 19611 0000308C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19612                                  			; ES:DI -> SFT
 19613                                  			; SFT DPB field -> DPB of drive containing file
 19614                                  			; Return: CF set on error, AX = DOS error code
 19615                                  			; CF clear if successful
 19616                                  localcommit_retn: ; 18/12/2022	
 19617 0000308E C3                      	retn
 19618                                  ;ENDIF
 19619                                  
 19620                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19621                                  ; There are three ways we can do this. One is to enter a critical section to
 19622                                  ; protect a potential free. The second is to increment the ref count to mask
 19623                                  ; the close decrementing.
 19624                                  ;
 19625                                  ; The proper way is to let the caller's of close decide if a decrement should
 19626                                  ; be done. We do this by providing another entry into close after the
 19627                                  ; decrement and after the share information release.
 19628                                  
 19629                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19630                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19631                                  
 19632                                  LOCAL_COMMIT:
 19633 0000308F E880E2                  	call	ECritDisk
 19634                                  	; MSDOS 6.0
 19635 00003092 E87DE2                  	call	ECritDisk	;PTM.
 19636 00003095 E80E00                  	call	SetSFTTimes
 19637 00003098 B8FFFF                  	MOV	AX,-1
 19638 0000309B E8B0FE                  	call	CloseEntry
 19639                                  	; MSDOS 6.0
 19640 0000309E 9C                      	PUSHF			;PTM.				;AN000;
 19641 0000309F E84115                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19642 000030A2 9D                      	POPF			;PTM.				;AN000;
 19643                                  	;call	LCritDisk	;PTM.				;AN000;
 19644                                  	; 18/12/2022
 19645 000030A3 E987E2                  	jmp	LCritDisk
 19646                                  ;localcommit_retn:
 19647                                  ;	retn
 19648                                  
 19649                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19650                                  ;----------------------------------------------------------------------------
 19651                                  ;
 19652                                  ; Procedure Name : SetSFTTimes
 19653                                  ;
 19654                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19655                                  ;   Reflect these times in other SFT's for the same file.
 19656                                  ;
 19657                                  ;   Inputs:	ES:DI point to SFT
 19658                                  ;		BX = sf_flags set apprpriately
 19659                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19660                                  ;   Registers modified: All except ES:DI, BX, AX
 19661                                  ;
 19662                                  ;----------------------------------------------------------------------------
 19663                                  
 19664                                  SetSFTTimes:
 19665                                  ;	File clean or device does not get stamped nor disk looked at.
 19666                                  	
 19667                                  	;test	bx,0C0h
 19668                                  	; 17/12/2022
 19669 000030A6 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19670                                  	;TEST	BX,devid_file_clean+devid_device
 19671                                  	;retnz				; clean or device => no timestamp
 19672 000030A9 75E3                    	jnz	short localcommit_retn
 19673                                  
 19674                                  ;	file and dirty. See if date is good
 19675                                  
 19676                                  	;test	bx,4000h
 19677                                  	; 17/12/2022
 19678                                  	;test	bh,40h
 19679 000030AB F6C740                  	test	bh,(sf_close_nodate>>8)
 19680                                  	;TEST	BX,sf_close_nodate
 19681                                  	;retnz				; nodate => no timestamp
 19682 000030AE 75DE                    	jnz	short localcommit_retn
 19683                                  
 19684 000030B0 50                      	push	ax
 19685 000030B1 53                      	push	bx
 19686 000030B2 E840DA                  	call	DATE16			; Date/Time to AX/DX
 19687                                  	;mov	[es:di+0Fh],ax
 19688 000030B5 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19689                                  	;mov	[es:di+0Dh],dx
 19690 000030B9 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19691 000030BD 31C0                    	XOR	AX,AX
 19692                                  ;if installed
 19693                                  	;call	JShare + 14 * 4
 19694 000030BF FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19695                                  ;else
 19696                                  ;	call	ShSU
 19697                                  ;endif
 19698 000030C3 5B                      	pop	bx
 19699 000030C4 58                      	pop	ax
 19700 000030C5 C3                      	retn
 19701                                  
 19702                                  ;============================================================================
 19703                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19704                                  ;============================================================================
 19705                                  ; 23/07/2018 - Retro DOS v3.0
 19706                                  ; 18/05/2019 - Retro DOS v4.0
 19707                                  
 19708                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19709                                  
 19710                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19711                                  ;NAME  DIRCALL
 19712                                  
 19713                                  ;**	Low level directory manipulation routines for making removing and
 19714                                  ;	  verifying local or NET directories
 19715                                  ;
 19716                                  ;	DOS_MKDIR
 19717                                  ;	DOS_CHDIR
 19718                                  ;	DOS_RMDIR
 19719                                  ;
 19720                                  ;	Modification history:
 19721                                  ;
 19722                                  ;		Created: ARR 30 March 1983
 19723                                  
 19724                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19725                                  ;---------------------------------------------------------------------------
 19726                                  ;
 19727                                  ; Procedure Name : DOS_MkDir
 19728                                  ;
 19729                                  ; Inputs:
 19730                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19731                                  ;		terminated)
 19732                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19733                                  ;		( = -1 if current dir not involved, else
 19734                                  ;		 Points to first char after last "/" of current dir part)
 19735                                  ;	[THISCDS] Points to CDS being used
 19736                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19737                                  ; Function:
 19738                                  ;	Make a new directory
 19739                                  ; Returns:
 19740                                  ;	Carry Clear
 19741                                  ;		No error
 19742                                  ;	Carry Set
 19743                                  ;	    AX is error code
 19744                                  ;		error_path_not_found
 19745                                  ;			Bad path (not in curr dir part if present)
 19746                                  ;		error_bad_curr_dir
 19747                                  ;			Bad path in current directory part of path
 19748                                  ;		error_access_denied
 19749                                  ;			Already exists, device name
 19750                                  ; DS preserved, Others destroyed
 19751                                  ;---------------------------------------------------------------------------
 19752                                  
 19753                                  ;hkn; called from path.asm. DS already set up.
 19754                                  
 19755                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19756                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19757                                  
 19758                                  DOS_MKDIR:
 19759 000030C6 E887E1                  	call	TestNet
 19760 000030C9 7313                    	JNC	short LOCAL_MKDIR
 19761                                  
 19762                                  ;IF NOT Installed
 19763                                  ;	transfer NET_MKDIR
 19764                                  ;ELSE
 19765                                  	;mov	ax,1103h
 19766 000030CB B80311                  	MOV	AX,(MultNET<<8)|3
 19767 000030CE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19768                                  			; SS = DOS CS
 19769                                  			; SDA first filename pointer -> fully-qualified directory name
 19770                                  			; SDA CDS pointer -> current directory
 19771                                  			; Return: CF set on error, AX = DOS error code
 19772                                  			; CF clear if successful
 19773 000030D0 C3                      	retn
 19774                                  ;ENDIF
 19775                                  
 19776                                  NODEACCERRJ:
 19777                                  	;mov	ax,5
 19778 000030D1 B80500                  	MOV	AX,error_access_denied
 19779                                  _BadRet:
 19780 000030D4 F9                      	STC
 19781                                  	;call	LCritDisk
 19782                                  	;retn
 19783                                  	; 18/12/2022
 19784 000030D5 E955E2                  	jmp	LCritDisk
 19785                                  
 19786                                  PATHNFJ:
 19787 000030D8 E852E2                  	call	LCritDisk
 19788 000030DB E9EFF9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19789                                  
 19790                                  LOCAL_MKDIR:
 19791 000030DE E831E2                  	call	ECritDisk
 19792                                  
 19793                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19794                                  
 19795 000030E1 8C16[A005]              	MOV	[THISSFT+2],SS
 19796                                  
 19797                                  ;hkn; DOSDATA
 19798 000030E5 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19799                                  
 19800                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19801                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19802                                  
 19803                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19804 000030EB C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19805                                  				; make sure SHARER won't complain.
 19806                                  	;mov	al,10h
 19807 000030F1 B010                    	MOV	AL,attr_directory
 19808 000030F3 E88C18                  	call	MakeNode
 19809 000030F6 72E0                    	JC	short PATHNFJ
 19810 000030F8 83F803                  	CMP	AX,3
 19811 000030FB 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19812 000030FD C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19813 00003101 C53E[E205]              	LDS	DI,[CURBUF]
 19814 00003105 29FE                    	SUB	SI,DI
 19815 00003107 56                      	PUSH	SI		; Pointer to dir_first
 19816                                  	; MSDOS 6.0
 19817                                  	;push	word [DI+8]
 19818 00003108 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19819                                  	; MSDOS 3.3 & MSDOS 6.0
 19820                                  	;push	word [di+6]
 19821 0000310B FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19822 0000310E 16                      	push	ss
 19823 0000310F 1F                      	pop	ds
 19824 00003110 FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19825 00003114 31C0                    	XOR	AX,AX
 19826 00003116 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19827 00003119 E8A217                  	call	NEWDIR
 19828 0000311C 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 19829 0000311E E8680D                  	call	GETENT		; First entry
 19830 00003121 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19831 00003123 C43E[E205]              	LES	DI,[CURBUF]
 19832                                  
 19833                                  	; MSDOS 6.0
 19834 00003127 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19835                                  				 ;LB. if already dirty		    ;AN000;
 19836 0000312C 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19837 0000312E E8172A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19838                                  	
 19839                                  	; MSDOS 3.3 & MSDOS 6.0
 19840                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19841 00003131 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19842                                  yesdirty5:
 19843                                  	;;add	di,16 ; MSDOS 3.3
 19844                                  	;add	di,20 ; MSDOS 6.0
 19845 00003136 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19846 00003139 B82E20                  	MOV	AX,202EH	; ". "
 19847 0000313C 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19848 00003140 E81B18                  	call	SETDOTENT
 19849 00003143 B82E2E                  	MOV	AX,2E2EH	; ".."
 19850 00003146 5A                      	POP	DX		; Parent
 19851 00003147 E81418                  	call	SETDOTENT
 19852 0000314A C42E[8A05]              	LES	BP,[THISDPB]
 19853                                  	; 22/09/2023
 19854                                  	;;mov	byte [ALLOWED],18h
 19855                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19856 0000314E 5A                      	POP	DX		; Entry sector
 19857                                  	; MSDOS 6.0
 19858 0000314F 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19859                                  
 19860                                  	;XOR	AL,AL ; *	; Pre read
 19861                                  	;call	GETBUFFR
 19862                                  	; 22/09/2023
 19863 00003153 E8E927                  	call	GETBUFFER ; *	 ;Pre read
 19864 00003156 725B                    	JC	short NODEEXISTSP
 19865 00003158 8B16[C205]              	MOV	DX,[DIRSTART]
 19866 0000315C C53E[E205]              	LDS	DI,[CURBUF]
 19867                                  	;or	byte [di+5],4
 19868 00003160 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19869 00003164 5E                      	POP	SI		; dir_first pointer
 19870 00003165 01FE                    	ADD	SI,DI
 19871 00003167 8914                    	MOV	[SI],DX
 19872 00003169 31D2                    	XOR	DX,DX
 19873 0000316B 895402                  	MOV	[SI+2],DX	; Zero size
 19874 0000316E 895404                  	MOV	[SI+4],DX
 19875                                  DIRUP:
 19876                                  	; MSDOS 6.0
 19877 00003171 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19878                                  	;			 ;LB. if already dirty 		   ;AN000;
 19879 00003175 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19880 00003177 E8CE29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19881                                  	
 19882                                  	; MSDOS 3.3 & MSDOS 6.0
 19883                                  	;or	byte [di+5],40h
 19884 0000317A 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19885                                  yesdirty6:
 19886 0000317E 16                      	push	ss
 19887 0000317F 1F                      	pop	ds
 19888 00003180 268A4600                	mov	al,[es:bp]
 19889                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19890 00003184 E8BC28                  	call	FLUSHBUF
 19891                                  	;mov	ax,5
 19892 00003187 B80500                  	MOV	AX,error_access_denied
 19893                                  	;call	LCritDisk
 19894                                  	;retn
 19895                                  	; 18/12/2022
 19896 0000318A E9A0E1                  	jmp	LCritDisk
 19897                                  
 19898                                  NODEEXISTSPOPDEL:
 19899 0000318D 5A                      	POP	DX		; Parent
 19900 0000318E 5A                      	POP	DX		; Entry sector
 19901                                  	; MSDOS 6.0 
 19902 0000318F 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19903 00003193 C42E[8A05]              	LES	BP,[THISDPB]
 19904                                  	; 22/09/2023
 19905                                  	;;mov	byte [ALLOWED],18h
 19906                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19907                                  	;XOR	AL,AL ; *	; Pre read
 19908                                  	;call	GETBUFFR
 19909                                  	; 22/09/2023
 19910 00003197 E8A527                  	call	GETBUFFER ; *	; Pre read
 19911 0000319A 7217                    	JC	short NODEEXISTSP
 19912 0000319C C53E[E205]              	LDS	DI,[CURBUF]
 19913                                  	;or	byte [di+5],4
 19914 000031A0 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19915 000031A4 5E                      	POP	SI		; dir_first pointer
 19916 000031A5 01FE                    	ADD	SI,DI
 19917                                  	;sub	si,1Ah ; 26
 19918 000031A7 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19919 000031AA C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19920 000031AD E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19921                                  NODEEXISTS:
 19922 000031B0 E91EFF                  	JMP	NODEACCERRJ ; 10/08/2018
 19923                                  
 19924                                  NODEEXISTSP:
 19925 000031B3 5E                      	POP	SI		; Clean stack
 19926 000031B4 EBFA                    	JMP	short NODEEXISTS
 19927                                  
 19928                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19929                                  
 19930                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19931                                  ;----------------------------------------------------------------------------
 19932                                  ;
 19933                                  ; Procedure Name : DOS_ChDir
 19934                                  ;
 19935                                  ; Inputs:
 19936                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19937                                  ;		terminated)
 19938                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19939                                  ;		( = -1 if current dir not involved, else
 19940                                  ;		 Points to first char after last "/" of current dir part)
 19941                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19942                                  ; Function:
 19943                                  ;	Validate the path for potential new current directory
 19944                                  ; Returns:
 19945                                  ;	NOTE:
 19946                                  ;	    [SATTRIB] is modified by this call
 19947                                  ;	Carry Clear
 19948                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19949                                  ;		Caller must NOT set ID fields on a NET CDS.
 19950                                  ;	Carry Set
 19951                                  ;	    AX is error code
 19952                                  ;		error_path_not_found
 19953                                  ;			Bad path
 19954                                  ;		error_access_denied
 19955                                  ;			device or file name
 19956                                  ; DS preserved, Others destroyed
 19957                                  ;----------------------------------------------------------------------------
 19958                                  
 19959                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19960                                  
 19961                                  ; 18/05/2019 - Retro DOS v4.0
 19962                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19963                                  
 19964                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19965                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19966                                  
 19967                                  DOS_CHDIR:
 19968 000031B6 E897E0                  	call	TestNet
 19969 000031B9 7306                    	JNC	short LOCAL_CHDIR
 19970                                  
 19971                                  ;IF NOT Installed
 19972                                  ;	transfer NET_CHDIR
 19973                                  ;ELSE
 19974                                  	;mov	ax,1105h
 19975 000031BB B80511                  	MOV	AX,(MultNET<<8)|5
 19976 000031BE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19977                                  			; SS = DOS CS
 19978                                  			; SDA first filename pointer -> fully-qualified directory name
 19979                                  			; SDA CDS pointer -> current directory
 19980                                  			; Return: CF set on error, AX = DOS error code
 19981                                  			; CF clear if successful
 19982 000031C0 C3                      	retn
 19983                                  ;ENDIF
 19984                                  
 19985                                  LOCAL_CHDIR:
 19986 000031C1 E84EE1                  	call	ECritDisk
 19987                                  	; MSDOS 6.0
 19988                                  	;;test	word [es:di+43h],2000h
 19989                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19990                                  	; 17/12/2022
 19991                                  	;test	byte [es:di+44h],20h
 19992 000031C4 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19993 000031C9 7406                    	JZ	short nojoin		   ;PTM.
 19994                                  	;mov	word [es:di+49h], 0FFFFh
 19995 000031CB 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19996                                  nojoin:
 19997                                  	; MSDOS 3.3 & MSDOS 6.0
 19998 000031D1 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19999                                  	;mov	byte [SATTRIB],16h
 20000 000031D6 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20001                                  				; Dir calls can find these
 20002                                  ; DOS 3.3  6/24/86 FastOpen
 20003 000031DB 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20004 000031E0 E8320D                  	call	GETPATH
 20005 000031E3 9C                      	PUSHF						;AN000;
 20006 000031E4 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20007 000031E9 9D                      	POPF						;AN000;
 20008                                  ; DOS 3.3  6/24/86 FastOpen
 20009                                  
 20010                                  	; MSDOS 3.3
 20011                                  	;mov	byte [FastOpenFlg],0
 20012                                  	
 20013                                  	;mov	ax,3
 20014 000031EA B80300                  	MOV	AX,error_path_not_found
 20015 000031ED 7207                    	JC	short ChDirDone
 20016 000031EF 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20017 000031F1 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20018 000031F5 F8                      	CLC
 20019                                  ChDirDone:
 20020                                  	;call	LCritDisk
 20021                                  	;retn
 20022                                  	; 18/12/2022
 20023 000031F6 E934E1                  	jmp	LCritDisk
 20024                                  
 20025                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20026                                  ;----------------------------------------------------------------------------
 20027                                  ;
 20028                                  ; Procedure Name : DOS_RmDir
 20029                                  ;
 20030                                  ; Inputs:
 20031                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20032                                  ;		terminated)
 20033                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20034                                  ;		( = -1 if current dir not involved, else
 20035                                  ;		 Points to first char after last "/" of current dir part)
 20036                                  ;	[THISCDS] Points to CDS being used
 20037                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20038                                  ; Function:
 20039                                  ;	Remove a directory
 20040                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20041                                  ; Returns:
 20042                                  ;	NOTE:
 20043                                  ;	    [SATTRIB] is modified by this call
 20044                                  ;	Carry Clear
 20045                                  ;		No error
 20046                                  ;	Carry Set
 20047                                  ;	    AX is error code
 20048                                  ;		error_path_not_found
 20049                                  ;			Bad path (not in curr dir part if present)
 20050                                  ;		error_bad_curr_dir
 20051                                  ;			Bad path in current directory part of path
 20052                                  ;		error_access_denied
 20053                                  ;			device or file name, root directory
 20054                                  ;			Bad directory ('.' '..' messed up)
 20055                                  ; DS preserved, Others destroyed
 20056                                  ;----------------------------------------------------------------------------
 20057                                  
 20058                                  ;hkn; called from path.asm. DS already set up.
 20059                                  
 20060                                  ; 18/05/2019 - Retro DOS v4.0
 20061                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20062                                  
 20063                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20064                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20065                                  
 20066                                  DOS_RMDIR:
 20067 000031F9 E854E0                  	call	TestNet
 20068 000031FC 7306                    	JNC	short LOCAL_RMDIR
 20069                                  
 20070                                  ;IF NOT Installed
 20071                                  ;	transfer NET_RMDIR
 20072                                  ;ELSE
 20073                                  	;mov	ax,1101h
 20074 000031FE B80111                  	MOV	AX,(MultNET<<8)|1
 20075 00003201 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20076                                  			; SS = DOS CS
 20077                                  			; SDA first filename pointer -> fully-qualified directory name
 20078                                  			; SDA CDS pointer -> current directory
 20079                                  			; Return: CF set on error, AX = DOS error code
 20080                                  			; CF clear if successful
 20081 00003203 C3                      	retn
 20082                                  ;ENDIF
 20083                                  
 20084                                  LOCAL_RMDIR:
 20085 00003204 E80BE1                  	call	ECritDisk
 20086 00003207 C606[4C03]00            	MOV	byte [NoSetDir],0
 20087                                  	;mov	byte [SATTRIB],16h
 20088 0000320C C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20089                                  					; Dir calls can find these
 20090 00003211 E8010D                  	call	GETPATH
 20091 00003214 720C                    	JC	short NOPATH		; Path not found
 20092 00003216 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20093 00003218 8B3E[C205]              	MOV	DI,[DIRSTART]
 20094 0000321C 09FF                    	OR	DI,DI			; Root ?
 20095 0000321E 750E                    	JNZ	short rmdir_get_buf	; No
 20096 00003220 EB09                    	JMP	SHORT NOTDIRPATH
 20097                                  
 20098                                  NOPATH:
 20099                                  	;mov	ax,3
 20100 00003222 B80300                  	MOV	AX,error_path_not_found
 20101 00003225 E9ACFE                  	JMP	_BadRet
 20102                                  
 20103                                  NOTDIRPATHPOP:
 20104 00003228 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20105 00003229 58                      	POP	AX
 20106                                  NOTDIRPATHPOP2:
 20107 0000322A 58                      	POP	AX
 20108                                  NOTDIRPATH:
 20109 0000322B E9A3FE                  	JMP	NODEACCERRJ
 20110                                  
 20111                                  rmdir_get_buf:
 20112 0000322E C53E[E205]              	LDS	DI,[CURBUF]
 20113 00003232 29FB                    	SUB	BX,DI		; Compute true offset
 20114 00003234 53                      	PUSH	BX		; Save entry pointer
 20115                                  	
 20116                                  	; MSDOS 6.0
 20117                                  	;push	word [di+8]
 20118 00003235 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20119                                  	
 20120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20121                                  	;push	word [di+6]
 20122 00003238 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20123                                  
 20124                                  ;hkn; SS is DOSDATA
 20125                                  	;context DS
 20126 0000323B 16                      	push	ss
 20127 0000323C 1F                      	pop	ds
 20128                                  	;context ES
 20129 0000323D 16                      	push	ss
 20130 0000323E 07                      	pop	es
 20131                                  
 20132                                  ;hkn; NAME1 is in DOSDATA
 20133 0000323F BF[4B05]                	MOV	DI,NAME1
 20134 00003242 B03F                    	MOV	AL,'?'
 20135 00003244 B90B00                  	MOV	CX,11
 20136 00003247 F3AA                    	REP	STOSB
 20137 00003249 30C0                    	XOR	AL,AL
 20138 0000324B AA                      	STOSB				; Nul terminate it
 20139 0000324C E85A0F                  	call	STARTSRCH		; Set search
 20140 0000324F E8340C                  	call	GETENTRY		; Get start of directory
 20141 00003252 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20142 00003254 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20143 00003258 89DE                    	MOV	SI,BX
 20144 0000325A AD                      	LODSW
 20145                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20146 0000325B 3D2E20                  	cmp	ax,202Eh ; ". "
 20147 0000325E 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20148                                  	;add	si,30
 20149 00003260 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20150 00003263 AD                      	LODSW
 20151                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20152                                  	;cmp	ax, '..'
 20153 00003264 3D2E2E                  	cmp	ax,2E2Eh
 20154 00003267 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20155                                  
 20156                                  ;hkn; SS is DOSDATA
 20157                                  	;context DS
 20158 00003269 16                      	push	ss
 20159 0000326A 1F                      	pop	ds
 20160 0000326B C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20161 00003271 E8120C                  	call	GETENTRY		; Get next entry
 20162 00003274 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20163                                  	;mov	byte [ATTRIB],16h
 20164 00003276 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20165 0000327B E8100B                  	call	SRCH			; Do a search
 20166 0000327E 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20167 00003280 803E[4A03]00            	CMP	byte [FAILERR],0
 20168 00003285 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20169 00003287 C42E[8A05]              	LES	BP,[THISDPB]
 20170 0000328B 8B1E[C205]              	MOV	BX,[DIRSTART]
 20171 0000328F E8241C                  	call	RELEASE 		; Release data in sub dir
 20172 00003292 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20173 00003294 5A                      	POP	DX			; Sector # of entry
 20174 00003295 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20175                                  	; 22/09/2023
 20176                                  	;;mov	byte [ALLOWED],18h
 20177                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20178                                  	;XOR	AL,AL ; *		; Pre read
 20179                                  	;call	GETBUFFR		; Get sector back
 20180 00003299 E8A326                  	call	GETBUFFER ; *		; Pre Read
 20181 0000329C 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20182 0000329E C53E[E205]              	LDS	DI,[CURBUF]
 20183                                  	;or	byte [di+5],4
 20184 000032A2 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20185 000032A6 5B                      	POP	BX			; Pointer to start of entry
 20186 000032A7 01FB                    	ADD	BX,DI			; Corrected
 20187 000032A9 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20188                                  
 20189                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20190 000032AC 1E                      	PUSH	DS
 20191                                  
 20192                                  ;hkn; SS is DOSDATA
 20193                                  	;context DS
 20194 000032AD 16                      	push	ss
 20195 000032AE 1F                      	pop	ds
 20196                                  
 20197                                  	; MSDOS 6.0
 20198 000032AF E80EF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20199                                  
 20200                                  ;	; MSDOS 3.3
 20201                                  ;_FastOpen_Delete:
 20202                                  ;	push	ax
 20203                                  ;	mov	si,[WFP_START]
 20204                                  ;	mov	bx,FastTable
 20205                                  ;	;mov	al,3  ; FONC_delete
 20206                                  ;	mov	al,FONC_delete
 20207                                  ;	call	far [BX+2]  ; FastTable+2
 20208                                  ;	pop	ax
 20209                                  
 20210 000032B2 1F                      	POP	DS
 20211                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20212                                  
 20213 000032B3 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20214                                  
 20215                                  ;============================================================================
 20216                                  ; DISK.ASM, MSDOS 6.0, 1991
 20217                                  ;============================================================================
 20218                                  ; 23/07/2018 - Retro DOS v3.0 
 20219                                  ; 04/05/2019 - Retro DOS v4.0
 20220                                  
 20221                                  ;	TITLE	DISK - Disk utility routines
 20222                                  ;	NAME	Disk
 20223                                  
 20224                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20225                                  ;
 20226                                  ;	SWAPCON
 20227                                  ;	SWAPBACK
 20228                                  ;	DOS_READ
 20229                                  ;	DOS_WRITE
 20230                                  ;	get_io_sft
 20231                                  ;	DirRead
 20232                                  ;	FIRSTCLUSTER
 20233                                  ;	SET_BUF_AS_DIR
 20234                                  ;	FATSecRd
 20235                                  ;	DREAD
 20236                                  ;	CHECK_WRITE_LOCK
 20237                                  ;	CHECK_READ_LOCK
 20238                                  ;
 20239                                  ;	Revision history:
 20240                                  ;
 20241                                  ;		A000   version 4.00  Jan. 1988
 20242                                  ;
 20243                                  ;----------------------------------------------------------------------------
 20244                                  ;
 20245                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20246                                  ;		error happens, DOS retries the entire block assuming that
 20247                                  ;		zero characters were transferred. Modified the code to take
 20248                                  ;		into account the number of characters transfered before
 20249                                  ;		retrying the operation.
 20250                                  ;
 20251                                  ;----------------------------------------------------------------------------
 20252                                  ;
 20253                                  
 20254                                  ;Installed = TRUE
 20255                                  
 20256                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20257                                  
 20258                                  ; **** Drivers for file input from devices ****
 20259                                  ;----------------------------------------------------------------------------
 20260                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20261                                  ;   of handles 0 and 1
 20262                                  ;
 20263                                  ;   Inputs:	DS is DOSDATA
 20264                                  ;   Outputs:	CONSWAP is set to false.
 20265                                  ;   Registers modified: none
 20266                                  ;----------------------------------------------------------------------------
 20267                                  
 20268                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20269                                  
 20270                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20271                                  ; 04/05/2019 - Retro DOS v4.0
 20272                                  
 20273                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20274                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20275                                  
 20276                                  SWAPBACK:
 20277 000032B6 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20278 000032BB C3                      	retn
 20279                                  
 20280                                  ;----------------------------------------------------------------------------
 20281                                  ;
 20282                                  ; Procedure Name : SWAPCON
 20283                                  ;
 20284                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20285                                  ;
 20286                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20287                                  ;		DS is DOSDATA
 20288                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20289                                  ;   Registers modified: none
 20290                                  ;--------------------------------------------------------------------------
 20291                                  
 20292                                  SWAPCON:
 20293                                  	; MSDOS 3.3
 20294                                  	;push	es
 20295                                  	;push	di
 20296                                  	;mov	byte [CONSWAP],1
 20297                                  	;les	di,[THISSFT]
 20298                                  	;mov	word [CONSFT],di
 20299                                  	;mov	word [CONSFT+2],es
 20300                                  	;pop	di
 20301                                  	;pop	es
 20302                                  	;retn
 20303                                  
 20304                                  	; MSDOS 6.0
 20305 000032BC C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20306 000032C1 50                      	push	ax
 20307 000032C2 A1[9E05]                	mov	ax,[THISSFT]
 20308 000032C5 A3[E605]                	mov	[CONSFT],ax
 20309 000032C8 A1[A005]                	mov	ax,[THISSFT+2]
 20310 000032CB A3[E805]                	mov	[CONSFT+2],ax
 20311 000032CE 58                      	pop	ax
 20312 000032CF C3                      	retn
 20313                                  
 20314                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20315                                  ; 04/05/2019 - Retro DOS v4.0
 20316                                  
 20317                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20318                                  ;-----------------------------------------------------------------------------
 20319                                  ;
 20320                                  ; Inputs:
 20321                                  ;	ThisSFT set to the SFT for the file being used
 20322                                  ;	[DMAADD] contains transfer address
 20323                                  ;	CX = No. of bytes to read
 20324                                  ;	DS = DOSDATA
 20325                                  ; Function:
 20326                                  ;	Perform read operation
 20327                                  ; Outputs:
 20328                                  ;    Carry clear
 20329                                  ;	SFT Position and cluster pointers updated
 20330                                  ;	CX = No. of bytes read
 20331                                  ;	ES:DI point to SFT
 20332                                  ;    Carry set
 20333                                  ;	AX is error code
 20334                                  ;	CX = 0
 20335                                  ;	ES:DI point to SFT
 20336                                  ; DS preserved, all other registers destroyed
 20337                                  ;
 20338                                  ;-----------------------------------------------------------------------------
 20339                                  
 20340                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20341                                  
 20342                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20343                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20344                                  
 20345                                  DOS_READ:
 20346 000032D0 C43E[9E05]              	LES	DI,[THISSFT]
 20347                                  
 20348                                  ; Verify that the sft has been opened in a mode that allows reading.
 20349                                  
 20350                                  	;mov	al,[es:di+2]
 20351 000032D4 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20352                                  	;and	al,0Fh
 20353 000032D8 240F                    	AND	AL,access_mask
 20354                                  	;cmp	al,1
 20355 000032DA 3C01                    	CMP	AL,open_for_write
 20356 000032DC 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20357 000032DE E90306                  	jmp	SET_ACC_ERR
 20358                                  
 20359                                  READ_NO_MODE:
 20360 000032E1 E8E104                  	call	SETUP
 20361 000032E4 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20362 000032E6 E880DF                  	call	IsSFTNet
 20363 000032E9 7408                    	JZ	short LOCAL_READ
 20364                                  
 20365                                  ;IF NOT Installed
 20366                                  ;	transfer NET_READ
 20367                                  ;ELSE
 20368                                  	;mov	ax,1108h
 20369 000032EB B80811                  	MOV	AX,(MultNET<<8)|8
 20370 000032EE CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20371                                  			; ES:DI -> SFT
 20372                                  			; SFT DPB field -> DPB of drive containing file
 20373                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20374                                  			; Return: CF set on error, CX = bytes read
 20375 000032F0 C3                      	retn
 20376                                  ;ENDIF
 20377                                  
 20378                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20379                                  ; except return immediately.
 20380                                  
 20381                                  NoIORet:
 20382 000032F1 F8                      	CLC
 20383 000032F2 C3                      	retn
 20384                                  
 20385                                  LOCAL_READ:
 20386                                  	;test	word [es:di+5],80h
 20387                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20388 000032F3 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20389 000032F8 750E                    	JNZ	short READDEV
 20390                                  
 20391                                  	;mov	byte [EXTERR_LOCUS],2
 20392 000032FA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20393 000032FF E810E0                  	call	ECritDisk
 20394 00003302 E89B05                  	call	DISKREAD
 20395                                  
 20396                                  critexit:
 20397                                  	;call	LCritDisk
 20398                                  	;retn
 20399                                  	; 16/12/2022
 20400 00003305 E925E0                  	jmp	LCritDisk
 20401                                  
 20402                                  ; We are reading from a device. Examine the status of the device to see if we
 20403                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20404                                  ; null device, we can safely indicate no transfer.
 20405                                  
 20406                                  READDEV:
 20407                                  	;mov	byte [EXTERR_LOCUS],4
 20408 00003308 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20409                                  	;mov	bl,[es:di+5]
 20410 0000330D 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20411 00003311 C43E[2C03]              	LES	DI,[DMAADD]
 20412                                  	;test	bl,40h
 20413 00003315 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20414 00003318 7407                    	JZ	short ENDRDDEVJ3
 20415                                  	;test	bl,4
 20416 0000331A F6C304                  	test	BL,devid_device_null	; NUL device?
 20417 0000331D 7405                    	JZ	short TESTRAW 		; NO
 20418 0000331F 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20419                                  ENDRDDEVJ3:
 20420                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20421                                  	;JMP	short ENDRDDEVJ2
 20422                                  	; 16/12/2022
 20423 00003321 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20424                                  
 20425                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20426                                  ; bizarre std_con_string_input.
 20427                                  
 20428                                  TESTRAW:
 20429                                  	;test	bl,20h
 20430 00003324 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20431 00003327 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20432                                  	;test	bl,1
 20433 00003329 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20434 0000332C 7461                    	JZ	short NOTRDCON
 20435 0000332E E98F01                  	JMP	READCON
 20436                                  
 20437                                  DVRDRAW:
 20438 00003331 06                      	PUSH	ES
 20439 00003332 1F                      	POP	DS			; Xaddr to DS:DI
 20440                                  
 20441                                  	; 04/05/2019 - Retro DOS v4.0
 20442                                  
 20443                                  	; MSDOS 6.0
 20444                                  ;SR;
 20445                                  ;Check for win386 presence -- if present, do polled read of characters
 20446                                  
 20447 00003333 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20448 00003339 7408                    	jz	short ReadRawRetry	;not present
 20449 0000333B F6C301                  	test	bl,devid_device_con_in	;is it console device
 20450 0000333E 7403                    	jz	short ReadRawRetry	;no, do normal read
 20451 00003340 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20452                                  
 20453                                  ReadRawRetry:
 20454 00003343 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20455 00003345 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20456 00003347 89C2                    	MOV	DX,AX			; Start at 0
 20457 00003349 E89113                  	call	SETREAD
 20458 0000334C 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20459                                  
 20460                                  ;hkn; SS override
 20461 0000334D 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20462 00003352 E80F13                  	call	DEVIOCALL
 20463 00003355 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20464 00003357 B486                    	MOV	AH,86H			; Read error
 20465                                  
 20466                                  ;hkn; SS override
 20467 00003359 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20468                                  	; MSDOS 3.3
 20469                                  	;test	di,8000h
 20470                                  	;jz	short CRDROK
 20471                                  	; MSDOS 6.0
 20472 0000335E 09FF                    	or	di,di
 20473 00003360 7923                    	jns	short CRDROK		; no errors
 20474                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20475 00003362 E8641F                  	call	CHARHARD
 20476 00003365 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20477                                  
 20478                                  	; 04/05/2019
 20479                                  
 20480                                  	; MSDOS 6.0
 20481 00003367 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20482 0000336C 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20483                                  
 20484                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20485 00003371 08C0                    	OR	AL,AL
 20486 00003373 7410                    	JZ	short CRDROK		; Ignore
 20487 00003375 3C03                    	CMP	AL,3
 20488 00003377 7403                    	JZ	short CRDFERR 		; fail.
 20489 00003379 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20490 0000337A EBC7                    	JMP	short ReadRawRetry	; Retry
 20491                                  
 20492                                  ; We have encountered a device-driver error. We have informed the user of it
 20493                                  ; and he has said for us to fail the system call.
 20494                                  
 20495                                  CRDFERR:
 20496 0000337C 5F                      	POP	DI			; Clean stack
 20497                                  DEVIOFERR:
 20498                                  
 20499                                  ;hkn; SS override
 20500 0000337D 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20501 00003382 E95D05                  	jmp	SET_ACC_ERR_DS
 20502                                  
 20503                                  CRDROK:
 20504 00003385 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20505 00003386 89D7                    	MOV	DI,DX
 20506                                  
 20507                                  ;hkn; SS override
 20508 00003388 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20509                                  	;JMP	SHORT ENDRDDEVJ3
 20510                                  	; 16/12/2022
 20511 0000338D EB6B                    	jmp	short ENDRDDEVJ2
 20512                                  
 20513                                  ; We are going to do a cooked read on some character device. There is a
 20514                                  ; problem here, what does the data look like? Is it a terminal device, line
 20515                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20516                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20517                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20518                                  ; included in data). this "simulates" the way con works in cooked mode
 20519                                  ; reading one line at a time. With file data, however, the lines will look
 20520                                  ; like, LF line CR. This is a little weird.
 20521                                  
 20522                                  NOTRDCON:
 20523 0000338F 8CC0                    	MOV	AX,ES
 20524 00003391 8ED8                    	MOV	DS,AX
 20525 00003393 89FB                    	MOV	BX,DI
 20526 00003395 31D2                    	XOR	DX,DX
 20527 00003397 89D0                    	MOV	AX,DX
 20528 00003399 51                      	PUSH	CX
 20529 0000339A B90100                  	MOV	CX,1
 20530 0000339D E83D13                  	call	SETREAD
 20531 000033A0 59                      	POP	CX
 20532                                  
 20533                                  ;hkn; SS override
 20534 000033A1 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20535                                  	;lds	si,[si+7]
 20536 000033A6 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20537                                  DVRDLP:
 20538 000033A9 E8FE1C                  	call	DSKSTATCHK
 20539 000033AC E8B812                  	call	DEVIOCALL2
 20540 000033AF 57                      	PUSH	DI		; Save "count" done
 20541 000033B0 B486                    	MOV	AH,86H
 20542                                  
 20543                                  ;hkn; SS override
 20544 000033B2 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20545                                  	
 20546                                  	; MSDOS 3.3
 20547                                  	;test	di,8000h
 20548                                  	;jz	short CRDOK
 20549                                  	; MSDOS 6.0
 20550 000033B7 09FF                    	or	di,di
 20551 000033B9 7917                    	jns	short CRDOK
 20552                                  	
 20553 000033BB E80B1F                  	call	CHARHARD
 20554 000033BE 5F                      	POP	DI
 20555                                  
 20556                                  ;hkn; SS override
 20557 000033BF 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20558 000033C6 3C01                    	CMP	AL,1
 20559 000033C8 74DF                    	JZ	short DVRDLP		;Retry
 20560 000033CA 3C03                    	CMP	AL,3
 20561 000033CC 74AF                    	JZ	short DEVIOFERR		; FAIL
 20562 000033CE 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20563 000033D0 EB12                    	JMP	SHORT DVRDIGN
 20564                                  
 20565                                  CRDOK:
 20566 000033D2 5F                      	POP	DI
 20567                                  
 20568                                  ;hkn; SS override
 20569 000033D3 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20570                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20571 000033D9 751F                    	JNZ	short ENDRDDEVJ2
 20572                                  	; 16/12/2022
 20573                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20574                                  
 20575 000033DB 1E                      	PUSH	DS
 20576                                  
 20577                                  ;hkn; SS override
 20578 000033DC 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20579 000033E1 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20580 000033E3 1F                      	POP	DS
 20581                                  DVRDIGN:
 20582                                  
 20583                                  ;hkn; SS override
 20584 000033E4 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20585 000033E9 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20586 000033F0 47                      	INC	DI			; Next character
 20587 000033F1 3C1A                    	CMP	AL,1Ah			; ^Z?
 20588                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20589 000033F3 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20590                                  	; 16/12/2022
 20591                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20592 000033F5 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20593 000033F7 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20594 000033F9 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20595                                  					;  AX=FFFF which is not likely
 20596                                  ENDRDDEVJ2:
 20597                                  	; 16/12/2022
 20598                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20599                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20600 000033FA E98E00                  	jmp	ENDRDDEV
 20601                                  
 20602                                  	; 04/05/2019
 20603                                  
 20604                                  	; MSDOS 6.0
 20605                                  ;SR;
 20606                                  ;Polling code for raw read on CON when WIN386 is present
 20607                                  ;
 20608                                  ;At this point -- ds:di is transfer address
 20609                                  ;		  cx is count
 20610                                  
 20611                                  do_polling:
 20612 000033FD 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20613 000033FF 31C0                    	xor	ax,ax
 20614 00003401 89C2                    	mov	dx,ax
 20615 00003403 E8D712                  	call	SETREAD			;prepare device packet
 20616                                  
 20617                                  do_io:
 20618                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20619                                  
 20620 00003406 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20621 0000340B 1E                      	push	ds
 20622 0000340C 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20623 00003411 E85012                  	call	DEVIOCALL		;call device driver
 20624 00003414 1F                      	pop	ds
 20625                                  	
 20626                                  	;test	word [es:bx+3],8000h
 20627                                  	; 16/12/2022
 20628                                  	;test	byte [es:bx+4],80h
 20629 00003415 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20630                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20631 0000341A 7413                    	jz	short check_busy	;no
 20632                                  
 20633 0000341C 1E                      	push	ds
 20634 0000341D 89FA                    	mov	dx,di
 20635                                  	;invoke charhard		;invoke int 24h handler
 20636 0000341F E8A71E                  	call	CHARHARD
 20637 00003422 89D7                    	mov	di,dx
 20638 00003424 08C0                    	or	al,al
 20639 00003426 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20640 00003428 3C03                    	cmp	al,3
 20641 0000342A 7448                    	jz	short devrderr		;user asked to fail
 20642 0000342C 1F                      	pop	ds
 20643 0000342D EBD7                    	jmp	short do_io		;user asked to retry
 20644                                  
 20645                                  check_busy:
 20646                                  	;test	word [es:bx+3],200h
 20647                                  	; 16/12/2022
 20648 0000342F 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20649                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20650 00003434 7547                    	jnz	short no_char		;yes, no character available
 20651                                  
 20652                                  ;Character is available. Read in 1 character at a time until all characters
 20653                                  ;are read in or no character is available
 20654                                  
 20655 00003436 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20656 0000343B 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20657 00003441 1E                      	push	ds
 20658 00003442 36C536[9E05]            	lds	si,[ss:THISSFT]
 20659 00003447 E81A12                  	call	DEVIOCALL
 20660                                  
 20661 0000344A 89FA                    	mov	dx,di
 20662 0000344C B486                    	mov	ah,86h
 20663                                  	;mov	di,[es:bx+3]
 20664 0000344E 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20665 00003452 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20666 00003456 7410                    	jz	short next_char		;no,read next character
 20667                                  
 20668                                  	;invoke	charhard		;invoke int 24h handler
 20669 00003458 E86E1E                  	call	CHARHARD
 20670 0000345B 89D7                    	mov	di,dx			;restore di
 20671 0000345D 08C0                    	or	al,al			;
 20672 0000345F 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20673 00003461 3C03                    	cmp	al,3
 20674 00003463 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20675 00003465 1F                      	pop	ds
 20676 00003466 EB9E                    	jmp	short do_io		;user issued a retry
 20677                                  
 20678                                  next_char:
 20679 00003468 1F                      	pop	ds
 20680 00003469 89D7                    	mov	di,dx
 20681 0000346B 49                      	dec	cx			;decrement count
 20682 0000346C E318                    	jcxz	done_read		;all characters read in
 20683 0000346E 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20684 00003472 EB92                    	jmp	short do_io			;read next character in
 20685                                  
 20686                                  devrderr:
 20687 00003474 5F                      	pop	di			;discard segment address
 20688 00003475 36C43E[9E05]            	les	di,[ss:THISSFT]
 20689                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20690 0000347A E96504                  	jmp     SET_ACC_ERR_DS
 20691                                  
 20692                                  no_char:
 20693                                  ;Since no character is available, we let win386 switch the VM out
 20694                                  
 20695 0000347D 50                      	push	ax
 20696 0000347E B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20697 00003480 CD2A                    	int	2Ah			;indicate idle to WIN386
 20698                                  
 20699                                  ;When control returns from WIN386, we continue the raw read
 20700                                  
 20701 00003482 58                      	pop	ax
 20702 00003483 EB81                    	jmp	do_io
 20703                                  
 20704                                  pop_done_read:
 20705 00003485 1F                      	pop	ds
 20706                                  done_read:
 20707 00003486 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20708                                  
 20709                                  	; 16/12/2022
 20710                                  
 20711                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20712                                  	;jmp	ENDRDDEV ; 04/05/2019
 20713                                  
 20714                                  	; 04/05/2019 - Retro DOS v4.0
 20715                                  ENDRDDEV:
 20716 0000348B 16                      	push	ss
 20717 0000348C 1F                      	pop	ds
 20718 0000348D EB1F                    	jmp	short endrddev1
 20719                                  
 20720                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20721                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20722                                  
 20723                                  TRANBUF:
 20724 0000348F AC                      	LODSB
 20725 00003490 AA                      	STOSB
 20726 00003491 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20727 00003493 7503                    	JNZ	short NORMCH
 20728 00003495 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20729                                  NORMCH:
 20730 00003498 3C0A                    	CMP	AL,c_LF ; 0Ah
 20731 0000349A E0F3                    	LOOPNZ	TRANBUF
 20732 0000349C 7507                    	JNZ	short ENDRDCON
 20733 0000349E 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20734 000034A0 E8C0E1                  	call	OUTT		; Transmit linefeed
 20735 000034A3 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20736                                  ENDRDCON:
 20737                                  ;hkn; SS is DOSDATA
 20738 000034A5 16                      	push	ss
 20739 000034A6 1F                      	pop	ds
 20740 000034A7 E80CFE                  	CALL	SWAPBACK
 20741 000034AA 8936[2200]              	MOV	[CONTPOS],SI
 20742                                  
 20743                                  	; 16/12/2022
 20744                                  ;ENDRDDEV:
 20745                                  ;;hkn; SS is DOSDATA
 20746                                  ;	push	ss
 20747                                  ;	pop	ds
 20748                                  endrddev1:	; 04/05/2019
 20749 000034AE 893E[B805]              	MOV	[NEXTADD],DI
 20750 000034B2 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20751 000034B4 C43E[9E05]              	LES	DI,[THISSFT]
 20752                                  	;and	byte [es:di+5],0BFh
 20753 000034B8 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20754                                  				; Mark as no more data available
 20755                                  SETSFTC:
 20756                                  	; 31/07/2019
 20757                                  	;call	SETSFT
 20758                                  	;retn
 20759 000034BD E9B604                  	jmp	SETSFT
 20760                                  
 20761                                  ; 16/12/2022
 20762                                  %if 0
 20763                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20764                                  ENDRDDEV:
 20765                                  ;hkn; SS is DOSDATA
 20766                                  	push	ss
 20767                                  	pop	ds
 20768                                  	MOV	[NEXTADD],DI
 20769                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20770                                  	LES	DI,[THISSFT]
 20771                                  	;and	byte [es:di+5],0BFh
 20772                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20773                                  				; Mark as no more data available
 20774                                  SETSFTC:
 20775                                  	;call	SETSFT
 20776                                  	;retn
 20777                                  	jmp	SETSFT	
 20778                                  %endif
 20779                                  
 20780                                  READCON:
 20781 000034C0 E8F9FD                  	CALL	SWAPCON
 20782 000034C3 8B36[2200]              	MOV	SI,[CONTPOS]
 20783 000034C7 09F6                    	OR	SI,SI
 20784 000034C9 75C4                    	JNZ	short TRANBUF
 20785 000034CB 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20786 000034D0 7406                    	JZ	short GETBUF
 20787 000034D2 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20788                                  GETBUF:
 20789 000034D8 51                      	PUSH	CX
 20790 000034D9 06                      	PUSH	ES
 20791 000034DA 57                      	PUSH	DI
 20792                                  
 20793                                  ;hkn; CONBUF is in DOSDATA
 20794 000034DB BA[7B02]                	MOV	DX,CONBUF
 20795                                  
 20796 000034DE E800DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20797 000034E1 5F                      	POP	DI
 20798 000034E2 07                      	POP	ES
 20799 000034E3 59                      	POP	CX
 20800                                  
 20801                                  ;hkn; CONBUF is in DOSDATA
 20802 000034E4 BE[7D02]                	MOV	SI,CONBUF+2
 20803                                  
 20804 000034E7 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20805 000034EA 75A3                    	JNZ	short TRANBUF
 20806 000034EC B01A                    	MOV	AL,1AH
 20807 000034EE AA                      	STOSB
 20808 000034EF 4F                      	DEC	DI
 20809 000034F0 B00A                    	MOV	AL,c_LF
 20810 000034F2 E86EE1                  	call	OUTT		; Send linefeed
 20811 000034F5 31F6                    	XOR	SI,SI
 20812 000034F7 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20813                                  
 20814                                  ; 24/07/2018 - Retro DOS v3.0
 20815                                  
 20816                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20817                                  ;---------------------------------------------------------------------------
 20818                                  ;
 20819                                  ; Procedure Name : DOS_WRITE
 20820                                  ;
 20821                                  ; Inputs:
 20822                                  ;	ThisSFT set to the SFT for the file being used
 20823                                  ;	[DMAADD] contains transfer address
 20824                                  ;	CX = No. of bytes to write
 20825                                  ; Function:
 20826                                  ;	Perform write operation
 20827                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20828                                  ;		to current sf_position
 20829                                  ; Outputs:
 20830                                  ;    Carry clear
 20831                                  ;	SFT Position and cluster pointers updated
 20832                                  ;	CX = No. of bytes written
 20833                                  ;	ES:DI point to SFT
 20834                                  ;    Carry set
 20835                                  ;	AX is error code
 20836                                  ;	CX = 0
 20837                                  ;	ES:DI point to SFT
 20838                                  ; DS preserved, all other registers destroyed
 20839                                  ;---------------------------------------------------------------------------
 20840                                  
 20841                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20842                                  ;hkn; point to DOSDATA.
 20843                                  
 20844                                  ; 04/05/2019 - Retro DOS v4.0
 20845                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20846                                  
 20847                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20848                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20849                                  
 20850                                  DOS_WRITE:
 20851 000034F9 C43E[9E05]              	LES	DI,[THISSFT]
 20852                                  	;mov	al,[ES:DI+2]
 20853 000034FD 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20854                                  	;and	al,0Fh
 20855 00003501 240F                    	AND	AL,access_mask
 20856                                  	;cmp	al,0
 20857 00003503 3C00                    	CMP	AL,open_for_read
 20858 00003505 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20859                                  BadMode:
 20860 00003507 E9DA03                  	jmp	SET_ACC_ERR
 20861                                  
 20862                                  ; NOTE: The following check for writting to a Read Only File is performed
 20863                                  ;	    ONLY on FCBs!!!!
 20864                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20865                                  ;	    of a read only file which can then be written to.
 20866                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20867                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20868                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20869                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20870                                  ;	    to a read-only file.
 20871                                  
 20872                                  Check_FCB_RO:
 20873                                  	;;test	word [es:di+2],8000h
 20874                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20875                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20876                                  	
 20877                                  	;test	byte [es:di+3],80h
 20878 0000350A 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20879 0000350F 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20880                                  
 20881                                  	;test	byte [es:di+4],1
 20882 00003511 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20883 00003516 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20884                                  WRITE_NO_MODE:
 20885 00003518 E8AA02                  	call	SETUP
 20886 0000351B E84BDD                  	call	IsSFTNet
 20887 0000351E 7406                    	JZ	short LOCAL_WRITE
 20888                                  
 20889                                  ;IF NOT Installed
 20890                                  ;	transfer NET_WRITE
 20891                                  ;ELSE
 20892                                  	;mov	ax,1109h
 20893 00003520 B80911                  	MOV	AX,(MultNET<<8)|9
 20894 00003523 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20895                                  			; ES:DI -> SFT
 20896                                  			; SFT DPB field -> DPB of drive containing file
 20897                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20898                                  			; Return: CF set on error, CX = bytes written
 20899 00003525 C3                      	retn
 20900                                  ;ENDIF
 20901                                  
 20902                                  LOCAL_WRITE:
 20903                                  	;;test	word [es:di+5],80h
 20904                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20905                                  	;jnz	short WRTDEV
 20906                                  
 20907                                  	;test	byte [es:di+5],80h
 20908 00003526 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20909 0000352B 756E                    	jnz	short WRTDEV
 20910                                  
 20911                                  	;mov	byte [EXTERR_LOCUS],2
 20912 0000352D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20913 00003532 E8DDDD                  	call	ECritDisk
 20914                                  
 20915 00003535 E8F404                  	call	DISKWRITE
 20916                                  
 20917                                  	; 04/05/2019 - Retro DOS v4.0
 20918                                  
 20919                                  	; MSDOS 6.0
 20920                                  ; Extended Open
 20921 00003538 7210                    	JC	short nocommit
 20922                                  	
 20923 0000353A C43E[9E05]              	LES	DI,[THISSFT]
 20924                                  	
 20925                                  	;;test	word [ES:DI+2],4000h
 20926                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20927                                  	;JZ	short nocommit
 20928                                  	
 20929                                  	;test	byte [ES:DI+3],40h
 20930 0000353E 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20931 00003543 7405                    	JZ	short nocommit
 20932                                  	
 20933 00003545 51                      	PUSH	CX
 20934 00003546 E82EFB                  	call	DOS_COMMIT
 20935 00003549 59                      	POP	CX
 20936                                  nocommit:
 20937                                  ; Extended Open
 20938                                  	;call	LCritDisk
 20939                                  	;retn
 20940                                  	; 18/12/2022
 20941 0000354A E9E0DD                  	jmp	LCritDisk
 20942                                  
 20943                                  DVWRTRAW:
 20944 0000354D 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20945 0000354F E8BE11                  	call	SETWRITE
 20946 00003552 1E                      	PUSH	DS			; Save seg of transfer
 20947                                  
 20948                                  ;hkn; SS override
 20949 00003553 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20950 00003558 E80911                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20951                                  
 20952 0000355B 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20953 0000355D B487                    	MOV	AH,87H
 20954                                  
 20955                                  ;hkn; SS override
 20956 0000355F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20957                                  
 20958                                  	; MSDOS 3.3
 20959                                  	;test	di,8000h
 20960                                  	;jz	short CWRTROK
 20961                                  
 20962                                  	; MSDOS 6.0
 20963 00003564 09FF                    	or	di,di
 20964 00003566 7920                    	jns	short CWRTROK
 20965                                  	
 20966                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20967 00003568 E85E1D                  	call	CHARHARD
 20968                                  
 20969                                  	; 04/05/2019  - Retro DOS v4.0
 20970                                  
 20971                                  	; MSDOS 6.0
 20972 0000356B 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20973 00003570 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20974 00003572 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20975 00003577 89DF                    	mov	di,bx			;				M065
 20976                                  	
 20977                                  	; MSDOS 3.3
 20978                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20979                                  
 20980                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20981 00003579 08C0                    	OR	AL,AL
 20982 0000357B 740B                    	JZ	short CWRTROK 		; Ignore
 20983 0000357D 3C03                    	CMP	AL,3
 20984 0000357F 7403                    	JZ	short CWRFERR
 20985 00003581 1F                      	POP	DS			; Recover saved seg of transfer
 20986 00003582 EBC9                    	JMP	short DVWRTRAW		; Try again
 20987                                  CWRFERR:
 20988 00003584 58                      	POP	AX			; Chuck saved seg of transfer
 20989 00003585 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20990                                  CWRTROK:
 20991 00003588 58                      	POP	AX			; Chuck saved seg of transfer
 20992 00003589 1F                      	POP	DS
 20993 0000358A A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20994                                  ENDWRDEV:
 20995 0000358D C43E[9E05]              	LES	DI,[THISSFT]
 20996 00003591 89C1                    	MOV	CX,AX
 20997                                  	;call	ADDREC
 20998                                  	;retn
 20999                                  	; 16/12/2022
 21000                                  	; 10/06/2019
 21001 00003593 E90104                  	jmp	ADDREC
 21002                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21003                                  	;call	ADDREC
 21004                                  	;retn
 21005                                  	
 21006                                  WRTNUL:
 21007 00003596 89CA                    	MOV	DX,CX			; Entire transfer done
 21008                                  WRTCOOKJ:
 21009 00003598 E98D00                  	JMP	WRTCOOKDONE
 21010                                  WRTDEV:
 21011                                  	;mov	byte [EXTERR_LOCUS],4
 21012 0000359B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21013                                  	;or	byte [es:di+5],40h
 21014 000035A0 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21015                                  					; Reset EOF for input
 21016                                  	;mov	bl,[es:di+5]
 21017 000035A5 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21018 000035A9 31C0                    	XOR	AX,AX
 21019 000035AB E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21020 000035AD 1E                      	PUSH	DS
 21021 000035AE 88D8                    	MOV	AL,BL
 21022 000035B0 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21023 000035B4 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21024 000035B6 31D2                    	XOR	DX,DX			; Set starting point
 21025                                  	;test	al,20h
 21026 000035B8 A820                    	test	AL,devid_device_raw	; Raw?
 21027                                  	;JZ	short TEST_DEV_CON
 21028                                  	;JMP	DVWRTRAW
 21029                                  	; 16/12/2022
 21030 000035BA 7591                    	jnz	short DVWRTRAW
 21031                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21032                                  	;JZ	short TEST_DEV_CON
 21033                                  	;JMP	short DVWRTRAW
 21034                                  
 21035                                  TEST_DEV_CON:
 21036                                  	;test	al,2
 21037 000035BC A802                    	test	AL,devid_device_con_out ; Console output device?
 21038 000035BE 756E                    	jnz	short WRITECON
 21039                                  	;test	al,4
 21040 000035C0 A804                    	test	AL,devid_device_null
 21041 000035C2 75D2                    	JNZ	short WRTNUL
 21042 000035C4 89D0                    	MOV	AX,DX
 21043 000035C6 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21044 000035C9 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21045 000035CB 51                      	PUSH	CX
 21046 000035CC B90100                  	MOV	CX,1
 21047 000035CF E83E11                  	call	SETWRITE
 21048 000035D2 59                      	POP	CX
 21049                                  
 21050                                  ;hkn; SS override
 21051 000035D3 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21052                                  ;
 21053                                  ;SR; Removed X25 support from here
 21054                                  ;
 21055                                  	;lds	si,[si+7]
 21056 000035D8 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21057                                  DVWRTLP:
 21058 000035DB E8CC1A                  	call	DSKSTATCHK
 21059 000035DE E88610                  	call	DEVIOCALL2
 21060 000035E1 57                      	PUSH	DI
 21061 000035E2 B487                    	MOV	AH,87H
 21062                                  
 21063                                  ;hkn; SS override
 21064 000035E4 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21065                                  	
 21066                                  	; MSDOS 3.3
 21067                                  	;test	di,8000h
 21068                                  	;jz	short CWROK
 21069                                  
 21070                                  	; MSDOS 6.0
 21071 000035E9 09FF                    	or	di,di
 21072 000035EB 7916                    	jns	short CWROK
 21073                                  	
 21074                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21075 000035ED E8D91C                  	call	CHARHARD
 21076 000035F0 5F                      	POP	DI
 21077                                  
 21078                                  ;hkn; SS override
 21079 000035F1 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21080 000035F8 3C01                    	CMP	AL,1
 21081 000035FA 74DF                    	JZ	short DVWRTLP 	; Retry
 21082 000035FC 08C0                    	OR	AL,AL
 21083 000035FE 740C                    	JZ	short DVWRTIGN	; Ignore
 21084                                  	; 10/08/2018
 21085 00003600 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21086                                  CWROK:
 21087 00003603 5F                      	POP	DI
 21088                                  
 21089                                  ;hkn; SS override
 21090 00003604 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21091 0000360A 741C                    	JZ	short WRTCOOKDONE
 21092                                  DVWRTIGN:
 21093 0000360C 42                      	INC	DX
 21094                                  
 21095                                  ;hkn; SS override for CALLXAD
 21096 0000360D 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21097 00003612 47                      	INC	DI
 21098 00003613 1E                      	PUSH	DS
 21099 00003614 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21100 00003619 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21101 0000361C 1F                      	POP	DS
 21102 0000361D 7409                    	JZ	short WRTCOOKDONE
 21103                                  
 21104                                  ;hkn; SS override
 21105 0000361F 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21106 00003626 E2B3                    	LOOP	DVWRTLP
 21107                                  WRTCOOKDONE:
 21108 00003628 89D0                    	MOV	AX,DX
 21109 0000362A 1F                      	POP	DS
 21110 0000362B E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21111                                  
 21112                                  WRITECON:
 21113 0000362E 1E                      	PUSH	DS
 21114                                  
 21115                                  ;hkn; SS is DOSDATA
 21116 0000362F 16                      	push	ss
 21117 00003630 1F                      	pop	ds
 21118 00003631 E888FC                  	CALL	SWAPCON
 21119 00003634 1F                      	POP	DS
 21120 00003635 89DE                    	MOV	SI,BX
 21121 00003637 51                      	PUSH	CX
 21122                                  WRCONLP:
 21123 00003638 AC                      	LODSB
 21124 00003639 3C1A                    	CMP	AL,1Ah		; ^Z?
 21125 0000363B 7405                    	JZ	short CONEOF
 21126 0000363D E823E0                  	call	OUTT
 21127 00003640 E2F6                    	LOOP	WRCONLP
 21128                                  CONEOF:
 21129 00003642 58                      	POP	AX			; Count
 21130 00003643 29C8                    	SUB	AX,CX			; Amount actually written
 21131 00003645 1F                      	POP	DS
 21132 00003646 E86DFC                  	CALL	SWAPBACK
 21133 00003649 E941FF                  	JMP	ENDWRDEV
 21134                                  
 21135                                  ;---------------------------------------------------------------------------
 21136                                  ;
 21137                                  ; Procedure Name : get_io_sft
 21138                                  ;
 21139                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21140                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21141                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21142                                  ;
 21143                                  ;---------------------------------------------------------------------------
 21144                                  
 21145                                  ; 04/05/2019 - Retro DOS v4.0
 21146                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21147                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21148                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21149                                  
 21150                                  GET_IO_SFT:
 21151                                  	;test	byte [SS:CONSWAP],0FFh
 21152 0000364C 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21153 00003652 7512                    	JNZ	short GetRedir
 21154                                  GetNormal:
 21155 00003654 16                      	push	ss
 21156 00003655 1F                      	pop	ds
 21157 00003656 06                      	PUSH	ES
 21158 00003657 57                      	PUSH	DI
 21159 00003658 E80E30                  	call	SFFromHandle
 21160 0000365B 7206                    	JC	short RET44P
 21161 0000365D 8CC6                    	MOV	SI,ES
 21162 0000365F 8EDE                    	MOV	DS,SI
 21163 00003661 89FE                    	MOV	SI,DI
 21164                                  RET44P:
 21165 00003663 5F                      	POP	DI
 21166 00003664 07                      	POP	ES
 21167 00003665 C3                      	retn
 21168                                  GetRedir:
 21169 00003666 83FB01                  	CMP	BX,1
 21170 00003669 77E9                    	JA	short GetNormal
 21171 0000366B 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21172 00003670 F8                      	CLC
 21173                                  get_io_sft_retn:
 21174 00003671 C3                      	retn
 21175                                  
 21176                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21177                                  ;---------------------------------------------------------------------------
 21178                                  ;
 21179                                  ; Procedure Name : DIRREAD
 21180                                  ;
 21181                                  ; Inputs:
 21182                                  ;	AX = Directory block number (relative to first block of directory)
 21183                                  ;	ES:BP = Base of drive parameters
 21184                                  ;	[DIRSEC] = First sector of first cluster of directory
 21185                                  ;	[CLUSNUM] = Next cluster
 21186                                  ;	[CLUSFAC] = Sectors/Cluster
 21187                                  ; Function:
 21188                                  ;	Read the directory block into [CURBUF].
 21189                                  ; Outputs:
 21190                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21191                                  ;	[SECCLUSPOS] Set
 21192                                  ;	ES:BP unchanged
 21193                                  ;	[CURBUF] Points to Buffer with dir sector
 21194                                  ;	Carry set if error (user said FAIL to I 24)
 21195                                  ; DS preserved, all other registers destroyed.
 21196                                  ;---------------------------------------------------------------------------
 21197                                  
 21198                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21199                                  
 21200                                  DIRREAD:
 21201                                  
 21202                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21203                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21204                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21205                                  ; by DIRStart = 0.
 21206                                  
 21207 00003672 31D2                    	XOR	DX,DX
 21208                                  	;CMP	word [DIRSTART],0
 21209                                  	; 21/09/2023
 21210 00003674 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21211 00003678 7503                    	jnz	short SubDir
 21212 0000367A 92                      	XCHG	AX,DX
 21213 0000367B EB0C                    	JMP	short DoRead
 21214                                  
 21215                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21216                                  
 21217                                  SubDir:
 21218 0000367D 88C2                    	MOV	DL,AL
 21219                                  	;and	dl,[es:bp+4]
 21220 0000367F 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21221                                  
 21222                                  ;	(DX) = sector-in-cluster
 21223                                  
 21224                                  	;mov	cl,[es:bp+5]
 21225 00003683 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21226 00003687 D3E8                    	SHR	AX,CL
 21227                                  
 21228                                  ;	(DX) = position in cluster
 21229                                  ;	(AX) = number of clusters to skip
 21230                                  
 21231                                  DoRead:
 21232 00003689 8816[7305]              	MOV	[SECCLUSPOS],DL
 21233 0000368D 89C1                    	MOV	CX,AX
 21234 0000368F 88D4                    	MOV	AH,DL
 21235                                  
 21236                                  ;	(CX) = number of clusters to skip.
 21237                                  ;	(AH) = remainder
 21238                                  
 21239                                  	; 04/05/2019 - Retro DOS v4.0
 21240                                  
 21241                                  	; MSDOS 6.0
 21242                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21243                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21244                                  	;MOV	DX,[DIRSEC]
 21245                                  	;ADD	DL,AH
 21246                                  	;ADC	DH,0
 21247                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21248                                  	; 21/09/2023
 21249 00003691 31DB                    	xor	bx,bx ; 0
 21250 00003693 8B16[BE05]              	mov	dx,[DIRSEC]
 21251 00003697 00E2                    	add	dl,ah
 21252 00003699 10DE                    	adc	dh,bl ; 0
 21253 0000369B 131E[C005]              	adc	bx,[DIRSEC+2]
 21254 0000369F 891E[0706]              	mov	[HIGH_SECTOR],bx
 21255                                  
 21256 000036A3 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21257 000036A7 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21258 000036AB E319                    	JCXZ	FIRSTCLUSTER
 21259                                  SKPCLLP:
 21260 000036AD E8841E                  	call	UNPACK
 21261 000036B0 72BF                    	jc	short get_io_sft_retn
 21262 000036B2 87DF                    	XCHG	BX,DI
 21263 000036B4 E8661E                  	call	IsEOF			; test for eof based on fat size
 21264 000036B7 7302                    	JAE	short HAVESKIPPED
 21265 000036B9 E2F2                    	LOOP	SKPCLLP
 21266                                  HAVESKIPPED:
 21267 000036BB 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21268 000036BF 89FA                    	MOV	DX,DI
 21269 000036C1 88E3                    	MOV	BL,AH
 21270 000036C3 E81717                  	call	FIGREC
 21271                                  
 21272                                  	;entry	FIRSTCLUSTER
 21273                                  
 21274                                  FIRSTCLUSTER:
 21275                                  	; 22/09/2023
 21276                                  	;;mov	byte [ALLOWED],18h
 21277                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21278                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21279                                  	;call	GETBUFFR
 21280 000036C6 E87622                  	call	GETBUFFER ; *	; pre-read
 21281 000036C9 72A6                    	jc	short get_io_sft_retn
 21282                                  
 21283                                  	;entry	SET_BUF_AS_DIR
 21284                                  
 21285                                  SET_BUF_AS_DIR:
 21286                                  
 21287                                  ;	Set the type of CURBUF to be a directory sector.
 21288                                  ;	Only flags are modified.
 21289                                  
 21290 000036CB 1E                      	PUSH	DS
 21291 000036CC 56                      	PUSH	SI
 21292 000036CD C536[E205]              	LDS	SI,[CURBUF]
 21293                                  	;or	byte [si+5],4
 21294 000036D1 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21295 000036D5 5E                      	POP	SI
 21296 000036D6 1F                      	POP	DS
 21297                                  dirread_retn:
 21298 000036D7 C3                      	retn
 21299                                  
 21300                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21301                                  ;----------------------------------------------------------------------------
 21302                                  ;
 21303                                  ; Procedure Name : FATSECRD
 21304                                  ; Inputs:
 21305                                  ;	Same as DREAD
 21306                                  ;	DS:BX = Transfer address
 21307                                  ;	CX = Number of sectors
 21308                                  ;	DX = Absolute record number
 21309                                  ;	ES:BP = Base of drive parameters
 21310                                  ; Function:
 21311                                  ;	Calls BIOS to perform FAT read.
 21312                                  ; Outputs:
 21313                                  ;	Same as DREAD
 21314                                  ;---------------------------------------------------------------------------
 21315                                  
 21316                                  	; 04/05/2019 - Retro DOS v4.0
 21317                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21318                                  
 21319                                  FATSECRD:
 21320                                  ;hkn; SS override
 21321                                  	;mov	byte [ss:ALLOWED],18h
 21322 000036D8 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21323 000036DE 89CF                    	MOV	DI,CX
 21324                                  	;mov	cl,[es:bp+8]
 21325 000036E0 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21326                                  	; MSDOS 3.3
 21327                                  	;;mov	al,[es:bp+0Fh]
 21328                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21329                                  	;XOR	AH,AH
 21330                                  	; MSDOS 6.0
 21331                                  	;mov	ax,[es:bp+0Fh]
 21332 000036E4 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21333 000036E8 30ED                    	XOR	CH,CH	
 21334 000036EA 52                      	PUSH	DX
 21335                                  NXTFAT:
 21336                                  	; MSDOS 6.0
 21337                                  ;hkn; SS override
 21338 000036EB 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21339 000036F2 51                      	PUSH	CX			;32mb
 21340 000036F3 50                      	PUSH	AX
 21341 000036F4 89F9                    	MOV	CX,DI
 21342 000036F6 E85B00                  	call	DSKREAD
 21343 000036F9 58                      	POP	AX
 21344 000036FA 59                      	POP	CX
 21345 000036FB 7420                    	JZ	short RET41P		; Carry clear
 21346 000036FD 01C2                    	ADD	DX,AX
 21347 000036FF E2EA                    	LOOP	NXTFAT
 21348 00003701 5A                      	POP	DX
 21349 00003702 89F9                    	MOV	CX,DI
 21350                                  
 21351                                  ; NOTE FALL THROUGH
 21352                                  
 21353                                  ;Break	<DREAD -- DO A DISK READ>
 21354                                  ;---------------------------------------------------------------------------
 21355                                  ;
 21356                                  ; Procedure Name : DREAD
 21357                                  ;
 21358                                  ; Inputs:
 21359                                  ;	DS:BX = Transfer address
 21360                                  ;	CX = Number of sectors
 21361                                  ;	DX = Absolute record number	      (LOW)
 21362                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21363                                  ;	ES:BP = Base of drive parameters
 21364                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21365                                  ; Function:
 21366                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21367                                  ;	errors, will call HARDERRRW for further action.
 21368                                  ; Outputs:
 21369                                  ;	Carry set if error (currently user FAILED to INT 24)
 21370                                  ; DS,ES:BP preserved. All other registers destroyed.
 21371                                  ;---------------------------------------------------------------------------
 21372                                  
 21373                                  	;entry	DREAD
 21374                                  DREAD:
 21375 00003704 E84D00                  	call	DSKREAD
 21376 00003707 74CE                    	jz	short dirread_retn	; Carry clear
 21377                                  ;hkn; SS override
 21378 00003709 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21379 0000370F E89A00                  	call	HARDERRRW
 21380 00003712 3C01                    	CMP	AL,1			; Check for retry
 21381 00003714 74EE                    	JZ	short DREAD
 21382 00003716 3C03                    	CMP	AL,3			; Check for FAIL
 21383 00003718 F8                      	CLC
 21384 00003719 7501                    	JNZ	short NO_CAR		; Ignore
 21385 0000371B F9                      	STC
 21386                                  NO_CAR:
 21387 0000371C C3                      	retn
 21388                                  RET41P: 
 21389 0000371D 5A                      	POP	DX
 21390 0000371E C3                      	retn
 21391                                  
 21392                                  ; 24/07/2018 - Retro DOS v3.0
 21393                                  
 21394                                  ;Break	<CHECK_WRITE_LOCK>
 21395                                  ;---------------------------------------------------------------------------
 21396                                  ;
 21397                                  ; Procedure Name : CHECK_WRITE_LOCK
 21398                                  ;
 21399                                  ; Inputs:
 21400                                  ;	output of SETUP
 21401                                  ;	ES:DI -> SFT
 21402                                  ; Function:
 21403                                  ;	check write lock
 21404                                  ; Outputs:
 21405                                  ;	Carry set if error
 21406                                  ;	Carry clear if ok
 21407                                  ;
 21408                                  ;----------------------------------------------------------------------------
 21409                                  
 21410                                  	; 04/05/2019 - Retro DOS v4.0
 21411                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21412                                  
 21413                                  CHECK_WRITE_LOCK:
 21414                                  	; MSDOS 6.0
 21415                                  	;test	byte [es:di+4],8
 21416 0000371F 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21417                                  	;JZ	short write_cont			     ;no
 21418                                  	;;call	SET_ACC_ERR_DS
 21419                                  	;;retn
 21420                                  	;;jnz	SET_ACC_ERR_DS
 21421                                  	; 19/08/2018
 21422                                  	;jz	short write_cont
 21423                                  	;jmp	SET_ACC_ERR_DS
 21424                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21425 00003724 7403                    	JZ	short write_cont
 21426                                  	;call	SET_ACC_ERR_DS
 21427                                  	;retn
 21428                                  	; 16/12/2022
 21429 00003726 E9B901                  	jmp	SET_ACC_ERR_DS
 21430                                  
 21431                                  write_cont:				;
 21432 00003729 51                      	PUSH	CX			;save reg
 21433 0000372A 09C9                    	OR	CX,CX			;
 21434 0000372C 7501                    	JNZ	short Not_Truncate	;
 21435 0000372E 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21436                                  Not_Truncate:				;
 21437 0000372F B080                    	MOV	AL,80H			;check write access
 21438 00003731 E8BE3B                  	call	LOCK_CHECK		;check lock
 21439 00003734 59                      	POP	CX			;restore reg
 21440 00003735 7305                    	JNC	short WRITE_OK		;lock ok
 21441 00003737 E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21442 0000373A 73ED                    	JNC	short write_cont	;retry
 21443                                  WRITE_OK:				;
 21444 0000373C C3                      	retn				;
 21445                                  
 21446                                  ;Break	<CHECK_READ_LOCK>
 21447                                  ;---------------------------------------------------------------------------
 21448                                  ;
 21449                                  ; Procedure Name : CHECK_READ_LOC
 21450                                  ;
 21451                                  ; Inputs:
 21452                                  ;	ES:DI -> SFT
 21453                                  ;	output of SETUP
 21454                                  ; Function:
 21455                                  ;	check read lock
 21456                                  ; Outputs:
 21457                                  ;	Carry set if error
 21458                                  ;	Carry clear if ok
 21459                                  ;----------------------------------------------------------------------------
 21460                                  
 21461                                  CHECK_READ_LOCK:
 21462                                  	; MSDOS 6.0
 21463                                  	;test	byte [es:di+4],8
 21464 0000373D 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21465                                  	;JZ	short do_retry			   	     ; no
 21466                                  	;;call	SET_ACC_ERR
 21467                                  	;;retn
 21468                                  	;;jnz	SET_ACC_ERR
 21469                                  	; 16/12/2022
 21470                                  	; 28/07/2019
 21471 00003742 7403                    	jz	short do_retry
 21472 00003744 E99D01                  	jmp	SET_ACC_ERR
 21473                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21474                                  	;JZ	short do_retry
 21475                                  	;call	SET_ACC_ERR
 21476                                  	;retn
 21477                                  do_retry:				;
 21478 00003747 30C0                    	xor	al,al			;check read access
 21479 00003749 E8A63B                  	call	LOCK_CHECK		;check lock
 21480 0000374C 7305                    	JNC	short READLOCK_OK 	;lock ok
 21481 0000374E E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21482 00003751 73F4                    	JNC	short do_retry		;retry
 21483                                  READLOCK_OK:				;
 21484 00003753 C3                      	retn				;
 21485                                  
 21486                                  ;============================================================================
 21487                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21488                                  ;============================================================================
 21489                                  ; 24/07/2018 - Retro DOS v3.0
 21490                                  ; 04/05/2019 - Retro DOS v4.0
 21491                                  
 21492                                  ;	TITLE	DISK2 - Disk utility routines
 21493                                  ;	NAME	Disk2
 21494                                  
 21495                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21496                                  ;
 21497                                  ;	DskRead
 21498                                  ;	DWRITE
 21499                                  ;	DSKWRITE
 21500                                  ;	HarderrRW
 21501                                  ;	SETUP
 21502                                  ;	BREAKDOWN
 21503                                  ;	READ_LOCK_VIOLATION
 21504                                  ;	WRITE_LOCK_VIOLATION
 21505                                  ;	DISKREAD
 21506                                  ;	SET_ACC_ERR_DS
 21507                                  ;	SET_ACC_ERR
 21508                                  ;	SETSFT
 21509                                  ;	SETCLUS
 21510                                  ;	AddRec
 21511                                  ;
 21512                                  ;	Revision history:
 21513                                  ;
 21514                                  ;		AN000 version 4.00 Jan. 1988
 21515                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21516                                  
 21517                                  ; 04/05/2019 - Retro DOS v4.0
 21518                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21519                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21520                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21521                                  
 21522                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21523                                  ;---------------------------------------------------------------------------
 21524                                  ;
 21525                                  ; Procedure Name : DSKREAD
 21526                                  ;
 21527                                  ; Inputs:
 21528                                  ;	DS:BX = Transfer addr
 21529                                  ;	CX = Number of sectors
 21530                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21531                                  ;	DX = Absolute record number	       (LOW)
 21532                                  ;	ES:BP = Base of drive parameters
 21533                                  ; Function:
 21534                                  ;	Call BIOS to perform disk read
 21535                                  ; Outputs:
 21536                                  ;	DI = CX on entry
 21537                                  ;	CX = Number of sectors unsuccessfully transfered
 21538                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21539                                  ;	Zero set if OK (from BIOS) (carry clear)
 21540                                  ;	Zero clear if error (carry clear)
 21541                                  ; SI Destroyed, others preserved
 21542                                  ;---------------------------------------------------------------------------
 21543                                  
 21544                                  DSKREAD:
 21545 00003754 51                      	PUSH	CX
 21546                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21547 00003755 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21548                                  	;mov	al,[es:bp+1]
 21549 00003759 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21550 0000375D 53                      	PUSH	BX
 21551 0000375E 06                      	PUSH	ES
 21552 0000375F E87B0F                  	call	SETREAD
 21553 00003762 EB27                    	JMP	short DODSKOP
 21554                                  
 21555                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21556                                  ;--------------------------------------------------------------------------
 21557                                  ;
 21558                                  ; Procedure Name : DWRITE
 21559                                  ;
 21560                                  ; Inputs:
 21561                                  ;	DS:BX = Transfer address
 21562                                  ;	CX = Number of sectors
 21563                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21564                                  ;	DX = Absolute record number	       (LOW)
 21565                                  ;	ES:BP = Base of drive parameters
 21566                                  ;	[ALLOWED] must be set in case HARDERR called
 21567                                  ; Function:
 21568                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21569                                  ;	errors, will call HARDERRRW for further action.
 21570                                  ; Output:
 21571                                  ;	Carry set if error (currently, user FAILed to I 24)
 21572                                  ; BP preserved. All other registers destroyed.
 21573                                  ;----------------------------------------------------------------------------
 21574                                  
 21575                                  	;entry	DWRITE
 21576                                  DWRITE:
 21577 00003764 E81600                  	CALL	DSKWRITE
 21578 00003767 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21579                                  
 21580                                  ;hkn; SS override
 21581 00003769 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21582 0000376F E83A00                  	call	HARDERRRW
 21583 00003772 3C01                    	CMP	AL,1		; Check for retry
 21584 00003774 74EE                    	JZ	short DWRITE
 21585 00003776 3C03                    	CMP	AL,3		; Check for FAIL
 21586 00003778 F8                      	CLC
 21587 00003779 7501                    	JNZ	short NO_CAR2 	; Ignore
 21588 0000377B F9                      	STC
 21589                                  NO_CAR2:
 21590                                  dw_ret_label:
 21591 0000377C C3                      	retn
 21592                                  
 21593                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21594                                  ;---------------------------------------------------------------------------
 21595                                  ;
 21596                                  ; Procedure Name : DSKWRITE
 21597                                  ;
 21598                                  ; Inputs:
 21599                                  ;	DS:BX = Transfer addr
 21600                                  ;	CX = Number of sectors
 21601                                  ;	DX = Absolute record number	       (LOW)
 21602                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21603                                  ;	ES:BP = Base of drive parameters
 21604                                  ; Function:
 21605                                  ;	Call BIOS to perform disk read
 21606                                  ; Outputs:
 21607                                  ;	DI = CX on entry
 21608                                  ;	CX = Number of sectors unsuccessfully transfered
 21609                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21610                                  ;	Zero set if OK (from BIOS) (carry clear)
 21611                                  ;	Zero clear if error (carry clear)
 21612                                  ; SI Destroyed, others preserved
 21613                                  ;
 21614                                  ;----------------------------------------------------------------------------
 21615                                  
 21616                                  	;entry	DSKWRITE
 21617                                  DSKWRITE:
 21618 0000377D 51                      	PUSH	CX
 21619                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21620 0000377E 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21621                                  	;mov	al,[es:bp+1]
 21622 00003782 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21623 00003786 53                      	PUSH	BX
 21624 00003787 06                      	PUSH	ES
 21625 00003788 E8850F                  	call	SETWRITE
 21626                                  DODSKOP:
 21627 0000378B 8CD9                    	MOV	CX,DS		; Save DS
 21628 0000378D 1F                      	POP	DS		; DS:BP points to DPB
 21629 0000378E 1E                      	PUSH	DS
 21630                                  
 21631                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21632 0000378F 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21633 00003793 E8D10E                  	call	DEVIOCALL2
 21634                                  
 21635 00003796 8ED9                    	MOV	DS,CX		; Restore DS
 21636 00003798 07                      	POP	ES		; Restore ES
 21637 00003799 5B                      	POP	BX
 21638                                  
 21639                                  ;hkn; SS override
 21640 0000379A 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21641 0000379F 5F                      	POP	DI
 21642 000037A0 29F9                    	SUB	CX,DI
 21643 000037A2 F7D9                    	NEG	CX		; Number of sectors not transferred
 21644                                  
 21645                                  ;hkn; SS override
 21646 000037A4 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21647                                  	;test	ax,8000h
 21648                                  	; 17/12/2022
 21649                                  	;test	ah,80h
 21650 000037A8 F6C480                  	test	ah,(STERR>>8)
 21651                                  	;test	AX,STERR
 21652 000037AB C3                      	retn
 21653                                  
 21654                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21655                                  ;---------------------------------------------------------------------------
 21656                                  ;
 21657                                  ; Procedure Name : HardErrRW
 21658                                  ;
 21659                                  ; Inputs:
 21660                                  ;	AX is error code from read or write
 21661                                  ;	Other registers set as per HARDERR
 21662                                  ; Function:
 21663                                  ;	Checks the error code for special extended
 21664                                  ;	errors and maps them if needed. Then invokes
 21665                                  ;	Harderr
 21666                                  ; Outputs:
 21667                                  ;	Of HARDERR
 21668                                  ; AX may be modified prior to call to HARDERR.
 21669                                  ; No other registers altered.
 21670                                  ;
 21671                                  ;---------------------------------------------------------------------------
 21672                                  
 21673                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21674                                  HARDERRRW:
 21675                                  	;cmp	al,0Fh
 21676 000037AC 3C0F                    	CMP	AL,error_I24_wrong_disk
 21677 000037AE 7512                    	JNZ	short DO_ERR				; Nothing to do
 21678                                  
 21679                                  	; MSDOS 3.3
 21680                                  	;push	ds
 21681                                  	;push	si
 21682                                  	;lds	si,[ss:CALLVIDRW]
 21683                                  	;mov	[ss:EXTERRPT+2], ds
 21684                                  	;mov	[ss:EXTERRPT], si
 21685                                  	;pop	si
 21686                                  	;pop	ds
 21687                                  
 21688                                  	; MSDOS 6.0
 21689 000037B0 50                      	push	ax
 21690 000037B1 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21691 000037B5 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21692 000037B9 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21693 000037BD 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21694 000037C1 58                      	pop	ax
 21695                                  DO_ERR:
 21696                                  	;;call	HARDERR
 21697                                  	;;retn
 21698                                  	; 16/12/2022
 21699                                  	; 10/06/2019
 21700 000037C2 E9351B                  	jmp	HARDERR	
 21701                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21702                                  	;call	HARDERR
 21703                                  	;retn
 21704                                  
 21705                                  ; 24/07/2018 - Retro DOS v3.0
 21706                                  
 21707                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21708                                  ;----------------------------------------------------------------------------
 21709                                  ;
 21710                                  ; Procedure Name : SETUP
 21711                                  ;
 21712                                  ; Inputs:
 21713                                  ;	ES:DI point to SFT (value also in THISSFT)
 21714                                  ;	DMAAdd contains transfer address
 21715                                  ;	CX = Byte count
 21716                                  ;	DS = DOSDATA
 21717                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21718                                  ;		2nd of caller of caller.
 21719                                  ; Outputs:
 21720                                  ;	    CX = byte count
 21721                                  ;	    [THISDPB] = Base of drive parameters if file
 21722                                  ;		      = Pointer to device header if device or NET
 21723                                  ;	    ES:DI Points to SFT
 21724                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21725                                  ;	    [TRANS] = 0 (No transfers yet)
 21726                                  ;	    BytPos = Byte position in file
 21727                                  ;
 21728                                  ;	The following fields are relevant to local files (not devices) only:
 21729                                  ;
 21730                                  ;	    SecPos = Position of first sector (local files only)
 21731                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21732                                  ;	    [CLUSNUM] = First cluster (local files only)
 21733                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21734                                  ;	    [THISDRV] = Physical unit number (local files only)
 21735                                  ;
 21736                                  ;      RETURNS ONE LEVEL UP WITH:
 21737                                  ;	   CX = 0
 21738                                  ;	   CARRY = Clear
 21739                                  ;	IF AN ERROR IS DETECTED
 21740                                  ; All other registers destroyed
 21741                                  ;----------------------------------------------------------------------------
 21742                                  
 21743                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21744                                  
 21745                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21746                                  
 21747                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21748                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21749                                  
 21750                                  SETUP:
 21751                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21752                                  
 21753                                  	;lds 	si,[es:di+7]
 21754 000037C5 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21755                                  
 21756                                  ;hkn; SS override
 21757 000037C9 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21758                                  
 21759                                  ;hkn; SS is DOSDATA
 21760 000037CE 16                      	push	ss
 21761 000037CF 1F                      	pop	ds
 21762                                  
 21763 000037D0 8936[8A05]              	MOV	[THISDPB],SI
 21764                                  
 21765 000037D4 8B1E[2C03]              	MOV	BX,[DMAADD]
 21766 000037D8 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21767 000037DC C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21768                                  	;mov	ax,[es:di+15h]
 21769 000037E1 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21770                                  	;mov	dx,[es:di+17h]
 21771 000037E5 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21772 000037E9 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21773 000037ED A3[CE05]                	MOV	[BYTPOS],AX
 21774                                  	;test	word [es:di+5],8080h
 21775 000037F0 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21776 000037F6 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21777 000037F8 06                      	PUSH	ES
 21778 000037F9 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21779                                  
 21780                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21781                                  	;;mov	bl,[es:bp+0]
 21782                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21783                                  	; 05/12/2022
 21784 000037FD 268A5E00                	mov	bl,[es:bp]
 21785                                  	
 21786 00003801 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21787                                  	;mov	bx,[es:bp+2]
 21788 00003805 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21789                                  
 21790                                  	;; MSDOS 3.3
 21791                                  	;cmp	dx,bx
 21792                                  	;jnb	short EOFERR
 21793                                  	;div	bx
 21794                                  	;mov	[SECPOS],ax
 21795                                  	;mov	[BYTSECPOS],dx
 21796                                  	;mov	dx,ax
 21797                                  	;;and	al,[es:bp+4]
 21798                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21799                                  	;mov	[SECCLUSPOS],al
 21800                                  	;mov	ax,cx
 21801                                  	;;mov	cl,[es:bp+5]
 21802                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21803                                  	;shr	dx,cl
 21804                                  	;mov	[CLUSNUM],dx
 21805                                  	;pop	es
 21806                                  	;mov	cx,ax
 21807                                  
 21808                                  	; 04/05/2019 - Retro DOS v4.0
 21809                                  
 21810                                  	; MSDOS 6.0
 21811                                  ;M039: Optimized this section.
 21812 00003809 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21813 0000380A E83405                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21814 0000380D 8916[CC05]              	MOV	[BYTSECPOS],DX
 21815 00003811 A3[C405]                	MOV	[SECPOS],AX
 21816 00003814 890E[C605]              	MOV	[SECPOS+2],CX
 21817 00003818 89CA                    	MOV	DX,CX
 21818                                  
 21819 0000381A 89C3                    	MOV	BX,AX
 21820                                  	;and	bl,[es:bp+4]
 21821 0000381C 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21822 00003820 881E[7305]              	MOV	[SECCLUSPOS],BL
 21823                                  
 21824 00003824 E84105                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21825 00003827 59                      	POP	CX			;CX = byte count.
 21826 00003828 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21827                                  	;cmp	ax,[es:bp+0Dh]
 21828 0000382A 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21829 0000382E 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21830                                  
 21831 00003830 A3[BC05]                	MOV	[CLUSNUM],AX
 21832 00003833 07                      	POP	ES			; ES:DI point to SFT
 21833                                  ;M039
 21834                                  
 21835                                  NOSETSTUFF:
 21836 00003834 89C8                    	MOV	AX,CX		; AX = Byte count.
 21837 00003836 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21838 0000383A 730C                    	JNC	short setup_OK	; Must be less than 64
 21839 0000383C A1[2C03]                	MOV	AX,[DMAADD]
 21840 0000383F F7D8                    	NEG	AX		; Amount of room left in segment (know
 21841                                  				;    less than 64K since max value of CX
 21842                                  				;    is FFFF).
 21843 00003841 7501                    	JNZ	short NoDec
 21844 00003843 48                      	DEC	AX
 21845                                  NoDec:
 21846 00003844 89C1                    	MOV	CX,AX		; Can do this much
 21847 00003846 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21848                                  setup_OK:
 21849 00003848 C3                      	retn
 21850                                  
 21851                                  EOFERR:
 21852 00003849 07                      	POP	ES		; ES:DI point to SFT
 21853 0000384A 31C9                    	XOR	CX,CX		; No bytes read
 21854                                  ;;;;;;;;;;; 7/18/86
 21855                                  	; MSDOS 3.3
 21856                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21857                                  ;;;;;;;;;;;
 21858                                  NOROOM:
 21859 0000384C 5B                      	POP	BX		; Kill return address
 21860 0000384D F8                      	CLC
 21861 0000384E C3                      	retn			; RETURN TO CALLER OF CALLER
 21862                                  
 21863                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21864                                  ;---------------------------------------------------------------------------
 21865                                  ;
 21866                                  ; Procedure Name : BREAKDOWN
 21867                                  ;
 21868                                  ; Inputs:
 21869                                  ;	CX = Length of disk transfer in bytes
 21870                                  ;	ES:BP = Base of drive parameters
 21871                                  ;	[BYTSECPOS] = Byte position within first sector
 21872                                  ;	DS = DOSDATA
 21873                                  ; Outputs:
 21874                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21875                                  ;	[SECCNT] = No. of whole sectors to transfer
 21876                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21877                                  ; AX, BX, DX destroyed. No other registers affected.
 21878                                  ;---------------------------------------------------------------------------
 21879                                  
 21880                                  BREAKDOWN:
 21881 0000384F A1[CC05]                	MOV	AX,[BYTSECPOS]
 21882 00003852 89CB                    	MOV	BX,CX
 21883 00003854 09C0                    	OR	AX,AX
 21884 00003856 740E                    	JZ	short SAVFIR	; Partial first sector?
 21885                                  	;sub	ax,[es:bp+2]
 21886 00003858 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21887 0000385C F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21888 0000385E 29C3                    	SUB	BX,AX		; Subtract from total length
 21889 00003860 7304                    	JAE	short SAVFIR
 21890 00003862 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21891 00003864 31DB                    	XOR	BX,BX		; And no bytes are left
 21892                                  SAVFIR:
 21893 00003866 A3[D205]                	MOV	[BYTCNT1],AX
 21894 00003869 89D8                    	MOV	AX,BX
 21895 0000386B 31D2                    	XOR	DX,DX
 21896                                  	;div	word [ES:BP+2]
 21897 0000386D 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21898 00003871 A3[D605]                	MOV	[SECCNT],AX
 21899 00003874 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21900                                  	; MSDOS 3.3
 21901                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21902                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21903                                  	;CMP	AX,1
 21904                                  	;retnz
 21905                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21906                                  	;MOV	[BYTCNT2],AX
 21907                                  	;MOV	[SECCNT],DX	; DX = 0
 21908                                  _RET45:
 21909 00003878 C3                      	retn
 21910                                  
 21911                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21912                                  
 21913                                  ;----------------------------------------------------------------------------
 21914                                  ;
 21915                                  ; Procedure Name : READ_LOCK_VIOLATION
 21916                                  ;
 21917                                  ; ES:DI points to SFT. This entry used by NET_READ
 21918                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21919                                  ; Else do retrys.
 21920                                  ; ES:DI,DS,CX preserved
 21921                                  ;
 21922                                  ;----------------------------------------------------------------------------
 21923                                  
 21924                                  READ_LOCK_VIOLATION:
 21925 00003879 C606[7505]00            	MOV	byte [READOP],0
 21926                                  ERR_ON_CHECK:
 21927                                  	;;test	word [es:di+2],8000h
 21928                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21929                                  	;JNZ	short HARD_ERR
 21930                                  
 21931                                  	; 04/05/2019
 21932                                  	;test	byte [es:di+3],80h
 21933 0000387E 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21934 00003883 7508                    	JNZ	short HARD_ERR
 21935                                  
 21936                                  	;PUSH	CX
 21937                                  	;;mov	cl,[es:di+2]
 21938                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21939                                  	;;and	cl,0F0h
 21940                                  	;AND	CL,SHARING_MASK
 21941                                  	;;cmp	cl,0
 21942                                  	;CMP	CL,SHARING_COMPAT
 21943                                  	;POP	CX
 21944                                  	;JNE	short NO_HARD_ERR
 21945                                  	; 21/09/2023
 21946 00003885 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 21947 00003889 24F0                    	and	al,SHARING_MASK
 21948                                  	;cmp	al,SHARING_COMPAT
 21949                                  	;jne	short NO_HARD_ERR
 21950 0000388B 7505                    	jnz	short NO_HARD_ERR
 21951                                  HARD_ERR:
 21952 0000388D E8783A                  	call	LOCK_VIOLATION
 21953 00003890 73E6                    	jnc	short _RET45		; User wants Retrys
 21954                                  NO_HARD_ERR:
 21955 00003892 31C9                    	XOR	CX,CX			;No bytes transferred
 21956                                  	;mov	ax,21h
 21957 00003894 B82100                  	MOV	AX,error_lock_violation
 21958 00003897 F9                      	STC
 21959 00003898 C3                      	retn
 21960                                  
 21961                                  ;----------------------------------------------------------------------------
 21962                                  ;
 21963                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21964                                  ;
 21965                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21966                                  ; This entry used by NET_WRITE
 21967                                  ;
 21968                                  ;----------------------------------------------------------------------------
 21969                                  
 21970                                  WRITE_LOCK_VIOLATION:
 21971 00003899 C606[7505]01            	MOV	byte [READOP],1
 21972 0000389E EBDE                    	JMP	short ERR_ON_CHECK
 21973                                  
 21974                                  ; 04/05/2019 - Retro DOS v4.0
 21975                                  
 21976                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21977                                  
 21978                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21979                                  ;----------------------------------------------------------------------------
 21980                                  ;
 21981                                  ; Procedure Name : DISKREAD
 21982                                  ;
 21983                                  ; Inputs:
 21984                                  ;	Outputs of SETUP
 21985                                  ; Function:
 21986                                  ;	Perform disk read
 21987                                  ; Outputs:
 21988                                  ;    Carry clear
 21989                                  ;	CX = No. of bytes read
 21990                                  ;	ES:DI point to SFT
 21991                                  ;	SFT offset and cluster pointers updated
 21992                                  ;    Carry set
 21993                                  ;	CX = 0
 21994                                  ;	ES:DI point to SFT
 21995                                  ;	AX has error code
 21996                                  ;----------------------------------------------------------------------------
 21997                                  
 21998                                  ;hkn; called from disk.asm. DS already set up.
 21999                                  
 22000                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22001                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22002                                  
 22003                                  DISKREAD:
 22004                                  	;mov	ax,[es:di+11h]
 22005 000038A0 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22006                                  	;mov	bx,[es:di+13h]
 22007 000038A4 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22008 000038A8 2B06[CE05]              	SUB	AX,[BYTPOS]
 22009 000038AC 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22010 000038B0 7226                    	JB	short RDERR		;Read starts past EOF
 22011 000038B2 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22012 000038B4 09C0                    	OR	AX,AX
 22013 000038B6 7420                    	JZ	short RDERR		;Read starts at EOF
 22014 000038B8 39C8                    	CMP	AX,CX
 22015 000038BA 7302                    	JAE	short ENUF		;I/O fits
 22016 000038BC 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22017                                  ENUF:
 22018                                  	; MSDOS 3.3
 22019                                  	;test	byte [es:di+4],8
 22020                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22021                                  	;jnz	short SET_ACC_ERR
 22022                                  	;call	LOCK_CHECK
 22023                                  	;jnb	short _READ_OK
 22024                                  	;call	READ_LOCK_VIOLATION
 22025                                  	;jnb	short ENUF
 22026                                  	;retn
 22027                                  
 22028                                  	; MSDOS 6.0
 22029 000038BE E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22030 000038C1 7301                    	JNC	short _READ_OK 		; There are no locks
 22031 000038C3 C3                      	retn
 22032                                  
 22033                                  _READ_OK:
 22034 000038C4 C42E[8A05]              	LES	BP,[THISDPB]
 22035 000038C8 E884FF                  	CALL	BREAKDOWN
 22036 000038CB 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 22037                                  
 22038 000038CF E87113                  	call	FNDCLUS
 22039                                       	; MSDOS 6.0			;M022 conditional removed here
 22040 000038D2 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22041                                  					; migrated from 330a - HKN
 22042 000038D4 09C9                    	OR	CX,CX
 22043 000038D6 7413                    	JZ	short SKIPERR
 22044                                  RDERR:
 22045 000038D8 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22046 000038DA E92102                  	jmp	WRTERR22
 22047                                  
 22048                                  ;RDLASTJ: 
 22049                                  	;JMP	RDLAST                  ;M039
 22050                                  
 22051                                  SETSFTJ2: 
 22052 000038DD E99600                  	JMP	SETSFT
 22053                                  
 22054                                  CANOT_READ:
 22055                                  	; MSDOS 3.3
 22056                                  	;POP	CX		;M039.
 22057                                  	; MSDOS 3.3 & MSDOS 6.0
 22058 000038E0 59                      	POP	CX              ;Clean stack.
 22059 000038E1 5B                      	POP	BX
 22060                                  
 22061                                  	;entry	SET_ACC_ERR_DS
 22062                                  SET_ACC_ERR_DS:
 22063                                  
 22064                                  ;hkn; SS is DOSDATA
 22065                                  	;Context DS
 22066 000038E2 16                      	push	ss
 22067 000038E3 1F                      	pop	ds
 22068                                  
 22069                                  	;entry	SET_ACC_ERR
 22070                                  SET_ACC_ERR:
 22071 000038E4 31C9                    	XOR	CX,CX
 22072                                  	;mov	ax,5
 22073 000038E6 B80500                  	MOV	AX,error_access_denied
 22074 000038E9 F9                      	STC
 22075 000038EA C3                      	retn
 22076                                  
 22077                                  SKIPERR:
 22078 000038EB 8916[BA05]              	MOV	[LASTPOS],DX
 22079 000038EF 891E[BC05]              	MOV	[CLUSNUM],BX
 22080 000038F3 833E[D205]00            	CMP	word [BYTCNT1],0
 22081 000038F8 7405                    	JZ	short RDMID
 22082                                  
 22083 000038FA E8BC13                  	call	BUFRD
 22084 000038FD 72E3                    	JC	short SET_ACC_ERR_DS
 22085                                  
 22086                                  RDMID:
 22087 000038FF 833E[D605]00            	CMP	word [SECCNT],0
 22088                                  	;JZ	RDLAST ; 10/08/2018
 22089 00003904 7453                    	jz	short RDLAST
 22090                                  
 22091 00003906 E84514                  	call	NEXTSEC
 22092 00003909 72D2                    	JC	short SETSFTJ2
 22093                                  
 22094 0000390B C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22095                                  ONSEC:
 22096 00003910 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22097 00003914 8B0E[D605]              	MOV	CX,[SECCNT]
 22098 00003918 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22099                                  RDLP:
 22100 0000391C E86014                  	call	OPTIMIZE
 22101 0000391F 72C1                    	JC	short SET_ACC_ERR_DS
 22102                                  
 22103 00003921 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22104 00003922 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22105 00003923 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22106                                  	;mov	byte [ALLOWED],38h
 22107 00003924 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22108 00003929 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22109                                  
 22110 0000392D 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22111 0000392E 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22112                                  
 22113                                  	; 04/05/2019 - Retro DOS v4.0
 22114                                  
 22115                                  	; MSDOS 6.0
 22116 0000392F E80322                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22117                                  
 22118                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22119 00003932 E8CFFD                  	call	DREAD
 22120                                  
 22121                                  	; MSDOS 3.3 
 22122                                  	;pop	bx
 22123                                  	;pop	dx
 22124                                  	;jc	short CANOT_READ
 22125                                  	;add	bx,dx	; (bx = Extent end)
 22126                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22127                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22128                                  	;call	SETVISIT
 22129                                  	; ->***
 22130                                  ;M039
 22131                                  	; MSDOS 6.0 
 22132 00003935 59                      	pop	cx
 22133 00003936 5A                      	pop	dx
 22134 00003937 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22135 0000393C 72A2                    	jc	short CANOT_READ
 22136                                  
 22137 0000393E 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22138                                  
 22139                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22140                                  ;            sectors, also termed an "Extent".)
 22141                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22142                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22143                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22144                                  ;
 22145                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22146                                  ;	buffers must be "read" into the transfer memory block, so that the
 22147                                  ;       transfer memory reflects the most recent data.
 22148                                  
 22149 00003943 E85E00                  	call	DskRdBufScan
 22150                                  
 22151                                  	;Context DS
 22152 00003946 16                      	push	ss
 22153 00003947 1F                      	pop	ds
 22154                                          
 22155 00003948 59                      	pop	cx
 22156 00003949 5B                              pop	bx
 22157                                  
 22158                                  ;       CX = # of sector remaining.
 22159                                  ;       BX = Next physical cluster.
 22160                                  
 22161                                  ;M039
 22162                                  
 22163                                  ;;;;;;;;
 22164                                  ;	; 25/07/2018 - Retro DOS v3.0
 22165                                  ;	; ***->
 22166                                  ;	; MSDOS 3.3
 22167                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22168                                  ;bufq:
 22169                                  ;;	DX = Extent start.
 22170                                  ;;	BX = Extent end.
 22171                                  ;;	 AL = Drive #.
 22172                                  ;;     DS:DI-> 1st buffer in queue.
 22173                                  ;
 22174                                  ;	;or	byte [di+5],20h
 22175                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22176                                  ;	;cmp	al,[di+4]	
 22177                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22178                                  ;	jnz	short bufq3
 22179                                  ;	;cmp	[di+6],dx
 22180                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22181                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22182                                  ;	;cmp	[di+6],bx
 22183                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22184                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22185                                  ;	
 22186                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22187                                  ;
 22188                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22189                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22190                                  ;;      as MRU (Most Recently Used).
 22191                                  ;
 22192                                  ;	;test	byte [di+5],40h
 22193                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22194                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22195                                  ;	pop	ax ; transfer address
 22196                                  ;	push	ax
 22197                                  ;	push	di
 22198                                  ;	push	dx
 22199                                  ;	;sub	dx,[di+6]
 22200                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22201                                  ;	neg	dx
 22202                                  ;
 22203                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22204                                  ;;           block.
 22205                                  ;
 22206                                  ;	mov	si,di
 22207                                  ;	mov	di,ax
 22208                                  ;	mov	ax,dx
 22209                                  ;	;mov	cx,[es:bp+6]	
 22210                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22211                                  ;	mul	cx
 22212                                  ;	add	di,ax
 22213                                  ;
 22214                                  ;	lea	si,[si+16]
 22215                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22216                                  ;	shr	cx,1
 22217                                  ;	push	es
 22218                                  ;	mov	es,[SS:DMAADD+2]
 22219                                  ;
 22220                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22221                                  ;;      DS:SI-> Buffer sector data.
 22222                                  ;;      ES:DI-> Destination within Transfer memory block.
 22223                                  ;
 22224                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22225                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22226                                  ;	;rep	movsb                   ;Copy last byte.
 22227                                  ;	jnc	short bufq1
 22228                                  ;	movsb
 22229                                  ;bufq1:
 22230                                  ;	pop	es
 22231                                  ;	pop	dx
 22232                                  ;	pop	di
 22233                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22234                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22235                                  ;bufq2:
 22236                                  ;	call	SCANPLACE
 22237                                  ;bufq3:
 22238                                  ;	call	SKIPVISIT
 22239                                  ;	jnz	short bufq
 22240                                  ;	
 22241                                  ;	push	ss
 22242                                  ;	pop	ds
 22243                                  ;	pop	cx
 22244                                  ;	pop	cx
 22245                                  ;	pop	bx	
 22246                                  ;bufq4:
 22247                                  ;;;;;;;
 22248 0000394A E30D                    	JCXZ	RDLAST
 22249                                  
 22250 0000394C E8CE1B                  	call	IsEOF			; test for eof on fat size
 22251 0000394F 7325                    	JAE	short SETSFT
 22252                                  
 22253 00003951 B200                    	MOV	DL,0
 22254 00003953 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22255 00003957 EBC3                    	JMP	short RDLP ; 19/05/2019
 22256                                  
 22257                                  RDLAST:
 22258 00003959 A1[D405]                	MOV	AX,[BYTCNT2]
 22259 0000395C 09C0                    	OR	AX,AX
 22260 0000395E 7416                    	JZ	short SETSFT
 22261 00003960 A3[D205]                	MOV	[BYTCNT1],AX
 22262                                  
 22263 00003963 E8E813                  	call	NEXTSEC
 22264 00003966 720E                    	JC	short SETSFT
 22265                                  
 22266 00003968 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22267 0000396E E84813                  	call	BUFRD
 22268                                  	; 10/08/2018
 22269                                  
 22270 00003971 7303                    	JNC	short SETSFT
 22271 00003973 E96CFF                  	JMP	SET_ACC_ERR_DS
 22272                                  
 22273                                  ;------------------------------------------------------------------------------
 22274                                  ;
 22275                                  ; Procedure Name : SETSFT
 22276                                  ; Inputs:
 22277                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22278                                  ;		and set cluster fields
 22279                                  ; Function:
 22280                                  ;	Update [THISSFT] based on the transfer
 22281                                  ; Outputs:
 22282                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22283                                  ;	ES:DI points to [THISSFT]
 22284                                  ;	CX No. of bytes transferred
 22285                                  ;	Carry clear
 22286                                  ;
 22287                                  ;----------------------------------------------------------------------------
 22288                                  
 22289                                  	;entry	SETSFT
 22290                                  
 22291                                  ; 26/07/2018 - Retro DOS v3.0
 22292                                  SETSFT:
 22293 00003976 C43E[9E05]              	LES	DI,[THISSFT]
 22294                                  
 22295                                  ; Same as SETSFT except ES:DI already points to SFT
 22296                                  	;entry	SETCLUS
 22297                                  SETCLUS:	
 22298 0000397A 8B0E[B805]              	MOV	CX,[NEXTADD]
 22299 0000397E 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22300                                  	;;test	word [es:di+5],80h
 22301                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22302                                  	;JNZ	short ADDREC		; don't set clusters if device
 22303                                  
 22304                                  	; 04/05/2019 - Retro DOS v4.0
 22305                                  	;test	byte [es:di+5],80h
 22306 00003982 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22307 00003987 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22308                                  
 22309 00003989 A1[BC05]                	MOV	AX,[CLUSNUM]
 22310                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22311                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22312 0000398C 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22313 00003990 A1[BA05]                	MOV	AX,[LASTPOS]
 22314                                  	;mov	[es:di+19h],ax
 22315 00003993 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22316                                  
 22317                                  ;----------------------------------------------------------------------------
 22318                                  ;
 22319                                  ; Procedure : AddRec
 22320                                  ; Inputs:
 22321                                  ;	ES:DI points to SFT
 22322                                  ;	CX is No. Bytes transferred
 22323                                  ; Function:
 22324                                  ;	Update the SFT offset based on the transfer
 22325                                  ; Outputs:
 22326                                  ;	sf_position updated to point to first byte after transfer
 22327                                  ;	ES:DI points to SFT
 22328                                  ;	CX No. of bytes transferred
 22329                                  ;	Carry clear
 22330                                  ;----------------------------------------------------------------------------
 22331                                  
 22332                                  	;entry	AddRec
 22333                                  ADDREC:
 22334 00003997 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22335                                  	;add	[es:di+15h],cx
 22336 00003999 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22337                                  	;adc	word [es:di+17h], 0
 22338 0000399D 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22339                                  RET28:	
 22340 000039A2 F8                      	CLC
 22341 000039A3 C3                      	retn
 22342                                  
 22343                                  ; 25/07/2018
 22344                                  ; MSDOS 6.0
 22345                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22346                                  ;----------------------------------------------------------------------------
 22347                                  ;
 22348                                  ; Procedure Name : DskRdBufScan
 22349                                  ;
 22350                                  ; Inputs:
 22351                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22352                                  ;            sectors, also termed an "Extent".)
 22353                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22354                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22355                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22356                                  ;
 22357                                  ; Function:
 22358                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22359                                  ;	"read" into the transfer memory block, so that the transfer memory
 22360                                  ;	reflects the most recent data.
 22361                                  ;
 22362                                  ; Outputs:
 22363                                  ;       Transfer memory updated as required.
 22364                                  ;
 22365                                  ; Uses:
 22366                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22367                                  ;       SS override for all global variables.
 22368                                  ;
 22369                                  ; Notes:
 22370                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22371                                  ;	than the FIRST.
 22372                                  ;----------------------------------------------------------------------------
 22373                                  ;M039: Created
 22374                                  
 22375                                  ; 04/05/2019 - Retro DOS v4.0
 22376                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22377                                  
 22378                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22379                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22380                                  
 22381                                  ;procedure DskRdBufScan,NEAR
 22382                                  ;
 22383                                  ;ASSUME  DS:NOTHING
 22384                                  
 22385                                  DskRdBufScan:
 22386 000039A4 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22387 000039AA 743C                    	je	short bufx		     ; -no, skip all work.
 22388                                  
 22389 000039AC 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22390 000039B1 89DE                    	mov     si,bx
 22391 000039B3 01D1                    	add     cx,dx
 22392 000039B5 83D600                  	adc     si,0
 22393                                  
 22394 000039B8 E8121F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22395                                  	;mov	ax,[di+2]
 22396 000039BB 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22397 000039BE 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22398                                  		
 22399                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22400                                  	;;mov	al,[es:bp+0]
 22401                                  	;mov	al,[es:bp+DPB.DRIVE]
 22402                                  	; 15/12/2022
 22403 000039C2 268A4600                	mov	al,[es:bp]
 22404                                  
 22405                                  ;       BX:DX = Extent start.
 22406                                  ;       SI:CX = Extent end + 1.
 22407                                  ;          AL = Drive #.
 22408                                  ;       DS:DI-> 1st buffer in queue.
 22409                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22410                                  
 22411                                  bufq:	
 22412                                  	;cmp	al,[di+4]
 22413 000039C6 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22414 000039C9 7514                    	jne	short bufq1        	;  -no, jump.
 22415                                  
 22416                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22417                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22418                                  
 22419                                  	;cmp	bx,[di+8]
 22420 000039CB 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22421 000039CE 7503                    	jne	short bufq01
 22422                                  	;cmp	dx,[di+6]
 22423 000039D0 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22424                                  bufq01:
 22425 000039D3 770A                    	ja	short bufq1
 22426                                  
 22427                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22428                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22429                                  
 22430                                  	;cmp	si,[di+8]
 22431 000039D5 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22432 000039D8 7503                    	jne	short bufq02
 22433                                  	;cmp	cx,[di+6]
 22434 000039DA 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22435                                  bufq02:
 22436 000039DD 770A                    	ja	short bufq2
 22437                                  bufq1:	
 22438 000039DF 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22439 000039E4 8B3D                    	mov	di,[di]
 22440                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22441 000039E6 75DE                    	jne	short bufq		; -no, do next buffer
 22442                                  bufx:
 22443 000039E8 C3                      	retn				;Exit.
 22444                                  
 22445                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22446                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22447                                  ;       as MRU (Most Recently Used).
 22448                                  
 22449                                  bufq2:	
 22450 000039E9 50                      	push	ax
 22451                                  	;test	byte [di+5],40h
 22452 000039EA F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22453 000039EE 742D                    	jz	short bufq3                    ; -no, jump.
 22454                                  
 22455                                  ;       SaveReg <cx,dx,si,di,es>
 22456 000039F0 51                      	push	cx
 22457 000039F1 52                      	push	dx
 22458 000039F2 56                      	push	si
 22459 000039F3 57                      	push	di
 22460 000039F4 06                      	push	es
 22461                                  
 22462 000039F5 89D0                    	mov     ax,dx
 22463                                  	;sub	ax,[di+6]
 22464 000039F7 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22465 000039FA F7D8                    	neg	ax
 22466                                  
 22467                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22468                                  ;            block. (Note: the upper word of the sector # may be ignored
 22469                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22470                                  ;            is imposed by the input parameters of the disk read operation.)
 22471                                  
 22472                                  	;lea	si,[di+20]
 22473 000039FC 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22474                                  	;mov	cx,[es:bp+2]
 22475 000039FF 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22476 00003A03 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22477 00003A05 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22478 00003A0A 01C7                    	add	di,ax
 22479 00003A0C 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22480 00003A11 D1E9                    	shr	cx,1
 22481                                  
 22482                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22483                                  ;       DS:SI-> Buffer sector data.
 22484                                  ;       ES:DI-> Destination within Transfer memory block.
 22485                                  
 22486 00003A13 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22487                                  	;; 04/05/2019
 22488                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22489                                  	;;rep	movsb                   ;Copy last byte.
 22490                                  	;jnc	short bufq03	
 22491                                  	;movsb
 22492                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22493                                  	;adc	cx,0
 22494                                  	;rep	movsb
 22495                                  	; 22/09/2023
 22496 00003A15 7301                    	jnc	short bufq03
 22497 00003A17 A4                      	movsb
 22498                                  bufq03:
 22499                                  	;RestoreReg <es,di,si,dx,cx>
 22500 00003A18 07                      	pop	es
 22501 00003A19 5F                      	pop	di
 22502 00003A1A 5E                      	pop	si
 22503 00003A1B 5A                      	pop	dx
 22504 00003A1C 59                      	pop	cx
 22505                                  
 22506                                  ;       DS:DI -> current buffer.
 22507                                  bufq3:	
 22508 00003A1D 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22509                                          ;invoke SCANPLACE
 22510 00003A1F E8BD1E                  	call	SCANPLACE
 22511 00003A22 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22512 00003A27 58                      	pop	ax
 22513                                  	;jne	short bufq		; -no, jump.
 22514                                  	;;jmp	short bufx		; -yes, exit.
 22515                                  	;; 12/06/2019
 22516                                  	;retn
 22517                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22518 00003A28 759C                    	jne	short bufq
 22519 00003A2A EBBC                    	jmp	short bufx
 22520                                  
 22521                                  ;EndProc DskRdBufScan
 22522                                  
 22523                                  ;============================================================================
 22524                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22525                                  ;============================================================================
 22526                                  ; 04/05/2019 - Retro DOS v4.0
 22527                                  ; 24/07/2018 - Retro DOS v3.0
 22528                                  
 22529                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22530                                  ;----------------------------------------------------------------------------
 22531                                  ;
 22532                                  ; Procedure Name : DISKWRITE
 22533                                  ;
 22534                                  ; Inputs:
 22535                                  ;       Outputs of SETUP
 22536                                  ; Function:
 22537                                  ;       Perform disk write
 22538                                  ; Outputs:
 22539                                  ;    Carry clear
 22540                                  ;       CX = No. of bytes written
 22541                                  ;       ES:DI point to SFT
 22542                                  ;       SFT offset and cluster pointers updated
 22543                                  ;    Carry set
 22544                                  ;       CX = 0
 22545                                  ;       ES:DI point to SFT
 22546                                  ;       AX has error code
 22547                                  ;----------------------------------------------------------------------------
 22548                                  
 22549                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22550                                  
 22551                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22552                                  
 22553                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22554                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22555                                  
 22556                                  DISKWRITE:
 22557                                  	; MSDOS 3.3
 22558                                  	; IBMDOS.COM - Offset 436Dh
 22559                                  	;;test	byte [es:di+4],8
 22560                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22561                                  	;jz	short write_cont
 22562                                  	;jmp	SET_ACC_ERR_DS
 22563                                  ;write_cont:
 22564                                  	;push	cx
 22565                                  	;or	cx,cx
 22566                                  	;jnz	short Not_Truncate
 22567                                  	;;mov	cx,-1
 22568                                  	;dec	cx
 22569                                  ;Not_Truncate:
 22570                                  	;call	LOCK_CHECK
 22571                                  	;pop	cx
 22572                                  	;jnb	short _WRITE_OK
 22573                                  	;call	WRITE_LOCK_VIOLATION
 22574                                  	;jnb	short DISKWRITE
 22575                                  	;retn
 22576                                  
 22577                                  	; MSDOS 6.0
 22578 00003A2C E8F0FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22579                                  	; 19/08/2018
 22580 00003A2F 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22581 00003A31 C3                      	retn
 22582                                  
 22583                                  WRTEOFJ:
 22584 00003A32 E9DC01                  	JMP     WRTEOF
 22585                                  
 22586                                  _WRITE_OK:
 22587                                   	; 27/07/2018
 22588                                  	; IBMDOS.COM - Offset 438Eh
 22589                                  	
 22590                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22591                                  	;and	word [es:di+5],0BFBFh
 22592 00003A35 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22593                                  				; Mark file as dirty, clear no date on close
 22594                                  
 22595                                  	; 04/05/2019 - Retro DOS v4.0	
 22596                                  
 22597                                  	; MSDOS 6.0
 22598                                  	; mov 	ax,[es:di+11h]
 22599 00003A3B 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22600 00003A3F A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22601                                  	;mov	ax,[es:di+13h]
 22602 00003A42 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22603 00003A46 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22604                                  
 22605                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22606                                  
 22607                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22608 00003A49 C42E[8A05]              	LES     BP,[THISDPB]
 22609                                  
 22610 00003A4D E8FFFD                  	call	BREAKDOWN
 22611                                  
 22612 00003A50 A1[CE05]                	MOV     AX,[BYTPOS]
 22613 00003A53 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22614 00003A57 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22615 00003A59 01C8                    	ADD     AX,CX
 22616 00003A5B 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22617                                  
 22618                                  	;mov	bx,[es:bp+2]
 22619 00003A5E 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22620                                  
 22621                                  	; MSDOS 3.3
 22622                                  	;cmp	dx,bx
 22623                                  	;jnb	short WRTERR33
 22624                                  	;div	bx
 22625                                  	;mov	bx,ax
 22626                                  	;OR	DX,DX
 22627                                  	;JNZ	short CALCLUS
 22628                                  	;dec	ax
 22629                                  ;CALCLUS:
 22630                                  	; MSDOS 3.3
 22631                                  	;mov	cl,[es:bp+5]
 22632                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22633                                  	;shr	ax,cl
 22634                                  	;push	ax
 22635                                  	;push	dx
 22636                                  	;push	es
 22637                                  	;les	di,[THISSFT]
 22638                                  	;;mov	ax,[es:di+11h]
 22639                                  	;;mov	dx,[es:di+13h]
 22640                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22641                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22642                                  	;pop	es
 22643                                  	;;DX:AX = current file size (in bytes).
 22644                                  	;;div	word [es:bp+2]
 22645                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22646                                  	;mov	cx,ax
 22647                                  	;or	dx,dx
 22648                                  	;jz	short NORND
 22649                                  	;inc	ax
 22650                                  ;NORND:
 22651                                  	; MSDOS 6.0
 22652 00003A62 E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22653 00003A65 89C6                    	MOV	SI,AX
 22654 00003A67 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22655                                  
 22656                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22657                                  
 22658 00003A6B 09D2                    	OR	DX,DX
 22659 00003A6D 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22660 00003A6E 89CA                    	MOV	DX,CX			;M039
 22661 00003A70 7506                    	JNZ	short CALCLUS
 22662 00003A72 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22663 00003A75 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22664                                  
 22665                                  CALCLUS:
 22666                                  	; MSDOS 6.0
 22667 00003A78 E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22668 00003A7B 5A                      	POP	DX
 22669                                  
 22670                                  ;       AX = Last cluster to write.
 22671                                  ;       DX = # of bytes in last sector to write (the "tail").
 22672                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22673                                  
 22674 00003A7C 50                      	PUSH	AX
 22675 00003A7D 52                      	PUSH	DX
 22676                                  ;M039
 22677 00003A7E 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22678 00003A82 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22679 00003A85 E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22680 00003A88 890E[0E06]              	mov	[TEMP_VAR2],cx
 22681 00003A8C 890E[CA05]              	mov	[VALSEC+2],cx
 22682 00003A90 89C1                    	mov	cx,ax
 22683 00003A92 89F3                    	mov	bx,si
 22684                                  
 22685                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22686                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22687                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22688                                  ;                     DX = # of bytes in last sector of current file.
 22689                                  ;M039
 22690 00003A94 09D2                    	OR	DX,DX
 22691 00003A96 7407                    	JZ	short NORND
 22692                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 22693                                  	;ADC	word [VALSEC+2],0
 22694                                  	; 22/09/2023
 22695 00003A98 40                      	inc	ax  ; 0FFFFh -> 0
 22696 00003A99 7504                    	jnz	short NORND
 22697 00003A9B FF06[CA05]              	inc	word [VALSEC+2]
 22698                                  NORND:		
 22699                                  	; MSDOS 3.3 & MSDOS 6.0
 22700 00003A9F A3[C805]                	MOV     [VALSEC],AX
 22701                                  
 22702                                  ;       [VALSEC] = Last sector of current file.
 22703                                  
 22704 00003AA2 31C0                    	XOR     AX,AX
 22705 00003AA4 A3[DE05]                	MOV     [GROWCNT],AX
 22706 00003AA7 A3[E005]                	MOV     [GROWCNT+2],AX
 22707 00003AAA 58                      	POP     AX
 22708                                  
 22709                                  	; MSDOS 6.0
 22710 00003AAB 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22711 00003AAF 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22712 00003AB3 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22713 00003AB5 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22714 00003AB7 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22715 00003AB9 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22716 00003ABD EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22717                                  lowsec:
 22718                                  	;MOV	DI,0			;F.C. >32mb
 22719                                  	; 22/09/2023
 22720 00003ABF 31FF                    	xor	di,di
 22721                                  	; MSDOS 3.3 & MSDOS 6.0
 22722 00003AC1 29CB                    	SUB	BX,CX			; Number of full sectors
 22723 00003AC3 7253                    	JB	short NOGROW
 22724 00003AC5 7444                    	JZ	short TESTTAIL
 22725                                  yesgrow:
 22726                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22727 00003AC7 89D1                    	MOV     CX,DX
 22728 00003AC9 93                      	XCHG    AX,BX
 22729                                  	;mul	word [es:bp+2]
 22730 00003ACA 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22731                                  	
 22732                                  	; MSDOS 6.0
 22733 00003ACE 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22734 00003AD2 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22735 00003AD5 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22736                                  	;mul	word [es:bp+2]
 22737 00003AD7 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22738                                  	
 22739 00003ADB 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22740 00003ADF 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22741 00003AE1 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22742                                  
 22743                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22744 00003AE4 29C8                    	SUB     AX,CX			; Take off current "tail"
 22745 00003AE6 83DA00                  	SBB     DX,0			; 32-bit extension
 22746 00003AE9 01D8                    	ADD     AX,BX			; Add on new "tail"
 22747 00003AEB 83D200                  	ADC     DX,0			; ripple tim's head off
 22748 00003AEE EB21                    	JMP     SHORT SETGRW
 22749                                  
 22750                                  HAVSTART:
 22751                                  	;int 3
 22752 00003AF0 89C1                    	MOV     CX,AX
 22753 00003AF2 E86E11                  	call	SKPCLP
 22754                                  	;JCXZ	DOWRTJ
 22755                                  	; 16/12/2022
 22756 00003AF5 E357                    	jcxz	DOWRT
 22757                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22758                                  	;jcxz	DOWRTJ
 22759                                  
 22760 00003AF7 E81013                  	call	ALLOCATE
 22761                                  	;JNC	short DOWRTJ
 22762                                  	; 16/12/2022
 22763 00003AFA 7352                    	jnc	short DOWRT
 22764                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22765                                  	;jnc	short DOWRTJ
 22766                                  
 22767                                  	;entry   WRTERR
 22768                                  WRTERR:
 22769 00003AFC B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22770                                  
 22771                                  	;entry WRTERR22
 22772                                  WRTERR22:
 22773 00003AFE A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22774                                  
 22775                                  	; 27/07/2018
 22776                                  WRTERR33:
 22777                                  	;MOV	CX,0			;No bytes transferred
 22778 00003B01 31C9                    	XOR     CX,CX
 22779                                  					
 22780 00003B03 C43E[9E05]              	LES     DI,[THISSFT]
 22781                                  	;CLC ; 19/05/2019
 22782                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22783                                  	; 16/12/2022
 22784                                  	;clc
 22785 00003B07 C3                      	retn
 22786                                  
 22787                                  	; 16/12/2022
 22788                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22789                                  ;DOWRTJ:
 22790                                  	;JMP	short DOWRT
 22791                                  
 22792                                  ACC_ERRWJ:
 22793                                  	; 10/08/2018
 22794                                  	;JMP	SET_ACC_ERRW
 22795                                  	; 16/12/2022
 22796 00003B08 E9D7FD                  	jmp	SET_ACC_ERR_DS
 22797                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22798                                  	;jmp	SET_ACC_ERRW	
 22799                                  
 22800                                  TESTTAIL:
 22801 00003B0B 29D0                    	SUB     AX,DX
 22802 00003B0D 7609                    	JBE	short NOGROW
 22803 00003B0F 31D2                    	XOR     DX,DX
 22804                                  SETGRW:
 22805 00003B11 A3[DE05]                	MOV	[GROWCNT],AX
 22806 00003B14 8916[E005]              	MOV	[GROWCNT+2],DX
 22807                                  NOGROW:
 22808 00003B18 58                      	POP     AX
 22809 00003B19 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22810 00003B1D E82311                  	call	FNDCLUS
 22811 00003B20 72E6                    	JC	short ACC_ERRWJ
 22812 00003B22 891E[BC05]              	MOV     [CLUSNUM],BX
 22813 00003B26 8916[BA05]              	MOV     [LASTPOS],DX
 22814                                  
 22815 00003B2A 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22816 00003B2C 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22817 00003B2E E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22818 00003B30 51                      	PUSH    CX              ; No. of clusters short of first
 22819 00003B31 89C1                    	MOV     CX,AX
 22820 00003B33 E8D412                  	call	ALLOCATE
 22821 00003B36 59                      	POP     CX
 22822 00003B37 72C3                    	JC	short WRTERR
 22823 00003B39 8B16[BA05]              	MOV     DX,[LASTPOS]
 22824 00003B3D 42                      	INC     DX
 22825 00003B3E 49                      	DEC     CX
 22826 00003B3F 7405                    	JZ	short NOSKIP
 22827 00003B41 E81F11                  	call	SKPCLP
 22828 00003B44 72C2                    	JC	short ACC_ERRWJ
 22829                                  NOSKIP:
 22830 00003B46 891E[BC05]              	MOV     [CLUSNUM],BX
 22831 00003B4A 8916[BA05]              	MOV     [LASTPOS],DX
 22832                                  DOWRT:
 22833 00003B4E 833E[D205]00            	CMP     word [BYTCNT1],0
 22834 00003B53 7409                    	JZ	short WRTMID
 22835 00003B55 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22836 00003B59 E89611                  	call	BUFWRT
 22837 00003B5C 72AA                    	JC	short ACC_ERRWJ
 22838                                  WRTMID:
 22839 00003B5E A1[D605]                	MOV     AX,[SECCNT]
 22840 00003B61 09C0                    	OR      AX,AX
 22841                                  	; 20/11/2022
 22842 00003B63 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22843 00003B65 0106[C405]              	ADD     [SECPOS],AX
 22844                                  	; 19/05/2019
 22845                                  	; MSDOS 6.0
 22846 00003B69 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22847 00003B6E E8DD11                  	call	NEXTSEC
 22848                                  	; 16/12/2022
 22849 00003B71 7295                    	JC	short ACC_ERRWJ
 22850                                  	;JC	short SET_ACC_ERRW	;M039
 22851 00003B73 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22852 00003B78 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22853 00003B7C 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22854 00003B80 8B0E[D605]              	MOV     CX,[SECCNT]
 22855                                  WRTLP:
 22856 00003B84 E8F811                  	call	OPTIMIZE
 22857 00003B87 7248                    	JC	short SET_ACC_ERRW
 22858                                  	; 16/12/2022
 22859                                  	;JC	short ACC_ERRWJ
 22860                                  
 22861                                  ;M039
 22862                                  ;       DI = Next physical cluster.
 22863                                  ;       AX = # sectors remaining.
 22864                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22865                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22866                                  ;	     sectors, also termed an "Extent".)
 22867                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22868                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22869                                  ;
 22870                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22871                                  ;	are in Extent; they are being over-written.
 22872                                  
 22873 00003B89 57                      	push    di
 22874 00003B8A 50                      	push    ax
 22875                                  
 22876                                  	; MSDOS 3.3
 22877                                  	; IBMDOS.COM (1987) - Offset 4497h
 22878                                  	;push	dx
 22879                                  	;push	bx
 22880                                  	;mov	al,[es:bp]
 22881                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22882                                  	;mov	bx,cx
 22883                                  	;add	bx,dx	; (bx = Extent end)
 22884                                  
 22885                                  ;	DX = Extent start.
 22886                                  ;	BX = Extent end.
 22887                                  ;	AL = Drive #.
 22888                                  
 22889                                  	;call	SETVISIT
 22890                                  
 22891                                  ;wbufq1:
 22892                                  	;;or	byte [di+5],20h
 22893                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22894                                  	;;cmp	al,[di+4]	
 22895                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22896                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22897                                  	;;cmp	[di+6],dx
 22898                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22899                                  	;jb	short wbufq2
 22900                                  	;;cmp	[di+6],bx
 22901                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22902                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22903                                  
 22904                                  	;; Buffer sector is in the Extent
 22905                                  
 22906                                  	;;mov	word [di+4],20FFh
 22907                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22908                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22909                                  	;				; .buf_flags, AH = 0, reset/clear
 22910                                  	;call	SCANPLACE
 22911                                  ;wbufq2:
 22912                                  	;call	SKIPVISIT
 22913                                  	;jnz	short wbufq1
 22914                                  	;pop	bx
 22915                                  	;pop	dx
 22916                                  
 22917                                          ; MSDOS 6.0
 22918 00003B8B E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22919                                  
 22920                                  ;ASSUME DS:NOTHING
 22921                                  ;M039
 22922                                  	; MSDOS 3.3 & MSDOS 6.0
 22923                                  ;hkn; SS override for DMAADD and ALLOWED
 22924 00003B8E 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22925                                  	;mov	byte [ss:ALLOWED],38h
 22926 00003B93 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22927                                  
 22928                                  ;	put logic from DWRITE in-line here so we can modify it
 22929                                  ;	for DISK FULL conditions.
 22930                                  
 22931                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22932                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22933                                  
 22934                                  	; 16/12/2022
 22935                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22936                                  	;call	DWRITE
 22937                                  
 22938                                  ;DWRITE_OKAY:
 22939                                  
 22940                                  	; 16/12/2022
 22941                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22942                                  	;pop     cx
 22943                                  	;pop     bx
 22944                                  	;push    ss
 22945                                  	;pop     ds
 22946                                  	;jc      short SET_ACC_ERRW
 22947                                  	;jcxz    WRTLAST
 22948                                  	;mov     dl, 0
 22949                                  	;inc     word [LASTPOS]
 22950                                  	;jmp     short WRTLP
 22951                                  
 22952                                  	; 16/12/2022
 22953                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22954                                  DWRITE_LUP:
 22955                                  	; 23/07/2019 - Retro DOS v3.2
 22956                                  
 22957                                  	; MSDOS 6.0
 22958 00003B99 E8E1FB                  	call	DSKWRITE
 22959 00003B9C 7417                    	jz	short DWRITE_OKAY
 22960                                  
 22961                                  ;;	int	3
 22962                                  
 22963 00003B9E 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22964 00003BA0 7423                    	jz	short DWRITE_DISK_FULL
 22965                                  
 22966                                  	; 16/12/2022
 22967                                  
 22968                                  ;;hkn; SS override
 22969 00003BA2 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22970 00003BA8 E801FC                  	call	HARDERRRW
 22971 00003BAB 3C01                    	CMP	AL,1		; Check for retry
 22972 00003BAD 74EA                    	JZ	short DWRITE_LUP
 22973                                  
 22974                                  	; 16/12/2022
 22975                                  	; 23/07/2019
 22976                                  	;POP	CX ; *4*
 22977                                  	;POP	BX ; *5*
 22978                                  	;
 22979                                  	;push	ss
 22980                                  	;pop	ds
 22981                                  	;
 22982                                  
 22983                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22984                                  
 22985                                  	; 16/12/2022
 22986 00003BAF 3C03                    	CMP	AL,3		; Check for FAIL
 22987 00003BB1 F8                      	CLC
 22988 00003BB2 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22989 00003BB4 F9                      	STC
 22990                                  
 22991                                  DWRITE_OKAY:
 22992                                  	; 16/12/2022
 22993                                  	; 23/07/2019
 22994                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22995 00003BB5 59                      	POP	CX ; *4*
 22996 00003BB6 5B                      	POP	BX ; *5*
 22997                                  
 22998                                  ;       CX = # sectors remaining.
 22999                                  ;       BX = Next physical cluster.
 23000                                  
 23001                                  ;hkn; SS override
 23002                                          ;Context DS
 23003                                  	; 16/12/2022
 23004                                  	;push	ss
 23005                                  	;pop	ds
 23006                                  
 23007                                  	; 16/12/2022
 23008 00003BB7 7218                    	jc	short SET_ACC_ERRW
 23009                                  
 23010                                  	; 16/12/2022
 23011 00003BB9 16                      	push	ss
 23012 00003BBA 1F                      	pop	ds
 23013                                  
 23014 00003BBB E317                    	JCXZ    WRTLAST
 23015                                  
 23016                                  	;MOV	DL,0
 23017 00003BBD 30D2                    	xor	dl,dl ; 23/07/2019
 23018 00003BBF FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23019 00003BC3 EBBF                    	JMP     short WRTLP
 23020                                  
 23021                                  	; 23/07/2019 - Retro DOS v3.2
 23022                                  	; 09/08/2018
 23023                                  	; MSDOS 6.0
 23024                                  DWRITE_DISK_FULL:
 23025                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23026                                  	; 16/12/2022
 23027 00003BC5 16                      	push	ss
 23028 00003BC6 1F                      	pop	ds
 23029 00003BC7 59                      	pop	cx		; unjunk stack
 23030 00003BC8 5B                      	pop	bx
 23031 00003BC9 C606[0B06]01            	mov	byte [DISK_FULL],1
 23032                                  	;stc
 23033 00003BCE E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23034                                  
 23035                                  	; 16/12/2022
 23036                                  SET_ACC_ERRW:
 23037 00003BD1 E90EFD                  	jmp	SET_ACC_ERR_DS
 23038                                  
 23039                                  WRTLAST:
 23040 00003BD4 A1[D405]                	MOV     AX,[BYTCNT2]
 23041 00003BD7 09C0                    	OR      AX,AX
 23042 00003BD9 7413                    	JZ	short FINWRT
 23043 00003BDB A3[D205]                	MOV     [BYTCNT1],AX
 23044 00003BDE E86D11                  	call	NEXTSEC
 23045 00003BE1 72EE                    	JC	short SET_ACC_ERRW
 23046 00003BE3 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23047 00003BE9 E80611                  	call	BUFWRT
 23048 00003BEC 72E3                    	JC	short SET_ACC_ERRW
 23049                                  FINWRT:
 23050 00003BEE C43E[9E05]              	LES     DI,[THISSFT]
 23051 00003BF2 A1[DE05]                	MOV     AX,[GROWCNT]
 23052 00003BF5 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23053 00003BF9 09C0                    	OR      AX,AX
 23054 00003BFB 7502                    	JNZ	short UPDATE_size
 23055 00003BFD E30F                    	JCXZ    SAMSIZ
 23056                                  UPDATE_size:
 23057                                  	;add	[es:di+11h],ax
 23058 00003BFF 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23059                                  	;adc	[es:di+13h],cx
 23060 00003C03 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23061                                  
 23062                                  ; Make sure that all other SFT's see this growth also.
 23063                                  
 23064 00003C07 B80100                  	MOV     AX,1
 23065                                  ;if installed
 23066                                  	;Call	JShare + 14 * 4
 23067 00003C0A FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23068                                  ;else
 23069                                  ;	Call    ShSU
 23070                                  ;endif
 23071                                  
 23072                                  SAMSIZ:
 23073 00003C0E E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23074                                  
 23075                                  	; 16/12/2022
 23076                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23077                                  ;SET_ACC_ERRW:
 23078                                  	;jmp	SET_ACC_ERR_DS
 23079                                  
 23080                                  WRTEOF:
 23081 00003C11 89C1                    	MOV     CX,AX
 23082 00003C13 09D1                    	OR      CX,DX
 23083 00003C15 746C                    	JZ	short KILLFIL
 23084 00003C17 83E801                  	SUB     AX,1
 23085 00003C1A 83DA00                  	SBB     DX,0
 23086                                  
 23087                                  	; MSDOS 3.3
 23088                                  	;;div	word [es:bp+2]
 23089                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23090                                  	;;mov	cl,[es:bp+5]
 23091                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23092                                  	;shr	ax,cl
 23093                                  
 23094                                  	; MSDOS 6.0
 23095 00003C1D 53                      	PUSH	BX
 23096                                  	;mov	bx,[es:bp+2]
 23097 00003C1E 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23098 00003C22 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23099 00003C25 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23100 00003C26 89CA                    	MOV	DX,CX			      ;M039
 23101 00003C28 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23102 00003C2C E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23103                                  
 23104 00003C2F 89C1                    	MOV     CX,AX
 23105 00003C31 E80F10                  	call	FNDCLUS
 23106                                  SET_ACC_ERRWJ2:
 23107 00003C34 729B                    	JC	short SET_ACC_ERRW
 23108                                  
 23109 00003C36 E326                    	JCXZ    RELFILE
 23110 00003C38 E8CF11                  	call	ALLOCATE
 23111                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23112                                  	; 16/12/2022
 23113 00003C3B 7303                    	jnc	short UPDATE
 23114 00003C3D E9BCFE                  	JMP	WRTERR
 23115                                  UPDATE:
 23116 00003C40 C43E[9E05]              	LES	DI,[THISSFT]
 23117 00003C44 A1[CE05]                	MOV	AX,[BYTPOS]
 23118                                  	;mov	[es:di+11h],ax
 23119 00003C47 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23120 00003C4B A1[D005]                	MOV	AX,[BYTPOS+2]
 23121                                  	;mov	[es:di+13h],ax
 23122 00003C4E 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23123                                  ;
 23124                                  ; Make sure that all other SFT's see this growth also.
 23125                                  ;
 23126 00003C52 B80200                  	MOV     AX,2
 23127                                  ;if installed
 23128                                  	;Call	JShare + 14 * 4
 23129 00003C55 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23130                                  ;else
 23131                                  ;	Call    ShSU
 23132                                  ;endif
 23133 00003C59 31C9                    	XOR     CX,CX
 23134 00003C5B E939FD                  	jmp	ADDREC
 23135                                  
 23136                                  	; 16/12/2022
 23137                                  ;WRTERRJ: 
 23138                                  	;JMP	WRTERR
 23139                                  
 23140                                  ;;;;;;;;;;;;;;;; 7/18/86
 23141                                  ;;;;;;;;;;;;;;;;
 23142                                  
 23143                                  RELFILE:
 23144                                  	; MSDOS 6.0
 23145 00003C5E 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23146 00003C5F C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23147                                  	;cmp	dx,[es:di+19h]
 23148 00003C63 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23149 00003C67 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23150                                  	;mov	[es:di+19h],0
 23151 00003C69 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23152                                  	;mov	dx,[es:di+0Bh]
 23153 00003C6F 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23154                                  	;mov	[es:di+35h],dx
 23155 00003C73 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23156                                  SKIPRESET:                            		;AN002; BL
 23157 00003C77 07                      	POP     ES                    		;AN002; BL
 23158                                  ;
 23159 00003C78 BAFFFF                  	MOV     DX,0FFFFH
 23160 00003C7B E83A12                  	call	RELBLKS
 23161                                  	; 16/12/2022
 23162                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23163 00003C7E 73C0                    	jnc	short UPDATE
 23164                                  SET_ACC_ERRWJ:
 23165                                  	;JC	short SET_ACC_ERRWJ2
 23166                                  	;JMP	SHORT UPDATE
 23167                                  	; 16/12/2022
 23168 00003C80 E95FFC                  	jmp	SET_ACC_ERR_DS
 23169                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23170                                  	;JC	short SET_ACC_ERRWJ2
 23171                                  	;JMP	SHORT UPDATE
 23172                                  
 23173                                  KILLFIL:
 23174 00003C83 31DB                    	XOR     BX,BX
 23175 00003C85 06                      	PUSH    ES
 23176 00003C86 C43E[9E05]              	LES     DI,[THISSFT]
 23177                                  	;mov	[es:di+19h],bx
 23178 00003C8A 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23179                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23180 00003C8E 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23181                                  	;xchg	bx,[es:di+0Bh]
 23182 00003C92 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23183 00003C96 07                      	POP	ES
 23184                                  
 23185 00003C97 09DB                    	OR	BX,BX
 23186                                  	;JZ	short UPDATEJ
 23187                                  	; 16/12/2022
 23188 00003C99 74A5                    	jz	short UPDATE
 23189                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23190                                  	;jz	short UPDATEJ
 23191                                  
 23192                                  ;; 10/23/86 FastOpen update
 23193 00003C9B 06                      	PUSH	ES              ; since first cluster # is 0
 23194 00003C9C 55                      	PUSH	BP              ; we must delete the old cache entry
 23195 00003C9D 50                      	PUSH	AX
 23196 00003C9E 51                      	PUSH	CX
 23197 00003C9F 52                      	PUSH	DX
 23198 00003CA0 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23199                                  	; 15/12/2022
 23200 00003CA4 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23201                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23202                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23203 00003CA8 89D9                    	MOV	CX,BX                    ; first cluster #
 23204 00003CAA B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23205 00003CAC E840EA                  	call	FastOpen_Update          ; call fastopen
 23206 00003CAF 5A                      	POP	DX
 23207 00003CB0 59                      	POP	CX
 23208 00003CB1 58                      	POP	AX
 23209 00003CB2 5D                      	POP	BP
 23210 00003CB3 07                      	POP	ES
 23211                                  ;; 10/23/86 FastOpen update
 23212                                  
 23213 00003CB4 E8FF11                  	call	RELEASE
 23214 00003CB7 72C7                    	JC	short SET_ACC_ERRWJ
 23215                                  UPDATEJ:
 23216                                  	; 20/11/2022
 23217 00003CB9 EB85                    	JMP	short UPDATE ; 10/08/2018
 23218                                  
 23219                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23220                                  ;----------------------------------------------------------------------------
 23221                                  ;
 23222                                  ; Procedure Name : DskWrtBufPurge
 23223                                  ;
 23224                                  ; Inputs:
 23225                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23226                                  ;	     sectors, also termed an "Extent".)
 23227                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23228                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23229                                  ;
 23230                                  ; Function:
 23231                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23232                                  ;	are in Extent; they are being over-written.
 23233                                  ;
 23234                                  ; Outputs:
 23235                                  ;       (Same as Input.)
 23236                                  ; Uses:
 23237                                  ;       All registers except DS,AX,SI,DI preserved.
 23238                                  ;       SS override for all global variables.
 23239                                  ;----------------------------------------------------------------------------
 23240                                  ;M039: Created
 23241                                  
 23242                                  ;procedure   DskWrtBufPurge,NEAR
 23243                                  ;
 23244                                  ;ASSUME  DS:NOTHING
 23245                                  
 23246                                  ; 04/05/2019 - Retro DOS v4.0
 23247                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23248                                  
 23249                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23250                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23251                                  
 23252                                  DskWrtBufPurge:
 23253                                  	;SaveReg <bx,cx>
 23254 00003CBB 53                      	push	bx
 23255 00003CBC 51                      	push	cx
 23256                                  
 23257 00003CBD 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23258 00003CC2 89DE                    	mov	si,bx
 23259 00003CC4 01D1                    	add	cx,dx
 23260 00003CC6 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23261                                  
 23262                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23263                                  	;;mov	al,[es:bp+0]
 23264                                  	;mov	al,[es:bp+DPB.DRIVE]
 23265                                  	; 15/12/2022
 23266 00003CC9 268A4600                	mov	al,[es:bp]
 23267                                  
 23268                                  ;	BX:DX = Extent start.
 23269                                  ;	SI:CX = Extent end + 1.
 23270                                  ;	AL = Drive #
 23271                                  
 23272 00003CCD 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23273 00003CD3 7431                    	je	short nosc		; -no, jump.
 23274                                  
 23275                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23276                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23277                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23278                                  
 23279 00003CD5 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23280 00003CDA 752A                    	jne	short nosc		; -no, jump.
 23281                                  
 23282 00003CDC 50                      	push    ax
 23283 00003CDD 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23284 00003CE1 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23285                                  
 23286                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23287                                  	;jbe	short sc5		; -yes, jump.
 23288                                  
 23289 00003CE6 39FE                    	cmp	si,di
 23290 00003CE8 7502                    	jne	short sc01
 23291 00003CEA 39C1                    	cmp	cx,ax
 23292                                  sc01: 
 23293 00003CEC 7617                    	jbe	short sc5	
 23294                                  
 23295 00003CEE 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23296 00003CF3 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23297                                  	
 23298                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23299                                  	;jae	short sc5		; -yes, jump.
 23300                                  
 23301 00003CF6 39FB                    	cmp	bx,di
 23302 00003CF8 7502                    	jne	short sc02
 23303 00003CFA 39C2                    	cmp	dx,ax
 23304                                  sc02:
 23305 00003CFC 7307                    	jnb	short sc5
 23306                                  
 23307 00003CFE 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23308                                  sc5:	
 23309 00003D05 58                      	pop     ax
 23310                                  
 23311                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23312                                  ;	written.
 23313                                  
 23314                                  nosc:	
 23315 00003D06 E8C41B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23316                                  
 23317                                  _bufq:	
 23318                                  	;cmpo	al,[di+4]
 23319 00003D09 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23320 00003D0C 7527                    	jne	short bufq5		; -no, jump.
 23321                                  
 23322                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23323                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23324                                  
 23325                                  	;cmp	bx,[di+8]
 23326 00003D0E 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23327 00003D11 7503                    	jne	short bufq04
 23328                                  	;cmp	dx,[di+6]
 23329 00003D13 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23330                                  bufq04:
 23331 00003D16 771D                    	ja	short bufq5
 23332                                  
 23333                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23334                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23335                                  
 23336                                  	;cmp	si,[di+8]
 23337 00003D18 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23338 00003D1B 7503                    	jne	short bufq05
 23339                                  	;cmp	cx,[di+6]
 23340 00003D1D 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23341                                  bufq05:
 23342 00003D20 7613                    	jbe	short bufq5
 23343                                  
 23344                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23345                                  
 23346                                  	;test	byte [di+5],40h
 23347 00003D22 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23348 00003D26 7403                    	jz	short bufq4		; -no, jump.
 23349 00003D28 E8231E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23350                                  bufq4:
 23351                                  	;mov	word [di+4],20FFh
 23352 00003D2B C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23353                                  
 23354 00003D30 E8AC1B                  	call	SCANPLACE
 23355 00003D33 EB02                    	jmp     short bufq6
 23356                                  bufq5: 
 23357 00003D35 8B3D                    	mov     di,[di]
 23358                                  	;mov	di,[di+BUFFINFO.buf_next]
 23359                                  bufq6: 
 23360 00003D37 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23361 00003D3C 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23362                                  	
 23363                                  	;RestoreReg <cx,bx>
 23364 00003D3E 59                      	pop	cx
 23365 00003D3F 5B                      	pop	bx
 23366 00003D40 C3                      	retn
 23367                                  
 23368                                  ;EndProc DskWrtBufPurge
 23369                                  
 23370                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23371                                  ;----------------------------------------------------------------------------
 23372                                  ;
 23373                                  ; Procedure Name : DIV32
 23374                                  ;
 23375                                  ; Inputs:
 23376                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23377                                  ; Function:
 23378                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23379                                  ; Outputs:
 23380                                  ;       CX:AX = quotient , DX= remainder
 23381                                  ; Uses:
 23382                                  ;       All registers except AX,CX,DX preserved.
 23383                                  ;----------------------------------------------------------------------------
 23384                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23385                                  
 23386                                  ; 04/05/2019 - Retro DOS v4.0
 23387                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23388                                  
 23389                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23390                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23391                                  
 23392                                  DIV32:
 23393 00003D41 81FB0002                	cmp	bx,512
 23394 00003D45 7515                    	jne	short div5
 23395                                  
 23396 00003D47 89D1                    	mov	cx,dx
 23397 00003D49 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23398 00003D4B 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23399 00003D4F 88E0                    	mov	al,ah
 23400 00003D51 88CC                    	mov	ah,cl
 23401 00003D53 88E9                    	mov	cl,ch
 23402 00003D55 30ED                    	xor	ch,ch
 23403 00003D57 D1E9                    	shr	cx,1
 23404 00003D59 D1D8                    	rcr	ax,1
 23405 00003D5B C3                      	retn
 23406                                  div5:	
 23407 00003D5C 89C1                    	mov	cx,ax
 23408 00003D5E 89D0                    	mov	ax,dx
 23409 00003D60 31D2                    	xor	dx,dx
 23410 00003D62 F7F3                    	div	bx              ; 0:AX/BX
 23411 00003D64 91                      	xchg	cx,ax
 23412 00003D65 F7F3                    	div	bx              ; DX:AX/BX
 23413 00003D67 C3                      	retn
 23414                                  
 23415                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23416                                  ;----------------------------------------------------------------------------
 23417                                  ;
 23418                                  ; Procedure Name : SHR32
 23419                                  ;
 23420                                  ; Inputs:
 23421                                  ;	DX:AX = 32 bit sector number
 23422                                  ; Function:
 23423                                  ;       Perform 32 bit shift right
 23424                                  ; Outputs:
 23425                                  ;	AX = cluster number
 23426                                  ;	ZF = 1 if no error
 23427                                  ;	   = 0 if error (cluster number > 64k)
 23428                                  ; Uses:
 23429                                  ;       DX,CX
 23430                                  ;---------------------------------------------------------------------------
 23431                                  ; M017	- SHR32 rewritten for better performance
 23432                                  ; M039	- Additional optimization
 23433                                  
 23434                                  ; 04/05/2019 - Retro DOS v4.0
 23435                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23436                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23437                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23438                                  
 23439                                  SHR32:
 23440                                  	;mov	cl,[es:bp+5]
 23441 00003D68 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23442 00003D6C 30ED                    	xor	ch,ch	    ;ZF=1
 23443 00003D6E E306                    	jcxz	norota
 23444                                  
 23445                                  rotashft2:
 23446 00003D70 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23447 00003D72 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23448 00003D74 E2FA                    	loop	rotashft2
 23449                                  norota:
 23450 00003D76 C3                      	retn
 23451                                  
 23452                                  ;============================================================================
 23453                                  ; DIR.ASM, MSDOS 6.0, 1991
 23454                                  ;============================================================================
 23455                                  ; 27/07/2018 - Retro DOS v3.0
 23456                                  ; 19/05/2019 - Retro DOS v4.0 
 23457                                  
 23458                                  ;	TITLE	DIR - Directory and path cracking
 23459                                  ;	NAME	Dir
 23460                                  
 23461                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23462                                  ;---------------------------------------------------------------------------
 23463                                  ;
 23464                                  ; Procedure Name : FINDENTRY,SEARCH
 23465                                  ;
 23466                                  ; Inputs:
 23467                                  ;	[THISDPB] set
 23468                                  ;	[SECCLUSPOS] = 0
 23469                                  ;	[DIRSEC] = Starting directory sector number
 23470                                  ;	[CLUSNUM] = Next cluster of directory
 23471                                  ;	[CLUSFAC] = Sectors/Cluster
 23472                                  ;	[NAME1] = Name to look for
 23473                                  ; Function:
 23474                                  ;	Find file name in disk directory.
 23475                                  ;	"?" matches any character.
 23476                                  ; Outputs:
 23477                                  ;	Carry set if name not found
 23478                                  ;	ELSE
 23479                                  ;	Zero set if attributes match (always except when creating)
 23480                                  ;	AH = Device ID (bit 7 set if not disk)
 23481                                  ;	[THISDPB] = Base of drive parameters
 23482                                  ;	DS = DOSGROUP
 23483                                  ;	ES = DOSGROUP
 23484                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23485                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23486                                  ;	[CURBUF] has directory record with match
 23487                                  ;	[NAME1] has file name
 23488                                  ;	[LASTENT] is entry number of the entry
 23489                                  ; All other registers destroyed.
 23490                                  ;----------------------------------------------------------------------------
 23491                                  
 23492                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23493                                  ;hkn; this point.
 23494                                  
 23495                                  SEARCH:
 23496                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23497                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23498                                  
 23499                                  	; 19/05/2019 - Retro DOS v4.0
 23500                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23501                                  
 23502                                  	; 27/07/2018 - Retro DOS v3.0
 23503                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23504                                  	; 15/03/2018 - Retro DOS v2.0
 23505                                  
 23506                                  	;entry	FindEntry
 23507                                  FINDENTRY:
 23508 00003D77 E82F04                  	call	STARTSRCH
 23509 00003D7A A0[6B05]                	MOV	AL,[ATTRIB]
 23510                                  	;and	al,9Eh
 23511 00003D7D 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23512                                  	;cmp	al,8
 23513 00003D7F 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23514 00003D81 7503                    	JNZ	short NOTVOLSRCH	; No
 23515 00003D83 E86D01                  	CALL	SETROOTSRCH		; Yes force search of root
 23516                                  NOTVOLSRCH:
 23517 00003D86 E8FD00                  	CALL	GETENTRY
 23518 00003D89 7303                    	JNC	short SRCH
 23519 00003D8B E99100                  	JMP	SETESRET
 23520                                  
 23521                                  	;entry	Srch
 23522                                  SRCH:
 23523 00003D8E 1E                      	PUSH	DS
 23524 00003D8F 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23525                                  
 23526                                  ;	(DS:BX) = directory entry address
 23527                                  
 23528 00003D93 8A27                    	mov	ah,[BX]
 23529                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23530 00003D95 08E4                    	OR	AH,AH			; End of directory?
 23531 00003D97 7436                    	JZ	short FREE
 23532                                  
 23533                                  ;hkn; SS override
 23534 00003D99 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23535 00003D9E 742F                    	JZ	short FREE
 23536                                  	;test	byte [bx+0Bh],8
 23537 00003DA0 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23538                                  					; Volume ID file?
 23539 00003DA4 7405                    	JZ	short CHKFNAM 		; NO
 23540                                  
 23541                                  ;hkn; SS override
 23542 00003DA6 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23543                                  CHKFNAM:
 23544                                  ;	Context ES
 23545 00003DAB 8CD6                    	MOV	SI,SS
 23546 00003DAD 8EC6                    	MOV	ES,SI
 23547 00003DAF 89DE                    	MOV	SI,BX
 23548                                  
 23549                                  ;hkn; NAME1 is in DOSDATA
 23550 00003DB1 BF[4B05]                	MOV	DI,NAME1
 23551                                  ;;;;; 7/29/86
 23552                                  
 23553                                  ;hkn; SS override for NAME1
 23554                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 23555                                  	;JNZ	short NO_E5
 23556                                  	;MOV	BYTE [SS:NAME1],05H
 23557                                  	; 22/09/2023
 23558 00003DB4 26803DE5                	cmp	byte [es:di],0E5h
 23559 00003DB8 7504                    	jnz	short NO_E5
 23560 00003DBA 26C60505                	mov	byte [es:di],05h
 23561                                  NO_E5:
 23562                                  ;;;;; 7/29/86
 23563 00003DBE E86100                  	CALL	MetaCompare
 23564 00003DC1 7428                    	JZ	short FOUND
 23565 00003DC3 1F                      	POP	DS
 23566                                  
 23567                                  	;entry	NEXTENT
 23568                                  NEXTENT:
 23569 00003DC4 C42E[8A05]              	LES	BP,[THISDPB]
 23570 00003DC8 E86600                  	CALL	NEXTENTRY
 23571 00003DCB 73C1                    	JNC	short SRCH
 23572 00003DCD EB50                    	JMP	SHORT SETESRET
 23573                                  
 23574                                  FREE:
 23575 00003DCF 1F                      	POP	DS
 23576 00003DD0 8B0E[4803]              	MOV	CX,[LASTENT]
 23577 00003DD4 3B0E[D805]              	CMP	CX,[ENTFREE]
 23578 00003DD8 7304                    	JAE	short TSTALL
 23579 00003DDA 890E[D805]              	MOV	[ENTFREE],CX
 23580                                  TSTALL:
 23581 00003DDE 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23582                                  NEXTENTJ:
 23583 00003DE2 74E0                    	je	short NEXTENT 		; No - continue search
 23584 00003DE4 890E[DA05]              	MOV	[ENTLAST],CX
 23585 00003DE8 F9                      	STC
 23586 00003DE9 EB34                    	JMP	SHORT SETESRET
 23587                                  
 23588                                  FOUND:
 23589                                  ; We have a file with a matching name. We must now consider the attributes:
 23590                                  ; ATTRIB	Action
 23591                                  ; ------	------
 23592                                  ; Volume_ID	Is Volume_ID in test?
 23593                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23594                                  ;		If create then Is ATTRIB equal to test?
 23595                                  
 23596 00003DEB 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23597 00003DED 1F                      	POP	DS
 23598 00003DEE 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23599                                  	;and	ah,9Eh
 23600 00003DF2 80E4DE                  	AND	AH,~attr_ignore
 23601                                  	;lea	si,[si+15]
 23602 00003DF5 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23603                                  					; point to first cluster field
 23604                                  	;test	ch,8
 23605 00003DF8 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23606 00003DFB 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23607                                  	;test	ah,8
 23608 00003DFD F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23609                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23610                                  	; 16/12/2022
 23611 00003E00 74C2                    	jz	short NEXTENT ; 19/05/2019
 23612                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23613                                  	;JZ	short NEXTENTJ
 23614 00003E02 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23615 00003E04 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23616                                  check_one_volume_id:
 23617                                  	;CMP	ah,8
 23618 00003E06 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23619                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23620                                  	; 16/12/2022
 23621 00003E09 74B9                    	je	short NEXTENT ; 19/05/2019
 23622                                  	;JZ	short NEXTENTJ
 23623 00003E0B E8AF03                  	CALL	MatchAttributes
 23624 00003E0E 7407                    	JZ	SHORT RETFF
 23625 00003E10 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23626                                  	; 16/12/2022
 23627                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23628 00003E15 74AD                    	jz	short NEXTENT ; 19/05/2019
 23629                                  RETFF:
 23630 00003E17 C42E[8A05]              	LES	BP,[THISDPB]
 23631                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23632                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23633                                  	; 15/12/2022
 23634 00003E1B 268A6600                	MOV	AH,[ES:BP]
 23635                                  SETESRET:
 23636 00003E1F 16                      	PUSH	SS
 23637 00003E20 07                      	POP	ES
 23638 00003E21 C3                      	retn
 23639                                  
 23640                                  ;----------------------------------------------------------------------------
 23641                                  ;
 23642                                  ; Procedure Name : MetaCompare
 23643                                  ;
 23644                                  ; Inputs:
 23645                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23646                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23647                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23648                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23649                                  ; Function:
 23650                                  ;	Compare FCB style names allowing for ? match to any char
 23651                                  ; Outputs:
 23652                                  ;	Zero if match else NZ
 23653                                  ; Destroys CX,SI,DI all others preserved
 23654                                  ;----------------------------------------------------------------------------
 23655                                  
 23656                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23657                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23658                                  
 23659                                  MetaCompare:
 23660 00003E22 B90B00                  	MOV	CX,11
 23661                                  WILDCRD:
 23662 00003E25 F3A6                    	REPE	CMPSB
 23663 00003E27 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23664                                  CHECK_META:
 23665 00003E29 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23666 00003E2E 74F5                    	JZ	short WILDCRD
 23667                                  MetaRet:
 23668 00003E30 C3                       	retn				; Zero set, Match
 23669                                  
 23670                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23671                                  ;----------------------------------------------------------------------------
 23672                                  ;
 23673                                  ; Procedure Name : NEXTENTRY
 23674                                  ;
 23675                                  ; Inputs:
 23676                                  ;	Same as outputs of GETENTRY, above
 23677                                  ; Function:
 23678                                  ;	Update BX, and [LASTENT] for next directory entry.
 23679                                  ;	Carry set if no more.
 23680                                  ;----------------------------------------------------------------------------
 23681                                  
 23682                                  NEXTENTRY:
 23683                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23684                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23685                                  
 23686                                  	; 19/05/2019 - Retro DOS v4.0
 23687                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23688                                  
 23689                                  	; 27/07/2018 - Retro DOS v3.0
 23690                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23691                                  	; 15/03/2018 - Retro DOS v2.0
 23692                                  
 23693 00003E31 A1[4803]                	MOV	AX,[LASTENT]
 23694 00003E34 3B06[DA05]              	CMP	AX,[ENTLAST]
 23695 00003E38 7422                    	JZ	short NONE
 23696 00003E3A 40                      	INC	AX
 23697                                  	;ADD	BX,32
 23698 00003E3B 8D5F20                  	LEA	BX,[BX+32]
 23699 00003E3E 39D3                    	CMP	BX,DX
 23700                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23701                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23702                                  	; 16/12/2022
 23703 00003E40 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23704 00003E42 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23705 00003E46 FEC3                    	INC	BL
 23706 00003E48 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23707 00003E4C 7215                    	JB	short SAMECLUS
 23708 00003E4E 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23709 00003E52 E8C816                  	call	IsEOF
 23710 00003E55 7305                    	JAE	short NONE
 23711                                  	; 23/07/2019
 23712 00003E57 83FB02                  	CMP	BX,2
 23713                                  	;JB	short NONE
 23714                                  	;JMP	short GETENT
 23715                                  	; 16/12/2022
 23716 00003E5A 732D                    	jnb	short GETENT
 23717                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23718                                  	;JB	short NONE
 23719                                  	;JMP	short GETENT
 23720                                  NONE:
 23721 00003E5C F9                      	STC
 23722 00003E5D C3                      	retn
 23723                                  HAVIT:
 23724 00003E5E A3[4803]                	MOV	[LASTENT],AX
 23725 00003E61 F8                      	CLC
 23726                                  nextentry_retn:
 23727 00003E62 C3                      	retn
 23728                                  SAMECLUS:
 23729 00003E63 881E[7305]              	MOV	[SECCLUSPOS],BL
 23730 00003E67 A3[4803]                	MOV	[LASTENT],AX
 23731 00003E6A 1E                      	PUSH	DS
 23732 00003E6B C53E[E205]              	LDS	DI,[CURBUF]
 23733                                  	; 19/05/2019
 23734                                  	; MSDOS 6.0
 23735                                  	;;mov	dx,[di+8]
 23736                                  	; 23/09/2023
 23737                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23738                                  ;hkn; SS override
 23739                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23740                                  	; 23/09/2023
 23741 00003E6F 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 23742                                  	
 23743                                  	;mov	dx,[di+6]
 23744 00003E72 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23745                                  	;inc	dx ; MSDOS 3.3
 23746                                  	; MSDOS 6.0
 23747                                  	;ADD	DX,1				;AN000; >32mb
 23748                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23749                                  	; 23/09/2023
 23750 00003E75 42                      	inc	dx
 23751 00003E76 7501                    	jnz	short nextexntry_fc
 23752 00003E78 46                      	inc	si
 23753                                  	;inc	word [SS:HIGH_SECTOR]
 23754                                  nextexntry_fc:
 23755                                  	; 23/09/2023
 23756 00003E79 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 23757                                  	; MSDOS 3.3 & MSDOS 6.0
 23758 00003E7E 1F                      	POP	DS
 23759 00003E7F E844F8                  	call	FIRSTCLUSTER
 23760 00003E82 31DB                    	XOR	BX,BX
 23761 00003E84 EB23                    	JMP	short SETENTRY
 23762                                  
 23763                                  ;----------------------------------------------------------------------------
 23764                                  ;
 23765                                  ; Procedure Name : GETENTRY
 23766                                  ;
 23767                                  ; Inputs:
 23768                                  ;	[LASTENT] has directory entry
 23769                                  ;	ES:BP points to drive parameters
 23770                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23771                                  ; Function:
 23772                                  ;	Locates directory entry in preparation for search
 23773                                  ;	GETENT provides entry for passing desired entry in AX
 23774                                  ; Outputs:
 23775                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23776                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23777                                  ;	[LASTENT] = New directory entry number
 23778                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23779                                  ;	Carry set if error (currently user FAILed to I 24)
 23780                                  ;----------------------------------------------------------------------------
 23781                                  
 23782                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23783                                  GETENTRY:
 23784                                  	; 27/07/2018 - Retro DOS v3.0
 23785 00003E86 A1[4803]                	MOV	AX,[LASTENT]
 23786                                  
 23787                                  	;entry	GETENT
 23788                                  GETENT:
 23789 00003E89 A3[4803]                	MOV	[LASTENT],AX
 23790                                  ;
 23791                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23792                                  ; directory.
 23793                                  ;
 23794 00003E8C B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23795 00003E8E D3C0                    	rol	ax,cl			; keep hight order bits
 23796 00003E90 89C2                    	mov	dx,ax
 23797                                  	; 19/05/2019 - Retro DOS v4.0
 23798                                  	;and	ax,0FFE0h
 23799                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23800                                  	;and	ax,~(32-1)		; mask off high order bits
 23801                                  	; 16/12/2022
 23802 00003E92 24E0                    	and	al,0E0h ; ~31
 23803 00003E94 83E21F                  	and	dx,1Fh
 23804                                  	;and	dx,32-1			; mask off low order bits
 23805                                  ;
 23806                                  ; DX:AX contain the byte offset of the required directory entry from the
 23807                                  ; beginning of the directory. Convert this to a sector number. Round the
 23808                                  ; sector size down to a multiple of 32.
 23809                                  ;
 23810                                  	;mov	bx,[es:bp+2]
 23811 00003E97 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23812 00003E9B 80E3E0                  	and	bl,0E0h
 23813                                  	;AND	BL,255-31		; Must be multiple of 32
 23814 00003E9E F7F3                    	DIV	BX
 23815 00003EA0 89D3                    	MOV	BX,DX			; Position within sector
 23816 00003EA2 53                      	PUSH	BX
 23817 00003EA3 E8CCF7                  	call	DIRREAD
 23818 00003EA6 5B                      	POP	BX
 23819                                  	;retc
 23820 00003EA7 72B9                    	jc	short nextentry_retn	
 23821                                  SETENTRY:
 23822 00003EA9 8B16[E205]              	MOV	DX,[CURBUF]
 23823                                  	;add	dx,16 ; MSDOS 3.3
 23824                                  	;add	dx,20 ; MSDOS 6.0 
 23825 00003EAD 83C214                  	ADD	DX,BUFINSIZ
 23826 00003EB0 01D3                    	ADD	BX,DX
 23827                                  	;add	dx,[es:bp+2]
 23828 00003EB2 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23829                                  	; 29/12/2022
 23830                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 23831 00003EB6 F8                      	clc
 23832 00003EB7 C3                      	retn
 23833                                  
 23834                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23835                                  ;----------------------------------------------------------------------------
 23836                                  ;
 23837                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23838                                  ;
 23839                                  ; Inputs:
 23840                                  ;	BX cluster number of start of directory
 23841                                  ;	ES:BP Points to DPB
 23842                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23843                                  ; Function:
 23844                                  ;	Set up a directory search
 23845                                  ; Outputs:
 23846                                  ;	[DIRSTART] = BX
 23847                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23848                                  ;	Carry set if error (currently user FAILed to I 24)
 23849                                  ; destroys AX,DX,BX
 23850                                  ;----------------------------------------------------------------------------
 23851                                  
 23852                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23853                                  SETDIRSRCH:
 23854 00003EB8 09DB                    	OR	BX,BX
 23855 00003EBA 7437                    	JZ	short SETROOTSRCH
 23856 00003EBC 891E[C205]              	MOV	[DIRSTART],BX
 23857                                  	;mov	al,[es:bp+4]
 23858 00003EC0 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23859 00003EC4 FEC0                    	INC	AL
 23860 00003EC6 A2[7705]                	MOV	[CLUSFAC],AL
 23861                                  
 23862                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23863                                  	;SAVE	<SI>
 23864 00003EC9 56                      	push	si
 23865                                  	;test	byte [FastOpenFlg],2
 23866 00003ECA F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23867 00003ECF 7507                    	JNZ	short UNP_OK
 23868                                  
 23869                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23870                                  	;invoke	UNPACK
 23871 00003ED1 E86016                  	call	UNPACK
 23872 00003ED4 7302                    	JNC	short UNP_OK
 23873                                  	;RESTORE <SI>
 23874 00003ED6 5E                      	pop	si
 23875                                  	;return
 23876 00003ED7 C3                      	retn
 23877                                  
 23878                                  UNP_OK:
 23879 00003ED8 893E[BC05]              	MOV	[CLUSNUM],DI
 23880 00003EDC 89DA                    	MOV	DX,BX
 23881 00003EDE 30DB                    	XOR	BL,BL
 23882 00003EE0 881E[7305]              	MOV	[SECCLUSPOS],BL
 23883                                  	;invoke	FIGREC
 23884 00003EE4 E8F60E                  	call	FIGREC
 23885                                  	;RESTORE <SI>
 23886 00003EE7 5E                      	pop	si
 23887                                  	
 23888                                  	; 19/05/2019 - Retro DOS v4.0
 23889                                  
 23890                                  	; MSDOS 6.0
 23891                                  	;PUSH	DX			   ;AN000; >32mb
 23892                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23893                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23894                                  	;POP	DX			   ;AN000; >32mb
 23895                                  
 23896                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23897                                  	;push	dx
 23898                                  	;mov	dx,[HIGH_SECTOR]
 23899                                  	;mov	[DIRSEC+2],dx
 23900                                  	;pop	dx
 23901                                  	;MOV	[DIRSEC],dx
 23902                                  	; 16/12/2022
 23903 00003EE8 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23904 00003EEB A3[C005]                	mov	[DIRSEC+2],AX
 23905 00003EEE 8916[BE05]              	MOV	[DIRSEC],DX
 23906                                  
 23907                                  	; 16/12/2022
 23908                                  	; cf=0 (at the return of FIGREC)
 23909                                  	;CLC
 23910 00003EF2 C3                      	retn
 23911                                  
 23912                                  	;entry	SETROOTSRCH
 23913                                  SETROOTSRCH:
 23914 00003EF3 31C0                    	XOR	AX,AX
 23915 00003EF5 A3[C205]                	MOV	[DIRSTART],AX
 23916                                  	; 22/09/2023
 23917 00003EF8 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 23918 00003EFB A2[7305]                	MOV	[SECCLUSPOS],AL
 23919 00003EFE 48                      	DEC	AX
 23920 00003EFF A3[BC05]                	MOV	[CLUSNUM],AX
 23921                                  	;mov	ax,[es:bp+0Bh]
 23922 00003F02 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23923                                  	; 19/05/2019
 23924                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23925                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23926 00003F06 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23927 00003F0A 29D0                    	SUB	AX,DX
 23928 00003F0C A2[7705]                	MOV	[CLUSFAC],AL
 23929 00003F0F 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23930                                  	; 22/09/2023
 23931                                  	; MSDOS 6.0
 23932                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23933 00003F13 F8                      	CLC
 23934 00003F14 C3                      	retn
 23935                                  
 23936                                  ;============================================================================
 23937                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23938                                  ;============================================================================
 23939                                  ; 27/07/2018 - Retro DOS v3.0
 23940                                  ; 19/05/2019 - Retro DOS v4.0 
 23941                                  
 23942                                  ;	TITLE	DIR2 - Directory and path cracking
 23943                                  ;	NAME	Dir2
 23944                                  
 23945                                  ;Break	<GETPATH -- PARSE A WFP>
 23946                                  ;----------------------------------------------------------------------------
 23947                                  ;
 23948                                  ; Procedure Name : GETPATH
 23949                                  ;
 23950                                  ; Inputs:
 23951                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23952                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23953                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23954                                  ;		( = -1 if current dir not involved, else
 23955                                  ;		 Points to first char after last "/" of current dir part)
 23956                                  ;	[THISCDS] Points to CDS being used
 23957                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23958                                  ;	[NoSetDir] set
 23959                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23960                                  ; Function:
 23961                                  ;	Crack the path
 23962                                  ; Outputs:
 23963                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23964                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23965                                  ;	ID1 field of [THISCDS] updated appropriately
 23966                                  ;	[ATTRIB] = [SATTRIB]
 23967                                  ;	ES:BP Points to DPB
 23968                                  ;	Carry set if bad path
 23969                                  ;	   SI Points to path element causing failure
 23970                                  ;	   Zero set
 23971                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23972                                  ;	      start a search on the last directory
 23973                                  ;	      CL is zero if there is a bad name in the path
 23974                                  ;	      CL is non-zero if the name was simply not found
 23975                                  ;		 [ENTFREE] may have free spot in directory
 23976                                  ;		 [NAME1] is the name.
 23977                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23978                                  ;	   Zero reset
 23979                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23980                                  ;		or path too long or malformed path
 23981                                  ;	ELSE
 23982                                  ;	   [CurBuf] = -1 if root directory
 23983                                  ;	   [CURBUF] contains directory record with match
 23984                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23985                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23986                                  ;	   AH = device ID
 23987                                  ;	      bit 7 of AH set if device SI and BX
 23988                                  ;	      will point DOSGROUP relative The firclus
 23989                                  ;	      field of the device entry contains the device pointer
 23990                                  ;	   [NAME1] Has name looked for
 23991                                  ;	   If last element is a directory zero is set and:
 23992                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23993                                  ;	      are set up to start a search on it.
 23994                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23995                                  ;	      like that for a file (except for zero flag)
 23996                                  ;	   If last element is a file zero is reset
 23997                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23998                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23999                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24000                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24001                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24002                                  ; DS preserved, Others destroyed
 24003                                  ;---------------------------------------------------------------------------
 24004                                  
 24005                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24006                                  ;hkn; DS already set up at this point.
 24007                                  
 24008                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24009                                  GETPATH:
 24010                                  	;mov	word [CREATING],0E500h
 24011 00003F15 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24012                                  
 24013                                  ; Same as GetPath only CREATING and DELALL already set
 24014                                  
 24015                                  	;entry	GetPathNoSet
 24016                                  GetPathNoSet:
 24017                                  	;mov	byte [EXTERR_LOCUS],2	
 24018 00003F1B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24019 00003F20 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24020                                  
 24021                                  ; See if the input indicates a device that has already been detected. If so,
 24022                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24023                                  
 24024 00003F26 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24025                                  	;cmp	word [DI+1],5C3Ah
 24026                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24027 00003F2A 817D013A5C              	cmp	word [DI+1],':\'
 24028 00003F2F 7438                    	JZ	short CrackIt
 24029                                  
 24030                                  ; Let ChkDev find it in the device list
 24031                                  
 24032 00003F31 83C703                  	ADD	DI,3
 24033                                  	; 18/08/2018
 24034                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24035                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24036                                  	; 16/12/2022
 24037                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24038 00003F34 E8AB00                  	CALL	CHKDEV
 24039 00003F37 722E                    	JC	short InternalError
 24040                                  
 24041                                  Build_devJ:
 24042 00003F39 A0[6D05]                	MOV	AL,[SATTRIB]
 24043 00003F3C A2[6B05]                	MOV	[ATTRIB],AL
 24044                                  	;mov	byte [EXTERR_LOCUS],1
 24045 00003F3F C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24046                                  					; "finding" a char device
 24047                                  					; set LOCUS to Unknown. This makes
 24048                                  					; certain idiotic problems reported
 24049                                  					; by a certain 3 letter OEM go away.
 24050                                  
 24051                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24052                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24053                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24054                                  ; wfp into the share set.
 24055                                  ;
 24056                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24057                                  ; non-space seen +1.  This position is kept in DX.
 24058                                  
 24059                                  ;hkn; SS is DOSDATA
 24060 00003F44 16                      	push	ss
 24061 00003F45 07                      	pop	es
 24062                                  
 24063                                  ;hkn; NAME1 is in DOSDATA
 24064 00003F46 BE[4B05]                	mov	si,NAME1
 24065 00003F49 8B3E[B205]              	mov	di,[WFP_START]
 24066 00003F4D 89FA                    	mov	dx,di
 24067 00003F4F B90800                  	mov	cx,8			; 8 chars in device name
 24068                                  MoveLoop:
 24069 00003F52 AC                      	lodsb
 24070 00003F53 AA                      	stosb
 24071 00003F54 3C20                    	cmp	al," "
 24072 00003F56 7402                    	jz	short NoSave
 24073                                  
 24074 00003F58 89FA                    	mov	dx,di
 24075                                  NoSave:
 24076 00003F5A E2F6                    	loop	MoveLoop
 24077                                  
 24078                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24079                                  ; at this point.
 24080                                  
 24081 00003F5C 89D7                    	mov	di,dx
 24082 00003F5E C60500                  	mov	byte [di],0		; end of string
 24083 00003F61 E8C502                  	call	Build_device_ent	; Clears carry sets zero
 24084 00003F64 FEC0                    	INC	AL			; reset zero
 24085 00003F66 C3                      	retn
 24086                                  
 24087                                  InternalError:
 24088                                  InternalError_loop:
 24089 00003F67 EBFE                    	JMP	short InternalError_loop	; freeze
 24090                                  
 24091                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24092                                  
 24093                                  CrackIt:
 24094 00003F69 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24095 00003F6D 83FEFF                  	CMP	SI,-1			; valid?
 24096 00003F70 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24097 00003F72 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24098                                  LOOK_SING:
 24099                                  	;mov	byte [ATTRIB],16h
 24100 00003F75 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24101                                  					; Attributes to search through Dirs
 24102 00003F7A C43E[A205]              	LES	DI,[THISCDS]
 24103 00003F7E B8FFFF                  	MOV	AX,-1
 24104                                  	;mov	bx,[es:di+73]
 24105 00003F81 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24106 00003F85 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24107                                  
 24108                                  ; AX = -1
 24109                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24110                                  ;      has been uncertainly changed.
 24111                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24112                                  ;      may be -1 if no current directory part has been used.
 24113                                  
 24114 00003F89 39C6                    	CMP	SI,AX			; if Current directory is not part
 24115 00003F8B 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24116 00003F8D 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24117                                  
 24118                                  ; DOS 3.3  6/25/86
 24119 00003F8F 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24120                                  	;test	byte [FastOpenFlg],1
 24121 00003F91 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24122 00003F96 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24123 00003F98 06                      	PUSH	ES			; save registers
 24124 00003F99 57                      	PUSH	DI
 24125 00003F9A 51                      	PUSH	CX
 24126 00003F9B FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24127 00003F9E 56                      	PUSH	SI
 24128 00003F9F 53                      	PUSH	BX
 24129                                  
 24130 00003FA0 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24131 00003FA4 8B36[B205]              	MOV	SI,[WFP_START]
 24132                                  
 24133                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24134 00003FA8 BB[300D]                	MOV	BX,FastOpenTable
 24135 00003FAB BF[460D]                	MOV	DI,Dir_Info_Buff
 24136 00003FAE B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24137                                  	;mov	al,1
 24138 00003FB1 B001                    	MOV	AL,FONC_Look_up
 24139 00003FB3 1E                      	PUSH	DS
 24140 00003FB4 07                      	POP	ES
 24141                                  	;call	far [BX+2]
 24142 00003FB5 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24143 00003FB8 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24144                                  					; Go to Got_Srch_cluster
 24145                                  	; 29/12/2022
 24146                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24147                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24148                                  	;stc
 24149                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24150                                  
 24151 00003FBA 803C01                  	cmp	byte [si],1
 24152                                  GO_Chk_end1:	; 29/12/2022
 24153 00003FBD F5                      	cmc 
 24154                                  	; [si] = 0 -> cf = 0
 24155                                  	; [si] > 0 -> cf = 1
 24156                                  
 24157                                  ;GO_Chk_end1:
 24158                                  	; 29/12/2022
 24159                                  	;clc
 24160                                  
 24161                                  GO_Chk_end:				; restore registers
 24162 00003FBE 5B                      	POP	BX
 24163 00003FBF 5E                      	POP	SI
 24164 00003FC0 8F44FF                  	POP	word [SI-1]
 24165 00003FC3 59                      	POP	CX
 24166 00003FC4 5F                      	POP	DI
 24167 00003FC5 07                      	POP	ES
 24168 00003FC6 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24169                                  
 24170                                  ; DOS 3.3  6/25/86
 24171                                  ;
 24172                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24173                                  ; of path and go crack from root.
 24174                                  
 24175                                  NO_CURR_D:
 24176 00003FC8 8B36[B205]              	MOV	SI,[WFP_START]
 24177 00003FCC 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24178 00003FCF C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24179 00003FD3 EB3B                    	JMP	short ROOTPATH
 24180                                  
 24181                                  ; We are able to crack from the current directory part. Go set up for search
 24182                                  ; of specified cluster.
 24183                                  
 24184                                  GOT_SEARCH_CLUSTER:
 24185 00003FD5 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24186 00003FD9 E8DCFE                  	call	SETDIRSRCH
 24187                                  	;JC	short SETFERR
 24188                                  	;JMP	short FINDPATH
 24189                                  	; 16/12/2022
 24190 00003FDC 7343                    	jnc	short FINDPATH ; 17/08/2018
 24191                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24192                                  	;JC	short SETFERR
 24193                                  	;JMP	short FINDPATH
 24194                                  SETFERR:
 24195 00003FDE 30C9                    	XOR	CL,CL			; set zero
 24196 00003FE0 F9                      	STC
 24197 00003FE1 C3                      	retn
 24198                                  
 24199                                  ;---------------------------------------------------------------------------
 24200                                  ;
 24201                                  ; Procedure Name : ChkDev
 24202                                  ;
 24203                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24204                                  ;   device.
 24205                                  ; Blasts CX,SI,DI,AX,BX
 24206                                  ;---------------------------------------------------------------------------
 24207                                  
 24208                                  CHKDEV:
 24209 00003FE2 89FE                    	MOV	SI,DI
 24210 00003FE4 8CD7                    	MOV	DI,SS
 24211 00003FE6 8EC7                    	MOV	ES,DI
 24212                                  
 24213 00003FE8 BF[4B05]                	MOV	DI,NAME1
 24214 00003FEB B90900                  	MOV	CX,9
 24215                                  TESTLOOP:
 24216 00003FEE E84A10                  	call	GETLET
 24217                                  
 24218 00003FF1 3C2E                    	CMP	AL,'.'
 24219 00003FF3 740E                    	JZ	short TESTDEVICE
 24220 00003FF5 E89910                  	call	PATHCHRCMP
 24221 00003FF8 7407                    	JZ	short NOTDEV
 24222 00003FFA 08C0                    	OR	AL,AL
 24223 00003FFC 7405                    	JZ	short TESTDEVICE
 24224                                  
 24225 00003FFE AA                      	STOSB
 24226 00003FFF E2ED                    	LOOP	TESTLOOP
 24227                                  NOTDEV:
 24228 00004001 F9                      	STC
 24229 00004002 C3                      	retn
 24230                                  
 24231                                  TESTDEVICE:
 24232                                  	;ADD	CX,2
 24233                                  	; 23/09/2023
 24234 00004003 41                      	inc	cx
 24235 00004004 41                      	inc	cx
 24236 00004005 B020                    	MOV	AL,' '
 24237 00004007 F3AA                    	REP	STOSB
 24238 00004009 8CD0                    	MOV	AX,SS
 24239 0000400B 8ED8                    	MOV	DS,AX
 24240                                  	;call	DEVNAME
 24241                                  	;retn
 24242                                  	; 18/12/2022
 24243 0000400D E9BA01                  	jmp	DEVNAME
 24244                                  
 24245                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24246                                  ;----------------------------------------------------------------------------
 24247                                  ;
 24248                                  ; Procedure Name : ROOTPATH,FINDPATH
 24249                                  ;
 24250                                  ; Inputs:
 24251                                  ;	Same as FINDPATH but,
 24252                                  ;	SI Points to asciz string of path which is assumed to start at
 24253                                  ;		the root (no leading '/').
 24254                                  ; Function:
 24255                                  ;	Search from root for path
 24256                                  ; Outputs:
 24257                                  ;	Same as FINDPATH but:
 24258                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24259                                  ;	[NoSetDir] is ignored.
 24260                                  ;----------------------------------------------------------------------------
 24261                                  
 24262                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24263                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24264                                  
 24265                                  ROOTPATH:
 24266 00004010 E8E0FE                  	call	SETROOTSRCH
 24267 00004013 803C00                  	CMP	BYTE [SI],0
 24268 00004016 7509                    	JNZ	short FINDPATH
 24269                                  
 24270                                  ; Root dir specified
 24271 00004018 A0[6D05]                	MOV	AL,[SATTRIB]
 24272 0000401B A2[6B05]                	MOV	[ATTRIB],AL
 24273 0000401E 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24274                                  					; (dir), clears carry.
 24275 00004020 C3                      	retn
 24276                                  
 24277                                  ; Inputs:
 24278                                  ;	[ATTRIB] Set to get through directories
 24279                                  ;	[SATTRIB] Set to find last element
 24280                                  ;	ES:BP Points to DPB
 24281                                  ;	SI Points to asciz string of path (no leading '/').
 24282                                  ;	[SECCLUSPOS] = 0
 24283                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24284                                  ;	[CLUSNUM] = Cluster # of next cluster
 24285                                  ;	[CLUSFAC] = Sectors per cluster
 24286                                  ;	[NoSetDir] set
 24287                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24288                                  ;		( = -1 if current dir not involved, else
 24289                                  ;		 Points to first char after last "/" of current dir part)
 24290                                  ;	[THISCDS] Points to CDS being used
 24291                                  ;	[CREATING] and [DELALL] set
 24292                                  ; Function:
 24293                                  ;	Parse path name
 24294                                  ; Outputs:
 24295                                  ;	ID1 field of [THISCDS] updated appropriately
 24296                                  ;	[ATTRIB] = [SATTRIB]
 24297                                  ;	ES:BP Points to DPB
 24298                                  ;	[THISDPB] = ES:BP
 24299                                  ;	Carry set if bad path
 24300                                  ;	   SI Points to path element causing failure
 24301                                  ;	   Zero set
 24302                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24303                                  ;	      start a search on the last directory
 24304                                  ;	      CL is zero if there is a bad name in the path
 24305                                  ;	      CL is non-zero if the name was simply not found
 24306                                  ;		 [ENTFREE] may have free spot in directory
 24307                                  ;		 [NAME1] is the name.
 24308                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24309                                  ;	   Zero reset
 24310                                  ;	      File in middle of path or bad name in path
 24311                                  ;		or path too long or malformed path
 24312                                  ;	ELSE
 24313                                  ;	   [CURBUF] contains directory record with match
 24314                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24315                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24316                                  ;	   [NAME1] Has name looked for
 24317                                  ;	   AH = device ID
 24318                                  ;	      bit 7 of AH set if device SI and BX
 24319                                  ;	      will point DOSGROUP relative The firclus
 24320                                  ;	      field of the device entry contains the device pointer
 24321                                  ;	   If last element is a directory zero is set and:
 24322                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24323                                  ;	      are set up to start a search on it,
 24324                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24325                                  ;	      like that for a file (except for zero flag)
 24326                                  ;	   If last element is a file zero is reset
 24327                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24328                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24329                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24330                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24331                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24332                                  ; Destroys all other registers
 24333                                  
 24334                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24335                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24336                                  
 24337                                      	;entry	FINDPATH
 24338                                  FINDPATH:
 24339 00004021 06                      	PUSH	ES			; Save ES:BP
 24340 00004022 56                      	PUSH	SI
 24341 00004023 89F7                    	MOV	DI,SI
 24342 00004025 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24343 00004029 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24344 0000402E 740E                    	JZ	short NOIDS		; No current dir part
 24345 00004030 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24346 00004034 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24347 00004036 C43E[A205]              	LES	DI,[THISCDS]
 24348                                  	;mov	[es:di+73],cx
 24349 0000403A 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24350                                  NOIDS:
 24351                                  
 24352                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24353                                  ; character in the string. CX,DI may be destroyed.
 24354                                  ;
 24355                                  ;	invoke	NAMETRANS
 24356                                  ;	MOV	CL,AL
 24357                                  ;
 24358                                  ; The above is the slow method. The name has *already* been munged by
 24359                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24360                                  ; the name until ., \ or 0 is hit.
 24361                                  
 24362 0000403E 8CD0                    	MOV	AX,SS
 24363 00004040 8EC0                    	MOV	ES,AX
 24364                                  
 24365                                  ;hkn; Name1 is in DOSDATA
 24366 00004042 BF[4B05]                	MOV	DI,NAME1
 24367 00004045 B82020                  	MOV	AX,'  ' ; 2020h
 24368 00004048 AA                      	STOSB
 24369 00004049 AB                      	STOSW
 24370 0000404A AB                      	STOSW
 24371 0000404B AB                      	STOSW
 24372 0000404C AB                      	STOSW
 24373 0000404D AB                      	STOSW
 24374                                  
 24375                                  ;hkn; Name1 is in DOSDATA
 24376 0000404E BF[4B05]                	MOV	DI,NAME1
 24377 00004051 30E4                    	XOR	AH,AH			; bits for CL
 24378                                  GetNam:
 24379                                  	; 19/05/2019 - Retro DOS v4.0
 24380                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24381                                  
 24382                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24383                                  	; 16/12/2022
 24384                                  	;inc	cl ; not required !	
 24385                                  	
 24386 00004053 AC                      	LODSB
 24387 00004054 3C2E                    	CMP	AL,'.'	; 2Eh
 24388 00004056 7412                    	JZ	short _SetExt
 24389 00004058 08C0                    	OR	AL,AL
 24390 0000405A 7424                    	JZ	short _GetDone
 24391 0000405C 3C5C                    	CMP	AL,'\'	; 5Ch
 24392 0000405E 7420                    	JZ	short _GetDone
 24393 00004060 3C3F                    	CMP	AL,'?'	; 3Fh
 24394 00004062 7503                    	JNZ	short StoNam
 24395 00004064 80CC01                  	OR	AH,1
 24396                                  StoNam: 
 24397 00004067 AA                      	STOSB
 24398 00004068 EBE9                    	JMP	short GetNam
 24399                                  _SetExt:
 24400 0000406A BF[5305]                	MOV	DI,NAME1+8
 24401                                  GetExt:
 24402 0000406D AC                      	LODSB
 24403 0000406E 08C0                    	OR	AL,AL
 24404 00004070 740E                    	JZ	short _GetDone
 24405 00004072 3C5C                    	CMP	AL,'\'
 24406 00004074 740A                    	JZ	short _GetDone
 24407 00004076 3C3F                    	CMP	AL,'?'
 24408 00004078 7503                    	JNZ	short StoExt
 24409 0000407A 80CC01                  	OR	AH,1
 24410                                  StoExt: 
 24411 0000407D AA                      	STOSB
 24412 0000407E EBED                    	JMP	short GetExt
 24413                                  _GetDone:
 24414 00004080 4E                      	DEC	SI
 24415 00004081 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24416 00004083 80C980                  	OR	CL,80H
 24417 00004086 5F                      	POP	DI			; Start of this element
 24418 00004087 07                      	POP	ES			; Restore ES:BP
 24419 00004088 39FE                    	CMP	SI,DI
 24420 0000408A 7503                    	JNZ	short check_device
 24421 0000408C E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24422                                  check_device:
 24423 0000408F 56                      	PUSH	SI			; Start of next element
 24424                                  	;MOV	AL,[SI]
 24425                                  	;OR	AL,AL
 24426                                  	; 23/09/2023
 24427 00004090 803C00                  	cmp	byte [si],0
 24428 00004093 7508                    	JNZ	short NOT_LAST
 24429                                  
 24430                                  ; for last element of the path switch to the correct search attributes
 24431                                  
 24432 00004095 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24433 00004099 883E[6B05]              	MOV	[ATTRIB],BH
 24434                                  
 24435                                  NOT_LAST:
 24436                                  
 24437                                  ; check name1 to see if we have a device...
 24438                                  
 24439 0000409D 06                      	PUSH	ES			; Save ES:BP
 24440                                  
 24441                                  ;hkn; SS is DOSDATA
 24442                                  	;context ES
 24443 0000409E 16                      	push	ss
 24444 0000409F 07                      	pop	es
 24445 000040A0 E82701                  	call	DEVNAME 		; blast BX
 24446 000040A3 07                      	POP	ES			; Restore ES:BP
 24447 000040A4 720B                    	JC	short FindFile		; Not a device
 24448 000040A6 08C0                    	OR	AL,AL			; Test next char again
 24449 000040A8 7403                    	JZ	short GO_BDEV
 24450 000040AA E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24451                                  
 24452                                  GO_BDEV:
 24453 000040AD 5E                      	POP	SI			; Points to NUL at end of path
 24454 000040AE E988FE                  	JMP	Build_devJ
 24455                                  
 24456                                  FindFile:
 24457                                  ;;;; 7/28/86
 24458 000040B1 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24459 000040B6 7505                    	JNZ	short NOE5		; no
 24460 000040B8 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24461                                  NOE5:
 24462                                  ;;;; 7/28/86
 24463 000040BD 57                      	PUSH	DI			; Start of this element
 24464 000040BE 06                      	PUSH	ES			; Save ES:BP
 24465 000040BF 51                      	PUSH	CX			; CL return from NameTrans
 24466                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24467                                  
 24468 000040C0 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24469 000040C3 7303                    	JNC	short DIR_FOUND		; found dir entry
 24470                                  
 24471                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24472 000040C5 E8AFFC                  	call	FINDENTRY
 24473                                  DIR_FOUND:
 24474 000040C8 59                      	POP	CX
 24475 000040C9 07                      	POP	ES
 24476 000040CA 5F                      	POP	DI
 24477 000040CB 7303                    	JNC	short LOAD_BUF
 24478 000040CD E9CA00                  	JMP	BADPATHPOP
 24479                                  
 24480                                  LOAD_BUF:
 24481 000040D0 C53E[E205]              	LDS	DI,[CURBUF]
 24482                                  	;test	byte [bx+0Bh],10h
 24483 000040D4 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24484 000040D8 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24485 000040DA E99800                  	JMP	FILEINPATH		; Error or end of path
 24486                                  
 24487                                  ; if we are not setting the directory, then check for end of string
 24488                                  
 24489                                  GO_NEXT:
 24490                                  ;hkn; SS override
 24491 000040DD 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24492 000040E3 7423                    	JZ	short SetDir
 24493 000040E5 89FA                    	MOV	DX,DI			; Save pointer to entry
 24494 000040E7 8CD9                    	MOV	CX,DS
 24495                                  
 24496                                  ;hkn; SS is DOSDATA
 24497                                  	;context DS
 24498 000040E9 16                      	push	ss
 24499 000040EA 1F                      	pop	ds
 24500 000040EB 5F                      	POP	DI			; Start of next element
 24501                                  	; 19/05/2019 - Retro DOS v4.0
 24502                                  	; MSDOS 6.0
 24503 000040EC F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24504 000040F1 740B                    	JZ	short _nofast			; the FastOpen
 24505 000040F3 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24506 000040F8 7404                    	JZ	short _nofast			; no
 24507 000040FA 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24508                                  _nofast:
 24509 000040FE 803D00                  	CMP	BYTE [DI],0
 24510                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24511                                  	;;JMP	_SETRET  ; retn		; Got it
 24512                                  	;retn	; 05/09/2018
 24513                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24514                                  	;jmp	_SETRET
 24515                                  	; 16/12/2022
 24516 00004101 7421                    	jz	short _SETRET
 24517                                  
 24518                                  NEXT_ONE:
 24519 00004103 57                      	PUSH	DI			; Put start of next element back on stack
 24520 00004104 89D7                    	MOV	DI,DX
 24521 00004106 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24522                                  SetDir:
 24523 00004108 8B14                    	MOV	DX,[SI] 		; Dir_first
 24524                                  
 24525                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24526 0000410A 1E                      	PUSH	DS		      ; save [curbuf+2]
 24527                                  ;hkn; SS is DOSDATA
 24528 0000410B 16                      	push	ss
 24529 0000410C 1F                      	pop	ds		      ; set DS Dosgroup
 24530                                  	;test	byte [FastOpenFlg],2
 24531 0000410D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24532 00004112 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24533 00004114 89D3                    	MOV	BX,DX		      ; not found
 24534 00004116 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24535 0000411A 50                      	PUSH	AX		      ; save device id (AH)
 24536 0000411B E89AFD                  	call	SETDIRSRCH
 24537 0000411E 58                      	POP	AX		      ; restore device id (AH)
 24538 0000411F 83C402                  	ADD	SP,2		      ; pop ds in stack
 24539 00004122 EB37                    	JMP	short FAST_OPEN_SKIP
 24540                                  
 24541                                  	; 16/12/2022
 24542                                  _SETRET:
 24543 00004124 C3                      	retn
 24544                                  
 24545                                  DO_NORMAL:
 24546 00004125 1F                      	POP	DS			; DS = [curbuf + 2]
 24547                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24548                                  
 24549 00004126 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24550 00004128 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24551 0000412A 53                      	PUSH	BX
 24552 0000412B 50                      	PUSH	AX
 24553 0000412C 56                      	PUSH	SI
 24554 0000412D 51                      	PUSH	CX
 24555                                  	;push	word [di+6]
 24556 0000412E FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24557                                  	; 19/05/2019
 24558                                  	; MSDOS 6.0
 24559                                  	;push	word [di+8]
 24560 00004131 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24561 00004134 89D3                    	MOV	BX,DX
 24562                                  
 24563                                  ;hkn; SS is DOSDATA
 24564                                  	;context DS
 24565 00004136 16                      	push	ss
 24566 00004137 1F                      	pop	ds
 24567                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24568 00004138 E87DFD                  	call	SETDIRSRCH		; the entry sector buffer
 24569                                  	; 19/05/2019
 24570                                  	; MSDOS 6.0
 24571 0000413B 8F06[0706]              	POP	word [HIGH_SECTOR]
 24572 0000413F 5A                      	POP	DX
 24573 00004140 7203                    	JC	short SKIP_GETB
 24574                                  	; 22/09/2023
 24575                                  	;;mov	byte [ALLOWED],18h
 24576                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 24577                                  	;XOR	AL,AL ; *
 24578                                  	;;invoke GETBUFFR		; Get the entry buffer back
 24579                                  	;call	GETBUFFR
 24580 00004142 E8FA17                  	call	GETBUFFER ; * ; pre-read
 24581                                  SKIP_GETB:
 24582 00004145 59                      	POP	CX
 24583 00004146 5E                      	POP	SI
 24584 00004147 58                      	POP	AX
 24585 00004148 5B                      	POP	BX
 24586 00004149 7305                    	JNC	short SET_THE_BUF
 24587 0000414B 5F                      	POP	DI			; Start of next element
 24588 0000414C 89FE                    	MOV	SI,DI			; Point with SI
 24589 0000414E EB21                    	JMP	SHORT _BADPATH
 24590                                  
 24591                                  SET_THE_BUF:
 24592 00004150 E878F5                  	call	SET_BUF_AS_DIR
 24593 00004153 8B3E[E205]              	MOV	DI,[CURBUF]
 24594 00004157 01FE                    	ADD	SI,DI			; Get the offsets back
 24595 00004159 01FB                    	ADD	BX,DI
 24596                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24597                                  FAST_OPEN_SKIP:
 24598 0000415B 5F                      	POP	DI			; Start of next element
 24599 0000415C E89D02                  	CALL	InsertPath		; insert dir entry info
 24600                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24601 0000415F 8A05                    	MOV	AL,[DI]
 24602 00004161 08C0                    	OR	AL,AL
 24603 00004163 74BF                    	JZ	short _SETRET		; At end
 24604 00004165 47                      	INC	DI			; Skip over "/"
 24605 00004166 89FE                    	MOV	SI,DI			; Point with SI
 24606 00004168 E8260F                  	call	PATHCHRCMP
 24607 0000416B 7503                    	JNZ	short find_bad_name	; oops
 24608 0000416D E9B1FE                  	JMP	FINDPATH		; Next element
 24609                                  
 24610                                  find_bad_name:
 24611 00004170 4E                      	DEC	SI			; Undo above INC to get failure point
 24612                                  _BADPATH:
 24613 00004171 30C9                    	XOR	CL,CL			; Set zero
 24614 00004173 EB2C                    	JMP	SHORT BADPRET
 24615                                  
 24616                                  FILEINPATH:
 24617 00004175 5F                      	POP	DI			; Start of next element
 24618                                  
 24619                                  ;hkn; SS is DOSDATA
 24620                                  	;context DS			; Got to from one place with DS gone
 24621 00004176 16                      	push	ss
 24622 00004177 1F                      	pop	ds
 24623                                  
 24624                                  ; DOS 3.3 FastOpen
 24625                                  	;test	byte [FastOpenFlg],1
 24626 00004178 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24627 0000417D 740B                    	JZ	short NO_FAST		; device info to fastopen
 24628                                  	;test	byte [FastOpenFlg],2
 24629 0000417F F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24630 00004184 7404                    	JZ	short NO_FAST
 24631 00004186 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24632                                  					 ; success
 24633                                  NO_FAST:
 24634                                  ; DOS 3.3 FastOpen
 24635 0000418A 8A05                    	MOV	AL,[DI]
 24636 0000418C 08C0                    	OR	AL,AL
 24637 0000418E 7404                    	JZ	short INCRET
 24638 00004190 89FE                    	MOV	SI,DI			; Path too long
 24639 00004192 EB0D                    	JMP	SHORT BADPRET
 24640                                  
 24641                                  INCRET:
 24642                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24643                                  
 24644 00004194 E86502                  	CALL   InsertPath		; insert dir entry info
 24645                                  
 24646                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24647 00004197 FEC0                    	INC	AL			; Reset zero
 24648                                  	; 16/12/2022	
 24649                                  ;_SETRET:
 24650 00004199 C3                      	retn
 24651                                  
 24652                                  BADPATHPOP:
 24653 0000419A 5E                      	POP	SI			; Start of next element
 24654 0000419B 8A04                    	MOV	AL,[SI]
 24655 0000419D 89FE                    	MOV	SI,DI			; Start of bad element
 24656 0000419F 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24657                                  BADPRET:
 24658 000041A1 A0[6D05]                	MOV	AL,[SATTRIB]
 24659 000041A4 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24660 000041A7 F9                      	STC
 24661 000041A8 C3                      	retn
 24662                                  
 24663                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24664                                  ;---------------------------------------------------------------------------
 24665                                  ;
 24666                                  ; Procedure Name : STARTSRCH
 24667                                  ;
 24668                                  ; Inputs:
 24669                                  ;	[THISDPB] Set
 24670                                  ; Function:
 24671                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24672                                  ; Outputs:
 24673                                  ;	ES:BP = Drive parameters
 24674                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24675                                  ; Destroys ES,BP,AX
 24676                                  ;--------------------------------------------------------------------------
 24677                                  
 24678                                  STARTSRCH:
 24679 000041A9 C42E[8A05]              	LES	BP,[THISDPB]
 24680 000041AD 31C0                    	XOR	AX,AX
 24681 000041AF A3[4803]                	MOV	[LASTENT],AX
 24682 000041B2 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24683 000041B5 48                      	DEC	AX
 24684 000041B6 A3[D805]                	MOV	[ENTFREE],AX
 24685 000041B9 A3[DA05]                	MOV	[ENTLAST],AX
 24686 000041BC C3                      	retn
 24687                                  
 24688                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24689                                  ;----------------------------------------------------------------------------
 24690                                  ; Procedure Name : MatchAttributes
 24691                                  ;
 24692                                  ; Input:    [Attrib] = attribute to search for
 24693                                  ;	    CH = found attribute
 24694                                  ; Output:   JZ <match>
 24695                                  ;	    JNZ <nomatch>
 24696                                  ; Registers modified: noneski
 24697                                  ;----------------------------------------------------------------------------
 24698                                  
 24699                                  MatchAttributes:
 24700 000041BD 50                      	PUSH	AX
 24701                                  
 24702                                  ;hkn; SS override
 24703 000041BE 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24704 000041C2 F6D0                    	NOT	AL			; AL <- SearchSet'
 24705 000041C4 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24706                                  	;and	al,16h
 24707 000041C6 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24708                                  ;
 24709                                  ; the result is non-zero if an attribute is not in the search set
 24710                                  ; and in the found set and in the important set. This means that we do not
 24711                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24712                                  ;
 24713 000041C8 58                      	POP	AX
 24714 000041C9 C3                      	retn
 24715                                  
 24716                                  ; 19/05/2019 - Retro DOS v4.0
 24717                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24718                                  
 24719                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24720                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24721                                  
 24722                                  ;Break <DevName - Look for name of device>
 24723                                  ;---------------------------------------------------------------------------
 24724                                  ;
 24725                                  ; Procedure Name : DevName
 24726                                  ;
 24727                                  ; Inputs:
 24728                                  ;	DS,ES:DOSDATA
 24729                                  ;	Filename in NAME1
 24730                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24731                                  ; Function:
 24732                                  ;	Determine if file is in list of I/O drivers
 24733                                  ; Outputs:
 24734                                  ;	Carry set if not a device
 24735                                  ;	ELSE
 24736                                  ;	Zero flag set
 24737                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24738                                  ;	     bits 0-4 set from low byte of attribute word
 24739                                  ;	DEVPT = DWORD pointer to Device header of device
 24740                                  ; BX destroyed, others preserved
 24741                                  ;---------------------------------------------------------------------------
 24742                                  
 24743                                  DEVNAME:
 24744                                  	; 28/07/2018 - Retro DOS v3.0
 24745                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24746                                  
 24747 000041CA 56                      	PUSH	SI
 24748 000041CB 57                      	PUSH	DI
 24749 000041CC 51                      	PUSH	CX
 24750 000041CD 50                      	PUSH	AX
 24751                                  
 24752                                  ; E5 special code
 24753 000041CE FF36[4B05]              	PUSH	WORD [NAME1]
 24754 000041D2 803E[4B05]05            	CMP	byte [NAME1],5
 24755 000041D7 7505                    	JNZ	short NOKTR
 24756 000041D9 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24757                                  NOKTR:
 24758                                  	;test	byte [ATTRIB],8
 24759 000041DE F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24760                                  					; If looking for VOL id don't find devs
 24761 000041E3 7521                    	JNZ	short RET31
 24762                                  
 24763                                  ;hkn; NULDEV is in DOSDATA
 24764 000041E5 BE[4800]                	MOV	SI,NULDEV
 24765                                  LOOKIO:
 24766                                  	; 21/11/2022
 24767                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24768                                  	; 17/12/2022
 24769                                  	;test	byte [si+5],80h
 24770 000041E8 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24771                                  	;;test	word [si+4],8000h
 24772                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24773 000041EC 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24774 000041EE 89F0                    	MOV	AX,SI
 24775                                  	;add	si,10
 24776 000041F0 83C60A                  	ADD	SI,SYSDEV.NAME
 24777                                  
 24778                                  ;hkn; NAME1 is in DOSDATA
 24779 000041F3 BF[4B05]                	MOV	DI,NAME1
 24780 000041F6 B90400                  	MOV	CX,4			; All devices are 8 letters
 24781 000041F9 F3A7                    	REPE	CMPSW			; Check for name in list
 24782 000041FB 89C6                    	MOV	SI,AX
 24783 000041FD 7415                    	JZ	short IOCHK		; Found it?
 24784                                  SKIPDEV:
 24785 000041FF C534                    	LDS	SI,[SI]			; Get address of next device
 24786 00004201 83FEFF                  	CMP	SI,-1			; At end of list?
 24787 00004204 75E2                    	JNZ	short LOOKIO
 24788                                  RET31:	
 24789 00004206 F9                      	STC				; Not found
 24790                                  RETNV:	
 24791 00004207 8CD1                    	MOV	CX,SS
 24792 00004209 8ED9                    	MOV	DS,CX
 24793                                  
 24794 0000420B 8F06[4B05]              	POP	WORD [NAME1]
 24795 0000420F 58                      	POP	AX
 24796 00004210 59                      	POP	CX
 24797 00004211 5F                      	POP	DI
 24798 00004212 5E                      	POP	SI
 24799 00004213 C3                      	RETN
 24800                                  
 24801                                  IOCHK:
 24802                                  ;hkn; SS override for DEVPT
 24803 00004214 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24804                                  	;mov	bh,[si+4]
 24805 00004219 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24806 0000421C 80CFC0                  	OR	BH,0C0h
 24807 0000421F 80E7DF                  	and	bh,0DFh
 24808                                  	;AND	BH,~(020h)		; Clears Carry
 24809 00004222 368936[9A05]            	MOV	[SS:DEVPT],SI
 24810 00004227 EBDE                    	JMP	short RETNV
 24811                                  
 24812                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24813                                  ;---------------------------------------------------------------------------
 24814                                  ; Procedure Name : Build_device_ent
 24815                                  ;
 24816                                  ; Inputs:
 24817                                  ;	[NAME1] has name
 24818                                  ;	BH is attribute field (supplied by DEVNAME)
 24819                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24820                                  ; Function:
 24821                                  ;	Build a directory entry for a device at DEVFCB
 24822                                  ; Outputs:
 24823                                  ;	BX points to DEVFCB
 24824                                  ;	SI points to dir_first field
 24825                                  ;	AH = input BH
 24826                                  ;	AL = 0
 24827                                  ;	dir_first = DEVPT
 24828                                  ;	Zero Set, Carry Clear
 24829                                  ; DS,ES,BP preserved, others destroyed
 24830                                  ;--------------------------------------------------------------------------
 24831                                  
 24832                                  Build_device_ent:
 24833 00004229 B82020                  	MOV	AX,"  " ; 2020h
 24834                                  
 24835                                  ;hkn; DEVFCB is in DOSDATA
 24836 0000422C BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24837                                  
 24838                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 24839                                  
 24840 0000422F AB                      	STOSW
 24841 00004230 AA                      	STOSB				; Blank out extent field
 24842                                  	;mov	al,40h
 24843 00004231 B040                    	MOV	AL,attr_device
 24844                                  
 24845                                  ;	Fill Dir_attr
 24846                                  
 24847 00004233 AA                      	STOSB				; Set attribute field
 24848 00004234 31C0                    	XOR	AX,AX
 24849 00004236 B90A00                  	MOV	CX,10
 24850                                  
 24851                                  ; Fill dir_pad
 24852                                  
 24853 00004239 F3AB                    	REP	STOSW			; Fill rest with zeros
 24854 0000423B E8B7C8                  	call	DATE16
 24855                                  
 24856                                  ;hkn; DEVFCB is in DOSDATA
 24857 0000423E BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24858 00004241 92                      	XCHG	AX,DX
 24859                                  
 24860                                  ; Fill dir_time
 24861                                  
 24862 00004242 AB                      	STOSW
 24863 00004243 92                      	XCHG	AX,DX
 24864                                  
 24865                                  ; Fill dir_date
 24866                                  
 24867 00004244 AB                      	STOSW
 24868 00004245 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24869 00004247 A1[9A05]                	MOV	AX,[DEVPT]
 24870                                  
 24871                                  ; Fill dir_first
 24872                                  
 24873 0000424A AB                      	STOSW				; Dir_first points to device
 24874 0000424B A1[9C05]                	MOV	AX,[DEVPT+2]
 24875                                  ;
 24876                                  ; Fill dir_size_l
 24877                                  ;
 24878 0000424E AB                      	STOSW
 24879 0000424F 88FC                    	MOV	AH,BH			; Put device atts in AH
 24880                                  
 24881                                  ;hkn; DEVFCB is in DOSDATA
 24882 00004251 BB[4B05]                	MOV	BX,DEVFCB
 24883 00004254 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24884 00004256 C3                      	retn
 24885                                  
 24886                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24887                                  ;----------------------------------------------------------------------------
 24888                                  ;
 24889                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24890                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24891                                  ;   If invalid, reset original CDS to root.
 24892                                  ;
 24893                                  ;   Inputs:	ThisCDS points to CDS of interest
 24894                                  ;		SS:DI points to temp buffer
 24895                                  ;   Outputs:	The current directory string is validated on the appropriate
 24896                                  ;		    drive
 24897                                  ;		ThisDPB changed
 24898                                  ;		ES:DI point to CDS
 24899                                  ;		Carry set if error (currently user FAILed to I 24)
 24900                                  ;   Registers modified: all
 24901                                  ;----------------------------------------------------------------------------
 24902                                  
 24903                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24904                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24905                                  
 24906                                  ValidateCDS:
 24907                                  	; 19/05/2019 - Retro DOS v4.0
 24908                                  	; 28/07/2018 - Retro DOS v3.0
 24909                                  
 24910                                     %define  Temp	[bp-2]	; word
 24911                                     %define  SaveCDS	[bp-6]	; dword
 24912                                     %define  SaveCDSL	[bp-6]	; word
 24913                                     %define  SaveCDSH	[bp-4]	; word
 24914                                  
 24915                                  	;Enter
 24916 00004257 55                      	push	bp
 24917 00004258 89E5                    	mov	bp,sp
 24918 0000425A 83EC06                  	sub	sp,6
 24919                                  
 24920 0000425D 897EFE                  	MOV	Temp,DI
 24921                                  
 24922                                  ;hkn; SS override
 24923 00004260 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24924 00004265 8976FA                  	MOV	SaveCDSL,SI
 24925 00004268 8C5EFC                  	MOV	SaveCDSH,DS
 24926                                  	;EnterCrit critDisk
 24927 0000426B E8A4D0                  	call	ECritDisk
 24928                                  	; 21/11/2022
 24929                                  	;test	byte [SI+curdir.flags+1],80h
 24930                                  	;test	word [si+67],8000h
 24931                                  	; 17/12/2022
 24932                                  	;test	byte [SI+68],80h
 24933 0000426E F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24934                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24935 00004272 7403                    	JZ	short _DoSplice
 24936 00004274 E99200                  	JMP	FatFail
 24937                                  _DoSplice:
 24938 00004277 30D2                    	XOR	DL,DL
 24939 00004279 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24940                                  
 24941                                  ;hkn; SS is DOSDATA
 24942                                  	;Context ES
 24943 0000427E 16                      	push	ss
 24944 0000427F 07                      	pop	es
 24945                                  	;Invoke	FStrcpy
 24946 00004280 E864CF                  	call	FStrCpy
 24947 00004283 8B76FE                  	MOV	SI,Temp
 24948                                  
 24949                                  ;hkn; SS is DOSDATA
 24950                                  	;Context DS
 24951 00004286 16                      	push	ss
 24952 00004287 1F                      	pop	ds	
 24953                                  	;Invoke	Splice
 24954 00004288 E85D2B                  	call	Splice
 24955                                  
 24956                                   ;hkn; SS is DOSDATA
 24957                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24958 0000428B 16                      	push	ss
 24959 0000428C 1F                      	pop	ds
 24960 0000428D 8816[4C03]              	MOV	[NoSetDir],DL
 24961 00004291 C43E[A205]              	LES	DI,[THISCDS]
 24962                                  	;SAVE	<BP>
 24963 00004295 55                      	push	bp
 24964                                  	;Invoke	FATREAD_CDS
 24965 00004296 E83114                  	call	FATREAD_CDS	
 24966                                  	;RESTORE <BP>
 24967 00004299 5D                      	pop	bp
 24968 0000429A 726D                    	JC	short FatFail
 24969                                  
 24970 0000429C C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24971                                  	;cmp	word [si+73],-1
 24972 000042A0 837C49FF                	CMP	word [SI+curdir.ID],-1
 24973 000042A4 7555                    	JNZ	short RestoreCDS
 24974                                  
 24975                                  ;hkn; SS is DOSDATA
 24976                                  	;Context ES
 24977 000042A6 16                      	push	ss
 24978 000042A7 07                      	pop	es
 24979                                  
 24980                                  ;hkn; SS override
 24981                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24982 000042A8 36FF36[B205]            	push	word [SS:WFP_START]
 24983                                  	;cmp	si,[bp-6]
 24984 000042AD 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24985 000042B0 750B                    	JNZ	short DoChdir
 24986                                  	;mov	di,[bp-2]
 24987 000042B2 8B7EFE                  	MOV	DI,Temp
 24988                                  
 24989                                  ;hkn; SS override
 24990 000042B5 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24991                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24992 000042BA E82ACF                  	call	FStrCpy
 24993                                  DoChdir:
 24994                                  ;hkn; SS is DOSDATA
 24995                                  	;Context DS
 24996 000042BD 16                      	push	ss
 24997 000042BE 1F                      	pop	ds
 24998                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24999 000042BF FF36[6D05]              	push	word [SATTRIB]
 25000 000042C3 55                      	push	bp
 25001                                  	;Invoke	DOS_ChDir
 25002 000042C4 E8EFEE                  	call	DOS_CHDIR
 25003                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25004 000042C7 5D                      	pop	bp
 25005 000042C8 5B                      	pop	bx
 25006 000042C9 8F06[B205]              	pop	word [WFP_START]
 25007 000042CD 881E[6D05]              	MOV	[SATTRIB],BL
 25008 000042D1 C576FA                  	LDS	SI,SaveCDS
 25009 000042D4 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25010                                  
 25011                                  ;hkn; SS override for THISCDS
 25012 000042D6 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25013 000042DB 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25014 000042E0 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25015 000042E2 884C03                  	MOV	[SI+3],CL		;	    }
 25016                                  SetCluster:
 25017                                  	;mov	word [si+73],0FFFFh
 25018 000042E5 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25019 000042EA 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25020                                  	; 21/11/2022
 25021                                  	;test	byte [si+curdir.flags+1],20h
 25022                                  	; 19/05/2019
 25023                                  	; MSDOS 6.0
 25024                                  	; 17/12/2022
 25025                                  	;test	byte [si+68],20h
 25026 000042EF F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25027                                  	;;test	word [si+67],2000h
 25028                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25029 000042F3 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25030 000042F5 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25031                                  _setdirclus:
 25032                                  	;mov	[si+73],cx
 25033 000042F8 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25034                                  RestoreCDS:
 25035 000042FB C47EFA                  	LES	DI,SaveCDS
 25036 000042FE 36893E[A205]            	MOV	[SS:THISCDS],DI
 25037 00004303 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25038 00004308 F8                      	CLC
 25039                                  FatFail:
 25040                                  	;LeaveCrit critDisk
 25041 00004309 E821D0                  	call	LCritDisk
 25042                                  
 25043                                  	;les	di,[bp-6]
 25044 0000430C C47EFA                  	LES	DI,SaveCDS
 25045                                  	;Leave
 25046 0000430F 89EC                    	mov	sp,bp
 25047 00004311 5D                      	pop	bp
 25048 00004312 C3                      	retn
 25049                                  
 25050                                  ; 28/07/2018 - Retro DOS v3.0
 25051                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25052                                  
 25053                                  ;Break	<CheckThisDevice - Check for being a device>
 25054                                  ;---------------------------------------------------------------------------
 25055                                  ;
 25056                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25057                                  ;   device specified. We will return carry if there is a device present. 
 25058                                  ;   The forms of devices we will recognize are:
 25059                                  ;
 25060                                  ;	[path]device
 25061                                  ;
 25062                                  ;   Note that the drive letter has *already* been removed. All other forms
 25063                                  ;   are not considered to be devices. If such a device is found we change
 25064                                  ;   the source pointer to point to the device component.
 25065                                  ;
 25066                                  ;   Inputs:	ES is DOSDATA
 25067                                  ;		DS:SI contains name
 25068                                  ;   Outputs:	ES is DOSDATA
 25069                                  ;		DS:SI point to name or device
 25070                                  ;		Carry flag set if device was found
 25071                                  ;		Carry flag reset otherwise
 25072                                  ;   Registers Modified: all except ES:DI, DS
 25073                                  ;----------------------------------------------------------------------------
 25074                                  
 25075                                  CheckThisDevice:
 25076 00004313 57                      	push	di
 25077 00004314 56                      	push	si
 25078 00004315 89F7                    	MOV	DI,SI
 25079                                  
 25080                                  ; Check for presence of \dev\ (Dam multiplan!)
 25081                                  
 25082 00004317 8A04                    	MOV	AL,[SI]
 25083 00004319 E8750D                  	call	PATHCHRCMP		; is it a path char?
 25084 0000431C 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25085 0000431E 46                      	INC	SI			; simulate LODSB
 25086                                  
 25087                                  ; We have the leading path separator. Look for DEV part.
 25088                                  
 25089 0000431F AD                      	LODSW
 25090 00004320 0D2020                  	OR	AX,2020h
 25091 00004323 3D6465                  	cmp	ax,"de"
 25092                                  	;CMP	AX,"e"<< 8 + "d"
 25093 00004326 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25094 00004328 AC                      	LODSB
 25095 00004329 0C20                    	OR	AL,20h
 25096 0000432B 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25097 0000432D 7526                    	JNZ	short NotDevice
 25098 0000432F AC                      	LODSB
 25099 00004330 E85E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25100 00004333 7520                    	JNZ	short NotDevice		; no. go for it.
 25101                                  
 25102                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25103                                  ; SI and DevName may destroy DS.
 25104                                  
 25105                                  ParseDev:
 25106 00004335 1E                      	push	ds
 25107 00004336 56                      	push	si			; preserve the source pointer
 25108 00004337 E8950C                  	call	NameTrans		; advance DS:SI
 25109 0000433A 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25110 0000433D F9                      	STC				; simulate a Carry return from DevName
 25111 0000433E 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25112                                  
 25113                                  ;hkn; SS is DOSDATA
 25114 00004340 16                      	push	ss
 25115 00004341 1F                      	pop	ds
 25116                                  
 25117                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25118                                  ;
 25119                                  ; SR;
 25120                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25121                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25122                                  ; old call set the volume attribute bit.
 25123                                  
 25124 00004342 A0[6D05]                	mov	al,[SATTRIB]
 25125 00004345 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25126                                  
 25127                                  ; M026 - end
 25128                                  
 25129 00004348 E87FFE                  	call	DEVNAME
 25130                                  
 25131                                  SkipSearch:
 25132 0000434B 5E                      	pop	si
 25133 0000434C 1F                      	pop	ds
 25134                                  
 25135                                  ; SI points to the beginning of the potential device. If we have a device
 25136                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25137                                  ; original value. At this point Carry set indicates FILE.
 25138                                  
 25139                                  CheckReturn:
 25140 0000434D 5F                      	pop	di			; get original SI
 25141 0000434E 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25142 00004350 89FE                    	MOV	SI,DI
 25143                                  Check_Done:
 25144 00004352 5F                      	pop	di
 25145 00004353 F5                      	CMC				; invert carry. Carry => device
 25146 00004354 C3                      	retn
 25147                                  NotDevice:
 25148 00004355 F9                      	STC
 25149 00004356 EBF5                    	JMP	short CheckReturn
 25150                                  
 25151                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25152                                  ;-----------------------------------------------------------------------------
 25153                                  ;
 25154                                  ; Procedure Name : LookupPath
 25155                                  ;
 25156                                  ; Output  DS:SI -> path name,
 25157                                  ;	  ES:DI -> dir entry info buffer
 25158                                  ;	  ES:CX -> extended dir info buffer
 25159                                  ;
 25160                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25161                                  ;			     FastOpen, DS:SI points to char just one after
 25162                                  ;			     the last char of path name which is fully or
 25163                                  ;			     partially found in FastOPen
 25164                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25165                                  ;
 25166                                  ;----------------------------------------------------------------------------
 25167                                  
 25168                                  LookupPath:
 25169                                  ;	PUSH	AX
 25170                                  
 25171                                  ;hkn; SS override
 25172                                  	;test	byte [ss:FastOpenFlg],1
 25173 00004358 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25174 0000435E 7503                    	JNZ	short FASTINST			    ; and this routine is
 25175                                  NOLOOK:
 25176 00004360 E99700                  	JMP	NOLOOKUP			    ; executed once
 25177                                  
 25178                                  FASTINST:
 25179                                  ;hkn; SS override
 25180                                  	;test	byte [ss:FastOpenFlg],8
 25181 00004363 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25182 00004369 75F5                    	JNZ	short NOLOOK			    ; yes
 25183                                  
 25184 0000436B BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25185                                  
 25186                                  ;hkn; SS override
 25187 0000436E 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25188 00004373 BF[460D]                	MOV	DI,Dir_Info_Buff
 25189 00004376 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25190 00004379 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25191 0000437B 1E                      	PUSH	DS
 25192 0000437C 07                      	POP	ES
 25193                                  
 25194                                  ;hkn; SS override
 25195                                  	;call	far [bx+2]
 25196 0000437D FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25197 00004380 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25198                                  
 25199 00004382 8D5CFE                  	LEA	BX,[SI-2]
 25200                                  
 25201                                  ;hkn; SS override
 25202 00004385 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25203 0000438A 745D                    	JZ	short NOTFOUND			    ; no
 25204                                  
 25205                                  	; 19/05/2019 - Retro DOS v4.0
 25206                                  
 25207                                  	; MSDOS 6.0				    ; fully or partially found
 25208 0000438C 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25209 0000438F 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25210 00004391 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25211                                  
 25212                                  ;hkn; SS override for attrib/sattrib
 25213 00004392 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25214 00004397 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25215 0000439C 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25216                                  	;mov	ch,[es:di+0Bh]
 25217 000043A1 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25218 000043A5 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25219                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25220 000043A8 59                      	POP	CX				    ;AN000;FO.;
 25221 000043A9 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25222                                  parfnd:
 25223                                  
 25224                                  ;hkn; SS override
 25225 000043AB 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25226 000043B0 89CB                    	MOV	BX,CX
 25227                                  	; MSDOS 6.0
 25228                                  	;mov	ax,[bx+7]
 25229 000043B2 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25230                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25231 000043B5 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25232 000043B9 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25233 000043BC 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25234                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25235                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25236                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25237 000043C0 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25238 000043C3 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25239                                  
 25240 000043C7 06                      	PUSH	ES				    ; save ES
 25241                                  ;hkn; SS override
 25242 000043C8 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25243 000043CD 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25244                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25245 000043D0 07                      	POP	ES				    ; pop ES
 25246                                  ;SR;
 25247                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25248                                  ;indicate it is not a root dir
 25249                                  
 25250 000043D1 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25251 000043D8 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25252 000043DD 89FB                    	MOV	BX,DI				    ; start of entry
 25253                                  	;lea	si,[di+1Ah]
 25254 000043DF 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25255                                  						    ; dir_first field in the
 25256                                  						    ; dir entry
 25257                                  ;hkn; SS override for FastOpenFlg
 25258                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25259 000043E2 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25260                                  ;	POP	AX
 25261 000043E8 C3                      	RETN
 25262                                  NOTFOUND:
 25263 000043E9 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25264 000043EC 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25265 000043EE 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25266                                  Partial_Success:
 25267                                  	;and	byte [SS:FastOpenFlg],0FBh
 25268 000043F4 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25269                                  NOLOOKUP:
 25270                                  ;	POP	AX
 25271 000043FA F9                      	STC
 25272 000043FB C3                      	RETN
 25273                                  
 25274                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25275                                  ;-----------------------------------------------------------------------------
 25276                                  ;
 25277                                  ; Procedure Name : InsertPath
 25278                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25279                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25280                                  ;	  DS = DOSDATA
 25281                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25282                                  ;
 25283                                  ;-----------------------------------------------------------------------------
 25284                                  
 25285                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25286                                  
 25287                                  InsertPath:
 25288 000043FC 9C                      	PUSHF
 25289                                  ;hkn; SS override for FastOpenFlag
 25290                                  	;test	byte [SS:FastOpenFlg], 1
 25291 000043FD 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25292 00004403 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25293                                  	;test	byte [ss:FastOpenFlg],2
 25294 00004405 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25295 0000440B 740D                    	JZ	short INSERT_DIR_INFO		; no
 25296                                  	;and	byte [ss:FastOpenFlg],0FDh
 25297 0000440D 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25298 00004413 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25299 00004418 EB5E                    	JMP	short GET_NEXT2
 25300                                  INSERT_DIR_INFO:				; save registers
 25301 0000441A 1E                      	PUSH	DS
 25302 0000441B 06                      	PUSH	ES
 25303 0000441C 53                      	PUSH	BX
 25304 0000441D 56                      	PUSH	SI
 25305 0000441E 57                      	PUSH	DI
 25306 0000441F 51                      	PUSH	CX
 25307 00004420 50                      	PUSH	AX
 25308                                  
 25309                                  ;hkn; SS override
 25310 00004421 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25311 00004426 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25312                                  	;mov	ax,[di+6]
 25313 00004429 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25314                                  	; MSDOS 6.0
 25315                                  	;mov	[ss:si+1],ax
 25316 0000442C 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25317                                  	; 19/05/2019 - Retro DOS v4.0
 25318 00004430 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25319                                  
 25320                                  ;hkn; SS is DOSDATA
 25321 00004433 16                      	push	ss
 25322 00004434 1F                      	pop	ds
 25323                                  	; MSDOS 3.3	
 25324                                  	;;mov	[si+1],ax	
 25325                                  	;MOV	[SI+FEI.dirsec],AX
 25326                                  	; MSDOS 6.0
 25327                                  	;mov	[si+3],ax
 25328 00004435 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25329                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25330 00004438 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25331                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25332                                  	;mov	[si+3],ax ; MSDOS 3.3
 25333 0000443B 894405                  	MOV	[SI+FEI.clusnum],AX
 25334                                  	; MSDOS 6.0
 25335 0000443E A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25336                                  	;mov	[si+7],ax
 25337 00004441 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25338 00004444 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25339                                  	;mov	[si+9],ax
 25340 00004447 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25341                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25342 0000444A 89D8                    	MOV	AX,BX
 25343                                  	;;add	di,16  ; MSDOS 3.3
 25344                                  	;add	di,20  ; MSDOS 6.0
 25345 0000444C 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25346 0000444F 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25347                                  	;mov	cl,32
 25348 00004451 B120                    	MOV	CL,dir_entry.size
 25349 00004453 F6F1                    	DIV	CL
 25350                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25351 00004455 8804                    	mov	[si],al
 25352                                  
 25353 00004457 1E                      	PUSH	DS
 25354 00004458 07                      	POP	ES
 25355                                  
 25356 00004459 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25357 0000445D 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25358                                  	;cmp	word [di+1Ah],0
 25359 0000445F 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25360                                  					; never insert info when file is empty
 25361 00004463 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25362                                  
 25363 00004465 56                      	PUSH	SI			; ES:BX -> extended info
 25364 00004466 5B                      	POP	BX
 25365                                  
 25366                                  	;mov	al,2
 25367 00004467 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25368 00004469 BE[300D]                	MOV	SI,FastOpenTable
 25369                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25370                                  	; 07/12/2022
 25371 0000446C 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25372                                  
 25373 00004470 F8                      	CLC
 25374                                  SKIP_INSERT:
 25375 00004471 58                      	POP	AX
 25376 00004472 59                      	POP	CX			; restore registers
 25377 00004473 5F                      	POP	DI
 25378 00004474 5E                      	POP	SI
 25379 00004475 5B                      	POP	BX
 25380 00004476 07                      	POP	ES
 25381 00004477 1F                      	POP	DS
 25382                                  GET_NEXT2:
 25383                                  	;or	[ss:FastOpenFlg],8
 25384 00004478 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25385                                  					; we got dir info from fastopen so
 25386                                  GET_NEXT_ELEMENT:
 25387 0000447E 9D                      	POPF
 25388 0000447F C3                      	RETN
 25389                                  
 25390                                  ;============================================================================
 25391                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25392                                  ;============================================================================
 25393                                  ; 17/07/2018 - Retro DOS v3.0
 25394                                  ; 30/04/2019 - Retro DOS v4.0
 25395                                  
 25396                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25397                                  
 25398                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25399                                  
 25400                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25401                                  
 25402                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25403                                  ;DEV001s:
 25404                                  ;		length of packets
 25405 00004480 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25406                                  ;LenTab: db	22,14,22,13,15,14
 25407                                  
 25408                                  ;	Error Function
 25409                                  
 25410                                  CmdTab:
 25411 00004486 8604                    	DB	86h, DEVRD	; 0 input
 25412 00004488 8605                    	DB	86h, DEVRDND	; 1 input status
 25413 0000448A 8708                    	DB	87h, DEVWRT	; 2 output
 25414 0000448C 870A                    	DB	87h, DEVOST	; 3 output status
 25415 0000448E 8607                    	DB	86h, DEVIFL	; 4 input flush
 25416 00004490 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25417                                  
 25418                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25419                                  
 25420                                  ;CmdTab:
 25421                                  ;	db	86h, 4
 25422                                  ;	db	86h, 5
 25423                                  ;	db	87h, 8
 25424                                  ;	db	87h, 10
 25425                                  ;	db	86h, 7
 25426                                  ;	db	86h, 5
 25427                                  
 25428                                  ;DEV001E:
 25429                                  
 25430                                  ; 30/04/2019 - Retro DOS v4.0
 25431                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25432                                  
 25433                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25434                                  ;----------------------------------------------------------------------------
 25435                                  ;
 25436                                  ; Procedure Name : IOFUNC
 25437                                  ;
 25438                                  ; Inputs:
 25439                                  ;	DS:SI Points to SFT
 25440                                  ;	AH is function code
 25441                                  ;		= 0 Input
 25442                                  ;		= 1 Input Status
 25443                                  ;		= 2 Output
 25444                                  ;		= 3 Output Status
 25445                                  ;		= 4 Flush
 25446                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25447                                  ;				   present.
 25448                                  ;	AL = character if output
 25449                                  ; Function:
 25450                                  ;	Perform indicated I/O to device or file
 25451                                  ; Outputs:
 25452                                  ;	AL is character if input
 25453                                  ;	If a status call
 25454                                  ;		zero set if not ready
 25455                                  ;		zero reset if ready (character in AL for input status)
 25456                                  ; For regular files:
 25457                                  ;	Input Status
 25458                                  ;		Gets character but restores position
 25459                                  ;		Zero set on EOF
 25460                                  ;	Input
 25461                                  ;		Gets character advances position
 25462                                  ;		Returns ^Z on EOF
 25463                                  ;	Output Status
 25464                                  ;		Always ready
 25465                                  ; AX altered, all other registers preserved
 25466                                  ;----------------------------------------------------------------------------
 25467                                  
 25468                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25469                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25470                                  
 25471                                  IOFUNC:
 25472 00004492 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25473                                  					; DEVIOBUF
 25474 00004497 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25475 0000449E 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25476 000044A5 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25477                                  	;test	byte [si+6],80h
 25478                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25479 000044A9 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25480 000044AD 7403                    	JZ	short IOTO22		;AN000;
 25481 000044AF E9A500                  	JMP	IOTOFILE		;AN000;
 25482                                  IOTO22:
 25483                                  	;test	word [si+5],80h
 25484                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25485 000044B2 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25486 000044B6 7503                    	JNZ	short IOTO33		;AN000;
 25487 000044B8 E99C00                  	JMP	IOTOFILE		;AN000;
 25488                                  IOTO33:
 25489 000044BB 06                      	push	es ; * (MSDOS 6.21)
 25490 000044BC E8A7BF                  	call	save_world
 25491 000044BF 8CDA                    	MOV	DX,DS
 25492 000044C1 8CD3                    	MOV	BX,SS
 25493 000044C3 8EDB                    	MOV	DS,BX
 25494 000044C5 8EC3                    	MOV	ES,BX
 25495 000044C7 31DB                    	XOR	BX,BX
 25496 000044C9 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25497 000044CC 7503                    	jnz	short _no_sys_wait
 25498                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25499                                  	; 16/12/2022
 25500 000044CE 80CF04                  	or	bh,04h
 25501                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25502                                  				    ; It is up to device driver to carry out
 25503                                  				    ; appropriate action.
 25504                                  _no_sys_wait:
 25505 000044D1 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25506 000044D5 31DB                    	XOR	BX,BX
 25507 000044D7 881E[8903]              	MOV	[IOMED],BL
 25508                                  
 25509 000044DB 88E3                    	MOV	BL,AH		 	; get function
 25510 000044DD 2E8AA7[8044]            	MOV	AH,[cs:BX+LenTab]
 25511 000044E2 D1E3                    	SHL	BX,1
 25512 000044E4 2E8B8F[8644]            	MOV	CX,[cs:BX+CmdTab]
 25513 000044E9 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25514 000044EC 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25515 000044F0 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25516                                  
 25517 000044F4 8EDA                    	MOV	DS,DX
 25518 000044F6 E86B01                  	CALL	DEVIOCALL
 25519 000044F9 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25520 000044FE 21FF                    	and	di,di
 25521 00004500 7834                    	js	short DevErr
 25522                                  OKDevIO:
 25523 00004502 8CD0                    	MOV	AX,SS
 25524 00004504 8ED8                    	MOV	DS,AX
 25525                                  
 25526                                  	;cmp	ch,5
 25527 00004506 80FD05                  	CMP	CH,DEVRDND
 25528 00004509 7506                    	JNZ	short DNODRD
 25529 0000450B A0[8903]                	MOV	AL,[IORCHR]
 25530 0000450E A2[BC03]                	MOV	[DEVIOBUF],AL
 25531                                  
 25532                                  DNODRD: 
 25533 00004511 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25534 00004515 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25535                                  	;and	ah,2
 25536 00004517 80E402                  	AND	AH,STBUI>>8
 25537                                  
 25538                                  QuickReturn:				;AN000; 2/13/KK
 25539 0000451A E832BF                  	call	restore_world
 25540 0000451D 07                      	pop	es ; * (MSDOS 6.21)
 25541                                  
 25542                                  	; SR;
 25543                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25544                                  	; IoStatFail = -1 (set after return from the I24)
 25545                                  
 25546                                  	; MSDOS 6.0
 25547 0000451E 9C                      	pushf
 25548 0000451F 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25549 00004523 98                      	cbw				;sign extend to word
 25550 00004524 83F8FF                  	cmp	ax,-1
 25551 00004527 7507                    	jne	short not_fail_ret
 25552 00004529 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25553 0000452E 9D                      	popf
 25554 0000452F C3                      	retn
 25555                                  
 25556                                  not_fail_ret:
 25557 00004530 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25558 00004534 9D                      	popf
 25559 00004535 C3                      	retn
 25560                                  
 25561                                  DevErr:
 25562 00004536 88CC                    	MOV	AH,CL
 25563 00004538 E88E0D                  	call	CHARHARD
 25564 0000453B 3C01                    	CMP	AL,1
 25565 0000453D 7507                    	JNZ	short NO_RETRY
 25566 0000453F E80DBF                  	call	restore_world
 25567                                  	; 12/05/2019
 25568 00004542 07                      	pop	es ; * (MSDOS 6.21)		
 25569 00004543 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25570                                  
 25571                                  NO_RETRY:
 25572                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25573                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25574                                  	; simply wants to ignore the error.
 25575                                  	;
 25576                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25577                                  	; should be checked by the caller on return
 25578                                  
 25579                                  					; SS override
 25580 00004546 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25581                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25582                                  
 25583                                  	; SR;
 25584                                  	; Check if user failed
 25585                                  
 25586                                  	; MSDOS 6.0
 25587 0000454C 3C03                    	cmp	al,3
 25588 0000454E 7505                    	jnz	short not_fail
 25589 00004550 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25590                                  not_fail:
 25591 00004555 EBAB                    	JMP	short OKDevIO
 25592                                  
 25593                                  IOTOFILE:
 25594 00004557 08E4                    	OR	AH,AH
 25595 00004559 7421                    	JZ	short IOIN
 25596 0000455B FECC                    	DEC	AH
 25597 0000455D 7405                    	JZ	short IOIST
 25598 0000455F FECC                    	DEC	AH
 25599 00004561 7411                    	JZ	short IOUT
 25600                                  IOUT_retn:	; 18/12/2022
 25601 00004563 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25602                                  IOIST:
 25603                                  	;push	word [si+15h]
 25604 00004564 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25605                                  	;push	word [si+17h]
 25606 00004567 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25607 0000456A E80F00                  	CALL	IOIN
 25608                                  	;pop	word [si+17h]
 25609 0000456D 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25610                                  	;pop	word [si+15h]
 25611 00004570 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25612 00004573 C3                      	retn
 25613                                  IOUT:
 25614 00004574 E82500                  	CALL	SETXADDR
 25615 00004577 E87FEF                  	call	DOS_WRITE
 25616                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25617                                  	; 18/12/2022
 25618 0000457A EB52                    	jmp	RESTXADDR
 25619                                  ;IOUT_retn:
 25620                                  	;retn			; come crying to me when things don't
 25621                                  				; work ARR
 25622                                  IOIN:
 25623 0000457C E81D00                  	CALL	SETXADDR
 25624                                  					; SS override for DOS34_FLAG
 25625                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25626                                  	;or	word [ss:DOS34_FLAG],40h
 25627                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25628                                  	; 16/12/2022
 25629 0000457F 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25630 00004585 E848ED                  	CALL	DOS_READ
 25631                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25632                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25633                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25634                                  	; 16/12/2022
 25635 00004588 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25636 0000458E 09C9                    	OR	CX,CX			; Check EOF
 25637 00004590 E83B00                  	CALL	RESTXADDR
 25638                                  					; SS override
 25639 00004593 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25640 00004597 75CA                    	jnz	short IOUT_retn	
 25641 00004599 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25642 0000459B C3                      	retn
 25643                                  
 25644                                  SETXADDR:
 25645                                  					; SS override
 25646 0000459C 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25647                                  
 25648 000045A1 06                      	push	es ; * (MSDOS 6.21)
 25649                                  
 25650 000045A2 E8C1BE                  	call	save_world
 25651                                  					; SS override for DMAADD and THISSFT
 25652                                  	; 24/09/2023
 25653                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25654                                  	;PUSH	WORD [SS:DMAADD+2]
 25655 000045A5 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25656                                  
 25657 000045AA 16                      	push	ss
 25658 000045AB 1F                      	pop	ds
 25659                                  
 25660                                  	; 24/09/2023
 25661 000045AC FF36[2C03]              	push	word [DMAADD]
 25662 000045B0 FF36[2E03]              	push	word [DMAADD+2]
 25663                                  
 25664 000045B4 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25665 000045B8 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25666 000045BC 890E[2E03]              	MOV	[DMAADD+2],CX
 25667 000045C0 8B0E[8A03]              	MOV	CX,[IOXAD]
 25668 000045C4 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25669 000045C8 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25670 000045CC EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25671                                  
 25672                                  RESTXADDR:
 25673 000045CE 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25674 000045D2 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25675 000045D6 8F06[2C03]              	POP	WORD [DMAADD]
 25676                                  
 25677 000045DA E872BE                  	call	restore_world
 25678                                  
 25679 000045DD 07                      	pop	es ; * (MSDOS 6.21)
 25680                                  					; SS override
 25681                                  RESTRET:
 25682 000045DE 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25683                                  
 25684                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25685                                  ; 21/11/2022
 25686                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25687                                  
 25688                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25689                                  
 25690                                  ;----------------------------------------------------------------------------
 25691                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25692                                  ;
 25693                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25694                                  ;	the SFT.
 25695                                  ;
 25696                                  ;	ENTRY	(ES:DI) = SFT
 25697                                  ;	EXIT	none
 25698                                  ;	USES	all
 25699                                  ;----------------------------------------------------------------------------
 25700                                  
 25701                                  DEV_OPEN_SFT:
 25702 000045E3 06                      	push	es ; * (MSDOS 6.21)
 25703 000045E4 E87FBE                  	call	save_world
 25704                                  	;mov	al,0Dh	
 25705 000045E7 B00D                    	MOV	AL,DEVOPN
 25706 000045E9 EB06                    	JMP	SHORT DO_OPCLS
 25707                                  
 25708                                  ;----------------------------------------------------------------------------
 25709                                  ; Procedure Name : DEV_CLOSE_SFT
 25710                                  ;
 25711                                  ; Inputs:
 25712                                  ;	ES:DI Points to SFT
 25713                                  ; Function:
 25714                                  ;	Issue a CLOSE call to the correct device
 25715                                  ; Outputs:
 25716                                  ;	None
 25717                                  ; ALL preserved
 25718                                  ;----------------------------------------------------------------------------
 25719                                  
 25720                                  DEV_CLOSE_SFT:
 25721 000045EB 06                      	push	es ; * (MSDOS 6.21)
 25722 000045EC E877BE                  	call	save_world
 25723                                  	;mov	al,0Eh	
 25724 000045EF B00E                    	MOV	AL,DEVCLS
 25725                                  
 25726                                  	; Main entry for device open and close. AL contains the function 
 25727                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25728                                  	; open/close to block devices. This allows networks to function but 
 25729                                  	; does NOT hang up with bogus change-line code.
 25730                                  
 25731                                  	;entry	DO_OPCLS
 25732                                  DO_OPCLS:
 25733                                  	; Is the SFT for the net? If so, no action necessary.
 25734                                  
 25735                                  	; MSDOS 6.0
 25736                                  	;test	word [es:di+5],8000h
 25737                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25738 000045F1 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25739 000045F6 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25740 000045F8 30E4                    	XOR	AH,AH			; Unit
 25741                                  	;test	byte [es:di+5],80h
 25742 000045FA 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25743                                  	;les	di,[es:di+7]
 25744 000045FF 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25745 00004603 7513                    	JNZ	short GOT_DEV_ADDR
 25746                                  
 25747                                  	; We are about to call device open/close on a block driver. If no 
 25748                                  	; sharing then just short circuit to done.
 25749                                  	
 25750                                  	; MSDOS 6.0
 25751                                  					; SS override
 25752 00004605 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25753 0000460B 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25754                                  
 25755                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25756                                  	;mov	ah,[es:di+1]
 25757 0000460D 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25758 00004611 268A0D                  	mov	cl,[es:di]
 25759                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25760                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25761                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25762 00004614 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25763                                  GOT_DEV_ADDR:				; ES:DI -> device
 25764                                  	;test	word [es:di+4],800h
 25765                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25766 00004618 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25767 0000461D 7440                    	JZ	short OPCLS_DONE	; Device can't
 25768 0000461F 06                      	PUSH	ES
 25769 00004620 1F                      	POP	DS
 25770 00004621 89FE                    	MOV	SI,DI			; DS:SI -> device
 25771                                  
 25772                                  OPCLS_RETRY:
 25773                                  	;Context ES
 25774 00004623 16                      	push	ss
 25775 00004624 07                      	pop	es
 25776                                  					; DEVCALL is in DOSDATA
 25777 00004625 BF[5A03]                	MOV	DI,DEVCALL
 25778                                  
 25779 00004628 89FB                    	MOV	BX,DI
 25780 0000462A 50                      	PUSH	AX
 25781                                  	;mov	al,13
 25782 0000462B B00D                    	MOV	AL,DOPCLHL
 25783 0000462D AA                      	STOSB				; Length
 25784 0000462E 58                      	POP	AX
 25785 0000462F 86E0                    	XCHG	AH,AL
 25786 00004631 AA                      	STOSB				; Unit
 25787 00004632 86E0                    	XCHG	AH,AL
 25788 00004634 AA                      	STOSB				; Command
 25789 00004635 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25790 0000463A 50                      	PUSH	AX			; Save Unit,Command
 25791                                  	;invoke	DEVIOCALL2
 25792 0000463B E82900                  	call	DEVIOCALL2
 25793                                  
 25794                                  	;mov	di,[es:bx+3]
 25795 0000463E 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25796                                  	;test	di,8000h
 25797                                  	;jz	short OPCLS_DONEP	
 25798 00004642 21FF                    	and	di,di
 25799 00004644 7918                    	jns	short OPCLS_DONEP	; No error
 25800                                  	; 21/11/2022
 25801                                  	;test	word [si+4],8000h
 25802                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25803                                  	;test	word [si+5],80h
 25804 00004646 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25805 0000464A 7404                    	JZ	short BLKDEV
 25806 0000464C B486                    	MOV	AH,86H			; Read error in data, Char dev
 25807 0000464E EB04                    	JMP	SHORT HRDERR
 25808                                  BLKDEV:
 25809 00004650 88C8                    	MOV	AL,CL			; Drive # in AL
 25810 00004652 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25811                                  HRDERR:
 25812                                  	;invoke	CHARHARD
 25813 00004654 E8720C                  	call	CHARHARD
 25814 00004657 3C01                    	cmp	al,1
 25815 00004659 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25816                                  					;  Note that FAIL is essentually IGNORED
 25817 0000465B 58                      	POP	AX			; Get back Unit, Command
 25818 0000465C EBC5                    	JMP	short OPCLS_RETRY
 25819                                  OPCLS_DONEP:
 25820 0000465E 58                      	POP	AX			; Clean stack
 25821                                  OPCLS_DONE:
 25822 0000465F E8EDBD                  	call	restore_world
 25823 00004662 07                      	pop	es ; * (MSDOS 6.21)
 25824 00004663 C3                      	retn
 25825                                  
 25826                                  ; 30/04/2019 - Retro DOS v4.0
 25827                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25828                                  
 25829                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25830                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25831                                  
 25832                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25833                                  ;----------------------------------------------------------------------------
 25834                                  ;**	DevIoCall  - Call Device
 25835                                  ;
 25836                                  ;	ENTRY	DS:SI Points to device SFT
 25837                                  ;		ES:BX Points to request data
 25838                                  ;	EXIT	DS:SI -> Device driver
 25839                                  ;	USES	DS:SI,AX
 25840                                  ;----------------------------------------------------------------------------
 25841                                  ;**	DevIoCall2 - Call Device
 25842                                  ;
 25843                                  ;	ENTRY	DS:SI Points to DPB
 25844                                  ;		ES:BX Points to request data
 25845                                  ;	EXIT	DS:SI -> Device driver
 25846                                  ;	USES	DS:SI,AX
 25847                                  ;----------------------------------------------------------------------------
 25848                                  
 25849                                  DEVIOCALL:
 25850                                  					; SS override for CALLSSEC, 
 25851                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25852 00004664 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25853                                  
 25854                                  	;entry	DEVIOCALL2
 25855                                  DEVIOCALL2:
 25856                                  	;EnterCrit critDevice
 25857 00004667 E8DDCC                  	call	ECritDevice
 25858                                  
 25859                                  	; MSDOS 6.0
 25860                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25861                                  	;test	byte [si+5],80h
 25862 0000466A F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25863 0000466E 7548                    	jnz	short chardev2		;AN000; >32mb no
 25864                                  
 25865                                  	; 16/12/2022
 25866                                  	; 22/11/2022
 25867 00004670 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25868 00004674 3C04                    	cmp	al,DEVRD	; 4
 25869 00004676 7408                    	je	short chkext	
 25870 00004678 3C08                    	cmp	al,DEVWRT	; 8
 25871 0000467A 7404                    	je	short chkext
 25872 0000467C 3C09                    	cmp	al,DEVWRTV	; 9
 25873 0000467E 7538                    	jne	short chardev2
 25874                                  
 25875                                  	; 16/12/2022
 25876                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25877                                  	;;cmp	byte [es:bx+2],4
 25878                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25879                                  	;JZ	short chkext		;AN000; >32mb   yes
 25880                                  	;;cmp	byte [es:bx+2],8
 25881                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25882                                  	;JZ	short chkext		;AN000; >32mb   yes
 25883                                  	;;cmp	byte [es:bx+2],9
 25884                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25885                                  	;				;AN000; >32mb write/verify ?
 25886                                  	;JNZ	short chardev2		;AN000; >32mb no
 25887                                  chkext:
 25888 00004680 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25889 00004683 7255                    	JC	short dev_exit		;AN000;LB. done
 25890                                  
 25891                                  	;test	byte [si+4],2
 25892 00004685 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25893 00004689 741D                    	JZ	short chksector		;AN000;>32mb   no
 25894 0000468B 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25895 0000468F 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25896 00004693 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25897 0000469A 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25898 0000469E 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25899 000046A2 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25900 000046A6 EB10                    	JMP	short chardev2		;AN000; >32mb
 25901                                  chksector:				;AN000; >32mb
 25902 000046A8 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25903 000046AE 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25904                                  	;mov	word [es:bx+3],8107h
 25905 000046B0 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25906                                  					;AN000; >32mb
 25907 000046B6 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25908                                  
 25909                                  chardev2:				;AN000;
 25910                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25911                                  	; preserved
 25912                                  
 25913                                  	;mov	ax,[si+6]
 25914 000046B8 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25915 000046BB 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25916 000046BF 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25917 000046C4 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25918                                  
 25919                                  	;mov	ax,[si+8]
 25920 000046C9 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25921 000046CC 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25922 000046D0 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25923                                  
 25924                                  	; MSDOS 6.0
 25925 000046D5 E83A01                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25926 000046D8 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25927                                  
 25928                                  dev_exit:
 25929                                  	;LeaveCrit critDevice
 25930                                  	;call	LCritDevice
 25931                                  	;retn
 25932                                  	; 18/12/2022
 25933 000046DA E985CC                  	jmp	LCritDevice
 25934                                  
 25935                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25936                                  ; 22/11/2022
 25937                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25938                                  
 25939                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25940                                  ;---------------------------------------------------------------------------
 25941                                  ;
 25942                                  ; Procedure Name : SETREAD, SETWRITE
 25943                                  ;
 25944                                  ; Inputs:
 25945                                  ;	DS:BX = Transfer Address
 25946                                  ;	CX = Record Count
 25947                                  ;	DX = Starting Record
 25948                                  ;	AH = Media Byte
 25949                                  ;	AL = Unit Code
 25950                                  ; Function:
 25951                                  ;	Set up the device call header at DEVCALL
 25952                                  ; Output:
 25953                                  ;	ES:BX Points to DEVCALL
 25954                                  ; No other registers effected
 25955                                  ;
 25956                                  ;---------------------------------------------------------------------------
 25957                                  
 25958                                  SETREAD:
 25959 000046DD 57                      	PUSH	DI
 25960 000046DE 51                      	PUSH	CX
 25961 000046DF 50                      	PUSH	AX
 25962 000046E0 B104                    	MOV	CL,DEVRD ; mov cl,4
 25963                                  SETCALLHEAD:
 25964 000046E2 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25965 000046E4 16                      	PUSH	SS
 25966 000046E5 07                      	POP	ES
 25967                                  					; DEVCALL is in DOSDATA
 25968 000046E6 BF[5A03]                	MOV	DI,DEVCALL
 25969                                  
 25970 000046E9 AA                      	STOSB				; length
 25971 000046EA 58                      	POP	AX			; 
 25972 000046EB AA                      	STOSB				; Unit
 25973 000046EC 50                      	PUSH	AX
 25974 000046ED 88C8                    	MOV	AL,CL
 25975 000046EF AA                      	STOSB				; Command code
 25976 000046F0 31C0                    	XOR	AX,AX
 25977 000046F2 AB                      	STOSW				; Status
 25978 000046F3 83C708                  	ADD	DI,8			; Skip link fields
 25979 000046F6 58                      	POP	AX
 25980 000046F7 86E0                    	XCHG	AH,AL
 25981 000046F9 AA                      	STOSB				; Media byte
 25982 000046FA 86C4                    	XCHG	AL,AH
 25983 000046FC 50                      	PUSH	AX
 25984 000046FD 89D8                    	MOV	AX,BX
 25985 000046FF AB                      	STOSW
 25986                                  
 25987 00004700 8CD8                    	MOV	AX,DS
 25988 00004702 AB                      	STOSW				; Transfer addr
 25989                                  
 25990 00004703 59                      	POP	CX			; Real AX
 25991 00004704 58                      	POP	AX			; Real CX
 25992 00004705 AB                      	STOSW				; Count
 25993                                  
 25994 00004706 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25995 00004707 AB                      	STOSW				; Start
 25996 00004708 91                      	XCHG	AX,CX
 25997 00004709 87D1                    	XCHG	DX,CX
 25998 0000470B 5F                      	POP	DI
 25999                                  					; DEVCALL is in DOSDATA
 26000 0000470C BB[5A03]                	MOV	BX,DEVCALL
 26001 0000470F C3                      	retn
 26002                                  
 26003                                  	;entry	SETWRITE
 26004                                  SETWRITE:
 26005                                  
 26006                                  ; Inputs:
 26007                                  ;	DS:BX = Transfer Address
 26008                                  ;	CX = Record Count
 26009                                  ;	DX = Starting Record
 26010                                  ;	AH = Media Byte
 26011                                  ;	AL = Unit Code
 26012                                  ; Function:
 26013                                  ;	Set up the device call header at DEVCALL
 26014                                  ; Output:
 26015                                  ;	ES:BX Points to DEVCALL
 26016                                  ; No other registers effected
 26017                                  
 26018 00004710 57                      	PUSH	DI
 26019 00004711 51                      	PUSH	CX
 26020 00004712 50                      	PUSH	AX
 26021 00004713 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26022 00004715 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26023 0000471A EBC6                    	JMP	SHORT SETCALLHEAD
 26024                                  
 26025                                  ; 30/04/2019 - Retro DOS v4.0
 26026                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26027                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26028                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26029                                  
 26030                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26031                                  ;---------------------------------------------------------------------------
 26032                                  ;
 26033                                  ; Procedure Name : RW_SC
 26034                                  ;
 26035                                  ; Inputs:
 26036                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26037                                  ;	 [SC_STATUS]= SC validity status
 26038                                  ;	 [SEQ_SECTOR]= last sector read
 26039                                  ; Function:
 26040                                  ;	Read from or write through secondary cache
 26041                                  ; Output:
 26042                                  ;	ES:BX Points to DEVCALL
 26043                                  ;	carry clear, I/O is not done
 26044                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26045                                  ;	carry set, I/O is done
 26046                                  ;
 26047                                  ;----------------------------------------------------------------------------
 26048                                  
 26049                                  RW_SC:
 26050                                  	; SS override for all variables used.
 26051                                  	
 26052 0000471C 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26053 00004722 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26054 00004724 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26055 0000472A 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26056 0000472C 51                      	PUSH	CX			    ;AN000;LB.
 26057 0000472D 52                      	PUSH	DX			    ;AN000;LB. yes
 26058 0000472E 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26059 0000472F 56                      	PUSH	SI			    ;AN000;LB.
 26060 00004730 06                      	PUSH	ES			    ;AN000;LB.
 26061 00004731 57                      	PUSH	DI			    ;AN000;LB.
 26062                                  
 26063 00004732 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26064 00004737 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26065 0000473D 7408                    	JZ	short doread		    ;AN000;LB. yes
 26066 0000473F E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26067 00004742 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26068                                  scexit4:				    ;AN000;
 26069 00004745 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26070 00004746 C3                      	retn				    ;AN000;LB.
 26071                                  doread: 				    ;AN000;
 26072 00004747 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26073 0000474A 720A                    	JC	short readSC		    ;AN000;LB.
 26074 0000474C 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26075 00004753 F9                      	STC				    ;AN000;LB. set carry
 26076 00004754 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26077                                  readSC: 				    ;AN000;
 26078 00004756 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26079 0000475A 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26080 0000475F 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26081 00004764 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26082                                  	; 24/09/2023
 26083                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26084 00004769 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26085                                  chklow: 						
 26086 0000476B 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26087 0000476E 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26088 00004770 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26089 00004777 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26090 0000477B 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26091                                  readsr:
 26092 0000477F 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26093 00004783 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26094 00004787 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26095 0000478B 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26096                                  
 26097 0000478F 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26098 00004793 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26099 00004797 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26100 0000479B 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26101 0000479F 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26102 000047A5 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26103 000047A9 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26104 000047AD 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26105 000047B1 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26106 000047B5 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26107 000047B9 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26108                                  saveseq2:				    ;AN000;
 26109 000047BD F8                      	CLC				    ;AN000;LB. clear carry
 26110                                  saveseq:				    ;AN000;	
 26111 000047BE 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26112 000047C2 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26113 000047C6 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26114 000047CA 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26115 000047CE EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26116                                  scexit2:				    ;AN000;LB.
 26117 000047D0 F8                      	CLC				    ;AN000;LB.	clear carry
 26118                                  scexit: 				    ;AN000;		
 26119 000047D1 5F                      	POP	DI			    ;AN000;LB.
 26120 000047D2 07                      	POP	ES			    ;AN000;LB. restore registers
 26121 000047D3 5E                      	POP	SI			    ;AN000;LB.
 26122 000047D4 1F                      	POP	DS			    ;AN000;LB.
 26123 000047D5 5A                      	POP	DX			    ;AN000;LB.
 26124 000047D6 59                      	POP	CX			    ;AN000;LB.
 26125 000047D7 C3                      	retn				    ;AN000;LB.
 26126                                  
 26127                                  ;Break	<IN_SC -- check if in secondary cache>
 26128                                  ;--------------------------------------------------------------------------
 26129                                  ;
 26130                                  ; Procedure Name : IN_SC
 26131                                  ;
 26132                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26133                                  ;	   [CURSC_DRIVE]= current SC drive
 26134                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26135                                  ;	   [SC_CACHE_COUNT]= SC count
 26136                                  ;	   [HIGH_SECTOR]:DX= sector number
 26137                                  ; Function:
 26138                                  ;	Check if the sector is in secondary cache
 26139                                  ; Output:
 26140                                  ;	carry clear, in SC
 26141                                  ;	   CX= the index in the secondary cache
 26142                                  ;	carry set, not in SC
 26143                                  ;
 26144                                  ;---------------------------------------------------------------------------
 26145                                  
 26146                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26147                                  IN_SC:
 26148                                  	; SS override for all variables used
 26149 000047D8 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26150 000047DC 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26151 000047E1 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26152 000047E3 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26153 000047E7 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26154 000047E9 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26155 000047EE 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26156                                  	; 24/09/2023
 26157                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26158 000047F3 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26159 000047F5 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26160 000047FA 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26161 000047FC F8                      	CLC				    ;AN000;;LB. clear carry
 26162                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26163                                  	; 16/12/2022
 26164 000047FD C3                      	retn	; 30/04/2019
 26165                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26166                                  	;jmp	short inexit
 26167                                  
 26168                                  outrange2:				    ;AN000;;LB. set carry
 26169 000047FE F9                      	STC				    ;AN000;;LB.
 26170                                  inexit: 				    ;AN000;;LB.
 26171 000047FF C3                      	retn				    ;AN000;;LB.
 26172                                  
 26173                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26174                                  ;---------------------------------------------------------------------------
 26175                                  ;
 26176                                  ; Procedure Name : Invalidate_Sc
 26177                                  ;
 26178                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26179                                  ;	   [CURSC_DRIVE]= current SC drive
 26180                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26181                                  ;	   [SC_CACHE_COUNT]= SC count
 26182                                  ;	   [SC_STATUS]= SC status word
 26183                                  ;	   [HIGH_SECTOR]:DX= sector number
 26184                                  ;
 26185                                  ; Function:
 26186                                  ;	invalidate secondary cache if in there
 26187                                  ; Output:
 26188                                  ;	[SC_STATUS] is updated
 26189                                  ;---------------------------------------------------------------------------
 26190                                  
 26191                                  INVALIDATE_SC:
 26192                                  	; SS override for all variables used
 26193                                  
 26194 00004800 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26195 00004803 720C                    	JC	short outrange		    ;AN000;;LB. no
 26196 00004805 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26197 00004808 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26198 0000480A F7D0                    	NOT	AX			    ;AN000;;LB.
 26199 0000480C 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26200                                  outrange:				    ;AN000;;LB.
 26201 00004811 C3                      	retn				    ;AN000;;LB.
 26202                                  
 26203                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26204                                  ; 22/11/2022
 26205                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26206                                  
 26207                                  ;Break	<VIRREAD- virtually read data into buffer>
 26208                                  ;--------------------------------------------------------------------------
 26209                                  ;
 26210                                  ; Procedure Name : SC_FLAG
 26211                                  ;
 26212                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26213                                  ;		     1, continuous sectors were read into SC
 26214                                  ; Function:
 26215                                  ;	   Move data from SC to buffer
 26216                                  ; Output:
 26217                                  ;	 carry clear, data is moved to buffer
 26218                                  ;	 carry set, bad sector or exceeds maximum sector
 26219                                  ;	   SC_FLAG =0
 26220                                  ;	   CALLSCNT=1
 26221                                  ;	   SC_STATUS= -1 if succeeded
 26222                                  ;     
 26223                                  ;		       0 if failed
 26224                                  ;--------------------------------------------------------------------------
 26225                                  
 26226                                  VIRREAD:
 26227                                  	; SS override for all variables used
 26228                                  
 26229 00004812 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26230 00004818 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26231 0000481A 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26232 0000481E 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26233 00004822 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26234 00004826 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26235 0000482A 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26236 00004830 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26237                                  
 26238                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26239 00004837 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26240 0000483D 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26241 0000483F 1E                      	PUSH	DS			    ;AN000;;LB.
 26242 00004840 56                      	PUSH	SI			    ;AN000;;LB.
 26243 00004841 06                      	PUSH	ES			    ;AN000;;LB.
 26244 00004842 57                      	PUSH	DI			    ;AN000;;LB.
 26245 00004843 52                      	PUSH	DX			    ;AN000;;LB.
 26246 00004844 51                      	PUSH	CX			    ;AN000;;LB.
 26247 00004845 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26248 00004847 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26249 0000484A 59                      	POP	CX
 26250 0000484B 5A                      	POP	DX			    ;AN000;;LB.
 26251 0000484C 5F                      	POP	DI			    ;AN000;;LB.
 26252 0000484D 07                      	POP	ES			    ;AN000;;LB.
 26253 0000484E 5E                      	POP	SI			    ;AN000;;LB.
 26254 0000484F 1F                      	POP	DS			    ;AN000;;LB.
 26255 00004850 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26256                                  scerror:				    ;AN000;
 26257 00004852 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26258 00004859 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26259 00004860 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26260 00004866 F9                      	STC				    ;AN000;;LB. carry set
 26261 00004867 C3                      	retn				    ;AN000;;LB.
 26262                                  sc2end: 				    ;AN000;
 26263 00004868 F8                      	CLC				    ;AN000;;LB. carry clear
 26264 00004869 C3                      	retn				    ;AN000;;LB.
 26265                                  
 26266                                  ; 30/04/2019 - Retro  DOS v4.0
 26267                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26268                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26269                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26270                                  
 26271                                  ;Break	<SC2BUF- move data from SC to buffer>
 26272                                  ;----------------------------------------------------------------------------
 26273                                  ;
 26274                                  ; Procedure Name : SC2BUF
 26275                                  ;
 26276                                  ; Inputs:  [SC_STATUS] = SC validity status
 26277                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26278                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26279                                  ; Function:
 26280                                  ;	   Move data from SC to buffer
 26281                                  ; Output:
 26282                                  ;	   carry clear, in SC  and data is moved
 26283                                  ;	   carry set, not in SC and data is not moved
 26284                                  ;---------------------------------------------------------------------------
 26285                                  
 26286                                  SC2BUF:
 26287                                  	; SS override for all variables used
 26288 0000486A E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26289                                  	;JC	short noSC		    ;AN000;LB. no
 26290                                  	; 24/09/2023
 26291 0000486D 723D                    	jc	short sexit
 26292 0000486F B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26293 00004872 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26294 00004874 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26295 00004879 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26296                                  ;entry SC2BUF2
 26297                                  SC2BUF2:				    ;AN000;
 26298                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26299                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26300                                  	; 24/09/2023
 26301 0000487B 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26302 0000487F 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26303 00004880 F7E1                    	mul	cx
 26304 00004882 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26305 00004887 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26306 0000488C 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26307 0000488E 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26308 00004890 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26309 00004895 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26310                                  	; 24/09/2023
 26311                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26312 0000489A D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26313                                  ;entry MOVWORDS
 26314                                  MOVWORDS:				    ;AN000;
 26315 0000489C 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26316 000048A2 7403                    	JZ	short nodd		    ;AN000;LB. no
 26317 000048A4 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26318 000048A6 66                      	DB	66H			    ;AN000;LB. use double word move
 26319                                  nodd:
 26320 000048A7 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26321 000048A9 F8                      	CLC				    ;AN000;LB. clear carry
 26322 000048AA C3                      	retn				    ;AN000;LB. exit
 26323                                  noSC:					    ;AN000;
 26324 000048AB F9                      	STC				    ;AN000;LB. set carry
 26325                                  sexit:					    ;AN000;
 26326 000048AC C3                      	retn				    ;AN000;LB.
 26327                                  
 26328                                  ;============================================================================
 26329                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26330                                  ;============================================================================
 26331                                  ; 29/07/2018 - Retro DOS v3.0
 26332                                  ; 19/05/2019 - Retro DOS v4.0
 26333                                  
 26334                                  ;	TITLE	MKNODE - Node maker
 26335                                  ;	NAME	MKNODE
 26336                                  
 26337                                  ;**	MKNODE.ASM
 26338                                  ;----------------------------------------------------------------------------
 26339                                  ;	Low level routines for making a new local file system node
 26340                                  ;	and filling in an SFT from a directory entry
 26341                                  ;
 26342                                  ;	BUILDDIR
 26343                                  ;	SETDOTENT
 26344                                  ;	MakeNode
 26345                                  ;	NEWENTRY
 26346                                  ;	FREEENT
 26347                                  ;	NEWDIR
 26348                                  ;	DOOPEN
 26349                                  ;	RENAME_MAKE
 26350                                  ;	CHECK_VIRT_OPEN
 26351                                  ;
 26352                                  ;	Revision history:
 26353                                  ;
 26354                                  ;	 AN000	version 4.0  Jan. 1988
 26355                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26356                                  
 26357                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26358                                  ;----------------------------------------------------------------------------
 26359                                  ;
 26360                                  ; Procedure Name : BUILDDIR,NEWDIR
 26361                                  ;
 26362                                  ; Inputs:
 26363                                  ;       ES:BP Points to DPB
 26364                                  ;       [THISSFT] Set if using NEWDIR entry point
 26365                                  ;               (used by ALLOCATE)
 26366                                  ;       [LASTENT] current last valid entry number in directory if no free
 26367                                  ;               entries
 26368                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26369                                  ; Function:
 26370                                  ;       Grow directory if no free entries and not root
 26371                                  ; Outputs:
 26372                                  ;       CARRY SET IF FAILURE
 26373                                  ;       ELSE
 26374                                  ;          AX entry number of new entry
 26375                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26376                                  ;               AX = first entry of new dir
 26377                                  ;       GETENT should be called to set [LASTENT]
 26378                                  ;
 26379                                  ;----------------------------------------------------------------------------
 26380                                  
 26381                                  ; 19/05/2019 - Retro DOS v4.0
 26382                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26383                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26384                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26385                                  
 26386                                  BUILDDIR:
 26387                                  	; 29/07/2018 - Retro DOS v3.0
 26388                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26389                                  
 26390 000048AD A1[D805]                        MOV     AX,[ENTFREE]
 26391 000048B0 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26392                                  	;JZ	short CHECK_IF_ROOT
 26393                                          ;CLC
 26394                                          ;retn
 26395                                  	; 24/09/2023
 26396 000048B3 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26397                                  
 26398                                  CHECK_IF_ROOT:
 26399 000048B5 833E[C205]00                    CMP     word [DIRSTART],0
 26400 000048BA 7502                            JNZ	short NEWDIR
 26401                                          ;STC
 26402                                  	; 24/09/2023
 26403                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26404                                  builddir_cmc_retn:
 26405                                  	; 24/09/2023
 26406 000048BC F5                      	cmc	; cf=1 <-> cf=0
 26407                                  builddir_retn:
 26408 000048BD C3                              retn				; Can't grow root
 26409                                  
 26410                                  	;entry   NEWDIR
 26411                                  NEWDIR: 
 26412 000048BE 8B1E[C205]              	MOV     BX,[DIRSTART]
 26413 000048C2 09DB                            OR      BX,BX
 26414 000048C4 7405                            JZ	short NULLDIR
 26415 000048C6 E82806                  	call	GETEOF
 26416 000048C9 72F2                            jc	short builddir_retn	; Screw up
 26417                                  NULLDIR:
 26418 000048CB B90100                          MOV     CX,1
 26419 000048CE E83905                  	call	ALLOCATE
 26420 000048D1 72EA                            jc	short  builddir_retn
 26421 000048D3 8B16[C205]                      MOV     DX,[DIRSTART]
 26422 000048D7 09D2                            OR      DX,DX
 26423 000048D9 750D                            JNZ	short ADDINGDIR
 26424 000048DB E8DAF5                  	call	SETDIRSRCH
 26425 000048DE 72DD                            jc	short  builddir_retn
 26426 000048E0 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26427 000048E6 EB29                            JMP     SHORT GOTDIRREC
 26428                                  ADDINGDIR:
 26429 000048E8 53                              PUSH    BX
 26430 000048E9 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26431 000048ED E82D0C                          call	IsEOF
 26432 000048F0 5B                              POP     BX
 26433 000048F1 7217                            JB	short NOTFIRSTGROW
 26434                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26435 000048F3 891E[BC05]                      MOV     [CLUSNUM],BX
 26436                                  	; 24/09/2023
 26437                                  	;PUSH	CX ; (not necessary)
 26438 000048F7 50                      	PUSH	AX
 26439 000048F8 55                      	PUSH	BP
 26440 000048F9 B401                            MOV     AH,1			; CLUSNUM update
 26441                                  	; 15/12/2022
 26442 000048FB 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26443                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26444                                  	;;mov	dl,[es:bp+0]
 26445                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26446 000048FF 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26447 00004903 89DD                            MOV     BP,BX 			; CLUSNUM
 26448 00004905 E8E7DD                  	call	FastOpen_Update
 26449 00004908 5D                              POP     BP
 26450 00004909 58                              POP     AX
 26451                                  	; 24/09/2023
 26452                                          ;POP	CX
 26453                                  
 26454                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26455                                  NOTFIRSTGROW:
 26456 0000490A 89DA                            MOV     DX,BX
 26457 0000490C 30DB                            XOR     BL,BL
 26458 0000490E E8CC04                  	call	FIGREC
 26459                                  GOTDIRREC:
 26460                                  	;mov	cl,[es:bp+4]
 26461 00004911 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26462 00004915 FEC1                            INC     CL
 26463 00004917 30ED                            XOR     CH,CH
 26464                                  ZERODIR:
 26465 00004919 51                              PUSH    CX
 26466                                  	; 22/09/2023
 26467                                  	;;mov	byte [ALLOWED],18h
 26468                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26469 0000491A B0FF                            MOV     AL,0FFH
 26470                                          ;call	GETBUFFR
 26471 0000491C E82210                          call	GETBUFFRD ; *
 26472 0000491F 7302                    	JNC	short GET_SSIZE
 26473 00004921 59                              POP     CX
 26474 00004922 C3                              retn
 26475                                  
 26476                                  GET_SSIZE:
 26477                                  	;mov	cx,[es:bp+2]
 26478 00004923 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26479 00004927 06                              PUSH    ES
 26480 00004928 C43E[E205]                      LES     DI,[CURBUF]
 26481                                  	;or	byte [es:di+5],4
 26482 0000492C 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26483 00004931 57                              PUSH    DI
 26484                                  	;;add	di,16	; MSDOS 3.3
 26485                                  	;add	di,20	; MSDOS 6.0	
 26486 00004932 83C714                          ADD     DI,BUFINSIZ
 26487 00004935 31C0                            XOR     AX,AX
 26488 00004937 D1E9                            SHR     CX,1
 26489 00004939 F3AB                            REP     STOSW
 26490 0000493B 7301                            JNC	short EVENZ
 26491 0000493D AA                              STOSB
 26492                                  EVENZ:
 26493 0000493E 5F                              POP     DI
 26494                                  
 26495                                  	; MSDOS 6.0
 26496 0000493F 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26497                                  					;LB. if already dirty		  ;AN000;
 26498 00004944 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26499 00004946 E8FF11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26500                                          
 26501                                  	;or	byte [es:di+5],40h
 26502 00004949 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26503                                  yesdirty7:
 26504 0000494E 07                              POP	ES
 26505 0000494F 59                              POP	CX
 26506                                  
 26507                                  	; 19/05/2019 - Retro DOS v4.0
 26508                                  
 26509                                  	; MSDOS 3.3
 26510                                  	;INC	DX
 26511                                  
 26512                                  	; MSDOS 6.0
 26513                                  	; 24/09/2023
 26514                                  	;add	dx,1
 26515                                  	;;adc	word [HIGH_SECTOR],0
 26516                                  	;; 24/09/2023
 26517                                  	;; ax=0
 26518                                  	;adc	[HIGH_SECTOR],ax ; 0
 26519                                  	; 24/09/2023
 26520 00004950 42                      	inc	dx
 26521 00004951 7504                    	jnz	short loop_zerodir
 26522 00004953 FF06[0706]              	inc	word [HIGH_SECTOR]
 26523                                  loop_zerodir:
 26524 00004957 E2C0                            LOOP    ZERODIR
 26525                                  
 26526 00004959 A1[4803]                        MOV     AX,[LASTENT]
 26527 0000495C 40                              INC     AX
 26528                                  	; 24/09/2023
 26529                                  	; cf=0
 26530                                  	;CLC
 26531 0000495D C3                              retn
 26532                                  
 26533                                  ;--------------------------------------------------------------------------
 26534                                  ;
 26535                                  ; Procedure Name : SETDOTENT
 26536                                  ;
 26537                                  ; set up a . or .. directory entry for a directory.
 26538                                  ;
 26539                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26540                                  ;               AX contains ". " or ".."
 26541                                  ;               DX contains first cluster of entry
 26542                                  ;
 26543                                  ;----------------------------------------------------------------------------
 26544                                  
 26545                                  SETDOTENT:
 26546                                  ;	Fill in name field
 26547 0000495E AB                              STOSW
 26548 0000495F B90400                          MOV     CX,4
 26549 00004962 B82020                          MOV     AX,"  " ; 2020h
 26550 00004965 F3AB                            REP     STOSW
 26551 00004967 AA                              STOSB
 26552                                  
 26553                                  ;	Set up attribute
 26554                                  	;mov	al, 10h
 26555 00004968 B010                            MOV     AL,attr_directory
 26556 0000496A AA                              STOSB
 26557                                  
 26558                                  ;	Initialize time and date of creation
 26559 0000496B 83C70A                          ADD     DI,10
 26560 0000496E 8B36[9E05]                      MOV     SI,[THISSFT]
 26561                                  	;mov	ax,[si+0Dh]
 26562 00004972 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26563 00004975 AB                              STOSW
 26564                                  	;mov	ax,[si+0Fh]
 26565 00004976 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26566 00004979 AB                      	STOSW
 26567                                  
 26568                                  ;	Set up first cluster field
 26569 0000497A 89D0                            MOV     AX,DX
 26570 0000497C AB                              STOSW
 26571                                  
 26572                                  ;	0 file size
 26573 0000497D 31C0                            XOR     AX,AX
 26574 0000497F AB                              STOSW
 26575 00004980 AB                              STOSW
 26576 00004981 C3                              retn
 26577                                  
 26578                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26579                                  ;---------------------------------------------------------------------------
 26580                                  ;
 26581                                  ; Procedure Name : MakeNode
 26582                                  ;
 26583                                  ; Inputs:
 26584                                  ;       AL - attribute to create
 26585                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26586                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26587                                  ;               (AH ignored on dirs and devices)
 26588                                  ;
 26589                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26590                                  ;               a name already existant is ALWAYS an error in these cases.
 26591                                  ;
 26592                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26593                                  ;               terminated)
 26594                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26595                                  ;               ( = -1 if current dir not involved, else
 26596                                  ;                Points to first char after last "/" of current dir part)
 26597                                  ;       [THISCDS] Points to CDS being used
 26598                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26599                                  ; Function:
 26600                                  ;       Make a new node
 26601                                  ; Outputs:
 26602                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26603                                  ;       CARRY SET IF ERROR
 26604                                  ;          AX = 1 A node by this name exists and is a directory
 26605                                  ;          AX = 2 A new node could not be created
 26606                                  ;          AX = 3 A node by this name exists and is a disk file
 26607                                  ;               (AH was NZ on input)
 26608                                  ;          AX = 4 Bad Path
 26609                                  ;               SI return from GetPath maintained
 26610                                  ;          AX = 5 Attribute mismatch
 26611                                  ;          AX = 6 Sharing Violation
 26612                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26613                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26614                                  ;       ELSE
 26615                                  ;          AX = 0 Disk Node
 26616                                  ;          AX = 3 Device Node (error in some cases)
 26617                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26618                                  ;               containing new node.
 26619                                  ;          [CURBUF+2]:BX Points to entry
 26620                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26621                                  ;          [THISSFT] is filled in
 26622                                  ;               sf_mode = unchanged.
 26623                                  ;          Attribute byte in entry is input AL
 26624                                  ; DS preserved, others destroyed
 26625                                  ;
 26626                                  ;-------------------------------------------------------------------------
 26627                                  
 26628                                  ; 19/05/2019 - Retro DOS v4.0
 26629                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26630                                  
 26631                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26632                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26633                                  
 26634                                  MakeNode:
 26635                                  	;mov	word [CREATING],0E5FFh
 26636 00004982 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26637 00004988 50                              PUSH    AX              ; Save AH value
 26638 00004989 C606[4C03]00            	MOV	byte [NoSetDir],0
 26639 0000498E A2[6D05]                	MOV	[SATTRIB],AL
 26640 00004991 E887F5                  	call	GetPathNoSet
 26641 00004994 88CA                            MOV     DL,CL           ; Save CL info
 26642 00004996 89C1                            MOV     CX,AX           ; Device ID to CH
 26643 00004998 58                              POP     AX              ; Get back AH
 26644 00004999 732E                            JNC	short make_exists ; File existed
 26645 0000499B 7505                            JNZ	short make_err_4 ; Path bad
 26646 0000499D 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26647 000049A0 7406                            JZ	short make_type	; Name simply not found, and no metas
 26648                                  make_err_4:
 26649 000049A2 B004                            MOV     AL,4            ; case 1 bad path
 26650                                  make_err_ret:
 26651 000049A4 30E4                            XOR     AH,AH
 26652 000049A6 F9                              STC
 26653                                  ;make_retn:	; 22/11/2022
 26654 000049A7 C3                              retn
 26655                                  
 26656                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26657                                  RENAME_MAKE:
 26658                                  make_type:
 26659                                  ;Extended Open hooks
 26660                                  	; MSDOS 6.0
 26661                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26662 000049A8 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26663 000049AD 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26664 000049AF 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26665                                  					;FT. set for extended open ;AN000;
 26666                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26667 000049B4 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26668 000049B9 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26669 000049BB F9                      	STC				;FT. set carry			;AN000;
 26670 000049BC B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26671                                  	; 22/11/2022
 26672                                  make_retn:
 26673                                  	;return
 26674 000049BF C3                      	retn				;FT.				;AN000;
 26675                                  
 26676                                  ;	Extended Open hooks
 26677                                  
 26678                                  make_type2:
 26679 000049C0 C43E[9E05]                      LES     DI,[THISSFT]
 26680 000049C4 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26681 000049C6 F9                              STC                     ; Not found
 26682 000049C7 EB5A                            JMP     short make_new
 26683                                  
 26684                                  ; The node exists. It may be either a device, directory or file:
 26685                                  ;   Zero set => directory
 26686                                  ;   High bit of CH on => device
 26687                                  ;   else => file
 26688                                  
 26689                                  make_exists:
 26690 000049C9 7448                            JZ	short make_exists_dir
 26691 000049CB B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26692                                  	;test	byte [ATTRIB],18h
 26693 000049CD F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26694 000049D2 753B                            JNZ	short make_err_ret_5
 26695                                  				; Cannot already exist as Disk or Device Node
 26696                                                                  ;       if making DIR or Volume ID
 26697 000049D4 08ED                            OR      CH,CH
 26698 000049D6 781A                            JS	short make_share ; No further checks on attributes if device
 26699 000049D8 08E4                            OR      AH,AH
 26700 000049DA 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26701 000049DC 51                              PUSH    CX              ; Save device ID
 26702 000049DD 8E06[E405]                      MOV     ES,[CURBUF+2]
 26703                                  	;mov	ch,[es:bx+0Bh]
 26704 000049E1 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26705                                  	;test	ch,1
 26706 000049E5 F6C501                  	test	CH,attr_read_only
 26707 000049E8 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26708 000049EA E8D0F7                  	call	MatchAttributes
 26709 000049ED 59                              POP     CX              ; Devid back in CH
 26710 000049EE 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26711 000049F0 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26712                                  make_share:
 26713 000049F2 30E4                            XOR     AH,AH
 26714 000049F4 50                              PUSH    AX              ; Save Disk or Device node
 26715 000049F5 51                              PUSH    CX              ; Save Device ID
 26716 000049F6 88EC                            MOV     AH,CH           ; Device ID to AH
 26717 000049F8 E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 26718 000049FB C43E[9E05]                      LES     DI,[THISSFT]
 26719 000049FF 56                      	push	si
 26720 00004A00 53                      	push	bx		; Save CURBUF pointers
 26721 00004A01 E86729                  	call	ShareEnter
 26722 00004A04 735A                            jnc	short MakeEndShare
 26723                                  
 26724                                  ; User failed request.
 26725 00004A06 5B                      	pop	bx
 26726 00004A07 5E                      	pop	si
 26727 00004A08 59                      	pop	cx
 26728 00004A09 58                      	pop	ax
 26729                                  
 26730                                  Make_Share_ret:
 26731 00004A0A B006                            MOV     AL,6
 26732 00004A0C EB96                            JMP	short make_err_ret
 26733                                  
 26734                                  make_err_ret_5P:
 26735 00004A0E 59                              POP     CX              ; Get back device ID
 26736                                  make_err_ret_5:
 26737 00004A0F B005                            MOV     AL,5            ; Attribute mismatch
 26738                                          ; 22/11/2022
 26739 00004A11 EB91                    	JMP     short make_err_ret
 26740                                  
 26741                                  make_exists_dir:
 26742 00004A13 B001                            MOV     AL,1            ; exists as directory, always an error
 26743                                  	; 22/11/2022
 26744 00004A15 EB8D                    	JMP     short make_err_ret
 26745                                  
 26746                                  make_save:
 26747 00004A17 50                              PUSH    AX              ; Save whether Disk or File
 26748 00004A18 89C8                            MOV     AX,CX           ; Device ID to AH
 26749 00004A1A E87400                          CALL    NEWENTRY
 26750 00004A1D 58                              POP     AX              ; 0 if Disk, 3 if File
 26751 00004A1E 739F                            jnc	short make_retn
 26752 00004A20 B002                            MOV     AL,2            ; create failed case 2
 26753                                  make_save_retn:
 26754 00004A22 C3                              retn
 26755                                  
 26756                                  make_new:
 26757 00004A23 E8F1FF                          call    make_save
 26758 00004A26 72FA                            jc	short make_save_retn	; case 2 fail
 26759                                  	;test	byte [ATTRIB],10h
 26760 00004A28 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26761 00004A2D 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26762                                  					; so don't tell the sharer about them
 26763 00004A2F 50                      	push	ax
 26764 00004A30 53                      	push	bx
 26765 00004A31 56                      	push	si		
 26766 00004A32 E83629                          call	ShareEnter
 26767 00004A35 5E                      	pop	si
 26768 00004A36 5B                      	pop	bx
 26769 00004A37 58                      	pop	ax
 26770 00004A38 73E8                    	jnc	short make_save_retn
 26771                                  
 26772                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26773                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26774                                  ; possible: delete the newly created directory entry and return share_error.
 26775                                  
 26776 00004A3A 50                              PUSH    AX
 26777 00004A3B C43E[E205]                      LES     DI,[CURBUF]
 26778                                  	;mov	byte [es:bx],0E5h
 26779 00004A3F 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26780                                  	
 26781                                  	; MSDOS 6.0
 26782                                  	;test	byte [es:di+5],40h
 26783 00004A43 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26784                                  					;LB. if already dirty		  ;AN000;
 26785 00004A48 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26786                                  	; 22/11/2022
 26787 00004A4A E8FB10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26788                                  	;or	byte [es:di+5],40h
 26789 00004A4D 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26790                                  yesdirty8:
 26791 00004A52 C42E[8A05]                      LES     BP,[THISDPB]
 26792                                  	; 15/12/2022
 26793 00004A56 268A4600                        mov	al,[ES:BP]
 26794                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26795                                  	;;mov	al,[es:bp+0]
 26796                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26797 00004A5A E8E60F                          call	FLUSHBUF		; write out buffer.
 26798 00004A5D 58                              POP     AX
 26799 00004A5E EBAA                            jmp	short Make_Share_ret
 26800                                  
 26801                                  ; We have found an existing file. We have also entered it into the share set.
 26802                                  ; At this point we need to call newentry to correctly address the problem of
 26803                                  ; getting rid of old data (create an existing file) or creating a new
 26804                                  ; directory entry (create a new file). Unfortunately, this operation may
 26805                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26806                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26807                                  ; the share set now, do the operation and then reassert the share access.
 26808                                  ;
 26809                                  ; We are allowed to do this! There is no window! After all, we are in
 26810                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26811                                  
 26812                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26813                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26814                                  
 26815                                  MakeEndShare:
 26816 00004A60 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26817 00004A64 31C0                            XOR     AX,AX
 26818 00004A66 E8A9C8                  	call	ECritSFT
 26819 00004A69 268705                  	xchg	AX,[ES:DI]
 26820                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26821 00004A6C 50                      	push	ax
 26822 00004A6D 57                      	push	di
 26823 00004A6E 06                      	push	es
 26824 00004A6F 9C                              PUSHF
 26825 00004A70 E8F328                          call	ShareEnd                ; remove sharing
 26826 00004A73 9D                              POPF
 26827 00004A74 07                      	pop	es
 26828 00004A75 5F                      	pop	di
 26829 00004A76 268F05                          pop	word [ES:DI]	
 26830                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26831 00004A79 E8B1C8                  	call	LCritSFT
 26832                                  	; 22/11/2022
 26833                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26834 00004A7C 5B                      	pop	bx
 26835 00004A7D 5E                      	pop	si
 26836 00004A7E 59                      	pop	cx
 26837 00004A7F 58                      	pop	ax
 26838 00004A80 E894FF                          CALL    make_save
 26839                                  
 26840                                  ; If the user failed, we do not reenter into the sharing set.
 26841                                  
 26842 00004A83 729D                            jc	short make_save_retn	; bye if error
 26843 00004A85 50                      	push	ax
 26844 00004A86 53                      	push	bx
 26845 00004A87 56                      	push	si
 26846 00004A88 9C                              PUSHF
 26847 00004A89 E8DF28                          call	ShareEnter
 26848 00004A8C 9D                              POPF
 26849 00004A8D 5E                      	pop	si
 26850 00004A8E 5B                      	pop	bx
 26851 00004A8F 58                      	pop	ax
 26852                                  
 26853                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26854                                  
 26855                                  makeendshare_retn:
 26856 00004A90 C3                              retn
 26857                                  
 26858                                  ;---------------------------------------------------------------------------
 26859                                  ;
 26860                                  ; Procedure Name : NEWENTRY
 26861                                  ;
 26862                                  ; Inputs:
 26863                                  ;       [THISSFT] set
 26864                                  ;       [THISDPB] set
 26865                                  ;       [LASTENT] current last valid entry number in directory if no free
 26866                                  ;               entries
 26867                                  ;       [VOLID] set if a volume ID was found during search
 26868                                  ;	Attrib Contains attributes for new file
 26869                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26870                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26871                                  ;               NC means file existed (device)
 26872                                  ;               C  means file did not exist
 26873                                  ;       AH = Device ID byte
 26874                                  ;       If FILE
 26875                                  ;           [CURBUF+2]:BX points to start of directory entry
 26876                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26877                                  ;       If device
 26878                                  ;           DS:BX points to start of "fake" directory entry
 26879                                  ;           DS:SI points to dir_first of "fake" directory entry
 26880                                  ;               (has DWORD pointer to device header)
 26881                                  ; Function:
 26882                                  ;       Make a new directory entry
 26883                                  ;       If an old one existed it is truncated first
 26884                                  ; Outputs:
 26885                                  ;       Carry set if error
 26886                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26887                                  ;               vol ID, user FAILed to I 24
 26888                                  ;       else
 26889                                  ;               outputs of DOOPEN
 26890                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26891                                  ;
 26892                                  ;----------------------------------------------------------------------------
 26893                                  
 26894                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26895                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26896                                  
 26897                                  NEWENTRY:
 26898 00004A91 C42E[8A05]              	LES     BP,[THISDPB]
 26899 00004A95 7315                            JNC	short EXISTENT	
 26900 00004A97 803E[4A03]00                    CMP     byte [FAILERR],0
 26901                                  	;STC
 26902                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 26903                                          ; 24/09/2023
 26904 00004A9C 750C                    	jnz	short ERRRET3
 26905 00004A9E E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 26906 00004AA1 72ED                            jc	short makeendshare_retn	; Failed
 26907 00004AA3 E8E3F3                          call	GETENT          ; Point at that free entry
 26908 00004AA6 72E8                            jc	short makeendshare_retn	; Failed
 26909 00004AA8 EB0E                            JMP     SHORT FREESPOT
 26910                                  
 26911                                  ERRRET3:
 26912 00004AAA F9                              STC
 26913                                  newentry_retn:
 26914 00004AAB C3                              retn
 26915                                  
 26916                                  EXISTENT:
 26917 00004AAC 08E4                            OR      AH,AH           ; Check if file is I/O device
 26918 00004AAE 7903                            JNS	short NOT_DEV1
 26919 00004AB0 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26920                                  
 26921                                  NOT_DEV1:
 26922 00004AB3 E82901                          call	FREEENT		; Free cluster chain
 26923 00004AB6 72F3                            jc	short newentry_retn ; Failed
 26924                                  FREESPOT:
 26925                                  	;test	byte [ATTRIB],8
 26926 00004AB8 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26927 00004ABD 7407                            JZ	short NOTVOLID
 26928 00004ABF 803E[7B05]00                    CMP     BYTE [VOLID],0
 26929 00004AC4 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26930                                  NOTVOLID:
 26931 00004AC6 8E06[E405]                      MOV     ES,[CURBUF+2]
 26932 00004ACA 89DF                            MOV     DI,BX
 26933                                  
 26934 00004ACC BE[4B05]                        MOV     SI,NAME1
 26935                                  
 26936 00004ACF B90500                          MOV     CX,5
 26937 00004AD2 F3A5                            REP     MOVSW
 26938 00004AD4 A4                              MOVSB                   ; Move name into dir entry
 26939 00004AD5 A0[6B05]                	MOV	AL,[ATTRIB]
 26940 00004AD8 AA                      	STOSB                   ; Attributes
 26941                                  
 26942                                  ;; File Tagging for Create DOS 4.00
 26943 00004AD9 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26944                                  ;; File Tagging for Create DOS 4.00
 26945                                  
 26946 00004ADB 31C0                            XOR     AX,AX
 26947 00004ADD F3AB                            REP     STOSW           ; Zero pad
 26948 00004ADF E813C0                          call	DATE16
 26949 00004AE2 92                              XCHG    AX,DX
 26950 00004AE3 AB                              STOSW                   ; dir_time
 26951 00004AE4 92                              XCHG    AX,DX
 26952 00004AE5 AB                              STOSW                   ; dir_date
 26953 00004AE6 31C0                            XOR     AX,AX
 26954 00004AE8 57                              PUSH    DI              ; Correct SI input value
 26955                                  				; 	(recomputed for new buffer)
 26956 00004AE9 AB                              STOSW                   ; Zero dir_first and size
 26957 00004AEA AB                              STOSW
 26958 00004AEB AB                              STOSW
 26959                                  updnxt:
 26960 00004AEC 8B36[E205]              	MOV	SI,[CURBUF]
 26961                                  
 26962                                  	; 19/05/2019 - Retro DOS v4.0
 26963                                  
 26964                                  	; MSDOS 6.0
 26965 00004AF0 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26966                                  				;LB. if already dirty		  ;AN000;
 26967 00004AF5 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26968 00004AF7 E84E10                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26969                                          
 26970                                  	;or	byte [es:si+5],40h
 26971 00004AFA 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26972                                  yesdirty9:
 26973 00004AFF C42E[8A05]                      LES     BP,[THISDPB]
 26974                                  	; 15/12/2022
 26975 00004B03 268A4600                	MOV	AL,[ES:BP]
 26976                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26977                                  	;;mov	al,[es:bp+0]
 26978                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26979 00004B07 50                              PUSH    AX
 26980 00004B08 53                              PUSH    BX
 26981                                  
 26982                                  ; If we have a file, we need to increment the open ref. count so that
 26983                                  ; we have some protection against invalid media changes if an Int 24
 26984                                  ; error occurs.
 26985                                  ; Do nothing for a device.
 26986                                  
 26987 00004B09 06                      	push	es
 26988 00004B0A 57                      	push	di
 26989 00004B0B C43E[9E05]                      LES     DI,[THISSFT]
 26990                                  	;test	word [es:di+5],80h
 26991                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26992 00004B0F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26993 00004B14 751A                            jnz	short GotADevice
 26994 00004B16 1E                      	push	ds
 26995 00004B17 53                      	push	bx
 26996 00004B18 C51E[8A05]                      LDS     BX,[THISDPB]
 26997                                  	;mov	[es:di+7],bx
 26998 00004B1C 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26999 00004B20 8CDB                            MOV     BX,DS
 27000                                  	;mov	[es:di+9],bx
 27001 00004B22 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 27002 00004B26 5B                      	pop	bx
 27003 00004B27 1F                      	pop	ds ; need to use DS for segment later on
 27004 00004B28 E8B8FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 27005 00004B2B C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 27006                                  GotADevice:
 27007 00004B30 5F                      	pop	di
 27008 00004B31 07                      	pop	es
 27009                                  
 27010 00004B32 E80E0F                          call	FLUSHBUF
 27011 00004B35 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 27012 00004B38 5B                              POP     BX
 27013 00004B39 58                              POP     AX
 27014 00004B3A 5E                              POP     SI              ; Get SI input back
 27015 00004B3B 88C4                            MOV     AH,AL           ; Get I/O driver number back
 27016 00004B3D 7301                    	jnc	short DOOPEN    ; Failed
 27017 00004B3F C3                      	retn
 27018                                  	
 27019                                  ;NOTE FALL THROUGH
 27020                                  
 27021                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27022                                  
 27023                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27024                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27025                                  
 27026                                  ; DOOPEN
 27027                                  ;----------------------------------------------------------------------------
 27028                                  ;
 27029                                  ; Inputs:
 27030                                  ;       [THISDPB] points to DPB if file
 27031                                  ;       [THISSFT] points to SFT being used
 27032                                  ;       AH = Device ID byte
 27033                                  ;       If FILE
 27034                                  ;           [CURBUF+2]:BX points to start of directory entry
 27035                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27036                                  ;       If device
 27037                                  ;           DS:BX points to start of "fake" directory entry
 27038                                  ;           DS:SI points to dir_first of "fake" directory entry
 27039                                  ;               (has DWORD pointer to device header)
 27040                                  ; Function:
 27041                                  ;       Fill in SFT from dir entry
 27042                                  ; Outputs:
 27043                                  ;       CARRY CLEAR
 27044                                  ;       sf_ref_count and sf_mode fields not altered
 27045                                  ;       sf_flags high byte = 0
 27046                                  ;       sf_flags low byte = AH except
 27047                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27048                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27049                                  ;       sf_position = 0
 27050                                  ;       If device
 27051                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27052                                  ;           sf_size = 0
 27053                                  ;       If file
 27054                                  ;           sf_firclus sf_size set from entry
 27055                                  ;           sf_devptr = [THISDPB]
 27056                                  ;           sf_cluspos = 0
 27057                                  ;           sf_lstclus = sf_firclus
 27058                                  ;           sf_dirsec sf_dirpos set
 27059                                  ; DS,SI,BX preserved, others destroyed
 27060                                  ;
 27061                                  ;----------------------------------------------------------------------------
 27062                                  
 27063                                  	;entry	DOOPEN
 27064                                  DOOPEN:
 27065                                  ;	Generate and store attribute
 27066                                  
 27067 00004B40 88E6                            MOV     DH,AH           ; AH to different place
 27068 00004B42 C43E[9E05]                      LES     DI,[THISSFT]
 27069                                  	;add	di,4
 27070 00004B46 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27071                                  	; 24/09/2023
 27072 00004B49 31C0                    	xor	ax,ax
 27073                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27074                                  				;   attribute of 0 (for R/O testing etc).
 27075 00004B4B 08F6                            OR      DH,DH           ; See if our assumption good.
 27076 00004B4D 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27077 00004B4F 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27078                                  	;mov	al,[BX+0Bh]
 27079 00004B53 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27080                                  				; If file, get attrib from dir entry
 27081                                  DEV_SFT1:
 27082 00004B56 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27083                                  
 27084                                  ;	Generate and store flags word
 27085                                  
 27086                                  	; 24/09/2023
 27087                                  	;XOR	AX,AX
 27088                                          ; ah=0
 27089 00004B57 88F0                    	MOV     AL,DH
 27090                                  	;or	al,40h
 27091 00004B59 0C40                            OR      AL,devid_file_clean
 27092 00004B5B AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27093                                  
 27094                                  ;	Generate and store device pointer
 27095                                  
 27096 00004B5C 1E                              PUSH    DS
 27097                                  	;lds	ax,[bx+1Ah]
 27098 00004B5D C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27099 00004B60 08F6                            OR      DH,DH
 27100 00004B62 7805                            JS	short DEV_SFT2
 27101                                  
 27102                                  ;hkn; SS override
 27103 00004B64 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27104                                  DEV_SFT2:
 27105 00004B69 AB                              STOSW 			; store offset
 27106 00004B6A 8CD8                            MOV     AX,DS
 27107 00004B6C 1F                              POP     DS
 27108 00004B6D AB                      	STOSW			; store segment
 27109                                  				; ES:DI -> sf_firclus
 27110                                  
 27111                                  ;	Generate pointer to, generate and store first cluster 
 27112                                  ;	(irrelevant for devices)
 27113                                  
 27114 00004B6E 56                              PUSH    SI              ; Save pointer to dir_first
 27115 00004B6F A5                              MOVSW                   ; dir_first -> sf_firclus
 27116                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27117                                  
 27118                                  ;	Copy time/date of last modification
 27119                                  
 27120                                  	;sub	si,6
 27121 00004B70 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27122                                  				; DS:SI->dir_time
 27123 00004B73 A5                              MOVSW                   ; dir_time -> sf_time
 27124                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27125 00004B74 A5                              MOVSW                   ; dir_date -> sf_date
 27126                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27127                                  
 27128                                  ;	Generate and store file size (0 for devices)
 27129                                  
 27130 00004B75 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27131 00004B76 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27132 00004B77 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27133 00004B79 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27134 00004B7A 08F6                            OR      DH,DH
 27135 00004B7C 7904                            JNS	short FILE_SFT1
 27136 00004B7E 31C0                            XOR     AX,AX
 27137 00004B80 89C1                            MOV     CX,AX           ; Devices are open ended
 27138                                  FILE_SFT1:
 27139 00004B82 91                              XCHG    AX,CX
 27140 00004B83 AB                              STOSW                   ; Low word of sf_size
 27141 00004B84 91                              XCHG    AX,CX
 27142 00004B85 AB                              STOSW                   ; High word of sf_size
 27143                                                                  ; ES:DI -> sf_position
 27144                                  ; Initialize position to 0
 27145                                  
 27146 00004B86 31C0                            XOR     AX,AX
 27147 00004B88 AB                              STOSW
 27148 00004B89 AB                              STOSW                   ; sf_position
 27149                                                                  ; ES:DI -> sf_cluspos
 27150                                  
 27151                                  ; Generate cluster optimizations for files
 27152                                  
 27153 00004B8A 08F6                            OR      DH,DH
 27154 00004B8C 7843                            JS	short DEV_SFT3
 27155 00004B8E AB                              STOSW                   ; sf_cluspos ; 19h
 27156                                  	;mov	ax,[bx+1Ah]
 27157 00004B8F 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27158                                  	; 19/05/2019
 27159                                  	; MSDOS 3.3
 27160                                  	;STOSW 			; sf_lstclus ; 1Bh
 27161                                  	; MSDOS 6.0
 27162 00004B92 57                              PUSH	DI              ;AN004; save dirsec offset
 27163                                  	;sub	di,1Bh
 27164 00004B93 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27165                                  	;mov	[es:di+35h],ax
 27166 00004B96 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27167 00004B9A 5F                              POP	DI              ;AN004; restore dirsec offset
 27168                                  
 27169                                  ; DOS 3.3  FastOpen  6/13/86
 27170                                  
 27171 00004B9B 1E                      	PUSH	DS
 27172                                  
 27173                                  ;hkn; SS is DOSDATA
 27174 00004B9C 16                      	push	ss
 27175 00004B9D 1F                      	pop	ds
 27176                                  	;test	byte [FastOpenFlg],4
 27177 00004B9E F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27178 00004BA3 7411                    	JZ	short Not_FastOpen
 27179                                  
 27180                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27181 00004BA5 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27182                                  
 27183                                  	;mov	ax,[si+1]
 27184 00004BA8 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27185 00004BAB AB                              STOSW                   ; sf_dirsec
 27186                                  	; MSDOS 6.0
 27187                                  	;mov	ax,[si+3]
 27188 00004BAC 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27189                                  				;;; changed for >32mb
 27190 00004BAF AB                              STOSW                   ; sf_dirsec
 27191                                  	; 19/08//2018
 27192 00004BB0 8A04                    	mov	al,[SI]
 27193                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27194 00004BB2 AA                              STOSB                   ; sf_dirpos
 27195 00004BB3 1F                              POP	DS
 27196                                          ;JMP	short Next_Name
 27197                                  	; 24/09/2023
 27198 00004BB4 EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27199                                  
 27200                                  ; DOS 3.3  FastOpen  6/13/86
 27201                                  
 27202                                  Not_FastOpen:
 27203                                          ;POP     DS		; normal path
 27204                                  
 27205                                  ;hkn; SS override
 27206                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27207                                  	; 16/12/2022
 27208                                  	; 28/07/2019
 27209 00004BB6 8B36[E205]              	mov	si,[CURBUF]
 27210 00004BBA 1F                      	pop	ds
 27211                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27212                                  	;pop	ds
 27213                                  	;mov	si,[ss:CURBUF]
 27214                                  	
 27215                                  	;mov	ax,[si+6]
 27216 00004BBB 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27217 00004BBE AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27218                                  	; 19/05/2019        
 27219                                  	; MSDOS 6.0
 27220                                  	;mov	ax,[si+8]
 27221 00004BBF 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27222 00004BC2 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27223                                          
 27224 00004BC3 89D8                    	MOV     AX,BX
 27225                                  	;;add	si,16	; MSDOS 3.3	
 27226                                  	;add	si,20	; MSDOS 6.0
 27227 00004BC5 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27228 00004BC8 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27229                                          ;mov	cl,32
 27230 00004BCA B120                    	MOV     CL,dir_entry.size
 27231 00004BCC F6F1                            DIV     CL
 27232 00004BCE AA                              STOSB                   ; sf_dirpos
 27233                                  Next_Name:
 27234 00004BCF EB03                            JMP     SHORT FILE_SFT2
 27235                                  
 27236                                  	; 24/09/2023
 27237                                  	; cf=0 (after 'or' instruction)
 27238                                  DEV_SFT3:
 27239                                  	;add	di,7
 27240 00004BD1 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27241                                  FILE_SFT2:
 27242                                  
 27243                                  ; Copy in the object's name
 27244                                  
 27245 00004BD4 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27246 00004BD6 B90B00                          MOV     CX,11
 27247 00004BD9 F3A4                            REP     MOVSB           ; sf_name
 27248 00004BDB 5E                              POP     SI              ; recover DS:SI -> dir_first
 27249                                  
 27250                                  ;hkn; SS is DOSDATA
 27251 00004BDC 16                              push	ss
 27252 00004BDD 1F                      	pop	ds
 27253                                  	; 24/09/2023
 27254                                  	; cf=0
 27255                                          ;CLC
 27256 00004BDE C3                              retn
 27257                                  
 27258                                  ;---------------------------------------------------------------------------
 27259                                  ;
 27260                                  ; Procedure Name : FREEENT
 27261                                  ;
 27262                                  ; Inputs:
 27263                                  ;       ES:BP -> DPB
 27264                                  ;       [CURBUF] Set
 27265                                  ;       [CURBUF+2]:BX points to directory entry
 27266                                  ;       [CURBUF+2]:SI points to above dir_first
 27267                                  ; Function:
 27268                                  ;       Free the cluster chain for the entry if present
 27269                                  ; Outputs:
 27270                                  ;       Carry set if error (currently user FAILed to I 24)
 27271                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27272                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27273                                  ;---------------------------------------------------------------------------
 27274                                  
 27275                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27276                                  FREEENT:
 27277 00004BDF 1E                              PUSH    DS
 27278 00004BE0 C53E[E205]                      LDS     DI,[CURBUF]
 27279 00004BE4 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27280                                  	; 19/05/2019 - Retro DOS v4.0
 27281                                  	; MSDOS 6.0
 27282 00004BE6 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27283                                  ;hkn; SS override
 27284 00004BE9 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27285 00004BEE 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27286 00004BF1 1F                              POP     DS
 27287 00004BF2 83F902                  	CMP	CX,2
 27288 00004BF5 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27289                                  	;cmp	cx,[es:bp+0Dh]
 27290 00004BF7 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27291 00004BFB 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27292 00004BFD 29FB                            SUB     BX,DI
 27293 00004BFF 53                              PUSH    BX              ; Save offset
 27294 00004C00 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27295 00004C04 52                              PUSH    DX              ; Save sector number
 27296 00004C05 89CB                            MOV     BX,CX
 27297 00004C07 E8AC02                          call	RELEASE         ; Free any data allocated
 27298 00004C0A 5A                              POP     DX
 27299 00004C0B 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27300 00004C0F 7302                            JNC	short GET_BUF_BACK
 27301 00004C11 5B                              POP     BX
 27302                                  freeent_retn:
 27303 00004C12 C3                              retn			; Screw up
 27304                                  
 27305                                  GET_BUF_BACK:
 27306                                  	; 22/09/2023
 27307                                  	;;mov	byte [ALLOWED],18h
 27308                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27309                                          ;XOR	AL,AL ; *
 27310                                  	;call	GETBUFFR        ; Get sector back
 27311 00004C13 E8290D                  	call	GETBUFFER ; * ; pre read  
 27312                                  
 27313 00004C16 5B                              POP     BX              ; Get offset back
 27314 00004C17 72F9                            jc	short freeent_retn
 27315 00004C19 E8AFEA                  	call	SET_BUF_AS_DIR
 27316 00004C1C 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27317 00004C20 89DE                            MOV     SI,BX
 27318                                  	;add	si,1Ah
 27319 00004C22 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27320                                  RET1:
 27321 00004C25 F8                              CLC
 27322 00004C26 C3                              retn
 27323                                  
 27324                                  ;---------------------------------------------------------------------------
 27325                                  ;
 27326                                  ; Procedure Name : CHECK_VIRT_OPEN
 27327                                  ;
 27328                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27329                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27330                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27331                                  ; flag [VIRTUAL_OPEN].
 27332                                  ; No registers affected (including flags).
 27333                                  ; On input, [THISSFT] points to current SFT.
 27334                                  ;
 27335                                  ;---------------------------------------------------------------------------
 27336                                  
 27337                                  CHECK_VIRT_OPEN:
 27338 00004C27 50                      	PUSH    AX
 27339 00004C28 9F                              lahf                    ; preserve flags
 27340 00004C29 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27341 00004C2E 7410                            JZ	short ALL_CLOSED
 27342 00004C30 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27343 00004C35 06                      	push	es
 27344 00004C36 57                      	push	di
 27345 00004C37 C43E[9E05]                      LES     DI,[THISSFT]
 27346 00004C3B E8ADF9                          call	DEV_CLOSE_SFT
 27347 00004C3E 5F                      	pop	di
 27348 00004C3F 07                      	pop	es
 27349                                  
 27350                                  ALL_CLOSED:
 27351 00004C40 9E                              sahf                    ; restore flags
 27352 00004C41 58                              POP     AX
 27353 00004C42 C3                              retn
 27354                                  
 27355                                  ;============================================================================
 27356                                  ; ROM.ASM, MSDOS 6.0, 1991
 27357                                  ;============================================================================
 27358                                  ; 29/07/2018 - Retro DOS v3.0
 27359                                  ; 20/05/2019 - Retro DOS v4.0
 27360                                  
 27361                                  ;	TITLE	ROM - Miscellaneous routines
 27362                                  ;	NAME	ROM
 27363                                  
 27364                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27365                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27366                                  ;
 27367                                  ;	SKPCLP
 27368                                  ;	FNDCLUS
 27369                                  ;	BUFSEC
 27370                                  ;	BUFRD
 27371                                  ;	BUFWRT
 27372                                  ;	NEXTSEC
 27373                                  ;	OPTIMIZE
 27374                                  ;	FIGREC
 27375                                  ;	ALLOCATE
 27376                                  ;	RESTFATBYT
 27377                                  ;	RELEASE
 27378                                  ;	RELBLKS
 27379                                  ;	GETEOF
 27380                                  ;
 27381                                  ;	Modification history:
 27382                                  ;
 27383                                  ;		Created: ARR 30 March 1983
 27384                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27385                                  
 27386                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27387                                  ;--------------------------------------------------------------------------
 27388                                  ;
 27389                                  ; Procedure Name : FNDCLUS
 27390                                  ;
 27391                                  ; Inputs:
 27392                                  ;       CX = No. of clusters to skip
 27393                                  ;       ES:BP = Base of drive parameters
 27394                                  ;       [THISSFT] point to SFT
 27395                                  ; Outputs:
 27396                                  ;       BX = Last cluster skipped to
 27397                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27398                                  ;       DX = Position of last cluster
 27399                                  ;       Carry set if error (currently user FAILed to I 24)
 27400                                  ; DI destroyed. No other registers affected.
 27401                                  ;--------------------------------------------------------------------------
 27402                                  
 27403                                  ; 20/05/2019 - Retro DOS v4.0
 27404                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27405                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27406                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27407                                  
 27408                                  FNDCLUS:
 27409 00004C43 06                      	PUSH	ES
 27410 00004C44 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27411                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27412                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27413 00004C48 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27414                                  	;mov	dx,[es:di+19h]
 27415 00004C4C 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27416 00004C50 09DB                    	OR	BX,BX
 27417 00004C52 7424                    	JZ	short NOCLUS
 27418                                  
 27419 00004C54 29D1                            SUB     CX,DX
 27420 00004C56 7308                            JNB	short FINDIT
 27421                                  
 27422 00004C58 01D1                            ADD     CX,DX
 27423 00004C5A 31D2                            XOR     DX,DX
 27424                                  	;mov	bx,[es:di+0Bh]
 27425 00004C5C 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27426                                  FINDIT:
 27427 00004C60 07                              POP	ES
 27428 00004C61 E313                    	JCXZ	RET9
 27429                                  
 27430                                  	;entry	SKPCLP
 27431                                  SKPCLP:
 27432 00004C63 E8CE08                  	call	UNPACK
 27433 00004C66 7214                            jc	short fndclus_retn	; retc
 27434                                  
 27435                                  	; 09/09/2018
 27436                                  
 27437                                  	; MSDOS 3.3
 27438                                  	;push	bx
 27439                                  	;mov	bx,di
 27440                                  	;call	IsEOF
 27441                                  	;pop	bx	
 27442                                  	;jae	short RET9
 27443                                  
 27444                                  	; 20/05/2019 - Retro DOS v4.0
 27445                                  
 27446                                  	; MSDOS 6.0
 27447 00004C68 87DF                    	xchg	bx,di
 27448 00004C6A E8B008                  	call	IsEOF
 27449 00004C6D 87DF                    	xchg	bx,di
 27450 00004C6F 7305                    	jae	short RET9
 27451                                  
 27452 00004C71 87DF                            XCHG    BX,DI
 27453 00004C73 42                              INC     DX
 27454                                  
 27455 00004C74 E2ED                    	LOOP	SKPCLP			; RMFS
 27456                                  RET9:	
 27457 00004C76 F8                      	CLC
 27458 00004C77 C3                              retn
 27459                                  NOCLUS:
 27460 00004C78 07                              POP	ES
 27461 00004C79 41                              INC	CX
 27462 00004C7A 4A                              DEC	DX
 27463 00004C7B F8                              CLC
 27464                                  
 27465                                  fndclus_retn:
 27466 00004C7C C3                              retn
 27467                                  
 27468                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27469                                  ;--------------------------------------------------------------------------
 27470                                  ;
 27471                                  ; Procedure Name : BUFSEC
 27472                                  ;
 27473                                  ; Inputs:
 27474                                  ;       AH = priority of buffer
 27475                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27476                                  ;       ES:BP = Base of drive parameters
 27477                                  ;       [CLUSNUM] = Physical cluster number
 27478                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27479                                  ;       [BYTCNT1] = Size of transfer
 27480                                  ; Function:
 27481                                  ;       Insure specified sector is in buffer, flushing buffer before
 27482                                  ;       read if necessary.
 27483                                  ; Outputs:
 27484                                  ;       ES:DI = Pointer to buffer
 27485                                  ;       SI = Pointer to transfer address
 27486                                  ;       CX = Number of bytes
 27487                                  ;       [NEXTADD] updated
 27488                                  ;       [TRANS] set to indicate a transfer will occur
 27489                                  ;       Carry set if error (user FAILed to I 24)
 27490                                  ;--------------------------------------------------------------------------
 27491                                  
 27492                                  BUFSEC:
 27493 00004C7D 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27494 00004C81 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27495                                  	;mov	byte [ALLOWED],38h
 27496 00004C85 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27497 00004C8A E85001                          CALL    FIGREC
 27498 00004C8D E8B60C                  	call	GETBUFFR
 27499 00004C90 72EA                            jc	short fndclus_retn
 27500                                  
 27501 00004C92 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27502 00004C97 8B36[B805]                      MOV     SI,[NEXTADD]
 27503 00004C9B 89F7                            MOV     DI,SI
 27504 00004C9D 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27505 00004CA1 01CF                            ADD     DI,CX
 27506 00004CA3 893E[B805]                      MOV     [NEXTADD],DI
 27507 00004CA7 C43E[E205]                      LES     DI,[CURBUF]
 27508                                  	;or	byte [es:di+5],8
 27509 00004CAB 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27510                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27511                                  	;lea	di,[di+20] ; MSDOS 6.0
 27512 00004CB0 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27513 00004CB3 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27514 00004CB7 F8                              CLC
 27515 00004CB8 C3                              retn
 27516                                  
 27517                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27518                                  
 27519                                  ;---------------------------------------------------------------------------
 27520                                  ;
 27521                                  ; Procedure Name : BUFRD
 27522                                  ;
 27523                                  ; Do a partial sector read via one of the system buffers
 27524                                  ; ES:BP Points to DPB
 27525                                  ; Carry set if error (currently user FAILed to I 24)
 27526                                  ;
 27527                                  ; DS - set to DOSDATA
 27528                                  ;
 27529                                  ;----------------------------------------------------------------------------
 27530                                  
 27531                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27532                                  	; 20/05/2019 - Retro DOS v4.0
 27533                                  BUFRD:
 27534 00004CB9 06                              PUSH	ES
 27535 00004CBA 31C0                            xor	ax, ax			; pre-read sector
 27536 00004CBC E8BEFF                          CALL    BUFSEC
 27537 00004CBF 7303                            JNC	short BUF_OK
 27538                                  
 27539                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27540 00004CC1 07                              POP	ES
 27541 00004CC2 EB2B                            JMP     SHORT RBUFPLACED
 27542                                  
 27543                                  BUF_OK:
 27544 00004CC4 8CC3                            MOV     BX,ES
 27545 00004CC6 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27546 00004CCA 8EDB                            MOV     DS,BX
 27547 00004CCC 87FE                    	XCHG    DI,SI
 27548 00004CCE D1E9                            SHR     CX,1
 27549                                  ;M039
 27550                                  	; MSDOS 3.3
 27551                                  	;JNC	short EVENRD
 27552                                  	;MOVSB
 27553                                  ;EVENRD:
 27554                                  	;REP     MOVSW
 27555                                  
 27556                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27557                                  ;       DS:SI-> Source within Buffer.
 27558                                  ;       ES:DI-> Destination within Transfer memory block.
 27559                                  
 27560                                  	; MSDOS 6.0
 27561 00004CD0 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27562                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27563                                  	;rep	movsb                   ;Copy last byte.
 27564                                  	; 16/12/2022
 27565 00004CD2 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27566 00004CD4 A4                      	movsb ; ****
 27567                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27568                                  	;adc	cx,0
 27569                                  	;rep	movsb
 27570                                  ;M039
 27571                                  EVENRD: ; ****
 27572 00004CD5 07                              POP	ES
 27573                                  ;hkn; SS override
 27574 00004CD6 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27575                                  	;;lea	bx,[di+16]
 27576                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27577 00004CDB 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27578 00004CDE 29DE                            SUB     SI,BX                   ; Position in buffer
 27579 00004CE0 E8030C                          call	PLACEBUF
 27580                                  	;cmp	si,[es:bp+2]
 27581 00004CE3 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27582 00004CE7 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27583                                  ;M039
 27584                                  	; MSDOS 3.3
 27585                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27586                                                                          ;  even though it is MRU.
 27587                                          ; MSDOS 6.0
 27588 00004CE9 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27589                                  ;M039					; chucking even though it is MRU.
 27590                                  
 27591                                  RBUFPLACEDC:
 27592 00004CEE F8                              CLC
 27593                                  RBUFPLACED:
 27594 00004CEF 16                      	push	ss
 27595 00004CF0 1F                      	pop	ds
 27596 00004CF1 C3                              retn
 27597                                  
 27598                                  ;----------------------------------------------------------------------------
 27599                                  ;
 27600                                  ; Procedure : BUFWRT
 27601                                  ;
 27602                                  ; Do a partial sector write via one of the system buffers
 27603                                  ; ES:BP Points to DPB
 27604                                  ; Carry set if error (currently user FAILed to I 24)
 27605                                  ;
 27606                                  ; DS - set to DOSDATA
 27607                                  ;
 27608                                  ;----------------------------------------------------------------------------
 27609                                  
 27610                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27611                                  	; 20/05/2019 - Retro DOS v4.0
 27612                                  BUFWRT:
 27613                                          ;MOV     AX,[SECPOS]
 27614                                          ; MSDOS 6.0
 27615                                  	;ADD	AX,1            	; Set for next sector
 27616                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27617                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27618                                          ; 24/09/2023
 27619 00004CF2 FF06[C405]              	inc	word [SECPOS]
 27620 00004CF6 7504                    	jnz	short bufw_secpos
 27621 00004CF8 FF06[C605]              	inc	word [SECPOS+2]
 27622                                  bufw_secpos:
 27623 00004CFC A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27624 00004CFF 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27625 00004D03 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27626 00004D05 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27627 00004D07 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27628 00004D09 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27629                                  
 27630                                  	; MSDOS 3.3
 27631                                  	;INC	AX
 27632                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27633                                  
 27634                                  	; 20/05/2019
 27635                                  	; MSDOS 3.3 & MSDOS 6.0
 27636 00004D0C 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27637 00004D10 B001                            MOV     AL,1
 27638 00004D12 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27639                                  _doread:
 27640 00004D14 30C0                            XOR     AL,AL
 27641                                  NOREAD:
 27642 00004D16 06                              PUSH	ES
 27643 00004D17 E863FF                          CALL    BUFSEC
 27644 00004D1A 72A5                    	JC	short BUF_IO_FAIL
 27645 00004D1C 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27646 00004D20 D1E9                            SHR     CX,1
 27647                                  ;M039
 27648                                  	; MSDOS 3.3
 27649                                  	;JNC	short EVENWRT ; 09/09/2018
 27650                                  	;MOVSB
 27651                                  ;EVENWRT:
 27652                                  	;REP	MOVSW
 27653                                  
 27654                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27655                                  ;       DS:SI-> Source within Transfer memory block.
 27656                                  ;       ES:DI-> Destination within Buffer.
 27657                                  
 27658                                  	; MSDOS 6.0
 27659 00004D22 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27660                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27661                                  	;rep	movsb                   ;Copy last byte.
 27662                                  	; 16/12/2022
 27663 00004D24 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27664 00004D26 A4                      	movsb ; ****
 27665                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27666                                  	;adc	cx,0
 27667                                  	;rep	movsb
 27668                                  ;M039
 27669                                  EVENWRT: ; ****
 27670 00004D27 07                              POP	ES
 27671                                  
 27672                                  ;hkn; SS override
 27673 00004D28 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27674                                  
 27675                                  	; MSDOS 6.0
 27676 00004D2D F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27677                                  					;LB. if already dirty		  ;AN000;
 27678 00004D31 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27679 00004D33 E8120E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27680                                  	
 27681                                  	;or	byte [bx+5],40h
 27682 00004D36 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27683                                  yesdirty10:
 27684                                  	;;lea	si,[bx+16]
 27685                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27686 00004D3A 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27687 00004D3D 29F7                            SUB     DI,SI                   ; Position in buffer
 27688                                  ;M039
 27689                                  	; MSDOS 3.3
 27690                                  	;MOV	SI,DI
 27691                                  	;MOV	DI,BX
 27692                                  	;call	PLACEBUF
 27693                                  	;;cmp	si,[es:bp+2]
 27694                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27695                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27696                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27697                                                                          ;  even though it is MRU.
 27698                                  	; MSDOS 6.0
 27699                                  	;cmp	di,[es:bp+2]
 27700 00004D3F 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27701 00004D43 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27702 00004D45 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27703                                  					; chucking even though it is MRU.
 27704                                  ;M039
 27705                                  
 27706                                  WBUFPLACED:
 27707 00004D4A F8                              CLC
 27708 00004D4B 16                      	push	ss
 27709 00004D4C 1F                      	pop	ds
 27710 00004D4D C3                              retn
 27711                                  
 27712                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27713                                  ;---------------------------------------------------------------------------
 27714                                  ;
 27715                                  ; Procedure Name : NEXTSEC
 27716                                  ;
 27717                                  ; Compute the next sector to read or write
 27718                                  ; ES:BP Points to DPB
 27719                                  ;
 27720                                  ;---------------------------------------------------------------------------
 27721                                  
 27722                                  NEXTSEC:
 27723 00004D4E F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27724 00004D53 7426                            JZ	short CLRET
 27725                                  
 27726 00004D55 A0[7305]                        MOV     AL,[SECCLUSPOS]
 27727 00004D58 FEC0                            INC     AL
 27728                                  	;cmp	al,[es:bp+4]
 27729 00004D5A 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27730 00004D5E 7618                            JBE	short SAVPOS
 27731                                  
 27732 00004D60 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27733 00004D64 E8B607                          call	IsEOF
 27734 00004D67 7314                            JAE	short NONEXT
 27735                                  
 27736 00004D69 E8C807                          call	UNPACK
 27737 00004D6C 720F                            JC	short NONEXT
 27738                                  clusgot:
 27739 00004D6E 893E[BC05]                      MOV     [CLUSNUM],DI
 27740 00004D72 FF06[BA05]                      INC     word [LASTPOS]
 27741 00004D76 B000                            MOV     AL,0
 27742                                  SAVPOS:
 27743 00004D78 A2[7305]                        MOV     [SECCLUSPOS],AL
 27744                                  CLRET:
 27745 00004D7B F8                              CLC
 27746 00004D7C C3                              retn
 27747                                  NONEXT:
 27748 00004D7D F9                              STC
 27749 00004D7E C3                              retn
 27750                                  
 27751                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27752                                  ;----------------------------------------------------------------------------
 27753                                  ;
 27754                                  ; Procedure Name : OPTIMIZE
 27755                                  ;
 27756                                  ; Inputs:
 27757                                  ;       BX = Physical cluster
 27758                                  ;       CX = No. of records
 27759                                  ;       DL = sector within cluster
 27760                                  ;       ES:BP = Base of drive parameters
 27761                                  ;       [NEXTADD] = transfer address
 27762                                  ; Outputs:
 27763                                  ;       AX = No. of records remaining
 27764                                  ;       BX = Transfer address
 27765                                  ;       CX = No. or records to be transferred
 27766                                  ;       DX = Physical sector address            (LOW)
 27767                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27768                                  ;       DI = Next cluster
 27769                                  ;       [CLUSNUM] = Last cluster accessed
 27770                                  ;       [NEXTADD] updated
 27771                                  ;       Carry set if error (currently user FAILed to I 24)
 27772                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27773                                  ;
 27774                                  ;---------------------------------------------------------------------------
 27775                                  
 27776                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27777                                  OPTIMIZE:
 27778 00004D7F 52                      	PUSH    DX
 27779 00004D80 53                              PUSH    BX
 27780                                  	;mov	al,[es:bp+4]
 27781 00004D81 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27782 00004D85 FEC0                            INC     AL              ; Number of sectors per cluster
 27783 00004D87 88C4                            MOV     AH,AL
 27784 00004D89 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27785 00004D8B 89CA                            MOV     DX,CX
 27786                                  	;MOV	CX,0
 27787                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27788                                  	; 16/12/2022
 27789 00004D8D 31C9                    	xor	cx,cx	; sub cx,cx
 27790                                  OPTCLUS:
 27791                                  ; AL has number of sectors available in current cluster
 27792                                  ; AH has number of sectors available in next cluster
 27793                                  ; BX has current physical cluster
 27794                                  ; CX has number of sequential sectors found so far
 27795                                  ; DX has number of sectors left to transfer
 27796                                  ; ES:BP Points to DPB
 27797                                  ; ES:SI has FAT pointer
 27798                                  
 27799                                  do_norm3:
 27800 00004D8F E8A207                          call	UNPACK
 27801 00004D92 7236                            JC	short OP_ERR
 27802                                  clusgot2:
 27803 00004D94 00C1                    	ADD	CL,AL
 27804 00004D96 80D500                          ADC     CH,0
 27805 00004D99 39D1                            CMP     CX,DX
 27806 00004D9B 7332                            JAE	short BLKDON
 27807 00004D9D 88E0                            MOV     AL,AH
 27808 00004D9F 43                              INC     BX
 27809 00004DA0 39DF                            CMP     DI,BX
 27810 00004DA2 74EB                            JZ	short OPTCLUS
 27811 00004DA4 4B                              DEC     BX
 27812                                  FINCLUS:
 27813 00004DA5 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27814 00004DA9 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27815 00004DAB 52                              PUSH    DX
 27816 00004DAC 89C8                            MOV     AX,CX
 27817                                  	;mul	word[ES:BP+2]
 27818 00004DAE 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27819                                  				; Number of sectors times sector size
 27820 00004DB2 8B36[B805]                      MOV     SI,[NEXTADD]
 27821 00004DB6 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27822 00004DB8 A3[B805]                        MOV     [NEXTADD],AX
 27823 00004DBB 58                              POP     AX              ; Number of sectors still needed
 27824 00004DBC 5A                              POP     DX              ; Starting cluster
 27825 00004DBD 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27826 00004DBF 011E[BA05]                      ADD     [LASTPOS],BX
 27827 00004DC3 5B                              POP     BX              ; BL = sector position within cluster
 27828 00004DC4 E81600                  	call	FIGREC
 27829 00004DC7 89F3                            MOV     BX,SI
 27830                                  	; 24/09/2023
 27831                                  	; cf=0 (at the return of FIGREC)
 27832                                  	;CLC
 27833 00004DC9 C3                              retn
 27834                                  OP_ERR:
 27835 00004DCA 83C404                          ADD     SP,4
 27836 00004DCD F9                      	STC
 27837 00004DCE C3                              retn
 27838                                  BLKDON:
 27839 00004DCF 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27840 00004DD1 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27841 00004DD3 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27842 00004DD5 8826[7305]                      MOV     [SECCLUSPOS],AH
 27843 00004DD9 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27844 00004DDB EBC8                            JMP     SHORT FINCLUS
 27845                                  
 27846                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27847                                  ;---------------------------------------------------------------------------
 27848                                  ;
 27849                                  ; Procedure Name : FIGREC
 27850                                  ;
 27851                                  ; Inputs:
 27852                                  ;       DX = Physical cluster number
 27853                                  ;       BL = Sector position within cluster
 27854                                  ;       ES:BP = Base of drive parameters
 27855                                  ; Outputs:
 27856                                  ;       DX = physical sector number           (LOW)
 27857                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27858                                  ; No other registers affected.
 27859                                  ;
 27860                                  ;---------------------------------------------------------------------------
 27861                                  
 27862                                  	; 10/06/2019
 27863                                  	; 20/05/2019 - Retro DOS v4.0
 27864                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27865                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27866                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27867                                  FIGREC:
 27868 00004DDD 51                              PUSH    CX
 27869                                  	;mov	cl,[es:bp+5]
 27870 00004DDE 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27871 00004DE2 4A                              DEC     DX
 27872 00004DE3 4A                              DEC     DX
 27873                                  
 27874                                  	; MSDOS 3.3
 27875                                  	;SHL	DX,CL
 27876                                  
 27877                                  ;hkn; SS override HIGH_SECTOR
 27878                                  	; MSDOS 6.0
 27879 00004DE4 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27880                                  	; 24/09/2023
 27881 00004DEB 30ED                    	xor	ch,ch				;F.C. >32mb
 27882 00004DED 08C9                    	OR	CL,CL				;F.C. >32mb
 27883 00004DEF 740C                    	JZ	short noshift			;F.C. >32mb
 27884 00004DF1 30ED                    	XOR	CH,CH				;F.C. >32mb
 27885                                  rotleft:					;F.C. >32mb
 27886 00004DF3 F8                      	CLC					;F.C. >32mb
 27887 00004DF4 D1D2                    	RCL	DX,1				;F.C. >32mb
 27888                                  	; 10/06/2019
 27889 00004DF6 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27890 00004DFB E2F6                    	LOOP	rotleft				;F.C. >32mb
 27891                                  noshift:
 27892                                  	; MSDOS 3.3 & MSDOS 6.0
 27893 00004DFD 08DA                            OR      DL,BL
 27894                                  	;add	dx,[es:bp+0Bh]
 27895 00004DFF 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27896                                  	; MSDOS 6.0
 27897                                  	; 10/06/2019
 27898                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27899                                  	; 24/09/2023
 27900                                  	; cx=0
 27901 00004E03 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 27902                                  
 27903                                  	; MSDOS 3.3 & MSDOS 6.0
 27904 00004E08 59                      	POP     CX
 27905                                  figrec_retn:
 27906 00004E09 C3                              retn
 27907                                  
 27908                                  ; 20/05/2019 - Retro DOS v4.0
 27909                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27910                                  
 27911                                  ; 30/07/2018 - Retro DOS v3.0
 27912                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27913                                  
 27914                                  ;Break   <ALLOCATE -- Assign disk space>
 27915                                  ;---------------------------------------------------------------------------
 27916                                  ;
 27917                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27918                                  ;
 27919                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27920                                  ;   FAT-chained onto the end of the existing file.
 27921                                  ;
 27922                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27923                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27924                                  ;   numbered clusters, looking for the necessary free blocks.
 27925                                  ;
 27926                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27927                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27928                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27929                                  ;
 27930                                  ;       If we get to the end of the disk without satisfaction:
 27931                                  ;
 27932                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27933                                  ;               return (insufficient_disk_space)
 27934                                  ;           ELSE
 27935                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27936                                  ;
 27937                                  ;   Note that there is no multitasking interlock. There is no race when
 27938                                  ;   examining the entrys in an in-core FAT block since there will be no
 27939                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27940                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27941                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27942                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27943                                  ;   satisfied. We can't allow another activation to think this cluster is
 27944                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27945                                  ;   allocated.
 27946                                  ;
 27947                                  ;   Note that when we run out of space this algorithem will scan from
 27948                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27949                                  ;   redundantly scanning the later part of the disk. This only happens when
 27950                                  ;   we run out of space, so sue me.
 27951                                  ;
 27952                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27953                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27954                                  ;                                                                          ;
 27955                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27956                                  ;   explanation:
 27957                                  ;
 27958                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27959                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27960                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27961                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27962                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27963                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27964                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27965                                  ;   the
 27966                                  ;           LOOP   findfre         ; alloc more if needed
 27967                                  ;   instruction when the first cluster is allocated to the nul file. The
 27968                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27969                                  ;
 27970                                  ;   This method is obviously useless (because it is non-reentrant) for
 27971                                  ;   multitasking, and will have to be changed. Storing the required value on
 27972                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27973                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27974                                  ;   problems with INT 24 well.
 27975                                  ;
 27976                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27977                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27978                                  ;                                                                          ;
 27979                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27980                                  ;               CX = No. of clusters to allocate
 27981                                  ;               ES:BP = Base of drive parameters
 27982                                  ;               [THISSFT] = Points to SFT
 27983                                  ;
 27984                                  ;       EXIT    'C' set if insufficient space
 27985                                  ;                 [FAILERR] can be tested to see the reason for failure
 27986                                  ;                 CX = max. no. of clusters that could be added to file
 27987                                  ;               'C' clear if space allocated
 27988                                  ;                 BX = First cluster allocated
 27989                                  ;                 FAT is fully updated
 27990                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27991                                  ;
 27992                                  ;       USES    ALL but SI, BP
 27993                                  
 27994                                  ;callmagic  proc near
 27995                                  ;       push    ds                             ;push segment of routine 
 27996                                  ;       push    Offset MagicPatch              ;push offset for routine
 27997                                  ;       retf                                   ;simulate jmp far
 27998                                  ;                                              ;far return address is on
 27999                                  ;                                              ;stack, so far return from
 28000                                  ;                                              ;call will return this routine
 28001                                  ;callmagic  endp
 28002                                  
 28003                                  ALLOCATE:
 28004                                  	; 10/09/2018
 28005                                  ;BEGIN MAGICDRV MODIFICATIONS
 28006                                  ;
 28007                                  ;7/5/92 scottq
 28008                                  ;
 28009                                  ;This is the disk compression patch location which allows
 28010                                  ;the disk compression software to fail allocations if the
 28011                                  ;FAT would allows allocation, but the free space for compressed
 28012                                  ;data would not.
 28013                                  ;        
 28014                                  ;;;	call    far ptr MAGICPATCH
 28015                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28016                                  ;;; but we do know the segment and offset of the routine
 28017                                  ;;; so simulate a far call to dosdata:magicpatch
 28018                                  ;;; note dosassume above, so DS -> dosdata
 28019                                  
 28020                                  	; MSDOS 6.0
 28021                                          ;clc				;clear carry so we fall through
 28022                                  	;				;if no patch is present
 28023                                  	;push	cs			;push segment for far return
 28024                                          ;call	callmagic		;this is a near call
 28025                                          ;jnc	short Regular_Allocate_Path
 28026                                  	;jmp	Disk_Full_Return
 28027                                  
 28028                                  ;Regular_Allocate_Path:
 28029                                  	; 20/05/2019 - Retro DOS v4.0
 28030                                  ;END MAGICDRV MODIFICATIONS
 28031                                  
 28032                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28033                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28034                                  
 28035 00004E0A 53                              PUSH    BX                      ; save (bx)
 28036 00004E0B 31DB                            XOR     BX,BX
 28037 00004E0D E82407                  	call	UNPACK
 28038 00004E10 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28039 00004E14 5B                              POP     BX
 28040 00004E15 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28041                                  
 28042 00004E17 51                              PUSH    CX
 28043 00004E18 53                              PUSH    BX
 28044                                  
 28045 00004E19 89DA                            MOV     DX,BX
 28046                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28047                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28048 00004E1B 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28049 00004E1F 83FB02                          cmp     bx,2
 28050 00004E22 7709                            ja	short FINDFRE
 28051                                  
 28052                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28053                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28054                                  
 28055                                  ads1:
 28056                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28057                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28058 00004E24 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28059 00004E2A BB0100                          mov     bx,1                    ; Counter next instruction so first
 28060                                                                          ;       cluster examined is 2
 28061                                  
 28062                                  ;   Scanning both forwards and backwards for a free cluster
 28063                                  ;
 28064                                  ;       (BX) = forwards scan pointer
 28065                                  ;       (CX) = clusters remaining to be allocated
 28066                                  ;       (DX) = current last cluster in file
 28067                                  ;       (TOS) = last cluster of file
 28068                                  
 28069                                  FINDFRE:
 28070 00004E2D 43                              INC     BX
 28071                                  	;cmp	bx,[es:bp+0Dh]
 28072 00004E2E 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28073 00004E32 7757                    	ja	short ads7	; at end of disk
 28074 00004E34 E8FD06                          call	UNPACK          ; check out this cluster
 28075 00004E37 722F                            jc	short ads4	; FAT error             [INTERR?]
 28076 00004E39 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28077                                  
 28078                                  ;   Have found a free cluster. Chain it to the file
 28079                                  ;
 28080                                  ;       (BX) = found free cluster #
 28081                                  ;       (DX) = current last cluster in file
 28082                                  
 28083                                  	;;mov	[es:bp+1Ch],bx
 28084                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28085 00004E3B 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28086 00004E3F 92                              xchg    ax,dx           ; save (dx) in ax
 28087 00004E40 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28088 00004E43 E84207                  	call	PACK            ; set special "temporary" mark
 28089 00004E46 7220                            jc	short ads4	; FAT error             [INTERR?]
 28090                                  	;;cmp	word [es:bp+1Eh],-1
 28091                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28092 00004E48 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28093 00004E4D 7404                            JZ	short NO_ALLOC	; No
 28094                                  	;;dec	word [es:bp+1Eh]
 28095                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28096 00004E4F 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28097                                  NO_ALLOC:
 28098 00004E53 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28099 00004E54 87DA                            XCHG    BX,DX
 28100 00004E56 89D0                            MOV     AX,DX
 28101 00004E58 E82D07                  	call	PACK            ; link free cluster onto file
 28102                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28103                                                                  ;    cluster 0 with FIRCLUS value.
 28104 00004E5B 720B                            jc	short ads4	; FAT error [INTERR?]
 28105 00004E5D 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28106 00004E5E 89DA                            mov     dx,bx           ; (dx) = current end of file
 28107 00004E60 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28108                                  
 28109                                  ;   We've successfully extended the file. Clean up and exit
 28110                                  ;
 28111                                  ;       (BX) = last cluster in file
 28112                                  
 28113 00004E62 BAFFFF                          MOV     DX,0FFFFH
 28114 00004E65 E82007                  	call	PACK            ; mark last cluster EOF
 28115                                  
 28116                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28117                                  ;   2 whole bytes. Hope its worth it...
 28118                                  ;
 28119                                  ;       'C' set if error
 28120                                  ;       calling (BX) and (CX) pushed on stack
 28121                                  
 28122                                  ads4:   
 28123 00004E68 5B                      	POP     BX
 28124 00004E69 59                              POP     CX              ; Don't need this stuff since we're successful
 28125 00004E6A 729D                            jc	short figrec_retn
 28126 00004E6C E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28127                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28128 00004E6F 7298                            jc	short figrec_retn
 28129 00004E71 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28130 00004E74 7293                            jc	short figrec_retn
 28131 00004E76 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28132 00004E78 09FF                            OR      DI,DI           ; clear 'C'
 28133 00004E7A 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28134                                  
 28135                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28136                                  ;   info
 28137                                  dofastk:
 28138                                  	; 20/05/2019
 28139                                  	; MSDOS 6.0
 28140                                  	;push	dx ; * MSDOS 6.0
 28141                                  	;;mov	dl,[es:bp+0]
 28142                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28143                                  	;mov	dl,[es:bp]
 28144                                  
 28145                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28146                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28147                                  	
 28148                                  	; 16/12/2022
 28149                                  	;push	dx ; *
 28150                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28151                                  	; 15/12/2022
 28152                                  	;mov	dl,[es:bp]
 28153                                  	
 28154                                  	; MSDOS 3.3 & MSDOS 6.0
 28155 00004E7C 06                      	PUSH	ES
 28156 00004E7D C43E[9E05]              	LES     DI,[THISSFT]
 28157                                  	;mov	[es:di+0Bh],bx
 28158 00004E81 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28159                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28160                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28161 00004E85 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28162 00004E89 07                      	POP	ES
 28163                                  	;retn
 28164                                  
 28165                                  	;pop	dx ; * MSDOS 6.0
 28166                                  
 28167                                  	; 16/12/2022
 28168                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28169                                  	;pop	dx ; *
 28170                                  
 28171 00004E8A C3                      	retn	
 28172                                  
 28173                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28174                                  ;   of the disk...
 28175                                  
 28176                                  ads7:   
 28177 00004E8B 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28178 00004E90 7592                    	jnz	short ads1	; start scan from front of disk
 28179                                  
 28180                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28181                                  ;   the space back to the free list and tell the caller how much he could have
 28182                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28183                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28184                                  ;
 28185                                  ;       (CX) = clusters remaining to be allocated
 28186                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28187                                  ;       (TOS+1) = # of clusters wanted to allocate
 28188                                  
 28189 00004E92 5B                              POP     BX              ; (BX) = last cluster of file
 28190 00004E93 BAFFFF                          MOV     DX,0FFFFH
 28191 00004E96 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28192 00004E99 58                              POP     AX              ; No. of clusters requested
 28193                                                                  ; Don't "retc". We are setting Carry anyway,
 28194                                                                  ;   Alloc failed, so proceed with return CX
 28195                                                                  ;   setup.
 28196 00004E9A 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28197 00004E9C E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28198                                                                  ;   Alloc failed.
 28199                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28200                                          ; MSDOS 6.0
 28201 00004E9F C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28202 00004EA4 F9                              STC
 28203 00004EA5 C3                              retn
 28204                                  
 28205                                  ;-----------------------------------------------------------------------
 28206                                  ;
 28207                                  ; Procedure Name : RESTFATBYT
 28208                                  ;
 28209                                  ; SEE ALLOCATE CAVEAT
 28210                                  ;       Carry set if error (currently user FAILed to I 24)
 28211                                  ;-----------------------------------------------------------------------
 28212                                  
 28213                                  RESTFATBYT:
 28214 00004EA6 53                              PUSH    BX
 28215 00004EA7 52                              PUSH    DX
 28216 00004EA8 57                              PUSH    DI
 28217 00004EA9 31DB                            XOR     BX,BX
 28218 00004EAB 8B16[9605]                      MOV     DX,[FATBYT]
 28219 00004EAF E8D606                  	call	PACK
 28220 00004EB2 5F                              POP     DI
 28221 00004EB3 5A                              POP     DX
 28222 00004EB4 5B                              POP     BX
 28223                                  ; 16/12/2022
 28224                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28225                                  ;RELEASE_flush:
 28226 00004EB5 C3                      	retn
 28227                                  
 28228                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28229                                  ;---------------------------------------------------------------------------
 28230                                  ;
 28231                                  ; Procedure Name : RELEASE
 28232                                  ;
 28233                                  ; Inputs:
 28234                                  ;       BX = Cluster in file
 28235                                  ;       ES:BP = Base of drive parameters
 28236                                  ; Function:
 28237                                  ;       Frees cluster chain starting with [BX]
 28238                                  ;       Carry set if error (currently user FAILed to I 24)
 28239                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28240                                  ;
 28241                                  ;-----------------------------------------------------------------------------
 28242                                  
 28243                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28244                                  	; 20/05/2019 - Retro DOS v4.0
 28245                                  RELEASE:
 28246 00004EB6 31D2                            XOR     DX,DX
 28247                                  
 28248                                  	;entry	RELBLKS
 28249                                  RELBLKS:
 28250                                  
 28251                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28252                                  ;   and free the rest in the chain.
 28253                                  
 28254 00004EB8 E87906                  	call	UNPACK
 28255 00004EBB 7224                    	jc	short RELEASE_flush
 28256 00004EBD 7422                    	jz	short RELEASE_flush
 28257 00004EBF 89F8                            MOV     AX,DI
 28258 00004EC1 52                              PUSH    DX
 28259 00004EC2 E8C306                  	call	PACK
 28260 00004EC5 5A                              POP     DX
 28261 00004EC6 7219                    	jc	short RELEASE_flush
 28262 00004EC8 09D2                            OR      DX,DX
 28263 00004ECA 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28264                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28265                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28266 00004ECC 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28267 00004ED1 7404                            JZ	short NO_DEALLOC	; No
 28268 00004ED3 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28269                                  NO_DEALLOC:
 28270 00004ED7 89C3                            MOV     BX,AX
 28271 00004ED9 48                              dec     ax              ; check for "1"
 28272 00004EDA 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28273 00004EDC E83E06                  	call	IsEOF
 28274 00004EDF 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28275                                  
 28276                                  	; 16/12/2022
 28277                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28278                                  ;%if 0
 28279                                  RELEASE_flush:
 28280                                  	; MSDOS 6.0
 28281 00004EE1 268A4600                	mov	al,[es:bp]
 28282                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28283 00004EE5 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28284 00004EE6 51                      	push	cx		;  them to be preserved.
 28285 00004EE7 06                      	push	es
 28286 00004EE8 55                      	push	bp
 28287 00004EE9 E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28288 00004EEC 5D                      	pop	bp
 28289 00004EED 07                      	pop	es
 28290 00004EEE 59                      	pop	cx
 28291 00004EEF 5E                      	pop	si
 28292                                  ;%endif
 28293                                  RET12:
 28294 00004EF0 C3                      	retn
 28295                                  
 28296                                  ;Break	<GETEOF -- Find the end of a file>
 28297                                  ;------------------------------------------------------------------------
 28298                                  ;
 28299                                  ; Procedure Name : GETEOF
 28300                                  ;
 28301                                  ; Inputs:
 28302                                  ;       ES:BP Points to DPB
 28303                                  ;       BX = Cluster in a file
 28304                                  ;       DS = CS
 28305                                  ; Outputs:
 28306                                  ;       BX = Last cluster in the file
 28307                                  ;       Carry set if error (currently user FAILed to I 24)
 28308                                  ; DI destroyed. No other registers affected.
 28309                                  ;
 28310                                  ;--------------------------------------------------------------------------
 28311                                  
 28312                                  GETEOF:
 28313 00004EF1 E84006                  	call	UNPACK
 28314 00004EF4 72FA                            jc	short RET12
 28315 00004EF6 53                              PUSH    BX
 28316 00004EF7 89FB                            MOV     BX,DI
 28317 00004EF9 E82106                  	call	IsEOF
 28318 00004EFC 5B                              POP     BX
 28319 00004EFD 73F1                            JAE     short RET12
 28320 00004EFF 89FB                            MOV     BX,DI
 28321 00004F01 EBEE                            JMP     short GETEOF
 28322                                  
 28323                                  ;============================================================================
 28324                                  ; FCB.ASM, MSDOS 6.0, 1991
 28325                                  ;============================================================================
 28326                                  ; 30/07/2018 - Retro DOS v3.0
 28327                                  ; 20/05/2019 - Retro DOS v4.0
 28328                                  
 28329                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28330                                  ;	NAME	FCB
 28331                                  
 28332                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28333                                  ;		  filename characters
 28334                                  ;
 28335                                  ;	MakeFcb
 28336                                  ;	NameTrans
 28337                                  ;	PATHCHRCMP
 28338                                  ;	GetLet
 28339                                  ;	UCase
 28340                                  ;	GetLet3
 28341                                  ;	GetCharType
 28342                                  ;	TESTKANJ
 28343                                  ;	NORMSCAN
 28344                                  ;	DELIM
 28345                                  ;
 28346                                  ;	Revision history:
 28347                                  ;
 28348                                  ;		A000  version 4.00  Jan. 1988
 28349                                  ;	
 28350                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28351                                  
 28352                                  TableLook	EQU	-1
 28353                                  
 28354                                  SCANSEPARATOR	EQU	1
 28355                                  DRVBIT		EQU	2
 28356                                  NAMBIT		EQU	4
 28357                                  EXTBIT		EQU	8
 28358                                  
 28359                                  ;----------------------------------------------------------------------------
 28360                                  ;
 28361                                  ; Procedure : MakeFcb
 28362                                  ;
 28363                                  ;----------------------------------------------------------------------------
 28364                                  
 28365                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28366                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28367                                  MAKEFCB:
 28368                                  ;hkn; SS override
 28369 00004F03 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28370 00004F09 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28371                                  	;test	al,2
 28372 00004F0B A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28373 00004F0D 7504                    	JNZ	short DEFDRV
 28374 00004F0F 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28375                                  DEFDRV:
 28376 00004F13 47                      	INC	DI
 28377 00004F14 B90800                  	MOV	CX,8
 28378                                  	;test	al,4
 28379 00004F17 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28380 00004F19 93                      	XCHG	AX,BX		; Save bits in BX
 28381 00004F1A B020                    	MOV	AL," "
 28382 00004F1C 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28383 00004F1E 01CF                    	ADD	DI,CX
 28384 00004F20 31C9                    	XOR	CX,CX		; Don't fill any
 28385                                  FILLB:
 28386 00004F22 F3AA                    	REP	STOSB
 28387 00004F24 B103                    	MOV	CL,3
 28388 00004F26 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28389 00004F29 7404                    	JZ	short FILLB2
 28390 00004F2B 01CF                    	ADD	DI,CX
 28391 00004F2D 31C9                    	XOR	CX,CX
 28392                                  FILLB2:
 28393 00004F2F F3AA                    	REP	STOSB
 28394 00004F31 91                      	XCHG	AX,CX		; Put zero in AX
 28395 00004F32 AB                      	STOSW
 28396 00004F33 AB                      	STOSW			; Initialize two words after to zero
 28397 00004F34 83EF10                  	SUB	DI,16		; Point back at start
 28398                                  	;test	bl,1
 28399 00004F37 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28400 00004F3A 7409                    	JZ	short SKPSPC
 28401 00004F3C E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28402 00004F3F E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28403 00004F42 7504                    	JNZ	short NOSCAN
 28404 00004F44 46                      	INC	SI		; Skip over the delimiter
 28405                                  SKPSPC:
 28406 00004F45 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28407                                  NOSCAN:
 28408 00004F48 E8F000                  	CALL	GETLET
 28409 00004F4B 761E                    	JBE	short NODRV	; Quit if termination character
 28410 00004F4D 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28411 00004F50 7519                    	JNZ	short NODRV
 28412 00004F52 46                      	INC	SI		; Skip over colon
 28413 00004F53 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28414 00004F55 760F                    	JBE	short BADDRV	; Drive letter out of range
 28415                                  
 28416 00004F57 50                      	PUSH	AX
 28417 00004F58 E8161B                  	call	GetVisDrv
 28418 00004F5B 58                      	POP	AX
 28419 00004F5C 730A                    	JNC	short HAVDRV
 28420                                  
 28421                                  	; 20/05/2019 - Retro DOS v4.0
 28422                                  	; MSDOS 6.0
 28423                                  ;hkn; SS override
 28424 00004F5E 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28425                                  					; if not FAT drive ;AN000;
 28426 00004F64 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28427                                  BADDRV:
 28428 00004F66 B2FF                    	MOV	DL,-1
 28429                                  HAVDRV:
 28430 00004F68 AA                      	STOSB			; Put drive specifier in first byte
 28431 00004F69 46                      	INC	SI
 28432 00004F6A 4F                      	DEC	DI		; Counteract next two instructions
 28433                                  NODRV:
 28434 00004F6B 4E                      	DEC	SI		; Back up
 28435 00004F6C 47                      	INC	DI		; Skip drive byte
 28436                                  
 28437                                  	;entry	NORMSCAN
 28438                                  NORMSCAN:
 28439 00004F6D B90800                  	MOV	CX,8
 28440 00004F70 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28441 00004F73 803C2E                  	CMP	BYTE [SI],"."
 28442 00004F76 7510                    	JNZ	short NODOT
 28443 00004F78 46                      	INC	SI		; Skip over dot if present
 28444                                  
 28445                                  	; 24/09/2023
 28446                                  	;mov	cx,3
 28447 00004F79 B103                    	mov	cl,3	; ch=0
 28448                                  
 28449                                  	; MSDOS 6.0
 28450                                  ;hkn; SS override
 28451                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28452                                  	; 10/06/2019
 28453 00004F7B 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28454 00004F81 7402                    	JZ	short VOLOK				;AN000;
 28455 00004F83 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28456                                  	; 24/09/2023
 28457                                  	;MOV	CX,2					;AN000;
 28458 00004F84 49                      	dec	cx  ; cx=2
 28459                                  	;JMP	SHORT contvol				;AN000;
 28460                                  VOLOK:
 28461                                  	;MOV	CX,3		; Get 3-letter extension
 28462                                  contvol:
 28463 00004F85 E81300                  	CALL	MUSTGETWORD
 28464                                  NODOT:
 28465 00004F88 88D0                    	MOV	AL,DL
 28466                                  
 28467                                  	; MSDOS 6.0
 28468                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28469                                  	; 18/12/2022
 28470 00004F8A 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28471                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28472                                  
 28473 00004F90 C3                      	retn
 28474                                  
 28475                                  NONAM:
 28476 00004F91 01CF                    	ADD	DI,CX
 28477 00004F93 4E                      	DEC	SI
 28478 00004F94 C3                      	retn
 28479                                  
 28480                                  GETWORD:
 28481 00004F95 E8A300                  	CALL	GETLET		
 28482 00004F98 76F7                    	JBE	short NONAM	; Exit if invalid character
 28483 00004F9A 4E                      	DEC	SI
 28484                                  
 28485                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28486                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28487                                  
 28488                                  MUSTGETWORD:
 28489 00004F9B E89D00                  	CALL	GETLET
 28490                                  
 28491                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28492                                  
 28493                                  ;IF NOT TABLELOOK
 28494                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28495                                  ;ENDIF
 28496 00004F9E 750C                    	JNZ	short MustCheckCX
 28497                                  
 28498                                  ;hkn; SS override
 28499 00004FA0 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28500 00004FA6 7419                    	JZ	short FILLNAM
 28501 00004FA8 3C20                    	CMP	AL," "
 28502 00004FAA 7515                    	JNZ	short FILLNAM
 28503                                  
 28504                                  MustCheckCX:
 28505 00004FAC E3ED                    	JCXZ	MUSTGETWORD
 28506 00004FAE 49                      	DEC	CX
 28507 00004FAF 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28508 00004FB1 7504                    	JNZ	short NOSTAR
 28509 00004FB3 B03F                    	MOV	AL,"?"
 28510 00004FB5 F3AA                    	REP	STOSB
 28511                                  NOSTAR:
 28512 00004FB7 AA                      	STOSB
 28513 00004FB8 3C3F                    	CMP	AL,"?"
 28514 00004FBA 75DF                    	JNZ	short MUSTGETWORD
 28515 00004FBC 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28516 00004FBF EBDA                    	JMP	short MUSTGETWORD
 28517                                  FILLNAM:
 28518 00004FC1 B020                    	MOV	AL," "
 28519 00004FC3 F3AA                    	REP	STOSB
 28520 00004FC5 4E                      	DEC	SI
 28521 00004FC6 C3                      	retn
 28522                                  
 28523                                  SCANB:
 28524 00004FC7 AC                      	LODSB
 28525 00004FC8 E8A100                  	CALL	SPCHK
 28526 00004FCB 74FA                    	JZ	short SCANB
 28527 00004FCD 4E                      	DEC	SI
 28528                                  scanb_retn:
 28529 00004FCE C3                      	retn
 28530                                  
 28531                                  ;----------------------------------------------------------------------------
 28532                                  ;
 28533                                  ; Procedure Name : NameTrans
 28534                                  ;
 28535                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28536                                  ; allow spaces in pathnames
 28537                                  ;
 28538                                  ;   Inputs:	DS:SI points to start of path element
 28539                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28540                                  ;		ES = DOSGroup
 28541                                  ;		DS:SI advanced after name
 28542                                  ;   Registers modified: DI,AX,DX,CX
 28543                                  ;
 28544                                  ;----------------------------------------------------------------------------
 28545                                  
 28546                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28547                                  	; 20/05/2019 - Retro DOS v4.0
 28548                                  NameTrans:
 28549                                  ;hkn; SS override
 28550 00004FCF 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28551 00004FD5 16                      	push	ss
 28552 00004FD6 07                      	pop	es
 28553                                  
 28554                                  ;hkn; NAME1 is in DOSDATA
 28555 00004FD7 BF[4B05]                	MOV	DI,NAME1
 28556 00004FDA 57                      	PUSH	DI
 28557 00004FDB B82020                  	MOV	AX,'  '
 28558 00004FDE B90500                  	MOV	CX,5
 28559 00004FE1 AA                      	STOSB
 28560 00004FE2 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28561 00004FE4 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28562 00004FE6 88C2                    	MOV	DL,AL
 28563 00004FE8 AA                      	STOSB
 28564 00004FE9 5F                      	POP	DI
 28565                                  
 28566 00004FEA E880FF                  	CALL	NORMSCAN
 28567                                  
 28568                                  ;hkn; SS override for NAME1
 28569 00004FED 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28570 00004FF3 75D9                    	jnz	short scanb_retn
 28571 00004FF5 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28572 00004FFB C3                      	retn
 28573                                  
 28574                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28575                                  ;============================================================================
 28576                                  
 28577                                  ; 20/05/2019 - Retro DOS v4.0
 28578                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28579                                  
 28580                                  ;If TableLook
 28581                                  
 28582                                  ;hkn; Table	SEGMENT
 28583                                  ;	PUBLIC	CharType
 28584                                  ;----------------------------------------------------------------------------
 28585                                  
 28586                                  ; Character type table for file name scanning
 28587                                  ; Table provides a mapping of characters to validity bits.
 28588                                  ; Four bits are provided for each character. Values 7Dh and above
 28589                                  ; have all bits set, so that part of the table is chopped off, and
 28590                                  ; the translation routine is responsible for screening these values.
 28591                                  ; The bit values are defined in DOSSYM.INC
 28592                                  
 28593                                  ;	      ; ^A and NUL
 28594                                  ;CharType:
 28595                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28596                                  ;	      ; ^C and ^B
 28597                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28598                                  ;	      ; ^E and ^D
 28599                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28600                                  ;	      ; ^G and ^F
 28601                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28602                                  ;	      ; TAB and BS
 28603                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28604                                  ;	      ; ^K and ^J
 28605                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28606                                  ;	      ; ^M and ^L
 28607                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28608                                  ;	      ; ^O and ^N
 28609                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28610                                  ;	      ; ^Q and ^P
 28611                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28612                                  ;	      ; ^S and ^R
 28613                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28614                                  ;	      ; ^U and ^T
 28615                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28616                                  ;	      ; ^W and ^V
 28617                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28618                                  ;	      ; ^Y and ^X
 28619                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28620                                  ;	      ; ESC and ^Z
 28621                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28622                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28624                                  ;	      ; ^_ and ^^
 28625                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28626                                  ;	      ; ! and SPACE
 28627                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28628                                  ;	      ; # and "
 28629                                  ;	 db   LOW (NOT FFCB+FCHK)
 28630                                  ;	      ; $ - )
 28631                                  ;	 db   3 dup (0FFh)
 28632                                  ;	      ; + and *
 28633                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28634                                  ;	      ; - and '
 28635                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28636                                  ;	      ; / and .
 28637                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28638                                  ;	      ; 0 - 9
 28639                                  ;	 db   5 dup (0FFh)
 28640                                  ;	      ; ; and :
 28641                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28642                                  ;	      ; = and <
 28643                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28644                                  ;	      ; ? and >
 28645                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28646                                  ;	      ; A - Z
 28647                                  ;	 db   13 dup (0FFh)
 28648                                  ;	      ; \ and [
 28649                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28650                                  ;	      ; ^ and ]
 28651                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28652                                  ;	      ; _ - {
 28653                                  ;	 db   15 dup (0FFh)
 28654                                  ;	      ; } and |
 28655                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28656                                  
 28657                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28658                                  ;					; character in the table
 28659                                  
 28660                                  ;FCHK	equ 1		; normal name char, no chks needed
 28661                                  ;FDELIM	equ 2		; is a delimiter
 28662                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28663                                  ;FFCB	equ 8		; is valid in an FCB
 28664                                  
 28665                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28666                                  ;----------------------------------------------------------------------------
 28667                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28668                                  
 28669                                  CharType: ; 63 bytes
 28670 00004FFC 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28671 00005004 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28672 0000500C F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28673 00005014 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28674 0000501C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28675 00005024 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28676 0000502C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28677 00005034 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28678                                  
 28679                                  CharType_last equ ($ - CharType) * 2
 28680                                  
 28681                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28682                                  ;----------------------------------------------------------------------------
 28683                                  ;CharType:
 28684                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28685                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28686                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28687                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28688                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28689                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28690                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28691                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28692                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28693                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28694                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28695                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28696                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28697                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28698                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28699                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28700                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28701                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28702                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28703                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28704                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28705                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28706                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28707                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28708                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28709                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28710                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28711                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28712                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28713                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28714                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28715                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28716                                  
 28717                                  ;hkn; Table	ENDS
 28718                                  
 28719                                  ;ENDIF
 28720                                  
 28721                                  ; 20/05/2019 - Retro DOS v4.0
 28722                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28723                                  
 28724                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28725                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28726                                  
 28727                                  ;----------------------------------------------------------------------------
 28728                                  ;
 28729                                  ; Procedure Names : GetLet, UCase, GetLet3
 28730                                  ;
 28731                                  ; These routines take a character, convert it to upper case, and check
 28732                                  ; for delimiters.  Three different entry points:
 28733                                  ;	GetLet -  DS:[SI] = character to convert
 28734                                  ;	UCase  -  AL = character to convert
 28735                                  ;	GetLet3 - AL = character
 28736                                  ;		  [BX] = translation table to use
 28737                                  ;
 28738                                  ;	Exit (in all cases) : AL = upper case character
 28739                                  ;			      CY set if char is control char other than TAB
 28740                                  ;			      ZF set if char is a delimiter
 28741                                  ;	Uses : AX, flags
 28742                                  ;
 28743                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28744                                  ; inline version.  Return with carry set is only possible in the inline
 28745                                  ; version. The table lookup version is the one in use.
 28746                                  ;
 28747                                  ;----------------------------------------------------------------------------
 28748                                  
 28749                                  ; This entry point has character at [SI]
 28750                                  
 28751                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28752                                  GETLET:	
 28753 0000503B AC                      	LODSB
 28754                                  
 28755                                  ; This entry point has character in AL
 28756                                  
 28757                                  	;entry	UCase
 28758                                  UCase:	
 28759                                  	; 09/08/2018
 28760                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28761                                  _UCase:
 28762 0000503C 53                      	PUSH	BX
 28763 0000503D BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28764                                  
 28765                                  ; Convert the character in AL to upper case
 28766                                  
 28767                                  gl_0:
 28768 00005040 3C61                    	CMP	AL,"a"
 28769 00005042 7214                    	JB	short gl_2	; Already upper case, go check type
 28770 00005044 3C7A                    	CMP	AL,"z"
 28771 00005046 7702                    	JA	short gl_1
 28772 00005048 2C20                    	SUB	AL,20H		; Convert to upper case
 28773                                  
 28774                                  ; Map European character to upper case
 28775                                  
 28776                                  gl_1:
 28777 0000504A 3C80                    	CMP	AL,80H
 28778 0000504C 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28779 0000504E 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28780                                  
 28781                                  	; M048 - Start 
 28782                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28783                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28784                                  	; preserve it.
 28785                                  
 28786                                  	; 09/08/2018 - Retro DOS v3.0
 28787                                  	; MSDOS 3.3
 28788                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28789                                  	;CS	XLAT
 28790                                  
 28791                                  	; 20/05/2019 - Retro DOS v4.0
 28792                                  
 28793                                  	; MSDOS 6.0
 28794 00005050 1E                      	push	ds
 28795                                  	;getdseg <ds>
 28796 00005051 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28797 00005056 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28798 00005057 1F                      	pop	ds
 28799                                  
 28800                                  	; M048 - End
 28801                                  
 28802                                  ; Now check the type
 28803                                  
 28804                                  ;If TableLook
 28805                                  gl_2:
 28806                                  	; 20/05/2019 - Retro DOS v4.0
 28807 00005058 50                      	PUSH	AX
 28808                                  
 28809                                  	; MSDOS 3.3
 28810                                  	;mov	bx,CharType
 28811                                  	;; 09/08/2018
 28812                                  	;;xlat	byte [cs:bx]
 28813                                  	;cs	xlat	
 28814                                  	
 28815                                  	; MSDOS 6.0
 28816 00005059 E81800                  	CALL	GetCharType	; returns type flags in AL
 28817                                  	
 28818                                  	;test	al,1	
 28819 0000505C A801                    	TEST	AL,FCHK 	; test for normal character
 28820 0000505E 58                      	POP	AX
 28821 0000505F 5B                      	POP	BX
 28822 00005060 C3                      	RETN
 28823                                  
 28824                                  ; This entry has character in AL and lookup table in BX
 28825                                  
 28826                                  	; MSDOS 6.0
 28827                                  ;	;entry GetLet3
 28828                                  GETLET3: ; 10/08/2018
 28829 00005061 53                      	PUSH	BX
 28830 00005062 EBDC                    	JMP	short gl_0
 28831                                  ;ELSE
 28832                                  ;
 28833                                  ;gl_2:
 28834                                  ;	POP	BX
 28835                                  ;	CMP	AL,"."
 28836                                  ;	retz
 28837                                  ;	CMP	AL,'"'
 28838                                  ;	retz
 28839                                  ;	CALL	PATHCHRCMP
 28840                                  ;	retz
 28841                                  ;	CMP	AL,"["
 28842                                  ;	retz
 28843                                  ;	CMP	AL,"]"
 28844                                  ;	retz
 28845                                  ;ENDIF
 28846                                  
 28847                                  ;---------------------------------------------------------------------
 28848                                  ;
 28849                                  ; DELIM - check if character is a delimiter
 28850                                  ;	Entry : AX = character to check
 28851                                  ;	Exit  : ZF set if character is not a delimiter
 28852                                  ;	Uses  : Flags
 28853                                  ;
 28854                                  ;--------------------------------------------------------------------
 28855                                  
 28856                                  	;entry	DELIM
 28857                                  DELIM:
 28858                                  ;IF TableLook
 28859                                  	; 20/05/2019 - Retro DOS v4.0
 28860 00005064 50                      	PUSH	AX
 28861                                  
 28862                                  	; MSDOS 3.3
 28863                                  	;push	bx
 28864                                  	;mov	bx,CharType
 28865                                  	;;09/08/2018
 28866                                  	;;xlat	byte [cs:bx]
 28867                                  	;cs	xlat
 28868                                  	;pop	bx
 28869                                  
 28870                                  	; MSDOS 6.0
 28871 00005065 E80C00                  	CALL	GetCharType
 28872                                  	
 28873                                  	;test	al,2
 28874 00005068 A802                    	TEST	AL,FDELIM
 28875 0000506A 58                      	POP	AX
 28876 0000506B C3                      	RETN
 28877                                  ;ELSE
 28878                                  ;	CMP	AL,":"
 28879                                  ;	retz
 28880                                  ;
 28881                                  ;	CMP	AL,"<"
 28882                                  ;	retz
 28883                                  ;	CMP	AL,"|"
 28884                                  ;	retz
 28885                                  ;	CMP	AL,">"
 28886                                  ;	retz
 28887                                  ;
 28888                                  ;	CMP	AL,"+"
 28889                                  ;	retz
 28890                                  ;	CMP	AL,"="
 28891                                  ;	retz
 28892                                  ;	CMP	AL,";"
 28893                                  ;	retz
 28894                                  ;	CMP	AL,","
 28895                                  ;	retz
 28896                                  ;ENDIF
 28897                                  
 28898                                  ;-------------------------------------------------------------------------
 28899                                  ;
 28900                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28901                                  ;	Entry : AL = character to check
 28902                                  ;	Exit  : ZF set if character is a space
 28903                                  ;	Uses  : flags
 28904                                  ;
 28905                                  ;-------------------------------------------------------------------------
 28906                                  
 28907                                  	;entry SPCHK
 28908                                  SPCHK:
 28909                                  ;IF TableLook
 28910                                  	; 20/05/2019 - Retro DOS v4.0
 28911 0000506C 50                      	PUSH	AX
 28912                                  
 28913                                  	; MSDOS 3.3
 28914                                  	;push	bx
 28915                                  	;mov	bx,CharType
 28916                                  	;; 09/08/2018
 28917                                  	;;xlat	byte [cs:bx]
 28918                                  	;cs	xlat
 28919                                  	;pop	bx
 28920                                  
 28921                                  	; MSDOS 6.0
 28922 0000506D E80400                  	CALL	GetCharType
 28923                                  	
 28924                                  	;test	al,4
 28925 00005070 A804                    	TEST	AL,FSPCHK
 28926 00005072 58                      	POP	AX
 28927 00005073 C3                      	RETN
 28928                                  ;ELSE
 28929                                  ;	CMP	AL,9		; Filter out tabs too
 28930                                  ;	retz
 28931                                  ;; WARNING! " " MUST be the last compare
 28932                                  ;	CMP	AL," "
 28933                                  ;	return
 28934                                  ;ENDIF
 28935                                  
 28936                                  ;-------------------------------------------------------------------------
 28937                                  ;
 28938                                  ;  GetCharType - return flag bits indicating character type
 28939                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28940                                  ;	defined above at label CharType.
 28941                                  ;
 28942                                  ;	Entry : AL = character to return type flags for
 28943                                  ;	Exit  : AL = type flags
 28944                                  ;	Uses  : AL, flags
 28945                                  ;
 28946                                  ;-------------------------------------------------------------------------
 28947                                  
 28948                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28949                                  
 28950                                  	; 20/05/2019 - Retro DOS v4.0
 28951                                  	; MSDOS 6.0
 28952                                  GetCharType:
 28953                                  	;cmp	al,7Eh
 28954 00005074 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28955 00005076 7316                    	jae	short gct_90		; return standard value
 28956                                  
 28957 00005078 53                      	push	bx
 28958 00005079 BB[FC4F]                	mov	bx,CharType		; load lookup table
 28959 0000507C D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28960                                  	;xlat	cs:[bx] 		; get flags
 28961 0000507E 2ED7                    	cs	xlat	
 28962 00005080 5B                      	pop	bx
 28963                                  
 28964                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28965                                  ; we have to shift the flags down to the low nibble
 28966                                  
 28967 00005081 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28968                                  
 28969 00005083 D0E8                    	shr	al,1			; we want high nibble, shift it down
 28970 00005085 D0E8                    	shr	al,1
 28971 00005087 D0E8                    	shr	al,1
 28972 00005089 D0E8                    	shr	al,1
 28973                                  gct_80:
 28974 0000508B 240F                    	and	al,0Fh			; clear the unused nibble
 28975 0000508D C3                      	retn
 28976                                  gct_90:
 28977 0000508E B00F                    	mov	al,0Fh			; set all flags
 28978 00005090 C3                      	retn
 28979                                  
 28980                                  ;----------------------------------------------------------------------------
 28981                                  ;
 28982                                  ; Procedure : PATHCHRCMP
 28983                                  ;
 28984                                  ;----------------------------------------------------------------------------
 28985                                  
 28986                                  PATHCHRCMP:
 28987 00005091 3C2F                    	CMP	AL,'/'
 28988 00005093 7606                    	JBE	short PathRet
 28989 00005095 3C5C                    	CMP	AL,'\'
 28990 00005097 C3                      	retn
 28991                                  GotFor:
 28992 00005098 B05C                    	MOV	AL,'\'
 28993 0000509A C3                      	retn
 28994                                  PathRet:
 28995 0000509B 74FB                    	JZ	short GotFor
 28996 0000509D C3                      	retn
 28997                                  
 28998                                  ;============================================================================
 28999                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29000                                  ;============================================================================
 29001                                  ; 30/07/2018 - Retro DOS v3.0
 29002                                  ; 29/04/2019 - Retro DOS v4.0
 29003                                  
 29004                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29005                                  
 29006                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29007                                  
 29008                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29009                                  ;	NAME	IBMCTRLC
 29010                                  
 29011                                  ;**	Low level routines for detecting special characters on CON input,
 29012                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29013                                  ;	process termination code, and the INT 0 divide overflow handler.
 29014                                  ;
 29015                                  ;	FATAL
 29016                                  ;	FATAL1
 29017                                  ;	reset_environment
 29018                                  ;	DSKSTATCHK
 29019                                  ;	SPOOLINT
 29020                                  ;	STATCHK
 29021                                  ;	CNTCHAND
 29022                                  ;	DIVOV
 29023                                  ;	CHARHARD
 29024                                  ;	HardErr
 29025                                  ;
 29026                                  ;	Revision history:
 29027                                  ;
 29028                                  ;	    AN000	version 4.0   Jan 1988
 29029                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29030                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29031                                  ;
 29032                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29033                                  ;	      flags register. In order to return to user normally DOS used to
 29034                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29035                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29036                                  ;
 29037                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29038                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29039                                  ;	      charhard.
 29040                                  
 29041                                  ; 29/04/2019 - Retro DOS v4.0
 29042                                  	; MSDOS 6.0
 29043                                  ;		public	LowInt23Addr		
 29044                                  LowInt23Addr: ;	LABEL	DWORD
 29045 0000509E [CD10]0000              	DW	LowInt23, 0
 29046                                  
 29047                                  ;		public	LowInt24Addr
 29048                                  LowInt24Addr: ;	LABEL	DWORD
 29049 000050A2 [E110]0000              	DW	LowInt24, 0
 29050                                  
 29051                                  ;		public	LowInt28Addr
 29052                                  LowInt28Addr: ;	LABEL	DWORD
 29053 000050A6 [F510]0000              	DW	LowInt28, 0
 29054                                  
 29055                                  ;Break	<Checks for ^C in CON I/O>
 29056                                  
 29057                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29058                                  ; 05/05/2019 - Retro DOS v4.0
 29059                                  
 29060                                  ;---------------------------------------------------------------------------
 29061                                  ;
 29062                                  ; Procedure Name : DSKSTATCHK
 29063                                  ;
 29064                                  ; Check for ^C if only one level in
 29065                                  ;
 29066                                  ;---------------------------------------------------------------------------
 29067                                  
 29068                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29069                                  
 29070                                  DSKSTATCHK:        
 29071                                  	;CMP	BYTE [INDOS],1
 29072 000050AA 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29073                                  	;retnz			; Do NOTHING
 29074                                  	; 16/12/2022
 29075 000050B0 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29076                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29077                                  	;jz	short _RET37 ; dskstatchk1
 29078                                  	;retn
 29079                                  ;_RET37:
 29080                                  ;dskstatchk1:
 29081 000050B2 51                      	PUSH    CX
 29082 000050B3 06                              PUSH    ES
 29083 000050B4 53                              PUSH    BX
 29084 000050B5 1E                              PUSH    DS
 29085 000050B6 56                              PUSH    SI
 29086                                          
 29087                                  	;PUSH	CS
 29088                                          ;POP	ES
 29089                                          ;PUSH	CS
 29090                                          ;POP	DS
 29091                                  
 29092 000050B7 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29093 000050B9 8EC3                    	MOV	ES,BX		; for deviocall2
 29094 000050BB 8EDB                    	MOV	DS,BX
 29095                                  
 29096                                  	; 16/12/2022
 29097                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29098                                  
 29099                                  	; 05/05/2019
 29100                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29101                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29102                                  	;mov	word [ss:DSKSTST],0
 29103                                  
 29104                                  	; 16/12/2022
 29105                                  	; 25/06/2019
 29106 000050BD C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29107 000050C2 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29108 000050C7 C706[9503]0000          	mov	word [DSKSTST],0
 29109                                  
 29110 000050CD BB[9203]                        MOV     BX,DSKSTCALL
 29111                                  
 29112                                  	;LDS	SI,[ss:BCON]
 29113                                          ; 25/062019
 29114 000050D0 C536[3200]              	lds	si,[BCON]
 29115                                  
 29116                                  ; 16/12/2022
 29117                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29118                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29119                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29120                                  ;	mov	word [ss:DSKSTST],0
 29121                                  ;	mov	bx,DSKSTCALL
 29122                                  ;	lds	si,[ss:BCON]
 29123                                  
 29124 000050D4 E890F5                  	CALL	DEVIOCALL2
 29125                                   	; 15/03/2018
 29126                                  	;;test	word [ss:DSKSTST],200h
 29127                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29128                                  	; 05/05/2019
 29129 000050D7 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29130 000050DD 7408                    	jz	short _GotCh		; No characters available
 29131                                  
 29132 000050DF 30C0                            XOR     AL,AL                   ; Set zero
 29133                                  RET36:
 29134 000050E1 5E                              POP     SI
 29135 000050E2 1F                              POP     DS
 29136 000050E3 5B                              POP     BX
 29137 000050E4 07                              POP     ES
 29138 000050E5 59                              POP     CX
 29139                                  	; 16/12/2022
 29140                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29141                                  _RET37:
 29142 000050E6 C3                              RETN
 29143                                  
 29144                                  _GotCh:
 29145 000050E7 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29146                                  
 29147 000050EB 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29148 000050ED 75F2                            JNZ     SHORT RET36
 29149 000050EF 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29150 000050F5 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29151 000050FB 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29152                                  	; 09/09/2018
 29153 00005100 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29154 00005107 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29155 0000510E E856F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29156 00005111 5E                              POP     SI
 29157 00005112 1F                              POP     DS
 29158 00005113 5B                              POP     BX                      ; Clean stack
 29159 00005114 07                              POP     ES
 29160 00005115 59                              POP     CX
 29161 00005116 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29162                                  
 29163                                  	; 05/05/2019
 29164                                  NOSTOP:
 29165                                  	; MSDOS 6.0
 29166 00005119 3C10                    	CMP	AL,"P"-"@"
 29167 0000511B 7509                    	JNZ	short check_next
 29168                                  				    	; SS override
 29169 0000511D 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29170 00005123 7405                    	JZ	short INCHKJ		; no
 29171                                  check_end:	; 24/09/2023
 29172 00005125 C3                      	retn
 29173                                  check_next:
 29174                                  	;IF	NOT TOGLPRN
 29175                                  	;CMP	AL,"N"-"@"
 29176                                  	;JZ	short INCHKJ
 29177                                  	;ENDIF
 29178                                  
 29179 00005126 3C03                    	CMP	AL,"C"-"@"
 29180                                  	; 24/09/2023
 29181                                  	;JZ	short INCHKJ
 29182                                  ;check_end:
 29183                                  	;retn
 29184 00005128 75FB                    	jnz	short check_end
 29185                                  
 29186                                  	; 24/09/2023
 29187                                  	; 08/09/2018
 29188                                  INCHKJ:	; 10/08/2018
 29189 0000512A E9A500                  	jmp	INCHK
 29190                                  
 29191                                  	; MSDOS 3.3
 29192                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29193                                          ;JZ	short INCHKJ
 29194                                  
 29195                                  	; 15/04/2018
 29196                                          ;;IF	NOT TOGLPRN
 29197                                          ;CMP	AL,"N"-"@"
 29198                                          ;JZ	SHORT INCHKJ
 29199                                          ;;ENDIF
 29200                                  	
 29201                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29202                                          ;JZ	short INCHKJ
 29203                                  	;RETN
 29204                                  
 29205                                  ;	; 08/09/2018
 29206                                  ;INCHKJ:; 10/08/2018
 29207                                  ;	JMP	INCHK
 29208                                  
 29209                                  ;----------------------------------------------------------------------------
 29210                                  ;
 29211                                  ; Procedure Name : SpoolInt
 29212                                  ;
 29213                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29214                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29215                                  ; the middle of an INT 24.
 29216                                  ;
 29217                                  ;----------------------------------------------------------------------------
 29218                                  
 29219                                  SPOOLINT:
 29220 0000512D 9C                              PUSHF
 29221                                  	; 15/03/2018
 29222 0000512E 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29223 00005134 7423                            JZ      SHORT POPFRET
 29224 00005136 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29225 0000513C 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29226                                  
 29227                                  	; 30/07/2018
 29228                                  
 29229                                  	; Note that we are going to allow an external program to issue system 
 29230                                  	; calls at this time. We MUST preserve IdleInt across this.
 29231                                  
 29232 0000513E 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29233                                  
 29234                                  	; 05/05/2019 - Retro DOS v4.0
 29235                                   
 29236                                  	; MSDOS 6.0
 29237 00005143 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29238 00005149 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29239 0000514B CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29240 0000514D EB05                    	jmp	short spool_ret_addr
 29241                                  
 29242                                  do_low_int28:
 29243                                  	;call	far [ss:LowInt28Addr]
 29244 0000514F 2EFF1E[A650]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29245                                  
 29246                                  spool_ret_addr:
 29247                                  	;INT	int_spooler		; INT 28h
 29248                                  
 29249 00005154 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29250                                  POPFRET:
 29251 00005159 9D                              POPF
 29252                                  _RET18:  
 29253 0000515A C3                      	RETN
 29254                                  
 29255                                  ; 05/05/2019 - Retro DOS v4.0
 29256                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29257                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29258                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29259                                  
 29260                                  ;----------------------------------------------------------------------------
 29261                                  ;
 29262                                  ; Procedure Name : STATCHK
 29263                                  ;
 29264                                  ;----------------------------------------------------------------------------
 29265                                  
 29266                                  STATCHK:
 29267 0000515B E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29268                                                                          ; input redirection
 29269 0000515E 53                              PUSH    BX
 29270 0000515F 31DB                            XOR     BX,BX
 29271 00005161 E8E8E4                          CALL	GET_IO_SFT
 29272 00005164 5B                              POP     BX
 29273 00005165 72F3                            JC      SHORT _RET18
 29274                                  
 29275 00005167 B401                            MOV     AH,1
 29276 00005169 E826F3                          CALL	IOFUNC
 29277 0000516C 74BF                            JZ      SHORT SPOOLINT
 29278 0000516E 3C13                            CMP     AL,'S'-'@'
 29279 00005170 75A7                            JNZ     SHORT NOSTOP
 29280                                  
 29281                                  	; 05/05/2019
 29282                                  	; MSDOS 6.0			; SS override
 29283 00005172 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29284 00005178 75AB                    	JNZ	short check_end		; AN000; yes
 29285                                  
 29286 0000517A 30E4                            XOR     AH,AH
 29287 0000517C E813F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29288 0000517F EB4A                            JMP     SHORT PAUSOSTRT
 29289                                  PRINTOFF:
 29290                                  PRINTON:
 29291 00005181 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29292                                  
 29293                                  	; 30/07/2018 - Retro DOS v3.0
 29294 00005186 53                      	PUSH	BX
 29295 00005187 BB0400                  	MOV	BX,4
 29296 0000518A E8BFE4                  	call	GET_IO_SFT
 29297 0000518D 5B                      	POP	BX
 29298 0000518E 72CA                    	jc	short _RET18
 29299 00005190 06                      	PUSH	ES
 29300 00005191 57                      	PUSH	DI
 29301 00005192 1E                      	PUSH	DS
 29302 00005193 07                      	POP	ES
 29303 00005194 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29304                                  	;test	word [es:di+5],800h
 29305                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29306                                  	; 05/05/2019
 29307 00005196 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29308 0000519B 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29309                                  
 29310                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29311                                  					; See if allowed
 29312 0000519D 50                      	push	ax
 29313 0000519E B82611                  	mov	ax,1126h
 29314 000051A1 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29315                                  			; Return: CF set on error, AX = error code
 29316                                  			; STACK unchanged
 29317 000051A3 58                      	pop	ax
 29318                                  
 29319 000051A4 730F                    	JNC	short NORM_PR 		; Echo is OK
 29320                                  
 29321                                  					; SS override
 29322 000051A6 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29323                                  
 29324                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29325                                  
 29326 000051AC 50                      	push    ax
 29327 000051AD B82411                  	mov     ax,1124h
 29328 000051B0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29329                                  			; ES:DI -> SFT, SS = DOS CS
 29330 000051B2 58                      	pop     ax
 29331                                  
 29332 000051B3 EB10                    	JMP	SHORT RETP6
 29333                                  NORM_PR:
 29334 000051B5 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29335 000051BB 7505                    	JNZ	short PRNOPN
 29336 000051BD E82BF4                  	call	DEV_CLOSE_SFT
 29337 000051C0 EB03                    	JMP	SHORT RETP6
 29338                                  PRNOPN:
 29339 000051C2 E81EF4                  	call	DEV_OPEN_SFT
 29340                                  RETP6:
 29341 000051C5 5F                      	POP	DI
 29342 000051C6 07                      	POP	ES
 29343                                  STATCHK_RETN:
 29344 000051C7 C3                              RETN
 29345                                  PAUSOLP:
 29346 000051C8 E862FF                          CALL    SPOOLINT
 29347                                  PAUSOSTRT:
 29348 000051CB B401                            MOV     AH,1
 29349 000051CD E8C2F2                          CALL	IOFUNC
 29350 000051D0 74F6                            JZ      SHORT PAUSOLP
 29351                                  INCHK:
 29352 000051D2 53                              PUSH    BX
 29353 000051D3 31DB                            XOR     BX,BX
 29354 000051D5 E874E4                          CALL	GET_IO_SFT
 29355 000051D8 5B                              POP     BX
 29356 000051D9 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29357 000051DB 30E4                            XOR     AH,AH
 29358 000051DD E8B2F2                          CALL	IOFUNC
 29359                                  	; 30/07/2018
 29360                                  	; MSDOS 3.3
 29361                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29362                                          ;JNZ	SHORT NOPRINT
 29363                                  
 29364                                  	;cmp	byte [SS:SCAN_FLAG],0
 29365                                  	;JZ	SHORT PRINTON	
 29366                                  	;mov	byte [ss:SCAN_FLAG],0
 29367                                  
 29368                                  	; 05/05/2019
 29369                                  	; MSDOS 6.0
 29370 000051E0 3C10                    	CMP	AL,"P"-"@"
 29371                                  	;;;;  7/14/86	ALT_Q key fix
 29372 000051E2 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29373                                  ;NOPRINT:	
 29374                                  	;IF	NOT TOGLPRN
 29375                                  	;CMP	AL,"N"-"@"
 29376                                  	;JZ	short PRINTOFF
 29377                                  	;ENDIF
 29378 000051E4 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29379                                  	;retnz
 29380 000051E6 75DF                    	jnz	short STATCHK_RETN
 29381                                  
 29382                                  	; !! NOTE: FALL THROUGH !!
 29383                                  
 29384                                  ;---------------------------------------------------------------------------
 29385                                  ;
 29386                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29387                                  ;
 29388                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29389                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29390                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29391                                  ; processing to continue; 2) the original interrupt return address to the code
 29392                                  ; that performed the function call in the first place. If the user CTRL-C
 29393                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29394                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29395                                  ; is simulated.
 29396                                  ;
 29397                                  ;---------------------------------------------------------------------------
 29398                                  
 29399                                  CNTCHAND:
 29400                                  	; MSDOS 6.0			; SS override
 29401                                  					; AN002; from RAWOUT
 29402                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29403                                  	;JNZ	short around_deadlock 	; AN002;
 29404                                  
 29405                                  	; 05/05/2019 - Retro DOS v4.0
 29406                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29407 000051E8 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29408 000051EE 7508                    	JNZ	short around_deadlock 	; AN002;
 29409                                  
 29410 000051F0 B003                            MOV     AL,3			; Display "^C"
 29411 000051F2 E802C5                          CALL	BUFOUT
 29412 000051F5 E8A0C3                          CALL	CRLF
 29413                                  around_deadlock:
 29414 000051F8 16                              PUSH    SS
 29415 000051F9 1F                              POP     DS
 29416 000051FA 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29417 000051FF 7403                            JZ      SHORT NOSWAP
 29418 00005201 E8B2E0                          CALL	SWAPBACK
 29419                                  NOSWAP:
 29420 00005204 FA                      	CLI				; Prepare to play with stack
 29421 00005205 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29422 00005209 8B26[8405]              	MOV	SP,[USER_SP]
 29423 0000520D E83FB2                          CALL	restore_world       ; User registers now restored
 29424                                  
 29425                                  	; 30/07/2018 - Retro DOS v3.0 
 29426                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29427                                          ; 14/03/2018 - Retro DOS v2.0
 29428                                  	;MOV	BYTE [CS:INDOS],0	
 29429                                          ;MOV	BYTE [CS:ERRORMODE],0
 29430                                          ;MOV	[CS:ConC_Spsave],SP
 29431                                  	;clc	;30/07/2018
 29432                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29433                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29434                                  			; Return: return via RETF 2 with CF set
 29435                                  			; DOS will abort program with errorlevel 0
 29436                                  			; else
 29437                                  			; interrupted DOS call continues
 29438                                  
 29439                                  	; 05/05/2019 - Retro DOS v4.0
 29440                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29441                                  
 29442                                  	; CS was used to address these variables. We have to use DOSDATA
 29443                                  	
 29444 00005210 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29445                                  			; (pop es, after 'call restore_world')	
 29446 00005211 1E                      	push	ds
 29447                                  	;getdseg <ds>			; ds -> dosdata
 29448 00005212 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29449 00005217 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29450 0000521C C606[2003]00            	mov	byte [ERRORMODE],0
 29451 00005221 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29452                                  	; User SP has changed because of push. Adjust for it
 29453 00005225 8306[3203]02            	add	word [ConC_Spsave],2
 29454                                  
 29455 0000522A 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29456 0000522F 1F                       	pop	ds	; restore ds
 29457 00005230 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29458 00005232 F8                      	CLC				
 29459 00005233 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29460 00005235 EB06                    	jmp	short ctrlc_ret_addr
 29461                                  
 29462                                  	; 05/05/2019
 29463                                  do_low_int23:
 29464 00005237 F8                      	clc
 29465 00005238 2EFF1E[9E50]            	call	far [cs:LowInt23Addr]	
 29466                                  
 29467                                  	; 30/07/2018 
 29468                                  
 29469                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29470                                  
 29471                                  ; The user has returned to us. The circumstances we allow are:
 29472                                  ;
 29473                                  ;   IRET	We retry the operation by redispatching the system call
 29474                                  ;   CLC/RETF	POP the stack and retry
 29475                                  ;   ... 	Exit the current process with ^C exit
 29476                                  ;
 29477                                  ; User's may RETURN to us and leave interrupts on. 
 29478                                  ; Turn 'em off just to be sure
 29479                                  
 29480                                  ctrlc_ret_addr: ; 05/05/2019
 29481                                  
 29482 0000523D FA                      	CLI
 29483                                  
 29484                                  	; MSDOS 3.3 
 29485                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29486                                  	;PUSHF				; and the flags (maybe new call)
 29487                                  	;POP	AX
 29488                                  
 29489                                  	; 05/05/2019
 29490                                  	; MSDOS 6.0
 29491                                  
 29492                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29493                                  
 29494 0000523E 50                      	push	ax
 29495 0000523F 8CD8                    	mov	ax,ds
 29496                                  	;getdseg <ds>			; ds -> dosdata
 29497 00005241 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29498 00005246 A3[0A0D]                	mov	[TEMPSEG],ax
 29499 00005249 58                      	pop	ax
 29500 0000524A A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29501 0000524D 9C                      	pushf				; and the flags (maybe new call)
 29502 0000524E 58                      	pop	ax
 29503                                  
 29504                                  ; See if the input stack is identical to the output stack
 29505                                  
 29506                                  	; MSDOS 3.3
 29507                                  	;CMP	SP,[CS:ConC_Spsave]
 29508                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29509                                  
 29510                                  	; MSDOS 6.0
 29511 0000524F 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29512 00005253 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29513                                  
 29514                                  ; Repeat the operation by redispatching the system call.
 29515                                  
 29516                                  ctrlc_repeat:
 29517                                  	; MSDOS 3.3
 29518                                  	;MOV	AX,[CS:USER_IN_AX]
 29519                                  	; 05/05/2019
 29520                                  	; MSDOS 6.0
 29521 00005255 A1[3A03]                	mov	ax,[USER_IN_AX]
 29522 00005258 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29523                                  	; MSDOS 3.3 & MSDOS 6.0 
 29524                                  	;transfer COMMAND
 29525                                  COMMANDJ:
 29526 0000525C E9A8B0                  	JMP	COMMAND
 29527                                  
 29528                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29529                                  ; RETF'd leaving some flags on the stack and examine the input
 29530                                  
 29531                                  ctrlc_try_new:
 29532 0000525F 83C402                  	ADD	SP,2			; pop those flags
 29533                                  	;;test	ax,1
 29534                                  	;TEST	AX,f_Carry		; did he return with carry?
 29535 00005262 A801                    	test	al,f_Carry ; test al,1
 29536 00005264 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29537                                  
 29538                                  	; MSDOS 6.0
 29539 00005266 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29540                                  
 29541                                  	; Well...  time to abort the user.  
 29542                                  	; Signal a ^C exit and use the EXIT system call..
 29543                                  
 29544                                  ctrlc_abort:
 29545                                  	; MSDOS 3.3
 29546                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29547                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29548                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29549                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29550                                  	;;JMP	SHORT COMMANDJ
 29551                                  	;JMP	COMMAND
 29552                                  
 29553                                  	; 05/05/2019 - Retro DOS v4.0
 29554                                  	; MSDOS 6.0
 29555 0000526A B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29556 0000526D 1E                      	push	ds
 29557                                  	;getdseg <ds>			; ds -> dosdata
 29558 0000526E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29559 00005273 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29560 00005278 1F                      	pop	ds
 29561                                  	;transfer COMMAND		; give up by faking $EXIT
 29562 00005279 EBE1                    	JMP	SHORT COMMANDJ
 29563                                  	;JMP	COMMAND
 29564                                  
 29565                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29566                                  ;----------------------------------------------------------------------------
 29567                                  ;
 29568                                  ; Procedure Name : DIVOV
 29569                                  ;
 29570                                  ; Default handler for division overflow trap
 29571                                  ;
 29572                                  ;----------------------------------------------------------------------------
 29573                                  
 29574                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29575                                  DIVOV: 
 29576                                  	; 05/05/2019 - Retro DOS v4.0
 29577                                  	; 30/07/2018
 29578                                  	; 07/07/2018 - Retro DOS v3.0
 29579 0000527B BE[A209]                	mov	si,DIVMES
 29580 0000527E 2E8B1E[B509]            	mov	bx,[cs:DivMesLen]
 29581                                  	;mov	ax,cs
 29582                                  	;mov	ss,ax
 29583                                  	; 05/05/2019
 29584                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29585 00005283 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29586 00005288 BC[A007]                	mov     sp,AUXSTACK
 29587                                  	;call	RealDivOv ; MSDOS 3.3
 29588 0000528B E80200                  	call	_OUTMES ; MSDOS 6.0
 29589 0000528E EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29590                                  
 29591                                  ; 30/07/2018
 29592                                  
 29593                                  ; MSDOS 6.0
 29594                                  ;---------------------------------------------------------------------------
 29595                                  ;
 29596                                  ; Procedure Name : OutMes
 29597                                  ;
 29598                                  ;
 29599                                  ; OutMes: perform message output
 29600                                  ; Inputs:   SS:SI points to message
 29601                                  ;	    BX has message length
 29602                                  ; Outputs:  message to BCON
 29603                                  ;
 29604                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29605                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29606                                  ;NB. This procedure is called only from DIVOV. -SR
 29607                                  ;
 29608                                  ;---------------------------------------------------------------------------
 29609                                  
 29610                                  ;MSDOS 3.3
 29611                                  ;---------------------------------------------------------------------------
 29612                                  ; RealDivOv: perform actual divide overflow stuff.
 29613                                  ; Inputs:   none
 29614                                  ; Outputs:  message to BCON
 29615                                  ;---------------------------------------------------------------------------
 29616                                  
 29617                                  	; 05/05/2019 - Retro DOS v4.0
 29618                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29619                                  
 29620                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29621                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29622                                  
 29623                                  ;---------------------------------------------------------------------------
 29624                                  ;
 29625                                  ; Procedure Name : OutMes
 29626                                  ;
 29627                                  ; OutMes: perform message output
 29628                                  ; Inputs:   SS:SI points to message
 29629                                  ;	    BX has message length
 29630                                  ; Outputs:  message to BCON
 29631                                  ;
 29632                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29633                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29634                                  ;NB. This procedure is called only from DIVOV. -SR
 29635                                  ;
 29636                                  ;---------------------------------------------------------------------------
 29637                                  
 29638                                  	; 30/07/2018
 29639                                  	; MSDOS 6.0
 29640                                  _OUTMES:
 29641                                  	; MSDOS 3.3
 29642                                  ;RealDivOv:
 29643                                  	; 07/07/2018 - Retro DOS v3.0
 29644                                          ;Context ES
 29645 00005290 16                      	push	ss ; 05/05/2019
 29646                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29647 00005291 07                      	POP	ES
 29648                                          ;Context DS
 29649 00005292 16                      	push	ss ; 05/05/2019	
 29650                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29651 00005293 1F                      	POP	DS
 29652 00005294 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29653 00005299 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29654 0000529E C706[9503]0000                  MOV     WORD [DSKSTST],0
 29655                                  	; BX = [DivMesLen] = 19
 29656 000052A4 891E[A403]                      MOV     [DSKSTCNT],BX
 29657 000052A8 BB[9203]                        MOV     BX,DSKSTCALL
 29658 000052AB 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29659                                  	; 08/09/2018
 29660                                  	;mov	[DEVIOBUF_PTR],si
 29661                                  	; MSDOS 6.0
 29662                                  					; CS is used for string, fill in 
 29663                                  					; segment address 
 29664 000052AF 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29665                                  
 29666 000052B3 C536[3200]                      LDS     SI,[BCON]
 29667 000052B7 E8ADF3                          CALL	DEVIOCALL2
 29668                                  
 29669                                  	;; 14/03/2018
 29670                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29671                                  	;; 08/09/2018
 29672                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29673                                          ;MOV	WORD [CS:DSKSTCNT],1
 29674                                          
 29675                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29676                                  
 29677                                  	; ES still points to DOSDATA. ES is
 29678                                  					; not destroyed by deviocall2. So use
 29679                                  					; ES override.
 29680                                  
 29681 000052BA 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29682 000052C1 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29683                                  
 29684 000052C8 C3                      	RETN
 29685                                  
 29686                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29687                                  ;---------------------------------------------------------------------------
 29688                                  ;
 29689                                  ; Procedure Name : CHARHARD
 29690                                  ;
 29691                                  ;
 29692                                  ; Character device error handler
 29693                                  ; Same function as HARDERR
 29694                                  ;
 29695                                  ;---------------------------------------------------------------------------
 29696                                  
 29697                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29698                                  CHARHARD:
 29699                                  	; 05/05/2019 - Retro DOS v4.0
 29700                                  	; 30/07/2018
 29701                                  	; 08/07/2018 - Retro DOS v3.0
 29702                                  
 29703                                  	; MSDOS 6.0
 29704                                  		   			; M024 - start
 29705 000052C9 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29706                                  	;jne	short @f		; Y: allow fail
 29707 000052CF 750B                    	jne	short chard1
 29708                                  
 29709 000052D1 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29710                                  
 29711 000052D4 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29712 000052DA 7503                    	jnz	short ctrlp		; Y: 
 29713                                  ;@@:
 29714                                  chard1:					; M024 - end
 29715                                  	; MSDOS 6.0 & MSDOS 3.3
 29716                                  
 29717                                  ; Character device error handler
 29718                                  ; Same function as HARDERR
 29719                                  
 29720                                  	;or	ah,38h
 29721 000052DC 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29722                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29723 000052DF 368826[4B03]            	mov	[SS:ALLOWED],ah
 29724                                  
 29725                                  	; 15/03/2018
 29726 000052E4 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29727 000052E9 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29728 000052EE 56                              PUSH    SI
 29729                                  	;and	di,0FFh
 29730 000052EF 81E7FF00                        AND     DI,STECODE
 29731 000052F3 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29732 000052F5 E86400                          CALL    FATALC
 29733 000052F8 5E                              POP     SI
 29734                                  	;return
 29735 000052F9 C3                              RETN
 29736                                  
 29737                                  ;---------------------------------------------------------------------------
 29738                                  ;
 29739                                  ; Procedure Name : HardErr
 29740                                  ;
 29741                                  ; Hard disk error handler. Entry conditions:
 29742                                  ;	DS:BX = Original disk transfer address
 29743                                  ;	DX = Original logical sector number
 29744                                  ;	CX = Number of sectors to go (first one gave the error)
 29745                                  ;	AX = Hardware error code
 29746                                  ;	DI = Original sector transfer count	
 29747                                  ;	ES:BP = Base of drive parameters
 29748                                  ;	[READOP] = 0 for read, 1 for write
 29749                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29750                                  ; Output:
 29751                                  ;	[FAILERR] will be set if user responded FAIL
 29752                                  ;
 29753                                  ;--------------------------------------------------------------------------
 29754                                  
 29755                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29756                                  HARDERR:
 29757                                  	; 05/05/2019 - Retro DOS v4.0
 29758                                  	; 30/07/2018
 29759                                  	; 08/07/2018 - Retro DOS v3.0
 29760 000052FA 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29761                                          ;and	di,0FFh
 29762 000052FB 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29763                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29764                                  	;cmp	di,0
 29765 000052FF 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29766 00005302 750A                            JNZ     short NOSETWRPERR
 29767 00005304 50                              PUSH    AX
 29768                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29769                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29770                                          ;;MOV	AL,[ES:BP+0]
 29771                                  	; 15/12/2022
 29772 00005305 268A4600                	mov	al,[ES:BP]
 29773                                          	; 15/03/2018
 29774 00005309 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29775 0000530D 58                              POP     AX
 29776                                  NOSETWRPERR:
 29777 0000530E 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29778 00005310 01C2                            ADD     DX,AX                   ; First sector number to retry
 29779 00005312 52                              PUSH    DX
 29780                                  	; 08/07/2018
 29781                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29782 00005313 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29783 00005317 5A                              POP     DX
 29784 00005318 01C3                            ADD     BX,AX                   ; First address for retry
 29785 0000531A 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29786                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29787 0000531C 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29788 00005320 721A                            JB      SHORT ERRINT
 29789 00005322 FEC4                            INC     AH                      ; Flag for FAT
 29790                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29791                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29792 00005324 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29793 00005328 7308                    	JAE	short TESTDIR 		; No
 29794                                  		 ; Err in FAT must force recomp of freespace
 29795                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29796                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29797 0000532A 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29798 00005330 EB0A                    	JMP	SHORT ERRINT
 29799                                  TESTDIR:
 29800 00005332 FEC4                            INC     AH
 29801                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29802 00005334 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29803 00005338 7202                            JB      SHORT ERRINT
 29804 0000533A FEC4                            INC     AH                      ; Must be in data area
 29805                                  ERRINT:
 29806 0000533C D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29807 0000533E 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29808                                  
 29809                                  	; 15/08/2018
 29810                                  					; SS override for allowed and EXITHOLD
 29811 00005343 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29812                                  
 29813                                          ;entry   FATAL
 29814                                  FATAL:
 29815                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29816                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29817                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29818                                  	; 15/12/2022
 29819 00005348 268A4600                	MOV	AL,[ES:BP]        
 29820                                  
 29821                                  	;entry   FATAL1
 29822                                  FATAL1:  
 29823                                  	; 15/03/2018      
 29824 0000534C 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29825 00005351 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29826                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29827                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29828 00005356 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29829 0000535A 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29830                                  
 29831                                  	; DI has the INT-24-style extended error. We now map the error code 
 29832                                  	; for this into the normalized get extended error set by using the 
 29833                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29834                                  	; the device returned codes and leave all others beyond the look up 
 29835                                  	; table alone.
 29836                                  
 29837                                  	; 08/07/2018 - Retro DOS v3.0
 29838                                  FATALC:
 29839 0000535C E89701                  	call	SET_I24_EXTENDED_ERROR
 29840                                  	;cmp	di,0Ch
 29841 0000535F 83FF0C                  	CMP	DI,error_I24_gen_failure
 29842 00005362 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29843 00005364 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29844                                  					;  Only come via GetExtendedError
 29845                                  ;** ----------------------------------------------------------------
 29846                                  ;
 29847                                  ; Entry point used by REDIRector on Network I 24 errors.
 29848                                  ;
 29849                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29850                                  ;
 29851                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29852                                  ;     EXITHOLD set for restore of ES:BP.
 29853                                  ; ------------------------------------------------------------------
 29854                                  	;entry	NET_I24_ENTRY
 29855                                  NET_I24_ENTRY:
 29856                                  GOT_RIGHT_CODE:
 29857 00005367 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29858 0000536D 7404                            JZ	SHORT NoSetFail
 29859 0000536F B003                    	MOV	AL,3
 29860 00005371 EB6C                    	JMP	short FailRet
 29861                                  NoSetFail:
 29862 00005373 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29863 00005378 16                              PUSH	SS
 29864 00005379 07                              POP	ES
 29865                                      
 29866                                  	; Wango!!! We may need to free some user state info... In 
 29867                                  	; particular, we may have locked down a JFN for a user and he may 
 29868                                  	; NEVER return to us. Thus,we need to free it here and then 
 29869                                  	; reallocate it when we come back.
 29870                                  
 29871 0000537A 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29872 00005380 740C                    	JZ	short _NoFree
 29873 00005382 1E                      	push	ds
 29874 00005383 56                      	push	si
 29875 00005384 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29876 00005389 C604FF                  	MOV	BYTE [SI],0FFH
 29877 0000538C 5E                      	pop	si
 29878 0000538D 1F                      	pop	ds
 29879                                  
 29880                                  _NoFree:
 29881 0000538E FA                      	CLI
 29882                                  					; Prepare to play with stack
 29883 0000538F 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29884 00005394 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29885                                  
 29886                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29887                                  
 29888                                  	;; Extended Open hooks
 29889                                  					; AN000;IFS.I24 error disabled
 29890                                  	;test	byte [ss:EXTOPEN_ON],2
 29891 00005399 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29892 0000539F 7404                    	JZ	short i24yes		; AN000;IFS.no
 29893                                  faili24:				; AN000;
 29894 000053A1 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29895 000053A3 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29896                                  i24yes: 				; AN000;
 29897                                  	;; Extended Open hooks
 29898                                  
 29899 000053A5 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29900 000053AA 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29901                                  
 29902                                  	;;int	24h	
 29903                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29904                                  					; must preserve ES
 29905                                  	; 05/05/2019
 29906 000053AF 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29907 000053B5 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29908 000053B7 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29909                                  					; must preserve ES
 29910 000053B9 EB05                    	jmp	short criterr_ret_addr
 29911                                  
 29912                                  do_low_int24:
 29913                                  	; 05/05/2019
 29914                                  	; MSDOS 6.0
 29915 000053BB 2EFF1E[A250]            	call    far [cs:LowInt24Addr]
 29916                                  criterr_ret_addr:
 29917 000053C0 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29918 000053C5 268C16[8605]                    MOV     [ES:USER_SS],SS
 29919 000053CA 8CC5                            MOV     BP,ES
 29920 000053CC 8ED5                            MOV     SS,BP
 29921                                  passi24:
 29922 000053CE 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29923 000053D3 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29924 000053D8 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29925 000053DE FB                              STI
 29926                                  FailRet:
 29927 000053DF 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29928                                  	
 29929                                  	; 08/07/2018
 29930                                  
 29931                                  	; Triage the user's reply.
 29932                                  
 29933 000053E4 3C01                    	CMP	AL,1
 29934 000053E6 723D                    	JB	short CheckIgnore	; 0 => ignore
 29935 000053E8 7445                    	JZ	short CheckRetry	; 1 => retry
 29936 000053EA 3C03                    	CMP	AL,3			; 3 => fail
 29937 000053EC 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29938                                  
 29939                                  	; The reply was fail. See if we are allowed to fail.
 29940                                  
 29941                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29942                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29943                                  	;test	byte [ss:ALLOWED],8
 29944 000053EE 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29945 000053F4 7443                    	jz	short DoAbort	; No, do abort
 29946                                  DoFail:
 29947 000053F6 B003                    	MOV	AL,3		; just in case...
 29948                                  				; AN000;EO. I24 error disabled
 29949                                  	; 05/05/2019
 29950                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29951 000053F8 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29952 000053FE 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29953                                  	
 29954 00005400 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29955                                  CleanUp:
 29956 00005405 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29957 0000540B 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29958                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29959                                  	;jnz	short CleanUp2
 29960                                  	;retn
 29961                                  	; 17/12/2022
 29962 00005411 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29963                                  CleanUp2:
 29964 00005413 1E                      	push	ds
 29965 00005414 56                      	push	si
 29966 00005415 50                      	push	ax
 29967 00005416 36A1[AA05]              	MOV	AX,[ss:SFN]
 29968 0000541A 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29969 0000541F 8804                    	MOV	[SI],AL
 29970 00005421 58                      	pop	ax
 29971 00005422 5E                      	pop	si
 29972 00005423 1F                      	pop	ds
 29973                                  Cleanup_retn:
 29974 00005424 C3                      	retn
 29975                                  
 29976                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29977                                  
 29978                                  CheckIgnore:
 29979                                  	;test	byte [ss:ALLOWED],20h
 29980 00005425 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29981 0000542B 74C9                    	jz	short DoFail			 ; No, do fail
 29982 0000542D EBD6                    	jmp	short CleanUp
 29983                                  
 29984                                  	; The reply was RETRY. See if we are allowed to retry.
 29985                                  
 29986                                  CheckRetry:
 29987                                  	;test	byte [ss:ALLOWED],10h
 29988 0000542F 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29989 00005435 74BF                    	jz	short DoFail			; No, do fail
 29990 00005437 EBCC                    	JMP	short CleanUp
 29991                                  
 29992                                  	; The reply was ABORT.
 29993                                  DoAbort:
 29994 00005439 16                      	push	ss
 29995 0000543A 1F                      	pop	ds
 29996                                  
 29997 0000543B 803E[5703]00            	CMP	byte [CONSWAP],0
 29998 00005440 7403                    	JZ	short NOSWAP2
 29999 00005442 E871DE                  	call	SWAPBACK
 30000                                  NOSWAP2:
 30001                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30002                                  	; turn this abort into a fail.
 30003                                  
 30004                                  	;test	[fAborting],0FFh
 30005                                  	;jnz	short DoFail
 30006                                  
 30007 00005445 803E[5903]00            	cmp	byte [fAborting],0
 30008 0000544A 75AA                    	JNZ	short DoFail
 30009                                  
 30010                                  	; Set return code
 30011                                  
 30012 0000544C C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30013 00005451 30C0                    	XOR	AL,AL
 30014                                  
 30015                                  	; we are truly aborting the process. Go restore information from 
 30016                                  	; the PDB as necessary.
 30017                                  
 30018 00005453 E9850D                  	jmp	exit_inner
 30019                                  
 30020                                  ;** --------------------------------------------------------------------------
 30021                                  ;
 30022                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30023                                  ; different, then an old-style return is performed. If they are the same,
 30024                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30025                                  ; the source of the terminate addresses.
 30026                                  ;
 30027                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30028                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30029                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30030                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30031                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30032                                  ; operation. In essence, we dis-allow the abort response.
 30033                                  ;
 30034                                  ; output:   none.
 30035                                  ; ----------------------------------------------------------------------------
 30036                                  
 30037                                  	;entry	reset_environment
 30038                                  	
 30039                                  reset_environment:
 30040                                  	; 30/07/2018 - Retro DOS v3.0
 30041                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30042                                  
 30043                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30044                                  
 30045 00005456 1E                      	PUSH	DS			; save PDB of process
 30046                                  
 30047                                  	; There are no critical sections in force. Although we may enter 
 30048                                  	; here with critical sections locked down, they are no longer 
 30049                                  	; relevant. We may safely free all allocated resources.
 30050                                  
 30051 00005457 B482                    	MOV	AH,82h
 30052                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30053                                  	;int	2Ah 	
 30054 00005459 CD2A                    	INT	int_IBM
 30055                                  
 30056                                  					; SS override
 30057 0000545B 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30058                                  
 30059                                  					; DOS 4.00 doesn't need it
 30060                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30061                                  					; Allow REDIR to clear some stuff
 30062                                  					; On process exit.
 30063 00005461 B82211                  	mov     ax, 1122h
 30064 00005464 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30065                                  			; SS = DOS CS
 30066                                  	;mov	al,22h	
 30067 00005466 B022                    	MOV	AL,int_terminate
 30068 00005468 E82EBA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30069                                  
 30070 0000546B 59                      	POP	CX			; get ThisPDB
 30071 0000546C 06                      	push	es
 30072 0000546D 53                      	push	bx			; save return address
 30073                                  
 30074 0000546E 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30075 00005473 8EDB                    	MOV	DS,BX
 30076 00005475 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30077                                  
 30078                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30079                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30080                                  	; is not Exit_keep_process
 30081                                  	
 30082 00005478 39D8                    	CMP	AX,BX
 30083 0000547A 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30084 0000547C 39CB                    	CMP	BX,CX
 30085 0000547E 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30086 00005480 50                      	PUSH	AX			; save parent
 30087                                  
 30088                                  					; SS override
 30089                                  	;cmp	byte [SS:EXIT_TYPE],3
 30090 00005481 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30091 00005487 7406                    	JZ	short reset_to_parent 	; keeping this process
 30092                                  
 30093                                  	; We are truly removing a process. Free all allocation blocks 
 30094                                  	; belonging to this PDB
 30095                                  
 30096                                  	;invoke	arena_free_process
 30097 00005489 E8870D                  	call	arena_free_process
 30098                                  
 30099                                  	; Kill off remainder of this process. Close file handles and signal 
 30100                                  	; to relevant network folks that this process is dead. Remember that 
 30101                                  	; CurrentPDB is STILL the current process!
 30102                                  
 30103                                  	;invoke	DOS_ABORT
 30104 0000548C E82EDA                  	call	DOS_ABORT
 30105                                  
 30106                                  reset_to_parent:
 30107                                  					; SS override
 30108 0000548F 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30109                                  
 30110                                  reset_return:				; come here for normal return
 30111                                  	;Context DS			; DS is used to refer to DOSDATA  
 30112 00005494 16                      	push	ss
 30113 00005495 1F                      	pop	ds	
 30114                                  
 30115 00005496 B0FF                    	MOV	AL,-1
 30116                                  
 30117                                  	; make sure that everything is clean In this case ignore any errors, 
 30118                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30119                                  
 30120                                  	;EnterCrit critDisk
 30121 00005498 E877BE                  	call	ECritDisk
 30122                                  	;invoke	FLUSHBUF
 30123 0000549B E8A505                  	call	FLUSHBUF
 30124                                  	;LeaveCrit critDisk
 30125 0000549E E88CBE                  	call	LCritDisk
 30126                                  
 30127                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30128                                  
 30129 000054A1 E883F7                  	call	CHECK_VIRT_OPEN
 30130 000054A4 FA                      	CLI
 30131 000054A5 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30132 000054AA C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30133 000054AF C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30134 000054B4 8F06[8005]              	POP	WORD [EXITHOLD]
 30135 000054B8 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30136                                  
 30137                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30138                                  
 30139 000054BC 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30140 000054C0 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30141 000054C4 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30142                                  
 30143 000054C8 E884AF                  	call	restore_world
 30144                                  
 30145                                  	; 05/05/2019
 30146 000054CB 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30147                                  
 30148                                  	; MSDOS 6.0
 30149 000054CC 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30150 000054CD 8CD8                    	mov	ax,ds			; and not on stack.
 30151                                  	;getdseg <ds>			; ds -> dosdata
 30152 000054CF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30153 000054D4 A3[0A0D]                	mov	[TEMPSEG],ax
 30154 000054D7 58                      	pop	ax
 30155                                  					; set up ds to DOSDATA
 30156                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30157 000054D8 A3[8405]                	mov	[USER_SP],ax
 30158                                  
 30159 000054DB 58                      	POP	AX			; suck off CS:IP of interrupt...
 30160 000054DC 58                      	POP	AX
 30161 000054DD 58                      	POP	AX
 30162                                  
 30163                                  ; M011 : BEGIN
 30164                                  
 30165                                  	; MSDOS 3.3
 30166                                  ;	MOV	AX,0F202h	; STI
 30167                                  
 30168                                  	; MSDOS 6.0
 30169 000054DE 9F                      	LAHF
 30170 000054DF 86E0                    	XCHG	AH,AL
 30171 000054E1 2402                    	AND	AL,2
 30172 000054E3 B4F2                    	MOV	AH,0F2h
 30173                                  
 30174                                  ; M011 : END
 30175                                  
 30176                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30177 000054E5 50                      	PUSH	AX
 30178                                   
 30179                                  	;PUSH	word [CS:EXITHOLD+2]
 30180                                  	;PUSH	word [CS:EXITHOLD]
 30181                                  	
 30182                                  	; MSDOS 6.0
 30183 000054E6 FF36[8205]              	PUSH	word [EXITHOLD+2]
 30184 000054EA FF36[8005]              	PUSH	word [EXITHOLD]
 30185                                  
 30186                                  	;MOV	AX,[CS:USER_SP]
 30187                                  
 30188                                  	; MSDOS 6.0
 30189 000054EE A1[8405]                	MOV	AX,[USER_SP]
 30190 000054F1 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30191                                  
 30192 000054F5 CF                      	IRET			; Long return back to user terminate address
 30193                                  
 30194                                  ;---------------------------------------------------------------------------
 30195                                  ;
 30196                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30197                                  ;
 30198                                  ; This routine handles extended error codes.
 30199                                  ; Input : DI = error code from device
 30200                                  ; Output: All EXTERR fields are set
 30201                                  ;
 30202                                  ;--------------------------------------------------------------------------
 30203                                  
 30204                                  SET_I24_EXTENDED_ERROR:
 30205 000054F6 50                      	PUSH	AX
 30206                                  					; ErrMap24End is in DOSDATA
 30207 000054F7 B8[BB0E]                	MOV	AX,ErrMap24End
 30208 000054FA 2D[AB0E]                	SUB	AX,ErrMap24
 30209                                  					; Change to dosdata to access 
 30210                                  					; ErrMap24 and EXTERR -SR
 30211                                  	; 05/05/2019 - Retro DOS v4.0
 30212                                  	
 30213                                  	; MSDOS 6.0
 30214 000054FD 1E                      	push	ds
 30215                                  	;getdseg <ds>			; ds ->dosdata
 30216 000054FE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30217                                  
 30218                                  	; AX is the index of the first unavailable error. Do not translate 
 30219                                  	; if greater or equal to AX.
 30220                                  
 30221 00005503 39C7                    	CMP	DI,AX
 30222 00005505 89F8                    	MOV	AX,DI
 30223 00005507 7306                    	JAE	short NoTrans
 30224                                  
 30225                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30226 00005509 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30227 0000550D 30E4                    	XOR	AH,AH
 30228                                  NoTrans:
 30229                                  	;MOV	[CS:EXTERR],AX
 30230 0000550F A3[2403]                	mov	[EXTERR],AX
 30231 00005512 1F                      	pop	ds
 30232                                  	;assume	ds:nothing
 30233 00005513 58                      	POP	AX
 30234                                  
 30235                                  	; Now Extended error is set correctly. Translate it to get correct 
 30236                                  	; error locus class and recommended action.
 30237                                  
 30238 00005514 56                      	PUSH	SI
 30239                                  					; ERR_TABLE_24 is in DOSCODE 
 30240 00005515 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30241 00005518 E863B1                  	call	CAL_LK			; Set other extended error fields
 30242 0000551B 5E                      	POP	SI
 30243 0000551C C3                      	retn
 30244                                  
 30245                                  ;============================================================================
 30246                                  ; FAT.ASM, MSDOS 6.0, 1991
 30247                                  ;============================================================================
 30248                                  ; 30/07/2018 - Retro DOS v3.0
 30249                                  ; 20/05/2019 - Retro DOS v4.0
 30250                                  
 30251                                  ;	TITLE	FAT - FAT maintenance routines
 30252                                  ;	NAME	FAT
 30253                                  
 30254                                  ;**	FAT.ASM
 30255                                  ;----------------------------------------------------------------------------
 30256                                  ;	Low level local device routines for performing disk change sequence,
 30257                                  ;	setting cluster validity, and manipulating the FAT
 30258                                  ;
 30259                                  ;	IsEof
 30260                                  ;	UNPACK
 30261                                  ;	PACK
 30262                                  ;	MAPCLUSTER
 30263                                  ;	FATREAD_SFT
 30264                                  ;	FATREAD_CDS
 30265                                  ;	FAT_operation
 30266                                  ;
 30267                                  ;	Revision history:
 30268                                  ;
 30269                                  ;	  AN000  version Jan. 1988
 30270                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30271                                  ;
 30272                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30273                                  ;	       from CL0FATENTRY rather than disk.
 30274                                  
 30275                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30276                                  
 30277                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30278                                  ;----------------------------------------------------------------------------
 30279                                  ;
 30280                                  ; Procedure Name : IsEOF
 30281                                  ;
 30282                                  ; IsEOF - check the fat value in BX for eof.
 30283                                  ;
 30284                                  ;   Inputs:	ES:BP point to DPB
 30285                                  ;		BX has fat value
 30286                                  ;   Outputs:	JAE eof
 30287                                  ;   Registers modified: none
 30288                                  ;
 30289                                  ;---------------------------------------------------------------------------
 30290                                  
 30291                                  IsEOF:
 30292                                  	;cmp	word [es:bp+0Dh],0FF6h
 30293 0000551D 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30294 00005523 730B                    	JAE	short EOF16			; yes, check for eof there
 30295                                  
 30296                                  ;J.K. 8/27/86
 30297                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30298                                  ;of any media that has "F0"(Other) as a MediaByte.
 30299                                  ;Hopely, this does not create any side effect for those who may use any value
 30300                                  ;other than "FF8-FFF" as an EOF for their own file.
 30301                                  
 30302 00005525 81FBF00F                	cmp	bx,0FF0h
 30303 00005529 7404                    	je	short IsEOF_other
 30304                                  
 30305 0000552B 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30306                                  IsEOF_other:
 30307 0000552F C3                      	retn
 30308                                  EOF16:
 30309 00005530 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30310 00005533 C3                      	retn
 30311                                  
 30312                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30313                                  
 30314                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30315                                  ;---------------------------------------------------------------------------
 30316                                  ;
 30317                                  ; Procedur Name : UNPACK
 30318                                  ;
 30319                                  ; Inputs:
 30320                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30321                                  ;	ES:BP = Base of drive parameters
 30322                                  ; Outputs:
 30323                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30324                                  ;	Zero set means DI=0 (free cluster)
 30325                                  ;	Carry set means error (currently user FAILed to I 24)
 30326                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30327                                  ;
 30328                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30329                                  ;
 30330                                  ;----------------------------------------------------------------------------
 30331                                  	
 30332                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30333                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30334                                  
 30335                                  	; 20/05/2019 - Retro DOS v4.0
 30336                                  UNPACK:
 30337                                  	; MSDOS 6.0			; M014 - Start
 30338 00005534 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30339 00005536 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30340 00005538 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30341 0000553C 09FF                    	or	di,di 			; return z if di=0
 30342 0000553E C3                      	retn				; done
 30343                                  up_cont:				; M014 - End
 30344                                  	; MSDOS 3.3 & MSDOS 6.0
 30345                                  	;cmp	bx,[es:bp+0Dh]
 30346 0000553F 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30347 00005543 7726                    	JA	short HURTFAT
 30348 00005545 E8D600                  	CALL	MAPCLUSTER
 30349 00005548 721E                    	jc	short _DoContext
 30350 0000554A 8B3D                    	MOV	DI,[DI]
 30351 0000554C 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30352 0000554E 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30353 00005552 81FEF60F                	CMP	SI,4096-10
 30354 00005556 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30355 00005558 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30356 0000555A EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30357                                  High12:
 30358 0000555C D1EF                    	SHR	DI,1
 30359 0000555E D1EF                    	SHR	DI,1
 30360 00005560 D1EF                    	SHR	DI,1
 30361 00005562 D1EF                    	SHR	DI,1
 30362                                  Unpack12:
 30363 00005564 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30364                                  _DoContext:
 30365 00005568 16                      	PUSH	SS
 30366 00005569 1F                      	POP	DS
 30367 0000556A C3                      	retn
 30368                                  HURTFAT:
 30369                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30370                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30371 0000556B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30372 00005571 50                      	PUSH	AX
 30373 00005572 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30374                                  
 30375                                  ;hkn; SS override
 30376 00005574 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30377                                  ;
 30378                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30379                                  ;
 30380 0000557A BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30381 0000557D E8C8FD                  	call	FATAL
 30382 00005580 3C03                    	CMP	AL,3
 30383 00005582 F8                      	CLC
 30384 00005583 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30385 00005585 F9                      	STC				; User said FAIL
 30386                                  OKU_RET:
 30387 00005586 58                      	POP	AX
 30388                                  hurtfat_retn:
 30389 00005587 C3                      	retn
 30390                                  
 30391                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30392                                  
 30393                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30394                                  ;----------------------------------------------------------------------------
 30395                                  ;
 30396                                  ; Procedure Name : PACK
 30397                                  ;
 30398                                  ; Inputs:
 30399                                  ;	BX = Cluster number
 30400                                  ;	DX = Data
 30401                                  ;	ES:BP = Pointer to drive DPB
 30402                                  ; Outputs:
 30403                                  ;	The data is stored in the FAT at the given cluster.
 30404                                  ;	SI,DX,DI all destroyed
 30405                                  ;	Carry set means error (currently user FAILed to I 24)
 30406                                  ;	No other registers affected
 30407                                  ;
 30408                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30409                                  ;
 30410                                  ;---------------------------------------------------------------------------
 30411                                  
 30412                                  	; 02/01/2024
 30413                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30414                                  	; 20/05/2019 - Retro DOS v4.0
 30415                                  PACK:
 30416                                  	; MSDOS 6.0			; M014 - start
 30417 00005588 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30418 0000558A 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30419 0000558C 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30420 00005590 C3                      	retn				; done
 30421                                  p_cont:					; M014 - end
 30422                                  	; MSDOS 3.3 & MSDOS 6.0
 30423 00005591 E88A00                  	CALL	MAPCLUSTER
 30424 00005594 72D2                    	JC	short _DoContext
 30425 00005596 8B35                    	MOV	SI,[DI]
 30426 00005598 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30427 0000559A 51                      	PUSH	CX			; move data to upper 12 bits
 30428 0000559B B104                    	MOV	CL,4
 30429 0000559D D3E2                    	SHL	DX,CL
 30430 0000559F 59                      	POP	CX
 30431 000055A0 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30432 000055A3 EB14                    	JMP	SHORT PACKIN
 30433                                  ALIGNED:
 30434                                  	;cmp	word [es:bp+0Dh],0FF6h
 30435 000055A5 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30436 000055AB 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30437 000055AD 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30438 000055B1 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30439 000055B5 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30440                                  Pack16:
 30441 000055B7 31F6                    	XOR	SI,SI			; MZ no original data
 30442                                  PACKIN:
 30443 000055B9 09D6                    	OR	SI,DX
 30444 000055BB 8935                    	MOV	[DI],SI
 30445                                  
 30446                                  ;hkn; SS override
 30447 000055BD 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30448                                  	; MSDOS 6.0
 30449 000055C2 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30450                                  					;LB. if already dirty		  ;AN000;
 30451 000055C6 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30452                                  	; 10/06/2019
 30453 000055C8 E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30454                                  	
 30455                                  	;or	byte [si+5],40h
 30456 000055CB 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30457                                  yesdirty11:				;LB.				;AN000;
 30458                                  ;hkn; SS override
 30459 000055CF 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30460                                  ;hkn; SS is DOSDATA
 30461 000055D5 16                      	push	ss
 30462 000055D6 1F                      	pop	ds
 30463 000055D7 74AE                    	jz	short hurtfat_retn	; Carry clear
 30464 000055D9 50                      	PUSH	AX
 30465 000055DA 53                      	PUSH	BX
 30466 000055DB 51                      	PUSH	CX
 30467 000055DC A1[8E05]                	MOV	AX,[CLUSSAVE]
 30468 000055DF 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30469                                  	;;add	si,16 ; MSDOS 3.3
 30470                                  	;add	si,20 ; MSDOS 6.0
 30471 000055E3 83C614                  	ADD	SI,BUFINSIZ
 30472 000055E6 8824                    	MOV	[SI],AH
 30473                                  ;hkn; SS is DOSDATA
 30474                                  	;Context DS
 30475 000055E8 16                      	push	ss
 30476 000055E9 1F                      	pop	ds
 30477                                  	
 30478 000055EA 50                      	PUSH	AX
 30479                                  	
 30480                                  	; MSDOS 6.0
 30481 000055EB 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30482 000055EF 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30483                                  
 30484                                  	; MSDOS 3.3 & MSDOS 6.0
 30485 000055F3 8B16[9005]              	MOV	DX,[CLUSSEC]
 30486                                  
 30487                                  	;MOV	SI,1	  ; *
 30488                                  	;XOR	AL,AL     ; *
 30489                                  	;call	GETBUFFRB ; *
 30490                                  	; 22/09/2023
 30491 000055F7 E83E03                  	call	GETBUFFRA ; *
 30492                                  
 30493 000055FA 58                      	POP	AX
 30494 000055FB 721B                    	JC	short POPP_RET
 30495 000055FD C53E[E205]              	LDS	DI,[CURBUF]
 30496                                  	
 30497                                  	; MSDOS 6.0
 30498 00005601 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30499                                  					;LB. if already dirty		  ;AN000;
 30500 00005605 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30501 00005607 E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30502                                  	
 30503                                  	;or	byte [di+5],40h
 30504 0000560A 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30505                                  yesdirty12:
 30506                                  	;;add	di,16
 30507                                  	;add	di,20 ; MSDOS 6.0
 30508                                  	; 02/01/2024
 30509                                  	;ADD	DI,BUFINSIZ
 30510                                  	;DEC	DI
 30511 0000560E 83C713                  	add	di,BUFINSIZ-1 ; 19
 30512                                  
 30513                                  	;add	di,[es:bp+2]
 30514 00005611 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30515 00005615 8805                    	MOV	[DI],AL
 30516 00005617 F8                      	CLC
 30517                                  POPP_RET:
 30518 00005618 16                      	PUSH	SS
 30519 00005619 1F                      	POP	DS
 30520 0000561A 59                      	POP	CX
 30521 0000561B 5B                      	POP	BX
 30522 0000561C 58                      	POP	AX
 30523 0000561D C3                      	retn
 30524                                  
 30525                                  ; 31/07/2018 - Retro DOS v3.0
 30526                                  
 30527                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30528                                  ;---------------------------------------------------------------------------
 30529                                  ;
 30530                                  ; Procedure Name : MAPCLUSTER
 30531                                  ;
 30532                                  ; Inputs:
 30533                                  ;	ES:BP Points to DPB
 30534                                  ;	BX Is cluster number
 30535                                  ; Function:
 30536                                  ;	Get a pointer to the cluster
 30537                                  ; Outputs:
 30538                                  ;	DS:DI Points to contents of FAT for given cluster
 30539                                  ;	DS:SI Points to start of buffer
 30540                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30541                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30542                                  ;	Carry set if failed.
 30543                                  ; SI is destroyed.
 30544                                  ;
 30545                                  ;---------------------------------------------------------------------------
 30546                                  
 30547                                  	; 20/05/2019 - Retro DOS v4.0
 30548                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30549                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30550                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30551                                  
 30552                                  MAPCLUSTER:
 30553                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30554 0000561E C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30555                                  	;SAVE	<AX,BX,CX,DX>
 30556 00005623 50                      	push	ax
 30557 00005624 53                      	push	bx
 30558 00005625 51                      	push	cx
 30559 00005626 52                      	push	dx
 30560 00005627 89D8                    	MOV	AX,BX			; AX = BX
 30561 00005629 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30562 0000562F 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30563 00005631 D1E8                    	SHR	AX,1			; AX = BX/2
 30564                                  Map16:	
 30565                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30566 00005633 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30567                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30568 00005635 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30569 00005637 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30570 00005639 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30571                                  
 30572                                  ;IF FastDiv
 30573                                  ;
 30574                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30575                                  ; case and apply a really fast algorithm to get the desired results
 30576                                  ;
 30577                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30578                                  ; Fast method takes 39+20*4=119
 30579                                  ;
 30580                                  ; This saves a bunch.
 30581                                  
 30582 0000563D 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30583 00005641 7510                    	jne	short _DoDiv		; 4  for no jump
 30584 00005643 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30585 00005645 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30586 00005649 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30587                                  	; MDOS 3.3
 30588                                  	;shr	al,1	
 30589                                  	; MDOS 6.0
 30590 0000564B D1EF                    	shr	di,1			; 2
 30591 0000564D D0D8                    	rcr	al,1			; 2
 30592                                  	; MDOS 3.3 (& MSDOS 6.0)
 30593 0000564F 30E4                    	xor	ah,ah			; 3
 30594 00005651 EB04                    	jmp	short DivDone		; 16
 30595                                  _DoDiv:
 30596                                  ;ENDIF
 30597                                  	; MSDOS 3.3
 30598                                  	;xor	dx,dx
 30599                                  	; MSDOS 6.0
 30600 00005653 89FA                    	mov	dx,di			; 2
 30601                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30602 00005655 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30603                                  ;IF FastDiv
 30604                                  DivDone:
 30605                                  ;ENDIF
 30606                                  	;add	ax,[es:bp+6]
 30607 00005657 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30608 0000565B 49                      	DEC	CX			; CX is sector size - 1
 30609                                  	;SAVE	<AX,DX,CX>
 30610 0000565C 50                      	push	ax
 30611 0000565D 52                      	push	dx
 30612 0000565E 51                      	push	cx
 30613 0000565F 89C2                    	MOV	DX,AX
 30614                                  
 30615                                  	; MSDOS 6.0
 30616                                  	; 22/09/2023
 30617                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 30618                                  	;
 30619                                  	; MDOS 3.3 (& MSDOS 6.0)
 30620                                  	;XOR	AL,AL	   ; *
 30621                                  	;MOV	SI,1	   ; *
 30622                                  	;;invoke GETBUFFRB ; *
 30623                                  	;call	GETBUFFRB  ; *
 30624                                  	; 22/09/2023
 30625 00005661 E8CE02                  	call	GETBUFFRC  ; *!
 30626                                  
 30627                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30628 00005664 59                      	pop	cx
 30629 00005665 58                      	pop	ax
 30630 00005666 5A                      	pop	dx
 30631 00005667 724C                    	JC	short MAP_POP
 30632                                  
 30633 00005669 C536[E205]              	LDS	SI,[CURBUF]
 30634                                  	;;lea	di,[si+16]
 30635                                  	;lea	di,[si+20] ; MSDOS 6.0
 30636 0000566D 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30637 00005670 01C7                    	ADD	DI,AX
 30638 00005672 39C8                    	CMP	AX,CX
 30639 00005674 752C                    	JNZ	short MAPRET
 30640 00005676 8A05                    	MOV	AL,[DI]
 30641                                  	;Context DS		 	;hkn; SS is DOSDATA
 30642 00005678 16                      	push	ss
 30643 00005679 1F                      	pop	ds	
 30644 0000567A FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30645 0000567E A2[8E05]                	MOV	[CLUSSAVE],AL
 30646 00005681 8916[9005]              	MOV	[CLUSSEC],DX
 30647                                  	; MSDOS 6.0
 30648 00005685 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 30649 0000568B 42                      	INC	DX
 30650                                  
 30651                                  	; 22/09/2023
 30652                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 30653                                  	;
 30654                                  	; MDOS 3.3 (& MSDOS 6.0)
 30655                                  	;XOR	AL,AL	   ; *
 30656                                  	;MOV	SI,1	   ; *
 30657                                  	;;invoke GETBUFFRB ; *
 30658                                  	;call	GETBUFFRB  ; *
 30659                                  	; 22/09/2023
 30660 0000568C E8A302                  	call	GETBUFFRC  ; *!
 30661 0000568F 7224                    	JC	short MAP_POP
 30662                                  
 30663 00005691 C536[E205]              	LDS	SI,[CURBUF]
 30664 00005695 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30665 00005698 8A05                    	MOV	AL,[DI]
 30666                                  	;Context DS			;hkn; SS is DOSDATA
 30667 0000569A 16                      	push	ss
 30668 0000569B 1F                      	pop	ds
 30669 0000569C A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30670                                  
 30671                                  ;hkn; CLUSSAVE is in DOSDATA
 30672 0000569F BF[8E05]                	MOV	DI,CLUSSAVE
 30673                                  MAPRET:
 30674                                  	;RESTORE <DX,CX,BX>
 30675 000056A2 5A                      	pop	dx
 30676 000056A3 59                      	pop	cx
 30677 000056A4 5B                      	pop	bx
 30678 000056A5 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30679 000056A7 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30680 000056AD 7302                    	JAE	short MapSet		; MZ no, set flags
 30681 000056AF 89D8                    	MOV	AX,BX
 30682                                  MapSet:
 30683 000056B1 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30684                                  	;RESTORE <AX>
 30685 000056B3 58                      	pop	ax
 30686 000056B4 C3                      	retn
 30687                                  
 30688                                  MAP_POP:
 30689                                  	;RESTORE <DX,CX,BX,AX>
 30690 000056B5 5A                      	pop	dx
 30691 000056B6 59                      	pop	cx
 30692 000056B7 5B                      	pop	bx
 30693 000056B8 58                      	pop	ax
 30694                                  fatread_sft_retn: ; 17/12/2022
 30695 000056B9 C3                      	retn
 30696                                  
 30697                                  ; 20/05/2019 - Retro DOS v4.0
 30698                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30699                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30700                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30701                                  
 30702                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30703                                  ;----------------------------------------------------------------------------
 30704                                  ;
 30705                                  ; Procedure Name : FATREAD_SFT
 30706                                  ;
 30707                                  ; Inputs:
 30708                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30709                                  ;		giving a NET SFT will produce system crashing results).
 30710                                  ;	DS DOSDATA
 30711                                  ; Function:
 30712                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30713                                  ;	if disk changed.
 30714                                  ;	In other respects, same as FATREAD_CDS.
 30715                                  ;	(note ES:DI destroyed!)
 30716                                  ; Outputs:
 30717                                  ;	Carry set if error (currently user FAILed to I 24)
 30718                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30719                                  ;	as far as invalidating curdir_ID is concerned.
 30720                                  ;	Since getting a true disk changed on this call is a screw up
 30721                                  ;	anyway, that's the way it goes.
 30722                                  ;
 30723                                  ;---------------------------------------------------------------------------
 30724                                  
 30725                                  FATREAD_SFT:
 30726 000056BA 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30727                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30728                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30729                                  	; 15/12/2022
 30730 000056BE 268A4600                	mov	AL,[ES:BP]
 30731 000056C2 A2[7605]                	MOV	[THISDRV],AL
 30732 000056C5 E86AAF                  	call	GOTDPB			;Set THISDPB
 30733                                  	;CALL	FAT_GOT_DPB
 30734                                  	; 17/12/2022
 30735 000056C8 EB78                    	jmp	FAT_GOT_DPB
 30736                                  ;fatread_sft_retn:
 30737                                  	;retn
 30738                                  
 30739                                  ;----------------------------------------------------------------------------
 30740                                  ;
 30741                                  ; Procedure Name : FATREAD_CDS
 30742                                  ;
 30743                                  ; Inputs:
 30744                                  ;	DS:DOSDATA
 30745                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30746                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30747                                  ; Function:
 30748                                  ;	If disk may have been changed, media is determined and buffers are
 30749                                  ;	flagged invalid. If not, no action is taken.
 30750                                  ; Outputs:
 30751                                  ;	ES:BP = Drive parameter block
 30752                                  ;	THISDPB = ES:BP
 30753                                  ;	THISDRV set
 30754                                  ;	Carry set if error (currently user FAILed to I 24)
 30755                                  ; DS preserved , all other registers destroyed
 30756                                  ;
 30757                                  ;---------------------------------------------------------------------------
 30758                                  
 30759                                  	; 20/05/2019 - Retro DOS v4.0
 30760                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30761                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30762                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30763                                  
 30764                                  FATREAD_CDS:
 30765 000056CA 06                      	PUSH	ES
 30766 000056CB 57                      	PUSH	DI
 30767                                  	;les	bp,[es:di+45h]
 30768 000056CC 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30769                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30770                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30771                                  	; 15/12/2022
 30772 000056D0 268A4600                	mov	AL,[ES:BP]
 30773 000056D4 A2[7605]                	MOV	[THISDRV],AL
 30774 000056D7 E858AF                  	call	GOTDPB			;Set THISDPB
 30775 000056DA E86500                  	CALL	FAT_GOT_DPB
 30776 000056DD 5F                      	POP	DI			;Get back CDS pointer
 30777 000056DE 07                      	POP	ES
 30778 000056DF 72D8                    	jc	short fatread_sft_retn
 30779 000056E1 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30780                                  
 30781                                  ;	Media changed. We now need to find all CDS structures which use this
 30782                                  ;	DPB and invalidate their ID pointers.
 30783                                  
 30784                                  MED_CHANGE:
 30785 000056E3 31C0                    	XOR	AX,AX
 30786 000056E5 48                      	DEC	AX			; AX = -1
 30787 000056E6 1E                      	PUSH	DS
 30788 000056E7 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30789 000056EB 30ED                    	XOR	CH,CH			; CX is number of structures
 30790                                  	;lds	si,[es:di+45h]
 30791 000056ED 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30792                                  
 30793                                  ;hkn; SS override
 30794                                  
 30795                                  ;	Find all CDSs with this DevPtr
 30796                                  ;
 30797                                  ;	(ax) = -1
 30798                                  ;	(ds:si) = DevPtr
 30799                                  
 30800 000056F1 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30801                                  frcd20: 
 30802                                  	;;test	word [es:di+43h],8000h
 30803                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30804 000056F6 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30805 000056FB 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30806                                  
 30807                                  	; MSDOS 3.3
 30808                                  	;push	es
 30809                                  	;push	di
 30810                                  	;les	di,[es:di+45h]
 30811                                  	;;les	di,[ES:DI+curdir.devptr]
 30812                                  	;call	POINTCOMP
 30813                                  	;pop	di
 30814                                  	;pop	es
 30815                                  	;jnz	short frcd25
 30816                                  
 30817                                  	; MSDOS 6.0
 30818 000056FD 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30819 00005701 7512                    	jne	short frcd25		; no match
 30820 00005703 8CDB                    	mov	bx,ds
 30821 00005705 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30822 00005709 750A                    	jne	short frcd25		; CDS not for this drive
 30823                                  
 30824                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30825                                  	;test	[es:di+49h],ax
 30826 0000570B 26854549                	test	[ES:DI+curdir.ID],AX
 30827 0000570F 7404                    	JZ	short frcd25		; If root (0), leave root
 30828                                  	;mov	[es:di+49h],ax
 30829 00005711 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30830                                  frcd25:	
 30831                                  	;;add	di,81  ; MSDOS 3.3
 30832                                  	;add	di,88  ; MSDOS 6.0	 
 30833 00005715 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30834 00005718 E2DC                    	LOOP	frcd20
 30835 0000571A 1F                      	POP	DS
 30836                                  NO_CHANGE:
 30837 0000571B C42E[8A05]              	LES	BP,[THISDPB]
 30838 0000571F F8                      	CLC
 30839 00005720 C3                      	retn
 30840                                  
 30841                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30842                                  ;----------------------------------------------------------------------------
 30843                                  ;
 30844                                  ; Procedure Name : FAT_operation
 30845                                  ;
 30846                                  ;----------------------------------------------------------------------------
 30847                                  
 30848                                  	; 03/01/2024
 30849                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30850                                  
 30851                                  FAT_operation:
 30852                                  	; 31/07/2018 - Retro DOS v3.0
 30853                                  FATERR:
 30854                                  	;mov	word [es:bp+1Eh],-1
 30855                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30856 00005721 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30857                                  					; Err in FAT must force recomp of freespace
 30858                                  	;and	di,0FFh
 30859 00005727 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30860                                  	;mov	byte [ALLOWED],18h
 30861 0000572B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30862                                  	;mov	ah,1Ah
 30863 00005730 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30864 00005732 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30865 00005735 E814FC                  	call	FATAL1
 30866 00005738 C42E[8A05]              	LES	BP,[THISDPB]
 30867 0000573C 3C03                    	CMP	AL,3
 30868 0000573E 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30869 00005740 F9                      	STC				; User said FAIL
 30870 00005741 C3                      	retn
 30871                                  
 30872                                  FAT_GOT_DPB:
 30873                                  	;Context DS			;hkn; SS is DOSDATA
 30874 00005742 16                      	push	ss			
 30875 00005743 1F                      	pop	ds
 30876                                  	;mov	al,0Fh
 30877 00005744 B00F                    	MOV	AL,DMEDHL
 30878                                  	;mov	ah,[es:bp+1]
 30879 00005746 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30880 0000574A A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30881 0000574D C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30882 00005752 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30883                                  	;;mov	al,[es:bp+16h]
 30884                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30885 00005758 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30886 0000575C A2[6703]                	MOV	[CALLMED],AL
 30887 0000575F 06                      	PUSH	ES
 30888 00005760 1E                      	PUSH	DS
 30889                                  
 30890                                  ;hkn; DEVCALL is in DOSDATA
 30891 00005761 BB[5A03]                	MOV	BX,DEVCALL
 30892                                  	;;lds	si,[es:bp+12h]
 30893                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30894 00005764 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30895 00005768 07                      	POP	ES			; ES:BX Points to call header
 30896 00005769 E8FBEE                  	call	DEVIOCALL2
 30897                                  	;Context DS		 	;hkn; SS is DOSDATA
 30898 0000576C 16                      	push	ss
 30899 0000576D 1F                      	pop	ds
 30900 0000576E 07                      	POP	ES			; Restore ES:BP
 30901 0000576F 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30902                                  	;test	di,8000h
 30903                                  	;jnz	short FATERR
 30904 00005773 09FF                    	or	di,di
 30905 00005775 78AA                    	js	short FATERR		; have error
 30906 00005777 30E4                    	XOR	AH,AH
 30907                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30908                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30909 00005779 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30910 0000577D A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30911                                  ; See if we had changed volume id by creating one on the diskette
 30912 00005780 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30913 00005784 7508                    	jnz	short CHECK_BYT
 30914 00005786 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30915 0000578B E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 30916                                  					; new volume label.
 30917                                  CHECK_BYT:
 30918 0000578E 0A26[6803]              	OR	AH,[CALLRBYT]
 30919                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30920                                  	;JMP	short NEWDSK
 30921                                  	; 17/12/2022
 30922 00005792 7863                    	js	short NEWDSK
 30923                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30924                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30925                                  	;JMP	short NEWDSK
 30926                                  
 30927                                  CHECK_ZR:
 30928 00005794 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30929                                  	; 24/09/2023
 30930                                  	; cf=0 (after 'or' instruction)
 30931                                  	;CLC
 30932 00005796 C3                      	retn				; If Media not changed (NZ)
 30933                                  
 30934                                  DISK_CHNG_ERR:
 30935 00005797 06                      	PUSH	ES
 30936 00005798 55                      	PUSH	BP
 30937                                  	;;les	bp,[es:bp+12h]
 30938                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30939 00005799 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30940                                  	;;test	word [es:bp+4],800h
 30941                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30942 0000579D 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30943 000057A2 5D                      	POP	BP
 30944 000057A3 07                      	POP	ES
 30945 000057A4 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30946 000057A6 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30947 000057A7 57                      	PUSH	DI
 30948 000057A8 16                      	push	ss			;hkn; SS is DOSDATA
 30949 000057A9 1F                      	pop	ds
 30950                                  	;mov	byte [ALLOWED],18h
 30951 000057AA C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30952 000057AF 06                      	PUSH	ES
 30953 000057B0 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30954 000057B4 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30955 000057B8 07                      	POP	ES
 30956 000057B9 893E[2803]              	MOV	[EXTERRPT],DI
 30957                                  	;mov	ax,0Fh
 30958 000057BD B80F00                  	MOV	AX,error_I24_wrong_disk
 30959 000057C0 C606[7505]01            	MOV	byte [READOP],1		; Write
 30960                                  	;invoke	HARDERR
 30961 000057C5 E832FB                  	call	HARDERR
 30962 000057C8 5F                      	POP	DI			; Get back buffer for ignore
 30963 000057C9 1F                      	POP	DS
 30964 000057CA 3C03                    	CMP	AL,3
 30965                                  FAIL_OPJ2:
 30966 000057CC 741C                    	JZ	short FAIL_OP
 30967 000057CE E971FF                  	JMP	FAT_GOT_DPB		; Retry
 30968                                  
 30969                                  CHKBUFFDIRT:
 30970                                  	; 20/05/2019 - Retro DOS v4.0
 30971                                  
 30972                                  	; MSDOS 3.3
 30973                                  	;lds	di,[BUFFHEAD]
 30974                                  
 30975                                  	; MSDOS 6.0
 30976 000057D1 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30977 000057D7 741E                    	je	short NEWDSK			; no, skip the check
 30978 000057D9 E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 30979                                  nbuffer:
 30980                                  	;cmp	al,[di+4]
 30981 000057DC 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30982 000057DF 750D                    	jne	short lfnxt			; no, go for next buffer
 30983                                  	;test   byte [di+5],40h
 30984 000057E1 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30985 000057E5 7407                    	jz	short lfnxt			; no, go for next buffer
 30986                                  	;Context DS
 30987 000057E7 16                      	push	ss
 30988 000057E8 1F                      	pop	ds
 30989                                  	; 24/09/2023
 30990                                  	; cf=0 (after 'test' instruction)
 30991                                  	;clc
 30992 000057E9 C3                      	retn
 30993                                  
 30994                                  FAIL_OP:					; This label & code is here
 30995                                  	;Context DS				;  for reachability
 30996 000057EA 16                      	push	ss
 30997 000057EB 1F                      	pop	ds
 30998 000057EC F9                      	STC
 30999 000057ED C3                      	retn
 31000                                  
 31001                                  lfnxt:
 31002                                  	; 15/08/2018 - Retro DOS v3.0
 31003                                  	; MSDOS 3.3
 31004                                  	;lds	di,[di]
 31005                                  
 31006                                  	; 20/05/2019 - Retro DOS v4.0
 31007 000057EE 8B3D                    	mov	di,[di]
 31008                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31009                                  	
 31010                                  	; MSDOS 3.3
 31011                                  	;cmp	di,-1
 31012                                  	;jne	short nbuffer
 31013                                  	
 31014                                  	; MSDOS 6.0
 31015 000057F0 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31016 000057F5 75E5                    	jne	short nbuffer			; no, check this guy also
 31017                                  
 31018                                  ; If no dirty buffers, assume Media changed
 31019                                  NEWDSK:
 31020                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31021                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31022 000057F7 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31023                                  						;  recompute
 31024                                  	; MSDOS 3.3
 31025                                  	;call	SETVISIT
 31026                                  	; MSDOS 6.0
 31027 000057FD E8CD00                  	call	 GETCURHEAD
 31028                                  nxbuffer:
 31029                                  	; MSDOS 3.3
 31030                                  	;or 	byte [di+5],20h
 31031                                  	; MSDOS 3.3 & MSDOS 6.0
 31032                                  	;cmp	[di+4],al
 31033 00005800 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31034 00005803 7510                    	jne	short lfnxt2
 31035                                  	;test	byte [di+5],40h
 31036 00005805 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31037 00005809 758C                    	jnz	short DISK_CHNG_ERR
 31038                                  	;mov	word [di+4],20FFh
 31039 0000580B C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31040 00005810 E8CC00                  	call	SCANPLACE
 31041                                  	; MSDOS 6.0
 31042 00005813 EB02                    	jmp	short skpbuff
 31043                                  lfnxt2:
 31044 00005815 8B3D                    	mov	di,[di]
 31045                                  	;mov	di,[di+BUFFINFO.buf_next]
 31046                                  skpbuff:
 31047                                  	; MSDOS 6.0
 31048 00005817 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31049 0000581C 75E2                    	jne	short nxbuffer
 31050                                  
 31051 0000581E 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31052 00005824 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31053 00005826 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31054 0000582B 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31055 0000582D 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31056                                  ;lfnxt2:
 31057                                  	; MSDOS 3.3
 31058                                  	;call	SKIPVISIT
 31059                                  	;jnz	short nxbuffer
 31060                                  GOGETBPB:
 31061                                  	; MSDOS 3.3 & MSDOS 6.0
 31062                                  	;;lds	di,[es:bp+12h]
 31063                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31064 00005833 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31065                                  	; 20/05/2019
 31066                                  	;test	word [di+4],2000h
 31067                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31068 00005837 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31069 0000583B 7510                    	JNZ	short GETFREEBUF
 31070                                  	;context DS	    		;hkn; SS is DOSDATA
 31071 0000583D 16                      	push	ss
 31072 0000583E 1F                      	pop	ds
 31073 0000583F BB0200                  	MOV	BX,2
 31074 00005842 E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31075                                  FAIL_OPJ:
 31076 00005845 72A3                    	JC	short FAIL_OP
 31077 00005847 C53E[E205]              	LDS	DI,[CURBUF]
 31078 0000584B EB13                    	JMP	SHORT GOTGETBUF
 31079                                  
 31080                                  GETFREEBUF:
 31081 0000584D 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31082 0000584E 55                      	PUSH	BP
 31083                                  	; MSDOS 3.3
 31084                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31085                                  	; MSDOS 6.0
 31086 0000584F 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31087                                  ;hkn; SS override
 31088 00005851 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 31089 00005856 E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31090                                  	; MSDOS 3.3 & MSDOS 6.0
 31091 00005859 E84F02                  	call	BUFWRITE
 31092 0000585C 5D                      	POP	BP
 31093 0000585D 07                      	POP	ES
 31094                                  	;JC	short FAIL_OPJ
 31095 0000585E 728A                    	jc	short FAIL_OP
 31096                                  GOTGETBUF:
 31097                                  	;;add	di,16
 31098                                  	;add	di,20 ; MSDOS 6.0
 31099 00005860 83C714                  	ADD	DI,BUFINSIZ
 31100                                  
 31101                                  ;hkn; SS override
 31102 00005863 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31103                                  	;Context DS			;hkn; SS is DOSDATA
 31104 00005868 16                      	push	ss
 31105 00005869 1F                      	pop	ds
 31106 0000586A 893E[6803]              	MOV	[CALLXAD],DI
 31107                                  	;mov	al,16h
 31108 0000586E B016                    	MOV	AL,DBPBHL
 31109                                  	;mov	ah,[es:bp+1]
 31110 00005870 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31111 00005874 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31112 00005877 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31113 0000587C C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31114                                  	;;mov	al,[es:bp+16h]
 31115                                  	;mov	al,[es:bp+17h]
 31116 00005882 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31117 00005886 A2[6703]                	MOV	[CALLMED],AL
 31118 00005889 06                      	PUSH	ES ; **
 31119 0000588A 1E                      	PUSH	DS ; *
 31120                                  	;;
 31121                                  ; 03/01/2023
 31122                                  %if 0
 31123                                  	;;push	word [es:bp+14h]
 31124                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31125                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31126                                  	;;push	word [es:bp+12h]
 31127                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31128                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31129                                  
 31130                                  ;hkn; DEVCALL is in DOSDATA
 31131                                  	MOV	BX,DEVCALL
 31132                                  	POP	SI
 31133                                  	POP	DS			; DS:SI Points to device header
 31134                                  %endif
 31135                                  	; 03/01/2024
 31136 0000588B BB[5A03]                	mov	bx,DEVCALL
 31137                                  	;lds	si,[es:bp+13h]
 31138 0000588E 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31139                                  					; DS:SI Points to device header
 31140                                  	;;
 31141 00005892 07                      	POP	ES ; *			; ES:BX Points to call header
 31142                                  	;invoke	DEVIOCALL2
 31143 00005893 E8D1ED                  	call	DEVIOCALL2
 31144 00005896 07                      	POP	ES ; **			; Restore ES:BP
 31145                                  	;Context DS
 31146 00005897 16                      	push	ss		 	;hkn; SS is DOSDATA
 31147 00005898 1F                      	pop	ds
 31148 00005899 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31149                                  	; MSDOS 3.3
 31150                                  	;test	di,8000h
 31151                                  	;jnz	short FATERRJ
 31152                                  	; MSDOS 6.0
 31153 0000589D 09FF                    	or	di,di
 31154 0000589F 7829                    	js	short FATERRJ 		; have error
 31155                                  	;;mov	al,[es:bp+16h]
 31156                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31157 000058A1 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31158 000058A5 C536[6C03]              	LDS	SI,[CALLBPB]
 31159                                  	;;mov	word [es:bp+1Ch],0
 31160                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31161 000058A9 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31162                                  	;invoke	$SETDPB
 31163 000058AF E823B7                  	call	_$SETDPB
 31164                                  
 31165                                  ;hkn; SS override
 31166 000058B2 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31167                                  	;mov	al,[es:bp+8]
 31168 000058B7 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31169                                  
 31170                                  	; MSDOS 3.3
 31171                                  	;;mov	ah,[es:bp+0Fh]
 31172                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31173                                  	;;mov	[DI-8],ax
 31174                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31175                                  
 31176                                  	; MSDOS 6.0
 31177                                  	;mov	[di-0Ah],al
 31178 000058BB 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31179                                  						;>32mb		  ;AN000;
 31180                                  	;mov	ax,[es:bp+0Fh]
 31181 000058BE 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31182                                  	;mov	[di-9h],ax			  ;AC000;
 31183 000058C2 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31184                                  					;>32mb Correct buffer info ;AC000;
 31185                                  	;Context DS			;hkn; SS is DOSDATA
 31186 000058C5 16                      	push	ss
 31187 000058C6 1F                      	pop	ds
 31188 000058C7 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31189 000058C9 C3                      	retn
 31190                                  
 31191                                  FATERRJ: 
 31192 000058CA E954FE                  	JMP	FATERR
 31193                                  
 31194                                  ;============================================================================
 31195                                  ; STDBUF.ASM
 31196                                  ;============================================================================
 31197                                  ; Retro DOS v2.0 - 12/03/2018
 31198                                  
 31199                                  ;
 31200                                  ; Standard buffer management for MSDOS
 31201                                  ;
 31202                                  
 31203                                  ;.xlist
 31204                                  ;.xcref
 31205                                  ;INCLUDE STDSW.ASM
 31206                                  ;.cref
 31207                                  ;.list
 31208                                  
 31209                                  ;TITLE	STDBUF - MSDOS buffer management
 31210                                  ;NAME	STDBUF
 31211                                  
 31212                                  ;INCLUDE BUF.ASM
 31213                                  
 31214                                  ;============================================================================
 31215                                  ; BUF.ASM
 31216                                  ;============================================================================
 31217                                  ; 31/07/2018 - Retro DOS v3.0
 31218                                  ; Retro DOS v2.0 - 12/03/2018
 31219                                  ;
 31220                                  ; buffer management for MSDOS
 31221                                  ;
 31222                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31223                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31224                                  ;
 31225                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31226                                  ;
 31227                                  ;SETVISIT:
 31228                                  ;	; 31/07/2018 - Retro DOS v3.0
 31229                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31230                                  ;; Inputs:
 31231                                  ;;      None
 31232                                  ;; Function:
 31233                                  ;;      Set up a scan of I/O buffers
 31234                                  ;; Outputs:
 31235                                  ;;      All visit flags = 0
 31236                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31237                                  ;;                    may cause a scan to stop in the middle leaving some
 31238                                  ;;                    visit flags set, and some not set.
 31239                                  ;;      DS:DI Points to [BUFFHEAD]
 31240                                  ;; No other registers altered
 31241                                  ;
 31242                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31243                                  ;	PUSH    AX
 31244                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31245                                  ;	;mov	al,0DFh
 31246                                  ;	mov	al,~buf_visit
 31247                                  ;SETLOOP:
 31248                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31249                                  ;	;and	[DI+5],al
 31250                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31251                                  ;       LDS     DI,[DI]
 31252                                  ;       CMP     DI,-1
 31253                                  ;       JNZ     SHORT SETLOOP
 31254                                  ;       POP     AX ; 09/09/2018
 31255                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31256                                  ;SVISIT_RETN:
 31257                                  ;       RETN
 31258                                  ;
 31259                                  ;SKIPVISIT:
 31260                                  ;	; 31/07/2018 - Retro DOS v3.0
 31261                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31262                                  ;
 31263                                  ;; Inputs:
 31264                                  ;;      DS:DI Points to a buffer
 31265                                  ;; Function:
 31266                                  ;;      Skip visited buffers
 31267                                  ;; Outputs:
 31268                                  ;;      DS:DI Points to next unvisited buffer
 31269                                  ;;      Zero is set if skip to LAST buffer
 31270                                  ;; No other registers altered
 31271                                  ;
 31272                                  ;       CMP     DI,-1
 31273                                  ;       ;retz
 31274                                  ;       JZ	SHORT SVISIT_RETN
 31275                                  ;
 31276                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31277                                  ;       ;;;retnz
 31278                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31279                                  ;
 31280                                  ;	;test	byte [di+5],20h
 31281                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31282                                  ;	JNZ	short SKIPLOOP
 31283                                  ;	
 31284                                  ;	push	ax
 31285                                  ;	or	al,1
 31286                                  ;	pop	ax
 31287                                  ;	retn	
 31288                                  ;
 31289                                  ;SKIPLOOP:
 31290                                  ;	LDS     DI,[DI]
 31291                                  ;       JMP     SHORT SKIPVISIT
 31292                                  
 31293                                  ;============================================================================
 31294                                  ; BUF.ASM, MSDOS 6.0, 1991
 31295                                  ;============================================================================
 31296                                  ; 31/07/2018 - Retro DOS v3.0
 31297                                  ; 04/05/2019 - Retro DOS v4.0
 31298                                  
 31299                                  ;	TITLE	BUF - MSDOS buffer management
 31300                                  ;	NAME	BUF
 31301                                  
 31302                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31303                                  ;
 31304                                  ;	GETCURHEAD
 31305                                  ;	ScanPlace
 31306                                  ;	PLACEBUF
 31307                                  ;	PLACEHEAD
 31308                                  ;	PointComp
 31309                                  ;	GETBUFFR
 31310                                  ;	GETBUFFRB
 31311                                  ;	FlushBuf
 31312                                  ;	BufWrite
 31313                                  ;	SET_RQ_SC_PARMS
 31314                                  ;
 31315                                  ;	Revision history:
 31316                                  ;
 31317                                  ;		AN000  version 4.00  Jan. 1988
 31318                                  ;		A004   PTM 3765 -- Disk reset failed
 31319                                  ;		M039 DB 10/17/90 - Disk write optimization
 31320                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31321                                  
 31322                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31323                                  ;----------------------------------------------------------------------------
 31324                                  ; Procedure Name : GetCurHead
 31325                                  ; Inputs:
 31326                                  ;	 No Inputs
 31327                                  ; Function:
 31328                                  ;	Returns the pointer to the first buffer in Queue
 31329                                  ;	and updates FIRST_BUFF_ADDR
 31330                                  ;       and invalidates LASTBUFFER (recency pointer)
 31331                                  ; Outputs:
 31332                                  ;	DS:DI = pointer to the first buffer in Queue
 31333                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31334                                  ;       LASTBUFFER = -1
 31335                                  ; No other registers altered
 31336                                  ;----------------------------------------------------------------------------
 31337                                  
 31338                                  ; 04/05/2019 - Retro DOS v4.0
 31339                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31340                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31341                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31342                                  
 31343                                  GETCURHEAD:
 31344 000058CD 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31345 000058D2 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31346 000058D9 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31347 000058DE C3                      	retn
 31348                                  
 31349                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31350                                  ;----------------------------------------------------------------------------
 31351                                  ; Procedure Name : ScanPlace
 31352                                  ; Inputs:
 31353                                  ;	Same as PLACEBUF
 31354                                  ; Function:
 31355                                  ;	Save scan location and call PLACEBUF
 31356                                  ; Outputs:
 31357                                  ;	DS:DI Points to saved scan location
 31358                                  ; All registers, except DS:DI, preserved.
 31359                                  ;----------------------------------------------------------------------------
 31360                                  ;M039: Rewritten to preserve registers.
 31361                                  
 31362                                  ;SCANPLACE:
 31363                                  ;	; 31/07/2018 - Retro DOS v3.0
 31364                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31365                                  ;	push	es
 31366                                  ;	les	si,[di]
 31367                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31368                                  ;	call	PLACEBUF
 31369                                  ;	push	es
 31370                                  ;	pop	ds
 31371                                  ;	mov	di,si
 31372                                  ;	pop	es
 31373                                  ;scanplace_retn:
 31374                                  ;	retn	
 31375                                  	
 31376                                  	; MSDOS 6.0
 31377                                  SCANPLACE:
 31378 000058DF FF35                    	push	word [di]
 31379                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31380 000058E1 E80200                  	call	PLACEBUF
 31381 000058E4 5F                      	pop	di
 31382 000058E5 C3                      	retn
 31383                                  
 31384                                  ;----------------------------------------------------------------------------
 31385                                  ; Procedure Name : PlaceBuf
 31386                                  ; Input:
 31387                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31388                                  ; Function:
 31389                                  ;	Remove buffer from queue and re-insert it in proper place.
 31390                                  ; NO registers altered
 31391                                  ;----------------------------------------------------------------------------
 31392                                  
 31393                                  ;procedure PLACEBUF,NEAR
 31394                                  
 31395                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31396                                  	; 20/05/2019 - Retro DOS v4.0
 31397                                  PLACEBUF:
 31398                                  	; 31/07/2018 - Retro DOS v3.0
 31399                                  
 31400                                  	; MSDOS 6.0
 31401 000058E6 50                      	push	AX			;Save only regs we modify	;AN000;
 31402 000058E7 53                      	push	BX							;AN000;
 31403                                  	; 23/09/2023
 31404                                  	;push	SI							;AN000;
 31405                                  	
 31406 000058E8 8B05                    	mov	ax,[di]
 31407                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31408 000058EA 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31409                                  	
 31410 000058EF 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31411 000058F1 7422                    	je	short nret			;Yes, special case	;AN000;
 31412 000058F3 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31413 000058F5 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31414 000058F7 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31415 000058FB EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31416                                  not_first:
 31417                                  	; 23/09/2023
 31418 000058FD 56                      	push	si
 31419                                  	;mov	si,[di+2]
 31420 000058FE 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31421 00005901 8904                    	mov	[si],ax
 31422                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31423 00005903 96                      	xchg	si,ax
 31424                                  	;mov	[si+2],ax
 31425 00005904 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31426                                  	
 31427 00005907 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31428 0000590A 893C                    	mov	[si],di
 31429                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31430 0000590C 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31431 0000590F 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31432 00005912 891D                    	mov	[di],bx
 31433                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31434                                  	; 23/09/2023
 31435 00005914 5E                      	pop	si
 31436                                  nret:	
 31437                                  	; 23/09/2023							;AN000;
 31438                                  	;pop	SI							;AN000;
 31439 00005915 5B                      	pop	BX							;AN000;
 31440 00005916 58                      	pop	AX							;AN000;
 31441                                  									;AN000;
 31442                                  	;cmp	byte [di+4],0FFh
 31443 00005917 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31444 0000591B 7505                            jne	short pbx			; M039: -no, jump.
 31445 0000591D 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31446                                  pbx:	
 31447 00005922 C3                      	retn								;AN000;
 31448                                  
 31449                                  	; 31/07/2018 - Retro DOS v3.0
 31450                                  
 31451                                  	; MSDOS 3.3
 31452                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31453                                  
 31454                                  ;PLACEBUF:
 31455                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31456                                  ;	
 31457                                  ;       CALL	save_world
 31458                                  ;       LES     CX,[DI]
 31459                                  ;       CMP     CX,-1           	; Buf is LAST?
 31460                                  ;       JZ      SHORT NRET		; Buffer already last
 31461                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31462                                  ;       PUSH    DS
 31463                                  ;       POP     ES              	; Buf is ES:DI
 31464                                  ;	; 15/03/2018
 31465                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31466                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31467                                  ;       JNZ     SHORT BUFLOOP
 31468                                  ;       MOV     [SS:BUFFHEAD],CX
 31469                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31470                                  ;       JMP     SHORT LOOKEND
 31471                                  ;BUFLOOP:
 31472                                  ;	; 31/07/2018
 31473                                  ;	mov	ax,ds
 31474                                  ;	mov	bx,si
 31475                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31476                                  ;       LDS     SI,[SI]
 31477                                  ;       CALL    POINTCOMP
 31478                                  ;       jnz	short BUFLOOP
 31479                                  ;	;
 31480                                  ;	mov	ds,ax
 31481                                  ;	mov	si,bx
 31482                                  ;	mov	[SI],cx
 31483                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31484                                  ;	mov	[SI+2],bp
 31485                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31486                                  ;LOOKEND:
 31487                                  ;	mov	ax,ds
 31488                                  ;	mov	bx,si
 31489                                  ;       LDS     SI,[SI]
 31490                                  ;       CMP     SI,-1
 31491                                  ;       jnz     short LOOKEND
 31492                                  ;GOTHEEND:
 31493                                  ;       mov	ds,ax
 31494                                  ;	mov	[BX],di
 31495                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31496                                  ;       MOV     WORD [ES:DI],-1
 31497                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31498                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31499                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31500                                  ;NRET:
 31501                                  ;       CALL	restore_world
 31502                                  ;	
 31503                                  ;	;cmp	byte [di+4],-1
 31504                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31505                                  ;	jnz     short scanplace_retn
 31506                                  ;	call    PLACEHEAD
 31507                                  ;	retn
 31508                                  
 31509                                  ;EndProc PLACEBUF
 31510                                  
 31511                                  ;M039 - Removed PLACEHEAD.
 31512                                  ;----------------------------------------------------------------------------
 31513                                  ; places buffer at head
 31514                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31515                                  ;	ONE IN THE LIST!!!!!!!
 31516                                  ; BUGBUG ---- this routine can be removed because it has only
 31517                                  ; BUGBUG ---- one instruction. This routine is called from
 31518                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31519                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31520                                  ; BUGBUG ---- But kept as it is for modularity
 31521                                  ;----------------------------------------------------------------------------
 31522                                  ;procedure   PLACEHEAD,NEAR
 31523                                  ;	mov	word ptr [BufferQueue], di
 31524                                  ;	ret
 31525                                  ;EndProc PLACEHEAD
 31526                                  ;M039
 31527                                  
 31528                                  ;----------------------------------------------------------------------------
 31529                                  ; Procedure Name : PLACEHEAD
 31530                                  ;
 31531                                  ; SAME AS PLACEBUF except places buffer at head
 31532                                  ;----------------------------------------------------------------------------
 31533                                  
 31534                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31535                                  	; 05/09/2018
 31536                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31537                                  ;PLACEHEAD:
 31538                                  ;	; 31/07/2018 - Retro DOS v3.0
 31539                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31540                                  ;
 31541                                  ;       CALL	save_world
 31542                                  ;       PUSH	DS
 31543                                  ;       POP	ES
 31544                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31545                                  ;       LDS     SI,[SS:BUFFHEAD]
 31546                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31547                                  ;	CALL    POINTCOMP
 31548                                  ;       JZ      SHORT GOTHEEND2
 31549                                  ;	MOV	[ES:DI],SI
 31550                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31551                                  ;       MOV	[ES:DI+2],DS
 31552                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31553                                  ;       MOV	[SS:BUFFHEAD],DI
 31554                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31555                                  ;LOOKEND2:
 31556                                  ;       mov	ax,ds
 31557                                  ;	mov	bx,si
 31558                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31559                                  ;       LDS     SI,[SI]
 31560                                  ;       CALL    POINTCOMP
 31561                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31562                                  ;       mov	ds,ax
 31563                                  ;	mov	word [bx],-1
 31564                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31565                                  ;	mov	word [bx+2],-1
 31566                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31567                                  ;GOTHEEND2:
 31568                                  ;      	call	restore_world
 31569                                  ;placehead_retn:
 31570                                  ;	retn
 31571                                  
 31572                                  ; 20/05/2019 - Retro DOS v4.0
 31573                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31574                                  
 31575                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31576                                  ;----------------------------------------------------------------------------
 31577                                  ;
 31578                                  ; Procedure Name : PointComp
 31579                                  ; Inputs:
 31580                                  ;         DS:SI & ES:DI
 31581                                  ; Function:
 31582                                  ;          Checks for ((SI==DI) && (ES==DS))
 31583                                  ;	   Assumes that pointers are normalized for the
 31584                                  ;	   same segment
 31585                                  ;
 31586                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31587                                  ; DO NOT USE FOR < or >
 31588                                  ; No Registers altered
 31589                                  ;
 31590                                  ;----------------------------------------------------------------------------
 31591                                  
 31592                                  POINTCOMP:
 31593                                  	; 31/07/2018 - Retro DOS v3.0
 31594                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31595 00005923 39FE                    	CMP	SI,DI
 31596 00005925 750A                    	jnz	short _ret_label	; return if nz
 31597                                  	;jnz	short placehead_retn 
 31598 00005927 51                      	PUSH	CX
 31599 00005928 52                      	PUSH	DX
 31600 00005929 8CD9                    	MOV	CX,DS
 31601 0000592B 8CC2                    	MOV	DX,ES
 31602 0000592D 39D1                    	CMP	CX,DX
 31603 0000592F 5A                      	POP	DX
 31604 00005930 59                      	POP	CX
 31605                                  _ret_label:
 31606 00005931 C3                      	retn
 31607                                  
 31608                                  ; 01/08/2018 - Retro DOS v3.0
 31609                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31610                                  
 31611                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31612                                  
 31613                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31614                                  ;----------------------------------------------------------------------------
 31615                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31616                                  ;	It gets the specified local sector into one of the I/O buffers
 31617                                  ;	and shuffles the queue
 31618                                  ; 
 31619                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31620                                  ;		       ELSE no pre-read
 31621                                  ;		(DX) = Desired physical sector number	      (LOW)
 31622                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31623                                  ;		(ES:BP) = Pointer to drive parameters
 31624                                  ;		ALLOWED set in case of INT 24
 31625                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31626                                  ;		'C' clear if OK
 31627                                  ;		CURBUF Points to the Buffer for the sector
 31628                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31629                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31630                                  ;----------------------------------------------------------------------------
 31631                                  
 31632                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31633                                  ;----------------------------------------------------------------------------
 31634                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 31635                                  ;	It gets the specified sector into one of the I/O buffers
 31636                                  ;	and shuffles the queue. We need a special entry point so that
 31637                                  ;	we can read the alternate FAT sector if the first read fails, also
 31638                                  ;	so we can mark the buffer as a FAT sector.
 31639                                  ; 
 31640                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31641                                  ;		       ELSE no pre-read
 31642                                  ;		(DX) = Desired physical sector number	     (LOW)
 31643                                  ;		(SI) != 0
 31644                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31645                                  ;		(ES:BP) = Pointer to drive parameters
 31646                                  ;		ALLOWED set in case of INT 24
 31647                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31648                                  ;		'C' clear if OK
 31649                                  ;		CUR ddBUF Points to the Buffer for the sector
 31650                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31651                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31652                                  ;----------------------------------------------------------------------------
 31653                                  
 31654                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 31655                                  GETBUFFRC:
 31656 00005932 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 31657                                  GETBUFFRA:
 31658 00005938 30C0                    	xor	al,al
 31659 0000593A BE0100                  	mov	si,1
 31660 0000593D EB09                    	jmp	short GETBUFFRB
 31661                                  
 31662                                  	; 22/09/2023
 31663                                  GETBUFFER:
 31664 0000593F 30C0                    	xor	al,al
 31665                                  GETBUFFRD:
 31666                                  	;mov	byte [ALLOWED],18h
 31667 00005941 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31668                                  
 31669                                  	; 20/05/2019 - Retro DOS v4.0
 31670                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31671                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31672                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31673                                  GETBUFFR:
 31674 00005946 31F6                    	XOR	SI,SI
 31675                                  
 31676                                  ;	This entry point is called for FAT buffering with SI != 0
 31677                                  
 31678                                  GETBUFFRB:
 31679 00005948 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31680                                  	; 15/12/2022
 31681 0000594B 268A4600                	mov	al,[ES:BP]
 31682                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31683                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31684 0000594F C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31685                                  	; MSDOS 6.0
 31686                                  ;hkn; SS override
 31687 00005953 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 31688                                  
 31689                                  ;	See if this is the buffer that was most recently returned.
 31690                                  ;	A big performance win if it is.
 31691                                  
 31692 00005958 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31693 0000595B 7412                    	je	short getb5			; No
 31694                                  	;cmp	dx,[di+6]
 31695 0000595D 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31696 00005960 750D                    	JNZ	short getb5			; Wrong sector
 31697                                  	
 31698                                  	; MSDOS 6.0
 31699                                  	;cmp	cx,[di+8]
 31700 00005962 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 31701 00005965 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 31702                                  	
 31703                                  	;cmp	al,[di+4]
 31704 00005967 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31705                                  	;JZ	getb35				; Just asked for same buffer
 31706 0000596A 7503                    	jnz	short getb5
 31707                                  	;jmp	getb35
 31708                                  	; 17/12/2022
 31709                                  	; 28/07/2019
 31710 0000596C E9C700                  	jmp	getb35x
 31711                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31712                                  	;jmp	getb35
 31713                                  
 31714                                  ;	It's not the buffer most recently returned. See if it's in the
 31715                                  ;	cache.
 31716                                  ;
 31717                                  ;	(cx:dx) = sector #
 31718                                  ;	(al) = drive #
 31719                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31720                                  ;	??? list may be incomplete ???
 31721                                  
 31722                                  getb5:	
 31723                                  	; MSDOS 3.3
 31724                                  	;lds	di,[SS:BUFFHEAD]
 31725                                  	; MSDOS 6.0
 31726 0000596F E85BFF                  	CALL	GETCURHEAD			; get Q Head
 31727                                  getb10:	
 31728                                  	;cmp	dx,[di+6]
 31729 00005972 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31730 00005975 750D                    	jne	short getb12			; wrong sector lo
 31731                                  	
 31732                                  	; MSDOS 6.0
 31733                                  	;cmp	cx,[di+8]
 31734 00005977 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31735 0000597A 7508                    	jne	short getb12			; wrong sector hi
 31736                                  	
 31737                                  	;cmp	al,[di+4]
 31738 0000597C 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31739                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31740 0000597F 7503                    	jne	short getb12
 31741 00005981 E98C00                  	jmp	getb25
 31742                                  getb12:	
 31743                                  	; MSDOS 3.3
 31744                                  	;;mov	di,[DI]
 31745                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31746                                  	;
 31747                                  	; 15/08/2018
 31748                                  	;lds	di,[di]
 31749                                  
 31750                                  	;cmp	di,-1 ; 0FFFFh
 31751                                  	;jne	short getb10
 31752                                  	;lds	di,[SS:BUFFHEAD]
 31753                                  
 31754                                  	; MSDOS 6.0
 31755 00005984 8B3D                    	mov	di,[di]
 31756                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31757 00005986 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31758 0000598B 75E5                    	jne	short getb10			; no, continue looking
 31759                                  
 31760                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31761                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31762                                  ;	new sector into it.
 31763                                  ;
 31764                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31765                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31766                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31767                                  ;	down a chain, but should be hashed.
 31768                                  ;
 31769                                  ;	(DS:DI) = first buffer in the queue
 31770                                  ;	(CX:DX) = sector # we want
 31771                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31772                                  
 31773                                  	; MSDOS 3.3 & MSDOS 6.0
 31774                                  ;hkn; SS override
 31775 0000598D 51                      	PUSH	CX  ; MSDOS 6.0
 31776 0000598E 56                      	push	si
 31777 0000598F 52                      	push	dx
 31778 00005990 55                      	push	bp
 31779 00005991 06                      	push	es
 31780 00005992 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 31781 00005995 07                      	pop	es
 31782 00005996 5D                      	pop	bp
 31783 00005997 5A                      	pop	dx
 31784 00005998 5E                      	pop	si
 31785 00005999 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31786                                  	;jc	short getbx			; if got hard error
 31787 0000599E 7303                    	jnc	short getb13
 31788 000059A0 E99D00                  	jmp	getbx
 31789                                  
 31790                                  getb13:
 31791                                  	; MSDOS 6.0
 31792 000059A3 E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31793                                  
 31794                                  ;	We're ready to read in the buffer, if need be. If the caller
 31795                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31796                                  
 31797 000059A6 30E4                    	XOR	AH,AH				; initial flags
 31798                                  ;hkn; SS override
 31799                                  	;test	byte [ss:PREREAD],0FFh
 31800                                  	;jnz	short getb20
 31801 000059A8 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31802 000059AD 7549                    	JNZ	short getb20			; no, we're done
 31803                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31804                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31805 000059AF 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31806                                  	;MOV	CX,1
 31807                                  	; 22/09/2023
 31808 000059B2 29C9                    	sub	cx,cx ; 0
 31809 000059B4 56                      	push	si
 31810 000059B5 57                      	push	di
 31811 000059B6 52                      	push	dx
 31812                                  	; MSDOS 6.0
 31813 000059B7 06                      	push	es ; ***
 31814                                  
 31815                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31816                                  ;	this point. -mrw 10/88
 31817                                  	
 31818                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31819                                  	; 22/09/2023
 31820 000059B8 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 31821 000059BD 7407                    	jz	short getb14
 31822 000059BF 1E                      	push	ds ; **
 31823 000059C0 53                      	push	bx ; *
 31824 000059C1 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31825                                  getb14:
 31826                                  ;M039: Eliminated redundant HMA code.
 31827                                  
 31828                                  	; 22/09/2023
 31829 000059C6 41                      	inc	cx ; cx = 1
 31830                                  
 31831                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31832 000059C7 09F6                    	OR	SI,SI			; FAT sector ?
 31833 000059C9 7407                    	JZ	short getb15		
 31834                                  
 31835 000059CB E80ADD                  	call	FATSECRD
 31836                                  	;mov	ah,2
 31837 000059CE B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31838                                  
 31839 000059D0 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31840                                  
 31841                                  getb15:
 31842 000059D2 E82FDD                  	call	DREAD			; Buffer is marked free if read barfs
 31843 000059D5 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31844                                  getb17:
 31845                                  	; 17/12/2022	
 31846                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31847                                  ;%if 0
 31848                                  	; MSDOS 6.0							  ;I001
 31849 000059D7 9C                      	pushf								  ;I001
 31850 000059D8 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31851 000059DE 7411                    	jz	short not_in_hma	; no				  ;I001
 31852                                  	;mov	cx,[es:bp+2]
 31853 000059E0 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31854 000059E4 D1E9                    	shr	cx,1							  ;I001
 31855 000059E6 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31856 000059E7 89DE                    	mov	si,bx							  ;I001
 31857 000059E9 5F                      	pop	di ; *							  ;I001
 31858 000059EA 07                      	pop	es ; **							  ;I001
 31859 000059EB FC                      	cld								  ;I001
 31860 000059EC 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31861 000059ED F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31862 000059EF 06                      	push	es							  ;I001
 31863 000059F0 1F                      	pop	ds							  ;I001
 31864                                  ;%endif
 31865                                  
 31866                                  ; 17/12/2022
 31867                                  %if 0
 31868                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31869                                  	; MSDOS 5.0
 31870                                  	pushf
 31871                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31872                                  	jz	short not_in_hma	; no
 31873                                  	popf
 31874                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31875                                  	shr	cx,1
 31876                                  	mov	si,bx
 31877                                  	pop	di ; *
 31878                                  	pop	es ; **
 31879                                  	cld
 31880                                  	rep	movsw
 31881                                  	push	es
 31882                                  	pop	ds
 31883                                  	jmp	short getb19 ; 27/11/2022
 31884                                  %endif
 31885                                  
 31886                                  not_in_hma:								  ;I001
 31887 000059F1 9D                      	popf							 	  ;I001
 31888                                  getb19:
 31889 000059F2 07                      	pop	es ; ***
 31890 000059F3 5A                      	pop	dx
 31891 000059F4 5F                      	pop	di
 31892 000059F5 5E                      	pop	si
 31893 000059F6 7248                    	JC	short getbx
 31894                                  
 31895                                  ;	The buffer has the data setup in it (if we were to read)
 31896                                  ;	Setup the various buffer fields
 31897                                  ;
 31898                                  ;	(ds:di) = buffer address
 31899                                  ;	(es:bp) = DPB address
 31900                                  ;	(HIGH_SECTOR:DX) = sector #
 31901                                  ;	(ah) = BUF_FLAGS value
 31902                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31903                                  
 31904                                  ;hkn; SS override
 31905                                  getb20:	; MSDOS 6.0
 31906 000059F8 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31907                                  	;mov	[di+8],cx
 31908 000059FD 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31909                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31910                                   	;mov	[di+6],dx
 31911 00005A00 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31912                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31913                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31914 00005A03 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31915                                  	;;mov	[di+0Ch],es
 31916                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31917 00005A06 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31918                                  	; 15/12/2022
 31919 00005A09 268A4600                	mov	al,[es:bp]
 31920                                  	;mov	al,[es:bp+0]
 31921                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31922                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31923                                  	;mov	[di+4],ax
 31924 00005A0D 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31925                                  getb25:	
 31926                                  	; MSDOS 3.3
 31927                                  	;mov     ax,1
 31928                                  
 31929                                  	; MSDOS 6.0
 31930                                  	;mov	byte [di+0Ah],1
 31931 00005A10 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31932 00005A14 31C0                    	XOR	AX,AX
 31933                                  
 31934                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31935 00005A16 09F6                    	OR	SI,SI				; FAT sector ?
 31936 00005A18 740B                    	JZ	short getb30
 31937                                  
 31938                                  	;mov	al,[es:bp+8]
 31939 00005A1A 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31940                                  	
 31941                                  	; MSDOS 6.0
 31942 00005A1E 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31943                                  	;mov	ax,[es:bp+0Fh]
 31944 00005A21 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31945                                  						;  sectors
 31946                                  	; MSDOS 3.3
 31947                                  	;;mov	ah,[es:bp+0Fh]
 31948                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31949                                  
 31950                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31951                                  ;		is set
 31952                                  
 31953                                  getb30:	
 31954                                  	; MSDOS 6.0
 31955                                  	;mov	[di+0Bh],ax
 31956 00005A25 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31957                                  
 31958                                  	; MSDOS 3.3
 31959                                  	;;mov	[di+8],ax ; 15/08/2018	
 31960                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31961                                  
 31962 00005A28 E8BBFE                  	CALL	PLACEBUF
 31963                                  
 31964                                  ;hkn; SS override for next 4
 31965                                  getb35: 
 31966                                  	; 17/12/2022
 31967                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31968                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31969                                  	;MOV	[SS:CURBUF+2],DS
 31970                                  	;MOV	[SS:LastBuffer+2],DS
 31971                                  	;MOV	[SS:CURBUF],DI
 31972                                  	;MOV	[SS:LastBuffer],DI
 31973                                  	;CLC
 31974                                  
 31975                                  	; 17/12/2022
 31976                                  	; 07/12/2022
 31977                                  	; Retro DOS v4.0
 31978 00005A2B 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31979 00005A30 36893E[1E00]            	mov	[ss:LastBuffer],di
 31980 00005A35 F8                      	clc
 31981                                  getb35x: ; 28/07/2019
 31982 00005A36 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31983 00005A3B 36893E[E205]            	MOV	[ss:CURBUF],di
 31984                                  
 31985                                  ;	Return with 'C' set appropriately
 31986                                  ;	(dx) = caller's original value
 31987                                  
 31988                                  getbx:	
 31989 00005A40 16                      	push	ss
 31990 00005A41 1F                      	pop	ds
 31991                                  	;retn
 31992                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31993                                  getbuffrb_retn:
 31994                                  ;flushbuf_retn:	; 17/12/2022
 31995 00005A42 C3                      	retn
 31996                                  
 31997                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31998                                  ;----------------------------------------------------------------------------
 31999                                  ; Input:
 32000                                  ;	DS = DOSGROUP
 32001                                  ;	AL = Physical unit number local buffers only
 32002                                  ;	   = -1 for all units and all remote buffers
 32003                                  ; Function:
 32004                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32005                                  ;	Carry set if error (user FAILed to I 24)
 32006                                  ;	    Flush operation completed.
 32007                                  ; DS Preserved, all others destroyed (ES too)
 32008                                  ;----------------------------------------------------------------------------
 32009                                  
 32010                                  	; 20/05/2019 - Retro DOS v4.0
 32011                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32012                                  
 32013                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32014                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32015                                  FLUSHBUF:
 32016                                  	; MSDOS 3.3
 32017                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32018                                  	;lds	di,[BUFFHEAD]
 32019                                  
 32020                                  	; MSDOS 6.0
 32021 00005A43 E887FE                  	call	GETCURHEAD
 32022                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32023 00005A46 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32024 00005A4C 7508                    	jnz	short scan_buf_queue
 32025 00005A4E 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32026 00005A54 7423                    	je	short end_scan
 32027                                  	
 32028                                  scan_buf_queue:
 32029 00005A56 E82900                  	call	CHECKFLUSH
 32030                                  	;push	ax  ; MSDOS 3.3
 32031                                  	; MSDOS 6.0
 32032                                  	;mov	ah,[di+4]
 32033 00005A59 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32034 00005A5C 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32035 00005A61 7408                    	je	short free_the_buf
 32036                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32037 00005A63 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32038 00005A69 7405                    	jz	short dont_free_the_buf
 32039                                  	; MSDOS 3.3
 32040                                  	;;mov	al,[di+4]
 32041                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32042                                  	;cmp	[SS:WPERR],al					;hkn;
 32043                                  	; 15/08/2018
 32044                                  	;jne	short dont_free_the_buf	
 32045                                  free_the_buf:
 32046                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32047 00005A6B C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32048                                  dont_free_the_buf:
 32049                                  	;pop	ax  ; MSDOS 3.3 	   	
 32050                                  
 32051                                  	; MSDOS 3.3
 32052                                  	;mov	di,[DI]
 32053                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32054                                  	;
 32055                                  	; 15/08/2018
 32056                                  	;lds	di,[di]
 32057                                  	;
 32058                                  	;cmp	di,-1 ; 0FFFFh
 32059                                  	;jnz	short scan_buf_queue 
 32060                                  	
 32061                                  	; MSDOS 6.0
 32062 00005A70 8B3D                    	mov	di,[di]
 32063                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32064 00005A72 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32065 00005A77 75DD                    	jne	short scan_buf_queue
 32066                                  
 32067                                  end_scan:
 32068 00005A79 16                      	push	ss
 32069 00005A7A 1F                      	pop	ds
 32070                                  	; 01/08/2018 - Retro DOS v3.0
 32071                                  	;cmp	byte [FAILERR],0
 32072                                  	;jne	short bad_flush
 32073                                  	;retn
 32074                                  ;bad_flush:
 32075                                  	;stc
 32076                                  	;retn
 32077                                  
 32078                                  	; 17/12/2022
 32079                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32080                                  	; 01/08/2018 - Retro DOS v3.0
 32081 00005A7B 803E[4A03]01            	cmp	byte [FAILERR],1
 32082 00005A80 F5                      	cmc
 32083                                  flushbuf_retn:
 32084 00005A81 C3                      	retn
 32085                                  	
 32086                                  	; 17/12/2022
 32087                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32088                                  	;cmp	byte [FAILERR],0
 32089                                  	;jne	short bad_flush
 32090                                  	;retn
 32091                                  ;bad_flush:
 32092                                  	;stc
 32093                                  	;retn
 32094                                  
 32095                                  ;----------------------------------------------------------------------------
 32096                                  ;
 32097                                  ; Procedure Name : CHECKFLUSH
 32098                                  ;
 32099                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32100                                  ;	   DS:DI - pointer to buffer
 32101                                  ;
 32102                                  ; Function : Write out a buffer if it is dirty
 32103                                  ;
 32104                                  ; Carry set if problem (currently user FAILed to I 24)
 32105                                  ;
 32106                                  ;----------------------------------------------------------------------------
 32107                                  
 32108                                  CHECKFLUSH:
 32109                                  	; MSDOS 6.0
 32110 00005A82 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 32111                                  	;cmp	[di+4],ah
 32112 00005A84 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32113 00005A87 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32114 00005A89 38C4                    	CMP	AH,AL			; 
 32115 00005A8B 7406                    	JZ	short DOBUFFER		; do this buffer
 32116                                  	;cmp	al,[di+4]
 32117 00005A8D 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32118 00005A90 F8                      	CLC
 32119 00005A91 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32120                                  DOBUFFER:
 32121                                  	;test	byte [di+5],40h
 32122 00005A93 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32123 00005A97 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32124 00005A99 50                      	PUSH	AX
 32125                                  	;push	word [di+4]
 32126 00005A9A FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32127 00005A9D E80B00                  	CALL	BUFWRITE
 32128 00005AA0 58                      	POP	AX
 32129 00005AA1 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32130                                  	;and	ah,0BFh
 32131 00005AA3 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32132                                  	;mov	[di+4],ax
 32133 00005AA6 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32134                                  LEAVE_BUF:
 32135 00005AA9 58                      	POP	AX			; Search info
 32136                                  checkflush_retn:
 32137 00005AAA C3                      	retn
 32138                                  
 32139                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32140                                  ;----------------------------------------------------------------------------
 32141                                  ;
 32142                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32143                                  ;
 32144                                  ;	ENTRY	DS:DI Points to the buffer
 32145                                  ;
 32146                                  ;	EXIT	Buffer marked free
 32147                                  ;		Carry set if error (currently user FAILed to I 24)
 32148                                  ;
 32149                                  ;	USES	All buf DS:DI
 32150                                  ;		HIGH_SECTOR
 32151                                  ;----------------------------------------------------------------------------
 32152                                  
 32153                                  	; 20/05/2019 - Retro DOS v4.0
 32154                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32155                                  
 32156                                  
 32157                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32158                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32159                                  
 32160                                  BUFWRITE:
 32161                                  	; 10/09/2018
 32162                                  	; 01/08/2018 - Retro DOS v3.0
 32163                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32164 00005AAB B8FF00                  	MOV	AX,00FFH
 32165                                  	;xchg	ax,[di+4]
 32166 00005AAE 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32167 00005AB1 3CFF                    	CMP	AL,0FFH
 32168 00005AB3 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32169                                  	;test	ah,40h
 32170 00005AB5 F6C440                  	test	AH,buf_dirty
 32171 00005AB8 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32172                                  	; MSDOS 6.0
 32173 00005ABA E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32174                                  
 32175                                  ;hkn; SS override
 32176 00005ABD 363A06[2203]            	CMP	AL,[SS:WPERR]
 32177 00005AC2 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32178                                  
 32179                                  ;hkn; SS override
 32180                                  	; MSDOS 6.0
 32181 00005AC4 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32182                                  	
 32183                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32184                                  	;les	bp,[di+13] ; MSDOS 6.0
 32185 00005AC8 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32186                                  	;;lea	bx,[di+16]
 32187                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32188 00005ACB 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32189                                  	;mov	dx,[di+6]
 32190 00005ACE 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32191                                  	
 32192                                  	; MSDOS 6.0
 32193                                  	;mov	cx,[di+8]
 32194 00005AD1 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32195                                  
 32196                                  ;hkn; SS override
 32197 00005AD4 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32198 00005AD9 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32199                                  	; MSDOS 3.3
 32200                                  	;; mov	cx,[DI+8]
 32201                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32202                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32203 00005ADC 30ED                    	XOR	CH,CH
 32204                                  	;;mov	ah,ch ; MSDOS 3.3
 32205                                  
 32206                                  ;hkn; SS override for ALLOWED
 32207                                  	;mov	byte [SS:ALLOWED],18h
 32208 00005ADE 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32209                                  	;test	byte [di+5],8
 32210                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32211                                  	;test	ah,8
 32212 00005AE4 F6C408                  	test	AH,buf_isDATA
 32213 00005AE7 7406                    	JZ	short NO_IGNORE
 32214                                  	;or	byte [SS:ALLOWED],20h
 32215 00005AE9 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32216                                  NO_IGNORE:
 32217                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32218                                  	; MSDOS 6.0
 32219                                  	;mov	ax,[di+11]
 32220 00005AEF 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32221                                  
 32222 00005AF2 57                      	PUSH	DI		; Save buffer pointer
 32223 00005AF3 31FF                    	XOR	DI,DI		; Indicate failure
 32224                                  
 32225 00005AF5 1E                      	push	ds ; *
 32226 00005AF6 53                      	push	bx ; **
 32227                                  WRTAGAIN:
 32228 00005AF7 57                      	push	di ; ***
 32229 00005AF8 51                      	push	cx ; ****
 32230 00005AF9 50                      	push	ax ; *****
 32231                                  	;MOV	CX,1
 32232                                  	; 17/12/2022
 32233                                  	; ch = 0
 32234 00005AFA B101                    	mov	cl,1 ; 24/07/2019
 32235                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32236                                  	;mov	cx,1
 32237 00005AFC 53                      	push	bx ; ******
 32238 00005AFD 52                      	push	dx ; *******
 32239 00005AFE 1E                      	push	ds ; ********
 32240                                  
 32241                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32242                                  
 32243                                  	; MSDOS 6.0
 32244                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32245                                  	; 22/09/2023
 32246 00005AFF 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32247 00005B04 7418                    	jz	short NBUFFINHMA
 32248 00005B06 51                      	push	cx
 32249 00005B07 06                      	push	es
 32250 00005B08 89DE                    	mov	si,bx
 32251 00005B0A 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32252 00005B0E D1E9                    	shr	cx,1
 32253 00005B10 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32254 00005B15 89FB                    	mov	bx,di
 32255 00005B17 FC                      	cld
 32256 00005B18 F3A5                    	rep	movsw
 32257 00005B1A 06                      	push	es
 32258 00005B1B 1F                      	pop	ds
 32259 00005B1C 07                      	pop	es
 32260 00005B1D 59                      	pop	cx
 32261                                  NBUFFINHMA:
 32262 00005B1E E843DC                  	call	DWRITE		; Write out the dirty buffer
 32263 00005B21 1F                      	pop	ds ; ********
 32264 00005B22 5A                      	pop	dx ; *******
 32265 00005B23 5B                      	pop	bx ; ******
 32266 00005B24 58                      	pop	ax ; *****
 32267 00005B25 59                      	pop	cx ; ****
 32268 00005B26 5F                      	pop	di ; ***
 32269 00005B27 7201                    	JC	short NOSET
 32270 00005B29 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32271                                  NOSET:				;	succeedes.
 32272 00005B2A 01C2                    	ADD	DX,AX
 32273 00005B2C E2C9                    	LOOP	WRTAGAIN
 32274 00005B2E 5B                      	pop	bx ; **
 32275 00005B2F 1F                      	pop	ds ; *
 32276                                  	;OR	DI,DI		; Clears carry
 32277                                  	;JNZ	short BWROK	; At least one write worked
 32278                                  	;STC			; DI never got INCed, all writes failed.
 32279                                  	; 22/09/2023
 32280 00005B30 83FF01                  	cmp	di,1
 32281                                  BWROK:	
 32282 00005B33 5F                      	POP	DI
 32283 00005B34 C3                      	retn
 32284                                  
 32285                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32286                                  ;----------------------------------------------------------------------------
 32287                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32288                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32289                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32290                                  ;	code and time
 32291                                  ;
 32292                                  ;	ENTRY	ES:BP = drive parameter block
 32293                                  ;
 32294                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32295                                  ;		[SC_DRIVE]= drive #
 32296                                  ;
 32297                                  ;	USES	Flags
 32298                                  ;----------------------------------------------------------------------------
 32299                                  
 32300                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32301                                  ; 04/05/2019 - Retro DOS v4.0
 32302                                  
 32303                                  SET_RQ_SC_PARMS:
 32304                                  ;hkn; SS override for all variables used in this procedure.
 32305 00005B35 50                      	push	ax
 32306                                  	;mov	ax,[es:bp+2]
 32307 00005B36 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32308 00005B3A 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32309                                  	;;mov	al,[es:bp+0]
 32310                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32311                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32312                                  	; 15/12/2022
 32313 00005B3E 268A4600                	mov	al,[ES:BP]
 32314 00005B42 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32315 00005B46 58                      	pop	ax
 32316                                  srspx:	
 32317 00005B47 C3                      	retn					;LB. return
 32318                                  
 32319                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32320                                  ;----------------------------------------------------------------------------
 32321                                  ; Input:
 32322                                  ;	none
 32323                                  ; Function:
 32324                                  ;	increment dirty buffers count
 32325                                  ; Output:
 32326                                  ;	dirty buffers count is incremented
 32327                                  ;
 32328                                  ; All registers preserved
 32329                                  ;----------------------------------------------------------------------------
 32330                                  
 32331                                  INC_DIRTY_COUNT:
 32332                                  ;; BUGBUG  ---- remove this routine
 32333                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32334 00005B48 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32335 00005B4D C3                      	retn
 32336                                  
 32337                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32338                                  ;----------------------------------------------------------------------------
 32339                                  ; Input:
 32340                                  ;	none
 32341                                  ; Function:
 32342                                  ;	decrement dirty buffers count
 32343                                  ; Output:
 32344                                  ;	dirty buffers count is decremented
 32345                                  ;
 32346                                  ; All registers preserved
 32347                                  ;----------------------------------------------------------------------------
 32348                                  
 32349                                  DEC_DIRTY_COUNT:
 32350 00005B4E 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32351 00005B54 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32352 00005B56 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32353                                  					; error condition to underflow here? ;hkn;
 32354                                  ddcx:	
 32355 00005B5B C3                      	retn
 32356                                  
 32357                                  ;============================================================================
 32358                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32359                                  ;============================================================================
 32360                                  ; 02/08/2018 - Retro DOS v3.0
 32361                                  ; 29/04/2019 - Retro DOS v4.0
 32362                                  
 32363                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32364                                  
 32365                                  ; Pseudo EXEC system call for DOS
 32366                                  
 32367                                  ;	TITLE	MSPROC - process maintenance
 32368                                  ;	NAME	MSPROC
 32369                                  
 32370                                  ; =========================================================================
 32371                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32372                                  ;	I/O specs are defined in DISPATCH.
 32373                                  ;
 32374                                  ;	$WAIT
 32375                                  ;	$EXEC
 32376                                  ;	$Keep_process
 32377                                  ;	Stay_resident
 32378                                  ;	$EXIT
 32379                                  ;	$ABORT
 32380                                  ;	abort_inner
 32381                                  ;
 32382                                  ;	Modification history:
 32383                                  ;
 32384                                  ;		Created: ARR 30 March 1983
 32385                                  ;		AN000	version 4.0 jan. 1988
 32386                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32387                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32388                                  ;
 32389                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32390                                  ;
 32391                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32392                                  ;		       dossym.inc. 7/30/90
 32393                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32394                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32395                                  ;		       stack is provided at the end of the program. Note that
 32396                                  ;		       only SP is changed.
 32397                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32398                                  ;
 32399                                  ;		M028 - 4b04 implementation
 32400                                  ;
 32401                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32402                                  ;			in memory block >= 64K, sp = 0. If memory block
 32403                                  ;			obtained is <64K, point sp at the end of the memory
 32404                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32405                                  ;			added for a stack segment which may be needed if it
 32406                                  ;			is loaded in low memory situations.
 32407                                  ;
 32408                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32409                                  ;
 32410                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32411                                  ;			a bad environment if it reached 32767 bytes. Changed
 32412                                  ;			to allow 32768 bytes of environment.
 32413                                  ;
 32414                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32415                                  ;		       COM file high. Also ensure that if the biggest block
 32416                                  ;		       into which we load the com file is less than 64K then
 32417                                  ;		       we provide atleast 256 bytes of stack to the user.
 32418                                  ;
 32419                                  ;		M050 - Made Lie table search CASE insensitive
 32420                                  ;
 32421                                  ;		M060 - Removed special version table from the kernal and
 32422                                  ;                      put it in a device drive which puts the address
 32423                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32424                                  ;		       as a DWORD.
 32425                                  ;
 32426                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32427                                  ;		       entry do not try to load low if there is no space in
 32428                                  ;		       UMBs.
 32429                                  ;
 32430                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32431                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32432                                  ;		       change return address to LeaveDos if AL=5.
 32433                                  ;
 32434                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32435                                  ;                      controls building a version of MSDOS.SYS that only
 32436                                  ;                      runs programs from a fixed list (defined in the
 32437                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32438                                  ;                      for details.  This feature is used to build a
 32439                                  ;                      "special" version of DOS that can be handed out to
 32440                                  ;                      OEM/ISV customers as part of a "service" disk.
 32441                                  ;
 32442                                  ; =========================================================================
 32443                                  
 32444                                  ;SAVEXIT  EQU  10
 32445                                  
 32446                                  ;BREAK	<$WAIT - return previous process error code>
 32447                                  ; =========================================================================
 32448                                  ;	$WAIT - Return previous process error code.
 32449                                  ;
 32450                                  ;	Assembler usage:
 32451                                  ;
 32452                                  ;	    MOV     AH, WaitProcess
 32453                                  ;	    INT     int_command
 32454                                  ;
 32455                                  ;	ENTRY	none
 32456                                  ;	EXIT	(ax) = exit code
 32457                                  ;	USES	all
 32458                                  ; =========================================================================
 32459                                  
 32460                                  	; 20/05/2019 - Retro DOS v4.0
 32461                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32462                                  
 32463                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32464                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32465                                  _$WAIT:
 32466                                  	; 02/08/2018 - Retro DOS v3.0
 32467                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32468                                  
 32469 00005B5C 31C0                    	xor	AX,AX
 32470 00005B5E 368706[3403]            	xchg	AX,[ss:exit_code]
 32471 00005B63 E9D5AA                  	jmp	SYS_RET_OK
 32472                                  
 32473                                  ; =========================================================================
 32474                                  ;BREAK <$exec - load/go a program>
 32475                                  ;	EXEC.ASM - EXEC System Call
 32476                                  ;
 32477                                  ;
 32478                                  ; Assembler usage:
 32479                                  ;	    lds     DX, Name
 32480                                  ;	    les     BX, Blk
 32481                                  ;	    mov     AH, Exec
 32482                                  ;	    mov     AL, FUNC
 32483                                  ;	    int     INT_COMMAND
 32484                                  ;
 32485                                  ;	AL  Function
 32486                                  ;	--  --------
 32487                                  ;	 0  Load and execute the program.
 32488                                  ;	 1  Load, create the program header but do not
 32489                                  ;	    begin execution.
 32490                                  ;	 3  Load overlay. No header created.
 32491                                  ;
 32492                                  ;	    AL = 0 -> load/execute program
 32493                                  ;
 32494                                  ;	    +---------------------------+
 32495                                  ;	    | WORD segment address of	|
 32496                                  ;	    | environment.		|
 32497                                  ;	    +---------------------------+
 32498                                  ;	    | DWORD pointer to ASCIZ	|
 32499                                  ;	    | command line at 80h	|
 32500                                  ;	    +---------------------------+
 32501                                  ;	    | DWORD pointer to default	|
 32502                                  ;	    | FCB to be passed at 5Ch	|
 32503                                  ;	    +---------------------------+
 32504                                  ;	    | DWORD pointer to default	|
 32505                                  ;	    | FCB to be passed at 6Ch	|
 32506                                  ;	    +---------------------------+
 32507                                  ;
 32508                                  ;	    AL = 1 -> load program
 32509                                  ;
 32510                                  ;	    +---------------------------+
 32511                                  ;	    | WORD segment address of	|
 32512                                  ;	    | environment.		|
 32513                                  ;	    +---------------------------+
 32514                                  ;	    | DWORD pointer to ASCIZ	|
 32515                                  ;	    | command line at 80h	|
 32516                                  ;	    +---------------------------+
 32517                                  ;	    | DWORD pointer to default	|
 32518                                  ;	    | FCB to be passed at 5Ch	|
 32519                                  ;	    +---------------------------+
 32520                                  ;	    | DWORD pointer to default	|
 32521                                  ;	    | FCB to be passed at 6Ch	|
 32522                                  ;	    +---------------------------+
 32523                                  ;	    | DWORD returned value of	|
 32524                                  ;	    | CS:IP			|
 32525                                  ;	    +---------------------------+
 32526                                  ;	    | DWORD returned value of	|
 32527                                  ;	    | SS:IP			|
 32528                                  ;	    +---------------------------+
 32529                                  ;
 32530                                  ;	    AL = 3 -> load overlay
 32531                                  ;
 32532                                  ;	    +---------------------------+
 32533                                  ;	    | WORD segment address where|
 32534                                  ;	    | file will be loaded.	|
 32535                                  ;	    +---------------------------+
 32536                                  ;	    | WORD relocation factor to |
 32537                                  ;	    | be applied to the image.	|
 32538                                  ;	    +---------------------------+
 32539                                  ;
 32540                                  ; Returns:
 32541                                  ;	    AX = error_invalid_function
 32542                                  ;	       = error_bad_format
 32543                                  ;	       = error_bad_environment
 32544                                  ;	       = error_not_enough_memory
 32545                                  ;	       = error_file_not_found
 32546                                  ; =========================================================================
 32547                                  ;
 32548                                  ;   Revision history:
 32549                                  ;
 32550                                  ;	 A000	version 4.00  Jan. 1988
 32551                                  ;
 32552                                  ; =========================================================================
 32553                                  
 32554                                  Exec_Internal_Buffer		EQU	OPENBUF
 32555                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32556                                  
 32557                                  ; =========================================================================
 32558                                  
 32559                                  ;IF1		; warning message on buffers
 32560                                  ;%out	Please make sure that the following are contiguous and of the
 32561                                  ;%out	following sizes:
 32562                                  ;%out
 32563                                  ;%out	OpenBuf     128
 32564                                  ;%out	RenBuf	    128
 32565                                  ;%out	SearchBuf    53
 32566                                  ;%out	DummyCDS    curdirLen
 32567                                  ;ENDIF
 32568                                  
 32569                                  ; =========================================================================
 32570                                  
 32571                                  ; =========================================================================
 32572                                  ;
 32573                                  ; =========================================================================
 32574                                  
 32575                                  	; 20/05/2019 - Retro DOS v4.0
 32576                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32577                                  
 32578                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32579                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32580                                  	
 32581                                  _$EXEC:
 32582                                  	; 02/08/2018 - Retro DOS v3.0
 32583                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32584                                  
 32585                                  EXEC001S:
 32586                                  	;LocalVar    Exec_Blk		,DWORD
 32587                                  	;LocalVar    Exec_Func		,BYTE
 32588                                  	;LocalVar    Exec_Load_High	,BYTE
 32589                                  	;LocalVar    Exec_FH		,WORD
 32590                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32591                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32592                                  	;LocalVar    Exec_Environ	,WORD
 32593                                  	;LocalVar    Exec_Size		,WORD
 32594                                  	;LocalVar    Exec_Load_Block	,WORD
 32595                                  	;LocalVar    Exec_DMA		,WORD
 32596                                  	;LocalVar    ExecNameLen 	,WORD
 32597                                  	;LocalVar    ExecName		,DWORD
 32598                                  	;
 32599                                  	;LocalVar    Exec_DMA_Save	,WORD
 32600                                  	;LocalVar    Exec_NoStack	,BYTE
 32601                                  
 32602                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32603                                  	;%define	Exec_Blk	dword [bp-4]
 32604                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32605                                  	%define		Exec_BlkL	word [bp-4]	
 32606                                  	%define		Exec_BlkH	word [bp-2]
 32607                                  	%define		Exec_Func	byte [bp-5]
 32608                                  	%define		Exec_Load_High	byte [bp-6]
 32609                                  	%define		Exec_FH		word [bp-8]
 32610                                  	%define		Exec_Rel_Fac	word [bp-10]
 32611                                  	%define		Exec_Res_Len_Para word [bp-12]
 32612                                  	%define		Exec_Environ	word [bp-14]
 32613                                  	%define		Exec_Size	word [bp-16]
 32614                                  	%define		Exec_Load_Block	word [bp-18]
 32615                                  	%define		Exec_DMA	word [bp-20]
 32616                                  	%define		ExecNameLen	word [bp-22]
 32617                                  	;%define	ExecName	dword [bp-26]
 32618                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32619                                  	%define		ExecNameL	word [bp-26]	
 32620                                  	%define		ExecNameH	word [bp-24]
 32621                                  	; MSDOS 6.0
 32622                                  	%define		Exec_DMA_Save	word [bp-28]
 32623                                  	%define		Exec_NoStack	byte [bp-29]
 32624                                  	
 32625                                  	; ==================================================================
 32626                                  	; validate function
 32627                                  	; ==================================================================
 32628                                  		      	
 32629                                  	; M068 - Start
 32630                                  	;
 32631                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32632                                  	; possibility that the count may not be decremented all the way to
 32633                                  	; 0. A typical case is if the program for which we intended to keep 
 32634                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32635                                  	; calls), exits pre-maturely due to error conditions.
 32636                                  
 32637                                  	; MSDOS 6.0
 32638 00005B66 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32639                                  
 32640                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32641                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32642                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32643                                  
 32644 00005B6C 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32645                                  	;jne	short @f
 32646 00005B6E 7505                    	jne	short Exec_@f		; N: continue
 32647                                  					; Y: change ret addr. to LeaveDos.
 32648 00005B70 59                      	pop	cx			; Note CX is not input to ExecReady
 32649 00005B71 B9[0804]                	mov	cx,LeaveDOS
 32650 00005B74 51                      	push	cx
 32651                                  ;@@:
 32652                                  Exec_@f:
 32653                                  	; M068 - End
 32654                                  	
 32655                                  	;Enter
 32656                                  
 32657 00005B75 55                      	push	bp
 32658 00005B76 89E5                    	mov	bp,sp
 32659                                  	;;sub	sp,26	; MSDOS 3.3
 32660                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32661                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32662                                  	; 17/12/2022
 32663                                  	; 20/05/2019
 32664 00005B78 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32665                                  
 32666                                  	; MSDOS 6.0
 32667 00005B7B 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32668                                  					; M030
 32669 00005B7D 7614                    	jna	short Exec_Check_2
 32670                                  
 32671                                  	; MSDOS 3.3
 32672                                  	;cmp	AL,3
 32673                                  	;jna	short Exec_Check_2
 32674                                  
 32675                                  Exec_Bad_Fun:
 32676 00005B7F 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32677                                  					; Extended Error Locus	;smr;SS Override
 32678                                  	;mov	al,1
 32679 00005B85 B001                    	mov	al,error_invalid_function
 32680                                  
 32681                                  Exec_Ret_Err:
 32682                                  	;Leave
 32683 00005B87 89EC                    	mov	sp,bp
 32684 00005B89 5D                      	pop	bp
 32685                                  	;transfer SYS_RET_ERR
 32686 00005B8A E9B7AA                  	jmp	SYS_RET_ERR
 32687                                  
 32688                                  	; MSDOS 6.0
 32689                                  ExecReadyJ:
 32690 00005B8D E8FD17                  	call	ExecReady		; M028
 32691 00005B90 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32692                                  
 32693                                  Exec_Check_2:
 32694 00005B93 3C02                    	cmp	AL,2			
 32695 00005B95 74E8                    	je	short Exec_Bad_Fun
 32696                                  
 32697                                  	; MSDOS 6.0
 32698 00005B97 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32699 00005B99 74E4                    	je	short Exec_Bad_Fun
 32700                                  	
 32701 00005B9B 3C05                    	cmp	al,5			; M028 ; M030
 32702 00005B9D 74EE                    	je	short ExecReadyJ	; M028
 32703                                  
 32704                                  	;mov	[bp-4],bx
 32705 00005B9F 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32706                                  	;mov	[bp-2],es
 32707 00005BA2 8C46FE                  	mov	Exec_BlkH,ES
 32708                                  	;mov	[bp-5],al
 32709 00005BA5 8846FB                  	mov	Exec_Func,AL
 32710                                  	;mov	byte [bp-6],0
 32711 00005BA8 C646FA00                	mov	Exec_Load_High,0
 32712                                  
 32713                                  	;mov	[bp-26],dx
 32714 00005BAC 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32715                                  	;mov	[bp-24],ds
 32716 00005BAF 8C5EE8                  	mov	ExecNameH,DS
 32717 00005BB2 89D6                    	mov	SI,DX			; move pointer to convenient place
 32718                                  	;invoke	DStrLen
 32719 00005BB4 E847B6                  	call	DStrLen
 32720                                  	;mov	[bp-22],cx
 32721 00005BB7 894EEA                  	mov	ExecNameLen,CX		; save length
 32722                                  
 32723                                  	; MSDOS 6.0
 32724 00005BBA 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32725 00005BBE 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32726                                  
 32727 00005BC2 30C0                    	xor	AL,AL			; open for reading
 32728 00005BC4 55                      	push	BP
 32729                                  
 32730                                  	; MSDOS 6.0
 32731                                  	;or	byte [ss:DOS_FLAG],1
 32732 00005BC5 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32733                                  					; the redir that this open call is
 32734                                  					; due to an exec.
 32735                                  
 32736                                  	;invoke	$OPEN			; is the file there?
 32737 00005BCB E80513                  	call	_$OPEN
 32738                                  
 32739                                  	; MSDOS 6.0
 32740 00005BCE 9C                      	pushf
 32741                                  	; 02/06/2019
 32742                                  	;and	byte [ss:DOS_FLAG],0FEh
 32743 00005BCF 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32744 00005BD5 9D                      	popf
 32745                                  
 32746 00005BD6 5D                      	pop	BP
 32747                                  
 32748                                  	; MSDOS 3.3 & MSDOS 6.0
 32749 00005BD7 72AE                    	jc	short Exec_Ret_Err
 32750                                  
 32751                                  	;mov	[bp-8],ax
 32752 00005BD9 8946F8                  	mov	Exec_FH,AX
 32753 00005BDC 89C3                    	mov	BX,AX
 32754 00005BDE 30C0                    	xor	AL,AL
 32755                                  	;invoke	$Ioctl
 32756 00005BE0 E88BC6                  	call	_$IOCTL
 32757 00005BE3 7207                    	jc	short Exec_BombJ
 32758                                  
 32759                                  	;test	dl,80h
 32760 00005BE5 F6C280                  	test	DL,devid_ISDEV
 32761 00005BE8 740A                    	jz	short Exec_Check_Environ
 32762                                  
 32763                                  	;mov	al,2
 32764 00005BEA B002                    	mov	AL,error_file_not_found
 32765                                  Exec_BombJ:
 32766 00005BEC E9CA00                  	jmp	Exec_Bomb
 32767                                  
 32768                                  BadEnv:
 32769                                  	;mov	al,0Ah
 32770 00005BEF B00A                    	mov	AL,error_bad_environment
 32771 00005BF1 E9C500                  	jmp	Exec_Bomb
 32772                                  
 32773                                  Exec_Check_Environ:
 32774                                  	;mov	word [bp-18],0
 32775 00005BF4 C746EE0000              	mov	Exec_Load_Block,0
 32776                                  	;mov	word [bp-14],0
 32777 00005BF9 C746F20000              	mov	Exec_Environ,0
 32778                                  					; overlays... no environment
 32779                                  	;test	byte [bp-5],2
 32780 00005BFE F646FB02                	test	Exec_Func,exec_func_overlay
 32781 00005C02 7552                    	jnz	short Exec_Read_Header
 32782                                  
 32783                                  	;lds	si,[bp-4]
 32784 00005C04 C576FC                  	lds	SI,Exec_Blk		; get block
 32785 00005C07 8B04                    	mov	ax,[SI]
 32786                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32787 00005C09 09C0                    	or	AX,AX
 32788 00005C0B 750C                    	jnz	short Exec_Scan_Env
 32789                                  
 32790 00005C0D 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32791                                  	;mov	ax,[44]
 32792 00005C12 A12C00                  	mov	AX,[PDB.ENVIRON]
 32793                                  
 32794                                  ; MSDOS 6.0
 32795                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32796                                  ;
 32797                                  ; Exec_environ is being correctly initialized after the environment has been
 32798                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32799                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32800                                  ; parent's environment.
 32801                                  ;	mov	Exec_Environ,AX
 32802                                  ;
 32803                                  ;----------------------------------------------------------------------------
 32804                                  
 32805                                  	;mov	[bp-14],ax
 32806                                  	;mov	Exec_Environ,ax
 32807                                  
 32808 00005C15 09C0                    	or	AX,AX
 32809 00005C17 743D                    	jz	short Exec_Read_Header
 32810                                  
 32811                                  Exec_Scan_Env:
 32812 00005C19 8EC0                    	mov	ES,AX
 32813 00005C1B 31FF                    	xor	DI,DI
 32814                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32815 00005C1D B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32816 00005C20 30C0                    	xor	AL,AL
 32817                                  
 32818                                  Exec_Get_Environ_Len:
 32819 00005C22 F2AE                    	repnz	scasb			; find that nul byte
 32820 00005C24 75C9                    	jnz	short BadEnv
 32821                                  
 32822 00005C26 49                      	dec	CX			; Dec CX for the next nul byte test
 32823 00005C27 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32824                                  
 32825 00005C29 AE                      	scasb				; is there another nul byte?
 32826 00005C2A 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32827                                  
 32828 00005C2C 57                      	push	DI
 32829                                  	;lea	bx,[DI+11h]
 32830 00005C2D 8D5D11                  	lea	BX,[DI+0Fh+2]
 32831                                  	;add	bx,[bp-22]
 32832 00005C30 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32833                                  					; remember argv[0] length
 32834                                  					; round up and remember argc
 32835 00005C33 B104                    	mov	CL,4
 32836 00005C35 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32837 00005C37 06                      	push	ES
 32838                                  	;invoke	$Alloc			; can we get the space?
 32839 00005C38 E84406                  	call	_$ALLOC
 32840 00005C3B 1F                      	pop	DS
 32841 00005C3C 59                      	pop	CX
 32842                                  
 32843                                  	;jnc	short Exec_Save_Environ
 32844                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32845                                  	; 17/12/2022
 32846 00005C3D 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32847                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32848                                  	;jnc	short Exec_Save_Environ
 32849                                  	;jmp	SHORT Exec_No_Mem
 32850                                  
 32851                                  Exec_Save_Environ:
 32852 00005C3F 8EC0                    	mov	ES,AX
 32853                                  	;mov	[bp-14],ax
 32854 00005C41 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32855 00005C44 31F6                    	xor	SI,SI
 32856 00005C46 89F7                    	mov	DI,SI
 32857 00005C48 F3A4                    	rep	movsb			; copy the environment
 32858 00005C4A B80100                  	mov	AX,1
 32859 00005C4D AB                      	stosw
 32860                                  	;lds	si,[bp-26]
 32861 00005C4E C576E6                  	lds	SI,ExecName
 32862                                  	;mov	cx,[bp-22]
 32863 00005C51 8B4EEA                  	mov	CX,ExecNameLen
 32864 00005C54 F3A4                    	rep	movsb
 32865                                  
 32866                                  Exec_Read_Header:
 32867                                  	; We read in the program header into the above data area and
 32868                                  	; determine where in this memory the image will be located.
 32869                                  
 32870                                  	;Context DS
 32871 00005C56 16                      	push	ss
 32872 00005C57 1F                      	pop	ds
 32873                                  	;mov	cx,26
 32874 00005C58 B91A00                  	mov	CX,exec_header_len	; header size
 32875 00005C5B BA[C80F]                	mov	DX,exec_signature
 32876 00005C5E 06                      	push	ES
 32877 00005C5F 1E                      	push	DS
 32878 00005C60 E88304                  	call	ExecRead
 32879 00005C63 1F                      	pop	DS
 32880 00005C64 07                      	pop	ES
 32881 00005C65 7250                    	jc	short Exec_Bad_File
 32882                                  
 32883 00005C67 09C0                    	or	AX,AX
 32884 00005C69 744C                    	jz	short Exec_Bad_File
 32885                                  	;cmp	ax,26
 32886 00005C6B 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32887 00005C6E 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32888                                  
 32889 00005C70 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32890 00005C76 7504                    	jnz	short Exec_Check_Sig
 32891                                  
 32892                                  	;mov	byte [bp-6],0FFh
 32893 00005C78 C646FAFF                	mov	Exec_Load_High,-1
 32894                                  
 32895                                  Exec_Check_Sig:
 32896 00005C7C A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32897                                  	;cmp	ax,5A4Dh ; 'MZ'
 32898 00005C7F 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32899 00005C82 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32900                                  
 32901                                  	;cmp	ax,4D5Ah ; 'ZM'
 32902 00005C84 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32903 00005C87 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32904                                  
 32905                                  Exec_Com_Filej:
 32906 00005C89 E9E901                  	jmp	Exec_Com_File
 32907                                  
 32908                                  	; We have the program header... determine memory requirements
 32909                                  
 32910                                  Exec_Save_Start:
 32911 00005C8C A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32912 00005C8F B105                    	mov	CL,5			; convert to paragraphs
 32913 00005C91 D3E0                    	shl	AX,CL
 32914 00005C93 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32915                                  	;mov	[bp-12],ax
 32916 00005C97 8946F4                  	mov	Exec_Res_Len_Para,AX
 32917                                  
 32918                                  		; Do we need to allocate memory?
 32919                                  		; Yes if function is not load-overlay
 32920                                  
 32921                                  	;test	byte [bp-5],2
 32922 00005C9A F646FB02                	test	Exec_Func,exec_func_overlay
 32923 00005C9E 7445                    	jz	short Exec_Allocate	; allocation of space
 32924                                  
 32925                                  		; get load address from block
 32926                                  
 32927                                  	;les	di,[bp-4]
 32928 00005CA0 C47EFC                  	les	DI,Exec_Blk
 32929 00005CA3 268B05                  	mov	ax,[es:di]
 32930                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32931                                  	;mov	[bp-20],ax
 32932 00005CA6 8946EC                  	mov	Exec_DMA,AX
 32933                                  
 32934                                  	; 17/12/2022
 32935                                  	;;mov	ax,[es:di+2]
 32936                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32937                                  	;;mov	[bp-10],ax
 32938                                  	;mov	Exec_Rel_Fac,AX
 32939                                  
 32940                                  	; 17/12/2022
 32941                                  	; 30/11/2022 (!most proper code!)
 32942                                  	;mov	dx,[es:di+2]
 32943 00005CA9 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32944                                  	;mov	[bp-10],dx
 32945 00005CAD 8956F6                  	mov	Exec_Rel_Fac,dx
 32946                                  	; ax = Exec_DMA
 32947 00005CB0 E9DE00                  	jmp	Exec_Find_Res
 32948                                  
 32949                                  ; 17/12/2022
 32950                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32951                                  ; 27/09/2023
 32952                                  %if 0
 32953                                  	; 02/06/2019 - Retro DOS v4.0
 32954                                  	;mov	ax,[bp-20]  ; *+*
 32955                                  	mov	AX,Exec_DMA ; *+*
 32956                                  	; 10/08/2018
 32957                                  	jmp	Exec_Find_Res		; M000
 32958                                  %endif
 32959                                  
 32960                                  Exec_No_Mem:
 32961                                  	;mov	al,8
 32962 00005CB3 B008                    	mov	AL,error_not_enough_memory
 32963 00005CB5 EB02                    	jmp	short Exec_Bomb
 32964                                  
 32965                                  Exec_Bad_File:
 32966                                  	;mov	al,0Bh
 32967 00005CB7 B00B                    	mov	AL,error_bad_format
 32968                                  
 32969                                  Exec_Bomb:
 32970                                  	;mov	bx,[bp-8]
 32971 00005CB9 8B5EF8                  	mov	BX,Exec_FH
 32972 00005CBC E84004                  	call	Exec_Dealloc
 32973                                  	;LeaveCrit CritMem
 32974 00005CBF E86BB6                  	call	LCritMEM
 32975                                  	;save	<AX,BP>
 32976 00005CC2 50                      	push	ax
 32977 00005CC3 55                      	push	bp
 32978                                  	;invoke	$CLOSE
 32979 00005CC4 E83D0A                  	call	_$CLOSE
 32980                                  	;restore <BP,AX>
 32981 00005CC7 5D                      	pop	bp
 32982 00005CC8 58                      	pop	ax
 32983 00005CC9 E9BBFE                  	jmp	Exec_Ret_Err
 32984                                  
 32985                                  Exec_Chk_Mem: 
 32986                                  	
 32987                                  	; 24/09/2023
 32988                                  	; ds = DOSDATA
 32989                                  ; 17/12/2022
 32990                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32991                                  ;%if 0
 32992                                  	; MSDOS 6.0    			; M063 - Start
 32993                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32994                                  	; 10/06/2019
 32995 00005CCC A0[0203]                	mov	al,[AllocMethod]
 32996                                  	;mov	bl,[ss:ALLOCMSAVE]
 32997 00005CCF 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32998                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32999 00005CD3 881E[0203]              	mov	[AllocMethod],bl
 33000                                  	
 33001 00005CD7 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33002 00005CDA 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33003                                  	;				; N: continue
 33004                                  	;
 33005 00005CDC A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33006 00005CDE 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33007                                  	; 02/06/2019
 33008                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33009 00005CE0 A1[8A00]                	mov	ax,[SAVE_AX]
 33010                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33011                                  					; M063 - End
 33012 00005CE3 EB2B                    	jmp	short Exec_Norm_Alloc1
 33013                                  ;%endif
 33014                                  
 33015                                  ; 17/12/2022
 33016                                  %if 0
 33017                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33018                                  	; MSDOS 6.0    			; M063 - Start
 33019                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33020                                  	mov	bl,[ss:ALLOCMSAVE]
 33021                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33022                                  
 33023                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33024                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33025                                  	;				; N: continue
 33026                                  	;
 33027                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33028                                  	jz	short Exec_No_Mem	; N: no memory 
 33029                                  
 33030                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33031                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33032                                  					; M063 - End
 33033                                  %endif
 33034                                  
 33035                                  Exec_Allocate:
 33036                                  	; 09/09/2018
 33037                                  
 33038                                  	; M005 - START
 33039                                  	; If there is no STACK segment for this exe file and if this
 33040                                  	; not an overlay and the resident size is less than 64K - 
 33041                                  	; 256 bytes we shall add 256 bytes to the programs 
 33042                                  	; resident memory requirement and set Exec_SP to this value.
 33043                                  	
 33044                                  	; 17/12/2022
 33045 00005CE5 29DB                    	sub	bx,bx ; 0	
 33046                                  
 33047                                  	; MSDOS 6.0
 33048                                  	;;mov	byte [bp-29],0
 33049                                  	;mov	Exec_NoStack,0
 33050                                  	; 17/12/2022
 33051 00005CE7 885EE3                  	mov	Exec_NoStack,bl ; 0
 33052 00005CEA 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33053                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33054 00005CEE 7511                    	jne	short ea1		; Y: continue normal processing
 33055 00005CF0 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33056                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33057 00005CF4 750B                    	jne	short ea1		; Y: continue normal processing
 33058                                  
 33059                                  	;inc	byte [bp-29]
 33060 00005CF6 FE46E3                  	inc	Exec_NoStack
 33061 00005CF9 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33062 00005CFC 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33063                                  
 33064 00005CFE 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33065                                  ea1:
 33066                                  	; M005 - END
 33067                                  
 33068                                  	; MSDOS 6.0			; M000 - start
 33069                                  	; 20/05/2019
 33070                                  	; (ds = ss = DOSDATA)
 33071 00005D01 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33072                                  					; Q: is the alloc strat high_first
 33073 00005D06 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33074                                  					; Y: set high_only bit
 33075 00005D08 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33076                                  					; M000 - end
 33077                                  Exec_Norm_Alloc:
 33078 00005D0D A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33079                                  Exec_Norm_Alloc1:	; 02/06/2019
 33080                                  					; M000: attempt at allocating memory
 33081                                  	; MSDOS 3.3
 33082                                  	;push	ax			; M000
 33083                                  
 33084 00005D10 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33085 00005D13 1E                      	push	DS
 33086                                  	;invoke	$Alloc			; should have carry set and BX has max
 33087 00005D14 E86805                  	call	_$ALLOC
 33088 00005D17 1F                      	pop	DS
 33089                                  
 33090                                  	; MSDOS 6.0
 33091 00005D18 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33092                                  	; MSDOS 3.3
 33093                                  	;pop	ax			; M000
 33094                                  
 33095 00005D1B 83C010                  	add	AX,10h			; room for header
 33096 00005D1E 83FB11                  	cmp	BX,11h			; enough room for a header
 33097                                  	; MSDOS 6.0
 33098 00005D21 72A9                    	jb	short Exec_Chk_Mem	; M000
 33099                                  	; MSDOS 3.3	
 33100                                  	;jb	short Exec_No_Mem
 33101                                  
 33102 00005D23 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33103                                  	; MSDOS 6.0
 33104 00005D25 77A5                    	ja	short Exec_Chk_Mem	; M000
 33105                                  	; MSDOS 3.3
 33106                                  	;ja	short Exec_No_Mem
 33107                                  
 33108                                  	;test	byte [bp-6],0FFh
 33109 00005D27 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33110 00005D2B 7518                    	jnz	short Exec_BX_Max	; use max
 33111                                  
 33112                                  	; 09/09/2018
 33113                                  
 33114 00005D2D 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33115                                  	; MSDOS 6.0
 33116 00005D31 7299                    	jc	short Exec_Chk_Mem		; M000
 33117                                  	; MSDOS 3.3
 33118                                  	;jc	short Exec_No_Mem
 33119                                  
 33120 00005D33 39D8                    	cmp	AX,BX			; enough space?
 33121                                  	; MSDOS 6.0
 33122 00005D35 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33123                                  	; MSDOS 3.3
 33124                                  	;ja	short Exec_No_Mem
 33125                                  
 33126 00005D37 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33127 00005D3B 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33128 00005D3F 7204                    	jc	short Exec_BX_Max
 33129                                  
 33130 00005D41 39D8                    	cmp	AX,BX
 33131 00005D43 7602                    	jbe	short Exec_Got_Block
 33132                                  
 33133                                  Exec_BX_Max:
 33134 00005D45 89D8                    	mov	AX,BX
 33135                                  
 33136                                  Exec_Got_Block:
 33137                                  	; 03/08/2018 - Retro DOS v3.0
 33138                                  
 33139 00005D47 1E                      	push	DS
 33140 00005D48 89C3                    	mov	BX,AX
 33141                                  	;mov	[bp-16],bx
 33142 00005D4A 895EF0                  	mov	Exec_Size,BX
 33143                                  	;invoke	$Alloc			; get the space
 33144 00005D4D E82F05                  	call	_$ALLOC
 33145 00005D50 1F                      	pop	DS
 33146                                  	; MSDOS 6.0
 33147                                  	;jc	short Exec_Chk_Mem	; M000
 33148                                  	; MSDOS 3.3
 33149                                  	;;jc	short Exec_No_Mem
 33150                                  	; 20/05/2019
 33151 00005D51 7303                    	jnc	short ea0
 33152 00005D53 E976FF                  	jmp	Exec_Chk_Mem
 33153                                  ea0:
 33154                                  	; MSDOS 6.0
 33155 00005D56 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33156 00005D5A 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33157                                  
 33158                                  ;M029; Begin changes
 33159                                  ; This code does special handling for programs with no stack segment. If so,
 33160                                  ;check if the current block is larger than 64K. If so, we do not modify
 33161                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33162                                  ;case Exec_SS is not changed.
 33163                                  
 33164                                  	; MSDOS 6.0
 33165                                  	;cmp	byte [bp-29],0
 33166 00005D5E 807EE300                	cmp	Exec_NoStack,0
 33167                                  	;je	@f
 33168 00005D62 7412                    	je	short ea2
 33169                                  
 33170 00005D64 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33171                                  	;jae	@f			; Y: Exec_SP = 0
 33172 00005D68 730C                    	jae	short ea2
 33173                                  
 33174                                  ;Make Exec_SP point at the top of the memory block
 33175                                  
 33176 00005D6A B104                    	mov	cl,4
 33177 00005D6C D3E3                    	shl	bx,cl			; get byte offset
 33178 00005D6E 81EB0001                	sub	bx,100h			; take care of PSP
 33179 00005D72 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33180                                  ea2:
 33181                                  ;@@:
 33182                                  ;M029; end changes
 33183                                  
 33184                                  	;mov	[bp-18],ax
 33185 00005D76 8946EE                  	mov	Exec_Load_Block,AX
 33186 00005D79 83C010                  	add	AX,10h
 33187                                  	;test	byte [bp-6],0FFh
 33188 00005D7C F646FAFF                	test	Exec_Load_High,-1
 33189 00005D80 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33190                                  
 33191                                  	;add	ax,[bp-16]
 33192 00005D82 0346F0                  	add	AX,Exec_Size		; go to end
 33193                                  	;sub	ax,[bp-12]
 33194 00005D85 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33195 00005D88 83E810                  	sub	AX,10h			; drop off pdb
 33196                                  
 33197                                  Exec_Use_AX:
 33198                                  	;mov	[bp-10],ax
 33199 00005D8B 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33200                                  	;mov	[bp-20],ax
 33201 00005D8E 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33202                                  
 33203                                  	; Determine the location in the file of the beginning of
 33204                                  	; the resident
 33205                                  
 33206                                  ; 17/12/2022
 33207                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33208                                  ;%if 0
 33209                                  
 33210                                  Exec_Find_Res:
 33211                                  	; MSDOS 6.0
 33212                                  	;;mov	dx,[bp-20]
 33213                                  	;mov	DX,Exec_DMA ; *+*
 33214                                  	;;mov	[bp-28],dx
 33215                                  	;mov	Exec_DMA_Save,DX
 33216                                  
 33217                                  	; 17/12/2022
 33218                                  	; AX = Exec_DMA
 33219                                  
 33220                                  	; 02/06/2019 - Retro DOS v4.0
 33221                                  	;mov	[bp-28],ax ; *+*
 33222 00005D91 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33223                                  
 33224                                  ;%endif
 33225                                  
 33226                                  ; 17/12/2022
 33227                                  %if 0
 33228                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33229                                  Exec_Find_Res:
 33230                                  	;mov	dx,[bp-20]
 33231                                  	mov	DX,Exec_DMA ; *+*
 33232                                  	;mov	[bp-28],dx
 33233                                  	mov	Exec_DMA_Save,DX
 33234                                  %endif
 33235                                  
 33236                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33237 00005D94 8B16[D00F]              	mov	DX,[exec_par_dir]
 33238 00005D98 52                      	push	DX
 33239 00005D99 B104                    	mov	CL,4
 33240 00005D9B D3E2                    	shl	DX,CL			; low word of location
 33241 00005D9D 58                      	pop	AX
 33242 00005D9E B10C                    	mov	CL,12
 33243 00005DA0 D3E8                    	shr	AX,CL			; high word of location
 33244 00005DA2 89C1                    	mov	CX,AX			; CX <- high
 33245                                  
 33246                                  		; Read in the resident image (first, seek to it)
 33247                                  	;mov	bx,[bp-8]
 33248 00005DA4 8B5EF8                  	mov	BX,Exec_FH
 33249 00005DA7 1E                      	push	DS
 33250 00005DA8 30C0                    	xor	AL,AL
 33251                                  	;invoke	$Lseek			; Seek to resident
 33252 00005DAA E8D30A                  	call	_$LSEEK
 33253 00005DAD 1F                      	pop	DS
 33254 00005DAE 7303                    	jnc	short Exec_Big_Read
 33255                                  
 33256 00005DB0 E906FF                  	jmp	Exec_Bomb
 33257                                  
 33258                                  Exec_Big_Read:				; Read resident into memory
 33259                                  	;mov	bx,[bp-12]
 33260 00005DB3 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33261 00005DB6 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33262 00005DBA 7203                    	jb	short Exec_Read_OK
 33263                                  
 33264 00005DBC BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33265                                  
 33266                                  Exec_Read_OK:
 33267                                  	;sub	[bp-12],bx
 33268 00005DBF 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33269 00005DC2 53                      	push	BX
 33270 00005DC3 B104                    	mov	CL,4
 33271 00005DC5 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33272 00005DC7 89D9                    	mov	CX,BX			; Count in correct register
 33273 00005DC9 1E                      	push	DS
 33274                                  	;mov	ds,[bp-20]
 33275 00005DCA 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33276                                  
 33277 00005DCD 31D2                    	xor	DX,DX
 33278 00005DCF 51                      	push	CX			; Save our count
 33279 00005DD0 E81303                  	call	ExecRead
 33280 00005DD3 59                      	pop	CX			; Get old count to verify
 33281 00005DD4 1F                      	pop	DS
 33282 00005DD5 7248                    	jc	short Exec_Bad_FileJ
 33283                                  
 33284 00005DD7 39C1                    	cmp	CX,AX			; Did we read enough?
 33285 00005DD9 5B                      	pop	BX			; Get paragraph count back
 33286 00005DDA 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33287                                  
 33288                                  	; The read did not match the request. If we are off by 512
 33289                                  	; bytes or more then the header lied and we have an error.
 33290                                  
 33291 00005DDC 29C1                    	sub	CX,AX
 33292 00005DDE 81F90002                	cmp	CX,512
 33293 00005DE2 733B                    	jae	short Exec_Bad_FileJ
 33294                                  
 33295                                  	; We've read in CX bytes... bump DTA location
 33296                                  
 33297                                  ExecCheckEnd:
 33298                                  	;add	[bp-20],bx
 33299 00005DE4 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33300                                  	;test	word [bp-12],0FFFFh
 33301 00005DE7 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33302 00005DEC 75C5                    	jnz	short Exec_Big_Read
 33303                                  
 33304                                  	; The image has now been read in. We must perform relocation
 33305                                  	; to the current location.
 33306                                  
 33307                                  exec_do_reloc:
 33308                                  	;mov	cx,[bp-10]
 33309 00005DEE 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33310 00005DF1 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33311 00005DF4 01C8                    	add	AX,CX			; and relocate him
 33312 00005DF6 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33313                                  
 33314 00005DF9 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33315 00005DFC A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33316                                  
 33317 00005DFF C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33318 00005E03 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33319 00005E06 8CC0                    	mov	AX,ES			; rms;NSS
 33320 00005E08 01C8                    	add	AX,CX			; relocated...
 33321 00005E0A A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33322                                  
 33323 00005E0D 31C9                    	xor	CX,CX
 33324 00005E0F 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33325                                  	;mov	bx,[bp-8]
 33326 00005E13 8B5EF8                  	mov	BX,Exec_FH
 33327 00005E16 1E                      	push	DS
 33328 00005E17 31C0                    	xor	AX,AX
 33329                                  	;invoke	$Lseek
 33330 00005E19 E8640A                  	call	_$LSEEK
 33331 00005E1C 1F                      	pop	DS
 33332 00005E1D 7303                    	jnc	short exec_get_entries
 33333                                  
 33334                                  Exec_Bad_FileJ:
 33335 00005E1F E995FE                  	jmp	Exec_Bad_File
 33336                                  
 33337                                  exec_get_entries:
 33338 00005E22 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33339                                  
 33340                                  exec_read_reloc:
 33341 00005E26 52                      	push	DX
 33342                                  	;mov	dx,OPENBUF
 33343 00005E27 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33344                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33345                                  	;mov	cx,396 ; MSDOS 6.0
 33346 00005E2A B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33347 00005E2D 1E                      	push	DS
 33348 00005E2E E8B502                  	call	ExecRead
 33349 00005E31 07                      	pop	ES
 33350 00005E32 5A                      	pop	DX
 33351 00005E33 72EA                    	jc	short Exec_Bad_FileJ
 33352                                  
 33353                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33354                                  	;mov	cx,99 ;  MSDOS 6.0
 33355 00005E35 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33356                                  					; Pointer to byte location in header
 33357                                  	;mov	di,OPENBUF
 33358 00005E38 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33359                                  	;mov	si,[bp-10]
 33360 00005E3B 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33361                                  
 33362                                  exec_reloc_one:
 33363 00005E3E 09D2                    	or	DX,DX			; Any more entries?
 33364 00005E40 7416                    	jz	short Exec_Set_PDBJ
 33365                                  
 33366                                  exec_get_addr:
 33367 00005E42 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33368 00005E45 8CD8                    	mov	AX,DS			; Relocate address of item
 33369                                  
 33370                                  	; MSDOS 6.0
 33371                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33372                                  	;add	ax,[bp-28]
 33373 00005E47 0346E4                  	add	AX,Exec_DMA_Save
 33374                                  
 33375 00005E4A 8ED8                    	mov	DS,AX
 33376 00005E4C 0137                    	add	[BX],SI
 33377 00005E4E 83C704                  	add	DI,4
 33378 00005E51 4A                      	dec	DX
 33379 00005E52 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33380                                  
 33381                                  	; We've exhausted a single buffer's worth. Read in the next
 33382                                  	; piece of the relocation table.
 33383                                  
 33384 00005E54 06                      	push	ES
 33385 00005E55 1F                      	pop	DS
 33386 00005E56 EBCE                    	jmp	short exec_read_reloc
 33387                                  
 33388                                  Exec_Set_PDBJ:
 33389                                  	; MSDOS 6.0
 33390                                  	
 33391                                  	; We now determine if this is a buggy exe packed file and if 
 33392                                  	; so we patch in the right code. Note that fixexepatch will
 33393                                  	; point to a ret if dos loads low. The load segment as 
 33394                                  	; determined above will be in exec_dma_save
 33395                                  	
 33396 00005E58 06                      	push	es
 33397 00005E59 50                      	push	ax			; M030
 33398 00005E5A 51                      	push	cx			; M030
 33399                                  	;mov	es,[bp-28]
 33400 00005E5B 8E46E4                  	mov	es,Exec_DMA_Save
 33401 00005E5E 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33402 00005E62 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33403 00005E67 36FF16[F811]            	call	word [ss:FixExePatch]
 33404                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33405                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33406                                  	;call	word [ss:Rational386PatchPtr]
 33407 00005E6C 59                      	pop	cx			; M030
 33408 00005E6D 58                      	pop	ax			; M030
 33409 00005E6E 07                      	pop	es
 33410                                  
 33411 00005E6F E9DE00                  	jmp	Exec_Set_PDB
 33412                                  
 33413                                  Exec_No_Memj:
 33414 00005E72 E93EFE                  	jmp	Exec_No_Mem
 33415                                  
 33416                                  	; we have a .COM file. First, determine if we are merely
 33417                                  	; loading an overlay.
 33418                                  
 33419                                  Exec_Com_File:
 33420                                  	;test	byte [bp-5],2
 33421 00005E75 F646FB02                	test	Exec_Func,exec_func_overlay
 33422 00005E79 742D                    	jz	short Exec_Alloc_Com_File
 33423                                  	;lds	si,[bp-4]
 33424 00005E7B C576FC                  	lds	SI,Exec_Blk		; get arg block
 33425 00005E7E AD                      	lodsw				; get load address
 33426                                  	;mov	[bp-20],ax
 33427 00005E7F 8946EC                  	mov	Exec_DMA,AX
 33428 00005E82 B8FFFF                  	mov	AX,0FFFFh
 33429 00005E85 EB63                    	jmp	short Exec_Read_Block	; read it all!
 33430                                  
 33431                                  Exec_Chk_Com_Mem:			
 33432                                  	; MSDOS 6.0	     		; M063 - Start
 33433 00005E87 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33434 00005E8B 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33435 00005E90 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33436 00005E95 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33437 00005E98 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33438                                  					; N: continue
 33439                                  	
 33440 00005E9A A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33441 00005E9C 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33442                                  	
 33443                                  	;mov	ax,[bp-18]
 33444 00005E9E 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33445 00005EA1 31DB                    	xor	bx,bx			; M047: bx => free arena
 33446 00005EA3 E87502                  	call	ChangeOwner		; M047: free this block
 33447                                  	
 33448 00005EA6 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33449                                  					; M063 - End
 33450                                  	
 33451                                  	; We must allocate the max possible size block (ick!)
 33452                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33453                                  	; size of block.
 33454                                  
 33455                                  Exec_Alloc_Com_File:
 33456                                  	; MSDOS 6.0			; M000 -start
 33457 00005EA8 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33458                                  					; Q: is the alloc strat high_first
 33459 00005EAE 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33460                                  					; Y: set high_only bit
 33461 00005EB0 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33462                                  					; M000 - end
 33463                                  Exec_Norm_Com_Alloc:			; M000
 33464                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33465 00005EB6 BBFFFF                  	mov	BX,0FFFFh
 33466                                  	;invoke	$Alloc			; largest piece available as error
 33467 00005EB9 E8C303                  	call	_$ALLOC
 33468 00005EBC 09DB                    	or	BX,BX
 33469                                  	; MSDOS 6.0
 33470 00005EBE 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33471                                  	; MSDOS 3.3
 33472                                  	;jz	short Exec_No_Memj
 33473                                  
 33474                                  	;mov	[bp-16],bx
 33475 00005EC0 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33476 00005EC3 53                      	push	BX
 33477                                  	;invoke	$ALLOC			; largest piece available
 33478 00005EC4 E8B803                  	call	_$ALLOC
 33479 00005EC7 5B                      	pop	BX			; get size of block...
 33480                                  	;mov	[bp-18],ax
 33481 00005EC8 8946EE                  	mov	Exec_Load_Block,AX
 33482                                  
 33483 00005ECB 83C010                  	add	AX,10h			; increment for header
 33484                                  	;mov	[bp-20],ax
 33485 00005ECE 8946EC                  	mov	Exec_DMA,AX
 33486                                  
 33487 00005ED1 31C0                    	xor	AX,AX			; presume 64K read...
 33488 00005ED3 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33489 00005ED7 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33490                                  
 33491 00005ED9 89D8                    	mov	AX,BX			; convert size to bytes
 33492 00005EDB B104                    	mov	CL,4
 33493 00005EDD D3E0                    	shl	AX,CL
 33494                                  	; 17/12/2022
 33495                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33496                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33497                                  	; MSDOS 5.0
 33498                                  	;cmp	AX,100h   
 33499                                  	; 02/06/2019 - Retro DOS v4.0
 33500                                  	; MSDOS 6.0
 33501                                          ; 17/12/2022
 33502 00005EDF 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33503 00005EE2 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33504                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33505                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33506                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33507                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33508                                  
 33509                                  					; M047: size of the block is < 64K
 33510 00005EE4 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33511                                  
 33512                                  Exec_Read_Com:
 33513                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33514 00005EE7 2D0001                  	sub	AX,100h 		; remember size of psp
 33515                                  Exec_Read_Block:
 33516 00005EEA 50                      	push	AX			; save number to read
 33517                                  	;mov	bx,[bp-8]
 33518 00005EEB 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33519 00005EEE 31C9                    	xor	CX,CX			; but seek to 0:0
 33520 00005EF0 89CA                    	mov	DX,CX
 33521 00005EF2 31C0                    	xor	AX,AX			; seek relative to beginning
 33522                                  	;invoke	$Lseek			; back to beginning of file
 33523 00005EF4 E88909                  	call	_$LSEEK
 33524 00005EF7 59                      	pop	CX			; number to read
 33525                                  	;mov	ds,[bp-20]
 33526 00005EF8 8E5EEC                  	mov	DS,Exec_DMA
 33527 00005EFB 31D2                    	xor	DX,DX
 33528 00005EFD 51                      	push	CX
 33529 00005EFE E8E501                  	call	ExecRead
 33530 00005F01 5E                      	pop	SI			; get number of bytes to read
 33531 00005F02 7303                    	jnc	short OkRead
 33532 00005F04 E9B0FD                  	jmp	Exec_Bad_File
 33533                                  
 33534                                  	; 10/09/2018
 33535                                  OkRead:
 33536 00005F07 39F0                    	cmp	AX,SI			; did we read them all?
 33537                                  	; MSDOS 6.0
 33538                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33539                                  	; MSDOS 3.3
 33540                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33541 00005F09 7503                    	jne	short OkRead2
 33542 00005F0B E979FF                  	jmp	Exec_Chk_Com_Mem
 33543                                  OkRead2:
 33544                                  	; MSDOS 6.0
 33545 00005F0E 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33546 00005F13 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33547                                  
 33548                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33549                                  	;test	byte [bp-5],2
 33550 00005F18 F646FB02                	test	Exec_Func,exec_func_overlay
 33551 00005F1C 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33552                                  
 33553                                  	;mov	ax,[bp-20]
 33554 00005F1E 8B46EC                  	mov	AX,Exec_DMA
 33555 00005F21 83E810                  	sub	AX,10h
 33556 00005F24 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33557 00005F28 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33558                                  
 33559                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33560                                  	; of 0 on stack.
 33561                                  
 33562 00005F2F 81C6FE00                	add	SI,0FEh 		; make room for stack
 33563                                  
 33564                                  	; MSDOS 6.0
 33565 00005F33 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33566 00005F36 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33567 00005F38 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33568                                  
 33569                                  Exec_St_Ok:
 33570                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33571 00005F3C 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33572 00005F41 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33573 00005F45 8ED8                    	mov	DS,AX
 33574 00005F47 C7040000                	mov	WORD [SI],0		; 0 for return
 33575                                  
 33576                                  	; MSDOS 6.0
 33577                                  
 33578                                  	; M068
 33579                                  	;
 33580                                  	; We now determine if this is a Copy Protected App. If so the 
 33581                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33582                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33583                                  
 33584 00005F4B 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33585                                  
 33586                                  Exec_Set_PDB:
 33587                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33588                                  	;mov	bx,[bp-8]
 33589 00005F50 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33590 00005F53 E8A901                  	call	Exec_Dealloc
 33591 00005F56 55                      	push	BP
 33592                                  	;invoke	$Close			; release the jfn
 33593 00005F57 E8AA07                  	call	_$CLOSE
 33594 00005F5A 5D                      	pop	BP
 33595 00005F5B E89301                  	call	Exec_Alloc
 33596                                  	;test	byte [bp-5],2
 33597 00005F5E F646FB02                	test	Exec_Func,exec_func_overlay
 33598 00005F62 743A                    	jz	short Exec_Build_Header
 33599                                  
 33600                                  	; MSDOS 6.0
 33601 00005F64 E8C201                  	call	Scan_Execname
 33602 00005F67 E8D601                  	call	Scan_Special_Entries
 33603                                  ;SR;
 33604                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33605                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33606                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33607                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33608                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33609                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33610                                  ;issues the version check, it gets the lie version until the next overlay
 33611                                  ;call is issued.
 33612                                  
 33613 00005F6A 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33614 00005F70 7426                    	je	short norm_ovl		;yes, no special handling
 33615 00005F72 56                      	push	si
 33616 00005F73 06                      	push	es
 33617 00005F74 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33618                                  	 
 33619                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33620 00005F79 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33621 00005F7D 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33622                                  	
 33623 00005F7F 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33624 00005F84 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33625 00005F89 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33626                                  		;;; PDB.VERSION
 33627 00005F8E EB06                    	jmp	short setver_done
 33628                                  sysinit_done:
 33629 00005F90 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33630                                  setver_done:
 33631 00005F96 07                      	pop	es
 33632 00005F97 5E                      	pop	si
 33633                                  norm_ovl:
 33634                                  	;leave
 33635 00005F98 89EC                    	mov	sp,bp		
 33636 00005F9A 5D                      	pop	bp
 33637                                  
 33638                                  	;transfer SYS_RET_OK		; overlay load -> done
 33639 00005F9B E99DA6                  	jmp	SYS_RET_OK
 33640                                  
 33641                                  Exec_Build_Header:
 33642                                  	;mov	dx,[bp-18]
 33643 00005F9E 8B56EE                  	mov	DX,Exec_Load_Block
 33644                                  					; assign the space to the process
 33645                                  	;mov	si,1
 33646 00005FA1 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33647                                  	;mov	ax,[bp-14]
 33648 00005FA4 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33649 00005FA7 09C0                    	or	AX,AX
 33650 00005FA9 7405                    	jz	short No_Owner		; no environment
 33651                                  
 33652 00005FAB 48                      	dec	AX			; point to header
 33653 00005FAC 8ED8                    	mov	DS,AX
 33654 00005FAE 8914                    	mov	[SI],DX 		; assign ownership
 33655                                  No_Owner:
 33656                                  	;mov	ax,[bp-18]
 33657                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33658                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33659                                  	; 17/12/2022
 33660 00005FB0 89D0                    	mov	ax,dx ; 06/06/2019
 33661                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33662                                  	
 33663 00005FB2 48                      	dec	AX
 33664 00005FB3 8ED8                    	mov	DS,AX			; point to header
 33665 00005FB5 8914                    	mov	[SI],DX 		; assign ownership
 33666                                  
 33667                                  	; MSDOS 6.0
 33668 00005FB7 1E                      	push	DS			;AN000;MS. make ES=DS
 33669 00005FB8 07                      	pop	ES			;AN000;MS.
 33670                                  	;mov	di,8
 33671 00005FB9 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33672 00005FBC E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33673                                  					;	   ds:si->name, cx=name length
 33674 00005FBF 51                      	push	CX			;AN007;;MS. save for fake version
 33675 00005FC0 56                      	push	SI			;AN007;;MS. save for fake version
 33676                                  
 33677                                  MoveName:				;AN000;
 33678 00005FC1 AC                      	lodsb				;AN000;;MS. get char
 33679 00005FC2 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33680 00005FC4 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33681                                  					;AN000;
 33682 00005FC6 AA                      	stosb				;AN000;;MS. move char
 33683                                  					; MSKK bug fix - limit length copied
 33684 00005FC7 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33685 00005FCA 7302                    	jae	short Mem_Done		; jump if so
 33686                                  	;
 33687 00005FCC E2F3                    	loop	MoveName		;AN000;;MS. continue
 33688                                  Mem_Done:				;AN000;
 33689 00005FCE 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33690                                  	;cmp	di,16
 33691 00005FD0 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33692 00005FD3 7301                    	jae	short Fill8		;AN000;MS.
 33693                                  	
 33694 00005FD5 AA                      	stosb				;AN000;MS.
 33695                                  	
 33696                                  Fill8:					;AN000;
 33697 00005FD6 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33698 00005FD7 59                      	pop	CX			;AN007;MS.
 33699                                  	
 33700 00005FD8 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33701                                  
 33702                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33703 00005FDB 52                      	push	DX
 33704                                  	;mov	si,[bp-16]
 33705 00005FDC 8B76F0                  	mov	SI,Exec_Size
 33706 00005FDF 01D6                    	add	SI,DX
 33707                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33708 00005FE1 E8B8B0                  	call	_$DUP_PDB
 33709 00005FE4 5A                      	pop	DX
 33710                                  
 33711                                  	;push	word [bp-14]
 33712 00005FE5 FF76F2                  	push	Exec_Environ
 33713                                  	;pop	WORD [ES:2Ch]
 33714 00005FE8 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33715                                  
 33716                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33717                                  					; version number in PSP
 33718 00005FED 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33719 00005FF2 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33720                                  		; PDB.VERSION
 33721                                  
 33722                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33723                                  	;lds	si,[bp-4]
 33724 00005FF7 C576FC                  	lds	SI,Exec_Blk		; get the block
 33725 00005FFA 1E                      	push	DS			; save its location
 33726 00005FFB 56                      	push	SI
 33727                                  	;lds	si,[si+6]
 33728 00005FFC C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33729                                  
 33730                                  	; DS points to user space 5C FCB
 33731                                  
 33732 00005FFF B90C00                  	mov	CX,12			; copy drive, name and ext
 33733 00006002 51                      	push	CX
 33734 00006003 BF5C00                  	mov	DI,5Ch
 33735 00006006 8A1C                    	mov	BL,[SI]
 33736 00006008 F3A4                    	rep	movsb
 33737                                  
 33738                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33739                                  
 33740 0000600A 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33741 0000600C AB                      	stosw
 33742 0000600D AB                      	stosw
 33743                                  
 33744                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33745                                  
 33746 0000600E 59                      	pop	CX
 33747 0000600F 5E                      	pop	SI			; get block
 33748 00006010 1F                      	pop	DS
 33749 00006011 1E                      	push	DS			; save (again)
 33750 00006012 56                      	push	SI
 33751                                  	;lds	si,[si+0Ah]
 33752 00006013 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33753                                  
 33754                                  	; DS points to user space 6C FCB
 33755                                  
 33756 00006016 8A3C                    	mov	BH,[SI] 		; do same as above
 33757 00006018 F3A4                    	rep	movsb
 33758 0000601A AB                      	stosw
 33759 0000601B AB                      	stosw
 33760 0000601C 5E                      	pop	SI			; get block (last time)
 33761 0000601D 1F                      	pop	DS
 33762                                  	;ld	si,[si+2]
 33763 0000601E C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33764                                  
 33765                                  	; DS points to user space 80 command line
 33766                                  
 33767 00006021 80C980                  	or	CL,80h
 33768 00006024 89CF                    	mov	DI,CX
 33769 00006026 F3A4                    	rep	movsb			; Wham!
 33770                                  
 33771                                  	; Process BX into default AX (validity of drive specs on args).
 33772                                  	; We no longer care about DS:SI.
 33773                                  
 33774 00006028 FEC9                    	dec	CL			; get 0FFh in CL
 33775 0000602A 88F8                    	mov	AL,BH
 33776 0000602C 30FF                    	xor	BH,BH
 33777                                  	;invoke	GetVisDrv
 33778 0000602E E8400A                  	call	GetVisDrv
 33779 00006031 7302                    	jnc	short Exec_BL
 33780                                  
 33781 00006033 88CF                    	mov	BH,CL
 33782                                  
 33783                                  Exec_BL:
 33784 00006035 88D8                    	mov	AL,BL
 33785 00006037 30DB                    	xor	BL,BL
 33786                                  	;invoke	GetVisDrv
 33787 00006039 E8350A                  	call	GetVisDrv
 33788 0000603C 7302                    	jnc	short Exec_Set_Return
 33789                                  
 33790 0000603E 88CB                    	mov	BL,CL
 33791                                  
 33792                                  Exec_Set_Return:
 33793                                  	;invoke	Get_User_Stack			; get his return address
 33794 00006040 E842A4                  	call	Get_User_Stack
 33795                                  
 33796                                  	;push	word [si+14h]
 33797 00006043 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33798                                  	;push	word [si+12h]
 33799 00006046 FF7412                  	push	word [SI+user_env.user_IP]
 33800                                  	;push	word [si+14h]
 33801 00006049 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33802                                  	;push	word [si+12h]
 33803 0000604C FF7412                  	push	word [SI+user_env.user_IP]
 33804                                  	;pop	word [ES:0Ah]
 33805 0000604F 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33806                                  	;pop	word [ES:0Ch]
 33807 00006054 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33808                                  
 33809 00006059 31C0                    	xor	AX,AX
 33810 0000605B 8ED8                    	mov	DS,AX
 33811                                  					; save them where we can get them
 33812                                  					; later when the child exits.
 33813                                  	;pop	word [88h]
 33814 0000605D 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33815                                  	;pop	word [90h]
 33816 00006061 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33817                                  
 33818 00006065 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33819 0000606C 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33820 00006071 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33821                                  
 33822                                  	;test	byte [bp-5],1
 33823 00006076 F646FB01                	test	Exec_Func,exec_func_no_execute
 33824 0000607A 7427                    	jz	short exec_go
 33825                                  
 33826 0000607C 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33827                                  	;les	di,[bp-4]
 33828 00006081 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33829                                  	;mov	[es:di+10h],ds
 33830 00006084 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33831                                  
 33832 00006088 4E                      	dec	SI			; 'push' default AX
 33833 00006089 4E                      	dec	SI
 33834 0000608A 891C                    	mov	[SI],BX 		; save default AX reg
 33835                                  	;mov	[es:di+0Eh], si
 33836 0000608C 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33837                                  
 33838 00006090 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33839                                  	;mov	[es:di+14h],ds
 33840 00006095 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33841                                  	;mov	[es:di+12h],ax
 33842 00006099 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33843                                  	
 33844                                  	;leave
 33845 0000609D 89EC                    	mov	sp,bp
 33846 0000609F 5D                      	pop	bp	
 33847                                  
 33848                                  	;transfer SYS_RET_OK
 33849 000060A0 E998A5                  	jmp	SYS_RET_OK
 33850                                  
 33851                                  exec_go:
 33852 000060A3 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33853 000060A8 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33854 000060AD 8CC0                    	mov	AX,ES
 33855                                  
 33856                                  	; MSDOS 6.0
 33857 000060AF 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33858 000060B5 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33859                                  
 33860 000060B7 1E                      	push	ds			; Y: control must go to low mem stub
 33861                                  		
 33862 000060B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33863                                  					;    control to user 
 33864 000060BD 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33865                                  					; M004: Set bit to signal int 21
 33866                                  					; ah = 25 & ah= 49. See dossym.inc 
 33867                                  					; under TAG M003 & M009 for 
 33868                                  					; explanation
 33869 000060C2 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33870                                  					; M068: going to be turned OFF.
 33871                                  	
 33872 000060C6 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33873 000060C8 1F                      	pop	ds
 33874                                  	
 33875 000060C9 50                      	push	ax			; ret far into the low mem stub
 33876 000060CA B8[FB10]                	mov	ax,disa20_xfer
 33877 000060CD 50                      	push	ax
 33878 000060CE 8CC0                    	mov	AX,ES			; restore ax
 33879 000060D0 CB                      	retf
 33880                                  
 33881                                  Xfer_To_User:
 33882                                  	; DS:SI points to entry point
 33883                                  	; AX:DI points to initial stack
 33884                                  	; DX has PDB pointer
 33885                                  	; BX has initial AX value
 33886                                  
 33887 000060D1 FA                      	cli
 33888                                  	; 15/08/2018
 33889 000060D2 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33890                                  
 33891 000060D8 8ED0                    	mov	SS,AX			; set up user's stack
 33892 000060DA 89FC                    	mov	SP,DI			; and SP
 33893 000060DC FB                      	sti
 33894                                  
 33895 000060DD 1E                      	push	DS			; fake long call to entry
 33896 000060DE 56                      	push	SI
 33897 000060DF 8EC2                    	mov	ES,DX			; set up proper seg registers
 33898 000060E1 8EDA                    	mov	DS,DX
 33899 000060E3 89D8                    	mov	AX,BX			; set up proper AX
 33900                                  
 33901 000060E5 CB                      	retf
 33902                                  
 33903                                  ; 04/08/2018 - Retro DOS v3.0
 33904                                  
 33905                                  ;----------------------------------------------------------------------------
 33906                                  ;
 33907                                  ;----------------------------------------------------------------------------
 33908                                  
 33909                                  ExecRead:
 33910 000060E6 E81600                  	CALL	Exec_Dealloc
 33911                                  	;mov	bx,[bp-8]
 33912 000060E9 8B5EF8                  	MOV	bx,Exec_FH
 33913                                  
 33914 000060EC 55                      	PUSH	BP
 33915 000060ED E82507                  	call	_$READ
 33916 000060F0 5D                      	POP	BP
 33917                                  
 33918                                  	;CALL	Exec_Alloc
 33919                                  	;retn
 33920                                  	; 18/12/2022
 33921                                  	;jmp	short Exec_Alloc
 33922                                  
 33923                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33924                                  
 33925                                  ;----------------------------------------------------------------------------
 33926                                  ;
 33927                                  ;----------------------------------------------------------------------------
 33928                                  
 33929                                  Exec_Alloc:
 33930 000060F1 53                      	push	BX
 33931                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33932                                  	; 20/05/2019 - Retro DOS v4.0
 33933                                  	; MSDOS 6.0
 33934 000060F2 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33935 000060F7 E81000                  	call	ChangeOwners
 33936 000060FA E830B2                  	call	LCritMEM
 33937 000060FD 5B                      	pop	BX
 33938 000060FE C3                      	retn
 33939                                  
 33940                                  ;----------------------------------------------------------------------------
 33941                                  ;
 33942                                  ;----------------------------------------------------------------------------
 33943                                  
 33944                                  Exec_Dealloc:
 33945 000060FF 53                      	push	BX
 33946                                  	;mov	bx,0
 33947 00006100 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33948 00006102 E80DB2                  	call	ECritMEM
 33949 00006105 E80200                  	call	ChangeOwners
 33950 00006108 5B                      	pop	BX
 33951 00006109 C3                      	retn
 33952                                  
 33953                                  ; 18/12/2022
 33954                                  %if 0
 33955                                  ;----------------------------------------------------------------------------
 33956                                  ;
 33957                                  ;----------------------------------------------------------------------------
 33958                                  
 33959                                  Exec_Alloc:
 33960                                  	push	BX
 33961                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33962                                  	; 20/05/2019 - Retro DOS v4.0
 33963                                  	; MSDOS 6.0
 33964                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33965                                  	call	ChangeOwners
 33966                                  	call	LCritMEM
 33967                                  	pop	BX
 33968                                  	retn
 33969                                  
 33970                                  %endif
 33971                                  
 33972                                  ;----------------------------------------------------------------------------
 33973                                  ;
 33974                                  ;----------------------------------------------------------------------------
 33975                                  
 33976                                  ChangeOwners:
 33977 0000610A 9C                      	pushf
 33978 0000610B 50                      	push	AX
 33979                                  	;mov	ax,[bp-14]
 33980 0000610C 8B46F2                  	mov	AX,Exec_Environ
 33981 0000610F E80900                  	call	ChangeOwner
 33982                                  	;mov	ax,[bp-18]
 33983 00006112 8B46EE                  	mov	AX,Exec_Load_Block
 33984 00006115 E80300                  	call	ChangeOwner
 33985 00006118 58                      	pop	AX
 33986 00006119 9D                      	popf
 33987                                  chgown_retn:
 33988 0000611A C3                      	retn
 33989                                  
 33990                                  ;----------------------------------------------------------------------------
 33991                                  ;
 33992                                  ;----------------------------------------------------------------------------
 33993                                  
 33994                                  ChangeOwner:
 33995 0000611B 09C0                    	or	AX,AX			; is area allocated?
 33996 0000611D 74FB                    	jz	short chgown_retn	; no, do nothing
 33997 0000611F 48                      	dec	AX
 33998 00006120 1E                      	push	DS
 33999 00006121 8ED8                    	mov	DS,AX
 34000 00006123 891E0100                	mov	[ARENA.OWNER],BX
 34001 00006127 1F                      	pop	DS
 34002 00006128 C3                      	retn
 34003                                  
 34004                                  ;----------------------------------------------------------------------------
 34005                                  ;
 34006                                  ;----------------------------------------------------------------------------
 34007                                  
 34008                                  ; 20/05/2019 - Retro DOS v4.0
 34009                                  
 34010                                  	; MSDOS 6.0
 34011                                  Scan_Execname:
 34012 00006129 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34013                                  Scan_Execname1:				; M028
 34014                                  Save_Begin:				;
 34015 0000612C 89F1                    	mov	CX,SI			; CX= starting addr
 34016                                  Scan0:					;
 34017 0000612E AC                      	lodsb				; get char
 34018                                  
 34019 0000612F 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34020 00006131 74F9                    	jz	short Save_Begin	; yes, save si
 34021 00006133 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34022 00006135 74F5                    	jz	short Save_Begin	; yes, save si
 34023 00006137 3C00                    	cmp	AL,0			; is end of name
 34024 00006139 75F3                    	jnz	short Scan0		; no, continue scanning
 34025 0000613B 29CE                    	sub	SI,CX			; get name's length
 34026 0000613D 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34027                                  
 34028 0000613F C3                      	retn
 34029                                  
 34030                                  ;----------------------------------------------------------------------------
 34031                                  ;
 34032                                  ;----------------------------------------------------------------------------
 34033                                  
 34034                                  ; 20/05/2019 - Retro DOS v4.0
 34035                                  
 34036                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34037                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34038                                  
 34039                                  	; MSDOS 6.0
 34040                                  
 34041                                  Scan_Special_Entries:
 34042                                  
 34043 00006140 49                      	dec	CX			; cx= name length
 34044                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34045                                  					;reset to current version
 34046                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34047                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34048                                  	;mov	word [ss:SPECIAL_VERSION],5
 34049                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34050                                  
 34051                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34052 00006141 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34053                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34054                                  				; 24/09/2023
 34055                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34056                                  ;***	call	Reset_Version
 34057                                  
 34058                                  ;M060	push	SS
 34059                                  ;M060	pop	ES
 34060                                  
 34061 00006148 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34062 0000614D 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34063 0000614F 09F8                    	or	AX,DI			;M060; be sure the table exists
 34064 00006151 7427                    	jz	short End_List		;M060; If ZR then no table
 34065                                  
 34066                                  GetEntries:
 34067 00006153 268A05                  	mov	AL,[ES:DI]		; end of list
 34068 00006156 08C0                    	or	AL,AL
 34069 00006158 7420                    	jz	short End_List		; yes
 34070                                  
 34071 0000615A 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34072 0000615F 38C8                    	cmp	AL,CL			; same length ?
 34073 00006161 751B                    	jnz	short SkipOne 		; no
 34074                                  
 34075 00006163 47                      	inc	DI			; es:di -> special name
 34076 00006164 51                      	push	CX			; save length and name addr
 34077 00006165 56                      	push	SI
 34078                                  
 34079                                  ; M050 - BEGIN
 34080                                  
 34081 00006166 50                      	push	ax			; save len
 34082                                  sse_next_char:
 34083 00006167 AC                      	lodsb
 34084 00006168 E8D1EE                  	call	UCase
 34085 0000616B AE                      	scasb
 34086 0000616C 750D                    	jne	short Not_Matched
 34087 0000616E E2F7                    	loop	sse_next_char
 34088                                  	
 34089                                  ;	repz	cmpsb			; same name ?
 34090                                  ;	jnz	short Not_Matched	; no
 34091                                  
 34092 00006170 58                      	pop	ax			; take len off the stack
 34093                                  
 34094                                  ; M050 - END
 34095                                  
 34096 00006171 268B05                  	mov	AX,[ES:DI]		; get special version
 34097 00006174 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34098                                  
 34099                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34100                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34101                                  
 34102 00006178 5E                      	pop	SI
 34103 00006179 59                      	pop	CX
 34104                                  	; 18/12/2022
 34105                                  	;jmp	SHORT End_List
 34106                                  
 34107                                  	; 18/12/2022
 34108                                  End_List:
 34109 0000617A C3                      	retn
 34110                                  
 34111                                  Not_Matched:
 34112 0000617B 58                      	pop	ax			; get len from stack ; M050
 34113 0000617C 5E                      	pop	SI			; restore si,cx
 34114 0000617D 59                      	pop	CX
 34115                                  
 34116                                  SkipOne:
 34117 0000617E 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34118 00006183 30E4                    	xor	AH,AH			; position to next entry
 34119 00006185 01C7                    	add	DI,AX
 34120                                  
 34121 00006187 83C703                  	add	DI,3			; DI -> next entry length
 34122                                  ;***	add	DI,4			; DI -> next entry length
 34123                                  
 34124 0000618A EBC7                    	jmp	short GetEntries
 34125                                  
 34126                                  	; 18/12/2022
 34127                                  ;End_List:
 34128                                  	;retn
 34129                                  
 34130                                  ; 04/08/2018 - Retro DOS v3.0
 34131                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34132                                  
 34133                                  ;----------------------------------------------------------------------------
 34134                                  ;SUBTTL Terminate and stay resident handler
 34135                                  ;
 34136                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34137                                  ;	    truncate the current block.
 34138                                  ;
 34139                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34140                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34141                                  ;	    and restoring the vectors.
 34142                                  ;
 34143                                  ;----------------------------------------------------------------------------
 34144                                  
 34145                                  	; 20/05/2019 - Retro DOS v4.0
 34146                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34147                                  
 34148                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34149                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34150                                  
 34151                                  _$KEEP_PROCESS:
 34152 0000618C 50                      	push	AX			; keep exit code around
 34153                                  	;mov	byte [SS:EXIT_TYPE],3
 34154 0000618D 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34155 00006193 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34156 00006198 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34157 0000619B 7303                    	jae	short Keep_Shrink	; info
 34158                                  
 34159 0000619D BA0600                  	mov	DX,6h
 34160                                  
 34161                                  Keep_Shrink:
 34162 000061A0 89D3                    	mov	BX,DX
 34163 000061A2 53                      	push	BX
 34164 000061A3 06                      	push	ES
 34165 000061A4 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34166 000061A7 1F                      	pop	DS
 34167 000061A8 5B                      	pop	BX
 34168 000061A9 7207                    	jc	short Keep_Done		; failed on modification
 34169                                  
 34170 000061AB 8CD8                    	mov	AX,DS
 34171 000061AD 01D8                    	add	AX,BX
 34172                                  	;mov	[2],ax
 34173 000061AF A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34174                                  
 34175                                  Keep_Done:
 34176 000061B2 58                      	pop	AX
 34177 000061B3 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34178                                  
 34179                                  ;----------------------------------------------------------------------------
 34180                                  ;
 34181                                  ;----------------------------------------------------------------------------
 34182                                  
 34183                                  STAY_RESIDENT:
 34184                                  	;mov	ax,3100h
 34185 000061B5 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34186 000061B8 83C20F                  	add	DX,15
 34187 000061BB D1DA                    	rcr	DX,1
 34188 000061BD B103                    	mov	CL,3
 34189 000061BF D3EA                    	shr	DX,CL
 34190                                  
 34191 000061C1 E943A1                  	jmp	COMMAND
 34192                                  
 34193                                  ;----------------------------------------------------------------------------
 34194                                  ;SUBTTL $EXIT - return to parent process
 34195                                  ;   Assembler usage:
 34196                                  ;	    MOV     AL, code
 34197                                  ;	    MOV     AH, Exit
 34198                                  ;	    INT     int_command
 34199                                  ;   Error return:
 34200                                  ;	    None.
 34201                                  ;
 34202                                  ;----------------------------------------------------------------------------
 34203                                  
 34204                                  	; 20/05/2019 - Retro DOS v4.0
 34205                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34206                                  
 34207                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34208                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34209                                  _$EXIT:
 34210                                  	; 04/08/2018 - Retro DOS v3.0
 34211                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34212 000061C4 30E4                    	xor	AH,AH
 34213 000061C6 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34214 000061CB 08E4                    	or	AH,AH
 34215                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34216 000061CD 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34217 000061D3 7406                    	jz	short exit_inner
 34218                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34219 000061D5 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34220                                  
 34221                                  	;entry	Exit_inner
 34222                                  exit_inner:
 34223 000061DB E8A7A2                  	call	Get_User_Stack		;PBUGBUG
 34224                                  
 34225 000061DE 36FF36[3003]            	push	word [ss:CurrentPDB]
 34226                                  	;pop	word [si+14h]
 34227 000061E3 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34228 000061E6 EB08                    	jmp	short abort_inner
 34229                                  
 34230                                  ;BREAK <$ABORT -- Terminate a process>
 34231                                  ;----------------------------------------------------------------------------
 34232                                  ; Inputs:
 34233                                  ;	user_CS:00 must point to valid program header block
 34234                                  ; Function:
 34235                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34236                                  ;	to the terminate address
 34237                                  ; Returns:
 34238                                  ;	TO THE TERMINATE ADDRESS
 34239                                  ;----------------------------------------------------------------------------
 34240                                  
 34241                                  _$ABORT:
 34242 000061E8 30C0                    	xor	AL,AL
 34243                                  	;mov	byte [SS:EXIT_TYPE],0
 34244                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34245 000061EA 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34246                                  
 34247                                  	; abort_inner must have AL set as the exit code! The exit type
 34248                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34249                                  	; to be correct as the one that is terminating.
 34250                                  
 34251                                  abort_inner:
 34252 000061F0 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34253 000061F5 36A3[3403]              	mov	[SS:exit_code],AX
 34254 000061F9 E889A2                  	call	Get_User_Stack
 34255                                  
 34256                                  	;mov	ds,[si+14h]
 34257 000061FC 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34258 000061FF 31C0                    	xor	AX,AX
 34259 00006201 8EC0                    	mov	ES,AX
 34260                                  	;mov	si,10
 34261 00006203 BE0A00                  	mov	SI,SAVEXIT
 34262                                  	;mov	di,88h
 34263 00006206 BF8800                  	mov	DI,addr_int_terminate
 34264 00006209 A5                      	movsw
 34265 0000620A A5                      	movsw
 34266 0000620B A5                      	movsw
 34267 0000620C A5                      	movsw
 34268 0000620D A5                      	movsw
 34269 0000620E A5                      	movsw
 34270 0000620F E944F2                  	jmp	reset_environment
 34271                                  
 34272                                  ;----------------------------------------------------------------------------
 34273                                  ;
 34274                                  ; fixexepatch will point to this is DOS loads low. 
 34275                                  ;
 34276                                  ;----------------------------------------------------------------------------
 34277                                  ; MSDOS 6.0
 34278                                  
 34279                                  ; 29/04/2019 - Retro DOS v4.0
 34280                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34281                                  
 34282                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34283                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34284                                  
 34285                                  RetExePatch: ; proc near
 34286                                  	
 34287 00006212 C3                      	retn
 34288                                  
 34289                                  ;============================================================================
 34290                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34291                                  ;============================================================================
 34292                                  ; 04/08/2018 - Retro DOS v3.0
 34293                                  ; 14/05/2019 - Retro DOS v4.0
 34294                                  
 34295                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34296                                  
 34297                                  ;**
 34298                                  ;	Microsoft Confidential
 34299                                  ;	Copyright (C) Microsoft Corporation 1991
 34300                                  ;	All Rights Reserved.
 34301                                  ;
 34302                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34303                                  ;	I/O specs are defined in DISPATCH.
 34304                                  ;
 34305                                  ;	$ALLOC
 34306                                  ;	$SETBLOCK
 34307                                  ;	$DEALLOC
 34308                                  ;	$AllocOper
 34309                                  ;	arena_free_process
 34310                                  ;	arena_next
 34311                                  ;	check_signature
 34312                                  ;	Coalesce
 34313                                  ;
 34314                                  ;	Modification history:
 34315                                  ;
 34316                                  ;	    Created: ARR 30 March 1983
 34317                                  ;
 34318                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34319                                  ;		      M003 - added support for link/unlink UMBs from
 34320                                  ;			     DOS arena chain. 7/18/90
 34321                                  ;		      M009 - Added error returns invalid function and 
 34322                                  ;			     arena trashed in set link state call.
 34323                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34324                                  ;			     if UMB_HEAD is initialized.
 34325                                  ;
 34326                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34327                                  ;			     support. Please see under M009 in 
 34328                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34329                                  ;
 34330                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34331                                  ;			     sure that umb_head arena is valid and also make
 34332                                  ;			     sure that the previous arena is pointing to 
 34333                                  ;			     umb_head.
 34334                                  ;
 34335                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34336                                  ;			     set allloc strategy.
 34337                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34338                                  ;			     bx in AllocSetStrat.
 34339                                  ;
 34340                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34341                                  ;			     a bit to indicate to dos dispatcher to turn
 34342                                  ;			     a20 off before iret. See M016.
 34343                                  ;
 34344                                  
 34345                                  ;	BREAK	<memory allocation utility routines>
 34346                                  
 34347                                  
 34348                                  ; 15/04/2018 - Retro DOS v2.0
 34349                                  ;----------------------------------------------------------------------------
 34350                                  ; xenix memory calls for MSDOS
 34351                                  ;
 34352                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34353                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34354                                  ;
 34355                                  ;INCLUDE DOSSEG.ASM
 34356                                  
 34357                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34358                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34359                                  
 34360                                  ;.xlist
 34361                                  ;.xcref
 34362                                  ;INCLUDE DOSSYM.ASM
 34363                                  ;INCLUDE DEVSYM.ASM
 34364                                  ;.cref
 34365                                  ;.list
 34366                                  
 34367                                  ;TITLE ALLOC.ASM - memory arena manager
 34368                                  ;NAME Alloc
 34369                                  
 34370                                  ;SUBTTL memory allocation utility routines
 34371                                  ;PAGE
 34372                                  ;
 34373                                  ; arena data
 34374                                  ;
 34375                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34376                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34377                                  ;       i_need  FirstArena,WORD         ; first free block found
 34378                                  ;       i_need  BestArena,WORD          ; best free block found
 34379                                  ;       i_need  LastArena,WORD          ; last free block found
 34380                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34381                                  
 34382                                  ;**	Arena_Free_Process
 34383                                  ;----------------------------------------------------------------------------
 34384                                  ;	Free all arena blocks allocated to a prOcess
 34385                                  ;
 34386                                  ;	ENTRY	(bx) = PID of process
 34387                                  ;	EXIT	none
 34388                                  ;	USES	????? BUGBUG
 34389                                  ;----------------------------------------------------------------------------
 34390                                  
 34391                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34392                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34393                                  
 34394                                  arena_free_process:
 34395                                  	; 14/05/2019 - Retro DOS v4.0
 34396                                  	; 04/08/2018 - Retro DOS v3.0
 34397 00006213 36A1[2400]                      MOV	AX,[SS:arena_head]
 34398                                  arena_free_process_start:
 34399 00006217 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34400                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34401 0000621A E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34402                                  
 34403                                  arena_free_process_loop:
 34404                                          ;retc
 34405 0000621D 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34406 0000621F 06                      	PUSH    ES
 34407 00006220 1F                              POP     DS
 34408                                  	;cmp	[1],bx 
 34409 00006221 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34410 00006225 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34411                                  	;mov	[1],di
 34412 00006227 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34413                                  
 34414                                  arena_free_next:
 34415                                  	;cmp	byte [di],5Ah ;'Z'
 34416 0000622B 803D5A                          CMP     BYTE [DI],arena_signature_end
 34417                                                                          ; end of road, Jack?
 34418                                          ;retz				; never come back no more
 34419                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34420                                  	; 14/05/2019
 34421                                  	; MSDOS 6.0
 34422 0000622E 7405                    	jz	short arena_chk_umbs
 34423                                          
 34424 00006230 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34425 00006233 EBE8                            JMP     SHORT arena_free_process_loop
 34426                                  
 34427                                  	; MSDOS 6.0
 34428                                  arena_chk_umbs:				; M010 - Start
 34429                                  	; 20/05/2019
 34430 00006235 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34431 00006239 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34432 0000623C 741E                    	je	short ret_label		; N: we're done
 34433                                  	
 34434 0000623E 8CDF                    	mov	di,ds			; di = last arena
 34435 00006240 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34436 00006242 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34437 00006244 EBD1                    	jmp	short arena_free_process_start
 34438                                  					; M010 - End
 34439                                  ;AFP_RETN:
 34440                                  ;	RETN
 34441                                  
 34442                                  ;	BREAK	<Arena Helper Routines>
 34443                                  
 34444                                  ;**	Arena_Next - Find Next item in Arena
 34445                                  ;----------------------------------------------------------------------------
 34446                                  ;	ENTRY	DS - pointer to block head
 34447                                  ;		(di) = 0
 34448                                  ;	EXIT	AX,ES - pointers to next head
 34449                                  ;		'C' set iff arena damaged
 34450                                  ;----------------------------------------------------------------------------
 34451                                  
 34452                                  arena_next:
 34453 00006246 8CD8                            MOV     AX,DS                   ; AX <- current block
 34454 00006248 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34455 0000624C 40                              INC     AX                      ; remember that header!
 34456                                  
 34457                                  ;       fall into check_signature and return
 34458                                  ;
 34459                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34460                                  ;       RETN
 34461                                  
 34462                                  ;**	Check_Signature - Check Memory Block Signature
 34463                                  ;----------------------------------------------------------------------------
 34464                                  ;	ENTRY	(AX) = address of block header
 34465                                  ;		(di) = 0
 34466                                  ;	EXIT	 ES = AX
 34467                                  ;		'C' clear if signature good
 34468                                  ;		'C' set if signature bad
 34469                                  ;	USES	ES, Flags
 34470                                  ;----------------------------------------------------------------------------
 34471                                  
 34472                                  check_signature:        
 34473                                  
 34474 0000624D 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34475                                  	;cmp	byte [es:di],4Dh ; 'M'
 34476 0000624F 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34477                                                                          ; IF next signature = not_end THEN
 34478 00006253 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34479                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34480 00006255 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34481                                                                          ; IF next signature = end then
 34482 00006259 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34483 0000625B F9                              STC                             ; set error
 34484                                  ret_label: ; MSDOS 6.0
 34485                                  AFP_RETN:
 34486                                   	; Retro DOS v2.0 - 05/03/2018
 34487                                  check_signature_ok:
 34488                                  COALESCE_RETN:
 34489 0000625C C3                      	RETN
 34490                                  
 34491                                  ;**	Coalesce - Combine free blocks ahead with current block
 34492                                  ;----------------------------------------------------------------------------
 34493                                  ;	Coalesce adds the block following the argument to the argument block,
 34494                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34495                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34496                                  ;	preceeding allocated block.
 34497                                  ;
 34498                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34499                                  ;		(di) = 0
 34500                                  ;	EXIT	'C' clear if OK
 34501                                  ;		  (ds) unchanged, this block updated
 34502                                  ;		  (ax) = address of next block, IFF not at end
 34503                                  ;		'C' set if arena trashed
 34504                                  ;	USES	(cx)
 34505                                  ;----------------------------------------------------------------------------
 34506                                          
 34507                                  Coalesce:
 34508                                  	;cmp	byte [di],5Ah ; 'Z'
 34509 0000625D 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34510                                                                          ; IF current signature = END THEN
 34511                                          ;retz				;   GOTO ok
 34512 00006260 74FA                            jz	short COALESCE_RETN
 34513 00006262 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34514                                          ;retc				; IF no error THEN GOTO check
 34515 00006265 72F5                    	jc	short COALESCE_RETN
 34516                                  
 34517                                  coalesce_check:
 34518                                  	;cmp	[es:1],di
 34519 00006267 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34520                                          ;retnz				; IF next block isnt free THEN return
 34521 0000626C 75EE                            JNZ	SHORT COALESCE_RETN
 34522                                  	;mov	cx,[ES:3]
 34523 0000626E 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34524 00006273 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34525                                          ;ADD	[3],CX
 34526 00006274 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34527 00006278 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34528 0000627B 880D                            MOV     [DI],CL
 34529 0000627D EBDE                            JMP     SHORT Coalesce		; try again
 34530                                  
 34531                                  ; 04/08/2018 - Retro DOS v3.0
 34532                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34533                                  
 34534                                  ;	BREAK  <$Alloc - allocate space in memory>
 34535                                  
 34536                                  ; MSDOS 6.0
 34537                                  ;----------------------------------------------------------------------------
 34538                                  ;**	$Alloc - Allocate Memory Space
 34539                                  ;
 34540                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34541                                  ;	Alloc returns a pointer to a free block of memory that
 34542                                  ;	has the requested size in paragraphs.
 34543                                  ;
 34544                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34545                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34546                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34547                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34548                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34549                                  ;
 34550                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34551                                  ;	starts from arena_head.
 34552                                  ;
 34553                                  ;	Assembler usage:
 34554                                  ;           MOV     BX,size
 34555                                  ;           MOV     AH,Alloc
 34556                                  ;           INT     21h
 34557                                  ;
 34558                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34559                                  ;	so that we start searching the arena at it's first non-trivial free
 34560                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34561                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34562                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34563                                  ;	verify that this is true; if so, this can stay as is
 34564                                  ;
 34565                                  ;	ENTRY	(bx) = requested size, in bytes
 34566                                  ;		(DS) = (ES) = DOSGROUP
 34567                                  ;	EXIT	'C' clear if memory allocated
 34568                                  ;		  (ax:0) = address of requested memory
 34569                                  ;		'C' set if request failed
 34570                                  ;		  (AX) = error_not_enough_memory
 34571                                  ;		    (bx) = max size we could have allocated
 34572                                  ;		  (ax) = error_arena_trashed
 34573                                  ;	USES	All
 34574                                  ;----------------------------------------------------------------------------
 34575                                  
 34576                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34577                                  ;----------------------------------------------------------------------------
 34578                                  ;SUBTTL $Alloc - allocate space in memory
 34579                                  ;
 34580                                  ;   Assembler usage:
 34581                                  ;           MOV     BX,size
 34582                                  ;           MOV     AH,Alloc
 34583                                  ;           INT     21h
 34584                                  ;         AX:0 is pointer to allocated memory
 34585                                  ;         BX is max size if not enough memory
 34586                                  ;
 34587                                  ;   Description:
 34588                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34589                                  ;       memory that has the requested  size  in  paragraphs.
 34590                                  ;
 34591                                  ;   Error return:
 34592                                  ;           AX = error_not_enough_memory
 34593                                  ;              = error_arena_trashed
 34594                                  ;----------------------------------------------------------------------------
 34595                                  
 34596                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34597                                  
 34598                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34599                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34600                                  
 34601                                  _$ALLOC:
 34602                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34603                                  	; 14/05/2019 - Retro DOS v4.0
 34604                                  	; 04/08/2018 - Retro DOS v3.0
 34605                                  	;EnterCrit critMem
 34606 0000627F E890B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34607                                  
 34608                                  ; 17/12/2022
 34609                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34610                                  ;%if 0
 34611                                  	; 14/05/2019
 34612 00006282 16                      	push	ss
 34613 00006283 1F                      	pop	ds
 34614                                  
 34615                                  	; MSDOS 6.0
 34616                                  	;mov	ax,[ss:arena_head]
 34617                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34618                                  
 34619 00006284 A1[2400]                	mov	ax,[arena_head]
 34620 00006287 A3[8E00]                	mov	[START_ARENA],ax			
 34621                                  	
 34622                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34623 0000628A F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34624                                  					; Q: should we start scanning from 
 34625                                  					;    UMB's
 34626 0000628F 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34627                                  		
 34628                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34629                                  	;cmp	word [UMB_HEAD],-1
 34630                                  	;je	short norm_alloc	; N: scan from arena_head
 34631                                  
 34632                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34633 00006291 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34634 00006296 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34635                                  	
 34636                                  	;mov	ax,[ss:UMB_HEAD]
 34637                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34638 00006298 A1[8C00]                	mov	ax,[UMB_HEAD]
 34639 0000629B A3[8E00]                	mov	[START_ARENA],ax
 34640                                  					; M000 - end
 34641                                  norm_alloc:
 34642 0000629E 31C0                            XOR     AX,AX
 34643 000062A0 89C7                            MOV     DI,AX
 34644                                  	; 15/03/2018
 34645                                          ;MOV	[SS:FirstArena],AX	; init the options
 34646                                          ;MOV	[SS:BestArena],AX
 34647                                          ;MOV	[SS:LastArena],AX
 34648                                  	; 14/05/2019
 34649 000062A2 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34650 000062A5 A3[4203]                        MOV	[BestArena],AX
 34651 000062A8 A3[4403]                        MOV	[LastArena],AX
 34652 000062AB 50                              PUSH    AX                      ; alloc_max <- 0
 34653                                  	; 04/08/2018
 34654                                  start_scan:
 34655                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34656                                  	;MOV	AX,[arena_head]
 34657                                  
 34658                                  	; 14/05/2019	
 34659                                  	; MSDOS 6.0
 34660                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34661 000062AC A1[8E00]                	mov	ax,[START_ARENA]
 34662                                  
 34663                                  	; 27/09/2023 (BugFix) (*) 
 34664                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34665                                  start_scan_x:
 34666                                  
 34667 000062AF E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34668 000062B2 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34669                                  
 34670                                  ;%endif
 34671                                  
 34672                                  ; 17/12/2022
 34673                                  %if 0
 34674                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34675                                  
 34676                                  	; MSDOS 6.0
 34677                                  	mov	ax,[ss:arena_head]
 34678                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34679                                  
 34680                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34681                                  					; Q: should we start scanning from 
 34682                                  					;    UMB's
 34683                                  	jz	short norm_alloc	; N: scan from arena_head
 34684                                  		
 34685                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34686                                  	;je	short norm_alloc	; N: scan from arena_head
 34687                                  
 34688                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34689                                  	jz	short norm_alloc	; N: scan from arena_head
 34690                                  	
 34691                                  	mov	ax,[ss:UMB_HEAD]
 34692                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34693                                  					; M000 - end
 34694                                  norm_alloc:
 34695                                          XOR     AX,AX
 34696                                          MOV     DI,AX
 34697                                  	; 15/03/2018
 34698                                  	MOV	[SS:FirstArena],AX	; init the options
 34699                                  	MOV	[SS:BestArena],AX
 34700                                  	MOV	[SS:LastArena],AX
 34701                                          PUSH    AX                      ; alloc_max <- 0
 34702                                  	; 04/08/2018
 34703                                  start_scan:
 34704                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34705                                  	; 14/05/2019	
 34706                                  	; MSDOS 6.0
 34707                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34708                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34709                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34710                                  %endif
 34711                                  
 34712                                  alloc_scan:
 34713 000062B4 06                              PUSH    ES
 34714 000062B5 1F                              POP     DS                      ; DS <- ES
 34715 000062B6 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34716 000062BA 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34717                                  
 34718                                  alloc_next:
 34719                                  	; MSDOS 6.0			; M000 - start 
 34720 000062BC 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34721 000062C2 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34722                                  	
 34723 000062C4 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34724                                  					; Q: is alloc strategy high_first
 34725 000062CA 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34726 000062CC 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34727 000062D0 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34728                                  					;    arena_head
 34729 000062D5 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34730 000062D7 8CD8                    	mov	ax,ds			; ax = current block
 34731 000062D9 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34732 000062DE EB03                    	jmp	short alloc_chk_end
 34733                                  
 34734                                  norm_strat:
 34735                                  	;cmp	byte [di],5Ah ; 'Z'
 34736 000062E0 803D5A                          CMP     BYTE [DI],arena_signature_end
 34737                                                                          ; IF current block is last THEN
 34738                                  alloc_chk_end:
 34739 000062E3 740E                            JZ      SHORT alloc_end		;   GOTO end
 34740 000062E5 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34741 000062E8 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34742                                  
 34743                                  alloc_err:
 34744 000062EA 58                              POP     AX
 34745                                  
 34746                                  alloc_trashed:
 34747                                  	;LeaveCrit critMem
 34748 000062EB E83FB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34749                                          ;error	error_arena_trashed
 34750                                  	;mov	al,7
 34751 000062EE B007                    	MOV	AL,error_arena_trashed
 34752                                  alloc_errj:
 34753 000062F0 E951A3                  	JMP	SYS_RET_ERR
 34754                                  
 34755                                  alloc_end:
 34756                                  	; 18/05/2019
 34757 000062F3 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34758 000062F9 7403                    	jz	short alloc_chk 
 34759 000062FB E98400                  	jmp	alloc_do_split
 34760                                  
 34761                                  alloc_chk:
 34762                                  	; MSDOS 6.0
 34763 000062FE 36A1[2400]              	mov	ax,[ss:arena_head]
 34764 00006302 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34765 00006307 740E                    	je	short alloc_fail	; Y: not enough memory
 34766                                  					; N:
 34767                                  					; Q: is the alloc strat HIGH_ONLY
 34768 00006309 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34769 0000630F 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34770                                  	
 34771 00006311 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34772                                  	; 27/09/2023 (*)
 34773 00006315 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34774                                  	;jmp	short start_scan
 34775                                  					; M000 - end
 34776                                  
 34777                                  alloc_fail:
 34778                                          ;invoke Get_User_Stack
 34779 00006317 E86BA1                          CALL	Get_User_Stack
 34780 0000631A 5B                      	POP     BX
 34781                                          ;MOV	[SI].user_BX,BX
 34782                                  	;MOV	[SI+2],BX
 34783 0000631B 895C02                  	mov	[SI+user_env.user_BX],bx
 34784                                  	;LeaveCrit critMem
 34785 0000631E E80CB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34786                                  	;error	error_not_enough_memory
 34787                                  	;mov	al,8
 34788 00006321 B008                    	MOV	AL,error_not_enough_memory
 34789                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34790 00006323 EBCB                    	jmp	short alloc_errj
 34791                                  	;JMP	SYS_RET_ERR
 34792                                  
 34793                                  alloc_free:
 34794 00006325 E835FF                          CALL    Coalesce		; add following free block to current
 34795 00006328 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34796 0000632A 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34797 0000632E 5A                              POP     DX                      ; check for max found size
 34798 0000632F 39D1                            CMP     CX,DX
 34799 00006331 7602                            JNA     SHORT alloc_test
 34800 00006333 89CA                            MOV     DX,CX
 34801                                  
 34802                                  alloc_test:
 34803 00006335 52                              PUSH    DX
 34804 00006336 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34805 00006338 7782                    	JA      SHORT alloc_next	;   GOTO next
 34806                                  
 34807                                  	; 15/03/2018
 34808 0000633A 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34809 00006340 7505                    	JNZ	SHORT alloc_best
 34810 00006342 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34811                                  alloc_best:
 34812 00006347 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34813 0000634D 740E                            JZ      SHORT alloc_make_best	; initial best
 34814 0000634F 06                              PUSH	ES
 34815 00006350 368E06[4203]                    MOV     ES,[SS:BestArena]
 34816 00006355 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34817 0000635A 07                              POP	ES
 34818 0000635B 7605                            JBE     SHORT alloc_last
 34819                                  alloc_make_best:
 34820 0000635D 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34821                                  alloc_last:
 34822 00006362 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34823 00006367 E952FF                          JMP     alloc_next
 34824                                  ;
 34825                                  ; split the block high
 34826                                  ;
 34827                                  alloc_do_split_high:
 34828 0000636A 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34829 0000636F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34830 00006373 29D9                            SUB     CX,BX
 34831 00006375 8CDA                            MOV     DX,DS
 34832 00006377 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34833 00006379 01CA                            ADD     DX,CX                   ; point to next block
 34834 0000637B 8EC2                            MOV     ES,DX                   ; no decrement!
 34835 0000637D 49                              DEC     CX
 34836 0000637E 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34837 00006380 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34838                                  ;
 34839                                  ; we have scanned memory and have found all appropriate blocks
 34840                                  ; check for the type of allocation desired; first and best are identical
 34841                                  ; last must be split high
 34842                                  ;
 34843                                  alloc_do_split:
 34844                                  
 34845                                  ; 17/12/2022
 34846                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34847                                  ;%if 0
 34848                                  	; 14/05/2019
 34849                                  	; MSDOS 6.0			; M000 - start
 34850                                  	;xor	cx,cx
 34851 00006382 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34852                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34853 00006387 80E13F                  	and	cl,3Fh
 34854                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34855 0000638A 80F901                  	cmp	cl,BEST_FIT
 34856 0000638D 77DB                    	ja	short alloc_do_split_high
 34857                                  ;%endif
 34858                                  
 34859                                  	; 17/12/2022
 34860                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34861                                  	; MSDOS 6.0 & MSDOS 5.0
 34862                                  	;xor	cx,cx
 34863                                  	;mov	cl,[ss:AllocMethod]
 34864                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34865                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34866                                  	;ja	short alloc_do_split_high
 34867                                  
 34868                                  	; 15/03/2018
 34869                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34870                                  	; 04/08/2018
 34871                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34872                                          ;JA	SHORT alloc_do_split_high
 34873                                          
 34874 0000638F 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34875 00006394 7205                    	JB      SHORT alloc_get_size
 34876 00006396 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34877                                  
 34878                                  alloc_get_size:
 34879 0000639B 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34880 0000639F 29D9                            SUB     CX,BX                   ; get room left over
 34881 000063A1 8CD8                            MOV     AX,DS
 34882 000063A3 89C2                            MOV     DX,AX                   ; save for owner setting
 34883 000063A5 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34884 000063A7 01D8                            ADD     AX,BX
 34885 000063A9 40                              INC     AX                      ; remember the header
 34886 000063AA 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34887 000063AC 49                              DEC     CX                      ; CX <- size of split block
 34888                                  alloc_set_sizes:
 34889 000063AD 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34890 000063B1 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34891                                  	;mov	bl,4Dh ; 'M'
 34892 000063B6 B34D                            MOV     BL,arena_signature_normal
 34893 000063B8 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34894 000063BA 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34895 000063BD 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34896                                  
 34897                                  alloc_set_owner:
 34898 000063C2 8EDA                            MOV     DS,DX
 34899 000063C4 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34900 000063C8 A30100                          MOV     [ARENA.OWNER],AX
 34901 000063CB 8CD8                            MOV     AX,DS
 34902 000063CD 40                              INC     AX
 34903 000063CE 5B                              POP     BX
 34904                                  	;LeaveCrit critMem
 34905 000063CF E85BAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34906                                  	
 34907                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34908                                  alloc_ok:
 34909                                          ;transfer SYS_RET_OK
 34910 000063D2 E966A2                  	JMP	SYS_RET_OK
 34911                                  
 34912                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34913                                  
 34914                                  ; MSDOS 6.0
 34915                                  ;----------------------------------------------------------------------------
 34916                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34917                                  ;
 34918                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34919                                  ;	any following free space onto this block; then we try to trim the
 34920                                  ;	block down to the size requested.
 34921                                  ;
 34922                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34923                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34924                                  ;	Thus the maximum-size-possible value that we return has already
 34925                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34926                                  ;
 34927                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34928                                  ;		finish it's work. For this reason we build the allocsf
 34929                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34930                                  ;		code.
 34931                                  ;
 34932                                  ;	ENTRY	(es) = segment of old block
 34933                                  ;		(bx) = newsize
 34934                                  ;		(ah) = SETBLOCK
 34935                                  ;
 34936                                  ;	EXIT	'C' clear if OK
 34937                                  ;		'C' set if error
 34938                                  ;		  (ax) = error_invalid_block
 34939                                  ;		       = error_arena_trashed
 34940                                  ;		       = error_not_enough_memory
 34941                                  ;		       = error_invalid_function
 34942                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34943                                  ;	USES	???? BUGBUG
 34944                                  ;----------------------------------------------------------------------------
 34945                                  
 34946                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34947                                  ;----------------------------------------------------------------------------
 34948                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34949                                  ;
 34950                                  ;   Assembler usage:
 34951                                  ;           MOV     ES,block
 34952                                  ;           MOV     BX,newsize
 34953                                  ;           MOV     AH,setblock
 34954                                  ;           INT     21h
 34955                                  ;         if setblock fails for growing, BX will have the maximum
 34956                                  ;         size possible
 34957                                  ;   Error return:
 34958                                  ;           AX = error_invalid_block
 34959                                  ;              = error_arena_trashed
 34960                                  ;              = error_not_enough_memory
 34961                                  ;              = error_invalid_function
 34962                                  ;----------------------------------------------------------------------------
 34963                                  
 34964                                  _$SETBLOCK:        
 34965                                  	; 04/08/2018 - Retro DOS v3.0
 34966                                  	;EnterCrit   critMem
 34967 000063D5 E83AAF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34968                                  
 34969 000063D8 BF0000                  	MOV     DI,ARENA.SIGNATURE
 34970 000063DB 8CC0                            MOV     AX,ES
 34971 000063DD 48                              DEC     AX
 34972 000063DE E86CFE                          CALL    check_signature
 34973 000063E1 7303                            JNC     SHORT setblock_grab
 34974                                  
 34975                                  setblock_bad:
 34976 000063E3 E905FF                          JMP     alloc_trashed
 34977                                  
 34978                                  setblock_grab:
 34979 000063E6 8ED8                            MOV     DS,AX
 34980 000063E8 E872FE                          CALL    Coalesce
 34981 000063EB 72F6                            JC      SHORT setblock_bad
 34982 000063ED 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34983 000063F1 51                              PUSH    CX
 34984 000063F2 39CB                            CMP     BX,CX
 34985 000063F4 76A5                            JBE     SHORT alloc_get_size
 34986 000063F6 E91EFF                          JMP     alloc_fail
 34987                                  
 34988                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34989                                  
 34990                                  ; MSDOS 6.0
 34991                                  ;----------------------------------------------------------------------------
 34992                                  ;**	$DEALLOC - Free Heap Memory
 34993                                  ;
 34994                                  ;	ENTRY	(es) = address of item
 34995                                  ;
 34996                                  ;	EXIT	'C' clear of OK
 34997                                  ;		'C' set if error
 34998                                  ;		  (AX) = error_invalid_block
 34999                                  ;	USES	???? BUGBUG
 35000                                  
 35001                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35002                                  ;----------------------------------------------------------------------------
 35003                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35004                                  ;
 35005                                  ;   Assembler usage:
 35006                                  ;           MOV     ES,block
 35007                                  ;           MOV     AH,dealloc
 35008                                  ;           INT     21h
 35009                                  ;
 35010                                  ;   Error return:
 35011                                  ;           AX = error_invalid_block
 35012                                  ;              = error_arena_trashed
 35013                                  ;---------------------------------------------------------------------------- 
 35014                                  
 35015                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35016                                  _$DEALLOC:
 35017                                  	; 14/05/2019 - Retro DOS v4.0    
 35018                                  	; 04/08/2018 - Retro DOS v3.0
 35019                                  	;EnterCrit   critMem
 35020 000063F9 E816AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35021                                  
 35022                                  	; MSDOS 6.0			; M016, M068 - Start
 35023 000063FC 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35024                                  					; Q: was the previous call an int 21
 35025                                  					;    exec call
 35026 00006402 740D                    	jz	short deallocate	; N: continue
 35027 00006404 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35028 0000640A 7505                    	jne	short deallocate	; N: continue
 35029                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35030                                  	; 25/09/2023
 35031 0000640C 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35032                                  deallocate:				; M016, M068 - End
 35033 00006411 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35034 00006414 8CC0                            MOV     AX,ES
 35035 00006416 48                              DEC     AX
 35036 00006417 E833FE                          CALL    check_signature
 35037 0000641A 720A                            JC      SHORT dealloc_err
 35038 0000641C 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35039                                  	;LeaveCrit critMem
 35040 00006421 E809AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35041                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35042                                          ;transfer SYS_RET_OK
 35043                                  dealloc_ok:
 35044 00006424 EBAC                    	jmp	short alloc_ok
 35045                                  	;JMP	SYS_RET_OK
 35046                                  
 35047                                  dealloc_err:
 35048                                  	;LeaveCrit critMem
 35049 00006426 E804AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35050                                          ;error	error_invalid_block
 35051                                  	;mov	al,9
 35052 00006429 B009                    	MOV	AL,error_invalid_block
 35053                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35054                                  dealloc_errj:
 35055                                  AllocOperErrj:	; 17/12/2022
 35056 0000642B E916A2                  	JMP	SYS_RET_ERR
 35057                                  
 35058                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35059                                  
 35060                                  ; MSDOS 6.0
 35061                                  ;----------------------------------------------------------------------------
 35062                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35063                                  ;
 35064                                  ;	Assembler usage:
 35065                                  ;           MOV     AH,AllocOper
 35066                                  ;           MOV     BX,method
 35067                                  ;           MOV     AL,func
 35068                                  ;           INT     21h
 35069                                  ;
 35070                                  ;	ENTRY	
 35071                                  ;		(al) = 0
 35072                                  ;		  Get allocation Strategy in (ax)
 35073                                  ;
 35074                                  ;		(al) = 1, (bx) = method = zw0000xy
 35075                                  ;		  Set allocation strategy.
 35076                                  ;		   w  = 1  => HIGH_ONLY
 35077                                  ;		   z  = 1  => HIGH_FIRST
 35078                                  ;		   xy = 00 => FIRST_FIT
 35079                                  ;		      = 01 => BEST_FIT
 35080                                  ;		      = 10 => LAST_FIT
 35081                                  ;
 35082                                  ;		(al) = 2
 35083                                  ;		  Get UMB link state in (al)
 35084                                  ;
 35085                                  ;		(al) = 3
 35086                                  ;		  Set UMB link state
 35087                                  ;		   (bx) = 0 => Unlink UMBs
 35088                                  ;		   (bx) = 1 => Link UMBs
 35089                                  ;
 35090                                  ;
 35091                                  ;	EXIT	'C' clear if OK
 35092                                  ;
 35093                                  ;		 if (al) = 0
 35094                                  ;		  (ax) = existing method
 35095                                  ;		 if (al) = 1
 35096                                  ;		  Sets allocation strategy
 35097                                  ;		 if (al) = 2
 35098                                  ;		  (al) = 0 => UMBs not linked
 35099                                  ;		  (al) = 1 => UMBs linked in
 35100                                  ;		 if (al) = 3
 35101                                  ;		  Links/Unlinks the UMBs into DOS chain
 35102                                  ;
 35103                                  ;		'C' set if error
 35104                                  ;		  AX = error_invalid_function
 35105                                  ;
 35106                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35107                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35108                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35109                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35110                                  ;		    arena' if an arena sig is damaged.
 35111                                  ;----------------------------------------------------------------------------
 35112                                  
 35113                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35114                                  ;----------------------------------------------------------------------------
 35115                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35116                                  ;
 35117                                  ;   Assembler usage:
 35118                                  ;           MOV     AH,AllocOper
 35119                                  ;           MOV     BX,method
 35120                                  ;           MOV     AL,func
 35121                                  ;           INT     21h
 35122                                  ;
 35123                                  ;   Error return:
 35124                                  ;           AX = error_invalid_function
 35125                                  ;----------------------------------------------------------------------------
 35126                                  
 35127                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35128                                  _$ALLOCOPER:
 35129                                  	; 14/05/2019 - Retro DOS v4.0
 35130                                  	; MSDOS 6.0
 35131 0000642E 08C0                    	or	al,al ; 0
 35132 00006430 741E                    	jz	short AllocGetStrat
 35133                                  	; 17/12/2022
 35134                                  	;cmp	al,1
 35135                                  	;jz	short AllocSetStrat
 35136                                  
 35137                                  	; 01/12/2022
 35138                                  	;cmp	al, 2
 35139                                  	;jb	short AllocSetStrat
 35140                                  	;ja	short AllocSetLink
 35141                                  	;;jmp	short AllocGetLink
 35142                                  ;AllocGetLink:
 35143                                  	; MSDOS 6.0
 35144                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35145                                  	;and 	al,LINKSTATE		
 35146                                  	;;transfer SYS_RET_OK
 35147                                  	;jmp	SYS_RET_OK
 35148                                  
 35149 00006432 3C02                    	cmp	al,2
 35150                                  	; 17/12/2022
 35151 00006434 7223                    	jb	short AllocSetStrat ; al = 1
 35152 00006436 7432                    	je	short AllocGetLink
 35153                                  
 35154                                  	;cmp	al,2
 35155                                  	;jz	short AllocGetLink
 35156 00006438 3C03                    	cmp	al,3
 35157 0000643A 7436                    	jz	short AllocSetLink
 35158                                  
 35159                                  	; 15/04/2018
 35160                                  	;CMP	AL,1
 35161                                          ;JB	SHORT AllocOperGet
 35162                                          ;JZ	SHORT AllocOperSet
 35163                                  
 35164                                  AllocOperError:
 35165                                  	; 04/08/2018 - Retro DOS v3.0
 35166                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35167                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35168 0000643C 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35169                                  	;error	error_invalid_function
 35170                                  	;mov	al,1
 35171 00006442 B001                    	MOV	AL,error_invalid_function
 35172                                  	; 17/12/2022
 35173                                  ;AllocOperErrj:
 35174                                  	;JMP	SYS_RET_ERR
 35175                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35176                                  	;jmp	short dealloc_errj
 35177                                  	; 17/12/2022
 35178 00006444 EBE5                    	jmp	short AllocOperErrj
 35179                                  
 35180                                  AllocArenaError:
 35181                                  	; MSDOS 6.0
 35182 00006446 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35183                                  					; M009: Extended Error Locus
 35184                                  	;error	error_arena_trashed	; M009:
 35185                                  	;mov	al,7
 35186 0000644C B007                    	MOV	AL,error_arena_trashed
 35187                                  	;JMP	SYS_RET_ERR
 35188 0000644E EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35189                                  
 35190                                  AllocGetStrat: 
 35191                                  	; MSDOS 6.0
 35192                                  AllocOperGet:
 35193 00006450 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35194 00006454 30E4                            XOR     AH,AH
 35195                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35196                                  	;transfer SYS_RET_OK
 35197                                  AllocOperOk:
 35198                                  	; 17/12/2022
 35199                                  	;jmp	short dealloc_ok
 35200 00006456 E9E2A1                  	JMP	SYS_RET_OK
 35201                                  
 35202                                  AllocSetStrat: 
 35203                                  	; 14/05/2019
 35204                                  	; MSDOS 6.0
 35205 00006459 53                      	push	bx			; M000 - start
 35206                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35207                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35208                                  	; 17/12/2022
 35209 0000645A 80E33F                  	and	bl,3Fh
 35210 0000645D 83FB02                  	cmp	bx,2			; BX must be 0-2
 35211                                  	;cmp	bl,2
 35212 00006460 5B                      	pop	bx			; M000 - end
 35213 00006461 77D9                    	ja	short AllocOperError
 35214                                  
 35215                                  AllocOperSet:
 35216 00006463 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35217                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35218                                  	;transfer SYS_RET_OK
 35219                                  AllocOperOkj:
 35220 00006468 EBEC                    	jmp	short AllocOperOk
 35221                                  	;JMP	SYS_RET_OK
 35222                                  
 35223                                  AllocGetLink:
 35224                                  	; MSDOS 6.0
 35225 0000646A 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35226                                  	;and	al,1
 35227 0000646E 2401                    	and 	al,LINKSTATE		
 35228                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35229                                  	;transfer SYS_RET_OK
 35230                                  AllocOperOkj2:
 35231                                  	; 17/12/2022
 35232 00006470 EBE4                    	jmp	short AllocOperOk
 35233                                  	;jmp	short AllocOperOkj
 35234                                  	;;JMP	SYS_RET_OK
 35235                                  
 35236                                  AllocSetLink:
 35237                                  	; MSDOS 6.0			; M009 - start
 35238 00006472 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35239 00006477 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35240 0000647A 74C0                    	je	short AllocOperError	; N: error
 35241                                  					; Y: continue
 35242                                  					; M009 - end
 35243 0000647C 83FB01                  	cmp	bx,1			
 35244 0000647F 7204                    	jb	short UnlinkUmbs
 35245 00006481 741C                    	jz	short LinkUmbs
 35246                                  	
 35247 00006483 EBB7                    	jmp	short AllocOperError
 35248                                  	
 35249                                  UnlinkUmbs:
 35250                                  	;test	byte [ss:UMBFLAG],1
 35251 00006485 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35252 0000648B 7410                    	jz	short unlinked		; Y: return 
 35253                                  	
 35254 0000648D E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35255 00006490 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35256                                  	
 35257                                  					; make it last
 35258 00006492 C60600005A              	mov	byte [0],arena_signature_end
 35259                                  	
 35260                                  	;and	byte [ss:UMBFLAG],0FEh
 35261 00006497 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35262                                  	
 35263                                  unlinked:
 35264                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35265                                  	;transfer SYS_RET_OK
 35266                                  	; 17/12/2022
 35267 0000649D EBB7                    	jmp	short AllocOperOk
 35268                                  	;jmp	short AllocOperOkj2
 35269                                  	;;JMP	SYS_RET_OK
 35270                                  
 35271                                  LinkUmbs:
 35272 0000649F 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35273 000064A5 7510                    	jnz	short linked		; Y: return
 35274                                  	
 35275 000064A7 E80F00                  	call	GetLastArena		; get arena before umb_head
 35276 000064AA 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35277                                  	
 35278                                  					; make it normal. M061: ds points to
 35279                                  					; arena before umb_head
 35280 000064AC C60600004D              	mov	byte [0],arena_signature_normal
 35281                                  	
 35282 000064B1 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35283                                  linked:
 35284                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35285                                  	;transfer SYS_RET_OK
 35286                                  	; 17/12/2022
 35287 000064B7 EB9D                    	jmp	short AllocOperOk
 35288                                  	;jmp	short unlinked
 35289                                  	;;JMP	SYS_RET_OK
 35290                                  
 35291                                  ; MSDOS 6.0
 35292                                  ;--------------------------------------------------------------------------
 35293                                  ; Procedure Name : GetLastArena		-  M003
 35294                                  ;
 35295                                  ; Inputs	 : cx = umb_head
 35296                                  ;
 35297                                  ;
 35298                                  ; Outputs	 : If UMBs are linked
 35299                                  ;			ES = umb_head
 35300                                  ;			DS = arena before umb_head
 35301                                  ;		   else
 35302                                  ;			DS = last arena
 35303                                  ;			ES = next arena. will be umb_head if NC.
 35304                                  ;
 35305                                  ;		   CY if error
 35306                                  ;
 35307                                  ; Uses		 : DS, ES, DI, BX
 35308                                  ;--------------------------------------------------------------------------
 35309                                  
 35310                                  ; 14/05/2019 - Retro DOS v4.0
 35311                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35312                                  
 35313                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35314                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35315                                  	
 35316                                  GetLastArena:
 35317 000064B9 50                      	push	ax			; save ax
 35318                                  
 35319 000064BA 36A1[2400]              	mov	ax,[ss:arena_head]
 35320 000064BE 8EC0                    	mov	es,ax			; es = arena_head
 35321 000064C0 31FF                    	xor	di,di
 35322                                  
 35323 000064C2 26803D5A                	cmp     byte [es:di],arena_signature_end
 35324                                  					; Q: is this the last arena
 35325 000064C6 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35326                                  					
 35327                                  GLA_next:
 35328 000064C8 8ED8                    	mov	ds,ax
 35329 000064CA E879FD                  	call	arena_next		; ax, es -> next arena
 35330                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35331                                  	;jc	short GLA_err
 35332                                  	; 17/12/2022
 35333 000064CD 7228                    	jc	short GLA_err2
 35334                                  
 35335 000064CF 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35336 000064D5 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35337                                  					;    umb_head
 35338                                  					; N: terminating condition is 05Ah
 35339                                  
 35340 000064D7 26803D5A                	cmp     byte [es:di],arena_signature_end
 35341                                  					; Q: is this the last arena
 35342 000064DB EB02                    	jmp	short GLA_@f
 35343                                  GLA_chkumb:
 35344 000064DD 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35345                                  GLA_@f:
 35346 000064DF 75E7                    	jne	short GLA_next		; N: get next arena
 35347                                  
 35348                                  GLA_done:
 35349                                  					; M061 - Start
 35350 000064E1 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35351 000064E7 750B                    	jnz	short GLA_ret		; Y: we're done
 35352                                  					; N: let us confirm that the next 
 35353                                  					;    arena is umb_head
 35354 000064E9 8ED8                    	mov	ds,ax
 35355 000064EB E858FD                  	call	arena_next		; ax, es -> next arena
 35356                                  	;jc	short GLA_err
 35357 000064EE 7207                    	jc	short GLA_err2
 35358 000064F0 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35359 000064F2 7502                    	jne	short GLA_err		; N: error
 35360                                  					; M061 - End
 35361                                  GLA_ret:
 35362                                  	; 17/12/2022				
 35363                                  	;clc
 35364                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35365                                  	;clc
 35366 000064F4 58                      	pop	ax			; M061
 35367 000064F5 C3                      	retn				; M061
 35368                                  
 35369                                  GLA_err:
 35370 000064F6 F9                      	stc				; M061
 35371                                  GLA_err2:
 35372 000064F7 58                      	pop	ax
 35373 000064F8 C3                      	retn
 35374                                  
 35375                                  ;============================================================================
 35376                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35377                                  ;============================================================================
 35378                                  ; 04/08/2018 - Retro DOS v3.0
 35379                                  
 35380                                  ;	TITLE SRVCALL - Server DOS call
 35381                                  ;	NAME  SRVCALL
 35382                                  
 35383                                  ;**	SRVCALL.ASM - Server DOS call functions
 35384                                  ;
 35385                                  ;
 35386                                  ;	$ServerCall
 35387                                  ;
 35388                                  ;	Modification history:
 35389                                  ;
 35390                                  ;	    Created: ARR 08 August 1983
 35391                                  
 35392                                  ;AsmVars <Installed>
 35393                                  
 35394                                  ;include dpl.asm
 35395                                  
 35396                                  ;Installed = TRUE
 35397                                  
 35398                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35399                                  ; ---------------------------------------------------------------------------
 35400                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35401                                  
 35402                                  ;BREAK <ServerCall -- Server DOS call>
 35403                                  
 35404                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35405                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35406                                  
 35407                                  ;hkn; TABLE	SEGMENT
 35408                                  ;Public SRVC001S,SRVC001E
 35409                                  ;SRVC001S label byte
 35410                                  
 35411                                  SRVC001S:
 35412                                  
 35413 000064F9 [FD64]                  SERVERTAB:	dw	SERVER_DISP
 35414 000064FB [4F65]                  SERVERLEAVE:	dw	SERVERRETURN
 35415 000064FD 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35416 000064FE [B765]                  		dw	SRV_CALL	; 0
 35417 00006500 [5065]                  		dw	COMMIT_ALL	; 1
 35418 00006502 [8665]                  		dw	CLOSE_NAME	; 2
 35419 00006504 [9165]                  		dw	CLOSE_UID	; 3
 35420 00006506 [9865]                  		dw	CLOSE_UID_PID	; 4
 35421 00006508 [9F65]                  		dw	GET_LIST	; 5
 35422 0000650A [F865]                  		dw	GET_DOS_DATA	; 6
 35423 0000650C [1C66]                  		dw	SPOOL_OPER	; 7
 35424 0000650E [1C66]                  		dw	SPOOL_OPER	; 8
 35425 00006510 [1C66]                  		dw	SPOOL_OPER	; 9
 35426 00006512 [2866]                  		dw	_$SetExtendedError  ; 10
 35427                                  
 35428                                  SERVER_DISP_END:  ;  LABEL BYTE
 35429                                  
 35430                                  ;SRVC001E label byte
 35431                                  
 35432                                  SRVC001E:
 35433                                  
 35434                                  ;hkn; TABLE	ENDS
 35435                                  
 35436                                  ;----------------------------------------------------------------------------
 35437                                  ;
 35438                                  ; Procedure Name : $ServerCall
 35439                                  ;
 35440                                  ; Inputs:
 35441                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35442                                  ; Function:
 35443                                  ;	AL=0	Server DOS call
 35444                                  ;	AL=1	Commit All files
 35445                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35446                                  ;	AL=3	Close all files for DPL_UID
 35447                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35448                                  ;	AL=5	Get open file list entry
 35449                                  ;		    IN: BX File Index
 35450                                  ;			CX User Index
 35451                                  ;		    OUT:ES:DI -> Name
 35452                                  ;			BX = UID
 35453                                  ;		    CX = # locked blocks held by this UID
 35454                                  ;	AL=6	Get DOS data area
 35455                                  ;		    OUT: DS:SI -> Start
 35456                                  ;			CX size in bytes of swap if indos
 35457                                  ;			DX size in bytes of swap always
 35458                                  ;	AL=7	Get truncate flag
 35459                                  ;	AL=8	Set truncate flag
 35460                                  ;	AL=9	Close all spool files
 35461                                  ;	AL=10	SetExtendedError
 35462                                  ;
 35463                                  ;----------------------------------------------------------------------------
 35464                                  
 35465                                  _$ServerCall:
 35466                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35467                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35468                                  	; 10/06/2019
 35469                                  	; 29/04/2019 - Retro DOS v4.0
 35470                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35471                                  
 35472                                  	; 05/08/2018 - Retro DOS v3.0
 35473                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35474 00006514 3C07                    	CMP	AL,7
 35475 00006516 7204                    	JB	short SET_STUFF
 35476 00006518 3C09                    	CMP	AL,9
 35477 0000651A 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35478                                  SET_STUFF:
 35479 0000651C 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35480                                  	;mov	bx,[si+12h]
 35481 0000651E 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35482                                  
 35483                                  	; MSDOS 6.0
 35484                                  ;SR;
 35485                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35486                                  ; of USER_ID
 35487                                  
 35488 00006521 36F606[3010]01          	test	byte [SS:IsWin386],1
 35489 00006527 7505                    	jnz	short skip_win386
 35490                                  
 35491                                  ;hkn; SS override for user_id and proc_id
 35492                                  	; 15/08/2018
 35493 00006529 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35494                                  
 35495                                  skip_win386:
 35496 0000652E 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35497 00006531 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35498                                  NO_SET_ID:
 35499                                  	; 10/06/2019 - Retro DOS v4.0
 35500 00006536 2EFF36[FB64]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35501 0000653B 2EFF36[F964]            	PUSH	word [cS:SERVERTAB]	; push table address
 35502 00006540 50                      	PUSH	AX
 35503 00006541 E8E1AC                  	call	TableDispatch
 35504                                  
 35505                                  ;hkn; SS override
 35506                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35507 00006544 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35508                                  	;error	error_invalid_function
 35509                                  	;mov	al,1
 35510 0000654A B001                    	MOV	AL,error_invalid_function
 35511                                  servercall_error:
 35512 0000654C E9F5A0                  	JMP	SYS_RET_ERR
 35513                                  
 35514                                  SERVERRETURN:
 35515 0000654F C3                      	retn
 35516                                  
 35517                                  ; Commit - iterate through the open file list and make sure that the
 35518                                  ; directory entries are correctly updated.
 35519                                  
 35520                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35521                                  COMMIT_ALL:
 35522 00006550 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35523 00006552 16                      	push	ss
 35524 00006553 1F                      	pop	ds
 35525 00006554 E8BBAD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35526                                  CommitLoop:
 35527 00006557 53                      	push	bx
 35528 00006558 E82401                  	call	SFFromSFN
 35529 0000655B 7222                    	JC	short CommitDone
 35530 0000655D 26833D00                	cmp	word [es:di],0
 35531                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35532                                  					; if (ThisSFT->refcount != 0)
 35533 00006561 7418                    	JZ	short CommitNext
 35534                                  	;cmp	word [es:di],0FFFFh ; -1
 35535 00006563 26833DFF                	cmp	word [ES:DI],sf_busy
 35536                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35537                                  					; BUSY SFTs have god knows what
 35538 00006567 7412                    	JZ	short CommitNext	;   in them.
 35539                                  	; 17/12/2022
 35540 00006569 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35541                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35542 0000656E 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35543                                  					;	doesn't deadlock
 35544 00006570 893E[9E05]              	MOV	[THISSFT],DI
 35545 00006574 8C06[A005]              	MOV	[THISSFT+2],ES
 35546 00006578 E8FCCA                  	call	DOS_COMMIT		;	DOSCommit ();
 35547                                  CommitNext:
 35548 0000657B 5B                      	pop	bx
 35549 0000657C 43                      	INC	BX
 35550 0000657D EBD8                    	JMP	short CommitLoop
 35551                                  CommitDone:
 35552 0000657F E8ABAD                  	call	LCritSFT
 35553 00006582 5B                      	pop	bx
 35554                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35555                                  Commit_Ok:
 35556 00006583 E9B5A0                  	jmp	SYS_RET_OK
 35557                                  	
 35558                                  
 35559                                  CLOSE_NAME:
 35560                                  
 35561                                  ;if installed
 35562                                  
 35563                                  ;hkn; SS override
 35564                                  	;call	far [ss:MFTcloN]
 35565 00006586 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35566                                  ;else
 35567                                  ;	Call	MFTcloN
 35568                                  ;endif
 35569                                  
 35570                                  CheckReturns:
 35571 0000658B 7202                    	JC	short func_err
 35572                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35573                                  	;transfer SYS_RET_OK
 35574                                  Commit_Okj:
 35575 0000658D EBF4                    	jmp	short Commit_Ok
 35576                                  	;jmp	SYS_RET_OK
 35577                                  
 35578                                  func_err:
 35579                                  	;transfer SYS_RET_ERR
 35580                                  	;jmp	SYS_RET_ERR
 35581 0000658F EBBB                    	jmp	short servercall_error
 35582                                  
 35583                                  CLOSE_UID:
 35584                                  
 35585                                  ;if installed
 35586                                  ;hkn; SS override
 35587                                  	;call	far [ss:MFTclU]
 35588 00006591 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35589                                  ;else
 35590                                  ;	Call	MFTclU
 35591                                  ;endif
 35592 00006596 EBF3                    	JMP	short CheckReturns
 35593                                  
 35594                                  CLOSE_UID_PID:
 35595                                  
 35596                                  ;if installed
 35597                                  ;hkn; SS override
 35598                                  	;call	far [ss:MFTCloseP]
 35599 00006598 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35600                                  ;else
 35601                                  ;	Call	MFTCloseP
 35602                                  ;endif
 35603 0000659D EBEC                    	JMP	short CheckReturns
 35604                                  
 35605                                  GET_LIST:
 35606                                  
 35607                                  ;if installed
 35608                                  ;hkn; SS override
 35609                                  	;call	far [ss:MFT_get]
 35610 0000659F 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35611                                  ;else
 35612                                  ;	Call	MFT_get
 35613                                  ;endif
 35614 000065A4 72E9                    	JC	short func_err
 35615 000065A6 E8DC9E                  	call	Get_User_Stack
 35616                                  	;mov	[si+2],bx
 35617 000065A9 895C02                  	MOV	[SI+user_env.user_BX],BX
 35618                                  	;mov	[si+10],di
 35619 000065AC 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35620                                  	;mov	[si+16],es
 35621 000065AF 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35622                                  SetCXOK:
 35623                                  	;mov	[si+4],cx
 35624 000065B2 894C04                  	MOV	[SI+user_env.user_CX],CX
 35625                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35626                                  	;transfer SYS_RET_OK
 35627                                  Commit_Okj2:
 35628                                  	; 17/12/2022
 35629 000065B5 EBCC                    	jmp	short Commit_Ok
 35630                                  	;jmp	short Commit_Okj
 35631                                  	;;jmp	SYS_RET_OK
 35632                                  
 35633                                  SRV_CALL:
 35634 000065B7 58                      	POP	AX			; get rid of call to $srvcall
 35635 000065B8 1E                      	push	ds
 35636 000065B9 56                      	push	si
 35637 000065BA E8C89E                  	call	Get_User_Stack
 35638 000065BD 5F                      	pop	di
 35639 000065BE 07                      	pop	es
 35640                                  
 35641                                  ; DS:SI point to stack
 35642                                  ; ES:DI point to DPL
 35643                                  
 35644 000065BF E842AC                  	call	XCHGP
 35645                                  
 35646                                  ; DS:SI point to DPL
 35647                                  ; ES:DI point to stack
 35648                                  ;
 35649                                  ; We now copy the registers from DPL to save stack
 35650                                  
 35651 000065C2 56                      	push	si
 35652 000065C3 B90600                  	MOV	CX,6
 35653 000065C6 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35654 000065C8 47                      	INC	DI
 35655 000065C9 47                      	INC	DI			; Skip user_BP
 35656 000065CA A5                      	MOVSW				; DS
 35657 000065CB A5                      	MOVSW				; ES
 35658 000065CC 5E                      	pop	si			; DS:SI -> DPL
 35659 000065CD 8B04                    	mov	ax,[SI]
 35660                                  	;MOV	AX,[SI+DPL.AX]
 35661                                  	;mov	bx,[si+2]
 35662 000065CF 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35663                                  	;mov	cx,[si+4]
 35664 000065D2 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35665                                  	;mov	dx,[si+6]
 35666 000065D5 8B5406                  	MOV	DX,[SI+DPL.DX]
 35667                                  	;mov	di,[si+10]
 35668 000065D8 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35669                                  	;mov	es,[si+14]
 35670 000065DB 8E440E                  	MOV	ES,[SI+DPL.ES]
 35671                                  	;push	word [si+8]
 35672 000065DE FF7408                  	PUSH	word [SI+DPL.SI]
 35673                                  	;mov	ds,[si+12]
 35674 000065E1 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35675 000065E4 5E                      	POP	SI
 35676                                  
 35677                                  ;hkn; SS override for next 3
 35678 000065E5 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35679 000065EA 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35680 000065EF 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35681 000065F5 E98F9D                  	jmp	REDISP
 35682                                  
 35683                                  GET_DOS_DATA:
 35684 000065F8 16                      	push	ss
 35685 000065F9 07                      	pop	es
 35686 000065FA BF[2003]                	MOV     DI,SWAP_START
 35687 000065FD B9[AC0A]                	MOV     CX,SWAP_END
 35688 00006600 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35689 00006603 29F9                    	SUB     CX,DI
 35690 00006605 29FA                    	SUB     DX,DI
 35691 00006607 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35692 00006609 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35693 0000660C D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35694 0000660E E8749E                  	call	Get_User_Stack
 35695                                  	;mov	[si+14],es
 35696 00006611 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35697                                  	;mov	[si+8],di
 35698 00006614 897C08                  	MOV     [SI+user_env.user_SI],DI
 35699                                  	;mov	[si+6],dx
 35700 00006617 895406                  	MOV     [SI+user_env.user_DX],DX
 35701 0000661A EB96                    	JMP	short SetCXOK
 35702                                  
 35703                                  SPOOL_OPER:
 35704                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35705                                  
 35706 0000661C 50                      	push    ax
 35707 0000661D B82511                  	mov     ax,1125h
 35708 00006620 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35709                                  			; STACK: WORD subfunction
 35710                                  			; Return: CF set on error, AX = error code
 35711                                  			; STACK unchanged
 35712 00006622 5B                      	pop	bx
 35713                                  	; 17/12/2022
 35714                                  	;JC	short func_err2
 35715 00006623 7390                    	jnc	short Commit_Okj2
 35716                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35717                                  	;;jmp	SYS_RET_OK
 35718                                  	;jmp	short Commit_Okj2
 35719                                  	
 35720                                  func_err2:
 35721 00006625 E91CA0                  	jmp	SYS_RET_ERR
 35722                                  
 35723                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35724                                  ;--------------------------------------------------------------------------
 35725                                  ;
 35726                                  ; Procedure Name : $SetExtendedError
 35727                                  ;
 35728                                  ; $SetExtendedError takes extended error information and loads it up for the
 35729                                  ; next extended error call. This is used by interrupt-level proccessors to
 35730                                  ; mask their actions.
 35731                                  ;
 35732                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35733                                  ;   Outputs: none
 35734                                  ;
 35735                                  ;---------------------------------------------------------------------------
 35736                                  
 35737                                  _$SetExtendedError:
 35738                                  
 35739                                  ;hkn; SS override for all variables used
 35740                                  
 35741 00006628 8B04                    	mov	ax,[si]
 35742                                  	;MOV	AX,[SI+DPL.AX]
 35743 0000662A 36A3[2403]              	MOV	[SS:EXTERR],AX
 35744                                  	;mov	ax,[si+10]
 35745 0000662E 8B440A                  	MOV	AX,[SI+DPL.DI]
 35746 00006631 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35747                                  	;mov	ax,[si+14]
 35748 00006635 8B440E                  	MOV	AX,[SI+DPL.ES]
 35749 00006638 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35750                                  	;mov	ax,[si+2]
 35751 0000663C 8B4402                  	MOV	AX,[SI+DPL.BX]
 35752 0000663F 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35753                                  	;mov	ax,[si+4]
 35754 00006643 8B4404                  	MOV	AX,[SI+DPL.CX]
 35755 00006646 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35756 0000664B C3                      	retn
 35757                                  
 35758                                  ;============================================================================
 35759                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35760                                  ;============================================================================
 35761                                  ; 05/08/2018 - Retro DOS v3.0
 35762                                  ; 05/05/2019 - Retro DOS v4.0
 35763                                  
 35764                                  ;**	Handle related utilities for MSDOS 2.X.
 35765                                  ;----------------------------------------------------------------------------
 35766                                  ;	pJFNFromHandle	written
 35767                                  ;	SFFromHandle	written
 35768                                  ;	SFFromSFN	written
 35769                                  ;	JFNFree 	written
 35770                                  ;	SFNFree 	written
 35771                                  ;
 35772                                  ;	Modification history:
 35773                                  ;
 35774                                  ;	    Created: MZ 1 April 1983
 35775                                  ;----------------------------------------------------------------------------
 35776                                  
 35777                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35778                                  
 35779                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35780                                  ;----------------------------------------------------------------------------
 35781                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35782                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35783                                  ;
 35784                                  ;	NOTE:
 35785                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35786                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35787                                  ;
 35788                                  ;	ENTRY	(bx) = handle
 35789                                  ;	EXIT	'C' clear if ok
 35790                                  ;		  (es:di) = address of JFN value
 35791                                  ;		'C' set if error
 35792                                  ;		  (ax) = error code
 35793                                  ;	USES	AX, DI, ES, Flags
 35794                                  ;----------------------------------------------------------------------------
 35795                                  
 35796                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35797                                  
 35798                                  pJFNFromHandle:
 35799                                  	; 05/05/2019 - Retro DOS v4.0
 35800                                  	;getdseg <es>			; es -> dosdata
 35801 0000664C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35802                                  	
 35803                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35804 00006651 268E06[3003]            	mov	es,[es:CurrentPDB]
 35805                                  
 35806                                  	;cmp	bx,[ES:32h]
 35807 00006656 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35808 0000665B 7204                    	JB	short pjfn10		; no, get offset
 35809                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35810                                  	;mov	al,6
 35811 0000665D B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35812                                  ReturnCarry:
 35813 0000665F F9                      	STC                             ; signal error
 35814 00006660 C3                      	retn				; go back
 35815                                  pjfn10: 
 35816                                  	;les	di,[es:34h]
 35817 00006661 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35818 00006666 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35819                                  	;clc
 35820                                  pJFNFromHandle_error:
 35821 00006668 C3                      	retn
 35822                                  
 35823                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35824                                  ;----------------------------------------------------------------------------
 35825                                  ;
 35826                                  ; Procedure Name : SFFromHandle
 35827                                  ;
 35828                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35829                                  ;
 35830                                  ;   Input:      BX has handle
 35831                                  ;   Output:     Carry Set
 35832                                  ;                   AX has error code
 35833                                  ;               Carry Reset
 35834                                  ;                   ES:DI has pointer to SF entry
 35835                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35836                                  ; NOTE:
 35837                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35838                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35839                                  ;
 35840                                  ;----------------------------------------------------------------------------
 35841                                  
 35842                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35843                                  
 35844                                  SFFromHandle:
 35845 00006669 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35846                                  	;retc				; return if error
 35847 0000666C 72FA                    	jc	short pJFNFromHandle_error
 35848 0000666E 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35849                                  	;JNZ	short GetSF		; nope, suck out SF
 35850                                  	;;mov	al,6
 35851                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35852                                  	;jmp	short ReturnCarry	; signal it
 35853                                  	; 17/12/2022
 35854                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35855 00006672 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35856                                  	;JNZ	short GetSF		; nope, suck out SF
 35857                                  	;;mov	al,6
 35858                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35859                                  	;jmp	short ReturnCarry	; signal it
 35860                                  GetSF:
 35861 00006674 53                      	push	bx			; save handle
 35862 00006675 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35863 00006678 30FF                    	XOR     BH,BH                   ; ignore upper half
 35864 0000667A E80200                  	CALL    SFFromSFN               ; get real sf spot
 35865 0000667D 5B                      	pop	bx			; restore
 35866 0000667E C3                      	retn                        	; say goodbye
 35867                                  
 35868                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35869                                  
 35870                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35871                                  ;----------------------------------------------------------------------------
 35872                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35873                                  ;	is more than just a simple index instruction because the SF table
 35874                                  ;	can be made up of multiple pieces chained together. We follow the
 35875                                  ;	chain to the right piece and then do the index operation.
 35876                                  ;
 35877                                  ;   NOTE:
 35878                                  ;	This routine is called from SFFromHandle which is called
 35879                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35880                                  ;
 35881                                  ;	ENTRY	BX has SF index
 35882                                  ;	EXIT	'C' clear if OK
 35883                                  ;		  ES:DI points to SF entry
 35884                                  ;		'C' set if index too large
 35885                                  ;	USES	BX, DI, ES
 35886                                  ;----------------------------------------------------------------------------
 35887                                  
 35888                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35889                                  
 35890                                  SFFromSFN:
 35891                                  	; 05/05/2019 - Retro DOS v4.0
 35892                                  	;getdseg <es>			; es -> dosdata
 35893 0000667F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35894                                  
 35895                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35896 00006684 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35897                                  sfsfn5:	
 35898                                  	;cmp	bx,[es:di+4]
 35899 00006689 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35900 0000668D 720E                    	JB	short sfsfn7		; yes, go grab it
 35901                                  	;sub	bx,[es:di+4]
 35902 0000668F 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35903 00006693 26C43D                  	les	di,[es:di] ; 14/08/2018
 35904                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35905 00006696 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35906 00006699 75EE                    	JNZ	short sfsfn5		; no, try again
 35907 0000669B F9                      	STC
 35908 0000669C C3                      	retn				; return with error, not found
 35909                                  sfsfn7:
 35910 0000669D 50                      	push	ax
 35911                                  	;mov	ax,53 ; MSDOS 3.3
 35912                                  	;mov	ax,59 ; MSDOS 6.0
 35913                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35914                                  	
 35915                                  	; 17/12/2022
 35916 0000669E B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35917                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35918                                  	;mov	ax,SF_ENTRY.size ; 59
 35919                                  	
 35920 000066A0 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35921 000066A2 01C7                    	ADD	DI,AX			; add base of SF block
 35922 000066A4 58                      	pop	ax
 35923                                  	;add	di,6
 35924 000066A5 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35925 000066A8 C3                      	retn				; return with 'C' clear
 35926                                  
 35927                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35928                                  
 35929                                  ;**	JFNFree - Find a Free JFN Slot
 35930                                  ;----------------------------------------------------------------------------
 35931                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35932                                  ;
 35933                                  ;	ENTRY	(ss) = DOSDATA
 35934                                  ;	EXIT	'C' clear if OK
 35935                                  ;		  (bx) = new handle
 35936                                  ;		  (es:di) = pointer to JFN slot
 35937                                  ;		'C' set if error
 35938                                  ;		  (al) = error code
 35939                                  ;	USES	bx, di, es, flags
 35940                                  ;----------------------------------------------------------------------------
 35941                                  
 35942                                  JFNFree:
 35943 000066A9 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35944                                  jfnf1:	
 35945 000066AB E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35946 000066AE 7209                    	JC	short jfnf5		; no more handles
 35947 000066B0 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35948 000066B4 7405                    	je	short jfnfx		; yes, carry is clear
 35949 000066B6 43                      	INC     BX                      ; no, next handle
 35950 000066B7 EBF2                    	JMP	short jfnf1		; and try again
 35951                                  
 35952                                  	; Error. 'C' set
 35953                                  jfnf5:	
 35954                                  	;mov	al,4
 35955 000066B9 B004                    	MOV	AL,error_too_many_open_files
 35956                                  jfnfx:	
 35957 000066BB C3                      	retn				; bye
 35958                                  
 35959                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35960                                  
 35961                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35962                                  ;----------------------------------------------------------------------------
 35963                                  ;	SFNFree scans through the sf table looking for a free entry
 35964                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35965                                  ;
 35966                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35967                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35968                                  ;	we can't just mark it busy because we may get blown out of our open
 35969                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35970                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35971                                  ;	an SFT with this value we look to see if it belongs to this user
 35972                                  ;	and process.  If it does belong to us then it must be an orphan
 35973                                  ;	and we reclaim it.
 35974                                  ;
 35975                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35976                                  ;		over and over, but we could at least set a high water mark...
 35977                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35978                                  ;		even though this is not a frequently called routine - jgl
 35979                                  ;
 35980                                  ;	ENTRY	(ss) = DOSDATA
 35981                                  ;	EXIT	'C' clear if no error
 35982                                  ;		  (bx) = SFN
 35983                                  ;		  (es:di) = pointer to SFT
 35984                                  ;		  es:[di].SFT_REF_COUNT = -1
 35985                                  ;		'C' set if error
 35986                                  ;		  (al) = error code
 35987                                  ;	USES	bx, di, es, Flags
 35988                                  ;----------------------------------------------------------------------------
 35989                                  
 35990                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35991                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35992                                  
 35993                                  SFNFree:
 35994                                  	; 12/08/2018
 35995                                  	; 05/08/2018 - Retro DOS v3.0
 35996                                  	;
 35997                                  	; MSDOS 6.0
 35998 000066BC 50                      	push	ax
 35999 000066BD 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36000                                  sfnf5:	
 36001 000066BF 53                      	push	bx
 36002 000066C0 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36003 000066C3 5B                      	pop	bx
 36004 000066C4 723A                    	jc	short sfnf95		; no more free SFNs
 36005 000066C6 26833D00                	cmp	word [ES:DI],0
 36006                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36007 000066CA 741D                    	je	short sfnf20			; yep, got one
 36008                                  	
 36009                                  	;cmp	word [es:di],0FFFFh ; -1
 36010 000066CC 26833DFF                	cmp	word [ES:DI],sf_busy
 36011                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36012 000066D0 7403                    	je	short sfnf10		; special busy mark
 36013                                  sfnf7:	
 36014 000066D2 43                      	inc	bx			; try the next one
 36015 000066D3 EBEA                    	jmp	short sfnf5
 36016                                  
 36017                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36018                                  ;	it was abandoned during a earlier call and we can use it.
 36019                                  ;
 36020                                  ;	(bx)	= SFN
 36021                                  ;	(es:di) = pointer to SFT
 36022                                  ;	(TOS)	= caller's (ax)
 36023                                  
 36024                                  sfnf10:	
 36025 000066D5 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36026                                  	;cmp	[es:di+2Fh],ax
 36027 000066D9 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36028 000066DD 75F3                    	jnz	short sfnf7		; not ours
 36029 000066DF 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36030                                  	;cmp	[es:di+31h],ax
 36031 000066E3 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36032 000066E7 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36033                                  
 36034                                  ;	We have an SFT to allocate
 36035                                  ;
 36036                                  ;	(bx)	= SFN
 36037                                  ;	(es:di) = pointer to SFT
 36038                                  ;	(TOS)	= caller's (ax)
 36039                                  
 36040                                  sfnf20:
 36041                                  	; cf = 0 ;; Retro DOS v3.0
 36042                                  
 36043                                  	;mov	word [es:di],0FFFFh
 36044 000066E9 26C705FFFF              	mov	word [ES:DI],sf_busy
 36045                                  					; make sure that this is allocated
 36046                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36047                                  
 36048 000066EE 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36049                                  	;mov	[es:di+2Fh],ax
 36050 000066F2 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36051 000066F6 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36052                                  	;mov	[es:di+31h],ax
 36053 000066FA 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36054                                  sfnf21: ;; Retro DOS v3.0
 36055                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36056                                  	;pop	ax
 36057                                  	;;clc
 36058                                  	;retn				; return with no error
 36059                                  	; 17/12/2022
 36060 000066FE 58                      	pop	ax
 36061                                  	;clc
 36062 000066FF C3                      	retn
 36063                                  
 36064                                  ;**	Error - no more free SFNs
 36065                                  ;
 36066                                  ;	'C' set
 36067                                  ;	(TOS) = saved ax
 36068                                  
 36069                                  sfnf95: 
 36070 00006700 58                      	pop	ax
 36071                                  	;mov	al,4
 36072 00006701 B004                    	mov	al,error_too_many_open_files
 36073 00006703 C3                      	retn				; return with 'C' and error
 36074                                  
 36075                                  ;============================================================================
 36076                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36077                                  ;============================================================================
 36078                                  ; 13/07/2018 - Retro DOS v3.0
 36079                                  ; 20/05/2019 - Retro DOS v4.0
 36080                                  
 36081                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36082                                  
 36083                                  ;	BREAK <$Close - return a handle to the system>
 36084                                  ;----------------------------------------------------------------------------
 36085                                  ;
 36086                                  ;**	$Close - Close a file Handle
 36087                                  ;
 36088                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36089                                  ;		path
 36090                                  ;
 36091                                  ;	Assembler usage:
 36092                                  ;	    MOV     BX, handle
 36093                                  ;	    MOV     AH, Close
 36094                                  ;	    INT     int_command
 36095                                  ;
 36096                                  ;	ENTRY	(bx) = handle
 36097                                  ;	EXIT	<normal INT21 return convention>
 36098                                  ;	USES	all
 36099                                  ;
 36100                                  ;----------------------------------------------------------------------------
 36101                                  
 36102                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36103                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36104                                  
 36105                                  _$CLOSE:
 36106                                  ;	Grab the SFT pointer from the JFN.
 36107                                  
 36108 00006704 E85A02                  	call	CheckOwner		; get system file entry
 36109 00006707 722B                    	jc	short CloseError	; error return
 36110 00006709 16                      	push	ss
 36111 0000670A 1F                      	pop	ds			; For DOS_CLOSE
 36112 0000670B 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36113 0000670F 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36114                                  
 36115                                  ; DS:SI point to JFN table entry.
 36116                                  ; ES:DI point to SFT
 36117                                  ;
 36118                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36119                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36120                                  ; If the file was not a net FCB, we free the JFN too.
 36121                                  
 36122                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36123 00006713 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36124 00006717 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36125                                  	;mov	al,[ES:DI+2]
 36126 00006719 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36127                                  	;and	al,0F0h
 36128 0000671D 24F0                    	AND	AL,SHARING_MASK
 36129                                  	;cmp	al,70h
 36130 0000671F 3C70                    	CMP	AL,SHARING_NET_FCB
 36131 00006721 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36132                                  
 36133                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36134                                  ; -1.
 36135                                  
 36136                                  FreeJFN:
 36137 00006723 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36138 00006726 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36139                                  PostFree:
 36140                                  
 36141                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36142                                  
 36143 0000672A E8FCC7                  	call	DOS_CLOSE
 36144                                  
 36145                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36146                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36147                                  
 36148 0000672D 7205                    	JC	short CloseError
 36149                                  	;mov	ah,3Eh
 36150 0000672F B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36151                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36152                                  CloseOk:
 36153 00006731 E9079F                  	jmp	SYS_RET_OK
 36154                                  CloseError:
 36155 00006734 E90D9F                  	jmp	SYS_RET_ERR
 36156                                  
 36157                                  ;	BREAK <$Commit - commit the file>
 36158                                  ;----------------------------------------------------------------------------
 36159                                  ;
 36160                                  ;**	$Commit - Commit a File
 36161                                  ;
 36162                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36163                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36164                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36165                                  ;	and fix this!! jgl
 36166                                  ;
 36167                                  ;	Assembler usage:
 36168                                  ;	    MOV     BX, handle
 36169                                  ;	    MOV     AH, Commit
 36170                                  ;	    INT     int_command
 36171                                  ;
 36172                                  ;	ENTRY	(bx) = handle
 36173                                  ;	EXIT	none
 36174                                  ;	USES	all
 36175                                  ;;----------------------------------------------------------------------------
 36176                                  
 36177                                  _$COMMIT:
 36178                                  ;	Grab the SFT pointer from the JFN.
 36179                                  
 36180 00006737 E82702                  	call	CheckOwner		; get system file entry
 36181 0000673A 7213                    	JC	short CommitError	; error return
 36182 0000673C 16                      	push	ss
 36183 0000673D 1F                      	pop	ds			; For DOS_COMMIT
 36184 0000673E 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36185 00006742 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36186                                  
 36187                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36188                                  ;
 36189                                  ;	ES:DI point to SFT
 36190                                  
 36191 00006746 E82EC9                  	call	DOS_COMMIT
 36192 00006749 7204                    	JC	short CommitError
 36193                                  	; 07/12/2022
 36194                                  	;jc	short CloseError
 36195                                  	;mov	ah,68h
 36196 0000674B B468                    	MOV	AH,COMMIT
 36197                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36198                                  	;jmp	SYS_RET_OK
 36199                                  CommitOk:
 36200 0000674D EBE2                    	jmp	short CloseOk	
 36201                                  
 36202                                  CommitError:
 36203                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36204                                  	;jmp	SYS_RET_ERR
 36205 0000674F EBE3                    	jmp	short CloseError
 36206                                  
 36207                                  ;	BREAK <$ExtHandle - extend handle count>
 36208                                  
 36209                                  ;**	$ExtHandle - Extend Handle Count
 36210                                  ;----------------------------------------------------------------------------
 36211                                  ;	Assembler usage:
 36212                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36213                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36214                                  ;	    INT     int_command 		 busy )
 36215                                  ;
 36216                                  ;	ENTRY	(bx) = new number of handles
 36217                                  ;	EXIT	'C' clear if OK
 36218                                  ;		'C' set iff err
 36219                                  ;		  (ax) = error code
 36220                                  ;			 AX = error_not_enough_memory
 36221                                  ;			      error_too_many_open_files
 36222                                  ;	USES	all
 36223                                  ;----------------------------------------------------------------------------
 36224                                  
 36225                                  _$ExtHandle:
 36226 00006751 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36227                                  	;cmp	bx,20
 36228 00006753 83FB14                  	CMP	BX,FILPERPROC
 36229 00006756 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36230 00006758 BB1400                  	MOV	BX,FILPERPROC
 36231                                  exth2:	
 36232 0000675B 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36233                                  	;mov	cx,[ES:32h]
 36234 00006760 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36235 00006765 39CB                    	CMP	BX,CX			; the requested == current
 36236 00006767 7455                    	JE	short ok_done 		; yes and exit
 36237 00006769 7722                    	JA	short larger		; go allocate new table
 36238                                  
 36239                                  ;	We're going to shrink the # of handles available
 36240                                  
 36241 0000676B BD0100                  	MOV	BP,1			; shrink
 36242                                  	;mov	ds,[ES:36h]
 36243 0000676E 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36244 00006773 89DE                    	MOV	SI,BX			;
 36245 00006775 29D9                    	SUB	CX,BX			; get difference
 36246                                  
 36247                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36248                                  chck_handles:
 36249 00006777 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36250 0000677A 753D                    	JNZ	short too_many_files	; status
 36251 0000677C 46                      	INC	SI
 36252 0000677D E2F8                    	LOOP	chck_handles
 36253 0000677F 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36254 00006782 7709                    	JA	short larger		; no
 36255                                  
 36256 00006784 BD0200                  	MOV	BP,2			; psp
 36257                                  	;mov	di,24
 36258 00006787 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36259 0000678A 53                      	PUSH	BX
 36260 0000678B EB1D                    	JMP	short movhandl
 36261                                  
 36262                                  larger:
 36263 0000678D 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36264 00006790 747F                    	JZ	short invalid_func	; 10/08/2018
 36265 00006792 F8                      	CLC
 36266 00006793 53                      	PUSH	BX			; save requested number
 36267 00006794 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36268 00006797 B104                    	MOV	CL,4
 36269                                  	;ror	bx,cl			; MSDOS 3.3
 36270 00006799 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36271 0000679B 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36272                                  
 36273 0000679F 55                      	PUSH	BP
 36274 000067A0 E8DCFA                  	call	_$ALLOC			; allocate memory
 36275 000067A3 5D                      	POP	BP
 36276 000067A4 7266                    	JC	short no_memory		; not enough meory
 36277                                  
 36278 000067A6 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36279 000067A8 31FF                    	XOR	DI,DI
 36280                                  movhandl:
 36281 000067AA 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36282                                  
 36283 000067AF F7C50300                	test	BP,3			; enlarge ?
 36284 000067B3 740C                    	JZ	short enlarge 		; yes
 36285 000067B5 59                      	POP	CX			; cx = the amount you shrink
 36286 000067B6 51                      	PUSH	CX
 36287 000067B7 EB0C                    	JMP	short copy_hand
 36288                                  
 36289                                  ;	Done.  'C' clear
 36290                                  
 36291                                  ; 17/12/2022
 36292                                  ;ok_done:
 36293                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36294                                  ;	;jmp	short CommitOk
 36295                                  ;	; 17/12/2022
 36296                                  ;	jmp	SYS_RET_OK
 36297                                  
 36298                                  too_many_files:
 36299                                  	;mov	al,4
 36300 000067B9 B004                    	MOV	AL,error_too_many_open_files
 36301                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36302                                  	;jmp	SYS_RET_ERR
 36303                                  CommitErrorj:
 36304                                  	;jmp	short CommitError
 36305                                  	; 17/12/2022
 36306 000067BB E9869E                  	jmp	SYS_RET_ERR
 36307                                  
 36308                                  ; 17/12/2022 
 36309                                  ok_done:
 36310                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36311                                  	;jmp	short CommitOk
 36312                                  	; 17/12/2022
 36313 000067BE E97A9E                  	jmp	SYS_RET_OK
 36314                                  
 36315                                  enlarge:
 36316                                  	;mov	cx,[32h]
 36317 000067C1 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36318                                  copy_hand:
 36319 000067C5 89CA                    	MOV	DX,CX
 36320                                  	;lds	si,[34h]
 36321 000067C7 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36322 000067CB F3A4                    	REP	MOVSB			; copy infomation to new table
 36323 000067CD 59                      	POP	CX			; get new number of handles
 36324 000067CE 51                      	PUSH	CX			; save it again
 36325 000067CF 29D1                    	SUB	CX,DX			; get the difference
 36326 000067D1 B0FF                    	MOV	AL,-1			; set availability to handles
 36327 000067D3 F3AA                    	REP	STOSB
 36328 000067D5 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36329                                  	;cmp	word [34h],0
 36330 000067DA 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36331 000067DF 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36332 000067E1 55                      	PUSH	BP
 36333 000067E2 1E                      	PUSH	DS			; save old table segment
 36334 000067E3 06                      	PUSH	ES			; save new table segment
 36335 000067E4 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36336 000067E8 E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36337 000067EB 07                      	POP	ES			; restore new table segment
 36338 000067EC 1F                      	POP	DS			; restore old table segment
 36339 000067ED 5D                      	POP	BP
 36340                                  
 36341                                  update_info:
 36342 000067EE F7C50200                	test	BP,2			; psp?
 36343 000067F2 7408                    	JZ	short non_psp 		; no
 36344                                  	;mov	word [34h],18h ; 24
 36345 000067F4 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36346 000067FA EB06                    	JMP	short final
 36347                                  non_psp:
 36348                                  	;mov	word [34h],0
 36349 000067FC C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36350                                  final:
 36351                                  	;mov	[36h],es	
 36352 00006802 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36353                                  	;pop	word [32h]
 36354 00006806 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36355                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36356                                  	;jmp	SYS_RET_OK
 36357                                  ok_done_j:
 36358 0000680A EBB2                    	jmp	short ok_done
 36359                                  
 36360                                  no_memory:
 36361 0000680C 5B                      	POP	BX			; clean stack
 36362                                  	;mov	al,8
 36363 0000680D B008                    	MOV	AL,error_not_enough_memory
 36364                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36365                                  	;jmp	SYS_RET_ERR
 36366                                  CommitErrorj2:
 36367 0000680F EBAA                    	jmp	short CommitErrorj
 36368                                  
 36369                                  invalid_func:
 36370                                  	;mov	al,1
 36371 00006811 B001                    	MOV	AL,error_invalid_function
 36372                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36373                                  	;jmp	SYS_RET_ERR
 36374                                  CommitErrorj3:
 36375                                  	;jmp	short CommitErrorj2
 36376                                  	; 17/12/2022
 36377 00006813 EBA6                    	jmp	short CommitErrorj
 36378                                  
 36379                                  ; 20/05/2019 - Retro DOS v4.0
 36380                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36381                                  
 36382                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36383                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36384                                  
 36385                                  ;	BREAK <$READ - Read from a file handle>
 36386                                  ;----------------------------------------------------------------------------
 36387                                  ;
 36388                                  ;**	$Read - Read from a File Handle
 36389                                  ;
 36390                                  ;   Assembler usage:
 36391                                  ;
 36392                                  ;	LDS	DX, buf
 36393                                  ;	MOV	CX, count
 36394                                  ;	MOV	BX, handle
 36395                                  ;	MOV	AH, Read
 36396                                  ;	INT	int_command
 36397                                  ;	  AX has number of bytes read
 36398                                  ;
 36399                                  ;	ENTRY	(bx) = file handle
 36400                                  ;		(cx) = byte count
 36401                                  ;		(ds:dx) = buffer address
 36402                                  ;	EXIT	Through system call return so that to user:
 36403                                  ;		  'C' clear if OK
 36404                                  ;		    (ax) = bytes read
 36405                                  ;		  'C' set if error
 36406                                  ;		    (ax) = error code
 36407                                  ;
 36408                                  ;----------------------------------------------------------------------------
 36409                                  
 36410                                  _$READ:
 36411 00006815 BE[D032]                	MOV	SI,DOS_READ
 36412                                  ReadDo:
 36413 00006818 E831FE                  	call	pJFNFromHandle
 36414 0000681B 7208                    	JC	short ReadError
 36415                                  
 36416 0000681D 268A05                  	MOV	AL,[ES:DI]
 36417 00006820 E83E01                  	call	CheckOwner		; get the handle
 36418 00006823 7303                    	JNC	short ReadSetup		; no errors do the operation
 36419                                  
 36420                                  ;	Have an error. 'C' set
 36421                                  
 36422                                  ReadError:
 36423                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36424                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36425                                  	;jmp	short CommitErrorj3
 36426                                  	; 17/12/2022
 36427 00006825 E91C9E                  	jmp	SYS_RET_ERR
 36428                                  
 36429                                  ReadSetup:
 36430 00006828 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36431 0000682D 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36432                                  	; 20/05/2019 - Retro DOS v4.0
 36433                                  	; MSDOS 6.0 
 36434                                  ;; Extended Open
 36435                                  	;test	byte [es:di+3],20h
 36436 00006832 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36437                                  						 ;AN000;;EO. need i24
 36438 00006837 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36439 00006839 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36440                                  					;AN000;;EO. set it off;smr;SS Override
 36441                                  needi24:				;AN000;
 36442                                  ;; Extended Open
 36443 0000683F 36FF36[2C03]            	push	word [SS:DMAADD]
 36444 00006844 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36445                                  
 36446                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36447                                  
 36448                                  	; 26/07/2019
 36449                                  
 36450                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36451                                  	;
 36452                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36453                                  	; there is not another caller; it is better to put the code in this proc
 36454                                   	; here instead of calling it as a subroutine; but I have modified code
 36455                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36456                                  
 36457                                  	; MSDOS 6.0
 36458 00006849 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36459                                  	
 36460                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36461                                  	; MSDOS 3.3
 36462                                  	;MOV	BX,DX			; copy offset
 36463                                  	;push	cx			; don't stomp on count
 36464                                  	;MOV	CL,4			; bits to shift bytes->para
 36465                                  	;SHR	BX,CL			; get number of paragraphs
 36466                                  	;pop	cx			; get count back
 36467                                  	;MOV	AX,DS			; get original segment
 36468                                  	;ADD	AX,BX			; get new segment
 36469                                  	;MOV	DS,AX			; in seg register
 36470                                  	;AND	DX,0Fh			; normalize offset
 36471                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36472                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36473                                  						;smr;SS Override
 36474                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36475                                  	
 36476 0000684C 16                      	push	ss			; go for DOS addressability
 36477 0000684D 1F                      	pop	ds
 36478                                  
 36479 0000684E FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36480                                  
 36481 00006850 8F06[2E03]              	pop	word [DMAADD+2]
 36482 00006854 8F06[2C03]              	pop	word [DMAADD]
 36483                                  	;JNC	short READ_OK		;AN002;
 36484                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36485                                  	; 17/12/2022
 36486 00006858 72CB                    	jc	short ReadError
 36487                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36488                                  	;jnc	short READ_OK		;AN002;
 36489                                  	;jmp	short ReadError
 36490                                  
 36491                                  READ_OK:
 36492 0000685A 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36493                                  Read_Okj:
 36494                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36495                                  	;;jmp	SYS_RET_OK		; successful return
 36496                                  	;jmp	short ok_done_j
 36497                                  	; 17/12/2022
 36498 0000685C E9DC9D                  	jmp	SYS_RET_OK
 36499                                  
 36500                                  ; 13/07/2018 - Retro DOS v3.0
 36501                                  
 36502                                  ;----------------------------------------------------------------------------
 36503                                  
 36504                                  ;   Input: DS:DX points to user's buffer addr
 36505                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36506                                  ;   Output: [DMAADD] set
 36507                                  
 36508                                  ; 20/05/2019 - Retro DOS v4.0
 36509                                  ; 26/07/2019
 36510                                  ;	; MSDOS 6.0
 36511                                  ;Align_Buffer:
 36512                                  ;	MOV	BX,DX			; copy offset
 36513                                  ;	push	cx			; don't stomp on count
 36514                                  ;	MOV	CL,4			; bits to shift bytes->para
 36515                                  ;	SHR	BX,CL			; get number of paragraphs
 36516                                  ;	pop	cx			; get count back
 36517                                  ;	MOV	AX,DS			; get original segment
 36518                                  ;	ADD	AX,BX			; get new segment
 36519                                  ;	MOV	DS,AX			; in seg register
 36520                                  ;	AND	DX,0Fh			; normalize offset
 36521                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36522                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36523                                  ;						;smr;SS Override
 36524                                  ;	retn
 36525                                  
 36526                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36527                                  Align_Buffer:
 36528 0000685F 89D3                    	MOV	BX,DX			; copy offset
 36529 00006861 51                      	push	cx			; don't stomp on count
 36530 00006862 B104                    	MOV	CL,4			; bits to shift bytes->para
 36531 00006864 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36532 00006866 59                      	pop	cx			; get count back
 36533 00006867 8CD8                    	MOV	AX,DS			; get original segment
 36534 00006869 01D8                    	ADD	AX,BX			; get new segment
 36535 0000686B 8ED8                    	MOV	DS,AX			; in seg register
 36536 0000686D 83E20F                  	AND	DX,0Fh			; normalize offset
 36537 00006870 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36538 00006875 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36539                                  						;smr;SS Override
 36540 0000687A C3                      	retn
 36541                                  
 36542                                  ; 20/05/2019 - Retro DOS v4.0
 36543                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36544                                  
 36545                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36546                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36547                                  
 36548                                  ;BREAK <$WRITE - write to a file handle>
 36549                                  ;----------------------------------------------------------------------------
 36550                                  ;
 36551                                  ;   Assembler usage:
 36552                                  ;	    LDS     DX, buf
 36553                                  ;	    MOV     CX, count
 36554                                  ;	    MOV     BX, handle
 36555                                  ;	    MOV     AH, Write
 36556                                  ;	    INT     int_command
 36557                                  ;	  AX has number of bytes written
 36558                                  ;   Errors:
 36559                                  ;	    AX = write_invalid_handle
 36560                                  ;	       = write_access_denied
 36561                                  ;
 36562                                  ;   Returns in register AX
 36563                                  ;
 36564                                  ;----------------------------------------------------------------------------
 36565                                  
 36566                                  _$WRITE:
 36567 0000687B BE[F934]                	MOV	SI,DOS_WRITE
 36568 0000687E EB98                    	JMP	short ReadDo
 36569                                  
 36570                                  ;BREAK <$LSEEK - move r/w pointer>
 36571                                  ;----------------------------------------------------------------------------
 36572                                  ;
 36573                                  ;   Assembler usage:
 36574                                  ;	    MOV     DX, offsetlow
 36575                                  ;	    MOV     CX, offsethigh
 36576                                  ;	    MOV     BX, handle
 36577                                  ;	    MOV     AL, method
 36578                                  ;	    MOV     AH, LSeek
 36579                                  ;	    INT     int_command
 36580                                  ;	  DX:AX has the new location of the pointer
 36581                                  ;   Error returns:
 36582                                  ;	    AX = error_invalid_handle
 36583                                  ;	       = error_invalid_function
 36584                                  ;   Returns in registers DX:AX
 36585                                  ;
 36586                                  ;----------------------------------------------------------------------------
 36587                                  
 36588                                  ; 21/05/2019 - Retro DOS v4.0
 36589                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36590                                  
 36591                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36592                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36593                                  
 36594                                  _$LSEEK:
 36595 00006880 E8DE00                  	call	CheckOwner		; get system file entry
 36596                                  
 36597                                  	; 17/12/2022
 36598                                  ;LSeekError:
 36599                                  	;JNC	short CHKOWN_OK		;AN002;
 36600                                  	;JMP	short ReadError		;AN002; error return
 36601                                  	; 17/12/2022
 36602                                  	; 02/06/2019
 36603 00006883 72A0                    	jc	short ReadError
 36604                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36605                                  	;JNC	short CHKOWN_OK		;AN002;
 36606                                  	;JMP	short ReadError		;AN002; error return
 36607                                  
 36608                                  CHKOWN_OK:
 36609                                  					;AN002;
 36610 00006885 3C02                    	CMP	AL,2			; is the seek value correct?
 36611 00006887 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36612                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36613 00006889 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36614                                  					;smr;SS Override
 36615                                  	;mov	al,1
 36616 0000688F B001                    	mov	al,error_invalid_function ; invalid method
 36617                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36618                                  LSeekError2:
 36619 00006891 EB92                    	jmp	short ReadError
 36620                                  
 36621                                  LSeekDisp:
 36622 00006893 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36623 00006895 720A                    	JB	short LSeekStore	; just store CX:DX
 36624 00006897 771B                    	JA	short LSeekEOF		; seek from end of file
 36625                                  	;add	dx,[es:di+21]
 36626 00006899 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36627                                  	;adc	cx,[es:di+23]
 36628 0000689D 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36629                                  LSeekStore:
 36630 000068A1 89C8                    	MOV	AX,CX			; AX:DX
 36631 000068A3 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36632                                  LSeekSetpos:
 36633                                  	;mov	[es:di+21],ax
 36634 000068A4 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36635                                  	;mov	[es:di+23],dx
 36636 000068A8 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36637 000068AC E8D69B                  	call	Get_User_Stack
 36638                                  	;mov	[si+6],dx
 36639 000068AF 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36640                                  	;jmp	SYS_RET_OK		; successful return
 36641                                  	; 25/06/2019
 36642                                  	;jmp	SYS_RET_OK_clc
 36643                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36644                                  	;jmp	SYS_RET_OK_clc
 36645                                  LSeekOk:
 36646 000068B2 EBA8                    	jmp     short Read_Okj
 36647                                  
 36648                                  LSeekEOF:
 36649                                  	;;test	word [es:di+5],8000h
 36650                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36651                                  	; 21/05/2019 - Retro DOS v4.0
 36652 000068B4 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36653 000068B9 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36654                                  LOCAL_LSeek:
 36655                                  	;add	dx,[es:di+17]
 36656 000068BB 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36657                                  	;adc	cx,[es:di+19]
 36658 000068BF 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36659 000068C3 EBDC                    	JMP	short LSeekStore	; go and set the position
 36660                                  
 36661                                  Check_LSeek_Mode:
 36662                                  	;;test	word [es:di+2],8000h
 36663                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36664                                  	; 21/05/2019
 36665 000068C5 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36666 000068CA 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36667                                  	;mov	ax,[es:di+2]
 36668 000068CC 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36669                                  	;and	ax, 0F0h
 36670 000068D0 25F000                  	AND	AX,SHARING_MASK
 36671                                  	;cmp	ax,40h
 36672 000068D3 83F840                  	CMP	AX,SHARING_DENY_NONE
 36673 000068D6 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36674                                  	;cmp	ax,30h
 36675 000068D8 83F830                  	CMP	AX,SHARING_DENY_READ
 36676 000068DB 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36677                                  NET_LSEEK:
 36678                                  ;	JMP	short LOCAL_LSeek
 36679                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36680                                  	;CallInstall Net_Lseek,MultNET,33
 36681                                  	;JNC	short LSeekSetPos
 36682                                  
 36683 000068DD B82111                  	mov     ax,1121h
 36684 000068E0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36685                                  			; CX:DX = offset (in bytes) from end
 36686                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36687                                  			; SS = DOS CS
 36688                                  			; Return: CF set on error
 36689                                  			; CF clear if successful, DX:AX = new file position
 36690 000068E2 73C0                    	jnb     short LSeekSetpos
 36691                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36692                                  	;jmp	SYS_RET_ERR
 36693                                  ;LSeekError3:
 36694                                  	; 17/12/2022
 36695                                  LSeekError:
 36696                                  	;jmp	short LSeekError2
 36697                                  DupErr:	; 17/12/2022
 36698 000068E4 E95D9D                  	jmp	SYS_RET_ERR
 36699                                  
 36700                                  ;BREAK <FileTimes - modify write times on a handle>
 36701                                  ;----------------------------------------------------------------------------
 36702                                  ;
 36703                                  ;   Assembler usage:
 36704                                  ;	    MOV AH, FileTimes (57H)
 36705                                  ;	    MOV AL, func
 36706                                  ;	    MOV BX, handle
 36707                                  ;	; if AL = 1 then then next two are mandatory
 36708                                  ;	    MOV CX, time
 36709                                  ;	    MOV DX, date
 36710                                  ;	    INT 21h
 36711                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36712                                  ;	; for the handle.
 36713                                  ;
 36714                                  ;	AL=02		 get extended attributes
 36715                                  ;	   BX=handle
 36716                                  ;	   CX=size of buffer (0, return max size )
 36717                                  ;	   DS:SI query list (si=-1, selects all EA)
 36718                                  ;	   ES:DI buffer to hold EA list
 36719                                  ;
 36720                                  ;	AL=03		 get EA name list
 36721                                  ;	   BX=handle
 36722                                  ;	   CX=size of buffer (0, return max size )
 36723                                  ;	   ES:DI buffer to hold name list
 36724                                  ;
 36725                                  ;	AL=04		 set extended attributes
 36726                                  ;	   BX=handle
 36727                                  ;	   ES:DI buffer of EA list
 36728                                  ;
 36729                                  ;
 36730                                  ;   Error returns:
 36731                                  ;	    AX = error_invalid_function
 36732                                  ;	       = error_invalid_handle
 36733                                  ;
 36734                                  ;----------------------------------------------------------------------------
 36735                                  
 36736                                  ; 21/05/2019 - Retro DOS v4.0
 36737                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36738                                  
 36739                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36740                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36741                                  
 36742                                  _$FILE_TIMES:
 36743                                  	; 13/07/2018 - Retro DOS v3.0
 36744                                  
 36745                                  	; MSDOS 3.3
 36746                                  	;cmp	al,2			; correct subfunction ?
 36747                                  	;jb	short ft1
 36748                                  
 36749                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36750                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36751                                  						;SS Overr
 36752                                  	;;mov	al,1
 36753                                  	;mov	al,error_invalid_function ; give bad return
 36754                                  	;jmp	SYS_RET_ERR
 36755                                  
 36756                                  	; MSDOS 6.0
 36757 000068E7 3C02                    	cmp	al,2			; correct subfunction ?
 36758 000068E9 7340                    	jae	short inval_func
 36759                                  ;ft1:
 36760 000068EB E87300                  	call	CheckOwner		; get sft
 36761                                  	; 17/12/2022
 36762 000068EE 72F4                    	jc	short LSeekError	; bad handle
 36763                                  
 36764 000068F0 08C0                    	or	al,al			; get time/date ?
 36765 000068F2 7515                    	jnz	short ft_set_time
 36766                                  
 36767                                  ;------ here we get the time & date from the sft for the user
 36768                                  
 36769 000068F4 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36770                                  	;mov	cx,[es:di+13]
 36771 000068F5 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36772                                  	;mov	dx,[es:di+15]
 36773 000068F9 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36774 000068FD FB                      	sti
 36775 000068FE E8849B                  	call	Get_User_Stack
 36776                                  	;mov	[si+4],cx
 36777 00006901 894C04                  	mov	[si+user_env.user_CX],cx
 36778                                  	;mov	[si+6],dx
 36779 00006904 895406                  	mov	[si+user_env.user_DX],dx
 36780 00006907 EB1F                    	jmp	short ok_ret
 36781                                  
 36782                                  ;------ here we set the time in sft
 36783                                  
 36784                                  ft_set_time:
 36785 00006909 E806AA                  	call    ECritSFT
 36786                                  	;mov	[es:di+13],cx
 36787 0000690C 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36788                                  	;mov	[es:di+15],dx
 36789 00006910 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36790                                  
 36791 00006914 31C0                    	xor	ax, ax
 36792 00006916 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36793                                  
 36794                                  ;------ set the flags in SFT entry
 36795                                  	;and	word [es:di+5],0FFBFh
 36796                                  	; 18/12/2022
 36797                                  	;and	byte [es:di+5],0BFh
 36798 0000691B 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36799                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36800                                  							; mark file as dirty
 36801                                  	;or	word [es:di+5],4000h
 36802                                  	; 17/12/2022
 36803                                  	;or	byte [es:di+6],40h
 36804 00006920 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36805                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36806                                  							; ask close not to
 36807                                  							;   bother about date
 36808                                  							;   and time
 36809 00006925 E805AA                  	call	LCritSFT
 36810                                  ok_ret:
 36811                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36812                                  	; 17/12/2022
 36813 00006928 E9109D                  	jmp	SYS_RET_OK
 36814                                  	;jmp	short LSeekOk
 36815                                  
 36816                                  inval_func:
 36817                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36818 0000692B 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36819                                  						;SS Overr
 36820                                  	;mov	al,1
 36821 00006931 B001                    	mov	al,error_invalid_function ; give bad return
 36822                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36823                                  ft_error:
 36824                                  	;;jmp	SYS_RET_ERR
 36825                                  	;jmp	short LSeekError3
 36826                                  	; 17/12/2022
 36827 00006933 EBAF                    	jmp	short LSeekError
 36828                                  
 36829                                  ; 21/05/2019 - Retro DOS v4.0
 36830                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36831                                  
 36832                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36833                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36834                                  
 36835                                  ;BREAK <$DUP - duplicate a jfn>
 36836                                  ;----------------------------------------------------------------------------
 36837                                  ;
 36838                                  ;   Assembler usage:
 36839                                  ;	    MOV     BX, fh
 36840                                  ;	    MOV     AH, Dup
 36841                                  ;	    INT     int_command
 36842                                  ;	  AX has the returned handle
 36843                                  ;   Errors:
 36844                                  ;	    AX = dup_invalid_handle
 36845                                  ;	       = dup_too_many_open_files
 36846                                  ;
 36847                                  ;----------------------------------------------------------------------------
 36848                                  
 36849                                  _$DUP:
 36850 00006935 89D8                    	MOV	AX,BX			; save away old handle in AX
 36851 00006937 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36852                                  DupErrorCheck:
 36853 0000693A 72A8                    	JC	short DupErr		; nope, bye
 36854 0000693C 06                      	push	es
 36855 0000693D 57                      	push	di			; save away SFT
 36856 0000693E 5E                      	pop	si			; into convenient place DS:SI
 36857 0000693F 1F                      	pop	ds
 36858 00006940 93                      	XCHG	AX,BX			; get back old handle
 36859 00006941 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36860 00006944 729E                    	JC	short DupErr		; errors go home
 36861 00006946 E8F1C0                  	call	DOS_Dup_Direct
 36862 00006949 E800FD                  	call	pJFNFromHandle		; get pointer
 36863 0000694C 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36864 0000694F 881C                    	MOV	[SI],BL			; stuff in new SFT
 36865                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36866                                  	;jmp	SYS_RET_OK		; and go home
 36867 00006951 EBD5                    	jmp	short ok_ret
 36868                                  
 36869                                  	; 17/12/2022
 36870                                  ;DupErr:
 36871                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36872                                  	;;jmp	SYS_RET_ERR
 36873                                  	;jmp	short ft_error
 36874                                  
 36875                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36876                                  ;----------------------------------------------------------------------------
 36877                                  ;
 36878                                  ;   Assembler usage:
 36879                                  ;	    MOV     BX, fh
 36880                                  ;	    MOV     CX, newfh
 36881                                  ;	    MOV     AH, Dup2
 36882                                  ;	    INT     int_command
 36883                                  ;   Error returns:
 36884                                  ;	    AX = error_invalid_handle
 36885                                  ;
 36886                                  ;----------------------------------------------------------------------------
 36887                                  
 36888                                  _$DUP2:
 36889 00006953 53                      	push	bx
 36890 00006954 51                      	push	cx			; save source
 36891 00006955 89CB                    	MOV	BX,CX			; get one to close
 36892 00006957 E8AAFD                  	call	_$CLOSE			; close destination handle
 36893 0000695A 5B                      	pop	bx
 36894 0000695B 58                      	pop	ax			; old in AX, new in BX
 36895 0000695C E8EDFC                  	call	pJFNFromHandle		; get pointer
 36896 0000695F EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36897                                  
 36898                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36899                                  ;----------------------------------------------------------------------------
 36900                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36901                                  ;   process without the process knowing it (delete/rename of open files, for
 36902                                  ;   example), it is possible for the redirector to issue a call to a handle
 36903                                  ;   that it soes not rightfully own. We check here to make sure that the
 36904                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36905                                  ;   SFFromHandle to really make sure that the SFT is good.
 36906                                  ;
 36907                                  ;	ENTRY	BX has the handle
 36908                                  ;		User_ID is the current user
 36909                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36910                                  ;		Carry Set => AX has error code
 36911                                  ;	USES	none
 36912                                  ;----------------------------------------------------------------------------
 36913                                  
 36914                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36915                                  	; 21/05/2019 - Retro DOS v4.0
 36916                                  CheckOwner:
 36917                                  	; 13/07/2018 - Retro DOS v3.0
 36918                                  
 36919 00006961 E805FD                  	call	SFFromHandle
 36920 00006964 721B                    	jc	short co_ret_label	; retc
 36921                                  
 36922 00006966 50                      	push	ax
 36923                                  
 36924                                  	; MSDOS 6.0
 36925                                  
 36926                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36927                                  ;SR; are shared across multiple VMs in win386.
 36928                                  
 36929 00006967 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36930 0000696D 7404                    	jz	short no_win386		;win386 is not present
 36931 0000696F 31C0                    	xor	ax,ax			;set the zero flag
 36932 00006971 EB08                    	jmp	short _skip_win386	
 36933                                  
 36934                                  no_win386:
 36935 00006973 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36936                                  	;cmp	ax,[es:di+47]
 36937 00006977 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36938                                  
 36939                                  _skip_win386:
 36940 0000697B 58                      	pop	ax
 36941                                  	
 36942                                  	; 17/12/2022
 36943 0000697C 7403                    	jz	short co_ret_label
 36944                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36945                                  	;jnz	short CheckOwner_err
 36946                                  	;retn
 36947                                  	
 36948                                  CheckOwner_err:
 36949                                  	;mov	al,6
 36950 0000697E B006                    	mov	al,error_invalid_handle
 36951 00006980 F9                      	stc
 36952                                  
 36953                                  co_ret_label:
 36954 00006981 C3                      	retn
 36955                                  
 36956                                  ;============================================================================
 36957                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36958                                  ;============================================================================
 36959                                  ; Retro	DOS v3.0 - 11/07/2018
 36960                                  ; 21/05/2019 - Retro DOS v4.0
 36961                                  
 36962                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36963                                  ;	NAME	MACRO
 36964                                  
 36965                                  ;	Microsoft Confidential
 36966                                  ;	Copyright (C) Microsoft Corporation 1991
 36967                                  ;	All Rights Reserved.
 36968                                  
 36969                                  ;**	MACRO.ASM
 36970                                  ;
 36971                                  ;	$AssignOper
 36972                                  ;	FIND_DPB
 36973                                  ;	InitCDS
 36974                                  ;	$UserOper
 36975                                  ;	GetVisDrv
 36976                                  ;	GetThisDrv
 36977                                  ;	GetCDSFromDrv
 36978                                  ;
 36979                                  ;   Revision history:
 36980                                  ;
 36981                                  ;	Created: MZ 4 April 1983
 36982                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36983                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36984                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36985                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36986                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36987                                  ;				    aliasing.
 36988                                  ;
 36989                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36990                                  ;   each valid drive letter the text of the current directory on that drive.
 36991                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36992                                  ;   be at the root. A current directory is either the raw local directory
 36993                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36994                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36995                                  ;
 36996                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36997                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36998                                  ;   this and all * are expanded into ?'s.
 36999                                  ;
 37000                                  ;   The second part of name translation involves subtree aliasing. A list of
 37001                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37002                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37003                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37004                                  ;   replaced with the other subtree in the pair.
 37005                                  ;
 37006                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37007                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37008                                  ;   The output of the previous translation is examined to see if any of the
 37009                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37010                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37011                                  ;   'mount' one device under another.
 37012                                  ;
 37013                                  ;   The final form of name translation involves the mapping of a user's
 37014                                  ;   logical drive number into the internal physical drive. This is
 37015                                  ;   accomplished by converting the drive number into letter:CON, performing
 37016                                  ;   the above translation and then converting the character back into a drive
 37017                                  ;   number.
 37018                                  ;
 37019                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37020                                  ;   take a path and form the real text of the pathname with all . and ..
 37021                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37022                                  ;   TransPath.
 37023                                  ;
 37024                                  ;	A000	version 4.00  Jan. 1988
 37025                                  
 37026                                  ;Installed = TRUE
 37027                                  
 37028                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37029                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37030                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37031                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37032                                  ;					; current drive)
 37033                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37034                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37035                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37036                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37037                                  ;	I_need	MYNAME,16		; machine name
 37038                                  ;	I_need	MYNUM,WORD		; machine number
 37039                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37040                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37041                                  ;	I_need	DrvErr,BYTE		; drive error
 37042                                  
 37043                                  ;BREAK <$AssignOper -- Set up a Macro>
 37044                                  ;----------------------------------------------------------------------------
 37045                                  ; Inputs:
 37046                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37047                                  ;	AL = 01 set assign mode 		    (SetMode)
 37048                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37049                                  ;	AL = 03 Define Macro (attch start)
 37050                                  ;	    BL = Macro type
 37051                                  ;	       = 0 alias
 37052                                  ;	       = 1 file/device
 37053                                  ;	       = 2 drive
 37054                                  ;	       = 3 Char device -> network
 37055                                  ;	       = 4 File device -> network
 37056                                  ;	    DS:SI -> ASCIZ source name
 37057                                  ;	    ES:DI -> ASCIZ destination name
 37058                                  ;	AL = 04 Cancel Macro
 37059                                  ;	    DS:SI -> ASCIZ source name
 37060                                  ;	AL = 05 Modified get attach list entry
 37061                                  ;	AL = 06 Get ifsfunc item
 37062                                  ;	AL = 07 set in_use of a drive's CDS
 37063                                  ;	     DL = drive number, 0=default  0=A,,
 37064                                  ;	AL = 08 reset in_use of a drive's CDS
 37065                                  ;	     DL = drive number, 0=A, 1=B,,,
 37066                                  ; Function:
 37067                                  ;	Do macro stuff
 37068                                  ; Returns:
 37069                                  ;	Std Xenix style error return
 37070                                  ;----------------------------------------------------------------------------
 37071                                  
 37072                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37073                                  	; 21/05/2019 - Retro DOS v4.0
 37074                                  _$AssignOper:
 37075                                  	; MSDOS 6.0
 37076 00006982 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37077 00006984 7525                    	JNZ	short chk08		      ; no			;AN000;
 37078                                  srinuse:								;AN000;
 37079 00006986 50                      	PUSH	AX			      ; save al 		;AN000;
 37080 00006987 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37081 00006989 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37082 0000698C 58                      	POP	AX			      ; 			;AN000;
 37083 0000698D 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37084                                  	;cmp	word [si+45h],0
 37085 0000698F 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37086 00006993 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37087 00006995 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37088 00006997 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37089                                  	;or	word [si+43h],4000h
 37090                                  	; 17/12/2022
 37091                                  	;or	byte [si+44h],40h
 37092 00006999 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37093                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37094 0000699D EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37095                                  resetdrv:
 37096                                  	;and	word [si+43h],0BFFFh									;AN000;
 37097                                  	; 18/12/2022
 37098 0000699F 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37099                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37100 000069A3 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37101                                  
 37102                                  	; 17/12/2022
 37103                                  baddrv: 								;AN000;
 37104 000069A5 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37105                                  
 37106                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37107                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37108                                  	; 17/12/2022
 37109                                  	; 21/05/2019
 37110                                  ASS_ERR:
 37111 000069A8 E9999C                  	jmp	SYS_RET_ERR
 37112                                  
 37113                                  chk08:									;AN000;
 37114 000069AB 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37115 000069AD 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37116                                  
 37117                                    ;IF	NOT INSTALLED
 37118                                  	;transfer NET_ASSOPER
 37119                                    ;ELSE
 37120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37121 000069AF 50                      	PUSH	AX
 37122                                  	;mov	ax,111Eh
 37123                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37124 000069B0 B81E11                  	mov	ax,(MultNET*256)+30
 37125 000069B3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37126                                  			; SS = DOS CS
 37127                                  			; STACK: WORD function to execute
 37128                                  			; Return: CF set on error, AX = error code
 37129                                  			; STACK unchanged
 37130 000069B5 5B                      	POP	BX			; Don't zap error code in AX
 37131 000069B6 72F0                    	JC	short ASS_ERR
 37132                                  okdone:
 37133 000069B8 E9809C                  	jmp	SYS_RET_OK
 37134                                  
 37135                                  	; 17/12/2022
 37136                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37137                                  ;ASS_ERR:
 37138                                  	;jmp	SYS_RET_ERR
 37139                                  
 37140                                    ;ENDIF
 37141                                  
 37142                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37143                                  ;----------------------------------------------------------------------------
 37144                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37145                                  ;
 37146                                  ;	ENTRY	AL has drive number A = 0
 37147                                  ;	EXIT	'C' set
 37148                                  ;		    No DPB for this drive number
 37149                                  ;		'C' clear
 37150                                  ;		    DS:SI points to DPB for drive
 37151                                  ;	USES	SI, DS, Flags
 37152                                  ;----------------------------------------------------------------------------
 37153                                  
 37154                                  	; 21/05/2019 - Retro DOS v4.0
 37155                                  FIND_DPB:
 37156 000069BB 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37157                                  fdpb5:	
 37158 000069C0 83FEFF                  	CMP	SI,-1
 37159 000069C3 7409                    	JZ	short fdpb10
 37160 000069C5 3A04                    	cmp	al,[si]
 37161                                  	;CMP	AL,[SI+DPB.DRIVE]
 37162 000069C7 7406                    	jz	short ret_label15	; Carry clear (retz)
 37163                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37164                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37165 000069C9 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37166 000069CC EBF2                    	JMP	short fdpb5
 37167                                  fdpb10:	
 37168 000069CE F9                      	STC
 37169                                  ret_label15:
 37170 000069CF C3                      	retn
 37171                                  
 37172                                  ;	Break <InitCDS - set up an empty CDS>
 37173                                  ;----------------------------------------------------------------------------
 37174                                  ;**	InitCDS - Setup an Empty CDS
 37175                                  ;
 37176                                  ;	ENTRY	ThisCDS points to CDS
 37177                                  ;		AL has uppercase drive letter
 37178                                  ;	EXIT	ThisCDS is now empty
 37179                                  ;		(ES:DI) = CDS
 37180                                  ;		'C' set if no DPB associated with drive
 37181                                  ;	USES	AH,ES,DI, Flags
 37182                                  ;----------------------------------------------------------------------------
 37183                                  
 37184                                  ; 21/05/2019 - Retro DOS v4.0
 37185                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37186                                  
 37187                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37188                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37189                                  
 37190                                  InitCDS:
 37191                                  	; 19/08/2018
 37192                                  	; 05/08/2018 - Retro DOS v3.0
 37193                                  	; MSDOS 6.0
 37194 000069D0 50                      	push	ax			; save (AL) for caller
 37195 000069D1 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37196                                  	;mov	word [es:di+67],0
 37197 000069D6 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37198 000069DC 2C40                    	SUB	AL,"A"-1                ; A = 1
 37199 000069DE 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37200 000069E3 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37201 000069E5 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37202 000069E6 50                      	PUSH	AX			; save drive number for later
 37203 000069E7 0441                    	add	al,"A"
 37204 000069E9 B43A                    	MOV	AH,':'
 37205 000069EB 268905                  	mov	[ES:DI],ax
 37206                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37207                                  	;mov	ax,"\"
 37208                                  	;mov	[es:di+2],ax
 37209                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37210 000069EE 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37211                                  	;or	word [es:di+67],4000h
 37212                                  	;or	byte [es:di+68],40h
 37213 000069F4 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37214 000069F9 29C0                    	sub	ax,ax
 37215                                  	;MOV	[es:di+73],ax ; 0
 37216 000069FB 26894549                	MOV	[ES:DI+curdir.ID],ax
 37217                                  	;mov	[es:di+75],ax ; 0
 37218 000069FF 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37219 00006A03 B002                    	mov	al,2
 37220                                  	;mov	[es:di+79],aX ; 2
 37221 00006A05 2689454F                	MOV	[ES:DI+curdir.end],ax
 37222 00006A09 58                      	POP	AX			; (al) = drive number
 37223 00006A0A 1E                      	push	ds
 37224 00006A0B 56                      	push	si
 37225 00006A0C E8ACFF                  	call	FIND_DPB
 37226 00006A0F 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37227                                  	;mov	[es:di+69],si
 37228 00006A11 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37229                                  	;mov	[es:di+71],ds
 37230 00006A15 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37231                                  icds5:	
 37232 00006A19 5E                      	pop	si
 37233 00006A1A 1F                      	pop	ds
 37234                                  icdsx:	
 37235 00006A1B 58                      	pop	ax
 37236                                  RET45:
 37237 00006A1C C3                      	retn
 37238                                  
 37239                                  ;Break <$UserOper - get/set current user ID (for net)>
 37240                                  ;----------------------------------------------------------------------------
 37241                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37242                                  ;	maintain this string and do no verifications.
 37243                                  ;
 37244                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37245                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37246                                  ;		DS:DX is user string pointer (calls 1,2)
 37247                                  ;		ES:DI is user buffer (call 3)
 37248                                  ;		BX is assign index (calls 2,3,4,5)
 37249                                  ;		CX is user number (call 1)
 37250                                  ;		DX is flag word (call 4)
 37251                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37252                                  ;			and user CX is set to the user number
 37253                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37254                                  ;		If AL = 5 then DX is flag word
 37255                                  ;----------------------------------------------------------------------------
 37256                                  
 37257                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37258                                  	; 21/05/2019 - Retro DOS v4.0
 37259                                  _$UserOper:
 37260                                  	; 05/08/2018 - Retro DOS v3.0
 37261                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37262 00006A1D 50                      	PUSH	AX
 37263 00006A1E 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37264 00006A20 58                      	POP	AX
 37265 00006A21 7211                    	JB	short UserGet 		; return to user the string
 37266 00006A23 742E                    	JZ	short UserSet 		; set the current user
 37267 00006A25 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37268 00006A27 763D                    	JBE	short UserPrint		; yep
 37269                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37270 00006A29 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37271                                  					; Extended Error Locus
 37272                                  	;error	error_invalid_function	; not 0,1,2,3
 37273                                  	;mov	al,1
 37274 00006A2F B001                    	MOV	AL,error_invalid_function
 37275                                  useroper_error:
 37276                                  	; 17/12/2022
 37277                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37278 00006A31 E9109C                  	JMP	SYS_RET_ERR
 37279                                  	;jmp	short ASS_ERR
 37280                                  
 37281                                  UserGet:
 37282                                  ; Transfer MYNAME to DS:DX
 37283                                  ; Set Return CX to MYNUM
 37284 00006A34 1E                      	PUSH	DS			; switch registers
 37285 00006A35 07                      	POP	ES
 37286 00006A36 89D7                    	MOV	DI,DX			; destination
 37287 00006A38 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37288 00006A3D E8459A                  	call	Get_User_Stack
 37289                                  	;mov	[si+4],cx
 37290 00006A40 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37291 00006A43 16                      	push	ss			; point to DOSDATA
 37292 00006A44 1F                      	pop	ds
 37293 00006A45 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37294                                  UserMove:
 37295 00006A48 B90F00                  	MOV	CX,15
 37296 00006A4B F3A4                    	REP	MOVSB			; blam.
 37297 00006A4D 31C0                    	XOR	AX,AX			; 16th byte is 0
 37298 00006A4F AA                      	STOSB
 37299                                  UserBye:
 37300 00006A50 E9E89B                  	jmp	SYS_RET_OK		; no errors here
 37301                                  
 37302                                  UserSet:
 37303                                  ; Transfer DS:DX to MYNAME
 37304                                  ; CX to MYNUM
 37305 00006A53 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37306 00006A58 89D6                    	MOV	SI,DX			; user space has source
 37307 00006A5A 16                      	push	ss
 37308 00006A5B 07                      	pop	es
 37309 00006A5C BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37310 00006A5F 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37311 00006A64 EBE2                    	JMP	short UserMove
 37312                                  
 37313                                  UserPrint:
 37314                                  
 37315                                    ;IF NOT Installed
 37316                                    ;	transfer PRINTER_GETSET_STRING
 37317                                    ;ELSE
 37318 00006A66 50                      	PUSH	AX
 37319                                  	;mov	ax,111Fh
 37320                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37321 00006A67 B81F11                  	mov	ax,(MultNET<<8)|31
 37322 00006A6A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37323                                  			; STACK: WORD function
 37324                                  			; Return: CF set on error, AX = error code
 37325                                  			; STACK unchanged
 37326 00006A6C 5A                      	POP	DX			; Clean stack
 37327                                  	;JNC	short OKPA
 37328 00006A6D 73E1                    	jnc	short UserBye ; 21/05/2019
 37329                                  	; 17/12/2022
 37330 00006A6F EBC0                    	jmp	short useroper_error
 37331                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37332                                  	;jnb     short OKPA
 37333                                  	;jmp     short useroper_error
 37334                                  
 37335                                  	; 17/12/2022
 37336                                  ;OKPA:
 37337                                  ;	jmp	short UserBye
 37338                                  
 37339                                    ;ENDIF
 37340                                  
 37341                                  
 37342                                  ;Break	<GetVisDrv - return visible drive>
 37343                                  ;----------------------------------------------------------------------------
 37344                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37345                                  ;
 37346                                  ;   Inputs:	AL has drive identifier (0=default)
 37347                                  ;   Outputs:	Carry Set - invalid drive/macro
 37348                                  ;		Carry Clear - AL has physical drive (0=A)
 37349                                  ;		    ThisCDS points to CDS
 37350                                  ;   Registers modified: AL
 37351                                  ;----------------------------------------------------------------------------
 37352                                  
 37353                                  	; 21/05/2019 - Retro DOS v4.0
 37354                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37355                                  
 37356                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37357                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37358                                  GetVisDrv:
 37359                                  	; 05/08/2018 - Retro DOS v3.0
 37360                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37361 00006A71 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37362 00006A74 72A6                    	jc	short RET45
 37363 00006A76 1E                      	push	ds
 37364 00006A77 56                      	push	si
 37365 00006A78 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37366                                  	;test	word [si+67],2000h
 37367                                  	; 17/12/2022
 37368                                  	;test	byte [si+68],20h
 37369 00006A7D F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37370                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37371 00006A81 5E                      	pop	si
 37372 00006A82 1F                      	pop	ds
 37373 00006A83 7497                    	jz	short RET45		; if not spliced, return OK
 37374                                  	; MSDOS 6.0
 37375                                  	;mov	byte [ss:DrvErr],0Fh
 37376 00006A85 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37377 00006A8B F9                      	STC				; signal error
 37378 00006A8C C3                      	retn
 37379                                  
 37380                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37381                                  ;----------------------------------------------------------------------------
 37382                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37383                                  ;	macro pointer
 37384                                  ;
 37385                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37386                                  ;   Outputs:
 37387                                  ;		Carry Set - invalid drive/macro
 37388                                  ;		Carry Clear - AL has physical drive (0=A)
 37389                                  ;		   ThisCDS points to macro
 37390                                  ;   Registers modified: AL
 37391                                  ;----------------------------------------------------------------------------
 37392                                  
 37393                                  	; 21/05/2019 - Retro DOS v4.0
 37394                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37395                                  
 37396                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37397                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37398                                  GETTHISDRV:
 37399                                  	; 05/08/2018
 37400                                  	; 12/07/2018 - Retro DOS v3.0
 37401                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37402                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37403 00006A8D 08C0                    	OR	AL,AL			; are we using default drive?
 37404 00006A8F 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37405 00006A91 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37406                                  	;INC	ax			; Counteract next instruction
 37407                                  	; 04/09/2018
 37408                                  	;inc	al
 37409                                  	; 07/12/2022
 37410 00006A95 40                      	inc	ax
 37411                                  GTD10:	
 37412                                  	;DEC	AX
 37413                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37414 00006A96 48                      	dec	ax			; 0 = A
 37415                                  	;dec	al
 37416 00006A97 1E                      	PUSH	DS			; save world
 37417 00006A98 56                      	PUSH	SI
 37418                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37419 00006A99 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37420 00006A9F 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37421 00006AA5 7420                    	JZ	SHORT GTD20		; Logical
 37422 00006AA7 50                      	PUSH	AX
 37423 00006AA8 06                      	PUSH	ES
 37424 00006AA9 57                      	PUSH	DI
 37425 00006AAA 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37426                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37427 00006AB1 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37428 00006AB6 0441                    	ADD	AL,'A'
 37429 00006AB8 E815FF                  	CALL	InitCDS			; InitCDS(c);
 37430                                  	;test	word [es:di+67],4000h
 37431                                  	; 17/12/2022
 37432                                  	;test	byte [es:di+68],40h
 37433 00006ABB 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37434                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37435 00006AC0 5F                      	POP	DI
 37436 00006AC1 07                      	POP	ES
 37437 00006AC2 58                      	POP	AX
 37438 00006AC3 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37439 00006AC5 EB18                    	JMP	SHORT GTDX		; carry clear
 37440                                  GTD20:
 37441 00006AC7 E81800                  	CALL	GetCDSFromDrv
 37442 00006ACA 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37443                                  	;test	word [si+43h],4000h
 37444                                  	; 17/12/2022
 37445                                  	;test	byte [si+44h],40h
 37446 00006ACC F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37447                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37448 00006AD0 750D                    	JNZ	SHORT GTDX		; carry clear
 37449                                  GTD30:	
 37450                                  	; 21/05/2019
 37451                                  	; MSDOS 6.0
 37452 00006AD2 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37453 00006AD4 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37454                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37455 00006AD8 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37456 00006ADE F9                      	STC
 37457                                  GTDX:	
 37458 00006ADF 5E                      	POP	SI			; restore world
 37459 00006AE0 1F                      	POP	DS
 37460 00006AE1 C3                      	RETN
 37461                                   
 37462                                  
 37463                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37464                                  ;----------------------------------------------------------------------------
 37465                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37466                                  ;	pointer, returning an error if the drive number is greater than the
 37467                                  ;	number of CDS's
 37468                                  ;
 37469                                  ;   Inputs:	AL is physical unit # A=0...
 37470                                  ;   Outputs:	Carry Set if Bad Drive
 37471                                  ;		Carry Clear
 37472                                  ;		    DS:SI -> CDS
 37473                                  ;		    [THISCDS] = DS:SI
 37474                                  ;   Registers modified: DS,SI
 37475                                  ;----------------------------------------------------------------------------
 37476                                  
 37477                                  	; 21/05/2019 - Retro DOS v4.0
 37478                                  GetCDSFromDrv:
 37479 00006AE2 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37480                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37481                                  	;STC				; signal error
 37482                                  	;RETN				; bye
 37483                                  	; 23/09/2023
 37484 00006AE7 F5                      	cmc	; cf=1 <-> cf=0
 37485 00006AE8 7217                    	jc	short GetCDS_retn
 37486                                  GetCDS:
 37487                                  	; 23/09/2023
 37488                                  	;PUSH	BX
 37489 00006AEA 50                      	PUSH	AX
 37490 00006AEB 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37491                                  	;mov	bl,81 ; MSDOS 3.3
 37492                                  	;mov	bl,88 ; MSDOS 6.0 
 37493                                  	; 23/09/2023
 37494                                  	;MOV	BL,curdir.size		; size in convenient spot
 37495                                  	;MUL	BL			; get net offset
 37496 00006AF0 B458                    	mov	ah,curdir.size
 37497 00006AF2 F6E4                    	mul	ah
 37498 00006AF4 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 37499 00006AF6 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37500 00006AFB 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37501 00006B00 58                      	POP	AX
 37502                                  	; 23/09/2023
 37503                                  	;POP	BX
 37504                                  	; (cf must be 0 here) ; *
 37505                                  	;CLC				; no error
 37506                                  GetCDS_retn:
 37507 00006B01 C3                      	RETN				; bye!
 37508                                  
 37509                                  ;============================================================================
 37510                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37511                                  ;============================================================================
 37512                                  ; Retro	DOS v3.0 - 12/07/2018
 37513                                  ; 22/05/2019 - Retro DOS v4.0
 37514                                  
 37515                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37516                                  ;----------------------------------------------------------------------------
 37517                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37518                                  ;       gritty substitution.
 37519                                  ;
 37520                                  ;   Inputs:     DS:DX - pointer to FCB
 37521                                  ;               ES:DI - point to destination
 37522                                  ;   Outputs:    Carry Set - invalid path in final map
 37523                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37524                                  ;                   Sattrib is set from possibly extended FCB
 37525                                  ;                   ExtFCB set if extended FCB found
 37526                                  ;   Registers modified: most
 37527                                  ;----------------------------------------------------------------------------
 37528                                  
 37529                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37530                                  TransFCB:
 37531                                  	; 22/05/2019 - Retro DOS v4.0
 37532                                  	; 12/07/2018 - Retro DOS v3.0
 37533                                  	;LocalVar FCBTmp,16
 37534                                  	;ENTER
 37535 00006B02 55                      	push	bp
 37536 00006B03 89E5                    	mov	bp,sp
 37537                                  	;sub	sp,15	; MSDOS 3.3
 37538 00006B05 83EC10                  	sub	sp,16	; MSDOS 6.0
 37539 00006B08 16                      	push	ss
 37540 00006B09 07                      	pop	es
 37541 00006B0A 06                      	push	es
 37542 00006B0B 57                      	push	di
 37543                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37544                                  	;LEA	DI,FCBTmp 
 37545 00006B0C 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37546 00006B0F 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37547 00006B15 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37548 00006B1B E838B1                  	call	GetExtended             ; get FCB, extended or not
 37549                                  	; 06/12/2022
 37550 00006B1E 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37551 00006B20 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37552 00006B23 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37553 00006B27 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37554                                  GetDrive:
 37555 00006B2D AC                      	lodsb				; get drive byte
 37556 00006B2E E85CFF                  	call	GETTHISDRV
 37557 00006B31 722A                    	jc	short BadPack
 37558 00006B33 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 37559                                  
 37560                                  ; Scan the source to see if there are any illegal chars
 37561                                  
 37562                                  	;mov	bx,CharType		; load lookup table
 37563 00006B36 B90B00                  	mov	cx,11
 37564 00006B39 56                      	push	si			; back over name, ext
 37565                                  FCBScan:
 37566 00006B3A AC                      	lodsb				; get a byte
 37567                                  	
 37568                                  	; 09/08/2018
 37569                                  	;;xlat	byte [es:bx]
 37570                                  	;es	xlat
 37571                                  
 37572                                  	; 22/05/2019 - Retro DOS v4.0	
 37573 00006B3B E836E5                  	call	GetCharType		; get flags
 37574                                  
 37575                                  	;test	al,8	
 37576 00006B3E A808                    	test	al,FFCB
 37577 00006B40 741B                    	jz	short BadPack
 37578                                  NextCh: 
 37579 00006B42 E2F6                    	loop	FCBScan
 37580 00006B44 5E                      	pop	si
 37581 00006B45 89FB                    	mov	bx,di
 37582 00006B47 E864B5                  	call	PackName                ; crunch the path
 37583 00006B4A 5F                      	pop	di			; get original destination
 37584 00006B4B 07                      	pop	es
 37585 00006B4C 16                      	push	ss			; get DS addressability
 37586 00006B4D 1F                      	pop	ds
 37587                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37588                                  	;LEA	SI,FCBTmp		; point at new pathname
 37589 00006B4E 8D76F0                  	lea	si,[bp-16]
 37590 00006B51 803F00                  	cmp	byte [bx],0
 37591 00006B54 7407                    	jz	short BadPack
 37592 00006B56 55                      	push	bp
 37593 00006B57 E80E00                  	call	TransPathSet            ; convert the path
 37594 00006B5A 5D                      	pop	bp
 37595 00006B5B 7303                    	jnc	short FCBRet		; bye with transPath error code
 37596                                  BadPack:
 37597 00006B5D F9                      	STC
 37598                                  	;mov	al,3
 37599 00006B5E B003                    	MOV     AL,error_path_not_found
 37600                                  FCBRet: 
 37601                                  	;LEAVE
 37602 00006B60 89EC                    	mov	sp,bp
 37603 00006B62 5D                      	pop	bp
 37604                                  TransPath_retn:
 37605 00006B63 C3                      	retn
 37606                                  
 37607                                  ; 12/07/2018 - Retro DOS v3.0
 37608                                  
 37609                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37610                                  ;----------------------------------------------------------------------------
 37611                                  ;
 37612                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37613                                  ;       substitution, insertion of current directory and fixing . and ..
 37614                                  ;       entries. Perform splicing. Allow input string to match splice
 37615                                  ;       exactly.
 37616                                  ;
 37617                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37618                                  ;       matches splice.
 37619                                  ;
 37620                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37621                                  ;
 37622                                  ;   The following anomalous behaviour is required:
 37623                                  ;
 37624                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37625                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37626                                  ;       Raw net I/O sets ThisCDS => NULL.
 37627                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37628                                  ;
 37629                                  ;   Other behaviour:
 37630                                  ;
 37631                                  ;       ThisCDS set up.
 37632                                  ;       FatRead done on local CDS.
 37633                                  ;       ValidateCDS done on local CDS.
 37634                                  ;
 37635                                  ;   Brief flowchart:
 37636                                  ;
 37637                                  ;       if fSharing then
 37638                                  ;           set up DummyCDS (ThisCDS)
 37639                                  ;           canonicalize (sets cMeta)
 37640                                  ;           splice
 37641                                  ;           fatRead
 37642                                  ;           return
 37643                                  ;       if \\ or d:\\ lead then
 37644                                  ;           set up null CDS (ThisCDS)
 37645                                  ;           canonicalize (sets cMeta)
 37646                                  ;           return
 37647                                  ;       if device then
 37648                                  ;           set up dummyCDS (ThisCDS)
 37649                                  ;           canonicalize (sets cMeta)
 37650                                  ;           return
 37651                                  ;       if file then
 37652                                  ;           getCDS (sets (ThisCDS) from name)
 37653                                  ;           validateCDS (may reset current dir)
 37654                                  ;           Copy current dir
 37655                                  ;           canonicalize (set cMeta)
 37656                                  ;           splice
 37657                                  ;           generate correct CDS (ThisCDS)
 37658                                  ;           if local then
 37659                                  ;               fatread
 37660                                  ;           return
 37661                                  ;
 37662                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37663                                  ;               DI - point to buffer in DOSDATA
 37664                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37665                                  ;                   syntax, etc. or user FAILed to I 24.
 37666                                  ;               WFP_Start - points to beginning of buffer
 37667                                  ;               Curr_Dir_End - points to end of current dir in path
 37668                                  ;               DS - DOSDATA
 37669                                  ;   Registers modified: most
 37670                                  ;
 37671                                  ;----------------------------------------------------------------------------
 37672                                  
 37673                                  ; 22/05/2019
 37674                                  ; 13/05/2019 - Retro DOS v4.0
 37675                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37676                                  
 37677                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37678                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37679                                  
 37680                                  TransPath:
 37681 00006B64 30C0                    	XOR     AL,AL
 37682 00006B66 EB02                    	JMP     SHORT SetSplice
 37683                                  TransPathSet:
 37684 00006B68 B0FF                    	MOV     AL,-1
 37685                                  SetSplice:
 37686 00006B6A 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37687 00006B6E B0FF                    	MOV     AL,-1
 37688                                  TransPathNoSet:
 37689 00006B70 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37690 00006B74 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37691 00006B7A 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37692 00006B7F 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37693 00006B86 16                      	push	ss
 37694 00006B87 07                      	pop	es
 37695                                  	;lea	bp,[di+134]
 37696 00006B88 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37697                                  ;
 37698                                  ; if this is through the server dos call, fsharing is set. We set up a
 37699                                  ; dummy cds and let the operation go.
 37700                                  ;
 37701 00006B8C 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37702 00006B92 7435                    	JZ	short CheckUNC		; skip to UNC check
 37703                                  ;
 37704                                  ; ES:DI point to buffer
 37705                                  ;
 37706 00006B94 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37707 00006B97 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37708 00006B9A 722A                    	jc	short NoPath
 37709 00006B9C E80A03                  	CALL	TextFromDrive		; drop in new
 37710 00006B9F 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37711 00006BA2 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37712 00006BA5 72BC                    	jc	short TransPath_retn	; errors
 37713                                  ;
 37714                                  ; Perform splices for net guys.
 37715                                  ;
 37716 00006BA7 16                      	push	ss
 37717 00006BA8 1F                      	pop	ds
 37718 00006BA9 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37719 00006BAD F606[7105]FF            	TEST	byte [FSPLICE],-1
 37720 00006BB2 7403                    	JZ	short NoServerSplice
 37721 00006BB4 E83102                  	CALL    Splice
 37722                                  NoServerSplice:
 37723 00006BB7 16                      	push	ss
 37724 00006BB8 1F                      	pop	ds                      ; for FATREAD
 37725 00006BB9 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37726 00006BBD E852A7                  	call	ECritDisk
 37727 00006BC0 E807EB                  	call	FATREAD_CDS
 37728 00006BC3 E867A7                  	call	LCritDisk
 37729                                  NoPath:
 37730                                  	;mov	al,3
 37731 00006BC6 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37732 00006BC8 C3                      	retn				; any errors are in Carry flag
 37733                                  
 37734                                  ; Let the network decide if the name is for a spooled device. It will map
 37735                                  ; the name if so.
 37736                                  
 37737                                  CheckUNC:
 37738 00006BC9 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37739                                  	;CallInstall NetSpoolCheck,MultNET,35
 37740 00006BD0 B82311                  	mov	ax,1123h
 37741 00006BD3 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37742                                  			; DS:SI -> ASCIZ filename to canonicalize
 37743                                  			; ES:DI -> 128-byte buffer for qualified name
 37744                                  			; Return: CF set if not resolved
 37745 00006BD5 7329                    	JNC	short UNCDone
 37746                                  
 37747                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37748                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37749                                  ; input, then the name has been changed to the remote spooler by the above net
 37750                                  ; call. Also, there may be a drive in front of the \\.
 37751                                  
 37752                                  NO_CHECK:
 37753 00006BD7 E8B902                  	CALL    DriveFromText		; eat drive letter
 37754 00006BDA 50                      	PUSH    AX                      ; save it
 37755 00006BDB 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37756 00006BDD E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 37757 00006BE0 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37758 00006BE2 E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 37759 00006BE5 751F                    	JNZ	short CheckDevice	; not a path char
 37760 00006BE7 38C4                    	CMP     AH,AL                   ; are they same?
 37761 00006BE9 751B                    	JNZ	short CheckDevice	; nope
 37762                                  
 37763                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37764                                  ; local machine root path
 37765                                  
 37766 00006BEB 58                      	POP     AX
 37767 00006BEC A5                      	MOVSW                           ; get the lead \\.
 37768                                  UNCCpy:
 37769 00006BED AC                      	LODSB                           ; get a byte
 37770 00006BEE E84BE4                   	call	UCase                   ;AN000;; convert the char
 37771 00006BF1 08C0                    	OR      AL,AL
 37772 00006BF3 740E                    	JZ	short UNCTerm		; end of string. All done.
 37773 00006BF5 E899E4                  	call    PATHCHRCMP              ; is it a path char?
 37774 00006BF8 89FB                    	MOV     BX,DI                   ; backup position
 37775 00006BFA AA                      	STOSB
 37776 00006BFB 75F0                    	JNZ	short UNCCpy		; no, go copy
 37777 00006BFD E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37778                                  UNCDone:
 37779 00006C00 16                      	push	ss
 37780 00006C01 1F                      	pop	ds
 37781 00006C02 C3                       	retn				; return error code
 37782                                  UNCTerm:
 37783 00006C03 AA                      	STOSB                           ;AN000;
 37784 00006C04 EBFA                    	JMP	short UNCDone		;AN000;
 37785                                  
 37786                                  CheckDevice:
 37787                                  
 37788                                  ; Check DS:SI for device. First eat any path stuff
 37789                                  
 37790 00006C06 58                      	POP     AX                      ; retrieve drive info
 37791 00006C07 803C00                  	CMP     BYTE [SI],0		; check for null file
 37792 00006C0A 7504                    	JNZ	short CheckPath
 37793                                  	;mov	al,2 
 37794 00006C0C B002                    	MOV     AL,error_file_not_found ; bad file error
 37795 00006C0E F9                      	STC                             ; signal error on null input
 37796 00006C0F C3                      	RETN				; bye!
 37797                                  CheckPath:
 37798 00006C10 50                      	push	ax
 37799 00006C11 55                      	push	bp			; save drive number
 37800                                  
 37801                                  
 37802                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37803                                  %if 0
 37804                                  	; MSDOS 6.0
 37805                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37806                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37807                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37808                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37809                                  ;;;end up having a 5D in the opcode's displacement field. The
 37810                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37811                                  ;;;
 37812                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37813                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37814                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37815                                  ;;;
 37816                                  ;;;More info:
 37817                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37818                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37819                                  ;;;
 37820                                  	call	no5Dshere
 37821                                  start5Dhack:
 37822                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37823                                  backfrom5Dhack:
 37824                                  
 37825                                  %endif
 37826                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37827                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37828 00006C12 E8FED6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37829                                  
 37830 00006C15 5D                      	pop	bp
 37831 00006C16 58                      	pop	ax			; get drive letter back
 37832 00006C17 731C                    	JNC	short DoFile		; yes we have a file.
 37833                                  
 37834                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37835                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37836                                  ; call.
 37837                                  
 37838 00006C19 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37839 00006C1F E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37840 00006C22 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37841                                  
 37842                                  ; Now that we have noted that we have a device, we put it into a form that
 37843                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37844                                  ; string. We relax this to state that if the d:\ is present then the path
 37845                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37846                                  ; a device.
 37847                                  
 37848 00006C28 E87E02                  	CALL    TextFromDrive
 37849 00006C2B B02F                    	MOV     AL,'/'                  ; path sep.
 37850 00006C2D AA                      	STOSB
 37851 00006C2E E8A7A5                  	call	StrCpy			; move remainder of string
 37852                                  
 37853 00006C31 F8                      	CLC                             ; everything OK.
 37854 00006C32 16                      	push	ss
 37855 00006C33 1F                      	pop	ds                      ; remainder of OK stuff
 37856                                  DoFile_retn:
 37857 00006C34 C3                      	retn
 37858                                  
 37859                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37860                                  %if 0
 37861                                  
 37862                                  no5Dshere:
 37863                                  	; 10/08/2018
 37864                                  	jmp	CheckThisDevice		; snoop for device
 37865                                  %endif
 37866                                  
 37867                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37868                                  
 37869                                  ; We have a file. Get the raw CDS.
 37870                                  
 37871                                  DoFile:
 37872                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37873                                  
 37874 00006C35 E839FE                  	call	GetVisDrv               ; get proper CDS
 37875                                  	;mov	al,3 
 37876 00006C38 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37877 00006C3A 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37878                                  
 37879                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37880                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37881                                  ; Use the one that we are going to use (ES:DI).
 37882                                  
 37883                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37884 00006C3C 1E                      	push	ds
 37885 00006C3D 56                      	push	si
 37886 00006C3E 06                      	push	es
 37887 00006C3F 57                      	push	di
 37888 00006C40 E814D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 37889                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37890 00006C43 5F                      	pop	di
 37891 00006C44 07                      	pop	es
 37892 00006C45 5E                      	pop	si
 37893 00006C46 1F                      	pop	ds
 37894                                  	;mov	al,3
 37895 00006C47 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37896                                  	;retc				; someone failed an operation
 37897 00006C49 72E9                    	jc	short DoFile_retn
 37898                                  
 37899                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37900                                  ; current directory. Copy it in.
 37901                                  
 37902 00006C4B 1E                      	push	ds
 37903 00006C4C 56                      	push	si
 37904 00006C4D 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37905 00006C52 89FB                    	MOV     BX,DI                   ; point to destination
 37906                                  	;add	bx,[si+79] ; MSDOS 6.0
 37907 00006C54 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37908                                  	;lea	bp,[di+134]
 37909 00006C57 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37910                                  					;AN000;
 37911 00006C5B E889A5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37912 00006C5E 4F                      	DEC     DI                      ; point to NUL byte
 37913                                  
 37914                                  ; Make sure that there is a path char at end.
 37915                                  
 37916 00006C5F B05C                    	MOV     AL,'\'
 37917 00006C61 263845FF                	CMP     [ES:DI-1],AL
 37918 00006C65 7401                    	JZ	short GetOrig
 37919 00006C67 AA                      	STOSB
 37920                                  
 37921                                  ; Now get original string.
 37922                                  
 37923                                  GetOrig:
 37924 00006C68 4F                      	DEC     DI                      ; point to path char
 37925 00006C69 5E                      	pop	si
 37926 00006C6A 1F                      	pop	ds
 37927                                  
 37928                                  ; BX points to the end of the root part of the CDS (at where a path char
 37929                                  ; should be). Now, we decide whether we use this root or extend it with the
 37930                                  ; current directory. See if the input string begins with a leading 
 37932 00006C6B E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37933 00006C6E 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37934 00006C70 08C0                    	OR      AL,AL                   ; end of string?
 37935 00006C72 7410                    	JZ	short DoCanon		; yes, skip.
 37936                                  ;
 37937                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37938                                  ; to this root. Make sure that there is a path char there and advance the
 37939                                  ; source string over all leading \'s.
 37940                                  ;
 37941 00006C74 89DF                    	MOV     DI,BX                   ; back up to root point.
 37942                                  SkipPath:
 37943 00006C76 AC                      	LODSB
 37944 00006C77 E817E4                  	call    PATHCHRCMP
 37945 00006C7A 74FA                    	JZ	short SkipPath
 37946 00006C7C 4E                      	DEC     SI
 37947 00006C7D 08C0                    	OR      AL,AL
 37948 00006C7F 7403                    	JZ	short DoCanon
 37949                                  
 37950                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37951                                  ; for yucks.
 37952                                  
 37953                                  PathAssure:
 37954 00006C81 B05C                    	MOV     AL,'\'	; 5Ch
 37955 00006C83 AA                      	STOSB
 37956                                  
 37957                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37958                                  ; BP is the max extent to advance DI
 37959                                  ; BX is the backup limit for ..
 37960                                  
 37961                                  DoCanon:
 37962 00006C84 E85200                  	CALL    Canonicalize            ; wham.
 37963                                  	;retc				; badly formatted path.
 37964 00006C87 72AB                    	jc	short DoFile_retn
 37965                                  
 37966                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37967                                  ; to wfp_start and do string substitution. BP is still the max position in
 37968                                  ; buffer.
 37969                                  
 37970 00006C89 16                      	push	ss
 37971 00006C8A 1F                      	pop	ds
 37972 00006C8B 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37973 00006C8F C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37974 00006C93 E81B02                  	CALL    PathPref                ; is there a prefix?
 37975 00006C96 7514                    	JNZ	short DoSplice		; no, do splice
 37976                                  
 37977                                  ; We have a match. Check to see if we ended in a path char.
 37978                                  
 37979 00006C98 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37980 00006C9B E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37981 00006C9E 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37982                                  Pathline:                               ; 2/13/KK
 37983 00006CA0 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37984 00006CA4 7406                    	JZ	short DoSplice
 37985 00006CA6 47                      	INC     DI                      ; point to after current path char
 37986 00006CA7 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37987                                  
 37988                                  ; Splice the result.
 37989                                  
 37990                                  DoSplice:
 37991 00006CAC 16                      	push	ss
 37992 00006CAD 1F                      	pop	ds			; back to DOSDATA
 37993 00006CAE 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37994 00006CB2 31C9                    	XOR     CX,CX
 37995 00006CB4 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37996 00006CB9 7403                    	JZ	short SkipSplice
 37997 00006CBB E82A01                  	CALL    Splice                  ; replaces in place.
 37998                                  SkipSplice:
 37999                                  
 38000                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38001                                  ; device.
 38002                                  
 38003 00006CBE 16                      	push	ss
 38004 00006CBF 1F                      	pop	ds
 38005 00006CC0 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38006                                  	;test	word [es:di+67],8000h
 38007                                  	; 17/12/2022
 38008                                  	;test	byte [es:di+68],80h
 38009 00006CC4 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38010                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38011 00006CC9 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38012 00006CCB E30B                    	JCXZ    Done
 38013 00006CCD E842A6                  	call	ECritDisk
 38014 00006CD0 E8F7E9                  	call	FATREAD_CDS
 38015 00006CD3 E857A6                  	call	LCritDisk
 38016                                  	;mov	al, 3
 38017 00006CD6 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38018                                  Done:   
 38019 00006CD8 C3                      	retn                         ; any errors in carry flag.
 38020                                  
 38021                                  ; 13/07/2018
 38022                                  
 38023                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38024                                  ;----------------------------------------------------------------------------
 38025                                  ;   Canonicalize - copy path removing . and .. entries.
 38026                                  ;
 38027                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38028                                  ;               ES:DI - point to buffer
 38029                                  ;               BX - backup limit (offset from ES) points to slash
 38030                                  ;               BP - end of buffer
 38031                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38032                                  ;                   syntax, etc.
 38033                                  ;               Carry Clear -
 38034                                  ;                   DS:DI - advanced to end of string
 38035                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38036                                  ;   Registers modified: AX CX DX (in addition to those above)
 38037                                  ;----------------------------------------------------------------------------
 38038                                  
 38039                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38040                                  
 38041                                  Canonicalize:
 38042                                  
 38043                                  ; We copy all leading path separators.
 38044                                  
 38045 00006CD9 AC                      	LODSB                           ;   while (PathChr (*s))
 38046 00006CDA E8B4E3                  	call    PATHCHRCMP
 38047 00006CDD 7507                    	JNZ	short CanonDec
 38048 00006CDF 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38049 00006CE1 7319                    	JAE	short CanonBad		;           goto error;
 38050 00006CE3 AA                      	STOSB
 38051 00006CE4 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38052                                  CanonDec:
 38053 00006CE6 4E                      	DEC     SI
 38054                                  
 38055                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38056                                  ; component (no leading path separators) and ES:DI being the destination
 38057                                  ; buffer.
 38058                                  
 38059                                  CanonLoop:
 38060                                  
 38061                                  ; If we are at the end of the source string, then we need to check to see that
 38062                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38063                                  ; Otherwise, do nothing
 38064                                  
 38065 00006CE7 31C0                    	XOR     AX,AX
 38066 00006CE9 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38067 00006CEB 751A                    	JNZ	short DoComponent
 38068 00006CED 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38069 00006CF2 7505                    	JNZ	short DoTerminate
 38070 00006CF4 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38071 00006CF6 AA                      	STOSB
 38072 00006CF7 88E0                    	MOV     AL,AH
 38073                                  DoTerminate:
 38074 00006CF9 AA                      	STOSB                           ;           *d++ = 0;
 38075 00006CFA F8                      	CLC                             ;           return (0);
 38076 00006CFB C3                      	retn
 38077                                  
 38078                                  CanonBad:
 38079 00006CFC E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38080                                  	;mov	al,3
 38081 00006CFF B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38082 00006D01 7402                    	JZ	short PathEnc		; path character encountered in string
 38083                                  	;mov	al,2
 38084 00006D03 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38085                                  PathEnc:
 38086 00006D05 F9                      	STC
 38087                                  CanonBad_retn:
 38088 00006D06 C3                      	retn
 38089                                  
 38090                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38091                                  ; it to 8.3
 38092                                  
 38093                                  DoComponent:                            ;           }
 38094 00006D07 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38095 00006D0A 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38096                                  
 38097                                  ; We special case the . and .. cases.  These will be backed up.
 38098                                  
 38099                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38100 00006D0C 26833D2E                	CMP	WORD [ES:DI],002Eh
 38101 00006D10 7408                    	JZ	short Skip1
 38102                                  	;CMP	WORD PTR ES:[DI],'..'
 38103 00006D12 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38104 00006D17 750A                    	JNZ	short CanonNormal
 38105 00006D19 4F                      	DEC     DI                      ;           d--;
 38106                                  Skip1:  
 38107 00006D1A E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38108                                  	;mov	al,3
 38109 00006D1D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38110 00006D1F 72E5                    	jc	short CanonBad_retn
 38111 00006D21 EB02                    	JMP     short CanonPath         ;           }
 38112                                  
 38113                                  ; We have a normal path. Advance destination pointer over it.
 38114                                  
 38115                                  CanonNormal:                            ;       else
 38116 00006D23 01CF                    	ADD     DI,CX                   ;           d += ct;
 38117                                  
 38118                                  ; We have successfully copied a component. We are now pointing at a path
 38119                                  ; sep char or are pointing at a nul or are pointing at something else.
 38120                                  ; If we point at something else, then we have an error.
 38121                                  
 38122                                  CanonPath:
 38123 00006D25 E81600                  	CALL    PathSep
 38124 00006D28 75D2                    	JNZ	short CanonBad		; something else...
 38125                                  
 38126                                  ; Copy the first path char we see.
 38127                                  
 38128 00006D2A AC                      	LODSB                           ; get the char
 38129 00006D2B E863E3                  	call    PATHCHRCMP              ; is it path char?
 38130 00006D2E 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38131 00006D30 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38132 00006D32 73C8                    	JAE	short CanonBad		; yep, error.
 38133 00006D34 AA                      	STOSB                           ; copy the one byte
 38134                                  
 38135                                  ; Skip all remaining path chars
 38136                                  
 38137                                  CanonPathLoop:
 38138 00006D35 AC                      	LODSB                           ; get next byte
 38139 00006D36 E858E3                  	call    PATHCHRCMP              ; path char again?
 38140 00006D39 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38141 00006D3B 4E                      	DEC     SI                      ; back up
 38142 00006D3C EBA9                    	JMP	short  CanonLoop	; go copy component
 38143                                  
 38144                                  ;BREAK <PathSep - determine if char is a path separator>
 38145                                  ;----------------------------------------------------------------------------
 38146                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38147                                  ;   Inputs:     DS:SI - point to a char
 38148                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38149                                  ;               Zero set if AL is / \ or NUL
 38150                                  ;               Zero reset otherwise
 38151                                  ;   Registers modified: AL
 38152                                  ;----------------------------------------------------------------------------
 38153                                  
 38154                                  PathSep:
 38155 00006D3E 8A04                    	MOV     AL,[SI]                 ; get the character
 38156                                  PathSepGotCh:				; already have character
 38157 00006D40 08C0                    	OR      AL,AL                   ; test for zero
 38158 00006D42 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38159                                  	;call	PATHCHRCMP              ; check for path character
 38160                                  	;retn				; and return HIS determination
 38161                                  	; 18/12/2022
 38162 00006D44 E94AE3                  	jmp	PATHCHRCMP
 38163                                  
 38164                                  
 38165                                  ;BREAK <SkipBack - move backwards to a path separator>
 38166                                  ;----------------------------------------------------------------------------
 38167                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38169                                  ;               BX has current directory back up limit (point to a / \)
 38170                                  ;   Outputs:    ES:DI backed up to point to a path char
 38171                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38172                                  ;               Carry set if illegal backup
 38173                                  ;               Carry Clear if ok
 38174                                  ;   Registers modified: DI,AL
 38175                                  ;----------------------------------------------------------------------------
 38176                                  
 38177                                  SkipBack:
 38178 00006D47 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38179 00006D49 720B                    	JB	short SkipBad		;       if (d < dlim)
 38180 00006D4B 4F                      	DEC     DI                      ;           goto err;
 38181 00006D4C 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38182 00006D4F E83FE3                  	call    PATHCHRCMP              ;           break;
 38183 00006D52 75F3                    	JNZ	short SkipBack		;       }
 38184 00006D54 F8                      	CLC                             ;   return (0);
 38185 00006D55 C3                      	retn				;
 38186                                  SkipBad:                                ;err:
 38187                                  	;mov	al,3
 38188 00006D56 B003                    	MOV     AL,error_path_not_found ; bad path error
 38189 00006D58 F9                      	STC                             ;   return (-1);
 38190 00006D59 C3                      	retn				;
 38191                                  
 38192                                  ;Break <CopyComponent - copy out a file path component>
 38193                                  ;----------------------------------------------------------------------------
 38194                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38195                                  ;
 38196                                  ;   Inputs:     DS:SI - source path
 38197                                  ;               ES:DI - destination
 38198                                  ;               ES:BP - end of buffer
 38199                                  ;   Outputs:    Carry Set - too long
 38200                                  ;               Carry Clear - DS:SI moved past component
 38201                                  ;                   CX has length of destination
 38202                                  ;   Registers modified: AX,CX,DX
 38203                                  ;----------------------------------------------------------------------------
 38204                                  
 38205                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38206                                  
 38207                                  CopyComponent:
 38208                                  
 38209                                  %define CopyBP	 [BP]		; word
 38210                                  %define CopyD	 [BP+2]		; dword
 38211                                  %define CopyDoff [BP+2]		; word
 38212                                  %define CopyS	 [BP+6]		; dword
 38213                                  %define CopySoff [BP+6]		; word
 38214                                  %define CopyTemp [BP+10]	; byte
 38215                                  
 38216 00006D5A 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38217 00006D5D 1E                      	push	ds
 38218 00006D5E 56                      	push	si
 38219 00006D5F 06                      	push	es
 38220 00006D60 57                      	push	di
 38221 00006D61 55                      	push	bp
 38222 00006D62 89E5                    	MOV     BP,SP
 38223 00006D64 B42E                    	MOV     AH,'.'
 38224 00006D66 AC                      	LODSB
 38225 00006D67 AA                      	STOSB
 38226 00006D68 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38227 00006D6A 7518                    	JNZ	short NormalComp
 38228 00006D6C E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38229 00006D6F 740B                    	JZ	short NulTerm
 38230                                  TryTwoDot:
 38231 00006D71 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38232 00006D72 AA                      	STOSB
 38233 00006D73 38E0                    	CMP     AL,AH
 38234 00006D75 7557                    	JNZ	short CopyBad
 38235 00006D77 E8C4FF                  	CALL    PathSep
 38236 00006D7A 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38237                                  NulTerm:                                ;               return -1;
 38238 00006D7C 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38239 00006D7E AA                      	STOSB
 38240 00006D7F 897606                  	MOV     CopySoff,SI
 38241 00006D82 EB47                    	JMP     SHORT _GoodRet		;       }
 38242                                  NormalComp:                             ;   else {
 38243 00006D84 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38244 00006D87 E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38245 00006D8A 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38246 00006D8D 743F                    	JZ	short CopyBad		;           return (-1);
 38247 00006D8F 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38248 00006D95 7510                    	JNZ	short DoPack
 38249 00006D97 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38250 00006D9A 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38251 00006D9F 7F2D                    	JG	short CopyBad		;               return (-1);
 38252 00006DA1 7504                    	JNZ	short DoPack		;           else
 38253 00006DA3 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38254 00006DA5 742F                    	JZ	short CopyBadPath	;               return (-1);
 38255                                  DoPack:                                 ;           }
 38256 00006DA7 897606                  	MOV     CopySoff,SI ; [bp+6]
 38257 00006DAA 16                      	push	ss
 38258 00006DAB 1F                      	pop	ds
 38259 00006DAC BE[4B05]                	MOV     SI,NAME1
 38260 00006DAF 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38261 00006DB2 57                      	push	di
 38262 00006DB3 E8F8B2                  	call	PackName                ;       PackName (Name1, temp);
 38263 00006DB6 5F                      	pop	di
 38264 00006DB7 E836A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38265 00006DBA 49                      	DEC     CX
 38266 00006DBB 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38267                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38268                                  	;cmp	cx,[bp+0]
 38269                                  	; 15/12/2022
 38270                                  	;cmp	cx,[bp]
 38271 00006DBE 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38272 00006DC1 730B                    	JAE	short CopyBad		;           return (-1);
 38273 00006DC3 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38274 00006DC5 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38275 00006DC8 E81CA4                  	call	FStrCpy
 38276                                  _GoodRet:				;       }
 38277 00006DCB F8                      	CLC
 38278 00006DCC EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38279                                  CopyBad:
 38280 00006DCE F9                      	STC
 38281 00006DCF E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38282                                  	;mov	al,2
 38283 00006DD2 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38284 00006DD4 7503                    	JNZ	short CopyEnd
 38285                                  CopyBadPath:
 38286 00006DD6 F9                      	STC
 38287                                  	;mov	al,3
 38288 00006DD7 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38289                                  CopyEnd:
 38290 00006DD9 5D                      	pop	bp
 38291 00006DDA 5F                      	pop	di
 38292 00006DDB 07                      	pop	es
 38293 00006DDC 5E                      	pop	si
 38294 00006DDD 1F                      	pop	ds
 38295 00006DDE 9F                      	LAHF
 38296 00006DDF 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38297 00006DE2 E80BA4                  	call	StrLen
 38298 00006DE5 49                      	DEC     CX
 38299 00006DE6 9E                      	SAHF
 38300 00006DE7 C3                      	retn
 38301                                  
 38302                                  ; 14/05/2019 - Retro DOS v4.0
 38303                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38304                                  
 38305                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38306                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38307                                  
 38308                                  ;Break <Splice - pseudo mount by string substitution>
 38309                                  ;----------------------------------------------------------------------------
 38310                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38311                                  ;       ThisCDS to point to physical drive CDS.
 38312                                  ;   Inputs:     DS:SI point to string
 38313                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38314                                  ;   Outputs:    DS:SI points to thisCDS
 38315                                  ;               ES:DI points to DPB
 38316                                  ;               String at DS:SI may be reduced in length by removing prefix
 38317                                  ;               and substituting drive letter.
 38318                                  ;               CX = 0 If no splice done
 38319                                  ;               CX <> 0 otherwise
 38320                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38321                                  ;                   left alone
 38322                                  ;               ThisDPB points to proper DPB
 38323                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38324                                  ;----------------------------------------------------------------------------
 38325                                  
 38326                                  Splice:
 38327 00006DE8 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38328 00006DEE 7469                    	JZ	short AllDone
 38329 00006DF0 36FF36[A205]            	push	word [SS:THISCDS]
 38330 00006DF5 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38331 00006DFA 1E                      	push	ds
 38332 00006DFB 56                      	push	si
 38333 00006DFC 5F                      	pop	di
 38334 00006DFD 07                      	pop	es
 38335 00006DFE 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38336                                  SpliceScan:
 38337 00006E00 E8DFFC                  	call	GetCDSFromDrv
 38338 00006E03 724A                    	JC	short SpliceDone
 38339 00006E05 FEC0                    	INC     AL
 38340                                  	; 17/12/2022
 38341                                  	;test	byte [si+68],20h
 38342 00006E07 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38343                                  	;;test	word [si+67],2000h
 38344                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38345 00006E0B 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38346 00006E0D 57                      	push	di
 38347 00006E0E E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38348 00006E11 7403                    	JZ	short SpliceFound	;
 38349                                  SpliceSkip:
 38350 00006E13 5F                      	pop	di
 38351 00006E14 EBEA                    	JMP	short SpliceScan	;               continue;
 38352                                  SpliceFound:
 38353 00006E16 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38354 00006E1A 7508                    	JNZ	short SpliceDo
 38355 00006E1C 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38356 00006E22 75EF                    	JNZ	short SpliceSkip
 38357                                  SpliceDo:
 38358 00006E24 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38359 00006E26 06                      	push	es
 38360 00006E27 1F                      	pop	ds
 38361 00006E28 5F                      	pop	di
 38362 00006E29 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38363 00006E2C 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38364 00006E30 09C0                    	OR      AX,AX
 38365 00006E32 7808                    	JS	short NoPoke
 38366 00006E34 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38367 00006E36 29F0                    	SUB     AX,SI
 38368 00006E38 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38369                                  NoPoke:
 38370 00006E3C 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38371 00006E3F 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38372 00006E41 B05C                    	MOV     AL,"\"
 38373 00006E43 AA                      	STOSB
 38374                                  SpliceCopy:                             ;               strcpy (src, p);
 38375 00006E44 E8A0A3                  	call	FStrCpy
 38376 00006E47 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38377 00006E4A 80C901                  	OR      CL,1                    ; signal splice done.
 38378 00006E4D EB0C                    	JMP     SHORT DoSet             ;               return;
 38379                                  SpliceDone:                             ;               }
 38380 00006E4F 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38381 00006E54 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38382                                  AllDone:
 38383 00006E59 31C9                    	XOR     CX,CX
 38384                                  DoSet:
 38385 00006E5B 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38386                                  	;les	di,[si+69]
 38387 00006E60 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38388 00006E63 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38389 00006E68 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38390                                  Splice_retn:
 38391 00006E6D C3                      	retn
 38392                                  
 38393                                  ; 15/05/2019 - Retro DOS v4.0
 38394                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38395                                  
 38396                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38397                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38398                                  
 38399                                  ;Break <$NameTrans - partially process a name>
 38400                                  ;----------------------------------------------------------------------------
 38401                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38402                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38403                                  ;   to Transpath playing games with devices, we need to insure that the output
 38404                                  ;   has drive letter and : in it.
 38405                                  ;
 38406                                  ;   Inputs:     DS:SI - source string for translation
 38407                                  ;               ES:DI - pointer to buffer
 38408                                  ;   Outputs:
 38409                                  ;       Carry Clear
 38410                                  ;               Buffer at ES:DI is filled in with data
 38411                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38412                                  ;       Carry Set
 38413                                  ;               AX = error_path_not_found
 38414                                  ;   Registers modified: all
 38415                                  ;----------------------------------------------------------------------------
 38416                                  
 38417                                  _$NameTrans:
 38418 00006E6E 1E                      	push	ds
 38419 00006E6F 56                      	push	si
 38420 00006E70 06                      	push	es
 38421 00006E71 57                      	push	di
 38422 00006E72 51                      	push	cx ; MSDOS 6.0
 38423                                  	
 38424                                  	; MSDOS 6.0	
 38425                                  ; M027 - Start
 38426                                  ;
 38427                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38428                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38429                                  ; device if the old call set the volume attribute bit. Note that devname in
 38430                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38431                                  ; and restore CX.
 38432                                  
 38433                                  	;mov	ch,16h
 38434 00006E73 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38435 00006E75 E8B902                  	call	SetAttrib
 38436                                  
 38437                                  ; M027 - End
 38438                                  
 38439                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38440 00006E78 BF[BE03]                	MOV     DI,OPENBUF
 38441 00006E7B E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38442 00006E7E 59                      	pop	cx ; MSDOS 6.0
 38443 00006E7F 5F                      	pop     di
 38444 00006E80 07                      	pop	es
 38445 00006E81 5E                      	pop     si
 38446 00006E82 1F                      	pop     ds
 38447 00006E83 7303                    	JNC	short TransOK
 38448 00006E85 E9BC97                  	jmp	SYS_RET_ERR
 38449                                  TransOK:
 38450 00006E88 BE[BE03]                	MOV     SI,OPENBUF
 38451 00006E8B 16                      	push	ss
 38452 00006E8C 1F                      	pop	ds
 38453                                  ;GotText:
 38454 00006E8D E857A3                  	call	FStrCpy
 38455 00006E90 E9A897                  	jmp	SYS_RET_OK
 38456                                  
 38457                                  ;Break   <DriveFromText - return drive number from a text string>
 38458                                  ;----------------------------------------------------------------------------
 38459                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38460                                  ;   pointer.
 38461                                  ;
 38462                                  ;   Inputs:     DS:SI point to a text string
 38463                                  ;   Outputs:    AL has drive number
 38464                                  ;               DS:SI advanced
 38465                                  ;   Registers modified: AX,SI.
 38466                                  ;----------------------------------------------------------------------------
 38467                                  
 38468                                  DriveFromText:
 38469 00006E93 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38470                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38471                                  	; 23/09/2023
 38472 00006E95 3804                    	cmp	[si],al ; 0
 38473 00006E97 74D4                    	jz	short Splice_retn
 38474 00006E99 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38475 00006E9D 75CE                    	jnz	short Splice_retn
 38476 00006E9F AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38477 00006EA0 0C20                    	OR      AL,20h
 38478                                  	;sub	al,60h
 38479 00006EA2 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38480 00006EA4 75C7                    	jnz	short Splice_retn
 38481 00006EA6 B0FF                    	MOV	AL,-1                   ; nuke AL...
 38482                                  	; 23/09/2023
 38483                                  	;dec	al ; -1
 38484 00006EA8 C3                      	retn				;           }
 38485                                  
 38486                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38487                                  ;----------------------------------------------------------------------------
 38488                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38489                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38490                                  ;
 38491                                  ;   Inputs:     AL has 0-based drive number
 38492                                  ;   Outputs:    ES:DI advanced
 38493                                  ;   Registers modified: AX
 38494                                  ;----------------------------------------------------------------------------
 38495                                  
 38496                                  TextFromDrive:
 38497 00006EA9 FEC0                    	INC     AL
 38498                                  TextFromDrive1:
 38499                                  	;add	al,40h
 38500 00006EAB 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38501 00006EAD B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38502 00006EAF AB                      	STOSW
 38503                                  PathPref_retn:
 38504 00006EB0 C3                      	retn
 38505                                  
 38506                                  ;Break   <PathPref - see if one path is a prefix of another>
 38507                                  ;----------------------------------------------------------------------------
 38508                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38509                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38510                                  ;   prefix: A:\ and A:\FOO
 38511                                  ;
 38512                                  ;   Inputs:     DS:SI potential prefix
 38513                                  ;               ES:DI string
 38514                                  ;   Outputs:    Zero set => prefix found
 38515                                  ;                   DI/SI advanced past matching part
 38516                                  ;               Zero reset => no prefix, DS/SI garbage
 38517                                  ;   Registers modified: CX
 38518                                  ;----------------------------------------------------------------------------
 38519                                  
 38520                                  PathPref:
 38521 00006EB1 E84AA3                  	call	DStrLen                 ; get length
 38522 00006EB4 49                      	DEC     CX                      ; do not include nul byte
 38523 00006EB5 F3A6                    	REPZ    CMPSB                   ; compare
 38524 00006EB7 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38525 00006EB9 50                      	push	ax			; save char register
 38526 00006EBA 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38527 00006EBD E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38528 00006EC0 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38529                                  NotSep:                                 ; 2/13/KK
 38530 00006EC2 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38531 00006EC5 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38532                                  Prefix:
 38533 00006EC8 58                      	pop	ax			; get back original
 38534 00006EC9 C3                      	retn
 38535                                  
 38536                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38537                                  ;----------------------------------------------------------------------------
 38538                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38539                                  ;     a path separator.
 38540                                  ;
 38541                                  ;     Input:    DS:SI target string (null terminated)
 38542                                  ;     Output:   Zero set => path separator encountered in string
 38543                                  ;               Zero clear => null encountered
 38544                                  ;     Registers modified: SI
 38545                                  ;----------------------------------------------------------------------------
 38546                                  
 38547                                  ScanPathChar:
 38548 00006ECA AC                      	LODSB                           ; fetch a character
 38549 00006ECB E872FE                  	call    PathSepGotCh
 38550 00006ECE 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38551                                  	;call	PATHCHRCMP              ; path separator?
 38552                                  	;retn
 38553                                  	; 18/12/2022
 38554 00006ED0 E9BEE1                  	jmp	PATHCHRCMP
 38555                                  
 38556                                  ;============================================================================
 38557                                  ; FILE.ASM, MSDOS 6.0, 1991
 38558                                  ;============================================================================
 38559                                  ; 14/07/2018 - Retro DOS v3.0
 38560                                  
 38561                                  ; 13/05/2019 - Retro DOS v4.0
 38562                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38563                                  
 38564                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38565                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38566                                  
 38567                                  ; MSDOS 2.11
 38568                                  ;BREAK <$Open - open a file handle>
 38569                                  ;----------------------------------------------------------------------------
 38570                                  ;   Assembler usage:
 38571                                  ;           LDS     DX, Name
 38572                                  ;           MOV     AH, Open
 38573                                  ;           MOV     AL, access
 38574                                  ;           INT     int_command
 38575                                  ;
 38576                                  ;       ACCESS          Function
 38577                                  ;       ------          --------
 38578                                  ;       open_for_read   file is opened for reading
 38579                                  ;       open_for_write  file is opened for writing
 38580                                  ;       open_for_both   file is opened for both reading and writing.
 38581                                  ;
 38582                                  ;   Error returns:
 38583                                  ;           AX = error_invalid_access
 38584                                  ;              = error_file_not_found
 38585                                  ;              = error_access_denied
 38586                                  ;              = error_too_many_open_files
 38587                                  ;----------------------------------------------------------------------------
 38588                                  
 38589                                  ; MSDOS 6.0
 38590                                  ;	BREAK <$Open - open a file from a path string>
 38591                                  ;----------------------------------------------------------------------------
 38592                                  ;
 38593                                  ;**	$OPen - Open a File
 38594                                  ;
 38595                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38596                                  ;	file and and returns a handle
 38597                                  ;
 38598                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38599                                  ;		(AL) = open mode
 38600                                  ;	EXIT	'C' clear if OK
 38601                                  ;		  (ax) = file handle
 38602                                  ;		'C' set if error
 38603                                  ;		  (ax) = error code
 38604                                  ;	USES	all
 38605                                  ;
 38606                                  ;----------------------------------------------------------------------------
 38607                                  
 38608                                  ; 13/05/2019 - Retro DOS v4.0
 38609                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38610                                  
 38611                                  _$OPEN:       
 38612 00006ED3 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38613                                  _$Open2:
 38614                                  	;mov	ch,16h
 38615 00006ED5 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38616 00006ED7 E85702                  	call	SetAttrib
 38617 00006EDA B9[702B]                	mov	cx,DOS_OPEN
 38618                                  
 38619                                  	;xor	ah,ah  ; MSDOS 3.3
 38620                                  
 38621 00006EDD 50                      	push	ax
 38622                                  
 38623                                  ;*	General file open/create code. The $CREATE call and the various
 38624                                  ;	$OPEN calls all come here.
 38625                                  ;
 38626                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38627                                  ;	path names, etc., and then dispatch to our individual handlers.
 38628                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38629                                  ;
 38630                                  ;	(TOS) = create mode
 38631                                  ;	(CX) = address of routine to call to do actual function
 38632                                  ;	(DS:DX) = ASCIZ name
 38633                                  ;	SAttrib = Attribute mask
 38634                                  
 38635                                  ;	Get a free SFT and mark it "being allocated"
 38636                                  
 38637                                  AccessFile:
 38638 00006EDE E831A4                  	call	ECritSFT
 38639 00006EE1 E8D8F7                  	call	SFNFree			; get a free sfn
 38640 00006EE4 E846A4                  	call	LCritSFT
 38641 00006EE7 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38642 00006EE9 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38643 00006EEE 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38644 00006EF3 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38645                                  
 38646                                  ;	Find a free area in the user's JFN table.
 38647                                  
 38648 00006EF8 E8AEF7                  	call	JFNFree			; get a free jfn
 38649 00006EFB 7303                    	jnc	short SaveJFN
 38650                                  OpenFailJ:
 38651 00006EFD E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38652                                  
 38653                                  SaveJFN:
 38654 00006F00 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38655 00006F05 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38656 00006F0A 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38657                                  
 38658                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38659                                  ;	reusing the same JFN.
 38660                                  
 38661 00006F0F 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38662 00006F14 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38663 00006F17 89D6                    	MOV	SI,DX			; get name in appropriate place
 38664 00006F19 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38665 00006F1C 51                      	push	cx			; save routine to call
 38666 00006F1D E844FC                  	call	TransPath		; convert the path
 38667 00006F20 5B                      	pop	bx			; (bx) = routine to call
 38668                                  
 38669 00006F21 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38670 00006F26 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38671 00006F28 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38672 00006F2E 7404                    	JZ	short SetSearch
 38673                                  	;mov	al,2
 38674 00006F30 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38675                                  OpenCleanJ:
 38676 00006F32 EB50                    	JMP	short OpenClean
 38677                                  
 38678                                  SetSearch:
 38679 00006F34 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38680                                  
 38681                                  ;	We need to get the new inheritance bits.
 38682                                  
 38683 00006F35 31C9                    	xor	cx,cx
 38684                                  	; MSDOS 6.0
 38685                                  	;mov	[si+2],cx ; 0
 38686 00006F37 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38687                                  	;mov    [si+51],cx ; 0
 38688 00006F3A 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38689                                  	;
 38690 00006F3D 81FB[702B]              	CMP	BX,DOS_OPEN
 38691 00006F41 7509                    	JNZ	short _DoOper
 38692                                  	;test   al,80h
 38693 00006F43 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38694 00006F45 7405                    	JZ	short _DoOper ; 10/08/2018
 38695 00006F47 247F                    	AND	AL,7Fh			; mask off inherit bit
 38696                                  	;mov	cx,1000h
 38697 00006F49 B90010                  	MOV	CX,sf_no_inherit
 38698                                  _DoOper:
 38699                                  	;; MSDOS 3.3
 38700                                  	;;mov	word [si+2], 0
 38701                                  	;;mov	word [si+33h], 0
 38702                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38703                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38704                                  
 38705                                  	; MSDOS 6.0
 38706                                  ;**	Check if this is an extended open. If so you must set the
 38707                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38708                                  ;	Set_EXT_mode in creat.asm
 38709                                  
 38710                                  	; MSDOS 6.0
 38711                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38712 00006F4C 57                      	push	di
 38713 00006F4D 06                      	push	es
 38714 00006F4E 1E                      	push	ds
 38715 00006F4F 07                      	pop	es
 38716 00006F50 56                      	push	si
 38717 00006F51 5F                      	pop	di			; (es:di) = SFT address
 38718 00006F52 E807BC                  	call	Set_EXT_mode
 38719                                  	;RESTORE <es, di>
 38720 00006F55 07                      	pop	es
 38721 00006F56 5F                      	pop	di
 38722                                  
 38723                                  	;Context DS
 38724 00006F57 16                      	push	ss
 38725 00006F58 1F                      	pop	ds	
 38726                                  
 38727 00006F59 51                      	push	cx
 38728 00006F5A FFD3                    	CALL	BX			; blam!
 38729 00006F5C 59                      	pop	cx
 38730 00006F5D C536[9E05]              	LDS	SI,[THISSFT]
 38731 00006F61 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38732                                  	;jc	short OpenE ; MSDOS 3.3
 38733                                  
 38734                                  ;	The SFT was successfully opened. Remove busy mark.
 38735                                  
 38736                                  OpenOK:
 38737                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38738 00006F63 C7040100                	mov	word [SI],1
 38739                                  	;or	[SI+5],cx
 38740 00006F67 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38741                                  
 38742                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38743                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38744                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38745                                  ;
 38746                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38747                                  ; sharer.
 38748                                  
 38749 00006F6A 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38750 00006F6E 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38751                                  
 38752 00006F73 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38753                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38754                                  OpenOkj:
 38755 00006F7A E9BE96                  	jmp	SYS_RET_OK		; bye with no errors
 38756                                  
 38757                                  	; MSDOS 6.0
 38758                                  ;Extended Open hooks check
 38759                                  OpenE2:					;AN000;;EO.
 38760 00006F7D 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38761 00006F80 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38762 00006F82 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38763                                  
 38764                                  ;	Extended Open hooks check
 38765                                  ;
 38766                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38767                                  
 38768                                  OpenClean:
 38769 00006F84 5B                      	pop	bx			; clean off stack
 38770                                  OpenE:
 38771                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38772 00006F85 C7040000                	mov	word [SI],0
 38773 00006F89 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38774 00006F8E C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38775 00006F91 EB02                    	JMP	SHORT OpenCritLeave
 38776                                  
 38777                                  OpenFail:
 38778 00006F93 FB                      	STI
 38779 00006F94 59                      	pop	cx			; Clean stack
 38780                                  OpenCritLeave:
 38781 00006F95 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38782                                  
 38783                                  	; MSDOS 6.0
 38784                                  ; File Tagging DOS 4.00
 38785 00006F9C 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38786                                  					;AN000;;FT. code page mismatch
 38787 00006FA2 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38788 00006FA4 E9A596                  	jmp	From_GetSet		;AN000;;FT. yes
 38789                                  NORERR: 				;AN000;
 38790                                  ; File Tagging DOS 4.00
 38791                                  
 38792 00006FA7 E99A96                  	jmp	SYS_RET_ERR		; no free, return error
 38793                                  
 38794                                  ; MSDOS 2.11
 38795                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38796                                  ;----------------------------------------------------------------------------
 38797                                  ;   Assembler usage:
 38798                                  ;           LDS     DX, name
 38799                                  ;           MOV     AH, Creat
 38800                                  ;           MOV     CX, access
 38801                                  ;           INT     21h
 38802                                  ;       ; AX now has the handle
 38803                                  ;
 38804                                  ;   Error returns:
 38805                                  ;           AX = error_access_denied
 38806                                  ;              = error_path_not_found
 38807                                  ;              = error_too_many_open_files
 38808                                  ;----------------------------------------------------------------------------
 38809                                  
 38810                                  ; MSDOS 6.0
 38811                                  ;	BREAK <$Creat - create a brand-new file>
 38812                                  ;----------------------------------------------------------------------------
 38813                                  ;
 38814                                  ;**	$Creat - Create a File
 38815                                  ;
 38816                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38817                                  ;	initial attributes contained in CX
 38818                                  ;
 38819                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38820                                  ;		(CX) = initial attributes
 38821                                  ;	EXIT	'C' set if error
 38822                                  ;		  (ax) = error code
 38823                                  ;		'C' clear if OK
 38824                                  ;		  (ax) = file handle
 38825                                  ;	USES	all
 38826                                  ;
 38827                                  ;----------------------------------------------------------------------------
 38828                                  
 38829                                  _$CREAT:
 38830 00006FAA 51                      	push	cx			; Save attributes on stack
 38831 00006FAB B9[462A]                	mov	CX,DOS_CREATE		; routine to call
 38832                                  AccessSet:
 38833                                  	;mov	byte [ss:SATTRIB],6
 38834 00006FAE 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38835                                  	; 10/08/2018
 38836 00006FB4 E927FF                  	JMP	AccessFile		; use good ol' open
 38837                                  
 38838                                  ; MSDOS 6.0 (MSDOS 3.3)
 38839                                  ;	BREAK <$CHMOD - change file attributes>
 38840                                  ;----------------------------------------------------------------------------
 38841                                  ;
 38842                                  ;**	$CHMOD - Change File Attributes
 38843                                  ;
 38844                                  ;   Assembler usage:
 38845                                  ;	    LDS     DX, name
 38846                                  ;	    MOV     CX, attributes
 38847                                  ;	    MOV     AL,func (0=get, 1=set)
 38848                                  ;	    INT     21h
 38849                                  ;   Error returns:
 38850                                  ;	    AX = error_path_not_found
 38851                                  ;	    AX = error_access_denied
 38852                                  ;
 38853                                  ;----------------------------------------------------------------------------
 38854                                  
 38855                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38856                                  _$CHMOD:
 38857                                  	; 05/08/2018 - Retro DOS v3.0
 38858                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38859 00006FB7 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38860 00006FBA 50                      	push	ax
 38861 00006FBB 51                      	push	cx			; save function and attributes
 38862 00006FBC 89D6                    	MOV	SI,DX			; get things in appropriate places
 38863 00006FBE E8A7FB                  	call	TransPathSet		; get correct path
 38864 00006FC1 59                      	pop	cx
 38865 00006FC2 58                      	pop	ax			; and get function and attrs back
 38866 00006FC3 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38867 00006FC5 16                      	push	ss			; set up for later possible calls
 38868 00006FC6 1F                      	pop	ds
 38869 00006FC7 803E[7A05]FF            	CMP	byte [CMETA],-1
 38870 00006FCC 754E                    	JNZ	short ChModErr
 38871                                  	;mov	byte [SATTRIB],16h
 38872 00006FCE C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38873 00006FD3 2C01                    	SUB	AL,1			; fast way to discriminate
 38874 00006FD5 720B                    	JB	short ChModGet		; 0 -> go get value
 38875 00006FD7 7417                    	JZ	short ChModSet		; 1 -> go set value
 38876                                  	;mov	byte [EXTERR_LOCUS],1
 38877 00006FD9 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38878                                  	;mov	al,1
 38879 00006FDE B001                    	mov	al,error_invalid_function ; bad value
 38880                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38881                                  chmod_errj:	
 38882                                  	;;jmp	SYS_RET_ERR
 38883                                  	;jmp	short ChModE	
 38884 00006FE0 EBC5                    	jmp	short NORERR	; 06/12/2022
 38885                                  ChModGet:
 38886 00006FE2 E84BB9                  	call	GET_FILE_INFO		; suck out the ol' info
 38887 00006FE5 7237                    	JC	short ChModE		; error codes are already set for ret
 38888 00006FE7 E89B94                  	call	Get_User_Stack		; point to user saved vaiables
 38889                                  	;mov	[SI+4],ax
 38890 00006FEA 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38891                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38892                                  OpenOkj2:
 38893                                  	; 17/12/2022
 38894                                  	;;jmp	SYS_RET_OK		; say sayonara
 38895                                  	;jmp	short OpenOkj
 38896                                  	; 25/06/2019
 38897 00006FED E94E96                  	jmp	SYS_RET_OK_clc
 38898                                  
 38899                                  ChModSet:
 38900 00006FF0 89C8                    	MOV	AX,CX			; get attrs in position
 38901 00006FF2 E899B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38902 00006FF5 7227                    	JC	short ChModE		; errors are set
 38903                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38904                                  	;jmp	SYS_RET_OK
 38905                                  OpenOkj3:
 38906                                  	;jmp	short OpenOkj2
 38907                                  	; 17/12/2022
 38908 00006FF7 E94196                  	jmp	SYS_RET_OK
 38909                                  
 38910                                  ; 17/12/2022
 38911                                  %if 0
 38912                                  ChModErr:
 38913                                  NotFound:	; 17/12/2022
 38914                                  	;mov	al,3
 38915                                  	mov	al,error_path_not_found
 38916                                  ChModE:
 38917                                  UnlinkE:	; 17/12/2022
 38918                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38919                                  	;;jmp	SYS_RET_ERR
 38920                                  	;jmp	short chmod_errj
 38921                                  	; 17/12/2022
 38922                                  	jmp	short NORERR
 38923                                  %endif
 38924                                  
 38925                                  ; 22/05/2019 - Retro DOS v4.0
 38926                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38927                                  
 38928                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38929                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38930                                  
 38931                                  ;	BREAK <$UNLINK - delete a file entry>
 38932                                  ;----------------------------------------------------------------------------
 38933                                  ;
 38934                                  ;**	$UNLINK - Delete a File
 38935                                  ;
 38936                                  ;
 38937                                  ;	Assembler usage:
 38938                                  ;	    LDS     DX, name
 38939                                  ;	    IF VIA SERVER DOS CALL
 38940                                  ;	     MOV     CX,SEARCH_ATTRIB
 38941                                  ;	    MOV     AH, Unlink
 38942                                  ;	    INT     21h
 38943                                  ;
 38944                                  ;	ENTRY	(ds:dx) = path name
 38945                                  ;		(cx) = search_attribute, if via server_dos
 38946                                  ;	EXIT	'C' clear if no error
 38947                                  ;		'C' set if error
 38948                                  ;		  (ax) = error code
 38949                                  ;			= error_file_not_found
 38950                                  ;			= error_access_denied
 38951                                  ;
 38952                                  ;----------------------------------------------------------------------------
 38953                                  
 38954                                  _$UNLINK:
 38955 00006FFA 51                      	push	cx			; Save possible CX input parm
 38956 00006FFB 89D6                    	MOV	SI,DX			; Point at input string
 38957 00006FFD BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38958 00007000 E865FB                  	call	TransPathSet		; go get normalized path
 38959 00007003 59                      	pop	cx
 38960 00007004 7216                    	JC	short ChModErr		; badly formed path
 38961 00007006 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38962 0000700C 750E                    	JNZ	short NotFound
 38963 0000700E 16                      	push	ss
 38964 0000700F 1F                      	pop	ds
 38965                                  	;mov	ch,6
 38966 00007010 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38967 00007012 E81C01                  	call	SetAttrib
 38968 00007015 E808B5                  	call	DOS_DELETE		; remove that file
 38969                                  	;JC	short UnlinkE 		; error is there
 38970                                  	; 17/12/2022
 38971 00007018 728D                    	jc	short NORERR
 38972                                  
 38973                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38974                                  UnlinkOk:
 38975                                  	;jmp	SYS_RET_OK		; okey doksy
 38976 0000701A EBDB                    	jmp	short OpenOkj3
 38977                                  
 38978                                  	; 17/12/2022
 38979                                  ChModErr:	; 17/12/2022
 38980                                  NotFound:
 38981                                  	;mov	al,3
 38982 0000701C B003                    	MOV	AL,error_path_not_found
 38983                                  ChModE:		; 17/12/2022
 38984                                  UnlinkE:
 38985                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38986                                  	;;jmp	SYS_RET_ERR		; bye
 38987                                  	;jmp	short ChModE
 38988                                  	; 17/12/2022
 38989 0000701E EB87                    	jmp	short NORERR
 38990                                  
 38991                                  ;BREAK <$RENAME - move directory entries around>
 38992                                  ;----------------------------------------------------------------------------
 38993                                  ;
 38994                                  ;   Assembler usage:
 38995                                  ;	    LDS     DX, source
 38996                                  ;	    LES     DI, dest
 38997                                  ;	    IF VIA SERVER DOS CALL
 38998                                  ;	      MOV   CX,SEARCH_ATTRIB
 38999                                  ;	    MOV     AH, Rename
 39000                                  ;	    INT     21h
 39001                                  ;
 39002                                  ;   Error returns:
 39003                                  ;	    AX = error_file_not_found
 39004                                  ;	       = error_not_same_device
 39005                                  ;	       = error_access_denied
 39006                                  ;
 39007                                  ;----------------------------------------------------------------------------
 39008                                  
 39009                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39010                                  _$RENAME:
 39011                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39012 00007020 51                      	push	cx
 39013 00007021 1E                      	push	ds
 39014 00007022 52                      	push	dx			; save source and possible CX arg
 39015 00007023 06                      	PUSH	ES
 39016 00007024 1F                      	POP	DS			; move dest to source
 39017 00007025 89FE                    	MOV	SI,DI			; save for offsets
 39018 00007027 BF[3E04]                	MOV	DI,RENBUF
 39019 0000702A E83BFB                  	call	TransPathSet		; munge the paths
 39020 0000702D 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39021 00007032 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39022 00007037 5E                      	pop	si
 39023 00007038 1F                      	pop	ds
 39024 00007039 59                      	pop	cx			; get back source and possible CX arg
 39025                                  epjc2:	
 39026 0000703A 72E0                    	JC	short ChModErr		; get old error
 39027 0000703C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39028 00007042 75D8                    	JNZ	short NotFound
 39029 00007044 51                      	push	cx			; Save possible CX arg
 39030 00007045 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39031 00007048 E81DFB                  	call	TransPathSet		; wham
 39032 0000704B 59                      	pop	cx
 39033 0000704C 72EC                    	JC	short epjc2
 39034 0000704E 16                      	push	ss
 39035 0000704F 1F                      	pop	ds
 39036 00007050 803E[7A05]FF            	CMP	byte [CMETA],-1
 39037 00007055 72C5                    	JB	short NotFound
 39038                                  
 39039                                  	; MSDOS 6.0
 39040 00007057 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39041 0000705B FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39042 0000705F BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39043 00007062 16                      	PUSH	SS			   ;AN000;;MS.
 39044 00007063 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39045 00007064 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39046                                  rnloop: 				   ;AN000;
 39047 00007066 E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39048 00007069 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39049 0000706B E848A1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39050 0000706E 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39051 00007070 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39052 00007072 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39053                                  rnerr:					   ;AN000;
 39054 00007074 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39055                                  	;error	error_current_directory    ;AN000;;MS.
 39056 00007077 B010                    	mov	al,error_current_directory 
 39057                                  	;jmp	SYS_RET_ERR
 39058                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39059 00007079 EBA3                    	jmp	short UnlinkE
 39060                                  dorn:					   ;AN000;
 39061 0000707B 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39062 00007080 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39063                                  
 39064 00007085 16                      	push	ss
 39065 00007086 1F                      	pop	ds
 39066                                  
 39067                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39068                                  	;mov	ch,16h
 39069 00007087 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39070                                  					; rename appropriate files
 39071 00007089 E8A500                  	call	SetAttrib
 39072 0000708C E86FB6                  	call	DOS_RENAME		; do the deed
 39073 0000708F 728D                    	JC	short UnlinkE 		; errors
 39074                                  
 39075                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39076                                  	;jmp	SYS_RET_OK
 39077 00007091 EB87                    	jmp	short UnlinkOk
 39078                                  
 39079                                  
 39080                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39081                                  
 39082                                  ; 14/07/2018 - Retro DOS v3.0
 39083                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39084                                  
 39085                                  ;Break <$CreateNewFile - Create a new directory entry>
 39086                                  ;----------------------------------------------------------------------------
 39087                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39088                                  ;	was no previous directory entry, and fail if a directory entry with
 39089                                  ;	the same name existed previously.
 39090                                  ;
 39091                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39092                                  ;		CX contains default file attributes
 39093                                  ;   Outputs:	Carry Clear:
 39094                                  ;		    AX has file handle opened for read/write
 39095                                  ;		Carry Set:
 39096                                  ;		    AX has error code
 39097                                  ;   Registers modified: All
 39098                                  ;----------------------------------------------------------------------------
 39099                                  
 39100                                  _$CreateNewFile:
 39101 00007093 51                      	push	cx			; Save attributes on stack
 39102 00007094 B9[132B]                	MOV	CX,DOS_Create_New	; routine to call
 39103 00007097 E914FF                  	JMP	AccessSet		; use good ol' open
 39104                                  
 39105                                  ;**	BinToAscii - convert a number to a string.
 39106                                  ;----------------------------------------------------------------------------
 39107                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39108                                  ;	This routine is used to generate temp file names so we don't spend
 39109                                  ;	the time and code needed for a true hex number, we just use
 39110                                  ;	A thorugh O.
 39111                                  ;
 39112                                  ;	ENTRY	(ax) = value
 39113                                  ;		(es:di) = destination
 39114                                  ;	EXIT	(es:di) updated by 4
 39115                                  ;	USES	cx, di, flags
 39116                                  ;----------------------------------------------------------------------------
 39117                                  
 39118                                  ; MSDOS 3.3
 39119                                  ;BinToAscii:
 39120                                  ;	mov     cx,4
 39121                                  ;bta5:
 39122                                  ;	push    cx
 39123                                  ;	mov     cl,4
 39124                                  ;	rol     ax,cl
 39125                                  ;	push    ax
 39126                                  ;	and     al,0Fh
 39127                                  ;	add     al,'0'
 39128                                  ;	cmp     al,'9'
 39129                                  ;	jbe     short bta6
 39130                                  ;	add     al,7
 39131                                  ;bta6: 
 39132                                  ;	stosb
 39133                                  ;	pop     ax
 39134                                  ;	pop     cx
 39135                                  ;	loop    bta5
 39136                                  ;	retn
 39137                                  
 39138                                  ; MSDOS 6.0
 39139                                  BinToAscii:
 39140 0000709A B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39141                                  bta5:	
 39142 0000709D D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39143 0000709F 50                      	push	ax			; preserve remainder of digits
 39144 000070A0 240F                    	AND	AL,0Fh			; grab low nibble
 39145 000070A2 0441                    	ADD	AL,'A'			; turn into ascii
 39146 000070A4 AA                      	STOSB				; drop in the character
 39147 000070A5 58                      	pop	ax			; (ax) = shifted number
 39148 000070A6 FECD                    	dec	ch
 39149 000070A8 75F3                    	jnz	short bta5		; process 4 digits
 39150 000070AA C3                      	retn
 39151                                  
 39152                                  ;Break	<$CreateTempFile - create a unique name>
 39153                                  ;----------------------------------------------------------------------------
 39154                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39155                                  ;	Method used is to get the current time, convert to a name and attempt
 39156                                  ;	a create new. Repeat until create new succeeds.
 39157                                  ;
 39158                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39159                                  ;		CX  contains default attributes
 39160                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39161                                  ;		AX has handle
 39162                                  ;   Registers modified: all
 39163                                  ;----------------------------------------------------------------------------
 39164                                  
 39165                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39166                                  
 39167                                  _$CreateTempFile:
 39168                                  	;Enter
 39169 000070AB 55                      	push	bp
 39170 000070AC 89E5                    	mov	bp,sp
 39171                                  
 39172                                  	;LocalVar  EndPtr,DWORD
 39173                                  	;LocalVar  FilPtr,DWORD
 39174                                  	;LocalVar  Attr,WORD
 39175                                  
 39176 000070AE 83EC0A                  	sub	sp,10
 39177                                  
 39178                                  	;test	cx,0FFD8h
 39179 000070B1 F7C1D8FF                	test	CX,~attr_changeable
 39180 000070B5 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39181                                  
 39182                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39183                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39184                                  ; below. The code loops on error_access_denied, but if one of the non
 39185                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39186                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39187                                  ; need to detect these cases before getting to the loop.
 39188                                  
 39189                                  	;mov	ax, 5
 39190 000070B7 B80500                  	MOV	AX,error_access_denied
 39191 000070BA EB69                    	JMP	SHORT SETTMPERR
 39192                                  
 39193                                  OKatts:
 39194                                  	;MOV	attr,CX 		; save attribute
 39195 000070BC 894EF6                  	mov     [bp-10],cx
 39196                                  	;MOV	FilPtrL,DX		; pointer to file
 39197 000070BF 8956F8                  	mov	[bp-8],dx
 39198                                  	;MOV	FilPtrH,DS
 39199 000070C2 8C5EFA                  	mov	[bp-6],ds
 39200                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39201 000070C5 8C5EFE                  	mov	[bp-2],ds
 39202 000070C8 1E                      	PUSH	DS
 39203 000070C9 07                      	POP	ES			; destination for nul search
 39204 000070CA 89D7                    	MOV	DI,DX
 39205 000070CC 89F9                    	MOV	CX,DI
 39206 000070CE F7D9                    	NEG	CX			; number of bytes remaining in segment
 39207                                  	; MSDOS 6.0
 39208 000070D0 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39209 000070D2 7501                    	JNZ	short okok		;AN000;MS. no
 39210                                  	;MOV	CX,-1			;AN000;MS.
 39211                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39212                                  	; 17/12/2022
 39213 000070D4 49                      	dec	cx  ; mov cx,-1
 39214                                  	;mov	cx,-1 ; 0FFFh
 39215                                  okok:					;AN000;
 39216 000070D5 31C0                    	XOR	AX,AX			;AN000;
 39217 000070D7 F2AE                    	REPNZ	SCASB			;AN000;
 39218                                  					;AN000;
 39219 000070D9 4F                      	DEC	DI			; point back to the null
 39220 000070DA 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39221 000070DE E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39222 000070E1 7403                    	JZ	short SETENDPTR		; Yes
 39223                                  STOREPTH:
 39224 000070E3 B05C                    	MOV	AL,'\'
 39225 000070E5 AA                      	STOSB				; Add a path separator (and INC DI)
 39226                                  SETENDPTR:
 39227                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39228 000070E6 8856FC                  	mov	[bp-4],dl
 39229                                  CreateLoop:
 39230 000070E9 16                      	push	ss			; let ReadTime see variables
 39231 000070EA 1F                      	pop	ds
 39232 000070EB 55                      	push	bp
 39233 000070EC E8309A                  	call	READTIME		; go get time
 39234 000070EF 5D                      	pop	bp
 39235                                  ;
 39236                                  ; Time is in CX:DX. Go drop it into the string.
 39237                                  ;
 39238                                  	;les	di,EndPtr		; point to the string
 39239 000070F0 C47EFC                  	les	di,[BP-4]
 39240 000070F3 89C8                    	mov	ax,cx
 39241 000070F5 E8A2FF                  	call	BinToAscii		; store upper word
 39242 000070F8 89D0                    	mov	ax,dx
 39243 000070FA E89DFF                  	call	BinToAscii		; store lower word
 39244 000070FD 30C0                    	xor	al,al
 39245 000070FF AA                      	STOSB				; nul terminate
 39246                                  	;LDS	DX,FilPtr		; get name
 39247 00007100 C556F8                  	lds	dx,[bp-8]
 39248                                  	;MOV	CX,Attr 		; get attr
 39249 00007103 8B4EF6                  	mov	cx,[bp-10]
 39250 00007106 55                      	push	bp
 39251 00007107 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39252 0000710A 5D                      	pop	bp
 39253 0000710B 7319                    	JNC	short CreateDone	; failed, go try again
 39254                                  
 39255                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39256                                  ; error and figure out what to do.
 39257                                  
 39258                                  	;; MSDOS 3.3			; M049 - start
 39259                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39260                                  ;;	cmp	al,error_file_exists
 39261                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39262                                  ;;	cmp	al,error_access_denied
 39263                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39264                                  
 39265                                  	; MSDOS 6.0
 39266                                  	;cmp	al,50h
 39267 0000710D 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39268 0000710F 74D8                    	JZ	short CreateLoop	; Y: try again
 39269                                  	;cmp	al,5
 39270 00007111 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39271 00007113 7510                    	JNZ	short SETTMPERR		; N: Error out
 39272                                  					; Y: Check to see if we got this due
 39273                                  					;    to the network drive. Note that
 39274                                  					;    the redir will set the exterr
 39275                                  					;    to error_cannot_make if this is 
 39276                                  					;    so. 
 39277 00007115 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39278                                  					; See if it's REALLY an att mismatch
 39279 0000711B 7408                    	je	short SETTMPERR		; no, network error, stop
 39280                                  ;M070
 39281                                  ; If the user failed on an I24, we do not want to try again
 39282                                  ;
 39283 0000711D 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39284                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39285                                  
 39286                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39287                                  	; 17/12/2022
 39288 00007123 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39289                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39290                                  	;jz	short SETTMPERR
 39291                                  	;jmp	short CreateLoop
 39292                                  
 39293                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39294                                  					; M049 - end
 39295                                  SETTMPERR:
 39296 00007125 F9                      	STC
 39297                                  CreateDone:
 39298                                  	;Leave
 39299 00007126 89EC                    	mov	sp,bp
 39300 00007128 5D                      	pop	bp
 39301 00007129 7203                    	JC	short CreateFail
 39302 0000712B E90D95                  	jmp	SYS_RET_OK		; success!
 39303                                  CreateFail:
 39304 0000712E E91395                  	jmp	SYS_RET_ERR
 39305                                  
 39306                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39307                                  ;   (CH) or to the value in CL if the current system call is through
 39308                                  ;   serverdoscall.
 39309                                  ;
 39310                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39311                                  ;		fSharing == TRUE => set sattrib to CL
 39312                                  ;   Outputs:	none
 39313                                  ;   Registers changed:	CX
 39314                                  
 39315                                  SetAttrib:
 39316 00007131 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39317 00007137 7502                    	jnz	short Set
 39318 00007139 88E9                    	mov	cl,ch
 39319                                  Set:
 39320 0000713B 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39321 00007140 C3                      	retn
 39322                                  
 39323                                  ; 14/07/2018 - Retro DOS v3.0
 39324                                  ; MSDOS 6.0
 39325                                  
 39326                                  ; 29/04/2019 - Retro DOS v4.0
 39327                                  
 39328                                  ;Break	<Extended_Open- Extended open the file>
 39329                                  ;----------------------------------------------------------------------------
 39330                                  ; Input: AL= 0 reserved  AH=6CH
 39331                                  ;	 BX= mode
 39332                                  ;	 CL= create attribute  CH=search attribute (from server)
 39333                                  ;	 DX= flag
 39334                                  ;	 DS:SI = file name
 39335                                  ;	 ES:DI = parm list
 39336                                  ;			   DD  SET EA list (-1) null
 39337                                  ;			   DW  n  parameters
 39338                                  ;			   DB  type (TTTTTTLL)
 39339                                  ;			   DW  IOMODE
 39340                                  ; Function: Extended Open
 39341                                  ; Output: carry clear
 39342                                  ;		     AX= handle
 39343                                  ;		     CX=1 file opened
 39344                                  ;			2 file created/opened
 39345                                  ;			3 file replaced/opened
 39346                                  ;	  carry set: AX has error code
 39347                                  ;----------------------------------------------------------------------------
 39348                                  
 39349                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39350                                  _$Extended_Open:			  ;AN000;
 39351                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39352 00007141 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39353 00007146 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39354                                  	; 17/12/2022
 39355 0000714D F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39356                                  	;;test	dx,0FE00h
 39357                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39358 00007150 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39359 00007152 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39360 00007154 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39361 00007157 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39362                                  	;and	dl,0Fh
 39363 00007159 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39364 0000715C 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39365 0000715F 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39366                                  	;and	ah,0F0h
 39367 00007161 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39368 00007164 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39369 00007167 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39370                                  
 39371 00007169 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39372 0000716E 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39373 00007173 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39374 00007178 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39375 0000717D 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39376 00007182 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39377 00007187 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39378 0000718C 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39379 00007191 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39380 00007193 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39381 00007195 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39382                                  ext_inval2:				  ;AN000;;EO.
 39383                                  	;mov	al,1
 39384 00007197 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39385                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39386                                  eo_err:
 39387                                  	;jmp	SYS_RET_ERR
 39388 00007199 EB93                    	jmp	short CreateFail
 39389                                  
 39390                                  ext_inval_parm:				  ;AN000;EO..
 39391 0000719B 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39392 0000719C 5E                      	POP	SI			  ;AN000;EO..
 39393                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39394                                  	;mov	al,13
 39395 0000719D B00D                    	mov	al,error_invalid_data
 39396                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39397                                  	;;jmp	SYS_RET_ERR
 39398                                  	;jmp	short eo_err
 39399                                  	; 17/12/2022
 39400 0000719F EB8D                    	jmp	short CreateFail
 39401                                  
 39402                                  	; 17/12/2022	
 39403                                  ;error_return:				  ;AN000;EO.
 39404                                  ;	retn				  ;AN000;EO.. return with error
 39405                                  
 39406                                  goopen2:				  ;AN000;
 39407                                  	; 17/12/2022
 39408                                  	;test	bh,20h				 
 39409 000071A1 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39410                                  	;;test	bx,2000h
 39411                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39412 000071A4 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39413                                  	;or	byte [SS:EXTOPEN_ON],2
 39414 000071A6 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39415                                  goopen:					  ;AN000;
 39416                                  	;or	byte [SS:EXTOPEN_ON],1 
 39417 000071AC 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39418                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39419                                  	; 18/12/2022
 39420 000071B2 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39421                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39422 000071B8 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39423 000071BE 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39424 000071C0 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39425 000071C3 723F                    	JC	short error_return	  ;AN000;;EO. error
 39426                                  
 39427 000071C5 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39428 000071CB 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39429                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39430 000071CD 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39431 000071D4 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39432                                  
 39433                                  	; 17/12/2022
 39434                                  ;ok_return2:
 39435                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39436                                  
 39437                                  chknext:
 39438                                  	; 17/12/2022
 39439 000071D6 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39440                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39441                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39442 000071DC 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39443 000071DE E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39444 000071E1 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39445 000071E3 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39446 000071E9 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39447 000071EB 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39448 000071F2 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39449 000071F8 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39450 000071FA 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39451 00007201 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39452                                  error_return2:
 39453 00007203 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39454                                  error_return:	 ;17/12/2022
 39455 00007204 C3                      	retn				  ;AN000;;EO. return with error
 39456                                  
 39457                                  	; 17/12/2022
 39458                                  ok_return:
 39459                                  ok_return2:
 39460 00007205 E93394                  	jmp	SYS_RET_OK
 39461                                  
 39462                                  exist_open:				  ;AN000;
 39463 00007208 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39464 0000720E 7402                    	jz	short noserver		  ;AN000;;EO. no
 39465 00007210 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39466                                  noserver:
 39467 00007212 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39468 00007215 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39469 00007217 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39470 0000721D 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39471                                  local_extopen:
 39472                                  	;cmp	ax,2
 39473 0000721F 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39474 00007222 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39475                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39476                                  	; 17/12/2022
 39477 00007224 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39478                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39479                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39480                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39481                                  	; 17/12/2022
 39482 0000722A 745D                    	jz	short extexit ; 10/06/2019
 39483                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39484                                  	;jnz	short do_creat
 39485                                  	;jmp	short extexit
 39486                                  do_creat:
 39487 0000722C 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39488 00007231 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39489 00007236 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39490 00007238 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39491 0000723B 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39492                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39493 0000723D 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39494                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39495 00007244 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39496                                  
 39497                                  ext_ok:
 39498 00007246 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39499 0000724C 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39500                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39501 0000724E 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39502                                  setXAttr:
 39503                                  	; 29/04/2019
 39504 00007255 50                      	push	ax
 39505 00007256 E82C92                  	call	Get_User_Stack		  ;AN000;;EO.
 39506 00007259 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39507                                  	;mov	[si+4],ax
 39508 0000725D 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39509 00007260 58                      	pop	ax			  ;AN000;;EO.
 39510 00007261 8904                    	mov	[si],ax
 39511                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39512                                  	; 17/12/2022
 39513 00007263 EBA0                    	jmp	short ok_return
 39514                                  ;ok_return:				  ;AN000;
 39515                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39516                                  
 39517                                  extexit2:				  ;AN000; ERROR RECOVERY
 39518 00007265 5B                      	POP	BX			  ;AN000;EO. close the handle
 39519 00007266 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39520                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39521 00007267 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39522                                  					  ;AN000;EO. from create;smr;SS Override
 39523 0000726D 750C                    	JNZ	short justopen		  ;AN000;EO.
 39524 0000726F 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39525 00007274 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39526 00007276 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39527 00007279 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39528                                  
 39529                                  justopen:				  ;AN000;
 39530 0000727B E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39531                                  reserror:				  ;AN000;
 39532 0000727E 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39533 0000727F EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39534                                  
 39535                                  ext_file_unfound:			  ;AN000;
 39536                                  	;mov	ax,2
 39537 00007281 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39538 00007284 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39539                                  ext_inval:				  ;AN000;
 39540                                  	;mov	ax,1
 39541 00007286 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39542                                  lockoperr:	; 17/12/2022
 39543                                  extexit:
 39544 00007289 E9B893                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39545                                  
 39546                                  ;============================================================================
 39547                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39548                                  ;============================================================================
 39549                                  ; 14/07/2018 - Retro DOS v3.0
 39550                                  ; 22/05/2019 - Retro DOS v4.0
 39551                                  
 39552                                  ;BREAK <$LockOper - Lock Calls>
 39553                                  ;----------------------------------------------------------------------------
 39554                                  ;
 39555                                  ;   Assembler usage:
 39556                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39557                                  ;	    MOV     CX, OffsetHigh
 39558                                  ;	    MOV     DX, OffsetLow
 39559                                  ;	    MOV     SI, LengthHigh
 39560                                  ;	    MOV     DI, LengthLow
 39561                                  ;	    MOV     AH, LockOper
 39562                                  ;	    MOV     AL, Request
 39563                                  ;	    INT     21h
 39564                                  ;
 39565                                  ;   Error returns:
 39566                                  ;	    AX = error_invalid_handle
 39567                                  ;	       = error_invalid_function
 39568                                  ;	       = error_lock_violation
 39569                                  ;
 39570                                  ;   Assembler usage:
 39571                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39572                                  ;
 39573                                  ;				    0? lock all
 39574                                  ;				    8? lock write
 39575                                  ;				    ?2 lock multiple
 39576                                  ;				    ?3 unlock multiple
 39577                                  ;				    ?4 lock/read
 39578                                  ;				    ?5 write/unlock
 39579                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39580                                  ;	    MOV     BX, Handle
 39581                                  ;	    MOV     CX, count or size
 39582                                  ;	    LDS     DX, buffer
 39583                                  ;	    INT     21h
 39584                                  ;
 39585                                  ;   Error returns:
 39586                                  ;	    AX = error_invalid_handle
 39587                                  ;	       = error_invalid_function
 39588                                  ;	       = error_lock_violation
 39589                                  ;
 39590                                  ;----------------------------------------------------------------------------
 39591                                  
 39592                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39593                                  _$LockOper:
 39594 0000728C 3C01                    	CMP	AL,1
 39595 0000728E 770B                    	JA	short lock_bad_func
 39596                                  
 39597 00007290 57                      	PUSH	DI			       ; Save LengthLow
 39598 00007291 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39599 00007294 731D                    	JNC	short lock_do 		       ; have valid handle
 39600 00007296 5F                      	POP	DI			       ; Clean stack
 39601                                  	;mov	al,6
 39602 00007297 B006                    	mov	al,error_invalid_handle
 39603                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39604                                  ;lockoperr:
 39605                                  	;jmp	SYS_RET_ERR
 39606                                  	; 17/12/2022
 39607 00007299 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39608                                  
 39609                                  lock_bad_func:
 39610                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39611 0000729B 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39612                                  	;mov	al,1
 39613 000072A1 B001                    	mov	al,error_invalid_function
 39614                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39615                                  lockoperrj:
 39616                                  	;jmp	SYS_RET_ERR
 39617 000072A3 EBE4                    	jmp	short lockoperr
 39618                                  
 39619                                  	; 22/05/2019 - Retro DOS v4.0
 39620                                  
 39621                                  	; MSDOS 6.0 
 39622                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39623                                  ; Dead code deleted, MD, 23 Mar 90
 39624                                  
 39625                                  ;lock_do:
 39626                                  ;	; MSDOS 3.3
 39627                                  ;	or	al,al
 39628                                  ;	pop	ax
 39629                                  ;	jz	short DOS_Lock
 39630                                  ;DOS_Unlock:
 39631                                  ;	;test	word [es:di+5],8000h
 39632                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39633                                  ;	JZ	short LOCAL_UNLOCK
 39634                                  ;	push    ax
 39635                                  ;	mov     ax,110Bh
 39636                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39637                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39638                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39639                                  ;			; SFT DPB field -> DPB of drive containing file
 39640                                  ;			; Return: CF set error
 39641                                  ;	pop     bx
 39642                                  ;	jmp     short ValChk
 39643                                  ;
 39644                                  ;LOCAL_UNLOCK:
 39645                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39646                                  ;ValChk:
 39647                                  ;	JNC	short Lock_OK
 39648                                  ;lockerror:
 39649                                  ;	jmp	SYS_RET_ERR
 39650                                  ;Lock_OK:
 39651                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39652                                  ;	jmp	SYS_RET_OK
 39653                                  ;DOS_Lock:
 39654                                  ;	;test	word [es:di+5],8000h
 39655                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39656                                  ;	JZ	short LOCAL_LOCK
 39657                                  ;	;CallInstall NET_XLock,MultNET,10
 39658                                  ;	mov     ax, 110Ah
 39659                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39660                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39661                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39662                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39663                                  ;			; Return: CF set error
 39664                                  ;	JMP	short ValChk
 39665                                  ;
 39666                                  ;LOCAL_LOCK:
 39667                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39668                                  ;	JMP	short ValChk
 39669                                  
 39670                                  ; 17/12/2022
 39671                                  LOCAL_UNLOCK:
 39672                                  	; MSDOS 3.3
 39673                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39674                                  	; MSDOS 6.0
 39675 000072A5 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39676                                  ValChk:
 39677 000072A9 7302                    	JNC	short Lock_OK
 39678                                  lockerror:
 39679                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39680                                  	;;jmp	SYS_RET_ERR
 39681                                  	;jmp	short lockoperrj
 39682                                  	; 17/12/2022
 39683 000072AB EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39684                                  Lock_OK:
 39685                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39686                                  	; 10/06/2019
 39687 000072AD A1[0C06]                	mov	ax,[TEMP_VAR]
 39688 000072B0 E98893                  	jmp	SYS_RET_OK
 39689                                  
 39690                                  	; 22/05/2019
 39691                                  lock_do:
 39692                                  	; MSDOS 6.0
 39693 000072B3 89C3                    	MOV	BX,AX				; save AX
 39694 000072B5 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39695                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39696                                  	;;mov	[bp+0],dx
 39697                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39698                                  	; 15/12/2022
 39699 000072B8 895600                  	mov	[bp],dx
 39700                                  	;mov	[bp+2],cx
 39701 000072BB 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39702 000072BE 59                      	POP	CX				; get low length
 39703                                  	;mov	[bp+4],cx
 39704 000072BF 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39705                                  	;mov	[bp+6],si
 39706 000072C2 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39707 000072C5 B90100                  	MOV	CX,1				; one range
 39708                                  
 39709                                  ;	PUSH	CS				;
 39710                                  ;	POP	DS				; DS:DX points to
 39711                                  
 39712 000072C8 16                      	push	ss
 39713 000072C9 1F                      	pop	ds
 39714                                  
 39715 000072CA 89EA                    	MOV	DX,BP				; Lock_Buffer
 39716                                  	;test	al,1
 39717 000072CC A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39718                                  	;JNZ	short DOS_Unlock		; yes
 39719                                  	;JMP	short DOS_Lock			; function 0
 39720                                  	; 17/12/2022
 39721                                  	; 10/06/2019
 39722 000072CE 740E                    	jz	short DOS_Lock
 39723                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39724                                  	;JNZ	short DOS_Unlock
 39725                                  	;JMP	short DOS_Lock
 39726                                  
 39727                                  DOS_Unlock:
 39728                                  	;;test	word [es:di+5],8000h
 39729                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39730 000072D0 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39731 000072D5 74CE                    	JZ	short LOCAL_UNLOCK
 39732                                  
 39733                                  lock_unlock: ; 22/05/2019
 39734                                  	
 39735                                  	;CallInstall Net_Xlock,MultNET,10
 39736                                  	
 39737                                  	; MSDOS 3.3
 39738                                  	;mov     ax,110Bh
 39739                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39740                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39741                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39742                                  			; SFT DPB field -> DPB of drive containing file
 39743                                  			; Return: CF set error
 39744                                  	; MSDOS 6.0
 39745 000072D7 B80A11                  	mov     ax,110Ah
 39746 000072DA CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39747                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39748                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39749                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39750                                  			; Return: CF set error
 39751                                  
 39752 000072DC EBCB                    	JMP	SHORT ValChk
 39753                                  
 39754                                  ; 17/12/2022
 39755                                  %if 0
 39756                                  LOCAL_UNLOCK:
 39757                                  	; MSDOS 3.3
 39758                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39759                                  	; MSDOS 6.0
 39760                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39761                                  ValChk:
 39762                                  	JNC	short Lock_OK
 39763                                  lockerror:
 39764                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39765                                  	;jmp	SYS_RET_ERR
 39766                                  	jmp	short lockoperrj
 39767                                  Lock_OK:
 39768                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39769                                  	; 10/06/2019
 39770                                  	mov	ax,[TEMP_VAR]
 39771                                  	jmp	SYS_RET_OK
 39772                                  %endif
 39773                                  
 39774                                  DOS_Lock:
 39775                                  	;;test	word [es:di+5],8000h
 39776                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39777 000072DE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39778 000072E3 7407                    	JZ	short LOCAL_LOCK
 39779                                  
 39780                                  	;CallInstall NET_XLock,MultNET,10
 39781                                  
 39782 000072E5 B80A11                  	mov     ax,110Ah
 39783 000072E8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39784                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39785                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39786                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39787                                  			; Return: CF set error
 39788                                  
 39789 000072EA EBBD                    	JMP	short ValChk
 39790                                  
 39791                                  LOCAL_LOCK:
 39792                                  	; MSDOS 3.3
 39793                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39794                                  	; MSDOS 6.0
 39795 000072EC FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39796                                  
 39797 000072F0 EBB7                    	JMP	short ValChk
 39798                                  
 39799                                  ; 14/07/2018 - Retro DOS v3.0
 39800                                  ; LOCK_CHECK
 39801                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39802                                  
 39803                                  ;----------------------------------------------------------------------------
 39804                                  ; Inputs:
 39805                                  ;	Outputs of SETUP
 39806                                  ;	[USER_ID] Set
 39807                                  ;	[PROC_ID] Set
 39808                                  ; Function:
 39809                                  ;	Check for lock violations on local I/O
 39810                                  ;	Retries are attempted with sleeps in between
 39811                                  ; Outputs:
 39812                                  ;    Carry clear
 39813                                  ;	Operation is OK
 39814                                  ;    Carry set
 39815                                  ;	A lock violation detected
 39816                                  ; Outputs of SETUP preserved
 39817                                  ;----------------------------------------------------------------------------
 39818                                  
 39819                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39820                                  	; 22/05/2019 - Retro DOS v4.0
 39821                                  LOCK_CHECK:
 39822 000072F2 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39823                                  LockRetry:
 39824 000072F6 53                      	push	bx		; save regs
 39825 000072F7 50                      	push	ax ; MSDOS 6.0
 39826                                  
 39827                                  	;MSDOS 3.3
 39828                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39829                                  	;MSDOS 6.0
 39830 000072F8 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39831                                  
 39832 000072FC 58                      	pop	ax ; MSDOS 6.0
 39833 000072FD 5B                      	pop	bx		; restrore regs
 39834 000072FE 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39835                                  LockN:
 39836 00007300 E8089F                  	call	Idle		; wait a while
 39837 00007303 4B                      	DEC	BX		; remember a retry
 39838 00007304 75F0                    	JNZ	short LockRetry	; more retries left...
 39839 00007306 F9                      	STC
 39840                                  lc_ret_label:
 39841 00007307 C3                      	retn
 39842                                  
 39843                                  ; 14/07/2018 - Retro DOS v3.0
 39844                                  ; LOCK_VIOLATION
 39845                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39846                                  
 39847                                  ;----------------------------------------------------------------------------
 39848                                  ; Inputs:
 39849                                  ;	[THISDPB] set
 39850                                  ;	[READOP] indicates whether error on read or write
 39851                                  ; Function:
 39852                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39853                                  ; Outputs:
 39854                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39855                                  ;	Carry clear if user wants a retry
 39856                                  ;
 39857                                  ; DS, ES, DI, CX preserved, others destroyed
 39858                                  ;----------------------------------------------------------------------------
 39859                                  
 39860                                  LOCK_VIOLATION:
 39861 00007308 1E                      	PUSH	DS
 39862 00007309 06                      	PUSH	ES
 39863 0000730A 57                      	PUSH	DI
 39864 0000730B 51                      	PUSH	CX
 39865                                  	;mov	ax,21h
 39866 0000730C B82100                  	MOV	AX,error_lock_violation
 39867                                  	;mov	byte [ALLOWED],18h
 39868 0000730F C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39869 00007314 C42E[8A05]              	LES	BP,[THISDPB]
 39870 00007318 BF0100                  	MOV	DI,1		; Fake some registers
 39871 0000731B 89F9                    	MOV	CX,DI
 39872                                  	;mov	dx,[es:bp+11]
 39873 0000731D 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39874 00007321 E8D6DF                  	call	HARDERR
 39875 00007324 59                      	POP	CX
 39876 00007325 5F                      	POP	DI
 39877 00007326 07                      	POP	ES
 39878 00007327 1F                      	POP	DS
 39879 00007328 3C01                    	CMP	AL,1
 39880 0000732A 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39881 0000732C F9                      	STC
 39882 0000732D C3                      	retn
 39883                                  
 39884                                  ; 14/07/2018 - Retro DOS v3.0
 39885                                  
 39886                                  ;----------------------------------------------------------------------------
 39887                                  
 39888                                  ;	do a retz to return error
 39889                                  
 39890                                  	; 22/05/2019 - Retro DOS v4.0
 39891                                  CheckShare:
 39892                                  	; MSDOS 3.3
 39893                                  	;cmp	byte [cs:fShare],0
 39894                                  	;retn
 39895                                  
 39896                                  	; MSDOS 6.0
 39897 0000732E 1E                      	push	ds			;smr;
 39898                                  	;getdseg <ds>			; ds -> dosdata
 39899 0000732F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39900 00007334 803E[0303]00            	cmp	byte [fShare],0
 39901 00007339 1F                      	pop	ds			;smr;
 39902 0000733A C3                      	retn
 39903                                  	
 39904                                  ;============================================================================
 39905                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39906                                  ;============================================================================
 39907                                  ; 14/07/2018 - Retro DOS v3.0
 39908                                  ; 22/05/2019 - Retro DOS v4.0
 39909                                  
 39910                                  ; SHARE_CHECK
 39911                                  ;----------------------------------------------------------------------------
 39912                                  ; Inputs:
 39913                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39914                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39915                                  ;       [WFP_START] has full path of name
 39916                                  ;       [USER_ID] Set
 39917                                  ;       [PROC_ID] Set
 39918                                  ; Function:
 39919                                  ;       Check for sharing violations on local file/device access
 39920                                  ; Outputs:
 39921                                  ;    Carry clear
 39922                                  ;       Sharing approved
 39923                                  ;    Carry set
 39924                                  ;       A sharing violation detected
 39925                                  ;           AX is error code
 39926                                  ; USES    ALL but DS
 39927                                  ;----------------------------------------------------------------------------
 39928                                  
 39929                                  	; 22/05/2019 - Retro DOS v4.0
 39930                                  SHARE_CHECK:
 39931                                  	; 26/07/2019
 39932 0000733B FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39933                                  shchk_retn:
 39934 0000733F C3                      	retn
 39935                                  
 39936                                  ; SHARE_VIOLATION
 39937                                  ;----------------------------------------------------------------------------
 39938                                  ; Inputs:
 39939                                  ;       [THISDPB] Set
 39940                                  ;       AX has error code
 39941                                  ; Function:
 39942                                  ;       Handle Sharing errors
 39943                                  ; Outputs:
 39944                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39945                                  ;       Carry clear if user wants a retry
 39946                                  ;
 39947                                  ; DS, ES, DI preserved, others destroyed
 39948                                  ;----------------------------------------------------------------------------
 39949                                  
 39950                                  SHARE_VIOLATION:
 39951 00007340 1E                      	PUSH    DS
 39952 00007341 06                      	PUSH	ES
 39953 00007342 57                      	PUSH    DI
 39954 00007343 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39955                                  	;mov	byte [ALLOWED],18h
 39956 00007348 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39957 0000734D C42E[8A05]              	LES     BP,[THISDPB]
 39958 00007351 BF0100                  	MOV     DI,1			; Fake some registers
 39959 00007354 89F9                    	MOV     CX,DI
 39960                                  	;mov	dx,[es:bp+17]
 39961 00007356 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39962 0000735A E89DDF                  	call	HARDERR
 39963 0000735D 5F                      	POP     DI
 39964 0000735E 07                      	POP	ES
 39965 0000735F 1F                      	POP     DS
 39966 00007360 3C01                    	CMP     AL,1
 39967 00007362 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39968 00007364 F9                      	STC
 39969 00007365 C3                      	retn
 39970                                  
 39971                                  ;----------------------------------------------------------------------------
 39972                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39973                                  ;       NOT perform a close, it merely asserts that the sharing information
 39974                                  ;       for the SFT/UID/PID may be safely released.
 39975                                  ;
 39976                                  ;   Inputs:     ES:DI points to an SFT
 39977                                  ;   Outputs:    None
 39978                                  ;   Registers modified: all except DS,ES,DI
 39979                                  ;----------------------------------------------------------------------------
 39980                                  
 39981                                  ShareEnd:
 39982                                  	; 26/07/2019
 39983 00007366 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39984 0000736A C3                      	retn
 39985                                  
 39986                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39987                                  ;----------------------------------------------------------------------------
 39988                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39989                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39990                                  ;
 39991                                  ;   Inputs:     ThisSFT points to the SFT
 39992                                  ;               WFP_Start points to the WFP
 39993                                  ;   Outputs:    Carry clear => successful entry
 39994                                  ;               Carry set => failed system call
 39995                                  ;   Registers modified: all
 39996                                  ;----------------------------------------------------------------------------
 39997                                  
 39998                                  ShareEnter:
 39999 0000736B 51                      	push	cx
 40000                                  retry:
 40001 0000736C 8B0E[1A00]              	mov     cx,[RetryCount]
 40002                                  attempt:
 40003 00007370 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40004 00007374 31C0                    	XOR     AX,AX
 40005                                   	;mov	[es:di+51],axfff
 40006 00007376 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40007 0000737A 51                      	push	cx
 40008 0000737B E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40009 0000737E 59                      	pop	cx
 40010 0000737F 730A                    	jnc	short done		; success, let the user see this
 40011 00007381 E8879E                  	call	Idle                    ; wait a while
 40012 00007384 E2EA                    	loop    attempt                 ; go back for another attempt
 40013 00007386 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40014 00007389 73E1                    	jnc	short retry		; user said to retry, go do it
 40015                                  done:
 40016 0000738B 59                      	pop	cx
 40017 0000738C C3                      	retn
 40018                                  
 40019                                  ;============================================================================
 40020                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40021                                  ;============================================================================
 40022                                  ; 29/04/2019 - Retro DOS 4.0
 40023                                  
 40024                                  ;** EXEPATCH.ASM 
 40025                                  ;----------------------------------------------------------------------------
 40026                                  ;	Contains the foll:
 40027                                  ;
 40028                                  ;		- code to find and overlay buggy unpack code
 40029                                  ;		- new code to be overlayed on buggy unpack code 
 40030                                  ;		- old code sequence to identify buggy unpack code
 40031                                  ;
 40032                                  ;	Revision history:
 40033                                  ;
 40034                                  ;		Created: 5/14/90
 40035                                  ;----------------------------------------------------------------------------
 40036                                  
 40037                                  ;----------------------------------------------------------------------------
 40038                                  ;
 40039                                  ; M020 : Fix for rational bug - for details see routine header
 40040                                  ; M028 : 4b04 implementation
 40041                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40042                                  ; M032 : set turnoff bit only if DOS in HMA.
 40043                                  ; M033 : if IP < 2 then not exepacked.
 40044                                  ; M046 : support for a 4th version of exepacked files.
 40045                                  ; M068 : support for copy protected apps.
 40046                                  ; M071 : use A20OFF_COUNT of 10.
 40047                                  ;
 40048                                  ;----------------------------------------------------------------------------
 40049                                  
 40050                                  PATCH1_COM_OFFSET	EQU	06CH
 40051                                  PATCH1_OFFSET		EQU	028H
 40052                                  PATCH1_CHKSUM		EQU	0EF4EH
 40053                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40054                                  
 40055                                  PATCH2_COM_OFFSET	EQU	076H
 40056                                  PATCH2_OFFSET		EQU	032H
 40057                                  
 40058                                  	; The strings that start at offset 076h have two possible 
 40059                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40060                                  
 40061                                  PATCH2_CHKSUM		EQU	78B2H
 40062                                  CHKSUM2_LEN		EQU	119H/2
 40063                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40064                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40065                                  
 40066                                  PATCH3_COM_OFFSET	EQU	074H
 40067                                  PATCH3_OFFSET		EQU	032H
 40068                                  PATCH3_CHKSUM		EQU	4EDEH
 40069                                  CHKSUM3_LEN		EQU	117H/2
 40070                                  
 40071                                  ;**	Data structure passed for ExecReady call
 40072                                  ;
 40073                                  ;struc ERStruc
 40074                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40075                                  ; .ER_Flags:	resw	1
 40076                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40077                                  ; .ER_PSP:	resw	1	; PSP of the program
 40078                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40079                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40080                                  ; .size:
 40081                                  ;endstruc
 40082                                  
 40083                                  ;DOSCODE SEGMENT
 40084                                  
 40085                                  	; 22/05/2019 - Retro DOS v4.0
 40086                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40087                                  
 40088                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40089                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40090                                  
 40091                                  ; M028 - BEGIN
 40092                                  
 40093                                  ;--------------------------------------------------------------------------
 40094                                  ;
 40095                                  ;	Procedure Name		: ExecReady
 40096                                  ;
 40097                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40098                                  ;
 40099                                  ;--------------------------------------------------------------------------
 40100                                  
 40101                                  ExecReady:
 40102 0000738D 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40103                                  	;;test	word [si+2],1
 40104                                  	; 17/12/2022
 40105 0000738F F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40106                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40107 00007393 7413                    	jz	short er_setver		; only setver for .COM files
 40108                                  
 40109                                  	;mov	ax,[si+8]
 40110 00007395 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40111 00007398 83C010                  	add	ax,10h
 40112 0000739B 8EC0                    	mov	es,ax
 40113                                  
 40114                                  	;mov	cx,[si+10]
 40115 0000739D 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40116                                  	;mov	cx,[si+12]
 40117 000073A0 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40118                                  
 40119                                  	;call	[ss:FixExePatch]
 40120 000073A3 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 40121                                  	
 40122                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40123                                  	;call	[ss:Rational386PatchPtr]
 40124                                  
 40125                                  er_setver:
 40126                                  	;;test	word [si+2],2		; Q: is this an overlay
 40127                                  	; 17/12/2022
 40128 000073A8 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40129                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40130 000073AC 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40131                                  					; N: set up lie version first
 40132 000073AE 1E                      	push	ds
 40133 000073AF 56                      	push	si
 40134                                  	;lds	si,[si+4]
 40135 000073B0 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40136 000073B3 E876ED                  	call	Scan_Execname1
 40137 000073B6 E887ED                  	call	Scan_Special_Entries
 40138 000073B9 5E                      	pop	si
 40139 000073BA 1F                      	pop	ds
 40140                                  	;mov	es,[si+8]
 40141 000073BB 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40142 000073BE 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40143 000073C2 26A34000                	mov	[es:PDB.Version],ax
 40144                                  
 40145                                  er_chkdoshi:
 40146 000073C6 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40147 000073CC 741F                    	je	short er_done		; M032: N: done
 40148                                  
 40149                                  					; M068 - Start
 40150                                  	;mov	ax,[si+8]
 40151 000073CE 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40152                                  
 40153                                  	;or	byte [ss:DOS_FLAG],4
 40154 000073D1 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40155                                  					; ah = 25 & ah= 49. See dossym.inc 
 40156                                  					; under TAG M003 & M009 for 
 40157                                  					; explanation
 40158                                  	;;test	word [si+2],1
 40159                                  	; 17/12/2022
 40160 000073D7 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40161                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40162 000073DB 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40163                                  					;    a20off_psp and ret
 40164 000073DD 1E                         	push	ds
 40165 000073DE 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40166 000073E0 E88E02                  	call	IsCopyProt		; check if copy protected
 40167 000073E3 1F                      	pop	ds
 40168                                  
 40169                                  er_setA20:
 40170                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40171                                  	; is non-zero at this point it indicates that the A20 is to be 
 40172                                  	; turned off for that many int 21 calls made by the app. In 
 40173                                  	; addition the A20 has to be turned off when we exit from this 
 40174                                  	; call. Hence the inc.
 40175                                  
 40176 000073E4 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40177 000073E9 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40178                                  					; turned OFF.
 40179                                  er_done:				; M068 - End
 40180 000073ED 31C0                    	xor	ax,ax
 40181 000073EF C3                      	retn
 40182                                  
 40183                                  ; M028 - END
 40184                                  
 40185                                  
 40186                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40187                                  %if 0
 40188                                  
 40189                                  ;----------------------------------------------------------------------------
 40190                                  ;
 40191                                  ; procedure : Rational386Patch
 40192                                  ;
 40193                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40194                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40195                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40196                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40197                                  ;
 40198                                  ; This routine applies patches to the Rational DOS Extender to work around
 40199                                  ; most of the register trashing bugs.
 40200                                  ;
 40201                                  ; Note that there are additional register trashing bugs not fixed by these
 40202                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40203                                  ; may be modified on interrupts.
 40204                                  ;
 40205                                  ; There are two different Rational DOS Extender patchs in this module.
 40206                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40207                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40208                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40209                                  ; or not.
 40210                                  ;
 40211                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40212                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40213                                  ; running in the HMA.
 40214                                  ;
 40215                                  ; This patch detection and replacement is based on an example supplied by
 40216                                  ; Ben Williams at Rational.
 40217                                  ;
 40218                                  ;----------------------------------------------------------------------------
 40219                                  
 40220                                  ; 22/05/2019 - Retro DOS v4.0
 40221                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40222                                  
 40223                                  ;----------------------------------------------------------------------------
 40224                                  ;
 40225                                  ; INPUT : ES = segment where program got loaded
 40226                                  ;
 40227                                  ;----------------------------------------------------------------------------
 40228                                  
 40229                                  rpFind1:
 40230                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40231                                  
 40232                                  rpFind1Len equ	$ - rpFind1
 40233                                  
 40234                                  ;	cli
 40235                                  ;	in	al, 21h
 40236                                  ;	pusha
 40237                                  ;	xor	ax, ax
 40238                                  ;	out	43h, al
 40239                                  ;	mov	dx, ...
 40240                                  
 40241                                  rpFind1a:
 40242                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40243                                  
 40244                                  rpFind1aLen equ	$ - rpFind1a
 40245                                  
 40246                                  ;	mov	al, 0Eh
 40247                                  ;	out	37h, al
 40248                                  ;	xor	ax, ax
 40249                                  ;	out	0F2h, al
 40250                                  
 40251                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40252                                  
 40253                                  rpFind2:
 40254                                  	db	0Fh, 20h, 0C0h
 40255                                  
 40256                                  rpFind2Len equ	$ - rpFind2
 40257                                  
 40258                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40259                                  
 40260                                  rpFind3:
 40261                                  	db	0Fh, 22h, 0C0h, 0EAh
 40262                                  
 40263                                  rpFind3Len equ	$ - rpFind3
 40264                                  
 40265                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40266                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40267                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40268                                  
 40269                                  ; note, there is no rpRepl1 string
 40270                                  
 40271                                  rpRepl2:
 40272                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40273                                  
 40274                                  rpRepl2Len equ	$ - rpRepl2
 40275                                  
 40276                                  ;	push	eax
 40277                                  ;	push	cx
 40278                                  ;	mov	eax, cr0
 40279                                  
 40280                                  rpRepl3:
 40281                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40282                                  
 40283                                  rpRepl3Len equ	$ - rpRepl3
 40284                                  
 40285                                  ;	mov	ss, bx
 40286                                  ;	pop	cx
 40287                                  ;	pop	eax
 40288                                  
 40289                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40290                                  
 40291                                  rpFind4:
 40292                                  	db	93h, 58h, 8Bh, 0CCh
 40293                                  
 40294                                  rpFind4Len equ	$ - rpFind4
 40295                                  
 40296                                  ;	xchg	bx, ax
 40297                                  ;	pop	ax
 40298                                  ;	mov	cx, sp
 40299                                  
 40300                                  rpFind5:
 40301                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40302                                  
 40303                                  rpFind5Len equ	$ - rpFind5
 40304                                  
 40305                                  ;	mov	ax, DE0Ch
 40306                                  ;	int	67h
 40307                                  ;	mov	sp, cx
 40308                                  ;	jmp	bx
 40309                                  
 40310                                  rpRepl4:
 40311                                  	db	93h, 58h, 8Bh, 0CCh
 40312                                  	db	02Eh, 066h, 0A3h
 40313                                  
 40314                                  rpRepl4o1Len equ $ - rpRepl4
 40315                                  
 40316                                  	db	00h, 00h
 40317                                  	db	02Eh, 066h, 89h, 36h
 40318                                  
 40319                                  rpRepl4o2Len equ $ - rpRepl4
 40320                                  
 40321                                  	db	00h, 00h
 40322                                  
 40323                                  rpRepl4Len equ	$ - rpRepl4
 40324                                  
 40325                                  ;	xchg	bx, ax
 40326                                  ;	pop	ax
 40327                                  ;	mov	cx, sp
 40328                                  ;	mov	dword ptr cs:[xxxx], eax
 40329                                  ;	mov	dword ptr cs:[xxxx], esi
 40330                                  
 40331                                  rpRepl5:
 40332                                  	db	8Bh, 0E1h
 40333                                  	db	2Eh, 66h, 0A1h
 40334                                  
 40335                                  rpRepl5o1Len equ $ - rpRepl5
 40336                                  
 40337                                  	db	00h, 00h
 40338                                  	db	2Eh, 66h, 8Bh, 36h
 40339                                  
 40340                                  rpRepl5o2Len equ $ - rpRepl5
 40341                                  
 40342                                  	db	00h, 00h
 40343                                  	db	0FFh, 0E3h
 40344                                  
 40345                                  rpRepl5Len equ	$ - rpRepl5
 40346                                  
 40347                                  ;	mov	sp, cx
 40348                                  ;	mov	eax, dword ptr cs:[xxxx]
 40349                                  ;	mov	esi, dword ptr cs:[xxxx]
 40350                                  ;	jmp	bx
 40351                                  
 40352                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40353                                  
 40354                                  rpFind6:
 40355                                  	db	0FAh, 52h, 51h
 40356                                  
 40357                                  rpFind6Len equ	$ - rpFind6
 40358                                  
 40359                                  ;	cli
 40360                                  ;	push	dx
 40361                                  ;	push	cx
 40362                                  
 40363                                  rpFind7a:
 40364                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40365                                  
 40366                                  rpFind7aLen equ	$ - rpFind7a
 40367                                  
 40368                                  ;	mov	ax, 0DE0Ch
 40369                                  ;	call	fword ptr es:[xxxx]
 40370                                  
 40371                                  rpFind7b:
 40372                                  	db	59h, 5Ah, 5Bh
 40373                                  
 40374                                  rpFind7bLen equ	$ - rpFind7b
 40375                                  
 40376                                  ;	pop	cx
 40377                                  ;	pop	dx
 40378                                  ;	pop	bx
 40379                                  
 40380                                  rpRepl6 :
 40381                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40382                                  
 40383                                  rpRepl6Len equ	$ - rpRepl6
 40384                                  
 40385                                  ;	cli
 40386                                  ;	push	eax
 40387                                  ;	push	ebx
 40388                                  ;	push	ecx
 40389                                  ;	push	edx
 40390                                  
 40391                                  rpRepl7:
 40392                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40393                                  
 40394                                  rpRepl7Len equ	$ - rpRepl7
 40395                                  
 40396                                  ;	pop	edx
 40397                                  ;	pop	ecx
 40398                                  ;	pop	ebx
 40399                                  ;	pop	eax
 40400                                  ;	pop	bx
 40401                                  
 40402                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40403                                  
 40404                                  rpFind8:
 40405                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40406                                  
 40407                                  rpFind8Len equ	$ - rpFind8
 40408                                  
 40409                                  ;	pusha
 40410                                  ;	push	es
 40411                                  ;	push	ds
 40412                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40413                                  ;	mov	ds, ax
 40414                                  
 40415                                  rpFind9 :
 40416                                  	db	1Fh, 07h, 61h
 40417                                  
 40418                                  rpFind9Len equ	$ - rpFind9
 40419                                  
 40420                                  ;	pop	ds
 40421                                  ;	pop	es
 40422                                  ;	popa
 40423                                  
 40424                                  rpRepl8:
 40425                                   	db	66h, 60h, 06h, 1Eh
 40426                                  
 40427                                  rpRepl8Len equ	$ - rpRepl8
 40428                                  
 40429                                  ;	pushad
 40430                                  ;	push	es
 40431                                  ;	push	ds
 40432                                  
 40433                                  rpRepl9:
 40434                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40435                                  
 40436                                  rpRepl9Len equ	$ - rpRepl9
 40437                                  
 40438                                  ;	pop	ds
 40439                                  ;	pop	es
 40440                                  ;	popad
 40441                                  ;	retn			;no need to jmp back to main-line
 40442                                  
 40443                                  ;----------------------------------------------------------------------------
 40444                                  
 40445                                  struc SearchPair
 40446                                   .sp_off1: resw 1	; offset of 1st search string
 40447                                   .sp_len1: resw 1	; length of 1st search string
 40448                                   .sp_off2: resw 1	; 2nd string
 40449                                   .sp_len2: resw 1	; 2nd string
 40450                                   .sp_diff: resw 1	; max difference between offsets
 40451                                   .size:
 40452                                  endstruc
 40453                                  
 40454                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40455                                  
 40456                                  rpBug1Strs:
 40457                                  	dw	rpFind2
 40458                                  	dw	rpFind2Len ; 3
 40459                                  	dw	rpFind3
 40460                                  	dw	rpFind3Len ; 4
 40461                                  	dw	20h
 40462                                  
 40463                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40464                                  
 40465                                  rpBug2Strs:
 40466                                  	dw	rpFind4
 40467                                  	dw	rpFind4Len ; 4
 40468                                  	dw	rpFind5
 40469                                  	dw	rpFind5Len ; 9
 40470                                  	dw	80h
 40471                                  
 40472                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40473                                  
 40474                                  rpBug3Strs:
 40475                                  	dw	rpFind6
 40476                                  	dw	rpFind6Len ; 3
 40477                                  	dw	rpFind7a
 40478                                  	dw	rpFind7aLen ; 7
 40479                                  	dw	80h
 40480                                  
 40481                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40482                                  
 40483                                  rpBug4Strs:
 40484                                  	dw	rpFind8
 40485                                  	dw	4
 40486                                  	dw	rpFind9
 40487                                  	dw	rpFind9Len ; 3
 40488                                  	dw	80h
 40489                                  
 40490                                  ;----------------------------------------------------------------------------
 40491                                  
 40492                                  struc StackVars
 40493                                   .sv_wVersion:	resw 1		; Rational extender version #
 40494                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40495                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40496                                   .size:
 40497                                  endstruc
 40498                                  
 40499                                  ;----------------------------------------------------------------------------
 40500                                  
 40501                                  ; 22/05/2019 - Retro DOS v4.0
 40502                                  
 40503                                  Rational386Patch:
 40504                                  	; Do a few quick checks to see if this looks like a Rational
 40505                                  	; Extended application. Hopefully this will quickly weed out
 40506                                  	; most non Rational apps.
 40507                                  
 40508                                  	cmp	word [es:0],395		; version number goes here - versions
 40509                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40510                                  
 40511                                  	cmp	word [es:0Ch],20h	; always has this value here
 40512                                  	jne	short rp3QuickOut
 40513                                  
 40514                                  	push	ax
 40515                                  
 40516                                  	mov	ax,18h 			; extender has 18h at
 40517                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40518                                  	jne	short rp3QO_ax
 40519                                  	cmp	[es:28],ax
 40520                                  	jne	short rp3QO_ax
 40521                                  	cmp	[es:36],ax
 40522                                  	je	short rp3Maybe
 40523                                  rp3QO_ax:
 40524                                  	pop	ax
 40525                                  rp3QuickOut:
 40526                                  	retn
 40527                                  
 40528                                  ; It might be the rational extender, do more extensive checking
 40529                                  
 40530                                  rp3Maybe:
 40531                                  	cld
 40532                                  	push	bx			; note ax pushed above
 40533                                  	push	cx
 40534                                  	push	dx
 40535                                  	push	si
 40536                                  	push	di
 40537                                  	push	es
 40538                                  	push	ds			; we use all of them
 40539                                  	push	bp
 40540                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40541                                  	mov	bp,sp
 40542                                  
 40543                                  	push	cs
 40544                                  	pop	ds
 40545                                  
 40546                                  	mov	ax,[es:0]		; save version #
 40547                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40548                                  	mov	[bp],ax	
 40549                                  					; check that binary version # matches
 40550                                  	call	VerifyVersion		;   ascii string
 40551                                  	jne	short rp3Exit_j
 40552                                  
 40553                                  ; Looks like this is it, find where to put the patch code.  The
 40554                                  ; patch will be located on top of Rational code specific to 80286
 40555                                  ; processors, so these patchs MUST NOT be applied if running on
 40556                                  ; an 80286 system.
 40557                                  
 40558                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40559                                  
 40560                                  	mov	cx,4500h		; force search len to 4700h (searches
 40561                                  	;mov	[bp+2],cx
 40562                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40563                                  
 40564                                  	mov	es,[es:20h]		; es=code segment
 40565                                  
 40566                                  	mov	si,rpFind1		; string to find
 40567                                  	mov	dx,rpFind1Len ; 10	; length to match
 40568                                  	call	ScanCodeSeq		; look for code seq
 40569                                  	jz	short rpGotPatch
 40570                                  
 40571                                  ; According to Rational, some very old versions of the extender may not
 40572                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40573                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40574                                  
 40575                                  	mov	si,rpFind1a
 40576                                  	mov	dx,rpFind1aLen  ;8
 40577                                  	call	ScanCodeSeq
 40578                                  	jz	short rpGotPatch
 40579                                  
 40580                                  rp3Exit_j:
 40581                                  	jmp	rp3Exit
 40582                                  
 40583                                  ; Found the location to write patch code! DI = offset in code seg.
 40584                                  
 40585                                  rpGotPatch:
 40586                                  	;mov	[bp+4],di
 40587                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40588                                  
 40589                                  ;----------------------------------------------------------------------------
 40590                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40591                                  
 40592                                  	;cmp	word [bp+0],381
 40593                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40594                                  	cmp	word [bp],381
 40595                                  	jae	short rpBug2			;   < 3.81
 40596                                  
 40597                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40598                                  	call	FindBadCode
 40599                                  	jc	short rpBug2
 40600                                  
 40601                                  ; si = rpFind2 offset, di = rpFind3 offset
 40602                                  
 40603                                  	push	di
 40604                                  	mov	di,si				; rpFind2 offset
 40605                                  	mov	dx,rpFind2Len ; 3
 40606                                  
 40607                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40608                                  	jne	short rp_no_cx
 40609                                  
 40610                                  	dec	di				;   yes, gobble up push cx too
 40611                                  	inc	dx
 40612                                  rp_no_cx:
 40613                                  	mov	si,rpRepl2			; patch out find2 sequence
 40614                                  	mov	cx,rpRepl2Len  ; 6
 40615                                  	call	GenPatch
 40616                                  
 40617                                  	pop	di				; rpFind3 offset
 40618                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40619                                  	jne	short rp_no_cx2
 40620                                  
 40621                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40622                                  rp_no_cx2:
 40623                                  	;mov	ax,[bp+4]
 40624                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40625                                  	;mov	[es:di+4],ax
 40626                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40627                                  
 40628                                  	push	di				; save find3 offset
 40629                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40630                                  	mov	cx,rpRepl3Len ; 5
 40631                                  	call	CopyPatch
 40632                                  
 40633                                  	pop	bx				; find3 offset
 40634                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40635                                  	call	GenJump 			; jmp back from patch area
 40636                                  	;mov	[bp+4],di
 40637                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40638                                  						;   area pointer
 40639                                  
 40640                                  ;----------------------------------------------------------------------------
 40641                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40642                                  
 40643                                  rpBug2:
 40644                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40645                                  	call	FindBadCode
 40646                                  	jc	short rpBug3
 40647                                  
 40648                                  ; si = rpFind4 offset, di = rpFind5 offset
 40649                                  
 40650                                  	;push	word [bp+4]
 40651                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40652                                  						;   (where repl4 goes)
 40653                                  	push	di				; save find5 offset
 40654                                  
 40655                                  	mov	di,si
 40656                                  	mov	dx,rpFind4Len ; 4
 40657                                  	mov	si,rpRepl4
 40658                                  	mov	cx,rpRepl4Len ; 15
 40659                                  	call	GenPatch			; patch out find4 code
 40660                                  
 40661                                  	pop	di				; find5 offset
 40662                                  	add	di,5				; keep 5 bytes of find5 code
 40663                                  	;mov	bx,[bp+4]
 40664                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40665                                  	push	bx				; save repl5 location
 40666                                  	call	GenJump
 40667                                  
 40668                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40669                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40670                                  	call	CopyPatch			;   so no need to jmp back to
 40671                                  						;   main-line code
 40672                                  
 40673                                  ; patches have been made, now update the patch code to store/load dwords just
 40674                                  ; after the code in the patch area
 40675                                  
 40676                                  	pop	di				; repl5 location
 40677                                  	pop	si				; repl4 location
 40678                                  
 40679                                  	;mov	ax,[bp+4]
 40680                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40681                                  
 40682                                  	;mov	[es:si+7],ax
 40683                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40684                                  	;mov	[es:di+5],ax
 40685                                  	mov	[es:di+rpRepl5o1Len],ax
 40686                                  	add	ax,4
 40687                                  	;mov	[es:si+0Dh],ax
 40688                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40689                                  	;mov	[es:di+0Bh],ax
 40690                                  	mov	[es:di+rpRepl5o2Len],ax
 40691                                  
 40692                                  	;add	word [bp+4],8
 40693                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40694                                  						; patch area
 40695                                  
 40696                                  ;----------------------------------------------------------------------------
 40697                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40698                                  
 40699                                  rpBug3:
 40700                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40701                                  	call	FindBadCode
 40702                                  	jc	short rpBug4
 40703                                  
 40704                                  	;add	di,9
 40705                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40706                                  	push	si				;   code and locate find7b
 40707                                  	mov	si,rpFind7b			;   sequence
 40708                                  	mov	dx,rpFind7bLen ; 3
 40709                                  	call	ScanCodeSeq_di
 40710                                  	pop	si
 40711                                  	jnz	short rpBug4
 40712                                  
 40713                                  	push	di				; save find7b code offset
 40714                                  
 40715                                  	mov	di,si
 40716                                  	mov	dx,rpFind6Len ; 3
 40717                                  	mov	si,rpRepl6
 40718                                  	mov	cx,rpRepl6Len ; 9
 40719                                  	call	GenPatch			; patch out find6 code
 40720                                  
 40721                                  	pop	di
 40722                                  	mov	dx,rpFind7bLen ; 3
 40723                                  	mov	si,rpRepl7
 40724                                  	mov	cx,rpRepl7Len ; 9
 40725                                  	call	GenPatch			; patch out find7b code
 40726                                  
 40727                                  ;----------------------------------------------------------------------------
 40728                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40729                                  
 40730                                  rpBug4:
 40731                                  	;cmp	word [bp+0],360
 40732                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40733                                  	cmp	word [bp],360
 40734                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40735                                  
 40736                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40737                                  	call	FindBadCode
 40738                                  	jc	short rp3Exit
 40739                                  
 40740                                  	push	di				; save find9 code offset
 40741                                  
 40742                                  	mov	di,si
 40743                                  	mov	dx,3
 40744                                  	mov	si,rpRepl8
 40745                                  	mov	cx,rpRepl8Len ; 4
 40746                                  	call	GenPatch			; patch out find8 code
 40747                                  
 40748                                  	pop	di				; find9 offset
 40749                                  	;mov	bx,[bp+4]
 40750                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40751                                  	call	GenJump 			;   patch area
 40752                                  
 40753                                  	mov	si,rpRepl9			; copy replacement code to
 40754                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40755                                  	call	CopyPatch			;   so no jmp back to main-line
 40756                                  
 40757                                  rp3Exit:
 40758                                  	add	sp,StackVars.size
 40759                                  	pop	bp
 40760                                  	pop	ds
 40761                                  	pop	es
 40762                                  	pop	di
 40763                                  	pop	si
 40764                                  	pop	dx
 40765                                  	pop	cx
 40766                                  	pop	bx
 40767                                  	pop	ax
 40768                                  	retn
 40769                                  
 40770                                  ;----------------------------------------------------------------------------
 40771                                  ;
 40772                                  ; FindBadCode
 40773                                  ;
 40774                                  ; Searches Rational code segment looking for a pair of find strings (all
 40775                                  ; patches have at least two find strings).
 40776                                  ;
 40777                                  ; Entry:
 40778                                  ;	ES    = code segment to search
 40779                                  ;	DS:BX = search pair structure for this search
 40780                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40781                                  ;
 40782                                  ; Exit:
 40783                                  ;	CY flag clear if both strings found, and
 40784                                  ;	SI    = offset in ES of 1st string
 40785                                  ;	DI    = offset in ES of 2nd string
 40786                                  ;	CY set if either string not found, or strings too far apart
 40787                                  ;
 40788                                  ; Used:
 40789                                  ;	CX
 40790                                  ;
 40791                                  ;----------------------------------------------------------------------------
 40792                                  
 40793                                  ;struc SearchPair
 40794                                  ; .sp_off1: resw 1	; offset of 1st search string
 40795                                  ; .sp_len1: resw 1	; length of 1st search string
 40796                                  ; .sp_off2: resw 1	; 2nd string
 40797                                  ; .sp_len2: resw 1	; 2nd string
 40798                                  ; .sp_diff: resw 1	; max difference between offsets
 40799                                  ; .size:
 40800                                  ;endstruc
 40801                                  
 40802                                  FindBadCode:
 40803                                  	;mov	cx,[bp+2]
 40804                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40805                                  
 40806                                  	mov	si,[bx]	; mov si,[bx+0]
 40807                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40808                                  	
 40809                                  	;mov	dx,[bx+2]
 40810                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40811                                  	call	ScanCodeSeq
 40812                                  	jnz	short fbc_error		; done if 1st not found
 40813                                  
 40814                                  	push	di			; save 1st string offset
 40815                                  
 40816                                  	;mov	si,[bx+4]
 40817                                  	mov	si,[bx+SearchPair.sp_off2]
 40818                                  	;mov	dx,[bx+6]
 40819                                  	mov	dx,[bx+SearchPair.sp_len2]
 40820                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40821                                  
 40822                                  	pop	si			; restore 1st string offset
 40823                                  	jnz	short fbc_error
 40824                                  
 40825                                  	mov	ax,di			; sanity check that
 40826                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40827                                  	jc	short fbc_error
 40828                                  	;cmp	ax,[bx+8]
 40829                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40830                                  	ja	short fbc_error
 40831                                  
 40832                                  	clc
 40833                                  	retn
 40834                                  
 40835                                  fbc_error:
 40836                                  	stc
 40837                                  	retn
 40838                                  
 40839                                  ;----------------------------------------------------------------------------
 40840                                  ;
 40841                                  ; GenPatch
 40842                                  ;
 40843                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40844                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40845                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40846                                  ; code.
 40847                                  ;
 40848                                  ; Entry:
 40849                                  ;	ES:DI = start of buggy code to be patched
 40850                                  ;	DX    = length of buggy code to be patched
 40851                                  ;	DS:SI = replacement patch code
 40852                                  ;	CX    = length of replacement patch code
 40853                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40854                                  ;
 40855                                  ; Exit:
 40856                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40857                                  ;
 40858                                  ; Used:
 40859                                  ;	AX, BX, SI, Flags
 40860                                  ;
 40861                                  ;----------------------------------------------------------------------------
 40862                                  
 40863                                  GenPatch:
 40864                                  	push	di			;save offset of buggy code
 40865                                  
 40866                                  	;mov	bx,[bp+4]
 40867                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40868                                  					;jump from buggy code to patch area
 40869                                  	call	GenJump
 40870                                  
 40871                                  	call	CopyPatch		;copy replacement code to patch area
 40872                                  
 40873                                  	pop	bx			;offset of buggy code + buggy code
 40874                                  	add	bx,dx			;  length = return from patch offset
 40875                                  
 40876                                  	call	GenJump 		;jump from patch area back to main-
 40877                                  	;mov	[bp+4],di
 40878                                  	mov	[bp+StackVars.sv_pPatch],di
 40879                                  					;  line code, update patch pointer
 40880                                  	retn
 40881                                  
 40882                                  ;----------------------------------------------------------------------------
 40883                                  ;
 40884                                  ; CopyPatch
 40885                                  ;
 40886                                  ; Copies patch code to patch location.
 40887                                  ;
 40888                                  ; Entry:
 40889                                  ;	DS:SI = patch code to be copied
 40890                                  ;	ES    = segment of code to patch
 40891                                  ;	CX    = length of code to copy
 40892                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40893                                  ;
 40894                                  ; Exit:
 40895                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40896                                  ;
 40897                                  ; Used:
 40898                                  ;	SI, Flags
 40899                                  ;
 40900                                  ;----------------------------------------------------------------------------
 40901                                  
 40902                                  CopyPatch:
 40903                                  	push	cx
 40904                                  	;mov	di,[bp+4]
 40905                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40906                                  	cld
 40907                                  	rep movsb
 40908                                  	pop	cx
 40909                                  	;mov	[bp+4],di
 40910                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40911                                  	retn
 40912                                  
 40913                                  ;----------------------------------------------------------------------------
 40914                                  ;
 40915                                  ; GenJump
 40916                                  ;
 40917                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40918                                  ;
 40919                                  ; Entry:
 40920                                  ;	ES:DI = from location (where to put jmp instruction)
 40921                                  ;	BX    = to location (where to jump to)
 40922                                  ;
 40923                                  ; Exit:
 40924                                  ;	DI = byte after generated jump
 40925                                  ;
 40926                                  ; Used:
 40927                                  ;	AX
 40928                                  ;
 40929                                  ;----------------------------------------------------------------------------
 40930                                  
 40931                                  GenJump:
 40932                                  	mov	al,0E9h		; jmp rel16 opcode
 40933                                  	stosb
 40934                                  
 40935                                  	mov	ax,bx		; calc offset to 'to' location
 40936                                  	sub	ax,di
 40937                                  	sub	ax,2
 40938                                  
 40939                                  	stosw			; output offset
 40940                                  
 40941                                  	retn
 40942                                  
 40943                                  ;----------------------------------------------------------------------------
 40944                                  ;
 40945                                  ; ScanCodeSeq
 40946                                  ;
 40947                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40948                                  ;
 40949                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40950                                  ;
 40951                                  ;----------------------------------------------------------------------------
 40952                                  
 40953                                  ScanCodeSeq:
 40954                                  	mov	di,200h
 40955                                  ScanCodeSeq_di:
 40956                                  	push	cx
 40957                                  	sub	cx,dx
 40958                                  	inc	cx
 40959                                  scsagain:
 40960                                  	push	si
 40961                                  	push	di
 40962                                  	push	cx
 40963                                  	mov	cx,dx
 40964                                  	rep	cmpsb
 40965                                  	pop	cx
 40966                                  	pop	di
 40967                                  	pop	si
 40968                                  	je	short scsfound
 40969                                  	inc	di
 40970                                  	loop	scsagain
 40971                                  scsfound:
 40972                                  	pop	cx
 40973                                  vvexit:		; 18/12/2022
 40974                                  	retn
 40975                                  	
 40976                                  ;----------------------------------------------------------------------------
 40977                                  ;
 40978                                  ; VerifyVersion
 40979                                  ;
 40980                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40981                                  ; from ES:2A.
 40982                                  ;
 40983                                  ;       Entry: AX = binary version number 
 40984                                  ;       Exit : Z flag set if version numbers match
 40985                                  ;
 40986                                  ;----------------------------------------------------------------------------
 40987                                  
 40988                                  VerifyVersion:
 40989                                  	mov	si,[es:2Ah]		; offset of version number
 40990                                  					;  in ascii
 40991                                  	mov	bl,10
 40992                                  	add	si,3			; point to last digit
 40993                                  
 40994                                  	call	VVDigit
 40995                                  	jne	short vvexit
 40996                                  	call	VVDigit
 40997                                  	jne	short vvexit
 40998                                  	cmp	byte [es:si],'.'
 40999                                  	jne	short vvexit
 41000                                  	dec	si
 41001                                  	;call	VVDigit
 41002                                  	; 18/12/2022
 41003                                  	;jmp	short VVDigit
 41004                                  ;vvexit:
 41005                                  	;retn
 41006                                  VVDigit:
 41007                                  	div	bl
 41008                                  	add	ah,'0'
 41009                                  	dec	si
 41010                                  	cmp	[es:si+1],ah
 41011                                  	mov	ah,0			; do not xor or sub we need Z
 41012                                  	retn
 41013                                  
 41014                                  %endif
 41015                                  
 41016                                  ;-----------------------------------------------------------------------
 41017                                  
 41018                                  ; 23/05/2019 - Retro DOS v4.0
 41019                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41020                                  
 41021                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41022                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41023                                  
 41024                                  exepatch_start:	 ; label byte
 41025                                  
 41026                                  	; The following is the code that'll be layed over the buggy unpack
 41027                                  	; code.
 41028                                  str1:
 41029 000073F0 06                      	db  06h	  		;push	es		 
 41030 000073F1 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41031                                  
 41032                                  first_stop equ	$-str1
 41033                                  			
 41034 000073F3 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41035                                  
 41036                                  first:  ; label	byte
 41037                                  
 41038 000073F5 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41039 000073F7 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41040 000073F9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41041 000073FC 57                      	db  57h	    		;push	di
 41042 000073FD B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41043 00007400 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41044 00007402 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41045 00007404 47                      	db  47h	    		;inc	di			
 41046 00007405 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41047 00007407 5F                      	db  5Fh	    		;pop	di
 41048 00007408 58                      	db  58h	    		;pop	ax
 41049                                  
 41050                                  second_stop equ	$-first
 41051                                  
 41052 00007409 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41053                                  
 41054                                  second: ; label	byte
 41055                                  
 41056 0000740B 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41057                                  		    		;NextRec:				
 41058 0000740D B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41059                                  		    		;norm_agn:				
 41060 00007410 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41061 00007412 F7D0                    	db  0F7h,0D0h		;not	ax		
 41062 00007414 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41063 00007416 7413                    	db  74h,13h		;jz	short SI_ok			
 41064 00007418 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41065 0000741A 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41066 0000741D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41067 0000741F 7308                    	db  73h,08h		;jnc	short SItoDS			
 41068 00007421 F7DA                    	db  0F7h,0DAh		;neg	dx			
 41069 00007423 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41070 00007425 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41071 00007427 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41072                                  				;SItoDS: 				
 41073 00007429 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41074                                  				;SI_ok:					
 41075 0000742B 87F7                    	db  87h,0F7h		;xchg	si,di			
 41076 0000742D 1E                      	db  1Eh			;push	ds			
 41077 0000742E 06                      	db  06h			;push	es			
 41078 0000742F 1F                      	db  1Fh			;pop	ds			
 41079 00007430 07                      	db  07h			;pop	es			
 41080 00007431 FECD                    	db  0FEh,0CDh		;dec	ch			
 41081 00007433 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41082 00007435 AC                      	db  0ACh		;lodsb			
 41083 00007436 92                      	db  92h			;xchg	dx,ax
 41084 00007437 4E                      	db  4Eh			;dec	si
 41085 00007438 AD                      	db  0ADh		;lodsw			
 41086 00007439 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41087 0000743B 46                      	db  46h			;inc	si		
 41088 0000743C 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41089 0000743E 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41090 00007440 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41091 00007442 7505                    	db  75h,05h		;jne	short TryEnum
 41092 00007444 AC                      	db  0ACh		;lodsb				
 41093 00007445 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41094                                  
 41095                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41096 00007447 EB06                    	db  0EBh,06h		;jmp	short TryNext
 41097                                  
 41098                                  				;TryEnum:
 41099 00007449 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41100 0000744B 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41101 0000744D F3A4                    	db  0F3h,0A4h		;rep movsb			
 41102                                  				;TryNext:
 41103                                  
 41104 0000744F 92                      	db  92h			;xchg	dx,ax
 41105                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41106                                  
 41107 00007450 A801                    	db  0A8h,01h		;test	al,1			
 41108 00007452 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41109 00007454 9090                    	db  90h,90h		;nop,nop
 41110                                  	
 41111                                  last_stop equ $-second
 41112                                  size_str1 equ $-str1
 41113                                  
 41114                                  	; The following is the code that we need to look for in the exe
 41115                                  	; file.
 41116                                  
 41117                                  scan_patch1: ; label byte
 41118                                  
 41119 00007456 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41120 00007458 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41121 0000745A 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41122 0000745C 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41123 0000745E 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41124 00007460 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41125 00007463 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41126 00007466 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41127 00007468 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41128 0000746A 47                      	db  47h			;inc	di			
 41129 0000746B 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41130 0000746D 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41131 0000746F 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41132 00007471 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41133 00007473 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41134                                  				;NextRec:
 41135 00007476 B104                    	db  0B1h,04h		;mov	cl,4
 41136 00007478 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41137 0000747A F7D0                    	db  0F7h,0D0h		;not	ax		
 41138 0000747C D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41139 0000747E 7409                    	db  74h,09h		;jz	short SI_ok
 41140 00007480 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41141 00007482 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41142 00007484 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41143 00007486 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41144                                  	       			;SI_ok:
 41145 00007489 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41146 0000748B F7D0                    	db  0F7h,0D0h		;not	ax
 41147 0000748D D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41148 0000748F 7409                    	db  74h,09h		;jz	short DI_ok
 41149 00007491 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41150 00007493 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41151 00007495 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41152 00007497 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41153                                  				;DI_ok:
 41154                                  
 41155                                  size_scan_patch1 equ $-scan_patch1
 41156                                  
 41157                                  scan_patch2: ; label byte
 41158                                  			
 41159 0000749A 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41160 0000749C 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41161 0000749E 48                      	db  48h			;dec	ax
 41162 0000749F 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41163 000074A1 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41164 000074A3 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41165 000074A6 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41166 000074A9 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41167 000074AB F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41168 000074AD 47                      	db  47h			;inc	di			
 41169 000074AE 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41170 000074B0 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41171 000074B2 48                      	db  48h			;dec	ax
 41172 000074B3 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41173 000074B5 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41174                                  				;NextRec:
 41175 000074B8 B104                    	db  0B1h,04h		;mov	cl,4
 41176 000074BA 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41177 000074BC F7D0                    	db  0F7h,0D0h		;not	ax		
 41178 000074BE D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41179 000074C0 740A                    	db  74h,0Ah		;jz	short SI_ok
 41180 000074C2 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41181 000074C4 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41182 000074C6 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41183 000074C8 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41184                                  				;or	si,0FFF0H
 41185                                  				;SI_ok:
 41186 000074CC 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41187 000074CE F7D0                    	db  0F7h,0D0h		;not	ax
 41188 000074D0 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41189 000074D2 740A                    	db  74h,0Ah		;jz	short DI_ok
 41190 000074D4 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41191 000074D6 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41192 000074D8 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41193 000074DA 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41194                                  				;or	di,0FFF0H
 41195                                  				;DI_ok:
 41196                                  
 41197                                  size_scan_patch2 equ $-scan_patch2
 41198                                  
 41199                                  scan_patch3: ; label byte
 41200                                  
 41201 000074DE 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41202 000074E0 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41203 000074E2 48                      	db  48h			;dec	ax
 41204 000074E3 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41205 000074E5 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41206 000074E7 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41207 000074EA B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41208 000074ED B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41209 000074EF F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41210 000074F1 47                      	db  47h			;inc	di			
 41211 000074F2 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41212 000074F4 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41213 000074F6 48                      	db  48h			;dec	ax
 41214 000074F7 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41215 000074F9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41216                                  				;NextRec:
 41217 000074FC B104                    	db  0B1h,04h		;mov	cl,4
 41218 000074FE 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41219 00007500 F7D0                    	db  0F7h,0D0h		;not	ax		
 41220 00007502 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41221 00007504 7409                    	db  74h,09h		;jz	short SI_ok
 41222 00007506 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41223 00007508 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41224 0000750A 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41225 0000750C 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41226                                  				;SI_ok:
 41227 0000750F 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41228 00007511 F7D0                    	db  0F7h,0D0h		;not	ax
 41229 00007513 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41230 00007515 7409                    	db  74h,09h		;jz	short DI_ok
 41231 00007517 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41232 00007519 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41233 0000751B 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41234 0000751D 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41235                                  				;DI_ok:
 41236                                  
 41237                                  size_scan_patch3 equ $-scan_patch3
 41238                                  
 41239                                  scan_com: ; label byte
 41240                                  
 41241 00007520 AC                      	db  0ACh		;lodsb			
 41242 00007521 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41243 00007523 4E                      	db  4Eh			;dec	si
 41244 00007524 AD                      	db  0ADh		;lodsw			
 41245 00007525 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41246 00007527 46                      	db  46h			;inc	si		
 41247 00007528 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41248 0000752A 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41249 0000752C 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41250 0000752E 7506                    	db  75h,06h		;jne	short TryEnum
 41251 00007530 AC                      	db  0ACh		;lodsb				
 41252 00007531 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41253 00007533 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41254                                  				;TryEnum:
 41255 00007536 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41256 00007538 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41257 0000753A F3A4                    	db  0F3h,0A4h		;rep movsb			
 41258                                  				;TryNext:
 41259 0000753C 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41260 0000753E A801                    	db  0A8h,01h		;test	al,1			
 41261                                  ;	db  74h,0BAh		;jz	short NextRec			
 41262                                  
 41263                                  size_scan_com	equ	$-scan_com
 41264                                  
 41265                                  ;-----------------------------------------------------------------------
 41266                                  
 41267                                  ; 23/05/2019 - Retro DOS v4.0
 41268                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41269                                  
 41270                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41271                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41272                                  
 41273                                  ExePatch:
 41274                                  	; 28/12/2022 - Retro DOS v4.1
 41275                                  	;call	ExePackPatch
 41276                                  	;;call	word [ss:RationalPatchPtr]
 41277                                  	;retn
 41278                                  	; 28/12/2022
 41279                                  	;jmp	short ExePackPatch
 41280                                  
 41281                                  ;-----------------------------------------------------------------------
 41282                                  ;
 41283                                  ; Procedure Name 	: ExePackPatch
 41284                                  ;
 41285                                  ; Inputs	 	: DS 			-> DOSDATA
 41286                                  ;			  ES:0 			-> read in image
 41287                                  ;			  ax:cx = start cs:ip of program
 41288                                  ; Output		:		
 41289                                  ;
 41290                                  ;	1. If ES <= 0fffh
 41291                                  ;	   2. if exepack signature ('RB') found
 41292                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41293                                  ;	       	 4. if rest of the code & checksum compares
 41294                                  ;	  	    5. overlay buggy code with code in 
 41295                                  ;		       doscode:str1.
 41296                                  ;		 6. endif
 41297                                  ;	      7. endif
 41298                                  ;	   8. endif
 41299                                  ;	9. endif
 41300                                  ;
 41301                                  ;
 41302                                  ; Uses			: NONE
 41303                                  ;
 41304                                  ;-----------------------------------------------------------------------
 41305                                  		
 41306                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41307                                  	; 23/05/2019 - Retro DOS v4.0	
 41308                                  ExePackPatch:
 41309 00007540 53                      	push	bx
 41310 00007541 8CC3                    	mov	bx,es			; bx has load segment
 41311 00007543 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41312 00007547 7602                    	jbe	short ep_cont		; N: 
 41313 00007549 5B                      	pop	bx			; Y: no need to patch
 41314 0000754A C3                      	retn
 41315                                  ep_cont:
 41316 0000754B 1E                      	push	ds
 41317 0000754C 06                      	push	es
 41318 0000754D 50                      	push	ax
 41319 0000754E 51                      	push	cx
 41320 0000754F 56                      	push	si
 41321 00007550 57                      	push	di
 41322                                  	
 41323                                  		; M033 - start
 41324                                  		; exepacked programs have an IP of 12h (>=2)
 41325                                  
 41326 00007551 83E902                  	sub	cx,2			; Q: is IP >=2 
 41327 00007554 7303                    	jnb	short epp_1		; N: exit
 41328 00007556 E9C500                  	jmp	ep_notpacked
 41329                                  					; ax:cx now points to location of
 41330                                  					; 'RB' if this is an exepacked file.
 41331                                  		; M033 - end
 41332                                  epp_1:
 41333 00007559 89CF                    	mov	di,cx
 41334 0000755B 8EC0                    	mov	es,ax
 41335 0000755D 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41336                                  					; unpack_offset
 41337                                  
 41338 00007562 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41339                                  	;ljne	ep_notpacked
 41340 00007567 7403                    	je	short epp_2
 41341 00007569 E9B200                  	jmp	ep_notpacked
 41342                                  epp_2:
 41343 0000756C 0E                      	push	cs
 41344 0000756D 1F                      	pop	ds			; set ds to cs
 41345                                  
 41346                                  	;add	di,6Ch
 41347 0000756E 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41348                                  					;          file where we hope to find
 41349                                  					;	   scan string. 
 41350                                  
 41351 00007571 E8B200                  	call	chk_common_str		; check for match
 41352                                  
 41353 00007574 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41354                                  					; N: check at patch2_offset
 41355                                  					; Y: check for rest of patch string
 41356 00007576 BE[5674]                	mov	si,scan_patch1
 41357                                  					; ds:si -> scan string 
 41358 00007579 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41359                                  
 41360                                  	;add	di,28h
 41361                                  	; 07/12/2022
 41362 0000757E 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41363                                  					;          file where we hope to find
 41364                                  					;	   scan string. 
 41365                                  	;mov	cx,68
 41366 00007581 B94400                  	mov	cx,size_scan_patch1
 41367                                  	;mov	bx,142
 41368 00007584 BB8E00                  	mov	bx,CHKSUM1_LEN
 41369                                  	;mov	ax,0EF4Eh
 41370 00007587 B84EEF                  	mov	ax,PATCH1_CHKSUM
 41371 0000758A E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41372 0000758D 7208                    	jc	short ep_done1		; Q: did we pass the test
 41373                                  					; N: exit
 41374                                  					; Y: overlay code with new 
 41375 0000758F BE[F073]                	mov	si,str1
 41376                                  	;mov	cx,102
 41377 00007592 B96600                  	mov	cx,size_str1
 41378                                  	
 41379 00007595 F3A4                    	rep	movsb
 41380                                  ep_done1:
 41381 00007597 E98400                  	jmp	ep_done
 41382                                  
 41383                                  ep_chkpatch2:
 41384                                  	;mov	di,76h
 41385 0000759A BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41386                                  					; in another version of unpack
 41387 0000759D E88600                  	call	chk_common_str		; check for match
 41388                                  
 41389 000075A0 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41390                                  					; N: check for patch3_offset
 41391                                  					; Y: check for rest of patch string
 41392                                  
 41393 000075A2 BE[9A74]                	mov	si,scan_patch2
 41394                                  					; ds:si -> scan string 
 41395                                  	;mov	di,32h
 41396 000075A5 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41397                                  					;          file where we hope to find
 41398                                  	;mov	cx,68			;	   scan string. 
 41399 000075A8 B94400                  	mov	cx,size_scan_patch2
 41400                                  	;mov	bx,140
 41401 000075AB BB8C00                  	mov	bx,CHKSUM2_LEN
 41402                                  	;mov	ax,78B2h
 41403 000075AE B8B278                  	mov	ax,PATCH2_CHKSUM
 41404 000075B1 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41405                                  
 41406                                  					; M046 - Start
 41407                                  					; Q: did we pass the test
 41408 000075B4 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41409                                  					; N: try with a different chksum
 41410                                  
 41411                                  
 41412 000075B6 BE[9A74]                	mov	si,scan_patch2
 41413                                  					; ds:si -> scan string 
 41414                                  	;mov	cx,68
 41415 000075B9 B94400                  	mov	cx,size_scan_patch2
 41416                                  	;mov	bx,129
 41417 000075BC BB8100                  	mov	bx,CHKSUM2A_LEN
 41418                                  	;mov	ax,1C47h
 41419 000075BF B8471C                  	mov	ax,PATCH2A_CHKSUM
 41420 000075C2 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41421                                  					; Q: did we pass the test
 41422 000075C5 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41423                                  					; Y: overlay code with new 
 41424                                  						
 41425                                  ep_patchcode2:			       	; M046 - End
 41426 000075C7 BE[F073]                	mov	si,str1
 41427                                  	;mov	cx,3
 41428 000075CA B90300                  	mov	cx,first_stop
 41429 000075CD F3A4                    	rep	movsb
 41430 000075CF B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41431 000075D2 AB                      	stosw
 41432 000075D3 83C602                  	add	si,2
 41433                                  	;mov	cx,20
 41434 000075D6 B91400                  	mov	cx,second_stop
 41435 000075D9 F3A4                    	rep	movsb
 41436 000075DB AB                      	stosw				; put in dec ax and nop
 41437 000075DC 83C602                  	add	si,2
 41438                                  	;mov	cx,75
 41439 000075DF B94B00                  	mov	cx,last_stop
 41440 000075E2 F3A4                    	rep	movsb
 41441 000075E4 EB38                    	jmp	short ep_done
 41442                                  
 41443                                  ep_chkpatch3:
 41444                                  	;mov	di,74h
 41445 000075E6 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41446                                  					; in another version of unpack
 41447 000075E9 E83A00                  	call	chk_common_str		; check for match
 41448                                  
 41449 000075EC 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41450                                  					; N: exit
 41451                                  					; Y: check for rest of patch string
 41452 000075EE BE[DE74]                	mov	si,scan_patch3
 41453                                  					; ds:si -> scan string 
 41454                                  	;mov	di,32h
 41455 000075F1 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41456                                  					;          file where we hope to find
 41457                                  					;	   scan string. 
 41458                                  	;mov	cx,66
 41459 000075F4 B94200                  	mov	cx,size_scan_patch3
 41460                                  	;mov	bx,139
 41461 000075F7 BB8B00                  	mov	bx,CHKSUM3_LEN
 41462                                  	;mov	ax,4EDEh
 41463 000075FA B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41464 000075FD E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41465 00007600 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41466                                  					; N: exit
 41467                                  					; Y: overlay code with new 
 41468 00007602 BE[F073]                	mov	si,str1
 41469                                  	;mv	cx,3
 41470 00007605 B90300                  	mov	cx,first_stop
 41471 00007608 F3A4                    	rep	movsb
 41472 0000760A B048                    	mov	al,48h			; al = opcode for dec ax
 41473 0000760C AA                      	stosb
 41474 0000760D 83C602                  	add	si,2
 41475                                  	;mov	cx,20
 41476 00007610 B91400                  	mov	cx,second_stop
 41477 00007613 F3A4                    	rep	movsb
 41478 00007615 AA                      	stosb				; put in dec ax
 41479 00007616 83C602                  	add	si,2
 41480                                  	;mov	cx,75
 41481 00007619 B94B00                  	mov	cx,last_stop
 41482 0000761C F3A4                    	rep	movsb
 41483                                  
 41484                                  ep_notpacked:
 41485                                  	;stc
 41486                                  ep_done:
 41487 0000761E 5F                      	pop	di
 41488 0000761F 5E                      	pop	si
 41489 00007620 59                      	pop	cx
 41490 00007621 58                      	pop	ax
 41491 00007622 07                      	pop	es
 41492 00007623 1F                      	pop	ds
 41493 00007624 5B                      	pop	bx
 41494 00007625 C3                      	retn
 41495                                  
 41496                                  ;-------------------------------------------------------------------------
 41497                                  ;
 41498                                  ; 	Procedure Name	: chk_common_str
 41499                                  ;
 41500                                  ;	Input		: DS = DOSCODE
 41501                                  ;			; ES:DI points to string in packed file
 41502                                  ;
 41503                                  ;	Output		; Z if match else NZ
 41504                                  ;
 41505                                  ;-------------------------------------------------------------------------
 41506                                  
 41507                                  	; 23/05/2019 - Retro DOS v4.0
 41508                                  chk_common_str:
 41509 00007626 BE[2075]                	mov	si,scan_com
 41510                                  					; ds:si -> scan string 
 41511                                  	;mov	cx,32
 41512 00007629 B92000                  	mov	cx,size_scan_com
 41513                                  
 41514 0000762C F3A6                    	repe	cmpsb	       
 41515                                  
 41516                                  					; M046 - start
 41517                                  	; a fourth possible version of these exepacked programs have a 
 41518                                  	; 056h instead of 06Bh. See scan_com above
 41519                                  	;
 41520                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41521                                  	;
 41522                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41523                                  	; we shall try to match the rest of the string
 41524                                  	;
 41525                                  
 41526 0000762E 7409                    	jz	short ccs_done
 41527 00007630 26807DFF56              	cmp	byte [es:di-1],56h
 41528 00007635 7502                    	jnz	short ccs_done
 41529                                  
 41530 00007637 F3A6                    	repe	cmpsb	    
 41531                                  ccs_done:				; M046 - end
 41532 00007639 C3                      	retn
 41533                                  
 41534                                  ;-------------------------------------------------------------------------
 41535                                  ;
 41536                                  ;	Procedure Name	: chk_patchsum
 41537                                  ;
 41538                                  ;	Input		: DS:SI -> string we're looking for
 41539                                  ;			: ES:DI -> offset in packed file
 41540                                  ;			: CX 	= scan length
 41541                                  ;			: BX	= length of check sum
 41542                                  ;			: AX 	= value of check sum
 41543                                  ;
 41544                                  ;	Output		: if patch & check sum compare
 41545                                  ;				NC
 41546                                  ;			  else
 41547                                  ;				CY
 41548                                  ;
 41549                                  ;	Uses		: AX, BX, CX, SI
 41550                                  ;
 41551                                  ;-------------------------------------------------------------------------
 41552                                  
 41553                                  	; 23/05/2019 - Retro DOS v4.0
 41554                                  chk_patchsum:
 41555 0000763A 57                      	push	di
 41556                                  
 41557 0000763B F3A6                    	repe	cmpsb			   
 41558                                  
 41559 0000763D 7518                    	jnz	short cp_fail		; Q: does the patch match
 41560                                  					; N: exit
 41561                                  					; Y:	
 41562                                  
 41563                                  		; we do a check sum starting from the location of the 
 41564                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41565                                  		; unpacking code.
 41566                                  
 41567 0000763F 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41568 00007644 89D9                    	mov	cx,bx			; cx = length of check sum
 41569                                  
 41570 00007646 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41571 00007648 31C0                    	xor	ax,ax
 41572                                  ep_chksum:
 41573 0000764A 260305                  	add	ax,[es:di]
 41574 0000764D 83C702                  	add	di,2
 41575 00007650 E2F8                    	loop	ep_chksum
 41576                                  
 41577 00007652 5F                      	pop	di			; restore di
 41578                                  
 41579 00007653 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41580                                  	;jne	short cp_fail		; N: exit
 41581                                  					; Y: 
 41582                                  	; 25/09/2023
 41583                                  	;clc	
 41584                                  	;retn
 41585 00007655 74E2                    	je	short ccs_done ; cf=0
 41586                                  	
 41587                                  cp_fail:
 41588 00007657 F9                      	stc
 41589 00007658 C3                      	retn
 41590                                  
 41591                                  ; 28/12/2022 - Retro DOS v4.1
 41592                                  %if 0
 41593                                  ;--------------------------------------------------------------------------- 
 41594                                  
 41595                                  
 41596                                  ; M020 : BEGIN
 41597                                  ;
 41598                                  ;---------------------------------------------------------------------------
 41599                                  ;
 41600                                  ; procedure : RationalPatch
 41601                                  ;
 41602                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41603                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41604                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41605                                  ;
 41606                                  ; THE BUG is in the following code sequence:
 41607                                  ;
 41608                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41609                                  ;90		even				; word align
 41610                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41611                                  ;e8 xx xx	call	set_A20			; enable A20
 41612                                  ;
 41613                                  ; This patch routine replaces the mov & the loop with a far call into a
 41614                                  ; routine in DOS data segment which is in low memory (because A20 line
 41615                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41616                                  ; a mov & loop.
 41617                                  ;
 41618                                  ; Identification of Buggy Rational EXE
 41619                                  ; ====================================
 41620                                  ;
 41621                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41622                                  ;
 41623                                  ; OFFSET				Contains
 41624                                  ; ------				--------
 41625                                  ; 0000h			100 times Version number in binary
 41626                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41627                                  ;
 41628                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41629                                  ;
 41630                                  ; 002ah			offset where version number is stored in ASCII
 41631                                  ;				e.g. '3.48A'
 41632                                  ;
 41633                                  ; 0030h			offset of copyright string. Copyright strings either
 41634                                  ;			start with "DOS/16M Copyright...." or
 41635                                  ;			"Copyright.....". The string contains
 41636                                  ;			"Rational Systems, Inc."
 41637                                  ;
 41638                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41639                                  ;				from the program image
 41640                                  ; 0016h			word : size of buggy code segment
 41641                                  ;
 41642                                  ;	Buggy code is definite to start after offset 200h in its segment
 41643                                  ;
 41644                                  ;----------------------------------------------------------------------------
 41645                                  
 41646                                  ; 23/05/2019 - Retro DOS v4.0
 41647                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41648                                  
 41649                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41650                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41651                                  
 41652                                  RScanPattern1:
 41653                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41654                                  
 41655                                  RLen1 equ $ - RScanPattern1
 41656                                  
 41657                                  RScanPattern2:
 41658                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41659                                  
 41660                                  RLen2 equ $ - RScanPattern2
 41661                                  
 41662                                  RScanPattern3:
 41663                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41664                                  
 41665                                  RLen3 equ $ - RScanPattern2
 41666                                  
 41667                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41668                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41669                                  
 41670                                  ;----------------------------------------------------------------------------
 41671                                  ;
 41672                                  ; INPUT : ES = segment where program got loaded
 41673                                  ;
 41674                                  ;----------------------------------------------------------------------------
 41675                                  
 41676                                  RationalPatch:
 41677                                  	cld
 41678                                  	push	ax
 41679                                  	push	bx
 41680                                  	push	cx
 41681                                  	push	dx
 41682                                  	push	si
 41683                                  	push	di
 41684                                  	push	es
 41685                                  	push	ds			; we use all of them
 41686                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41687                                  	push	cs
 41688                                  	pop	ds
 41689                                  	
 41690                                  	mov	si,RScanPattern1
 41691                                  	;mov	cx,10
 41692                                  	mov	cx,RLen1
 41693                                  	rep	cmpsb			; do we have the pattern ?
 41694                                  	jne	short rpexit
 41695                                  	mov	ax,[es:0]
 41696                                  	cmp	ax,348			; is it a buggy version ?
 41697                                  	jb	short rpexit
 41698                                  	cmp	ax,383			; is it a buggy version
 41699                                  	ja	short rpexit
 41700                                  
 41701                                  	call	VerifyVersion
 41702                                  	jne	short rpexit
 41703                                  
 41704                                  	mov	cx,[es:16h]		; Length of buggy code seg
 41705                                  	sub	cx,200h			; Length we search (we start
 41706                                  					;  at offset 200h)
 41707                                  	mov	es,[es:20h]		; es=buggy code segment
 41708                                  	mov	si,RScanPattern2
 41709                                  	;mov	dx,8	
 41710                                  	mov	dx,RLen2
 41711                                  	call	ScanCodeSeq		; look for code seq with nop
 41712                                  	jz	short rpfound
 41713                                  
 41714                                  	mov	si,RScanPattern3
 41715                                  	;mov	dx,15
 41716                                  	mov	dx,RLen3
 41717                                  	call	ScanCodeSeq		; look for code seq w/o nop
 41718                                  	jnz	short rpexit
 41719                                  
 41720                                  rpfound:
 41721                                  	
 41722                                  ;	we set up a far call into DOS data
 41723                                  ;	dx has the length of the code seq we were searching for
 41724                                  
 41725                                  	mov	al,9Ah			; far call opcode
 41726                                  	stosb
 41727                                  	mov	ax,RatBugCode
 41728                                  	stosw
 41729                                  	mov	ax,ss
 41730                                  	stosw
 41731                                  	mov	cx,dx
 41732                                  	sub	cx,6			; filler (with NOPs)
 41733                                  	mov	al,90h
 41734                                  	rep	stosb
 41735                                  rpexit:
 41736                                  	pop	ds
 41737                                  	pop	es
 41738                                  	pop	di
 41739                                  	pop	si
 41740                                  	pop	dx
 41741                                  	pop	cx
 41742                                  	pop	bx
 41743                                  	pop	ax
 41744                                  	retn
 41745                                  
 41746                                  ; M020 END
 41747                                  
 41748                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41749                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41750                                  
 41751                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41752                                  
 41753                                  ;----------------------------------------------------------------------------
 41754                                  ;
 41755                                  ; ScanCodeSeq
 41756                                  ;
 41757                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41758                                  ;
 41759                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41760                                  ;
 41761                                  ;----------------------------------------------------------------------------
 41762                                  
 41763                                  ScanCodeSeq:
 41764                                  	; 17/12/2022
 41765                                  	mov	di,200h
 41766                                  ;ScanCodeSeq_di:
 41767                                  	push	cx
 41768                                  	sub	cx,dx
 41769                                  	inc	cx
 41770                                  	; 17/12/2022
 41771                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41772                                  	;mov	di,200h
 41773                                  scsagain:
 41774                                  	push	si
 41775                                  	push	di
 41776                                  	push	cx
 41777                                  	mov	cx,dx
 41778                                  	rep	cmpsb
 41779                                  	pop	cx
 41780                                  	pop	di
 41781                                  	pop	si
 41782                                  	je	short scsfound
 41783                                  	inc	di
 41784                                  	loop	scsagain
 41785                                  scsfound:
 41786                                  	pop	cx
 41787                                  vvexit:		; 18/12/2022
 41788                                  	retn
 41789                                  
 41790                                  
 41791                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41792                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41793                                  
 41794                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41795                                  
 41796                                  ;----------------------------------------------------------------------------
 41797                                  ;
 41798                                  ; VerifyVersion
 41799                                  ;
 41800                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41801                                  ; from ES:2A.
 41802                                  ;
 41803                                  ;       Entry: AX = binary version number 
 41804                                  ;       Exit : Z flag set if version numbers match
 41805                                  ;
 41806                                  ;----------------------------------------------------------------------------
 41807                                  
 41808                                  VerifyVersion:
 41809                                  	mov	si,[es:2Ah]		; offset of version number
 41810                                  					;  in ascii
 41811                                  	mov	bl,10
 41812                                  	add	si,3			; point to last digit
 41813                                  
 41814                                  	call	VVDigit
 41815                                  	jne	short vvexit
 41816                                  	call	VVDigit
 41817                                  	jne	short vvexit
 41818                                  	cmp	byte [es:si],'.' ; 2Eh
 41819                                  	jne	short vvexit
 41820                                  	dec	si
 41821                                  	;call	VVDigit
 41822                                  	; 18/12/2022
 41823                                  	;jmp	short VVDigit
 41824                                  ;vvexit:
 41825                                  	;retn
 41826                                  VVDigit:
 41827                                  	div	bl
 41828                                  	add	ah,'0' ; 30h
 41829                                  	dec	si
 41830                                  	cmp	[es:si+1],ah
 41831                                  	mov	ah,0			; do not xor or sub we need Z
 41832                                  	retn
 41833                                  
 41834                                  ;--------------------------------------------------------------------------- 
 41835                                  %endif	; 28/12/2022
 41836                                  
 41837                                  ;---------------------------------------------------------------------------
 41838                                  ;
 41839                                  ;	M068
 41840                                  ;
 41841                                  ; 	Procedure Name	: IsCopyProt
 41842                                  ;
 41843                                  ;	Inputs		: DS:100 -> start of com file just read in
 41844                                  ;
 41845                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41846                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41847                                  ;			  copy protect scheme that relies on the A20 line
 41848                                  ;			  being turned off for it's scheme to work.
 41849                                  ;
 41850                                  ;			  Note: The int 21 function dispatcher will turn 
 41851                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41852                                  ;				and dec the A20OFF_COUNT before	iretting 
 41853                                  ;				to the user. 
 41854                                  ;
 41855                                  ;	Uses		: ES, DI, SI, CX
 41856                                  ;
 41857                                  ;---------------------------------------------------------------------------
 41858                                  
 41859                                  ; 23/05/2019 - Retro DOS v4.0
 41860                                  
 41861                                  CPStartOffset	EQU	0175h
 41862                                  CPID1Offset	EQU	011Bh
 41863                                  CPID2Offset	EQU	0173h
 41864                                  CPID3Offset	EQU	0146h
 41865                                  CPID4Offset	EQU	0124h
 41866                                  ID1		EQU	05343h
 41867                                  ID2		EQU	05044h
 41868                                  ID3		EQU	0F413h
 41869                                  ID4		EQU	08000h
 41870                                  
 41871                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41872                                  
 41873                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41874                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41875                                  
 41876                                  CPScanPattern:
 41877 00007659 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41878 0000765D 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41879 00007661 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41880 00007667 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41881 0000766B B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41882 0000766E BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41883                                  
 41884                                  CPSPlen	EQU $ - CPScanPattern
 41885                                  
 41886                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41887                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41888                                  
 41889                                  IsCopyProt:
 41890 00007671 813E1B014353            	cmp	word [CPID1Offset],ID1
 41891 00007677 752D                    	jne	short CP_done
 41892                                  
 41893 00007679 813E73014450            	cmp	word [CPID2Offset],ID2
 41894 0000767F 7525                    	jne	short CP_done
 41895                                  
 41896 00007681 813E460113F4            	cmp	word [CPID3Offset],ID3
 41897 00007687 751D                    	jne	short CP_done
 41898                                  
 41899 00007689 813E24010080            	cmp	word [CPID4Offset],ID4
 41900 0000768F 7515                    	jne	short CP_done
 41901                                  
 41902 00007691 0E                      	push	cs
 41903 00007692 07                      	pop	es
 41904 00007693 BF[5976]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41905                                  
 41906 00007696 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41907                                  					; of pattern
 41908                                  
 41909 00007699 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41910 0000769C F3A6                    	repe	cmpsb
 41911 0000769E 7506                    	jnz	short CP_done
 41912                                  
 41913 000076A0 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41914                                  CP_done:
 41915 000076A6 C3                      	retn
 41916                                  	
 41917                                  ;DOSCODE ENDS
 41918                                  
 41919                                  	;END
 41920                                  
 41921                                  ;----------------------------------------------------------------------------
 41922                                  
 41923                                  ;align 2 ; 05/09/2018 (Error!)
 41924                                  
 41925                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41926                                  ;align 16 ; 08/09/2018 (OK.)
 41927 000076A7 90                      align 2
 41928                                  
 41929                                  ; 06/08/2018 - Retro DOS v3.0
 41930                                  ;============================================================================
 41931                                  ; MSINIT.ASM
 41932                                  ;============================================================================
 41933                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41934                                  ;
 41935                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41936                                  ;
 41937                                  	; 15/07/2018 - Retro DOS v3.0
 41938                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41939                                  
 41940                                  ; temp iret instruction
 41941                                  
 41942                                  
 41943                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41944                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41945                                  
 41946                                  initiret: ; MSDOS 6.0
 41947                                  SYSBUF:
 41948                                  ;IRETT: ; 06/05/2019
 41949 000076A8 CF                      	iret
 41950                                  
 41951                                  ; 22/04/2019 - Retro DOS v4.0
 41952                                  
 41953                                  ; pointer to the BIOS data segment that will be available just to the
 41954                                  ; initialization code
 41955                                  
 41956 000076A9 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41957                                  
 41958                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41959                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41960                                  
 41961                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41962                                  
 41963                                  ParaRound:
 41964 000076AB 83C00F                  	add	ax, 15
 41965 000076AE D1D8                    	rcr	ax, 1
 41966 000076B0 D1E8                    	shr	ax, 1
 41967 000076B2 D1E8                    	shr	ax, 1
 41968 000076B4 D1E8                    	shr	ax, 1
 41969 000076B6 C3                      	retn
 41970                                  
 41971                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41972                                  
 41973                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41974                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41975                                  	
 41976                                  	; 30/05/2019
 41977                                  	; 22/04/2019 - Retro DOS v4.0
 41978                                  	; 07/07/2018 - Retro DOS v3.0
 41979                                  	; Retro DOS v2.0 - 03/03/2018
 41980                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41981                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41982                                  DOSINIT:
 41983                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41984                                  	;
 41985                                  	; Far call from SYSINIT
 41986                                  	; DX = Memory size in paragraphs
 41987                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41988                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41989                                  	;
 41990                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41991                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41992                                  
 41993 000076B7 FA                              CLI
 41994 000076B8 FC                              CLD
 41995                                  
 41996                                  	; 03/11/2022
 41997                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41998                                  	
 41999                                  	; 17/12/2022
 42000                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42001                                  	;push	dx ; =*=		; save parameters from BIOS
 42002                                  	
 42003 000076B9 56                      	push	si
 42004 000076BA 1E                      	push	ds
 42005 000076BB 57                      	push	di			;save di (ptr to BiosComBlock)
 42006                                  
 42007 000076BC 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42008                                  
 42009                                  ; First, move the DOS data segment to its final location in low memory
 42010                                  
 42011                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42012                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42013 000076BE B8[387B]                	mov	ax,MEMSTRT		; get offset of end of init code
 42014                                  
 42015                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42016                                  	;and	ax,~15	; 0FFF0h	; boundary
 42017                                  
 42018                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42019                                  					; code segment
 42020                                  
 42021                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42022 000076C1 83C00F                  	add	ax,15			; round to nearest paragraph
 42023 000076C4 83E0F0                  	and	ax,~15			; boundary
 42024                                  
 42025 000076C7 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42026                                  					; code segment
 42027                                  	; 05/12/2022
 42028                                  	; 30/04/2019 - Retro DOS v4.0
 42029                                  	;xor	si,si
 42030                                  	
 42031 000076C9 8CC8                    	mov	ax,cs
 42032 000076CB 8ED8                    	mov	ds,ax			; ds = current code segment
 42033                                  					; DS:SI now points to dosdata
 42034                                  
 42035                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42036                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42037                                  					;  BData segment. Cannot use
 42038                                  					;  getdseg macro here!!!
 42039                                  	; 17/12/2022
 42040 000076CD 8E06[A976]              	mov	es,[InitBioDataSeg]
 42041                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42042                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42043                                  
 42044                                  	;mov	es,[es:3]
 42045 000076D1 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42046                                  
 42047 000076D6 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42048                                  
 42049                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42050                                  	;mov	cx,4976  ; 25/05/2019
 42051                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42052                                  	;mov	cx,4962
 42053                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42054 000076D8 B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42055 000076DB F3A4                    	rep	movsb			; move data to final location
 42056                                  	
 42057 000076DD 5F                      	pop	di			; restore ptr to BiosComBlock
 42058 000076DE 1F                      	pop	ds			; restore parms from BIOS
 42059 000076DF 5E                      	pop	si
 42060                                  	; 17/12/2022
 42061                                  	;pop	dx ; 30/05/2019	
 42062                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42063                                  	;pop	dx ; =*=		
 42064                                  
 42065 000076E0 06                      	push	es
 42066 000076E1 1E                      	push	ds
 42067 000076E2 07                      	pop	es			; es:si -> device chain
 42068 000076E3 1F                      	pop	ds			; ds points to dosdata
 42069                                  
 42070                                  ;SR;
 42071                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42072                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42073                                  ;lie table handling for device drivers. This can be expanded later on to
 42074                                  ;establish a communication block from the BIOS to the DOS.
 42075                                  
 42076                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42077                                  	;mov	[1042h],bx
 42078 000076E4 893E[4010]              	mov	[BiosDataPtr],di
 42079 000076E8 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42080                                  
 42081 000076EC 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42082                                  
 42083                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42084                                  
 42085 000076F1 2E8C1E[A050]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42086 000076F6 2E8C1E[A450]            	mov	[cs:LowInt24Addr+2],ds
 42087 000076FB 2E8C1E[A850]            	mov	[cs:LowInt28Addr+2],ds
 42088                                  
 42089                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42090                                  	;mov	[584h],sp
 42091                                  	;mov	[586h],ss
 42092 00007700 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42093 00007704 8926[8405]              	mov	[USER_SP],sp
 42094 00007708 8C16[8605]              	mov	[USER_SS],ss
 42095                                  
 42096 0000770C 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42097 0000770E 8ED0                    	mov	ss,ax
 42098                                  
 42099                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42100                                  	;mov	sp,offset dosdata:dskstack
 42101 00007710 BC[2009]                	mov	sp,DSKSTACK
 42102                                  
 42103                                  ;M023
 42104                                  ; Init patch ptrs to default values
 42105                                  
 42106                                  	;mov	word [1212h],RetExePatch
 42107                                  	;mov	word [1214h],RetExePatch
 42108                                  	;mov	word [61h],RetExePatch
 42109 00007713 C706[F811][1262]        	mov	word [FixExePatch],RetExePatch	; M023
 42110                                  	; 28/12/2022 - Retro DOS v4.1
 42111                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42112 00007719 C706[6100][1262]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42113                                  
 42114                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42115                                  %if 0	
 42116                                  
 42117                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42118                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42119                                  ; running in the HMA.
 42120                                  
 42121                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42122                                  	cmp	al,2		;   386 or later?
 42123                                  	mov	ax,Rational386Patch
 42124                                  	jae	short di_set_patch
 42125                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42126                                  di_set_patch:
 42127                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42128                                  
 42129                                  %endif
 42130                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42131                                  
 42132 0000771F 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42133                                  
 42134                                  	; ax now holds segment of DOS code
 42135 00007721 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42136                                  
 42137 00007724 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42138 00007728 8936[4800]              	mov	word [NULDEV],si
 42139                                  ;SR;
 42140                                  ; There are some locations in the Win386 instance data structures
 42141                                  ; which need to be set up with the DOS data segment. First, initialize
 42142                                  ; the segment part of the instance table pointer in the SIS.
 42143                                  
 42144                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42145 0000772C 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42146                                  
 42147                                  ; Now initialize the segment part of the pointer to the data in each
 42148                                  ; instance table entry.
 42149                                  
 42150 00007730 56                      	push	si		; preserve pointer to device chain
 42151                                  	; 18/12/2022
 42152                                  	; cx = 0
 42153 00007731 B107                    	mov	cl,7
 42154                                  	;mov	cx,7		; There are 7 entries in the instance table
 42155                                  				; M019
 42156                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42157 00007733 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42158                                  Instance_init_loop:
 42159 00007736 8C1C                    	mov	[si],ds		; set offset in instance entry
 42160                                  	;add	si,6
 42161 00007738 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42162 0000773B E2F9                    	loop	Instance_init_loop
 42163                                  
 42164                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42165                                  
 42166                                  	; 18/12/2022
 42167 0000773D B105                    	mov	cl,5
 42168                                  	;mov	cx,5		; There are five entries in the instance table
 42169                                  
 42170                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42171                                  	;mov	si,11EDh	; point si to segment field
 42172 0000773F BE[D311]                	mov	si,OldInstanceJunk+6
 42173                                  OldInstance_init_loop:
 42174 00007742 8C1C                    	mov	[si],ds		; set offset in instance entry
 42175 00007744 83C606                  	add	si,6		; move on to next entry
 42176 00007747 E2F9                    	loop	OldInstance_init_loop
 42177 00007749 5E                      	pop	si		; restore pointer to device chain
 42178                                  
 42179                                  ; End of WIN386 2.xx compatibility bullshit
 42180                                  
 42181                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42182                                  %if 0	
 42183                                     	; 30/04/2019
 42184                                  	;push	es
 42185                                  	;pop	ds
 42186                                  			; ds:si points to console device
 42187                                  
 42188                                  	; 24/04/2019 - Retro DOS v4.0
 42189                                  
 42190                                  	; 15/07/2018
 42191                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42192                                  	; (Set INT 2Ah handler address to an 'IRET')
 42193                                  
 42194                                  	; need crit vector inited to use deviocall
 42195                                  	;push	ds			; preserve segment of device chain
 42196                                  	push	es ; 30/04/2019
 42197                                  
 42198                                  %endif
 42199                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42200 0000774A 06                      	push	es
 42201                                  	; 17/12/2022
 42202                                  	;pop	ds
 42203                                  	;push	ds
 42204                                  
 42205 0000774B 31C0                    	xor	ax,ax
 42206 0000774D 8ED8                    	mov	ds,ax			; point DS to int vector table
 42207 0000774F B8[A876]                	mov	ax,initiret
 42208                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42209 00007752 A3A800                  	mov	[addr_int_ibm],ax
 42210 00007755 8CC8                    	mov	ax,cs
 42211                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42212 00007757 A3AA00                  	mov	[addr_int_ibm+2],ax
 42213 0000775A 1F                      	pop	ds			; restore segment of device chain
 42214                                  
 42215 0000775B E81C02                  	call	CHARINIT  		; initialize console driver
 42216 0000775E 56                      	push	si			; save pointer to header
 42217                                  
 42218 0000775F 16                      	push	ss			; move pointer to dos data...
 42219 00007760 07                      	pop	es			; ...into ES
 42220                                  
 42221                                  	;initialize sft for file 0 (CON)
 42222                                  
 42223                                          ; 07/07/2018 - Retro DOS v3.0
 42224                                  	; 24/04/2019 - Retro DOS v4.0
 42225                                  	;mov	di,SFTABL+6 
 42226 00007761 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42227 00007764 B80300                          MOV     AX,3
 42228 00007767 AB                              STOSW           	; Refcount
 42229 00007768 FEC8                            DEC     AL
 42230 0000776A AB                              STOSW           	; Access rd/wr, compatibility
 42231 0000776B 30C0                            XOR     AL,AL
 42232 0000776D AA                              STOSB           	; attribute
 42233                                  	;mov	al,0C3h
 42234 0000776E B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42235 00007770 AB                      	STOSW			; flags
 42236 00007771 89F0                            mov	ax,si
 42237 00007773 AB                              stosw			; device pointer in devptr	
 42238 00007774 8CD8                            mov	ax,ds
 42239 00007776 AB                      	stosw
 42240 00007777 31C0                    	xor	ax,ax	; 0
 42241 00007779 AB                      	stosw			; firclus
 42242 0000777A AB                      	stosw			; time
 42243 0000777B AB                      	stosw			; date
 42244 0000777C 48                      	dec	ax	; -1
 42245 0000777D AB                      	stosw			; size
 42246 0000777E AB                      	stosw
 42247 0000777F 40                      	inc	ax	; 0
 42248 00007780 AB                      	stosw			; position
 42249 00007781 AB                      	stosw
 42250                                  	;add	di,7
 42251 00007782 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42252                                  				; point at name
 42253                                  	;add	si,10
 42254 00007785 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42255                                  				; point to name
 42256 00007788 B90400                  	mov	cx,4
 42257 0000778B F3A5                    	rep	movsw		; name
 42258 0000778D B103                    	mov	cl,3
 42259 0000778F B020                    	mov	al," "
 42260 00007791 F3AA                    	rep	stosb		; extension
 42261                                  
 42262 00007793 5E                      	pop	si		; get back pointer to header
 42263                                  
 42264                                  				; mark device as CON I/O
 42265                                  	; 15/07/2018
 42266                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42267 00007794 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42268                                  	; 12/03/2018
 42269                                  	;mov	[ss:32h],si
 42270 00007798 368936[3200]            	MOV     [SS:BCON],SI
 42271                                  	;mov	[ss:34h],ds
 42272 0000779D 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42273                                  
 42274                                  	; initialize each device until the clock device is found
 42275                                  
 42276                                  CHAR_INIT_LOOP:
 42277 000077A2 C534                            LDS     SI,[SI]			; AUX device
 42278 000077A4 E8D301                  	call	CHARINIT 
 42279                                         	;15/07/2018
 42280                                  	;test	byte [SI+4],8
 42281 000077A7 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42282 000077AB 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42283                                  	; 12/03/2018
 42284                                  	;mov	[ss:2Eh],si
 42285 000077AD 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42286                                  	;mov	[ss:30h],ds
 42287 000077B2 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42288                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42289                                  
 42290                                  	;mov	bp,4970			; bp = pointer to free mem
 42291                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42292                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42293                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42294 000077B7 BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42295                                  
 42296 000077BA 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42297 000077BF 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42298                                  PERDRV:
 42299                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42300 000077C4 C534                            LDS	SI,[SI]			; Next device
 42301 000077C6 83FEFF                          CMP	SI,-1	; 0FFFFh
 42302 000077C9 7479                    	JZ	SHORT CONTINIT
 42303                                  
 42304 000077CB E8AC01                          call	CHARINIT
 42305                                  
 42306                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42307                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42308                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42309                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42310                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42311                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42312                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42313                                  
 42314                                          ; 15/07/2018
 42315                                  	;test	word [SI+4],8000h		; DEVTYP
 42316                                          ; 17/12/2022
 42317                                  	;test	byte [SI+5],80h
 42318 000077CE F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42319                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42320 000077D2 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42321                                  
 42322 000077D4 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42323 000077D9 30ED                    	XOR     CH,CH
 42324                                          ; 07/07/2018
 42325                                  	;MOV	[SI+10],CL		; Number of units in name field
 42326 000077DB 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42327 000077DE 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42328 000077E3 30F6                    	XOR     DH,DH
 42329 000077E5 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42330 000077EA 1E                      	PUSH    DS
 42331 000077EB 56                              PUSH    SI
 42332 000077EC 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42333                                  
 42334                                  PERUNIT:
 42335 000077F1 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42336 000077F3 43                              INC     BX
 42337 000077F4 43                              INC     BX                      ; On to next BPB
 42338                                  	; 15/12/2022
 42339                                  	; 07/07/2018
 42340                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42341 000077F5 26885600                	MOV     [ES:BP],DL
 42342                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42343                                  	;;mov	[ES:BP+0],DL
 42344                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42345                                  
 42346                                  	;MOV	[ES:BP+1],DH
 42347 000077F9 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42348 000077FD 53                              PUSH    BX
 42349 000077FE 51                              PUSH    CX
 42350 000077FF 52                              PUSH    DX
 42351                                  
 42352                                          ;invoke	$SETDPB
 42353 00007800 E8D297                          CALL	_$SETDPB		; build DPB!
 42354                                  
 42355                                  	; 07/07/2018
 42356                                  	;MOV	AX,[ES:BP+2]
 42357 00007803 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42358                                          ; 12/03/2018
 42359 00007807 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42360 0000780C 7604                    	JBE     SHORT NOTMAX		; N:
 42361 0000780E 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42362                                  NOTMAX:					
 42363                                  	; set the next dpb field in the currently built bpb
 42364                                  	; and mark as never accessed
 42365                                          
 42366                                  	; 24/04/2019
 42367 00007812 89E8                    	mov	ax,bp			; get pointer to DPB
 42368                                  	;add	ax,33
 42369 00007814 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42370                                  					; set seg & offset of next DPB
 42371                                  	;mov	[es:bp+25],ax
 42372 00007817 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42373                                  	;mov	[es:bp+27],es
 42374 0000781B 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42375                                  					; mark as never accessed
 42376                                  	;mov	byte [es:bp+24],0FFh
 42377 0000781F 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42378                                  
 42379 00007824 5A                      	POP     DX
 42380 00007825 59                              POP     CX
 42381 00007826 5B                              POP     BX
 42382 00007827 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42383 00007829 5E                              POP     SI
 42384 0000782A 1F                              POP     DS
 42385                                  					; ds:si -> device header
 42386                                  					; store it in the corresponding dpb
 42387                                  	; 07/07/2018
 42388                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42389 0000782B 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42390                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42391 0000782F 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42392                                  
 42393 00007833 1E                              PUSH    DS			; save pointer to device header
 42394 00007834 56                              PUSH    SI
 42395 00007835 FEC6                            INC     DH			; inc unit #
 42396 00007837 FEC2                            INC     DL			; inc drive #
 42397 00007839 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42398                                          ;add	bp,33 ; 24/04/2019
 42399 0000783B 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42400 0000783E E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42401                                          
 42402 00007840 5E                      	POP     SI			; restore pointer to device header
 42403 00007841 1F                              POP     DS
 42404 00007842 EB80                    	JMP	PERDRV			; process all drivers in chain
 42405                                  
 42406                                  CONTINIT:
 42407                                  	; 24/04/2019
 42408                                  	;sub	bp,33			; set link in last DPB to -1
 42409 00007844 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42410                                  					; set last link offset & segment
 42411                                  	;mov	word [bp+25],0FFFFh
 42412 00007847 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42413                                  	;mov	word [bp+27],0FFFFh
 42414 0000784C C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42415                                  	;add	bp,33
 42416 00007851 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42417                                  					; the DPB chain is done.  
 42418 00007854 16                      	push	ss
 42419 00007855 1F                      	pop	ds
 42420                                  
 42421 00007856 89E8                    	mov	ax,bp
 42422 00007858 E850FE                  	call	ParaRound		; round up to segment
 42423                                  
 42424 0000785B 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42425 0000785D 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42426                                  
 42427 0000785F BB0F00                  	mov	bx,0Fh
 42428                                  	
 42429                                  	; 24/05/2019
 42430                                  	;mov	cx,[ENDMEM]
 42431                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42432                                  	; 17/12/2022
 42433                                  	;mov	cx,[ENDMEM] 
 42434                                  					; set seg inpacketto dosdata					
 42435 00007862 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42436                                  
 42437                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42438                                  ; Also patch in the segment of the pointers in the dosdata area.
 42439                                  ;
 42440                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42441                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42442                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42443                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42444                                  
 42445 00007866 52                      	push	dx			; preserve first free segment
 42446                                  
 42447 00007867 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42448 0000786A 8EC0                    	mov	es,ax			; es = segment of DOS
 42449 0000786C C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42450                                  
 42451 00007872 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42452 00007875 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42453                                  					; other tables with seg in ES.
 42454                                  	; 17/12/2022
 42455                                  	; cx = 0
 42456 00007878 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42457                                  
 42458 0000787C 5A                      	pop	dx			; restore first free segment
 42459                                  
 42460                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42461                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42462                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42463                                  ; low_mem_stub by seg_reinit.
 42464                                  
 42465                                  	;xor	ax,ax ; 0
 42466                                  	;mov	ds,ax
 42467                                  	;mov	es,ax
 42468                                  	; 17/12/2022
 42469                                  	; cx = 0
 42470                                  	;xor	cx,cx ; 0
 42471 0000787D 8ED9                    	mov	ds,cx
 42472 0000787F 8EC1                    	mov	es,cx
 42473                                  
 42474                                  	; set the segment of int 24 vector that was 
 42475                                  	; left out by patch_vec_segments above.
 42476                                  
 42477                                  	; 17/12/2022
 42478                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42479                                  ;%if 0
 42480                                  	; 24/05/2019
 42481                                  	;;mov	di,90h
 42482                                  	;;mov	di,4*int_fatal_abort
 42483                                  	;mov	di,addr_int_fatal_abort
 42484 00007881 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42485                                  
 42486 00007884 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42487                                  	;mov	[di+2],ax  ; int 24h segment
 42488 00007888 8905                    	mov	[di],ax ; 24/05/2019
 42489                                  
 42490                                  	;;mov	di,82h
 42491                                  	;mov	di,INTBASE+2
 42492                                  
 42493                                  ;%endif
 42494                                  	; 17/12/2022
 42495                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42496                                  	;;mov	di,90h
 42497                                  	;;mov	di,4*int_fatal_abort
 42498                                  	;mov	di,addr_int_fatal_abort
 42499                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42500                                  	;mov	[di+2],ax  ; int 24h segment
 42501                                  	;;mov	di,82h
 42502                                  	;mov	di,INTBASE+2
 42503                                  
 42504                                  	; set default divide trap offset
 42505                                  
 42506                                  	;mov	word ptr ds:[0],offset doscode:divov
 42507 0000788A C7060000[7B52]          	mov	word [0],DIVOV	
 42508                                  
 42509                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42510                                  
 42511                                  	;mov	di,80h
 42512 00007890 BF8000                  	mov	di,INTBASE
 42513                                  	;mov	ax,offset doscode:irett
 42514 00007893 B8[E102]                	mov	ax,IRETT
 42515                                  
 42516                                  	; 17/12/2022
 42517                                  	; cx = 0
 42518 00007896 B109                    	mov	cl,9
 42519                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42520                                  					;   sets offsets for ints 20h-28h
 42521                                  iset1:
 42522 00007898 AB                      	stosw
 42523                                  	;add	di,2
 42524                                  	; 20/06/2023
 42525 00007899 47                      	inc	di
 42526 0000789A 47                      	inc	di
 42527 0000789B E2FB                    	loop	iset1
 42528                                  
 42529 0000789D 83C704                  	add	di,4			; skip vector 29h
 42530                                  
 42531                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42532                                  ;					;   sets offsets for ints 2ah-2fh
 42533                                  ;iset2:
 42534                                  ;	stosw
 42535                                  ;	add	di,2
 42536                                  ;	loop	iset2
 42537                                  
 42538                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42539                                  ; patch_vec_segments above. So skip it.
 42540                                  
 42541                                  ;	add	di,8			; skip vector 30h & 31h 
 42542                                  
 42543                                  	;;;
 42544                                  	; 06/05/2019 - Retro DOS v4.0
 42545                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42546                                  	; 17/12/2022
 42547 000078A0 B105                    	mov	cl,5 ; 28/06/2019
 42548                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42549                                  	;mov	cx,6
 42550                                  iset2:
 42551 000078A2 AB                      	stosw
 42552                                  	;add	di,2
 42553                                  	; 20/09/2023
 42554 000078A3 47                      	inc	di
 42555 000078A4 47                      	inc	di	
 42556 000078A5 E2FB                    	loop	iset2
 42557                                  
 42558                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42559                                  	; 17/12/2022
 42560 000078A7 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42561                                  	;add	di,8
 42562                                  	;;;
 42563                                  
 42564                                  	; 17/12/2022
 42565 000078AA B10E                    	mov	cl,14
 42566                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42567                                  					;   sets offsets for ints 32h-3fh
 42568                                  iset3:
 42569 000078AC AB                      	stosw
 42570                                  	;add	di,2
 42571                                  	; 20/09/2023
 42572 000078AD 47                      	inc	di
 42573 000078AE 47                      	inc	di
 42574 000078AF E2FB                    	loop	iset3
 42575                                  
 42576                                  ;if installed
 42577                                  	; set the offset of int2f handler
 42578                                  	;mov	word [0BCh],INT2F
 42579 000078B1 C706BC00[0707]          	mov	word [02Fh*4],INT2F
 42580                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42581 000078B7 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42582                                  	;mov	[0BEh],ax
 42583 000078BB A3BE00                  	mov	[(02Fh*4)+2],ax
 42584                                  ;endif
 42585                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42586                                  	; long jump will be patched in by seg_reinit
 42587                                  
 42588                                  	;mov	byte [C0h],0EAh
 42589 000078BE C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42590                                  	;mov	byte [C1h],CALL_ENTRY
 42591 000078C3 C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42592                                  
 42593 000078C9 C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42594 000078CF C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42595 000078D5 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42596 000078DB 89168A00                	mov	word [addr_int_terminate+2],dx	
 42597 000078DF C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42598 000078E5 C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42599 000078EB C7069C00[B561]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42600                                  
 42601 000078F1 16                      	push	ss
 42602 000078F2 1F                      	pop	ds
 42603                                  	
 42604                                  	; 24/05/2019
 42605                                  	;push	ss
 42606                                  	;pop	es
 42607                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42608                                  	; 17/12/2022
 42609                                  	;push	ss
 42610                                  	;pop	es
 42611                                  
 42612 000078F3 52                      	push	dx			; remember address of arena
 42613                                  
 42614 000078F4 42                      	inc	dx			; leave room for arena header
 42615                                  	;mov	[330h],dx
 42616 000078F5 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42617                                  
 42618 000078F9 31FF                    	xor	di,di			; point es:di at end of memory
 42619 000078FB 8EC2                    	mov	es,dx			; ...where psp will be
 42620 000078FD 31C0                    	xor	ax,ax
 42621                                  	;mov	cx,80h			; psp is 128 words
 42622                                  	; 17/12/2022
 42623 000078FF B180                    	mov	cl,128 ; 28/06/2019
 42624                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42625                                  	;mov	cx,128
 42626                                  
 42627 00007901 F3AB                    	rep	stosw			; zero out psp area
 42628 00007903 A1[4603]                        mov     ax,[ENDMEM]
 42629                                  	
 42630                                  	; 17/12/2022
 42631                                  	; cx = 0
 42632 00007906 E81A98                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42633                                  
 42634                                  	; ds, es now point to PSP
 42635                                  
 42636 00007909 16                      	push	ss
 42637 0000790A 1F                      	pop	ds
 42638                                  
 42639                                  	;mov	di,24
 42640 0000790B BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42641 0000790E 31C0                    	xor	ax,ax
 42642 00007910 AB                      	stosw
 42643 00007911 AA                      	stosb				; 0,1 and 2 are con device
 42644 00007912 B0FF                    	mov	al,0FFh
 42645                                  	;mov	cx,FILPERPROC-3 ; 17
 42646                                  	; 17/12/2022
 42647                                  	; cx = 4
 42648 00007914 B111                    	mov	cl,FILPERPROC-3 ; 17
 42649 00007916 F3AA                    	rep	stosb			; rest are unused
 42650                                  
 42651 00007918 16                      	push	ss
 42652 00007919 07                      	pop	es
 42653                                  					; must be set to print messages
 42654 0000791A 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42655                                  
 42656                                  ; after this point the char device functions for con will work for
 42657                                  ; printing messages
 42658                                  
 42659                                  	; 24/04/2019 - Retro DOS v4.0
 42660                                  
 42661                                  ; 12/05/2019
 42662                                  ;
 42663                                  ;write_version_msg:
 42664                                  ;
 42665                                  ;	;if	(not ibm)
 42666                                  ;	;mov	si,offset doscode:header
 42667                                  ;	mov	si,HEADER
 42668                                  ;outmes:
 42669                                  ;	;lods	cs:byte ptr [si]
 42670                                  ;	cs
 42671                                  ;	lodsb
 42672                                  ;	cmp	al,"$"
 42673                                  ;	je	short outdone
 42674                                  ;	call	OUTT
 42675                                  ;	jmp	short outmes
 42676                                  ;outdone:
 42677                                  ;	push	ss			; out stomps on segments
 42678                                  ;	pop	ds
 42679                                  ;	push	ss
 42680                                  ;	pop	es
 42681                                  ;	;endif
 42682                                  
 42683                                  	; at this point es is dosdata
 42684                                  
 42685                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42686                                  	; in sysinittable (ms_data.asm)
 42687                                  
 42688                                  	;mov	si,0D28h
 42689 0000791E BE[280D]                	mov	si,SysInitTable
 42690                                  
 42691                                  	; 17/12/2022
 42692                                  	; ds = es = ss
 42693                                  
 42694                                  	; 17/12/2022
 42695                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42696                                  ;%if 0
 42697                                  	;;mov	[es:si+6],es
 42698                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42699                                  	;;mov	[es:si+2],es
 42700                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42701                                  	
 42702 00007921 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42703 00007924 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42704                                  
 42705                                  	; buffhead -> dosdata:hashinitvar 
 42706                                  
 42707                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42708 00007927 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42709                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42710                                  	;mov	si,6Dh
 42711 0000792B BE[6D00]                	mov	si,HASHINITVAR
 42712                                  	;mov	[es:BUFFHEAD],si
 42713 0000792E 8936[3800]              	mov	[BUFFHEAD],si
 42714                                  
 42715 00007932 5A                              pop     dx                      ; restore address of arena
 42716                                  
 42717                                  	;mov	[032Ch+2],dx
 42718 00007933 8916[2E03]                      mov     [DMAADD+2],dx
 42719                                  
 42720                                  	;mov	[es:arena_head],dx
 42721 00007937 8916[2400]              	mov	[arena_head],dx
 42722                                  
 42723                                  ;%endif
 42724                                  
 42725                                  ; 17/12/2022
 42726                                  %if 0
 42727                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42728                                  	;;;
 42729                                  	;mov	[es:si+6],es
 42730                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42731                                  	;mov	[es:si+2],es
 42732                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42733                                  
 42734                                  	; buffhead -> dosdata:hashinitvar 
 42735                                  
 42736                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42737                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42738                                  	;mov	si,6Dh
 42739                                  	mov	si,HASHINITVAR
 42740                                  	mov	[es:BUFFHEAD],si
 42741                                  
 42742                                          pop     dx                      ; restore address of arena
 42743                                  
 42744                                  	;mov	[032Ch+2],dx
 42745                                          mov     [DMAADD+2],dx
 42746                                  
 42747                                  	mov	[es:arena_head],dx
 42748                                  	;;;
 42749                                  %endif
 42750                                  
 42751 0000793B 8EDA                            mov     ds,dx
 42752                                  
 42753                                  	;mov	byte [0],'Z'
 42754 0000793D C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42755                                          ;mov	word [1],0
 42756 00007942 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42757                                  
 42758 00007948 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42759 0000794C 29D0                    	sub	ax,dx
 42760 0000794E 48                              dec     ax
 42761 0000794F A30300                          mov     [ARENA.SIZE],ax
 42762                                  
 42763                                  	; point to sft 0
 42764                                  
 42765                                  	;mov	di,offset dosdata:sftabl + sftable
 42766                                  	;mov	di,SFTABL+6
 42767 00007952 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42768 00007955 B80300                          mov     ax,3
 42769 00007958 AB                              stosw           		; adjust refcount
 42770                                  
 42771                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42772                                  
 42773                                          ;mov	di,offset dosdata:sysinittable
 42774                                  	;mov	di,0D28h
 42775 00007959 BF[280D]                	mov	di,SysInitTable	
 42776                                  
 42777 0000795C 42                      	inc	dx			; advance dx from arena to psp
 42778 0000795D 8EDA                    	mov	ds,dx			; point ds to psp
 42779                                  
 42780                                  					; pass the address os seg_reinit 
 42781                                  					; in dx
 42782 0000795F BA[CD79]                	mov	dx,seg_reinit
 42783 00007962 B9[F073]                	mov	cx,exepatch_start
 42784 00007965 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42785                                  
 42786 00007969 B8[A876]                	mov	ax,SYSBUF
 42787 0000796C 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42788                                  	
 42789 0000796F 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42790 00007974 368E16[8605]                    mov     ss,[ss:USER_SS]
 42791                                  
 42792 00007979 CB                              retf
 42793                                  
 42794                                  ;
 42795                                  ; END OF DOSINIT
 42796                                  ;
 42797                                  ;--------------------------------------------------------------------------
 42798                                  
 42799                                  CHARINIT:
 42800                                  	; 24/04/2019 - Retro DOS v4.0
 42801                                  	; 07/07/2018 - Retro DOS v3.0
 42802                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42803 0000797A 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42804                                  	;mov	byte [ss:035Bh],0
 42805 00007980 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42806                                  	;mov	byte [ss:035Ch],0
 42807 00007986 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42808                                  	;mov	word [ss:035BD],0
 42809 0000798C 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42810 00007993 06                              PUSH	ES
 42811 00007994 53                              PUSH	BX
 42812 00007995 50                              PUSH	AX
 42813 00007996 BB[5A03]                        MOV	BX,DEVCALL
 42814                                          ;PUSH	CS
 42815 00007999 16                      	PUSH	SS ; 30/04/2019
 42816 0000799A 07                              POP	ES
 42817 0000799B E8C9CC                          CALL	DEVIOCALL2	
 42818 0000799E 58                      	POP	AX
 42819 0000799F 5B                              POP	BX
 42820 000079A0 07                              POP	ES
 42821 000079A1 C3                              RETN
 42822                                  
 42823                                  ; 25/04/2019 - Retro DOS v4.0
 42824                                  
 42825                                  ;-----------------------------------------------------------------------------
 42826                                  ;
 42827                                  ;	check_XMM: routine to check presence of XMM driver
 42828                                  ;
 42829                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42830                                  ;
 42831                                  ;	USED:	none
 42832                                  ;
 42833                                  ;-----------------------------------------------------------------------------
 42834                                  
 42835                                  check_XMM: ; proc near
 42836                                  ;
 42837                                  ; determine whether or not an XMM driver is installed
 42838                                  ;
 42839 000079A2 50                      	push	ax
 42840                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42841 000079A3 B80043                  	mov	ax,4300h
 42842 000079A6 CD2F                    	int	2Fh
 42843                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42844                                  		; Return: AL = 80h XMS driver installed
 42845                                  		; AL <> 80h no driver
 42846 000079A8 3C80                    	cmp	al,80h			; Q: installed
 42847 000079AA 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42848                                  ;
 42849                                  ; get the XMM control functions entry point, save it, we
 42850                                  ; need to call it later.
 42851                                  ;
 42852 000079AC 53                      	push	bx
 42853 000079AD 52                      	push	dx
 42854 000079AE 1E                      	push	ds
 42855 000079AF 06                      	push	es
 42856                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42857 000079B0 B81043                  	mov	ax,4310h
 42858 000079B3 CD2F                    	int	2Fh
 42859                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42860                                  		; Return: ES:BX -> driver entry point
 42861                                  
 42862 000079B5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42863                                  
 42864 000079BA 891E[4911]              	mov	[XMMcontrol],bx
 42865 000079BE 8C06[4B11]              	mov	[XMMcontrol+2],es
 42866                                  cXMMexit:
 42867 000079C2 F8                      	clc
 42868 000079C3 07                      	pop	es
 42869 000079C4 1F                      	pop	ds
 42870 000079C5 5A                      	pop	dx
 42871 000079C6 5B                      	pop	bx
 42872 000079C7 58                      	pop	ax
 42873 000079C8 C3                      	retn				; done
 42874                                  ;
 42875                                  ; set carry if XMM driver not present
 42876                                  ;
 42877                                  cXMM_no_driver:
 42878 000079C9 F9                      	stc
 42879 000079CA 58                      	pop	ax
 42880 000079CB C3                      	retn
 42881                                  
 42882                                  ;-----------------------------------------------------------------------------
 42883                                  ;
 42884                                  ; Procedure Name : seg_reinit
 42885                                  ;
 42886                                  ; Inputs	 : ES has final dos code location
 42887                                  ;		   AX = 0 / 1
 42888                                  ;
 42889                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42890                                  ;		   if AX =0
 42891                                  ;		      if first entry
 42892                                  ;			 patch segment & offset of vectors with stub
 42893                                  ;			 and stub with segment in ES
 42894                                  ;		      else
 42895                                  ;			 patch stub with segment in ES
 42896                                  ;
 42897                                  ;		   else if AX = 1
 42898                                  ;			patch segment of vectors with segment in ES	
 42899                                  ;
 42900                                  ; NOTE		 : This routine can be called at most twice!
 42901                                  ;
 42902                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42903                                  ;-----------------------------------------------------------------------------
 42904                                  
 42905 000079CC 00                      num_entry: db	0		; keeps track of the # of times this routine
 42906                                  				; has been called. (0 or 1)
 42907                                  
 42908                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42909                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42910                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42911                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42912                                  
 42913                                  seg_reinit:	; proc	far
 42914 000079CD 1E                      	push	ds
 42915                                  
 42916 000079CE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42917                                  
 42918 000079D3 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 42919                                  					; other tables with seg in ES.
 42920                                  	; 17/12/2022
 42921                                  	; cx = 0
 42922 000079D6 39C8                    	cmp	ax,cx ; 0
 42923                                  	;cmp	ax,0
 42924 000079D8 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42925                                  
 42926                                  	; 17/12/2022
 42927 000079DA 2E380E[CC79]            	cmp	[cs:num_entry],cl ; 0
 42928                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42929 000079DF 7508                    	jne	short second_entry	; N: just patch the stub with 
 42930                                  					;    segment in ES
 42931                                  					; Y: patch the vectors with stub 
 42932 000079E1 8CD8                    	mov	ax,ds
 42933 000079E3 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 42934 000079E6 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 42935                                  					; with those in the stub.
 42936                                  	; 17/12/2022
 42937                                  	; cx = 0
 42938                                  second_entry:
 42939 000079E9 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42940                                  
 42941                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42942                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42943 000079EB BF[4810]                	mov	di,DOSINTTABLE
 42944                                  	; 17/12/2022
 42945                                  	; cx = 0
 42946                                  	;mov	cx,9
 42947 000079EE B109                    	mov	cl,9
 42948 000079F0 1E                      	push	ds			
 42949 000079F1 07                      	pop	es			; es:di -> DOSINTTABLE
 42950                                  
 42951                                  dosinttabloop:
 42952                                  	;add	di,2
 42953                                  	; 19/09/2023
 42954 000079F2 47                      	inc	di
 42955 000079F3 47                      	inc	di
 42956 000079F4 AB                      	stosw
 42957 000079F5 E2FB                    	loop	dosinttabloop	
 42958                                  
 42959                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42960                                  ; use the HMA, so we don't want to check CS
 42961                                  
 42962                                  ;ifndef ROMDOS
 42963 000079F7 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42964 000079FA 7220                    	jb	short sr_done		; N: done
 42965                                  ;endif
 42966 000079FC E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 42967 000079FF 721B                    	jc	short sr_done		; failed to set up XMS do not do
 42968                                  					; A20 toggling in the stub.
 42969                                  	; 17/12/2022
 42970                                  	; cx = 0
 42971 00007A01 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 42972                                  ; M021-
 42973                                  	;mov	byte [1211h],1
 42974 00007A04 C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42975                                  				
 42976                                  					; set pointer to the routine that 
 42977                                  					; patches buggy exepacked code.
 42978                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42979 00007A09 C706[F811][4075]        	mov	word [FixExePatch],ExePatch
 42980                                  					; M068: set pointer to the routine 
 42981                                  					; M068: that detects copy protected
 42982                                  					; M068: apps
 42983                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42984 00007A0F C706[6100][7176]        	mov	word [ChkCopyProt],IsCopyProt
 42985                                  
 42986                                  ; 28/12/2022 - Retro DOS v4.1
 42987                                  %if 0
 42988                                  ;----------------------------------------------------------------------------
 42989                                  
 42990                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42991                                  
 42992                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42993                                  ;
 42994                                  ;; M020 - begin
 42995                                  ;
 42996                                  ;	call	WhatCPUType
 42997                                  ;	cmp	al,1
 42998                                  ;	jne	short sr_done 		; we need Rational Patch only
 42999                                  ;					;  on 286 systems
 43000                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43001                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43002                                  ;
 43003                                  ;; M020 - end
 43004                                  ;
 43005                                  ;	jmp	short sr_done
 43006                                  ;
 43007                                  ;patch_vec_seg:				; patch vectors with segment in es
 43008                                  ;	mov	ax,es
 43009                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43010                                  ;					; NOTE we don't have to patch the 
 43011                                  ;					; offsets as they have been already
 43012                                  ;					; set to the doscode offsets at
 43013                                  ;					; DOSINIT.
 43014                                  ;sr_done:
 43015                                  ;	mov	byte [cs:num_entry],1
 43016                                  ;	pop	ds
 43017                                  ;	retf	; ! far return !
 43018                                  
 43019                                  ;----------------------------------------------------------------------------
 43020                                  ;
 43021                                  ; Procedure Name : WhatCPUType
 43022                                  ;
 43023                                  ; Inputs	 : none
 43024                                  ;
 43025                                  ; Outputs	 : AL = 0 if CPU <  286
 43026                                  ;		      = 1 if CPU == 286
 43027                                  ;		      = 2 if CPU >= 386
 43028                                  ;
 43029                                  ; Regs. Mod.	 : AX
 43030                                  ;
 43031                                  ;----------------------------------------------------------------------------
 43032                                  
 43033                                  WhatCPUType:
 43034                                  	; 25/04/2019 - Retro DOS v4.0
 43035                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43036                                  
 43037                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43038                                  
 43039                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43040                                  ; 	it is called from both CODE and SYSINITSEG.
 43041                                  ;
 43042                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43043                                  ;  Returns: AX = 0 if 8086 or 8088
 43044                                  ;              = 1 if 80286
 43045                                  ;              = 2 if 80386
 43046                                  
 43047                                  	; 04/11/2022
 43048                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43049                                  
 43050                                  Get_CPU_Type:	;macro
 43051                                  	pushf
 43052                                  	push	bx			; preserve bx
 43053                                  	xor	bx,bx			; init bx to zero
 43054                                  
 43055                                  	xor	ax,ax			; 0000 into AX
 43056                                  	push	ax			; put it on the stack...
 43057                                  	popf				; ...then shove it into the flags
 43058                                  	pushf				; get it back out of the flags...
 43059                                  	pop	ax			; ...and into ax
 43060                                  	and	ax,0F000h		; mask off high four bits
 43061                                  	cmp	ax,0F000h		; was it all 1's?
 43062                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43063                                  
 43064                                  	mov	ax,0F000h		; now try to set the high four bits..
 43065                                  	push	ax
 43066                                  	popf
 43067                                  	pushf
 43068                                  	pop	ax			; ...and see what happens
 43069                                  	and	ax,0F000h		; any high bits set ?
 43070                                  	jz	short cpu_286		; nay; it's an 80286
 43071                                  
 43072                                  cpu_386:				; bx starts as zero
 43073                                  	inc	bx			; inc twice if 386
 43074                                  cpu_286:				; just inc once if 286
 43075                                  	inc	bx
 43076                                  cpu_8086:				; don't inc at all if 086
 43077                                  	mov	ax,bx			; put CPU type value in ax
 43078                                  	pop	bx			; restore original bx
 43079                                  	popf
 43080                                  	
 43081                                  	;endm
 43082                                  
 43083                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43084                                  	;retn
 43085                                  
 43086                                  	; 04/11/2022
 43087                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43088                                  	cmp	al,1
 43089                                  	jne	short sr_done 		; we need Rational Patch only
 43090                                  					;  on 286 systems
 43091                                  	mov	word [RationalPatchPtr],RationalPatch
 43092                                  
 43093                                  ;----------------------------------------------------------------------------
 43094                                  %endif	; 28/12/2022
 43095                                  
 43096 00007A15 EB05                    	jmp	short sr_done
 43097                                  
 43098                                  patch_vec_seg:				; patch vectors with segment in es
 43099 00007A17 8CC0                    	mov	ax,es
 43100 00007A19 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43101                                  					; NOTE we don't have to patch the 
 43102                                  					; offsets as they have been already
 43103                                  					; set to the doscode offsets at
 43104                                  					; DOSINIT.
 43105                                  sr_done:
 43106 00007A1C 2EC606[CC79]01          	mov	byte [cs:num_entry],1
 43107 00007A22 1F                      	pop	ds
 43108 00007A23 CB                      	retf	; ! far return !
 43109                                  
 43110                                  ;----------------------------------------------------------------------------
 43111                                  ;
 43112                                  ; Procedure Name : patch_vec_segments
 43113                                  ;
 43114                                  ; Inputs	 : ax -> has segment address to patch in
 43115                                  ;		   ds -> DOSDATA
 43116                                  ;
 43117                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43118                                  ;			
 43119                                  ;			0,20-28,3a-3f
 43120                                  ;
 43121                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43122                                  ;
 43123                                  ;----------------------------------------------------------------------------
 43124                                  
 43125                                  patch_vec_segments:
 43126                                  
 43127 00007A24 06                      	push	es
 43128                                  
 43129 00007A25 31C9                    	xor	cx,cx ; 0
 43130 00007A27 8EC1                    	mov	es,cx
 43131                                  
 43132                                  	;mov	di,82h
 43133 00007A29 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43134                                  
 43135 00007A2C 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43136                                  
 43137                                  					; set vectors 20 & 21
 43138                                  	; 04/11/2022
 43139                                  	;mov	cx,2
 43140                                  	; 17/12/2022
 43141                                  	;mov	cl,2
 43142                                  ps_set1:
 43143 00007A30 AB                      	stosw	
 43144                                  	;add	di,2
 43145                                  	; 17/12/2022
 43146 00007A31 47                      	inc	di
 43147 00007A32 47                      	inc	di
 43148                                  	;loop	ps_set1
 43149                                  
 43150                                  	; 17/12/2022
 43151 00007A33 AB                      	stosw	; int 21h segment
 43152                                  	;inc	di
 43153                                  	;inc	di
 43154                                  
 43155                                  	;add	di,4			; skip int 22h vector
 43156 00007A34 83C706                  	add	di,6 ; *
 43157                                  
 43158 00007A37 AB                      	stosw				; set int 23h
 43159 00007A38 83C706                  	add	di,6			; skip int 24h
 43160                                  
 43161                                  					; set vectors 25-28 and 2a-3f 
 43162                                  	; 04/11/2022
 43163                                  	;mov	cx,4			; set 4 segments
 43164                                  	; 17/12/2022
 43165 00007A3B B104                    	mov	cl,4
 43166                                  ps_set2:
 43167 00007A3D AB                      	stosw				
 43168                                  	;add	di,2
 43169                                  	; 17/12/2022
 43170 00007A3E 47                      	inc	di
 43171 00007A3F 47                      	inc	di
 43172 00007A40 E2FB                    	loop	ps_set2
 43173                                  
 43174 00007A42 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43175                                  					;   already be set.
 43176                                  	; 04/11/2022
 43177                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43178                                  	; 17/12/2022
 43179 00007A45 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43180                                  ps_set3:
 43181 00007A47 AB                      	stosw
 43182                                  	;add	di,2
 43183                                  	; 17/12/2022
 43184 00007A48 47                      	inc	di
 43185 00007A49 47                      	inc	di
 43186 00007A4A E2FB                    	loop	ps_set3
 43187                                  
 43188                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43189                                  ; below. So skip it.
 43190                                  
 43191 00007A4C 83C708                  	add	di,8			; skip vector 30h & 31h 
 43192                                  	
 43193                                  	; 04/11/2022
 43194                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43195                                  	; 17/12/2022
 43196 00007A4F B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43197                                  ps_set4:
 43198 00007A51 AB                      	stosw
 43199                                  	;add	di,2
 43200                                  	; 17/12/2022
 43201 00007A52 47                      	inc	di
 43202 00007A53 47                      	inc	di
 43203 00007A54 E2FB                    	loop	ps_set4
 43204                                  
 43205                                  ; set offset of int2f
 43206                                  
 43207                                  ;if installed
 43208                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43209                                  ;endif
 43210                                  	;mov	[es:0C3h],ax
 43211 00007A56 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43212                                  	; 17/12/2022
 43213                                  	; cx = 0
 43214 00007A5A 07                      	pop	es
 43215 00007A5B C3                      	retn
 43216                                  
 43217                                  ;---------------------------------------------------------------------------
 43218                                  ;
 43219                                  ; Procedure Name : patch_misc_segments
 43220                                  ;
 43221                                  ; Inputs	 : es = segment to patch in
 43222                                  ;		   ds = dosdata
 43223                                  ;
 43224                                  ; outputs	 : patches in the sharer and other tables in the dos
 43225                                  ;		   with right dos code segment in es
 43226                                  ;
 43227                                  ; Regs Mod	 : DI,SI,CX
 43228                                  ;
 43229                                  ;---------------------------------------------------------------------------
 43230                                  
 43231                                  patch_misc_segments:
 43232                                  
 43233 00007A5C 53                      	push	bx
 43234 00007A5D 06                      	push	es
 43235 00007A5E 50                      	push	ax
 43236                                  
 43237 00007A5F 8CC0                    	mov	ax,es			; ax - > DOS segment
 43238                                  	
 43239 00007A61 1E                      	push	ds
 43240 00007A62 07                      	pop	es			; es -> DOSDATA
 43241                                  	
 43242                                  ; initialize the jump table for the sharer...
 43243                                  
 43244                                  	;mov	di,offset dosdata:jshare
 43245                                  	;mov	di,90h
 43246 00007A63 BF[9000]                	mov	di,JShare
 43247                                  	;mov	bx,[0AAAh]
 43248 00007A66 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43249                                  					; table was patched during the first
 43250                                  					; call to this routine
 43251 00007A6A B90F00                  	mov	cx,15
 43252                                  jumptabloop:
 43253                                  	;add	di,2			; skip offset
 43254                                  	; 17/12/2022
 43255 00007A6D 47                      	inc	di
 43256 00007A6E 47                      	inc	di
 43257 00007A6F 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43258 00007A72 7405                    	je	short share_patch	; Y: patch in sharer table
 43259                                  					; N: 
 43260 00007A74 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43261 00007A77 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43262                                  share_patch:
 43263 00007A79 AB                      	stosw				; drop in segment
 43264                                  no_share_patch:
 43265 00007A7A E2F1                    	loop	jumptabloop
 43266                                  					; BUGBUG patching the country info 
 43267                                  					; with dosdata can be done inline
 43268                                  					; in dosinit.
 43269                                  					; for dos 3.3 country info
 43270                                  					; table address
 43271                                  
 43272                                  	;mov	si,offset dosdata:country_cdpg
 43273                                  	;mov	si,122Ah   
 43274 00007A7C BE[0512]                	mov	si,COUNTRY_CDPG
 43275                                  					; initialize double word
 43276                                  					; pointers with dosdata in ds
 43277                                  	;mov	[si+4Fh],ds
 43278                                  	;mov	[si+54h],ds
 43279                                  	;mov	[si+59h],ds
 43280                                  	;mov	[si+5Eh],ds
 43281                                  	;mov	[si+80h],ds
 43282                                  	;mov	[si+63h],ds
 43283 00007A7F 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43284 00007A82 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43285 00007A85 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43286 00007A88 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43287 00007A8B 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43288 00007A8F 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43289                                  
 43290                                  					; fastopen routines are in doscode
 43291                                  					; so patch with doscode seg in ax
 43292                                  
 43293                                  	;mov	si,offset dosdata:fastopentable
 43294                                  	;mov	si,0D30h
 43295 00007A92 BE[300D]                	mov	si,FastOpenTable
 43296                                  
 43297                                  	; 17/12/2022
 43298                                  	; bx = [TEMP_DOSLOC]
 43299 00007A95 83FBFF                  	cmp	bx,-1
 43300                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43301 00007A98 7405                    	je	short fast_patch	; Y: patch segment
 43302                                  	;mov	cx,[TEMP_DOSLOC]
 43303                                  					; Q: has fastopen patched in it's
 43304                                  					;    segment
 43305                                  	; 17/12/2022
 43306 00007A9A 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43307                                  	;;cmp	cx,[si+4]
 43308                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43309 00007A9D 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43310                                  
 43311                                  fast_patch:
 43312                                  	;mov	[si+4],ax
 43313 00007A9F 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43314                                  no_fast_patch:
 43315                                  	; 17/12/2022
 43316                                  	; cx = 0
 43317 00007AA2 58                      	pop	ax
 43318 00007AA3 07                      	pop	es
 43319 00007AA4 5B                      	pop	bx
 43320                                  
 43321 00007AA5 C3                      	retn
 43322                                  
 43323                                  ;--------------------------------------------------------------------------
 43324                                  ;
 43325                                  ; Procedure Name : patch_offset
 43326                                  ; 
 43327                                  ; Inputs	 : NONE
 43328                                  ;
 43329                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43330                                  ;		   0,20-28,3a-3f, and 30,31
 43331                                  ;
 43332                                  ;
 43333                                  ; Regs. Mod	 : AX,DI,CX
 43334                                  ;--------------------------------------------------------------------------
 43335                                  
 43336                                  patch_offset:
 43337 00007AA6 06                      	push	es		; preserve es
 43338                                  
 43339 00007AA7 31C0                    	xor	ax,ax
 43340 00007AA9 8EC0                    	mov	es,ax
 43341                                  				; set default divide trap address
 43342                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43343                                  	;mov	word [es:0],108Ah
 43344 00007AAB 26C7060000[7010]        	mov	word [es:0],ldivov
 43345                                  
 43346                                  	;mov	di,80h
 43347 00007AB2 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43348                                  	;mov	ax,offset dosdata:lirett
 43349                                  	;mov	ax,10DAh
 43350 00007AB5 B8[C010]                	mov	ax,lirett
 43351                                  				; set vectors 20 & 21 to point to iret.
 43352                                  	; 17/12/2022
 43353                                  	; cx = 0
 43354                                  
 43355                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43356                                  po_iset1:
 43357 00007AB8 AB                      	stosw	; int 20h offset
 43358                                  	;add	di,2 ; *
 43359                                  	;loop	po_iset1
 43360                                  	; 17/12/2022
 43361 00007AB9 47                      	inc	di
 43362 00007ABA 47                      	inc	di
 43363 00007ABB AB                      	stosw	; int 21h offset
 43364                                  
 43365                                  	;add	di,4		; skip vector 22h
 43366                                  	; 17/12/2022
 43367 00007ABC 83C706                  	add	di,6 ; *	
 43368                                  
 43369 00007ABF AB                      	stosw			; set offset of 23h
 43370                                  	;add	di,6		; skip 24h
 43371                                  	; 19/09/2023
 43372 00007AC0 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43373                                  
 43374                                  				; set vectors 25-28 and 2a-3f to iret.
 43375                                  	; 04/11/2022
 43376                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43377                                  	; 19/09/2023
 43378                                  	; 17/12/2022
 43379                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43380                                  po_iset2:
 43381 00007AC3 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43382                                  	;add	di,2
 43383                                  	; 19/09/2023
 43384                                  	; 17/12/2022
 43385                                  	;inc	di
 43386                                  	;inc	di
 43387                                  	; 19/09/2023
 43388                                  	;loop	po_iset2
 43389                                  
 43390                                  	;add	di,4		; skip vector 29h
 43391                                  	; 19/09/2023
 43392 00007AC4 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43393                                  
 43394                                  	; 04/11/2022
 43395                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43396                                  	; 17/12/2022
 43397                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43398 00007AC7 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43399                                  po_iset3:
 43400 00007AC9 AB                      	stosw
 43401                                  	;add	di,2
 43402                                  	; 17/12/2022
 43403 00007ACA 47                      	inc	di
 43404 00007ACB 47                      	inc	di
 43405 00007ACC E2FB                    	loop	po_iset3
 43406                                  
 43407                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43408                                  ; below. So skip it.
 43409                                  
 43410                                  	;add	di,8		; skip vector 30h & 31h 
 43411                                  	; 17/12/2022
 43412 00007ACE 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43413                                  
 43414                                  	; 04/11/2022
 43415                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43416                                  				;   sets offsets for ints 32h-3fh
 43417                                  	; 17/12/2022
 43418 00007AD1 B10E                    	mov	cl,14 ; 26/06/2019
 43419                                  po_iset4:
 43420 00007AD3 AB                      	stosw
 43421                                  	;add	di,2
 43422                                  	; 17/12/2022
 43423 00007AD4 47                      	inc	di
 43424 00007AD5 47                      	inc	di
 43425 00007AD6 E2FB                    	loop	po_iset4
 43426                                  
 43427                                  ;if installed
 43428                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43429                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43430 00007AD8 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43431                                  ;endif
 43432                                  
 43433                                  ; set up entry point call at vectors 30-31h
 43434                                  	;mov	byte [es:0C0h],0EAh
 43435 00007ADF 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43436                                  	;mov	word [es:0C1h],10D0h
 43437                                  
 43438 00007AE5 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43439                                  
 43440                                  							; 19/09/2023
 43441                                  	;mov	word [es:80h],1094h
 43442 00007AEC 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43443                                  	;mov	word [es:84h],109Eh
 43444 00007AF3 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43445                                  	;mov	word [es:94h],10A8h
 43446 00007AFA 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43447                                  	;mov	word [es:98h],10B2h
 43448 00007B01 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43449                                  	;mov	word [es:9Ch],10BCh
 43450 00007B08 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43451                                  
 43452                                  	; 17/12/2022
 43453                                  	; CX = 0
 43454 00007B0F 07                      	pop	es		; restore es
 43455 00007B10 C3                      	retn
 43456                                  
 43457                                  ;--------------------------------------------------------------------------
 43458                                  ;
 43459                                  ; 	Procedure Name	:	patch_in_nops
 43460                                  ;
 43461                                  ; 	Entry		: 	ES -> DOSDATA
 43462                                  ;
 43463                                  ;	Regs Mod	: 	cx, di
 43464                                  ;
 43465                                  ;	Description:
 43466                                  ;		This routine patches in 2 nops at the offsets specified in 
 43467                                  ;	patch_table. This basically enables the low mem stub to start 
 43468                                  ;	making XMS calls.
 43469                                  ;
 43470                                  ;--------------------------------------------------------------------------
 43471                                  
 43472                                  	; 04/11/2022
 43473                                  	; (MSDOS 5.0 MSDOS.SYS)
 43474                                  	; DOSCODE:0BC50h
 43475                                  
 43476                                  patch_table:	; label	byte
 43477                                  	;dw	offset dosdata:i0patch
 43478                                  	;dw	offset dosdata:i20patch
 43479                                  	;dw	offset dosdata:i21patch
 43480                                  	;dw	offset dosdata:i25patch
 43481                                  	;dw	offset dosdata:i26patch
 43482                                  	;dw	offset dosdata:i27patch
 43483                                  	;dw	offset dosdata:i2fpatch
 43484                                  	;dw	offset dosdata:cpmpatch
 43485 00007B11 [7010]                  	dw	i0patch
 43486 00007B13 [7A10]                  	dw	i20patch
 43487 00007B15 [8410]                  	dw	i21patch
 43488 00007B17 [8E10]                  	dw	i25patch
 43489 00007B19 [9810]                  	dw	i26patch
 43490 00007B1B [A210]                  	dw	i27patch
 43491 00007B1D [AC10]                  	dw	i2fpatch
 43492 00007B1F [B610]                  	dw	cpmpatch
 43493                                  
 43494                                  patch_table_size equ ($-patch_table)/2
 43495                                  
 43496                                  patch_in_nops:
 43497 00007B21 50                      	push	ax
 43498 00007B22 56                      	push	si
 43499 00007B23 BE[117B]                	mov	si,patch_table
 43500 00007B26 B89090                  	mov	ax,9090h ; nop, nop
 43501                                  	; 17/12/2022
 43502                                  	; cx = 0
 43503                                  	;mov	cx,8
 43504                                  	;mov	cx,patch_table_size ; 8
 43505 00007B29 B108                    	mov	cl,patch_table_size ; 8
 43506                                  pin_loop:
 43507 00007B2B 2E8B3C                  	mov	di,[cs:si]
 43508 00007B2E AB                      	stosw
 43509                                  	;add	si,2
 43510                                  	; 17/12/2022
 43511 00007B2F 46                      	inc	si
 43512 00007B30 46                      	inc	si
 43513 00007B31 E2F8                    	loop	pin_loop
 43514 00007B33 5E                      	pop	si
 43515 00007B34 58                      	pop	ax
 43516 00007B35 C3                      	retn
 43517                                  
 43518                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43519                                  ; ---------------------------------------------------------------------------
 43520                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43521                                  ; ---------------------------------------------------------------------------
 43522                                  
 43523                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43524                                  DOSCODE_END:
 43525                                  	;times	9 db 0	; db 9 dup(0)
 43526                                  	; 18/12/2022
 43527 00007B36 0000                    	dw	0  ;	times 2 db 0
 43528                                  
 43529                                  ;align 16
 43530                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43531                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43532                                  
 43533                                  ; ---------------------------------------------------------------------------
 43534                                  
 43535                                  
 43536                                  ;memstrt label word
 43537                                  ; ---------------------------------------------------------------------------
 43538                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43539                                  ; ---------------------------------------------------------------------------
 43540                                  
 43541                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43542                                  
 43543                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43544                                  ; the dos initialization segment
 43545                                  
 43546                                  ;ifndef ROMDOS
 43547                                  
 43548                                  ;doscode ends
 43549                                  
 43550                                  ;else
 43551                                  
 43552                                  ;;dosinitseg ends
 43553                                  
 43554                                  ;endif ; ROMDOS
 43555                                  
 43556                                  ;============================================================================
 43557                                  
 43558                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43559                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43560                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43561                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43562                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43563                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43564                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43565                                  
 43566                                  ;; burasý doscode sonu
 43567                                  
 43568                                  ;============================================================================
 43569                                  ; DOSDATA
 43570                                  ;============================================================================
 43571                                  ; 29/04/2019 - Retro DOS 4.0
 43572                                  
 43573                                  ;[BITS 16]
 43574                                  
 43575                                  ;[ORG 0]
 43576                                  
 43577                                  ; 25/04/2019 - Retro DOS v4.0
 43578                                  
 43579                                  ;============================================================================
 43580                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43581                                  ;============================================================================
 43582                                  
 43583                                  ;align 16
 43584                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43585                                  	; (4970 bytes for MSDOS 6.21)
 43586                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43587                                  
 43588                                  ;============================================================================
 43589                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43590                                  ;============================================================================
 43591                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43592                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43593                                  ; 16/07/2018 - Retro DOS 3.0	
 43594                                  
 43595                                  ;Break <Initialized data and data used at DOS initialization>
 43596                                  ;----------------------------------------------------------------------------
 43597                                  
 43598                                  ; We need to identify the parts of the data area that are relevant to tasks
 43599                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43600                                  ; data will be gathered with the system code. The process data under 2.x will
 43601                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43602                                  ;
 43603                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43604                                  ; describing that data item.
 43605                                  
 43606                                  ;DOSDATA SEGMENT
 43607                                  
 43608                                  ; 04/11/2022
 43609                                  ;[ORG 0]
 43610                                  
 43611                                  ; ----------------------------------------------------------------------------
 43612                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43613                                  ; ----------------------------------------------------------------------------
 43614                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43615                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43616                                  ; ----------------------------------------------------------------------------
 43617                                  
 43618                                  ; 04/11/2022
 43619                                  
 43620                                  ;DOSDATA:0000h
 43621                                  
 43622 00007B38 90<rep 8h>              align 16
 43623                                  
 43624                                  ; ----------------------------------------------------------------------------
 43625                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43626                                  ; ----------------------------------------------------------------------------
 43627                                  
 43628                                  segment .data  vstart=0 ; 06/12/2022
 43629                                  								
 43630                                  ; ============================================================================
 43631                                  
 43632                                  ; 06/12/2022
 43633                                  ;DOSDATASTART equ $
 43634                                  DOSDATASTART:
 43635                                  
 43636                                  
 43637                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43638                                  
 43639                                  	;; 03/11/2022
 43640                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43641                                  
 43642                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43643                                  	;db	4 dup (?)	
 43644 00000000 00<rep 4h>              	times	4 db 0
 43645                                  
 43646                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43647                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43648                                  	;dw	0
 43649                                  
 43650                                  	;EVEN
 43651                                  
 43652                                  ;align 2
 43653                                  
 43654                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43655                                  ; area compatability. This location must be incremented EACH TIME the data
 43656                                  ; area here gets mucked with.
 43657                                  ;
 43658                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43659                                  
 43660                                  MSCT001S:	; LABEL BYTE
 43661                                  	
 43662                                  DataVersion:	
 43663 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43664                                  
 43665                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43666                                  ;hkn; been removed to DOSCODE above
 43667                                  
 43668                                  ;M044
 43669                                  ; First part of save area for saving last para of Window memory
 43670                                  
 43671                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43672 00000006 00<rep 8h>              	times	8 db 0
 43673                                  
 43674                                  	; MSDOS 6.21 DOSDATA:000Eh
 43675                                  MYNUM:			; Offset 000Eh
 43676 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43677                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43678 00000010 0000                    	dw	0
 43679                                  OpenLRU:
 43680 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43681                                  OEM_HANDLER: 		
 43682 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43683                                  
 43684                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43685                                  ;;			way that we leave DOS???? - jgl
 43686                                  
 43687                                  LeaveAddr:
 43688 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43689                                  RetryCount:		
 43690 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43691                                  RetryLoop:
 43692 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43693                                  LastBuffer:
 43694 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43695                                  CONTPOS:
 43696 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43697                                  arena_head:
 43698 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43699                                  
 43700                                  ;; 16/07/2018
 43701                                  ;;***************************************************************************
 43702                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43703                                  ;;***************************************************************************
 43704                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43705                                  ;;
 43706                                  ;;	AH = 52h
 43707                                  ;;
 43708                                  ;;	on return:
 43709                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43710                                  ;;		Known "invars" fields follow (varies with DOS version):
 43711                                  ;;
 43712                                  ;;	Offset Size		 Description
 43713                                  ;;
 43714                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43715                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43716                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43717                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43718                                  ;;		      0 indicates no unread input (DOS 3.x)
 43719                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43720                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43721                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43722                                  ;;	  08   dword  pointer to $CLOCK device driver
 43723                                  ;;	  0C   dword  pointer to CON device driver
 43724                                  ;;	  10   byte   number of logical drives in system
 43725                                  ;;	  11   word   maximum bytes/block of any block device
 43726                                  ;;	  13   dword  pointer to DOS cache buffer header
 43727                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43728                                  ;;		      point to the next device in device chain
 43729                                  ;;
 43730                                  ;;***************************************************************************
 43731                                  
 43732                                  ; The following block of data is used by SYSINIT. 
 43733                                  ; Do not change the order or size of this block
 43734                                  
 43735                                  ;SYSINITVAR:
 43736                                  ;----------------------------------------------------------------------------
 43737                                  SYSINITVARS:
 43738                                  DPBHEAD:
 43739 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43740                                  SFT_ADDR:
 43741 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43742                                  BCLOCK:
 43743 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43744                                  BCON:
 43745 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43746                                  MAXSEC:
 43747 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43748                                  BUFFHEAD:
 43749 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43750                                  CDSADDR:
 43751 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43752                                  SFTFCB:
 43753 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43754                                  KEEPCOUNT:
 43755 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43756                                  NUMIO:
 43757 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43758                                  CDSCOUNT:
 43759 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43760                                  
 43761                                  ; A fake header for the NUL device
 43762                                  NULDEV:
 43763 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43764                                  	;dw	8004h
 43765 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43766 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43767 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43768 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43769                                  SPLICES:
 43770 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43771                                  
 43772                                  Special_Entries:
 43773 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43774                                  UU_IFS_DOS_CALL:
 43775 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43776                                  ; 
 43777                                  ; UU_IFS_HEADER:
 43778                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43779                                  
 43780                                  ChkCopyProt:
 43781 00000061 0000                    	dw	0	; M068
 43782                                  A20OFF_PSP:
 43783 00000063 0000                    	dw	0	; M068
 43784                                  BUFFERS_PARM1:
 43785 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43786                                  BUFFERS_PARM2:
 43787 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43788                                  BOOTDRIVE:
 43789 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43790                                  DDMOVE:
 43791 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43792                                  EXT_MEM_SIZE:
 43793 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43794                                  
 43795                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43796                                  ;
 43797                                  ; Replaced by next two declarations
 43798                                  ;
 43799                                  ;UU_BUF_HASH_PTR:
 43800                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43801                                  ;UU_BUF_HASH_COUNT:
 43802                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43803                                  
 43804                                  BufferQueue:
 43805 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43806                                  DirtyBufferCount:
 43807 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43808                                  			; BUGBUG ---- change to byte
 43809                                  SC_CACHE_PTR:
 43810 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43811                                  SC_CACHE_COUNT:
 43812 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43813                                  BuffInHMA:
 43814 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43815                                  LoMemBuff:
 43816 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43817                                  			;  in Low mem when buffs are in HMA
 43818                                  ;
 43819                                  ; All variables which have UU_ as prefix can be reused for other
 43820                                  ; purposes and can be renamed. All these variables were used for
 43821                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43822                                  ; manager ---- MOHANS
 43823                                  ;
 43824                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43825                                  UU_BUF_EMS_FIRST_PAGE:	
 43826 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43827                                  
 43828                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43829                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43830                                  ;	dw	0			
 43831                                  
 43832                                  CL0FATENTRY:
 43833 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43834                                  			; is used in pack/unpack rts.
 43835                                  			; in fat.asm if cluster 0 is specified.
 43836                                  			; SR;
 43837                                  IoStatFail:
 43838 00000083 00                      	db	0	; IoStatFail has been added to 
 43839                                  			; record a fail on an I24 
 43840                                  			; issued from IOFUNC on a status call. 
 43841                                  
 43842                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43843                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43844                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43845                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43846                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43847                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43848                                  ;
 43849                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43850                                  						; state of the 	buffers page.
 43851                                  						; This one byte is retained to 
 43852                                  						; keep the size of this data 
 43853                                  						; block the same.;
 43854                                  ALLOCMSAVE:
 43855 00000084 00                      	db	0	; M063: temp var. used to 
 43856                                  			; M063: save alloc method in
 43857                                  			; M063: msproc.asm
 43858                                  A20OFF_COUNT:
 43859 00000085 00                      	db	0	; M068: indiactes the # of 
 43860                                  			; M068: int 21 calls for 
 43861                                  			; M068: which A20 is off
 43862                                  DOS_FLAG:
 43863 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43864                                  			; definitions
 43865                                  UNPACK_OFFSET:
 43866 00000087 0000                    	dw	0	; saves pointer to the start
 43867                                  			; of unpack code in exepatch.
 43868                                  			; asm.
 43869                                  UMBFLAG:
 43870 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43871                                  			; M003: link state of the UMBs
 43872                                  			; M003: whether linked or not 
 43873                                  			; M003: to the DOS arena chain
 43874                                  SAVE_AX:
 43875 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43876                                  			; M000: in msproc.asm
 43877                                  UMB_HEAD:
 43878 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43879                                  			; M000: the first umb arena by 
 43880                                  			; M000: BIOS sysinit.
 43881                                  START_ARENA:
 43882 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43883                                  			; M000: from which DOS will 
 43884                                  			; M000: start its scan for alloc.
 43885                                  
 43886                                  ; End of SYSINITVar block
 43887                                  ;----------------------------------------------------------------------------
 43888                                  
 43889                                  ; 25/04/2019 - Retro DOS v4.0
 43890                                  
 43891                                  ; 16/07/2018
 43892                                  ; MSDOS 3.3 (& MDOS 6.0)
 43893                                  
 43894                                  ;
 43895                                  ; Sharer jump table
 43896                                  ;
 43897                                  
 43898                                  ;PUBLIC	JShare
 43899                                  	;EVEN
 43900                                  
 43901                                  ;JShare	LABEL	DWORD
 43902                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43903                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43904                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43905                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43906                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43907                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43908                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43909                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43910                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43911                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43912                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43913                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43914                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43915                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43916                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43917                                  
 43918                                  align 2
 43919                                  
 43920                                  JShare:
 43921 00000090 [0107]0000              		DW	BadCall,0
 43922 00000094 [0507]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43923 00000098 [0507]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43924 0000009C [0107]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43925 000000A0 [0107]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43926 000000A4 [0107]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43927 000000A8 [0107]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43928 000000AC [0107]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43929 000000B0 [0507]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43930 000000B4 [0107]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43931 000000B8 [0107]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43932 000000BC [0107]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43933 000000C0 [0507]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43934 000000C4 [0107]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43935 000000C8 [0107]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43936                                  
 43937                                  
 43938                                  ;============================================================================
 43939                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43940                                  ;============================================================================
 43941                                  ; 25/04/2019 - Retro DOS 4.0 
 43942                                  ; 16/07/2018 - Retro DOS 3.0	
 43943                                  
 43944                                  ;Break <Initialized data and data used at DOS initialization>
 43945                                  ;----------------------------------------------------------------------------
 43946                                  
 43947                                  ; We need to identify the parts of the data area that are relevant to tasks
 43948                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43949                                  ; data will be gathered with the system code.  The process data under 2.x will
 43950                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43951                                  ;
 43952                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43953                                  ; describing that data item.
 43954                                  
 43955                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43956                                  
 43957                                  ;
 43958                                  ; Table of routines for assignable devices
 43959                                  ;
 43960                                  ; MSDOS allows assignment if the following standard devices:
 43961                                  ;   stdin  (usually CON input)
 43962                                  ;   stdout (usually CON output)
 43963                                  ;   auxin  (usually AUX input)
 43964                                  ;   auxout (usually AUX output)
 43965                                  ;   stdlpt (usually PRN output)
 43966                                  ;
 43967                                  ; SPECIAL NOTE:
 43968                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43969                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43970                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43971                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43972                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43973                                  ;   as EOF).
 43974                                  
 43975                                  ; Default SFTs for boot up
 43976                                  
 43977                                  		;PUBLIC	SFTABL
 43978                                  
 43979                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43980 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43981 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43982 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43983                                  		;times 295 db 0 ; MSDOS 6.0
 43984 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43985                                  
 43986                                  ; the next two variables relate to the position of the logical stdout/stdin
 43987                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43988                                  ; console.
 43989                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43990 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43991 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43992                                  					;	   of buffered input call
 43993 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43994 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43995                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43996 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43997 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43998 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43999                                  switch_character:
 44000 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44001 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44002 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44003 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44004 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44005                                  
 44006                                  ; The following table is a list of addresses that the sharer patches to be
 44007                                  ; PUSH AX to enable the critical sections
 44008                                  
 44009                                  		; DOSDATA:0315h (MSDOS 6.21)
 44010                                  
 44011                                  ;PUBLIC	CritPatch
 44012                                  
 44013                                  CritPatch:	; LABEL WORD
 44014                                  
 44015                                  ;IRP sect,<critDisk,critDevice>
 44016                                  
 44017                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44018                                  ;
 44019                                  ;SR; Change code patch address to a variable in data segment
 44020                                  ;
 44021                                  ;       dw OFFSET DOSDATA: redir_patch
 44022                                  ;       dw OFFSET DOSDATA: redir_patch
 44023                                  ;
 44024                                  ;;hkn	Short_Addr  E&sect
 44025                                  ;;hkn	Short_Addr  L&sect
 44026                                  ;
 44027                                  ;ELSE
 44028                                  ;	DW	0
 44029                                  ;	DW	0
 44030                                  ;ENDIF
 44031                                  ;ENDM
 44032                                  ;	DW	0
 44033                                  
 44034                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44035                                   
 44036 00000315 [0C0D]                  	dw 	redir_patch
 44037 00000317 [0C0D]                  	dw 	redir_patch			
 44038 00000319 [0C0D]                  	dw	redir_patch
 44039 0000031B [0C0D]                  	dw 	redir_patch
 44040                                  
 44041 0000031D 0000                    	dw	0
 44042                                  
 44043                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44044                                  ; Also, IBM server 1.0 requires this also.
 44045                                  
 44046                                  	;EVEN			; Force swap area to start on word boundry
 44047 0000031F 90                      align 2
 44048                                  	;PUBLIC	SWAP_START
 44049                                  SWAP_START:	; LABEL BYTE
 44050 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44051 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44052 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44053 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44054 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44055                                  
 44056                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44057 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44058 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44059                                  ; end warning
 44060                                   
 44061 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44062                                  
 44063 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44064 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44065 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44066 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44067 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44068 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44069                                  ;				; F.C. 2/17/86
 44070 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44071 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44072                                  ;align 2
 44073                                  SWAP_ALWAYS:	; 05/08/2018
 44074 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44075                                  				;   extended error type stuff.
 44076                                  				;   NOTE: does not have Correct value on
 44077                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44078                                  				;   GetExtendedError system calls)
 44079 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44080 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44081 00000340 0000                    FirstArena:	dw 0		; first free block found
 44082 00000342 0000                    BestArena:	dw 0		; best free block found
 44083 00000344 0000                    LastArena:	dw 0		; last free block found
 44084 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44085 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44086 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44087 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44088 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44089 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44090 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44091                                  
 44092                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44093                                  	;EVEN
 44094 0000034F 90                      align 2
 44095                                  		; DOSDATA:0350h (MSDOS 6.21)
 44096 00000350 00                      DAY:		db 0		; Day of month
 44097 00000351 00                      MONTH:		db 0		; Month of year
 44098 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44099 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44100 00000356 00                      WEEKDAY:	db 0		; Day of week
 44101                                  ; end warning
 44102                                  
 44103 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44104 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44105 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44106                                  
 44107                                  ; Combination of all device call parameters
 44108                                  	;PUBLIC	DEVCALL 	;
 44109                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44110                                  DEVCALL: ; 08/08/2018
 44111 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44112 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44113 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44114 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44115 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44116                                  
 44117                                  	;PUBLIC	CALLUNIT
 44118                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44119                                  CALLFLSH: ; LABEL   WORD	;
 44120 00000367 00                      CALLMED:	db 0		; media byte
 44121                                  CALLBR:	  ; LABEL   DWORD	;
 44122                                  	;PUBLIC	CALLXAD 	;
 44123                                  CALLXAD:  ; LABEL   DWORD	;
 44124 00000368 00                      CALLRBYT:	db 0		;
 44125                                  	;PUBLIC	CALLVIDM	;
 44126                                  CALLVIDM: ; LABEL   DWORD	;
 44127 00000369 00<rep 3h>              	times 3 db 0	;
 44128                                  	;PUBLIC CallBPB		;
 44129                                  CALLBPB:  ; LABEL   DWORD	;
 44130                                  CALLSCNT:			;
 44131 0000036C 0000                    		dw 0		;
 44132                                  	;PUBLIC	CALLSSEC	;
 44133                                  CALLSSEC: ; LABEL   WORD	;
 44134 0000036E 0000                    		dw 0		;
 44135 00000370 00000000                CALLVIDRW:	dd 0		;
 44136                                  ;MSDOS 6.0
 44137 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44138 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44139                                  
 44140                                  ; Same as above for I/O calls	;
 44141                                  				;
 44142                                  	;PUBLIC	IOCall		;
 44143                                  ;IOCALL	SRHEAD	<>		;
 44144                                  IOCALL:	; 07/08/2018
 44145 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44146 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44147 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44148 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44149 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44150                                  IOFLSH:	  ; LABEL   WORD	;
 44151                                          ;PUBLIC  IORCHR		;
 44152                                  IORCHR:	  ; LABEL   BYTE	;
 44153 00000389 00                      IOMED:		db 0		;
 44154 0000038A 00000000                IOXAD:		dd 0		;
 44155 0000038E 0000                    IOSCNT:		dw 0		;	
 44156 00000390 0000                    IOSSEC:		dw 0		;
 44157                                  
 44158                                  ; Call struct for DSKSTATCHK	;
 44159 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44160 00000393 00                      		db 0
 44161 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44162 00000395 0000                    DSKSTST:	dw 0		;
 44163 00000397 00<rep 8h>              	times 8	db 0		;
 44164 0000039F 00                      DSKCHRET:	db 0		;
 44165                                  
 44166                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44167                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44168                                  ;hkn   short_addr  DEVIOBUF	;
 44169                                  	
 44170 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44171 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44172 000003A4 0100                    DSKSTCNT:	dw 1		;
 44173 000003A6 0000                    		dw 0		;
 44174                                  
 44175 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44176                                  
 44177                                  ;MSDOS 6.0
 44178                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44179 000003A9 00000000                		dd 0		;MS. position
 44180 000003AD 00000000                		dd 0		;MS. length
 44181                                  
 44182                                  ;hkn; the foll. was moved from dosmes.asm.
 44183                                  
 44184                                  	;EVEN
 44185 000003B1 90                      align 2				; needed to maintain offsets
 44186                                  
 44187                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44188                                  USERNUM:
 44189 000003B2 0000                     		dw 0		; 24 bit user number
 44190 000003B4 00                      		db 0
 44191                                  ;IF IBM
 44192                                  ;IF IBMCOPYRIGHT
 44193                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44194                                  ;ELSE
 44195                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44196                                  ;ENDIF
 44197                                  ;ELSE
 44198 000003B5 FF                      OEMNUM:		DB 0FFh
 44199                                  ;ENDIF
 44200                                  
 44201                                  ;============================================================================
 44202                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44203                                  ;============================================================================
 44204                                  ; 25/04/2019 - Retro DOS 4.0
 44205                                  
 44206                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44207                                  ; ----------------------------------------------------------
 44208                                  ; This data section which was named as uninitialized data
 44209                                  ; (as overlayed by initialization code) but follows 
 44210                                  ; initialized data section from DOSDATA:03B6h address
 44211                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44212                                  ; and there is not overlaying..)
 44213                                  ; **********************************************************
 44214                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44215                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44216                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44217                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44218                                  ; TIMEBUF is at offset 03B6h.
 44219                                  ; **********************************************************	
 44220                                  
 44221                                  ;Break <Uninitialized data overlayed by initialization code>
 44222                                  ;----------------------------------------------------------------------------
 44223                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44224                                  ; Init code overlaps with data area below
 44225                                  
 44226                                  ; 	ORG     0
 44227                                  
 44228                                  MSDAT001S:	; label byte
 44229                                  
 44230                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44231                                  TIMEBUF: ;	times 6 db 0
 44232 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44233 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44234                                  
 44235                                  ; The following areas are used as temp buffer in EXEC system call
 44236                                  
 44237                                  ; DOSDATA:03BEh
 44238                                  OPENBUF: ;times 64  dw	0
 44239 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44240                                  RENBUF:	
 44241 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44242                                  
 44243                                  ; Buffer for search calls
 44244                                  SEARCHBUF:	
 44245 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44246                                  DUMMYCDS:  ;times 88 db 0
 44247 000004F3 00<rep 58h>             	times	curdirLen db 0
 44248                                  
 44249                                  ; End of contiguous buffer
 44250                                   
 44251                                  ; Temporary directory entry for use by many routines. Device directory
 44252                                  ; entries (bogus) are built here.
 44253                                  
 44254                                  ; DOSDATA:054Bh
 44255                                  
 44256                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44257                                  
 44258                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44259                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44260                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44261                                  
 44262                                  NAME1:	
 44263 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44264                                  NAME2:
 44265 00000557 00<rep Dh>              	times	13 db	0 		;
 44266                                  DESTSTART:
 44267 00000564 0000                    	dw	0			;
 44268                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44269                                  	;times	5  db	0
 44270 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44271                                  
 44272                                  ; End Temporary directory entry.
 44273                                  
 44274 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44275                                  EXTFCB:	
 44276 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44277                                  SATTRIB:
 44278 0000056D 00                      	db	0		; Storage for search attributes
 44279                                  OPEN_ACCESS:
 44280 0000056E 00                      	db	0		; access of open system call
 44281                                  FOUNDDEL:
 44282 0000056F 00                      	db	0		; true => file was deleted
 44283                                  FOUND_DEV:
 44284 00000570 00                      	db	0		; true => search found a device
 44285                                  FSPLICE:
 44286 00000571 00                      	db	0		; true => do a splice in transpath
 44287                                  FSHARING:
 44288 00000572 00                      	db	0		; TRUE => no redirection
 44289                                  SECCLUSPOS:
 44290 00000573 00                      	db	0		; Position of first sector within cluster
 44291 00000574 00                      TRANS:	db	0		;
 44292 00000575 00                      READOP:	db	0		;
 44293                                  THISDRV:
 44294 00000576 00                      	db	0		;
 44295                                  CLUSFAC:
 44296 00000577 00                      	db	0		;
 44297                                  CLUSSPLIT:
 44298 00000578 00                      	db	0		;
 44299                                  INSMODE:
 44300 00000579 00                      	db	0		; true => insert mode in buffered read
 44301 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44302 0000057B 00                      VOLID:	db	0		;
 44303                                  EXIT_TYPE:
 44304 0000057C 00                      	db	0		; type of exit...
 44305                                   
 44306                                  	;EVEN
 44307                                  
 44308 0000057D 90                      align 2
 44309                                  
 44310                                  ; DOSDATA:057Eh
 44311                                  
 44312                                  ; WARNING - the following two items are accessed as a word
 44313                                  
 44314                                  CREATING:
 44315 0000057E 00                      	db	0		; true => creating a file
 44316 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44317                                  				; = DIRFREE iff BUGBUG
 44318                                  EXITHOLD:
 44319 00000580 00000000                	dd	0		; Temp location for proc terminate
 44320                                  USER_SP:
 44321 00000584 0000                    	dw	0		; User SP for system call
 44322                                  USER_SS:
 44323 00000586 0000                    	dw	0		; User SS for system call
 44324                                  CONTSTK:
 44325 00000588 0000                    	dw	0		;
 44326                                  THISDPB:
 44327 0000058A 00000000                	dd	0		;
 44328                                  CLUSSAVE:
 44329 0000058E 0000                    	dw	0		;
 44330                                  CLUSSEC:
 44331 00000590 00000000                	dd	0		;>32mb			AC0000
 44332                                  PREREAD:
 44333 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44334 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44335                                  FATBYTE:
 44336 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44337                                  ; DOSDATA:059Ah
 44338 0000059A 00000000                DEVPT:	dd	0		;
 44339                                  THISSFT:
 44340 0000059E 00000000                	dd	0		; Address of user SFT
 44341                                  THISCDS:
 44342 000005A2 00000000                	dd	0		; Address of current CDS
 44343                                  THISFCB:
 44344 000005A6 00000000                	dd	0		; Address of user FCB
 44345 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44346 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44347 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44348                                  WFP_START:
 44349 000005B2 0000                    	dw	0		;
 44350                                  REN_WFP:
 44351 000005B4 0000                    	dw	0		;
 44352                                  CURR_DIR_END:
 44353 000005B6 0000                    	dw	0		;
 44354                                  NEXTADD:
 44355 000005B8 0000                    	dw	0		;
 44356                                  LASTPOS:
 44357 000005BA 0000                    	dw	0		;
 44358                                  CLUSNUM:
 44359 000005BC 0000                    	dw	0		;
 44360 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44361                                  DIRSTART:
 44362 000005C2 0000                    	dw	0		;
 44363 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44364 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44365                                                                  ; sectors
 44366                                  BYTSECPOS:
 44367 000005CC 0000                    	dw	0		; Position of first byte within sector
 44368                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44369 000005CE 0000<rep 2h>                    times	2 dw 0
 44370                                  BYTCNT1:
 44371 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44372                                  BYTCNT2:
 44373 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44374 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44375                                  ; DOSDATA:05D8h
 44376                                  ENTFREE:
 44377 000005D8 0000                    	dw	0		;
 44378                                  ENTLAST:
 44379 000005DA 0000                    	dw	0		;
 44380                                  NXTCLUSNUM:
 44381 000005DC 0000                    	dw	0		;
 44382                                  GROWCNT:
 44383 000005DE 00000000                	dd	0		;
 44384 000005E2 00000000                CURBUF:	dd	0		;
 44385 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44386 000005EA 0000                    SAVEBX:	dw	0		;
 44387 000005EC 0000                    SAVEDS:	dw	0		;
 44388                                  RESTORE_TMP:
 44389 000005EE 0000                    	dw	0		; return address for restore world
 44390 000005F0 0000                    NSS:	dw	0
 44391 000005F2 0000                    NSP:	dw	0
 44392                                  ; DOSDATA:05F4h
 44393                                  EXTOPEN_FLAG:
 44394 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44395                                  EXTOPEN_ON:
 44396 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44397                                  EXTOPEN_IO_MODE:
 44398 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44399                                  SAVE_DI:
 44400 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44401                                  SAVE_ES:
 44402 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44403                                  SAVE_DX:
 44404 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44405                                  SAVE_CX:
 44406 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44407                                  SAVE_BX:
 44408 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44409                                  SAVE_SI:
 44410 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44411                                  SAVE_DS:
 44412 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44413                                  
 44414                                  ; DOSDATA:0607h
 44415                                  
 44416                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44417                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44418                                  ; the high 16, the low 16 are still in the register.
 44419                                  
 44420                                  HIGH_SECTOR:	
 44421 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44422                                  ;OffsetMagicPatch:
 44423                                  ;	dw	MagicPatch ;scottq 8/6/92
 44424                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44425 00000609 0000                    	dw	0
 44426                                  				;see dos\mpatch.asm
 44427                                  DISK_FULL:
 44428 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44429                                  TEMP_VAR:
 44430 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44431                                  TEMP_VAR2:
 44432 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44433 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44434                                  DOS34_FLAG:
 44435 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44436                                  NO_FILTER_PATH:
 44437 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44438                                  NO_FILTER_DPATH:
 44439 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44440                                  ; M008
 44441                                  AbsRdWr_SS:
 44442 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44443                                  AbsRdWr_SP:
 44444 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44445                                  
 44446                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44447                                  ; M008
 44448                                   
 44449                                   
 44450                                  ; make those pushes fast!!!
 44451                                  
 44452                                  ;EVEN
 44453                                  
 44454 0000061F 90                      align 2
 44455                                  
 44456                                  StackSize   equ 180h  ; 384	; gross but effective
 44457                                  
 44458                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44459                                  ;				; made up their minds about
 44460                                   
 44461                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44462                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44463                                  
 44464                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44465                                   
 44466 00000620 00<rep 180h>                    times	StackSize db	0	;
 44467                                  AUXSTACK:			; LABEL   BYTE
 44468                                   
 44469 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44470                                  DSKSTACK:			; LABEL   BYTE
 44471                                   
 44472 00000920 00<rep 180h>                    times	StackSize db	0	;
 44473                                  IOSTACK:			; LABEL   BYTE
 44474                                  
 44475                                  ; DOSDATA:0AA0h 
 44476                                   
 44477                                  ; patch space for Boca folks.
 44478                                  ; Say What????!!! This does NOT go into the swappable area!
 44479                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44480                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44481                                   
 44482                                  IBMPATCH: ; label byte
 44483                                  PRINTER_FLAG:
 44484 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44485                                  VOLCHNG_FLAG:
 44486 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44487                                  VIRTUAL_OPEN:
 44488 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44489                                   
 44490                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44491                                  
 44492                                  FSeek_drive:
 44493 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44494                                  FSeek_firclus:
 44495 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44496                                  FSeek_logclus:
 44497 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44498                                  FSeek_logsave:
 44499 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44500                                  
 44501                                  ; DOSDATA:0AAAh
 44502                                  
 44503                                  TEMP_DOSLOC:
 44504 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44505                                  				;at SYSINIT time.
 44506                                  SWAP_END:  ; LABEL   BYTE
 44507                                   
 44508                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44509                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44510                                  ; to include this byte.
 44511                                   
 44512 00000AAC 00                      	db	0
 44513                                  
 44514                                  ; DOSDATA:0AADh
 44515                                   
 44516                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44517                                  
 44518                                  ;DOSDATA    ENDS
 44519                                  
 44520                                  ;============================================================================
 44521                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44522                                  ;============================================================================
 44523                                  ; 27/04/2019 - Retro DOS 4.0
 44524                                  ; 16/07/2018 - Retro DOS 3.0
 44525                                  
 44526                                  ;DOSDATA Segment
 44527                                  
 44528                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44529                                  
 44530                                  ;
 44531                                  ; upper case table
 44532                                  ; ---------------------------------------------------------------------------
 44533                                  UCASE_TAB:	; label   byte
 44534 00000AAD 8000                    	dw	128
 44535 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44536 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44537 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44538 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44539 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44540 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44541 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44542 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44543 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44544 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44545 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44546 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44547 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44548 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44549 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44550 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44551                                  ;
 44552                                  ; file upper case table
 44553                                  ; ---------------------------------------------------------------------------
 44554                                  FILE_UCASE_TAB:	; label  byte
 44555 00000B2F 8000                    	dw	128
 44556 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44557 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44558 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44559 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44560 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44561 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44562 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44563 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44564 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44565 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44566 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44567 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44568 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44569 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44570 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44571 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44572                                  ;
 44573                                  ; file char list
 44574                                  ; ---------------------------------------------------------------------------
 44575                                  FILE_CHAR_TAB:	; label  byte
 44576 00000BB1 1600                    	dw	22				; length
 44577 00000BB3 0100FF                  	db	1,0,255 			; include all
 44578 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44579 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44579 00000BC2 7C3C3E2B3D3B2C     
 44580                                  	;db	24 dup (?)			; reserved
 44581 00000BC9 00<rep 18h>             	times	24 db 0
 44582                                  
 44583                                  ;
 44584                                  ; collate table
 44585                                  ; ---------------------------------------------------------------------------
 44586                                  COLLATE_TAB:	; label   byte
 44587 00000BE1 0001                    	dw	256
 44588 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44589 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44590 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44591 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44592 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44593 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44594 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44595 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44596 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44597 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44598 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44599 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44600 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44601 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44602 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44603 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44604 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44605 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44606 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44607 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44608 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44609 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44610 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44611 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44612 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44613 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44614 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44615 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44616 00000CC3 E053                    	db	224,"S"
 44617 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44618 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44619 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44620 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44621                                  
 44622                                  ; ------------------------------------------------<MSKK01>----------------------
 44623                                  
 44624                                  ; DOSDATA:0CE3h
 44625                                  
 44626                                  ; 29/04/2019
 44627                                  
 44628                                  ; dbcs is not supported in DOS 3.3
 44629                                  ;		   DBCS_TAB	    CC_DBCS <>
 44630                                  ;
 44631                                  ; DBCS for DOS 4.00			   2/12/KK
 44632                                  
 44633                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44634                                  ; ------------------------------------------------<MSKK01>----------------------
 44635                                  ;ifdef	DBCS
 44636                                  ; ifdef	  JAPAN
 44637                                  ;		dw	6		; <MSKK01>
 44638                                  ;		db	081h,09fh	; <MSKK01>
 44639                                  ;		db	0e0h,0fch	; <MSKK01>
 44640                                  ;		db	0,0		; <MSKK01>
 44641                                  ;
 44642                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44643                                  ; endif
 44644                                  ; ifdef	  TAIWAN
 44645                                  ;		dw	4		; <TAIWAN>
 44646                                  ;		db	081h,0FEh	; <TAIWAN>
 44647                                  ;		db	0,0		; <TAIWAN>
 44648                                  ;
 44649                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44650                                  ; endif
 44651                                  ; ifdef   KOREA                         ; Keyl
 44652                                  ;               dw      4               ; <KOREA>
 44653                                  ;               db      0A1h,0FEh       ; <KOREA>
 44654                                  ;               db      0,0             ; <KOREA>
 44655                                  ;
 44656                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44657                                  ;  endif
 44658                                  ;else
 44659 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44660                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44661 00000CE5 00<rep 10h>             		times	16 db 0
 44662                                  
 44663                                  ;		dw	6		;  2/12/KK
 44664                                  ;		db	081h,09Fh	;  2/12/KK
 44665                                  ;		db	0E0h,0FCh	;  2/12/KK
 44666                                  ;		db	0,0		;  2/12/KK
 44667                                  ;
 44668                                  ;endif
 44669                                  ; ------------------------------------------------<MSKK01>----------------------
 44670                                  
 44671                                  ; DOSDATA:0CF5h
 44672                                  
 44673                                  ; ---------------------------------------------------------------------------
 44674                                  ;
 44675                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44676                                  ;     ENTRY: AL = Character to map
 44677                                  ;     EXIT:  AL = The converted character
 44678                                  ; Alters no registers except AL and flags.
 44679                                  ; The routine should do nothing to chars below 80H.
 44680                                  ; ---------------------------------------------------------------------------
 44681                                  ; Example:
 44682                                  
 44683                                  MAP_CASE:
 44684                                  ;Procedure MAP_CASE,FAR
 44685                                  
 44686 00000CF5 3C80                    	CMP	AL,80h
 44687 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44688 00000CF9 CB                      	RETF
 44689                                  Map1:
 44690 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44691 00000CFC 1E                      	PUSH	DS
 44692 00000CFD 53                      	PUSH	BX
 44693 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44694                                  FINISH:
 44695 00000D01 0E                      	PUSH	CS		;Move to DS
 44696 00000D02 1F                      	POP	DS
 44697 00000D03 D7                      	XLAT			;Get upper case character
 44698 00000D04 5B                      	POP	BX
 44699 00000D05 1F                      	POP	DS
 44700                                  L_RET:	
 44701 00000D06 CB                      	RETF
 44702                                  
 44703                                  ;EndProc MAP_CASE
 44704                                  
 44705                                  ; ---------------------------------------------------------------------------
 44706                                  
 44707                                  ; The variables for ECS version are moved here for the same data alignments
 44708                                  ; as IBM-DOS and MS-DOS.
 44709                                  
 44710                                  InterChar:
 44711 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44712                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44713                                  DUMMY:	; LABEL   WORD
 44714                                  InterCon:  
 44715 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44716                                  SaveCurFlg:
 44717 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44718                                  
 44719                                  ; ---------------------------------------------------------------------------
 44720                                  
 44721 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44722                                  redir_patch:
 44723 00000D0C 00                      	  db	0
 44724                                  
 44725                                  ; DOSDATA:0D0Dh
 44726                                  
 44727                                  Mark1:	; label byte
 44728                                  
 44729                                  ;IF2
 44730                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44731                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44732                                  ;	ENDIF
 44733                                  ;ENDIF
 44734                                  
 44735 00000D0D 00<rep 5h>              	  times 5 db 0
 44736                                  
 44737                                  ;############################################################################
 44738                                  ;
 44739                                  ; ** HACK FOR DOS 4.0 REDIR **
 44740                                  ; 
 44741                                  ; The redir requires the following:
 44742                                  ;
 44743                                  ;	MSVERS	offset D12H
 44744                                  ;	YRTAB	offset D14H
 44745                                  ; 	MONTAB	offset D1CH
 44746                                  ;
 44747                                  ; WARNING! WARNING!
 44748                                  ; 
 44749                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44750                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44751                                  ;
 44752                                  ; CURRENTLY MARK1 = 0D0DH
 44753                                  ;
 44754                                  ;############################################################################
 44755                                  
 44756                                  	;ORG	0D12h
 44757                                  
 44758                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44759                                  
 44760                                  	;db	6
 44761                                  	;db	20
 44762                                  
 44763                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44764                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44765 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44766 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44767                                  
 44768                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44769                                  ;
 44770                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44771                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44772                                  
 44773                                  ; Days in year
 44774                                  
 44775                                  YRTAB:   
 44776 00000D14 C8A6                    	DB	200,166			; Leap year
 44777 00000D16 C8A5                    	DB	200,165
 44778 00000D18 C8A5                    	DB	200,165
 44779 00000D1A C8A5                    	DB	200,165
 44780                                  
 44781                                  ; Days of each month
 44782                                  
 44783                                  MONTAB:        
 44784 00000D1C 1F                      	DB      31                      ; January
 44785                                  february:
 44786 00000D1D 1C                      	DB	28 			; February--reset each 
 44787                                  					; time year changes
 44788 00000D1E 1F                              DB      31                      ; March
 44789 00000D1F 1E                              DB      30                      ; April
 44790 00000D20 1F                              DB      31                      ; May
 44791 00000D21 1E                              DB      30                      ; June
 44792 00000D22 1F                              DB      31                      ; July
 44793 00000D23 1F                              DB      31                      ; August
 44794 00000D24 1E                              DB      30                      ; September
 44795 00000D25 1F                              DB      31                      ; October
 44796 00000D26 1E                              DB      30                      ; November
 44797 00000D27 1F                              DB      31                      ; December
 44798                                  
 44799                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44800                                  
 44801                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44802                                  
 44803                                  SysInitTable:
 44804                                  	;dw	SYSINITVAR
 44805 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44806 00000D2A 0000                            dw      0		; segment
 44807 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44808 00000D2E 0000                            dw      0		; segment of pointer
 44809                                  
 44810                                  ; DOS 3.3 F.C. 6/12/86
 44811                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44812                                  
 44813                                  FastTable:				; a better name
 44814                                  FastOpenTable:
 44815 00000D30 0200                    	dw      2                       ; number of entries
 44816 00000D32 [A912]                  	dw      FastRet			; pointer to ret instr.
 44817 00000D34 0000                    	dw      0                       ; and will be modified by
 44818 00000D36 [A912]                  	dw      FastRet			; FASTxxx when loaded in
 44819 00000D38 0000                    	dw      0                       
 44820                                  
 44821                                  ; DOS 3.3 F.C. 6/12/86
 44822                                  
 44823                                  FastFlg:				; flags
 44824                                  FastOpenFlg:
 44825 00000D3A 00                      	db	0			; don't change the foll: order  
 44826                                  
 44827                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44828                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44829                                  ; or filled by FastOPen when calling FastOpen Lookup
 44830                                  
 44831                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44832                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44833                                  	;times	11 db 0
 44834 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44835                                  
 44836                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44837                                  ; when calling FastOpen Lookup
 44838                                  
 44839                                  Dir_Info_Buff:	; label  byte
 44840                                  	;db   	SIZE dir_entry dup (0)
 44841                                  	;times	32 db 0
 44842 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44843                                  
 44844                                  Next_Element_Start:
 44845 00000D66 0000                    	dw	0			; save next element start offset
 44846                                  Del_ExtCluster:
 44847 00000D68 0000                    	dw	0			; for dos_delete                       
 44848                                  
 44849                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44850                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44851                                  ; not to destroy the INT 21 stack saved for the user.
 44852                                  
 44853                                  USER_SP_2F:	; LABEL  WORD
 44854 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44855                                  
 44856                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44857                                  DOS_TEMP:	; label  word		; temporary word
 44858                                  FAKE_STACK_2F:  
 44859                                  	; dw  14 dup (0)		; 12 register temporary storage
 44860 00000D6C 0000<rep Eh>            	times 14 dw 0
 44861                                  
 44862                                  Hash_Temp: 	;label  word		; temporary word             
 44863                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44864 00000D88 0000<rep 4h>            	times 4 dw 0
 44865                                              	
 44866                                  SCAN_FLAG:	
 44867 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44868                                  DATE_FLAG:
 44869 00000D91 0000                    	dw     0                	; flag to update the date
 44870                                  
 44871                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44872 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44873                                  
 44874                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44875 00000D95 00000000                	dd     0               		; for extended error                   
 44876 00000D99 00000000                	dd     0			; for parser                           
 44877 00000D9D 00000000                	dd     0			; for critical errror                  
 44878 00000DA1 00000000                	dd     0			; for IFS                              
 44879 00000DA5 00000000                	dd     0			; for code reduction                   
 44880                                  
 44881                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44882 00000DA9 FFFFFFFF                	dd     -1                                                        
 44883                                  SC_SECTOR_SIZE:
 44884 00000DAD 0000                    	dw	0			; sector size for SC                 
 44885                                  SC_DRIVE:
 44886 00000DAF 00                      	db	0			; drive # for secondary cache        
 44887                                  CurSC_DRIVE:
 44888 00000DB0 FF                      	db	-1			; current SC drive                   
 44889                                  CurSC_SECTOR:
 44890 00000DB1 00000000                	dd	0			; current SC starting sector         
 44891                                  SC_STATUS:
 44892 00000DB5 0000                    	dw	0			; SC status word                     
 44893                                  SC_FLAG:
 44894 00000DB7 00                      	db	0			; SC flag                            
 44895                                  AbsDskErr:
 44896 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44897                                                                                            
 44898                                  NO_NAME_ID:	; label byte                                                           
 44899 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44899 00000DC3 2020               
 44900                                  
 44901                                  ;hkn; moved from TABLE segment in kstrin.asm
 44902                                  
 44903                                  KISTR001S:	; label	byte		; 2/17/KK
 44904 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44905                                  KISTR001E:	; label	byte		; 2/17/KK
 44906                                  
 44907                                  ; the nul device driver used to be part of the code. However, since the 
 44908                                  ; header is in the data, and the entry points are only given as an offset,
 44909                                  ; the strategy and interrupt entry points must also be in the data now.
 44910                                  
 44911                                  ; DOSDATA:0DC6h
 44912                                  
 44913                                  SNULDEV:
 44914                                  ;procedure snuldev,far
 44915                                  	;or	word [es:bx+3],100h
 44916                                  	; 17/12/2022
 44917                                  	;or	byte [es:bx+4],01h
 44918                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44919                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44920 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44921                                  INULDEV:
 44922 00000DCC CB                      	retf				; must not be a return!
 44923                                  ;endproc snuldev
 44924                                  
 44925                                  ;M044
 44926                                  ; Second part of save area for saving last para of Windows memory
 44927                                  
 44928                                  WinoldPatch2:
 44929                                  	;db	8 dup (?)	; M044
 44930 00000DCD 00<rep 8h>              	times	8 db 0	
 44931                                  UmbSave2:
 44932                                  	;db	5 dup (?)	; M062
 44933 00000DD5 00<rep 5h>              	times	5 db 0
 44934                                  UmbSaveFlag:
 44935 00000DDA 00                      	db	0		; M062
 44936                                  
 44937                                  ; DOSDATA:0DDBh
 44938                                  
 44939                                  Mark2:	; label byte
 44940                                  
 44941                                  ;IF2
 44942                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44943                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44944                                  ;	ENDIF
 44945                                  ;ENDIF
 44946                                  
 44947                                  ;############################################################################
 44948                                  ;
 44949                                  ; ** HACK FOR DOS 4.0 REDIR **
 44950                                  ; 
 44951                                  ; The redir requires the following:
 44952                                  ;
 44953                                  ;	ERR_TABLE_21	offset DDBH
 44954                                  ;	ERR_TABLE_24	offset E5BH
 44955                                  ; 	ErrMap24	offset EABH
 44956                                  ;
 44957                                  ; WARNING! WARNING!
 44958                                  ;
 44959                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44960                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44961                                  ;
 44962                                  ; CURRENTLY MARK2 = 0DD0H
 44963                                  ;
 44964                                  ;############################################################################
 44965                                  
 44966                                  	;ORG	0DDBh
 44967                                  
 44968                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44969                                  
 44970                                  ; ---------------------------------------------------------------------------
 44971                                  ;
 44972                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44973                                  ; errors. Each entry is 4 bytes long:
 44974                                  ;
 44975                                  ;       Err#,Class,Action,Locus
 44976                                  ;
 44977                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44978                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44979                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44980                                  ;
 44981                                  ; ---------------------------------------------------------------------------
 44982                                  
 44983                                  ;ErrTab  Macro   err,class,action,locus
 44984                                  ;ifidn <locus>,<0FFh>
 44985                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44986                                  ;ELSE
 44987                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44988                                  ;ENDIF
 44989                                  ;ENDM
 44990                                  
 44991                                  ERR_TABLE_21: ; LABEL   BYTE
 44992 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44993 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44994 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44995 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44996 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44997 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44998 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44999 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45000 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45001 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45002 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45003 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45004 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45005 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45006 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45007 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45008 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45009 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45010 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45011 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45012 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45013 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45014 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45015 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45016 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45017 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45018 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45019 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45020                                      ; MSDOS 6.0
 45021 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45022 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45023 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45024 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45025                                  
 45026                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45027                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45028                                  ;		db 2,8,3,2
 45029                                  ;		db 3,8,3,2
 45030                                  ;		db 4,1,4,1
 45031                                  ;		db 5,3,3,0FFh
 45032                                  ;		db 6,7,4,1
 45033                                  ;		db 7,7,5,5
 45034                                  ;		db 8,1,4,5
 45035                                  ;		db 9,7,4,5
 45036                                  ;		db 0Ah,7,4,5
 45037                                  ;		db 0Bh,9,3,1
 45038                                  ;		db 0Ch,7,4,1
 45039                                  ;		db 0Dh,9,4,1
 45040                                  ;		db 0Fh,8,3,2
 45041                                  ;		db 10h,3,3,2
 45042                                  ;		db 11h,0Dh,3,2
 45043                                  ;		db 12h,8,3,2
 45044                                  ;		db 50h,0Ch,3,2
 45045                                  ;		db 20h,0Ah,2,2
 45046                                  ;		db 21h,0Ah,2,2
 45047                                  ;		db 54h,1,4,0FFh
 45048                                  ;		db 56h,3,3,1
 45049                                  ;		db 52h,1,4,2
 45050                                  ;		db 32h,9,3,3
 45051                                  ;		db 55h,0Ch,3,3
 45052                                  ;		db 57h,9,3,1
 45053                                  ;		db 53h,0Dh,4,1
 45054                                  ;		db 24h,1,4,5
 45055                                  ; MSDOS 6.0 (MSDOS 6.21)
 45056                                  ;		db 26h,1,4,1
 45057                                  ;		db 27h,1,4,1
 45058                                  ;		db 5Ah,0Dh,4,2
 45059                                  ; MSDOS 6.0 & MSDOS 3.3
 45060                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45061                                  
 45062                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45063                                  
 45064                                  ; ---------------------------------------------------------------------------
 45065                                  ;
 45066                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45067                                  ; errors. Each entry is 4 bytes long:
 45068                                  ;
 45069                                  ;       Err#,Class,Action,Locus
 45070                                  ;
 45071                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45072                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45073                                  ; THE END.
 45074                                  ;
 45075                                  ; ---------------------------------------------------------------------------
 45076                                  
 45077                                  ERR_TABLE_24: ; LABEL   BYTE
 45078 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45079 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45080 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45081 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45082 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45083 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45084 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45085 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45086 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45087 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45088 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45089 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45090 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45091 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45092 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45093 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45094 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45095 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45096 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45097 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45098                                  
 45099                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45100                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45101                                  ;		db 14h,4,5,1
 45102                                  ;		db 15h,5,7,0FFh
 45103                                  ;		db 16h,4,5,1
 45104                                  ;		db 17h,0Bh,4,2
 45105                                  ;		db 18h,4,5,1
 45106                                  ;		db 19h,5,1,2
 45107                                  ;		db 1Ah,0Bh,7,2
 45108                                  ;		db 1Bh,0Bh,4,2
 45109                                  ;		db 1Ch,2,7,4
 45110                                  ;		db 1Dh,5,4,0FFh
 45111                                  ;		db 1Eh,5,4,0FFh
 45112                                  ;		db 1Fh,0Dh,4,0FFh
 45113                                  ;		db 20h,0Ah,2,2
 45114                                  ;		db 21h,0Ah,2,2
 45115                                  ;		db 22h,0Bh,7,2
 45116                                  ;		db 32h,9,3,3
 45117                                  ;		db 23h,7,4,1
 45118                                  ;		db 24h,1,4,5
 45119                                  ;		db 0FFh,0Dh,5,0FFh
 45120                                  
 45121                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45122                                  
 45123                                  ; ---------------------------------------------------------------------------
 45124                                  ;
 45125                                  ; We need to map old int 24 errors and device driver errors into the new set
 45126                                  ; of errors. The following table is indexed by the new errors
 45127                                  ;
 45128                                  ; ---------------------------------------------------------------------------
 45129                                  
 45130                                  ;Public  ErrMap24
 45131                                  ErrMap24: ; Label   BYTE
 45132 00000EAB 13                          DB  error_write_protect	; 0
 45133 00000EAC 14                          DB  error_bad_unit		; 1
 45134 00000EAD 15                          DB  error_not_ready		; 2
 45135 00000EAE 16                          DB  error_bad_command	; 3
 45136 00000EAF 17                          DB  error_CRC		; 4
 45137 00000EB0 18                          DB  error_bad_length	; 5
 45138 00000EB1 19                          DB  error_seek		; 6
 45139 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45140 00000EB3 1B                          DB  error_sector_not_found	; 8
 45141 00000EB4 1C                          DB  error_out_of_paper	; 9
 45142 00000EB5 1D                          DB  error_write_fault	; A
 45143 00000EB6 1E                          DB  error_read_fault	; B
 45144 00000EB7 1F                          DB  error_gen_failure	; C
 45145 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45146 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45147 00000EBA 22                          DB  error_wrong_disk	; F
 45148                                  
 45149                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45150                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45151                                  	
 45152                                  ErrMap24End: ; LABEL   BYTE
 45153                                  
 45154                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45155                                  
 45156                                  ; ---------------------------------------------------------------------------
 45157                                  
 45158                                  ; 27/04/2019 - Retro DOS v4.0
 45159                                  
 45160                                  FIRST_BUFF_ADDR:
 45161 00000EBB 0000                    	dw	0			; first buffer address               
 45162                                  SPECIAL_VERSION:
 45163 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45164                                  FAKE_COUNT:
 45165 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45166                                  OLD_FIRSTCLUS:
 45167 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45168                                  
 45169                                  ; ---------------------------------------------------------------------------
 45170                                  
 45171                                  ;smr; moved from TABLE segment in exec.asm
 45172                                  
 45173 00000FC0 0000                    exec_init_SP: dw 0
 45174 00000FC2 0000                    exec_init_SS: dw 0
 45175 00000FC4 0000                    exec_init_IP: dw 0
 45176 00000FC6 0000                    exec_init_CS: dw 0
 45177                                  
 45178                                  exec_signature:
 45179 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45180                                  exec_len_mod_512:
 45181 00000FCA 0000                    	dw	0	; low 9 bits of length
 45182                                  exec_pages:
 45183 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45184                                  exec_rle_count:
 45185 00000FCE 0000                    	dw	0	; count of reloc entries
 45186                                  exec_par_dir:
 45187 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45188                                  exec_min_BSS:
 45189 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45190                                  exec_max_BSS:
 45191 00000FD4 0000                    	dw	0	; max number of para of BSS
 45192                                  exec_SS:
 45193 00000FD6 0000                    	dw	0	; stack of image
 45194                                  exec_SP:
 45195 00000FD8 0000                    	dw	0	; SP of image
 45196                                  exec_chksum:
 45197 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45198                                  exec_IP:
 45199 00000FDC 0000                    	dw	0	; IP of entry
 45200                                  exec_CS:
 45201 00000FDE 0000                    	dw	0	; CS of entry
 45202                                  exec_rle_table:
 45203 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45204                                  
 45205                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45206                                  
 45207                                  ;smr; eom
 45208                                  
 45209                                  ; ---------------------------------------------------------------------------
 45210                                  
 45211                                  ;SR;
 45212                                  ; WIN386 instance table for DOS
 45213                                  
 45214                                  Win386_Info:
 45215 00000FE2 0300                    	db	3, 0
 45216 00000FE4 000000000000000000-     	dd	0, 0, 0
 45216 00000FED 000000             
 45217 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45218                                  
 45219                                  Instance_Table:
 45220 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45221 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45222 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45223 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45224 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45225 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45226 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45227 0000101E 00000000                	dw	0, 0
 45228                                  
 45229                                  ; M001; SR;
 45230                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45231                                  ; M001; some DOS variables. Note that the only really important variable in 
 45232                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45233                                  ; M001; which does not need to be done in DOS 5.0. 
 45234                                  
 45235                                  ; 29/12/2022
 45236                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45237                                  
 45238                                  Win386_DOSVars:
 45239 00001022 05                      	db	5	;Major version 5 ; M001
 45240 00001023 00                      	db	0	;Minor version 0 ; M001
 45241 00001024 [EC05]                  	dw	SAVEDS	; M001
 45242 00001026 [EA05]                  	dw	SAVEBX	; M001
 45243 00001028 [2103]                  	dw	INDOS	; M001
 45244 0000102A [3E03]                  	dw	USER_ID	; M001
 45245 0000102C [1503]                  	dw	CritPatch ; M001
 45246 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45247                                  
 45248                                  ;SR;
 45249                                  ; Flag to indicate whether WIN386 is running or not
 45250                                  
 45251 00001030 00                      IsWin386: db	0
 45252                                  
 45253                                  ;M018
 45254                                  ; This variable contains the path to the VxD device needed for Win386
 45255                                  
 45256 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45256 0000103A 2E33383600         
 45257                                  
 45258                                  ;End WIN386 support
 45259                                  
 45260                                  ; ---------------------------------------------------------------------------
 45261                                  
 45262                                  ;SR;
 45263                                  ; These variables have been added for the special lie support for device
 45264                                  ;drivers.
 45265                                  ;
 45266                                  
 45267                                  DriverLoad:	
 45268 0000103F 01                      	db	1	;initialized to do special handling
 45269                                  BiosDataPtr:
 45270 00001040 00000000                	dd	0
 45271                                  
 45272                                  ; 29/12/2022 - Retro DOS v4.1
 45273                                  %if 0
 45274                                  
 45275                                  ; 27/04/2019 - Retro DOS v4.0
 45276                                  ; 04/11/2022
 45277                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45278                                  
 45279                                  ;------------------------------------------------------------------------
 45280                                  ; Patch for Sidekick
 45281                                  ;
 45282                                  ; A documented method for finding the offset of the Errormode flag in the 
 45283                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45284                                  ; for the following sequence of instructions.
 45285                                  ;
 45286                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45287                                  ;
 45288                                  ; The Offset of Errormode flag is 0320h
 45289                                  ;
 45290                                  ;------------------------------------------------------------------------
 45291                                  
 45292                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45293                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45294                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45295                                  	db	0CDh, 028h			 ; int  28h
 45296                                  
 45297                                  ;--------------------------------------------------------------------------
 45298                                  ; Patch for PortOfEntry - M036
 45299                                  ;
 45300                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45301                                  ; the offset of Errormode flag. The following patch is to support them in 
 45302                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45303                                  ;
 45304                                  ;---------------------------------------------------------------------------
 45305                                  
 45306                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45307                                  	db	075h, 037h			 ; jnz	NearLabel
 45308                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45309                                  
 45310                                  %endif ; 29/12/2022
 45311                                  
 45312                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45313                                  
 45314                                  ;--------------------------------------------------------------------------
 45315                                  
 45316                                  ;*** New FCB Implementation
 45317                                  ; This variable is used as a cache in the new FCB implementation to remember
 45318                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45319                                  
 45320 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45321                                  
 45322                                  ;DOSDATA ENDS
 45323                                  
 45324                                  ;============================================================================
 45325                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45326                                  ;============================================================================
 45327                                  ; 27/04/2019 - Retro DOS 4.0
 45328                                  
 45329                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45330                                  
 45331                                  ;---------------------------------------------------------------------------
 45332                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45333                                  ;----------------------------------------------------------------------------
 45334                                  	
 45335                                  	;db	90h
 45336                                  
 45337                                  	;EVEN
 45338                                  align 2
 45339                                  
 45340                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45341                                  
 45342                                  DOSINTTABLE:	; LABEL	DWORD
 45343                                  
 45344                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45345                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45346                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45347                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45348                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45349                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45350                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45351                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45352                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45353                                  	
 45354 00001048 [7B52]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45355 0000104C [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45356 00001050 [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45357 00001054 [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45358 00001058 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45359 0000105C [B561]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45360 00001060 [0707]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45361 00001064 [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45362 00001068 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45363                                  
 45364 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45365 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45366                                  
 45367                                  ;-------------------------------------------------------------------------
 45368                                  ;
 45369                                  ; LOW MEM STUB:
 45370                                  ;
 45371                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45372                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45373                                  ; DOS load in HIMEM. Each entry point does this.
 45374                                  ;
 45375                                  ; 	1. if jmp to 8 has been patched out
 45376                                  ;	   2. if A20 OFF
 45377                                  ;	      3. Enable A20
 45378                                  ;	   4. else 
 45379                                  ;	      5. just go to dos entry
 45380                                  ;	   6. endif
 45381                                  ;	7. else
 45382                                  ;	   8. just go to dos entry
 45383                                  ;	9. endif
 45384                                  ;
 45385                                  ;--------------------------------------------------------------------------
 45386                                  
 45387                                  ; 27/04/2019 - Retro DOS v4.0
 45388                                  
 45389                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45390                                  
 45391                                  ;--------------------------------------------------------------------------
 45392                                  ;
 45393                                  ; DIVIDE BY 0 handler
 45394                                  ;
 45395                                  ;--------------------------------------------------------------------------
 45396                                  
 45397                                  ldivov:
 45398                                  	; The following jump, skipping the XMS calls will be patched to 
 45399                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45400                                  	; needed because the stub is installed even before the XMS driver
 45401                                  	; is loaded if the user specifies dos=high in the config.sys
 45402                                  i0patch:
 45403 00001070 EB03                    	jmp	short divov_cont	
 45404                                  
 45405 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45406                                  divov_cont:
 45407 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45408                                  
 45409                                  ;------------------------------------------------------------------------
 45410                                  ;
 45411                                  ; INT 20 Handler
 45412                                  ;
 45413                                  ; Here we do not have to set up the stack to return here as the abort call
 45414                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45415                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45416                                  ; will be restored then.
 45417                                  ;
 45418                                  ;-------------------------------------------------------------------------
 45419                                  
 45420                                  lquit:
 45421                                  	; The following jump, skipping the XMS calls will be patched to 
 45422                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45423                                  	; needed because the stub is installed even before the XMS driver
 45424                                  	; is loaded if the user specifies dos=high in the config.sys
 45425                                  i20patch:
 45426 0000107A EB03                    	jmp	short quit_cont	
 45427                                  
 45428 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45429                                  quit_cont:
 45430 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45431                                  
 45432                                  ;--------------------------------------------------------------------------
 45433                                  ;
 45434                                  ; INT 21 Handler
 45435                                  ;
 45436                                  ;--------------------------------------------------------------------------
 45437                                  
 45438                                  lcommand:
 45439                                  	; The following jump, skipping the XMS calls will be patched to 
 45440                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45441                                  	; needed because the stub is installed even before the XMS driver
 45442                                  	; is loaded if the user specifies dos=high in the config.sys
 45443                                  i21patch:
 45444 00001084 EB03                    	jmp	short command_cont	
 45445                                  
 45446 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45447                                  command_cont:
 45448 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45449                                  
 45450                                  ;------------------------------------------------------------------------
 45451                                  ;
 45452                                  ; INT 25 
 45453                                  ;
 45454                                  ;----------------------------------------------------------------------------
 45455                                  
 45456                                  labsdrd:
 45457                                  	; The following jump, skipping the XMS calls will be patched to 
 45458                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45459                                  	; needed because the stub is installed even before the XMS driver
 45460                                  	; is loaded if the user specifies dos=high in the config.sys
 45461                                  i25patch:
 45462 0000108E EB03                    	jmp	short absdrd_cont	
 45463                                  
 45464 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45465                                  absdrd_cont:
 45466 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45467                                  
 45468                                  ;-------------------------------------------------------------------------
 45469                                  ;
 45470                                  ; INT 26
 45471                                  ;
 45472                                  ;-----------------------------------------------------------------------
 45473                                  
 45474                                  labsdwrt:
 45475                                  	; The following jump, skipping the XMS calls will be patched to 
 45476                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45477                                  	; needed because the stub is installed even before the XMS driver
 45478                                  	; is loaded if the user specifies dos=high in the config.sys
 45479                                  i26patch:
 45480 00001098 EB03                    	jmp	short absdwrt_cont	
 45481                                  
 45482 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45483                                  absdwrt_cont:
 45484 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45485                                  
 45486                                  ;------------------------------------------------------------------------
 45487                                  ;
 45488                                  ; INT 27
 45489                                  ;
 45490                                  ;-----------------------------------------------------------------------
 45491                                  
 45492                                  lstay_resident:
 45493                                  	; The following jump, skipping the XMS calls will be patched to 
 45494                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45495                                  	; needed because the stub is installed even before the XMS driver
 45496                                  	; is loaded if the user specifies dos=high in the config.sys
 45497                                  i27patch:
 45498 000010A2 EB03                    	jmp	short sr_cont	
 45499                                  
 45500 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45501                                  sr_cont:
 45502 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45503                                  
 45504                                  ;-----------------------------------------------------------------------------
 45505                                  ;
 45506                                  ; INT 2f
 45507                                  ;
 45508                                  ;-------------------------------------------------------------------------
 45509                                  
 45510                                  lint2f:
 45511                                  	; The following jump, skipping the XMS calls will be patched to 
 45512                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45513                                  	; needed because the stub is installed even before the XMS driver
 45514                                  	; is loaded if the user specifies dos=high in the config.sys
 45515                                  i2fpatch:
 45516 000010AC EB03                    	jmp	short int2f_cont	
 45517                                  
 45518 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45519                                  int2f_cont:
 45520 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45521                                  
 45522                                  ;-----------------------------------------------------------------------------
 45523                                  ;
 45524                                  ; CPM entry
 45525                                  ;
 45526                                  ;------------------------------------------------------------------------
 45527                                  
 45528                                  lcall_entry:
 45529                                  	; The following jump, skipping the XMS calls will be patched to 
 45530                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45531                                  	; needed because the stub is installed even before the XMS driver
 45532                                  	; is loaded if the user specifies dos=high in the config.sys
 45533                                  cpmpatch:
 45534 000010B6 EB03                    	jmp	short callentry_cont	
 45535                                  
 45536 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45537                                  callentry_cont:
 45538 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45539                                  
 45540                                  ;--------------------------------------------------------------------------
 45541                                  
 45542                                  lirett:
 45543 000010C0 CF                      	iret
 45544                                  
 45545                                  ;---------------------------------------------------------------------------
 45546                                  ;
 45547                                  ; LowIntXX:
 45548                                  ;
 45549                                  ; Interrupts from DOS that pass control to a user program must be done from
 45550                                  ; low memory, as the user program may change the state of the A20 line or
 45551                                  ; they may require that the A20 line be OFF. The following piece of code is
 45552                                  ; far call'd from the following places in DOS:
 45553                                  ;
 45554                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45555                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45556                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45557                                  ;
 45558                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45559                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45560                                  ; before doing the ints and then do a far junp back into DOS.
 45561                                  ;
 45562                                  ;---------------------------------------------------------------------------
 45563                                  
 45564 000010C1 00000000                DosRetAddr23:	dd	0
 45565 000010C5 00000000                DosRetAddr24:	dd	0
 45566 000010C9 00000000                DosRetAddr28:	dd	0
 45567                                  
 45568                                  	; Execute int 23h from low memory
 45569                                  LowInt23:
 45570                                  					; save the return address that is on
 45571                                  					; the stack
 45572 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45573 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45574                                  
 45575 000010D7 CD23                    	int	23h			; ctrl C
 45576                                  					; turn on A20 it has been turned OFF
 45577                                  					; by int 28/23/24 handler.
 45578                                  
 45579 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45580                                  
 45581 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45582                                  
 45583                                  
 45584                                  	; Execute int 24h from low memory
 45585                                  LowInt24:
 45586                                  					; save the return address that is on
 45587                                  					; the stack
 45588 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45589 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45590                                  
 45591 000010EB CD24                    	int	24h			; crit error
 45592                                  					; turn on A20 it has been turned OFF
 45593                                  					; by int 28/23/24 handler.
 45594                                  
 45595 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45596                                  
 45597 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45598                                  
 45599                                  
 45600                                   
 45601                                  	; Execute int 28h from low memory
 45602                                  LowInt28:
 45603 000010F5 CD28                    	int	28h			; idle int
 45604                                  					; turn on A20 it has been turned OFF
 45605                                  					; by int 28/23/24 handler.
 45606                                  
 45607 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45608                                  
 45609 000010FA CB                      	retf
 45610                                  
 45611                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45612                                  
 45613                                  ;-------------------------------------------------------------------------
 45614                                  ;
 45615                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45616                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45617                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45618                                  ; This is so because exepac'd programs rely on address wrap.
 45619                                  ;
 45620                                  ;------------------------------------------------------------------------- 
 45621                                  
 45622                                  disa20_xfer:
 45623 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45624                                  
 45625                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45626                                  
 45627                                  	; DS:SI points to entry point
 45628                                  	; AX:DI points to initial stack
 45629                                  	; DX has PDB pointer
 45630                                  	; BX has initial AX value
 45631                                  
 45632 000010FE FA                      	cli
 45633 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45634                                  
 45635 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45636 00001107 89FC                    	mov	SP,DI			; and SP
 45637 00001109 FB                      	sti
 45638                                  
 45639 0000110A 1E                      	push	DS			; fake long call to entry
 45640 0000110B 56                      	push	SI
 45641 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45642 0000110E 8EDA                    	mov	DS,DX
 45643 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45644 00001112 CB                      	retf
 45645                                  
 45646                                  ;-------------------------------------------------------------------------
 45647                                  ;
 45648                                  ; M003:
 45649                                  ;
 45650                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45651                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45652                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45653                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45654                                  ; more info.	
 45655                                  ;
 45656                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45657                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45658                                  ; stack to avoid additional stack overhead for the user.
 45659                                  ;
 45660                                  ; -------------------------------------------------------------------------
 45661                                  
 45662                                  disa20_iret:
 45663 00001113 E82700                  	call	XMMDisableA20
 45664 00001116 FE0E[2103]              	dec	byte [INDOS]
 45665 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45666 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 45667 00001122 89E5                    	mov	BP,SP
 45668                                  	;mov	[BP+user_env.user_AX],AL
 45669 00001124 884600                  	mov	[bp],al
 45670 00001127 A1[F205]                	mov	AX,[NSP]
 45671 0000112A A3[8405]                	mov	[USER_SP],AX
 45672 0000112D A1[F005]                	mov	AX,[NSS]
 45673 00001130 A3[8605]                	mov	[USER_SS],AX
 45674                                  
 45675 00001133 58                      	pop	AX			; restore user regs
 45676 00001134 5B                      	pop	BX
 45677 00001135 59                      	pop	CX
 45678 00001136 5A                      	pop	DX
 45679 00001137 5E                      	pop	SI
 45680 00001138 5F                      	pop	DI
 45681 00001139 5D                      	pop	BP
 45682 0000113A 1F                      	pop	DS
 45683 0000113B 07                      	pop	ES
 45684 0000113C CF                      	iret
 45685                                  
 45686                                  ;**************************************************************************
 45687                                  ;***	XMMDisableA20 - switch 20th address line			      
 45688                                  ;									      
 45689                                  ;	This routine is used to disable the 20th address line in 	      
 45690                                  ;	the system using XMM calls.					      
 45691                                  ;									      
 45692                                  ;	ENTRY	none		;ds = _DATA				      
 45693                                  ;	EXIT	A20 line disabled					      
 45694                                  ;	USES	NOTHING					      
 45695                                  ;									      
 45696                                  ;**************************************************************************
 45697                                  
 45698                                  XMMDisableA20:
 45699 0000113D 53                      	push	bx
 45700 0000113E 50                      	push	ax
 45701                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45702 0000113F B406                    	mov	ah,6
 45703 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45704 00001146 58                      	pop	ax
 45705 00001147 5B                      	pop	bx
 45706 00001148 C3                      	retn
 45707                                  
 45708                                  ; The entry point in the BIOS XMS driver is defined here.
 45709                                  
 45710                                  XMMcontrol:
 45711 00001149 00000000                	dd	0
 45712                                  
 45713                                  ;--------------------------------------------------------------------------
 45714                                  ;
 45715                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45716                                  ;									      
 45717                                  ;	This routine is used to query the A20 state in		 	      
 45718                                  ;	the system using XMM calls.					      
 45719                                  ;									      
 45720                                  ;	ENTRY: none		
 45721                                  ;
 45722                                  ;	EXIT : A20 will be ON
 45723                                  ;		
 45724                                  ; 	USES : NONE								      
 45725                                  ;									      
 45726                                  ;--------------------------------------------------------------------------
 45727                                  
 45728                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45729 0000114D 8000                    	dw	00080h
 45730 0000114F 0000                    	dw	00000h
 45731                                  
 45732                                  HighMemory:	; label dword
 45733 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 45734 00001153 FFFF                    	dw	0FFFFh
 45735                                  
 45736                                  EnsureA20ON:
 45737 00001155 9C                      	pushf
 45738 00001156 1E                      	push    ds
 45739 00001157 06                      	push	es
 45740 00001158 51                      	push	cx
 45741 00001159 56                      	push	si
 45742 0000115A 57                      	push	di
 45743                                  
 45744 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45745 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45746 00001165 B90400                  	mov	cx,4
 45747 00001168 FC                      	cld
 45748 00001169 F3A7                    	repe    cmpsw
 45749                                  
 45750 0000116B 7407                    	jz	short EA20_OFF
 45751                                  EA20_RET:
 45752 0000116D 5F                      	pop	di
 45753 0000116E 5E                      	pop	si
 45754 0000116F 59                      	pop	cx
 45755 00001170 07                      	pop	es
 45756 00001171 1F                      	pop	ds
 45757 00001172 9D                      	popf
 45758 00001173 C3                      	retn
 45759                                  
 45760                                  EA20_OFF:
 45761                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45762                                  	; NOTE: ints are disabled at this point.
 45763                                  
 45764 00001174 53                      	push	bx
 45765 00001175 50                      	push	ax
 45766                                  
 45767 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 45768 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 45769 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 45770 00001181 8CC8                    	mov	ax,cs
 45771 00001183 8ED0                    	mov	ss,ax
 45772 00001185 BC[A007]                	mov	sp,AUXSTACK
 45773                                  					; ss:sp -> DOSDATA:AuxStack
 45774                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45775 00001188 B405                    	mov	ah,5
 45776 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45777 0000118F 09C0                    	or	ax,ax
 45778 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45779                                  
 45780 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 45781 00001197 8ED0                    	mov	ss,ax
 45782 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 45783                                  
 45784 0000119E 58                      	pop	ax
 45785 0000119F 5B                      	pop	bx
 45786                                  
 45787 000011A0 EBCB                    	jmp	short EA20_RET
 45788                                  
 45789                                  XMMerror:				; M006 - Start
 45790 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 45791 000011A4 CD10                    	int	10h
 45792 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 45793 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 45794 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 45795 000011AC B002                    	mov	al,02h			; 80 X 25 text
 45796 000011AE CD10                    	int	10h
 45797                                  XMMcont:
 45798 000011B0 B405                    	mov	ah,05h			; set display page
 45799 000011B2 30C0                    	xor	al,al			; page 0
 45800 000011B4 CD10                    	int	10h
 45801                                  	
 45802 000011B6 BE[9312]                	mov	si,XMMERRMSG
 45803 000011B9 0E                      	push	cs
 45804 000011BA 1F                      	pop	ds
 45805 000011BB FC                      	cld				; clear direction flag
 45806                                  XMMprnt:
 45807 000011BC AC                      	lodsb
 45808 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45809 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 45810 000011C1 B40E                    	mov	ah,0Eh
 45811 000011C3 BB0700                  	mov	bx,7
 45812 000011C6 CD10                    	int	10h
 45813 000011C8 EBF2                    	jmp	short XMMprnt
 45814                                  
 45815                                  XMMStall:
 45816 000011CA FB                      	sti				; allow the user to warm boot
 45817 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 45818                                  
 45819                                  ;---------------------------------------------------------------------------
 45820                                  
 45821                                  ; 27/04/2019 - Retro DOS v4.0
 45822                                  
 45823                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45824                                  ALTAH	equ 0Ch
 45825                                  
 45826                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45827                                  ;table was different for this. Segments will be patched in at init time.
 45828                                  
 45829                                  OldInstanceJunk:
 45830 000011CD 7000                    	dw	70h	;segment of BIOS
 45831 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 45832 000011D1 0600                    	dw	6	;5 instance items
 45833                                  
 45834                                  	;dw	0,offset dosdata:contpos, 2
 45835                                  	;dw	0,offset dosdata:bcon, 4
 45836                                  	;dw	0,offset dosdata:carpos,106h
 45837                                  	;dw	0,offset dosdata:charco, 1
 45838                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45839                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45840                                  
 45841 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 45842 000011D9 0000[3200]0400          	dw	0,BCON,4
 45843 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 45844 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 45845 000011EB 0000[C00F]2200          	dw	0,exec_init_SP,34
 45846 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45847                                  
 45848                                  ;---------------------------------------------------------------------------
 45849                                  
 45850                                  ; M021-
 45851                                  ;
 45852                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45853                                  ; 	takes control of the HMA. When running, this word is a reliable
 45854                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45855                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45856                                  
 45857                                  DosHasHMA:
 45858 000011F7 00                      	db	0
 45859                                  FixExePatch:
 45860 000011F8 0000                    	dw	0		; M012
 45861                                  ; 28/12/2022 - Retro DOS v4.1
 45862                                  ;RationalPatchPtr:
 45863                                  ;	dw	0		; M012
 45864                                  
 45865                                  ; End M021
 45866                                  
 45867                                  ;---------------------------------------------------------------------------
 45868                                  
 45869                                  ; 28/12/2022 - Retro DOS v4.1
 45870                                  %if 0
 45871                                  ; M020 Begin
 45872                                  
 45873                                  RatBugCode:	; proc	far
 45874                                  	push	cx
 45875                                  	mov	cx,[10h]
 45876                                  rbc_loop:
 45877                                  	;loop	$
 45878                                  	loop	rbc_loop
 45879                                  	pop	cx
 45880                                  	retf
 45881                                  		
 45882                                  ; M020 End
 45883                                  %endif
 45884                                  
 45885                                  ;---------------------------------------------------------------------------
 45886                                  	
 45887                                  UmbSave1:
 45888                                  	;db	11 dup (?)	; M023
 45889 000011FA 00<rep Bh>              	times	11 db 0	
 45890                                  
 45891                                  ; DOSDATA:122Ah
 45892                                  
 45893                                  Mark3:	; label byte
 45894                                  
 45895                                  ;IF2
 45896                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45897                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45898                                  ;	ENDIF
 45899                                  ;ENDIF
 45900                                  
 45901                                  ;############################################################################
 45902                                  ;
 45903                                  ; ** HACK FOR DOS 4.0 REDIR **
 45904                                  ;
 45905                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45906                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45907                                  ; COUNTRY_CDPG if it can. 
 45908                                  ;
 45909                                  ; MARK3 SHOULD NOT BE > 122AH 
 45910                                  ;
 45911                                  ; As of 9/6/90, this area is FULL!
 45912                                  ;
 45913                                  ;############################################################################
 45914                                   
 45915                                  	;ORG	0122Ah
 45916                                  
 45917                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45918                                  
 45919                                  ; The following table is used for DOS 3.3
 45920                                  ;DOS country and code page information is defined here for DOS 3.3.
 45921                                  ;The initial value for ccDosCountry is 1 (USA).
 45922                                  ;The initial value for ccDosCodepage is 850.
 45923                                  
 45924                                  ; country and code page information
 45925                                  ; ---------------------------------------------------------------------------
 45926                                  COUNTRY_CDPG:	; label  byte
 45927 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45928 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45928 00001216 53595300           
 45929                                  	;db   51 dup (?)
 45930 0000121A 00<rep 33h>             	times 51 db 0
 45931                                  ; ------------------------------------------------<MSKK01>-------------------
 45932                                  ;ifdef	DBCS
 45933                                  ;  ifdef JAPAN
 45934                                  ;	dw   932			; system code page id (JAPAN)
 45935                                  ;  endif
 45936                                  ;  ifdef TAIWAN
 45937                                  ;	dw   938			; system code page id (TAIWAN)
 45938                                  ;  endif
 45939                                  ;  ifdef KOREA
 45940                                  ;	dw   934			; system code page id (KOREA IBM)
 45941                                  ;  endif
 45942                                  ;else
 45943 0000124D B501                    	dw   437			; system code page id
 45944                                  ;endif
 45945                                  ; ------------------------------------------------<MSKK01>-------------------
 45946 0000124F 0600                    	dw   6				; number of entries
 45947 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 45948 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45949 00001254 0000                    	dw   0				; segment of poiter
 45950 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45951 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45952 00001259 0000                    	dw   0				; segment of poiter
 45953 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 45954 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45955 0000125E 0000                    	dw   0				; segment of poiter
 45956 00001260 06                      	db   SetCollate	; 6		; collate type
 45957 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45958 00001263 0000                    	dw   0				; segment of poiter
 45959 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45960 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45961 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45962 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 45963 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45964                                  ; ------------------------------------------------<MSKK01>-------------------
 45965                                  ;ifdef	DBCS
 45966                                  ;	...... 
 45967                                  ;else
 45968 0000126D 0100                    	dw   1				; USA country id
 45969 0000126F B501                    	dw   437			; USA system code page id
 45970 00001271 0000                    	dw   0 				; date format
 45971 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 45972 00001278 2C00                    	db   ',',0			; thousand separator
 45973 0000127A 2E00                    	db   '.',0			; decimal separator
 45974 0000127C 2D00                    	db   '-',0			; date separator
 45975 0000127E 3A00                    	db   ':',0			; time separator
 45976 00001280 00                      	db   0				; currency format flag
 45977 00001281 02                      	db   2				; # of digits in currency
 45978 00001282 00                      	db   0 				; time format
 45979 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45980 00001285 0000                    	dw   0				; segment of entry point
 45981 00001287 2C00                    	db   ',',0			; data list separator
 45982 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45982 00001292 00                 
 45983                                  ;endif
 45984                                  ; ------------------------------------------------<MSKK01>-------------------
 45985                                  
 45986                                  ; 27/04/2019 - Retro DOS v4.0
 45987                                  
 45988                                  ;include msdos.cl2			; XMMERRMSG
 45989                                  
 45990                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 45991                                  
 45992                                  XMMERRMSG:
 45993 00001293 0D0A                    	db	0Dh,0Ah
 45994 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45994 0000129E 617265204572726F72-
 45994 000012A7 0D0A24             
 45995                                  
 45996                                  ; DOSDATA ends
 45997                                  
 45998                                  ; 05/11/2022
 45999                                  ;----------------------------------------------------------------------------
 46000                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46001                                  ;----------------------------------------------------------------------------
 46002                                  
 46003                                  ; 28/12/2022 - Retro DOS v4.1
 46004                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46005                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46006                                  ;----------------------------------------------------------------------------
 46007                                  %if 0
 46008                                  ;----------------------------------------------------------------------------
 46009                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46010                                  
 46011                                  ;============================================================================
 46012                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46013                                  ;============================================================================
 46014                                  ; 27/04/2019 - Retro DOS 4.0
 46015                                  
 46016                                  ;DOSDATA Segment
 46017                                  
 46018                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46019                                  
 46020                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46021                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46022                                  
 46023                                  ; first and second DOS patches
 46024                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46025                                  ;
 46026                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46027                                  ;	DVRDLP:
 46028                                  ;	DVWRTLP:
 46029                                  ;
 46030                                  ;
 46031                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46032                                  ;	lds	si,si+7 				  ; sf_devptr
 46033                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46034                                  
 46035                                  DOSP1_ID:	db	036h,0C5h,036h
 46036                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46037                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46038                                  
 46039                                  		db	90h, 90h
 46040                                  
 46041                                  DOSP12_ID:	db	036h,0C5h,036h
 46042                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46043                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46044                                  
 46045                                  ; DOSDATA:12E3h
 46046                                  
 46047                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46048                                  ;
 46049                                  ; Code in disk.asm, 1 location
 46050                                  ;	GETBUF:
 46051                                  ;
 46052                                  ; 051h	push	cx	<- begin special int28 mode
 46053                                  ;	push	es
 46054                                  ;	push	di
 46055                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46056                                  ;	call	????	; $STD_CON_STRING_INPUT
 46057                                  ;	pop	di
 46058                                  ;	pop	es
 46059                                  ; 059h	pop	cx	<- end special int28 mode
 46060                                  
 46061                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46062                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46063                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46064                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46065                                  DOSP4_ID:	db	059h			; pop cx
 46066                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46067                                  	
 46068                                  ; DOSDATA:12EFh
 46069                                  
 46070                                  ; Fifth DOS patch - System call 40h (Write) to console
 46071                                  ;
 46072                                  ; Code in disk.asm, 1 location
 46073                                  ;
 46074                                  ;		push	cx
 46075                                  ;      WRCONLP: lodsb
 46076                                  ;		cmp	al,1Ah
 46077                                  ;		jz	????
 46078                                  ;		call	????	<- "simulate" int28 event
 46079                                  ;		loop	WRCONLP
 46080                                  ;      CONEOF:	pop	ax
 46081                                  
 46082                                  DOSP5_ID:	db	051h			; push cx
 46083                                  		db	0ACh,03Ch,01Ah,074h,005h
 46084                                  		db	0E8h			; call
 46085                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46086                                  
 46087                                  ; DOSDATA:12F6h
 46088                                  
 46089                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46090                                  ;
 46091                                  ; Code in disp.asm, 1 location
 46092                                  ;
 46093                                  ;
 46094                                  ;	mov [SaveDS],ds
 46095                                  ;	mov [SaveBX],bx
 46096                                  ;	mov bx,cs
 46097                                  ;	mov ds,bx
 46098                                  ;	inc [indos]
 46099                                  ;	xor ax,ax
 46100                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46101                                  
 46102                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46103                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46104                                  		db	02Eh,089h,01Eh
 46105                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46106                                  		db	08Ch,0CBh		; mov bx,cs
 46107                                  		db	08Eh,0DBh		; mov ds,bx
 46108                                  		db	0FEh,006h
 46109                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46110                                  		db	033h,0C0h		; xor ax,ax
 46111                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46112                                  
 46113                                  ; DOSDATA:130Ah
 46114                                  
 46115                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46116                                  ;
 46117                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46118                                  ;
 46119                                  ;
 46120                                  ;
 46121                                  ;	push	ax
 46122                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46123                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46124                                  ;	pop	ax
 46125                                  ;	jz	????
 46126                                  
 46127                                  DOSP8_ID:	db	050h			; push ax
 46128                                  		db	036h,0A1h
 46129                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46130                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46131                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46132                                  		db	02Fh,058h		; pop  ax
 46133                                  
 46134                                  ; DOSDATA:1314h
 46135                                  
 46136                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46137                                  ;
 46138                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46139                                  ;   a yeild when a character is not ready to be read.
 46140                                  ;
 46141                                  ; Code in disk.asm, 3 locations
 46142                                  ;
 46143                                  ;   DVRDRAW:
 46144                                  ;	    PUSH    ES
 46145                                  ;	    POP     DS
 46146                                  ;   ReadRawRetry:				<- Patch 10
 46147                                  ;	    MOV     BX,DI
 46148                                  ;	    XOR     AX,AX			<- Reenter #2
 46149                                  ;	    MOV     DX,AX
 46150                                  ;	    call    SETREAD
 46151                                  ;	    PUSH    DS				<- Reenter #1
 46152                                  ;	    LDS     SI,[THISSFT]
 46153                                  ;	    call    DEVIOCALL
 46154                                  ;	    MOV     DX,DI
 46155                                  ;	    MOV     AH,86H
 46156                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46157                                  ;	    TEST    DI,STERR
 46158                                  ;	    JZ	    CRDROK
 46159                                  ;	    call    CHARHARD
 46160                                  ;	    MOV     DI,DX
 46161                                  ;	    OR	    AL,AL
 46162                                  ;	    JZ	    CRDROK
 46163                                  ;	    CMP     AL,3
 46164                                  ;	    JZ	    CRDFERR
 46165                                  ;	    POP     DS
 46166                                  ;	    JMP     ReadRawRetry
 46167                                  ;
 46168                                  ;   CRDFERR:
 46169                                  ;	    POP     DI				<- Patch 11
 46170                                  ;   DEVIOFERR:
 46171                                  ;	    LES     DI,[THISSFT]
 46172                                  ;	    jmp     SET_ACC_ERR_DS
 46173                                  ;
 46174                                  ;   CRDROK:
 46175                                  ;	    POP     DI				<- Patch 12
 46176                                  ;	    MOV     DI,DX
 46177                                  ;	    ADD     DI,[CALLSCNT]
 46178                                  ;	    JMP     SHORT ENDRDDEVJ3
 46179                                  
 46180                                  DOSP10_ID:		db	006H,01FH
 46181                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46182                                  DOSP10_LOC:		db	08BH,0DFH
 46183                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46184                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46185                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46186                                  			db	0DFH,00EH
 46187                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46188                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46189                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46190                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46191                                  			db	009H,003H
 46192                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46193                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46194                                  			db	01FH,0EBH,0CFH
 46195                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46196                                  			db	05FH
 46197                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46198                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46199                                  
 46200                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46201                                  			db	05FH,08BH,0FAH
 46202                                  ; DOSDATA:1353h
 46203                                  
 46204                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46205                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46206                                  ;
 46207                                  ;	    Sets focus to current VM so user can see fatal message.
 46208                                  ;
 46209                                  ;
 46210                                  ;	l0: lodsb		<- Setfocus here
 46211                                  ;	    cmp al, '$'
 46212                                  ;	    je l1
 46213                                  ;	    mov bl, 7
 46214                                  ;	    mov ah, 0Eh
 46215                                  ;	    int 10h
 46216                                  ;	    jmp l0
 46217                                  ;	l1: jmp $
 46218                                  
 46219                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46220                                  		db	03Ch,024h		;     cmp al, '$'
 46221                                  		db	074h,008h		;     je l1
 46222                                  		db	0B3h,007h		;     mov bl, 7
 46223                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46224                                  		db	0CDh,010h		;     int 10h
 46225                                  		db	0EBh,0F3h		;     jmp l0
 46226                                  		db	0EBh,0FEh		; l1: jmp $
 46227                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46228                                  
 46229                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46230                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46231                                  
 46232                                  ; 06/12/2022
 46233                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46234                                  
 46235                                  ; DOSDATA ends
 46236                                  
 46237                                  ;============================================================================
 46238                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46239                                  ;============================================================================
 46240                                  ; 27/04/2019 - Retro DOS 4.0
 46241                                  
 46242                                  ;mpatch.asm -- holds data patch location for callouts 
 46243                                  ; -- allocate cluster in rom.asm
 46244                                  ;
 46245                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46246                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46247                                  ; cluster allocation, however it can be expanded to be used by other
 46248                                  ; patches. This is important since we have an easy-access pointer to
 46249                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46250                                  ; only patch out a far call/retf, so any space after that could be
 46251                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46252                                  ; to call out here.
 46253                                  ;
 46254                                  ; Currently, we allocate only the minimum space required for the 6
 46255                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46256                                  ; to reserve space here if your new data will be position dependent
 46257                                  ; and would prohibit growing of this table.
 46258                                  ;       
 46259                                  ;history	-	created 8-7-92 by scottq
 46260                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46261                                  ;
 46262                                  ;Exported Functions
 46263                                  ;==================
 46264                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46265                                  
 46266                                  ; DosData Segment
 46267                                  
 46268                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46269                                  
 46270                                  ; ---------------------------------------------------------------------------
 46271                                  
 46272                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46273                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46274                                  ; greater). Added to this file because it needed to be somewhere and is
 46275                                  ; 'patch' related.
 46276                                  
 46277                                  Rational386PatchPtr:
 46278                                  	dw	0	; points to patch routine or RET instr.
 46279                                  ; ---------------------------------------------------------------------------
 46280                                  
 46281                                  MagicPatch:
 46282                                  ;MagicPatch proc far
 46283                                          retf            ;default is to just return to allocate
 46284                                          nop             ;however, this code will be patched
 46285                                          nop             ;by magicdrv.sys to
 46286                                          nop             ; call far ?:?     
 46287                                          nop             ; retf or perhaps just jmp far
 46288                                          nop             ;retf/nop take one byte, so we need six instructions
 46289                                                          ;for 6 byte patch
 46290                                  ;MagicPatch endp
 46291                                  
 46292                                  ; ---------------------------------------------------------------------------
 46293                                  
 46294                                  ;DosData Ends
 46295                                  
 46296                                  ; DOSDATA:136Ah
 46297                                  
 46298                                  ;----------------------------------------------------------------------------
 46299                                  
 46300                                  ;DOSDATALAST SEGMENT
 46301                                  
 46302                                  ; 29/04/2019 - Retro DOS v4.0
 46303                                  
 46304                                  ;----------------------------------------------------------------------------
 46305                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46306                                  
 46307                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 46308                                  
 46309                                  ;align 16
 46310                                  
 46311                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46312                                  
 46313                                  ;----------------------------------------------------------------------------
 46314                                  
 46315                                  %endif	; 05/11/2022
 46316                                  
 46317                                  ; 05/12/2022
 46318                                  ;MSDAT001E:	; label byte
 46319                                  
 46320                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46321                                  DOSDATAEND equ $
 46322                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46323                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46324                                  
 46325                                  ;DOSDATALAST ENDS
 46326                                  
 46327                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46328                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46329                                  ;============================================================================
 46330                                  ;	END
 46331                                  ;============================================================================
 46332                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46333                                  ; -----------------------------
 46334                                  ; MAY 2019, ISTANBUL - TURKIYE.
