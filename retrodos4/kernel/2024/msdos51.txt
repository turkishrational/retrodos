     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 16/01/2024 - Retro DOS v4.1 ((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9C876                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [FC61]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [5816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [6116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [1317]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [2E17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [3417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [A215]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [CE15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [7C13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [D513]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [E113]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [4817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [5217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [A00F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [870E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [231E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [F117]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [351F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [C71F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [9717]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [211F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [261F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [071F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [5D18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5706]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [820E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [770E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [2F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [310F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5706]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5706]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [700F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5706]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [2B1F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [301F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [A917]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [7F17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [A80E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [AD10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [1C1F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [171F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [240F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [630A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [800A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [9F0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [B00A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [680C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [640E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [3F0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [A061]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [720F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [5A0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [990E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [410E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [D50E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [6F0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [2122]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [6D21]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [A821]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [BE6F]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [E76E]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [1867]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [2968]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [8F68]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [0E70]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [9468]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [CB6F]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [8222]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [4969]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [6769]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [FE20]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [9362]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [0D64]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [E963]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [7A5B]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [D861]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [705B]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [3A20]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [9020]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [660F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [D50F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [630C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [9C10]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [3470]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [FB68]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [4264]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [E90E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [BF70]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [A770]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [A072]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [2865]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [316A]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [9669]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [826E]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5706]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [090F]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [F20C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [EF0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [6567]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [4B67]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [9F11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [4B67]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5706]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [5571]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [1407]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3909]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [3D2F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [CA0E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [3309]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [A550]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [6316]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [7B53]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [FA58]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [3B30]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [BF5A]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [5473]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [862C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [702C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [F50A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [0B12]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [F358]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [0B12]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [D811]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [F011]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [5050]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [3759]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [965A]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [9366]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [F66A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [A16A]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [A76E]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [9C0B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [350C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [920B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [B611]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [E469]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [6066]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [826E]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7E06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [DE41]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [0B12]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [FE11]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [AD12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [1867]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [B312]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [2968]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [6F12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [F012]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [DF12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [0D13]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [1113]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5706]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[F711]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8CF4C                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E83D56                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8B20D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8C40D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E8FC31                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E83B34                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E82B0D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E89203                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E83A0D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E8D836                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E89631                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL, 1		; No increment; need carry flag
  4981 00000600 7216                    	JC	SHORT SKIPGET
  4982 00000602 E89C64                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985 00000607 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4986 00000609 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4987 0000060C 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4988 0000060E F9                      	STC				;DCR.			;AN000;
  4989 0000060F A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4990 00000612 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4991                                  SKIPGET:
  4992 00000618 58                      	POP	AX
  4993 00000619 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4994                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4995                                  	;jnc	short getbp_t
  4996                                  	;retn
  4997                                  getbp_t:
  4998 0000061B C42E[A205]              	LES	BP,[THISCDS]
  4999                                  	; 15/12/2022
  5000 0000061F 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5001                                  	; 07/12/2022
  5002                                  	;TEST	WORD [ES:BP+43H],8000H
  5003                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5004 00000624 7408                    	JZ	SHORT GETBP_CDS
  5005 00000626 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5006 0000062C F9                      	STC
  5007                                  GETBP_RETN:
  5008 0000062D C3                      	RETN
  5009                                  
  5010                                  GETBP_CDS:
  5011                                  	;LES	BP,[ES:BP+45H]
  5012 0000062E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5013                                  GOTDPB:
  5014                                  	; Load THISDPB from ES:BP
  5015 00000632 892E[8A05]              	MOV	[THISDPB],BP
  5016 00000636 8C06[8C05]              	MOV	[THISDPB+2],ES
  5017 0000063A C3                      	RETN
  5018                                  
  5019                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5020                                  
  5021                                  ;----------------------------------------------------------------------------
  5022                                  ;
  5023                                  ; Procedure Name : SYS_RETURN
  5024                                  ;
  5025                                  ; These are the general system call exit mechanisms. All internal system
  5026                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5027                                  ; is to set the user's flags and set his AX register for return.
  5028                                  ;
  5029                                  ;----------------------------------------------------------------------------
  5030                                  
  5031                                          ;procedure   SYS_RETURN,NEAR
  5032                                  SYS_RETURN:        
  5033                                          ;entry	SYS_RET_OK
  5034                                  SYS_RET_OK:   
  5035 0000063B E847FE                  	call    Get_User_Stack
  5036                                  		; turn off user's carry flag
  5037                                  SYS_RET_OK_clc: ; 25/06/2019 
  5038                                          ;;and	word [SI+16h],0FFFEh 
  5039                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5040                                          ; 25/06/2019
  5041 0000063E 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5042 00000642 EB10                    	JMP     SHORT DO_RET
  5043                                  
  5044                                          ;entry   SYS_RET_ERR
  5045                                  SYS_RET_ERR:        
  5046 00000644 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5047 00000646 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5048 00000649 E81A00                  	CALL	ErrorMap
  5049                                  
  5050                                  	;entry	From_GetSet
  5051                                  From_GetSet:
  5052 0000064C E836FE                          call    Get_User_Stack
  5053                                  		 ; signal carry to user
  5054                                  	;;or	word [SI+16h],1
  5055                                  	;OR	word [SI+user_env.user_F],f_Carry
  5056                                  	; 25/06/2019
  5057 0000064F 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5058 00000653 F9                      	STC			; also, signal internal error
  5059                                  DO_RET:
  5060                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5061 00000654 8904                    	MOV	[SI],AX
  5062 00000656 C3                      	RETN
  5063                                  
  5064                                  	;entry	FCB_RET_OK
  5065                                  FCB_RET_OK:
  5066                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5067                                  NO_OP:
  5068 00000657 30C0                    	XOR	AL,AL
  5069 00000659 C3                      	retn
  5070                                  
  5071                                  	;entry	FCB_RET_ERR
  5072                                  FCB_RET_ERR:
  5073 0000065A 30E4                    	XOR	AH,AH
  5074 0000065C 36A3[2403]              	mov	[ss:EXTERR],AX
  5075 00000660 E80300                  	CALL	ErrorMap
  5076 00000663 B0FF                    	MOV	AL,-1
  5077 00000665 C3                      	retn
  5078                                  
  5079                                  	;entry	ErrorMap
  5080                                  ErrorMap:
  5081 00000666 56                      	PUSH	SI
  5082                                  				; ERR_TABLE_21 is now in DOSDATA
  5083 00000667 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5084                                  				; SS override for FAILERR and EXTERR
  5085 0000066A 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5086 00000670 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5087                                  		 ; Ooops, this is the REAL reason
  5088                                  	;mov	word [SS:EXTERR],53h
  5089 00000672 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5090                                  EXTENDED_NORMAL:
  5091 00000679 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5092 0000067C 5E                      	POP	SI
  5093 0000067D C3                      	retn
  5094                                  
  5095                                  	;EndProc SYS_RETURN
  5096                                  
  5097                                  ;---------------------------------------------------------------------------
  5098                                  ;
  5099                                  ; Procedure Name : CAL_LK
  5100                                  ;
  5101                                  ; Inputs:
  5102                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5103                                  ;		(DS NEED not be DOSDATA)
  5104                                  ;	[EXTERR] is set with error
  5105                                  ; Function:
  5106                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5107                                  ; Outputs:
  5108                                  ;	[EXTERR_CLASS] set
  5109                                  ;	[EXTERR_ACTION] set
  5110                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5111                                  ; Destroys SI, FLAGS
  5112                                  ;
  5113                                  ;---------------------------------------------------------------------------
  5114                                  
  5115                                  	;procedure CAL_LK,NEAR
  5116                                  CAL_LK:
  5117 0000067E 1E                      	PUSH	DS
  5118 0000067F 50                      	PUSH	AX
  5119 00000680 53                      	PUSH	BX
  5120                                  
  5121                                  ;M048	Context DS		; DS:SI -> Table
  5122                                  ;
  5123                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5124                                  ; is DOSDATA
  5125                                  
  5126                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5127                                  	; 15/05/2019 - Retro DOS v4.0
  5128 00000681 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5129                                  
  5130                                  	; 18/07/2018
  5131                                  	;push	ss
  5132                                  	;pop	ds
  5133                                  
  5134 00000686 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5135                                  TABLK1:
  5136 0000068A AC                      	LODSB
  5137                                  
  5138 0000068B 3CFF                    	CMP	AL,0FFH
  5139 0000068D 7409                    	JZ	short GOT_VALS	; End of table
  5140 0000068F 38D8                    	CMP	AL,BL
  5141 00000691 7405                    	JZ	short GOT_VALS	; Got entry
  5142 00000693 83C603                  	ADD	SI,3		; Next table entry
  5143                                  	; 15/08/2018
  5144 00000696 EBF2                    	JMP	short TABLK1
  5145                                  
  5146                                  GOT_VALS:
  5147 00000698 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5148                                  
  5149 00000699 80FCFF                  	CMP	AH,0FFH
  5150 0000069C 7404                    	JZ	short NO_SET_ACT
  5151 0000069E 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5152                                  NO_SET_ACT:
  5153 000006A2 3CFF                    	CMP	AL,0FFH
  5154 000006A4 7403                    	JZ	short NO_SET_CLS
  5155 000006A6 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5156                                  NO_SET_CLS:
  5157 000006A9 AC                      	LODSB			; Get LOCUS
  5158                                  
  5159 000006AA 3CFF                    	CMP	AL,0FFH
  5160 000006AC 7403                    	JZ	short NO_SET_LOC
  5161 000006AE A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5162                                  NO_SET_LOC:
  5163 000006B1 5B                      	POP	BX
  5164 000006B2 58                      	POP	AX
  5165 000006B3 1F                      	POP	DS
  5166 000006B4 C3                      	retn
  5167                                  
  5168                                  	;EndProc CAL_LK
  5169                                  
  5170                                  ;---------------------------------------------------------------------------
  5171                                  ;
  5172                                  ; Procedure Name : ETAB_LK
  5173                                  ;
  5174                                  ; Inputs:
  5175                                  ;	AX is error code
  5176                                  ;	[USER_IN_AX] has AH value of system call involved
  5177                                  ; Function:
  5178                                  ;	Make sure error code is appropriate to this call.
  5179                                  ; Outputs:
  5180                                  ;	AX MAY be mapped error code
  5181                                  ;	[EXTERR] = Input AX
  5182                                  ; Destroys ONLY AX and FLAGS
  5183                                  ;
  5184                                  ;---------------------------------------------------------------------------
  5185                                  
  5186                                  	;procedure ETAB_LK,NEAR
  5187                                  
  5188                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5189 000006B5 1E                      	PUSH	DS
  5190 000006B6 56                      	PUSH	SI
  5191 000006B7 51                      	PUSH	CX
  5192 000006B8 53                      	PUSH	BX
  5193                                  
  5194                                  	;Context DS			; SS is DOSDATA
  5195                                  
  5196 000006B9 16                      	push	ss
  5197 000006BA 1F                      	pop	ds
  5198                                  
  5199 000006BB A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5200                                  
  5201                                  					; I21_MAP_E_TAB is now in DOSCODE
  5202 000006BE BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5203 000006C1 88C7                    	MOV	BH,AL			; Real code to BH
  5204 000006C3 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5205                                  TABLK2:
  5206                                  	; 15/05/2019 - Retro DOS v4.0
  5207 000006C7 2E                      	cs
  5208 000006C8 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5209                                  	
  5210                                  	; 18/07/2018 - Retro DOS v3.0
  5211                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5212                                  
  5213 000006C9 3CFF                    	CMP	AL,0FFH 		; End of table?
  5214 000006CB 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5215 000006CD 38D8                    	CMP	AL,BL			; Found call?
  5216 000006CF 740C                    	JZ	short GOT_CALL		; Yes
  5217 000006D1 86E0                    	XCHG	AH,AL			; Count to AL
  5218 000006D3 30E4                    	XOR	AH,AH			; Make word for add
  5219 000006D5 01C6                    	ADD	SI,AX			; Next table entry
  5220 000006D7 EBEE                    	JMP	short TABLK2
  5221                                  
  5222                                  NOT_IN_TABLE:
  5223 000006D9 88F8                    	MOV	AL,BH			; Restore original code
  5224 000006DB EB0C                    	JMP	SHORT NO_MAP
  5225                                  
  5226                                  GOT_CALL:
  5227 000006DD 88E1                    	MOV	CL,AH
  5228 000006DF 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5229                                  CHECK_CODE:
  5230                                  	; 15/05/2019 - Retro DOS v4.0
  5231 000006E1 2E                      	cs
  5232 000006E2 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5233                                  
  5234                                  	; 18/07/2018
  5235                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5236                                  
  5237 000006E3 38F8                    	CMP	AL,BH			; Code OK?
  5238 000006E5 7402                    	JZ	short NO_MAP		; Yes
  5239 000006E7 E2F8                    	LOOP	CHECK_CODE
  5240                                  NO_MAP:
  5241 000006E9 30E4                    	XOR	AH,AH			; AX is now valid code
  5242 000006EB 5B                      	POP	BX
  5243 000006EC 59                      	POP	CX
  5244 000006ED 5E                      	POP	SI
  5245 000006EE 1F                      	POP	DS
  5246 000006EF C3                      	retn
  5247                                  
  5248                                  	;EndProc ETAB_LK
  5249                                  
  5250                                  ; 18/07/2018 - Retro DOS v3.0
  5251                                  ;---------------------------------------------------------------------------
  5252                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5253                                  
  5254                                  ;IF installed ; (*)
  5255                                  
  5256                                  ;---------------------------------------------------------------------------
  5257                                  ;
  5258                                  ; Procedure Name : SetBad
  5259                                  ;
  5260                                  ; SetBad sets up info for bad functions
  5261                                  ;
  5262                                  ;---------------------------------------------------------------------------
  5263                                  
  5264                                  SetBad:
  5265                                  	;mov	ax,1
  5266 000006F0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5267                                  
  5268                                  	; MSDOS 3.3
  5269                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5270                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5271                                  
  5272                                  ;	set up ds to point to DOSDATA
  5273                                  
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275                                  	; MSDOS 6.0
  5276 000006F3 1E                      	push	ds
  5277                                  
  5278                                  	;getdseg <ds>
  5279 000006F4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5280                                  
  5281 000006F9 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5282                                  
  5283 000006FE 1F                      	pop	ds	  	;hkn; restore ds
  5284                                  
  5285 000006FF F9                      	STC
  5286 00000700 C3                      	retn
  5287                                  
  5288                                  ;--------------------------------------------------------------------------
  5289                                  ;
  5290                                  ; Procedure Name : BadCall
  5291                                  ;
  5292                                  ; BadCall is the initial routine for bad function calls
  5293                                  ;
  5294                                  ;--------------------------------------------------------------------------
  5295                                  
  5296                                  BadCall:
  5297 00000701 E8ECFF                  	call	SetBad
  5298 00000704 CB                      	retf
  5299                                  
  5300                                  ;--------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; OKCall always sets carry to off.
  5303                                  ;
  5304                                  ;-----------------------------------------------------------------------
  5305                                  
  5306                                  OKCall:
  5307 00000705 F8                      	CLC
  5308 00000706 CB                      	retf
  5309                                  
  5310                                  ;---------------------------------------------------------------------------
  5311                                  ;
  5312                                  ; Procedure Name : INT2F
  5313                                  ;
  5314                                  ; INT 2F handler works as follows:
  5315                                  ;   PUSH    AX
  5316                                  ;   MOV     AX,multiplex:function
  5317                                  ;   INT     2F
  5318                                  ;   POP     ...
  5319                                  ; The handler itself needs to make the AX available for the various routines.
  5320                                  ;
  5321                                  ;----------------------------------------------------------------------------
  5322                                  
  5323                                  ; 15/05/2019 - Retro DOS v4.0
  5324                                  
  5325                                  ;KERNEL_SEGMENT equ 70h
  5326                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5327                                  DOSBIODATASEG equ 70h
  5328                                  
  5329                                  ; retrodos4.s - offset in BIOSDATA
  5330                                  bios_i2f equ 5
  5331                                  
  5332                                  ;PUBLIC	Int2F
  5333                                  ;INT2F	PROC	FAR
  5334                                  
  5335                                  ; 15/05/2019
  5336                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5337                                  
  5338                                  ; 04/11/2022
  5339                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5340                                  
  5341                                  	; 05/01/2024	
  5342                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5343                                  	; 18/07/2018 - Retro DOS v3.0
  5344                                  INT2F:
  5345                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5346                                  INT2FNT:
  5347                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5348 00000707 FB                      	STI
  5349                                  	;cmp	ah,11h
  5350 00000708 80FC11                  	CMP	AH,MultNET
  5351 0000070B 750A                    	JNZ	short INT2FSHR
  5352                                  TestInstall:
  5353 0000070D 08C0                    	OR	AL,AL
  5354 0000070F 7403                    	JZ	short Leave2F
  5355                                  BadFunc:
  5356 00000711 E8DCFF                  	CALL	SetBad
  5357                                  
  5358                                  	;entry	Leave2F
  5359                                  Leave2F:
  5360 00000714 CA0200                  	RETF	2			; long return + clear flags off stack
  5361                                  
  5362                                  INT2FSHR:
  5363                                  	;cmp	ah,10h
  5364 00000717 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5365 0000071A 74F1                    	JZ	short TestInstall	; yes, check for installation
  5366                                  INT2FNLS:
  5367                                  	;cmp	ah,14h
  5368 0000071C 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5369 0000071F 74EC                    	JZ	short TestInstall	; yes check for installation
  5370                                  INT2FDOS:
  5371                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5372                                  
  5373                                  	; 18/07/2018
  5374                                  	; MSDOS 3.3
  5375                                  	;;cmp	ah,12h	
  5376                                  	;CMP	AH,MultDOS
  5377                                  	;jz	short DispatchDOS
  5378                                  	;iret
  5379                                  
  5380                                  	; 15/05/2019
  5381                                  	; MSDOS 6.0
  5382                                  	;cmp	ah,12h	; 07/12/2022
  5383 00000721 80FC12                  	CMP	AH,MultDOS
  5384 00000724 7503                    	JNZ	short check_win		;check if win386 broadcast
  5385 00000726 E9F201                  	jmp	DispatchDOS
  5386                                  
  5387                                  	; .... win386 .... 
  5388                                  
  5389                                  check_win:
  5390                                  	;cmp	ah,16h
  5391 00000729 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5392 0000072C 7408                    	je	short Win386_Msg
  5393                                  
  5394                                  	; M044
  5395                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5396                                  	; of Windows. If so, do special action of going and saving last para
  5397                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5398                                  	; bug
  5399                                  
  5400 0000072E 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5401                                  	;jne	short next_i2f		; no, chain on
  5402                                  	; 15/12/2022
  5403                                  	;jmp	winold_swap		; yes, do desired action
  5404 00000731 7442                    	je	short winold_swap
  5405 00000733 E90501                  	jmp	next_i2f
  5406                                  
  5407                                  	; 15/12/2022
  5408                                  ;next_i2f:
  5409                                  ;	;;;jmp	bios_i2f
  5410                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5411                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5412                                  ;	; 04/11/2022
  5413                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5414                                  
  5415                                  ;	IRET				; This assume that we are at the head
  5416                                  					; of the list
  5417                                  ;INT2F	ENDP
  5418                                  
  5419                                  ; 15/05/2019 - Retro DOS v4.0
  5420                                  
  5421                                  ; We have received a message from Win386. There are three possible
  5422                                  ; messages we could get from Win386:
  5423                                  ;
  5424                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5425                                  ;		  to the Win386 startup info structure.
  5426                                  ; Exit		- for this, we clear the IsWin386 flag.
  5427                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5428                                  ;		  has already been handled. this is indicated by setting
  5429                                  ;		  CX to a non-zero value.
  5430                                  
  5431                                  Win386_Msg:
  5432 00000736 1E                      	push	ds
  5433                                  
  5434                                  	;getdseg <DS>			; ds is DOSDATA
  5435 00000737 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5436                                  
  5437                                  	; For WIN386 2.xx instance data
  5438                                  
  5439 0000073C 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5440 0000073E 7503                    	jne	short Win386_Msg_exit
  5441 00000740 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5442                                  Win386_Msg_exit:
  5443 00000743 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5444 00000745 7503                    	jne	short Win386_Msg_devcall
  5445 00000747 E92C01                  	jmp	Win386_Leaving
  5446                                  Win386_Msg_devcall:
  5447 0000074A 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5448 0000074C 7503                    	jne	short Win386_Msg_init
  5449 0000074E E96001                  	jmp	Win386_Query
  5450                                  Win386_Msg_init:
  5451 00000751 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5452 00000753 7403                    	je	short Win386_Starting
  5453 00000755 E9E200                  	jmp	win_nexti2f		; no, return
  5454                                  Win386_Starting:
  5455                                  	; 17/12/2022
  5456 00000758 F6C201                  	test	dl,1
  5457                                  	;test	dx,1			; is this really win386?
  5458 0000075B 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5459 0000075D E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5460                                  Win386_vchk:
  5461                                  	; M018 -- start of block changes
  5462                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5463                                  	; than 030Ah, we skip the VxD presence check
  5464                                  
  5465                                  ;M067 -- Begin changes
  5466                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5467                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5468                                  ;So, we null out the VxD ptr before the check.
  5469                                  
  5470                                  	;mov	word [Win386_Info+6],0
  5471 00000760 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5472                                  	;mov	word [Win386_Info+8],0
  5473 00000766 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5474                                  
  5475                                  ;M067 -- End changes
  5476                                  
  5477                                  ;ifdef JAPAN
  5478                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5479                                  ;else
  5480 0000076C 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5481                                  ;endif
  5482                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5483 00000770 724E                    	jb	short Win386_vxd
  5484 00000772 E9DD00                  	jmp	noVxD31
  5485                                  
  5486                                  	; 15/12/2022
  5487                                  winold_swap:
  5488 00000775 1E                      	push	ds
  5489 00000776 06                      	push	es
  5490 00000777 56                      	push	si
  5491 00000778 57                      	push	di
  5492 00000779 51                      	push	cx
  5493                                  
  5494                                  	;getdseg <ds>			;ds = DOSDATA
  5495 0000077A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5496                                  
  5497 0000077F 3C01                    	cmp	al,1			;swap Windows out call
  5498 00000781 751B                    	jne	short swapin		;no, check if Swap in call
  5499 00000783 E88801                  	call	getwinlast
  5500 00000786 1E                      	push	ds
  5501 00000787 07                      	pop	es
  5502 00000788 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5503 0000078A 31F6                    	xor	si,si
  5504 0000078C BF[0600]                	mov	di,WinoldPatch1
  5505 0000078F B90800                  	mov	cx,8
  5506 00000792 FC                      	cld
  5507 00000793 51                      	push	cx
  5508 00000794 F3A4                    	rep	movsb			;save first 8 bytes
  5509 00000796 59                      	pop	cx
  5510 00000797 BF[CD0D]                	mov	di,WinoldPatch2
  5511 0000079A F3A4                    	rep	movsb			;save next 8 bytes
  5512 0000079C EB1B                    	jmp	short winold_done
  5513                                  swapin:
  5514 0000079E 3C02                    	cmp	al,2			;swap Windows in call?
  5515 000007A0 7517                    	jne	short winold_done	;no, something else, pass it on
  5516 000007A2 E86901                  	call	getwinlast
  5517 000007A5 8EC6                    	mov	es,si
  5518 000007A7 31FF                    	xor	di,di
  5519 000007A9 BE[0600]                	mov	si,WinoldPatch1
  5520 000007AC B90800                  	mov	cx,8
  5521 000007AF FC                      	cld
  5522 000007B0 51                      	push	cx
  5523 000007B1 F3A4                    	rep	movsb			;restore first 8 bytes
  5524 000007B3 59                      	pop	cx
  5525 000007B4 BE[CD0D]                	mov	si,WinoldPatch2
  5526 000007B7 F3A4                    	rep	movsb			;restore next 8 bytes
  5527                                  winold_done:
  5528 000007B9 59                      	pop	cx
  5529 000007BA 5F                      	pop	di
  5530 000007BB 5E                      	pop	si
  5531 000007BC 07                      	pop	es
  5532 000007BD 1F                      	pop	ds
  5533 000007BE EB7B                    	jmp	short next_i2f		;chain on
  5534                                  	; 15/12/2022
  5535                                  	;jmp	next_i2f	
  5536                                  
  5537                                  Win386_vxd:
  5538 000007C0 50                      	push	ax
  5539 000007C1 53                      	push	bx
  5540 000007C2 51                      	push	cx
  5541 000007C3 52                      	push	dx
  5542 000007C4 56                      	push	si
  5543 000007C5 57                      	push	di			; save regs !!dont change order!!
  5544                                  
  5545 000007C6 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5546 000007CA 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5547 000007CD 741F                    	je	short Vxd31		; N: continue
  5548                                  					; Y: save arena associated with 
  5549                                  					;    umb_head
  5550                                  
  5551 000007CF C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5552                                  					; umb_arena
  5553 000007D4 1E                      	push	ds
  5554 000007D5 06                      	push	es
  5555                                  
  5556                                  	;mov	ax,ds
  5557                                  	;mov	es,ax			; es - > dosdata
  5558                                  	; 05/01/2024
  5559 000007D6 1E                      	push	ds
  5560 000007D7 07                      	pop	es
  5561                                  
  5562 000007D8 8EDB                    	mov	ds,bx
  5563 000007DA 31F6                    	xor	si,si			; ds:si -> umb_head
  5564                                  
  5565 000007DC FC                      	cld
  5566                                  
  5567 000007DD BF[FA11]                	mov	di,UmbSave1
  5568 000007E0 B90B00                  	mov	cx,11
  5569 000007E3 F3A4                    	rep	movsb
  5570                                  
  5571 000007E5 BF[D50D]                	mov	di,UmbSave2
  5572                                  	;mov	cx,5
  5573                                  	; 18/12/2022
  5574 000007E8 B105                    	mov	cl,5
  5575 000007EA F3A4                    	rep	movsb	
  5576                                  
  5577 000007EC 07                      	pop	es
  5578 000007ED 1F                      	pop	ds			; M062 - End
  5579                                  
  5580                                  Vxd31:
  5581                                  	;test	byte [DOS_FLAG],2
  5582 000007EE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5583 000007F3 7408                    	jz	short Dont_Supress		; M066
  5584 000007F5 5F                      	pop	di				; M066
  5585 000007F6 5E                      	pop	si				; M066
  5586 000007F7 5A                      	pop	dx				; M066
  5587 000007F8 59                      	pop	cx				; M066
  5588 000007F9 5B                      	pop	bx				; M066
  5589 000007FA 58                      	pop	ax				; M066
  5590 000007FB EB55                    	jmp	short noVxD31			; M066
  5591                                  
  5592                                  	; We check here if the VxD is available in the root of the boot drive. 
  5593                                  	; We do an extended open to suppress any error messages
  5594                                  	
  5595                                  Dont_Supress:
  5596 000007FD A0[6900]                	mov	al,[BOOTDRIVE]
  5597 00000800 0440                    	add	al,'A' - 1		; get drive letter
  5598 00000802 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5599                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5600                                  	;mov	al,0			; no extended attributes
  5601                                  	; 18/12/2022
  5602 00000805 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5603 00000808 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5604                                  					; no inherit, suppress crit err
  5605 0000080B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5606 0000080E BA0100                  	mov	dx,1			; fail if file does not exist
  5607 00000811 BE[3110]                	mov	si,VxDpath	
  5608                                  					; path of VxD file
  5609 00000814 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5610                                  
  5611 00000817 CD21                    	int	21h			; do extended open
  5612                                  
  5613 00000819 5F                      	pop	di
  5614 0000081A 5E                      	pop	si
  5615 0000081B 5A                      	pop	dx
  5616 0000081C 59                      	pop	cx
  5617                                  
  5618 0000081D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5619                                  
  5620                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5621                                  	; to indicate error to Windows after displaying message to user that 
  5622                                  	; VxD needs to be present to run Windows in enhanced mode.
  5623                                  
  5624 0000081F 52                      	push	dx
  5625 00000820 1E                      	push	ds
  5626 00000821 56                      	push	si
  5627 00000822 BE[B709]                	mov	si,NoVxDErrMsg
  5628 00000825 0E                      	push	cs
  5629 00000826 1F                      	pop	ds
  5630 00000827 B96300                  	mov	cx,VxDMesLen ; 99	;
  5631 0000082A B402                    	mov	ah,2			; write char to console
  5632 0000082C FC                      	cld
  5633                                  vxdlp:
  5634 0000082D AC                      	lodsb
  5635 0000082E 86D0                    	xchg	dl,al			; get char in dl
  5636 00000830 CD21                    	int	21h
  5637 00000832 E2F9                    	loop	vxdlp
  5638                                  
  5639 00000834 5E                      	pop	si
  5640 00000835 1F                      	pop	ds
  5641 00000836 5A                      	pop	dx
  5642 00000837 5B                      	pop	bx
  5643 00000838 58                      	pop	ax			;all registers restored
  5644 00000839 41                      	inc	cx			;cx != 0 to indicate error
  5645                                  	; 15/12/22022
  5646                                  	;jmp	win_nexti2f		;chain on
  5647                                  	;jmp	short win_nexti2f
  5648                                  
  5649                                  	; 15/12/2022
  5650                                  win_nexti2f:
  5651 0000083A 1F                      	pop	ds
  5652                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5653                                  	; 15/12/2022
  5654                                  next_i2f:
  5655                                  	;;;jmp	bios_i2f
  5656                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5657                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5658                                  	; 04/11/2022
  5659 0000083B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5660                                  
  5661                                  VxDthere:
  5662 00000840 89C3                    	mov	bx,ax
  5663 00000842 B43E                    	mov	ah,CLOSE ; 3Eh
  5664 00000844 CD21                    	int	21h			;close the file
  5665                                  
  5666                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5667                                  
  5668                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5669                                  	;mov	bx,Win386_Info
  5670                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5671                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5672                                  	; 15/12/2022
  5673 00000846 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5674 0000084C 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5675                                  
  5676 00000850 5B                      	pop	bx
  5677 00000851 58                      	pop	ax
  5678                                  noVxD31:
  5679                                  	; M018; End of block changes
  5680                                  
  5681 00000852 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5682 00000857 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5683                                  
  5684                                  	; M002;
  5685                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5686                                  
  5687 0000085C 52                      	push	dx			; M002
  5688 0000085D 89DA                    	mov	dx,bx			; M002
  5689                                  					; point ES:BX to Win386_Info ; M002
  5690 0000085F BB[E20F]                	mov	bx,Win386_Info 
  5691 00000862 895702                  	mov	[bx+2],dx		; M002
  5692 00000865 8C4704                  	mov	[bx+4],es		; M002
  5693 00000868 5A                      	pop	dx			; M002
  5694 00000869 1E                      	push	ds			; M002
  5695 0000086A 07                      	pop	es			; M002
  5696                                  	;jmp	win_nexti2f		; M002
  5697                                  	; 15/12/2022
  5698 0000086B EBCD                    	jmp	short win_nexti2f
  5699                                  
  5700                                  	; 15/12/2022
  5701                                  	; Code to return Win386 2.xx instance table
  5702                                  OldWin386Init:
  5703 0000086D 58                      	pop	ax			; discard ds pushed on stack
  5704 0000086E BE[CD11]                	mov	si,OldInstanceJunk 
  5705                                  					; ds:si = instance table
  5706 00000871 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5707                                  	;jmp	next_i2f
  5708                                  	; 15/12/2022
  5709 00000874 EBC5                    	jmp	short next_i2f
  5710                                  
  5711                                  Win386_Leaving:
  5712                                  	; 15/12/2022
  5713 00000876 F6C201                  	test 	dl,1
  5714                                  	;test	dx,1			; is this really win386?
  5715                                  	;jz	short Win386_Leaving_c
  5716                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5717                                  	; 15/12/2022
  5718 00000879 75BF                    	jnz	short win_nexti2f	
  5719                                  
  5720                                  Win386_Leaving_c:
  5721                                  					; M062 - Start
  5722 0000087B 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5723                                  					;    up.
  5724 00000880 7523                    	jne	short noumb		; N: not saved 
  5725 00000882 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5726                                  					;    previously saved umb_head
  5727                                  	; 05/01/2024
  5728                                  	;push	ax ; (not necessary)
  5729 00000887 06                      	push	es
  5730 00000888 51                      	push	cx
  5731 00000889 56                      	push	si
  5732 0000088A 57                      	push	di
  5733                                  
  5734                                  	;mov	ax,[UMB_HEAD]
  5735                                  	;mov	es,ax
  5736                                  	; 05/01/2024
  5737 0000088B 8E06[8C00]              	mov	es,[UMB_HEAD]
  5738 0000088F 31FF                    	xor	di,di			; es:di -> umb_head
  5739                                  
  5740 00000891 FC                      	cld
  5741                                  
  5742 00000892 BE[FA11]                	mov	si,UmbSave1
  5743 00000895 B90B00                  	mov	cx,11
  5744 00000898 F3A4                    	rep	movsb
  5745 0000089A BE[D50D]                	mov	si,UmbSave2
  5746                                  	;mov	cx,5
  5747                                  	; 18/12/2022
  5748 0000089D B105                    	mov	cl,5
  5749 0000089F F3A4                    	rep	movsb
  5750                                  
  5751 000008A1 5F                      	pop	di
  5752 000008A2 5E                      	pop	si
  5753 000008A3 59                      	pop	cx
  5754 000008A4 07                      	pop	es
  5755                                  	; 05/01/2024
  5756                                  	;pop	ax
  5757                                  noumb:					; M062 - End
  5758 000008A5 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5759 000008AA 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5760 000008AF EB89                    	jmp	short win_nexti2f
  5761                                  
  5762                                  ;	; 15/12/2022
  5763                                  ;	; Code to return Win386 2.xx instance table
  5764                                  ;OldWin386Init:
  5765                                  ;	pop	ax			; discard ds pushed on stack
  5766                                  ;	mov	si,OldInstanceJunk 
  5767                                  ;					; ds:si = instance table
  5768                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5769                                  ;	;jmp	next_i2f
  5770                                  ;	; 15/12/2022
  5771                                  ;	jmp	short _next_i2f
  5772                                  
  5773                                  Win386_Query:
  5774 000008B1 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5775 000008B4 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5776 000008B6 09C9                    	or	cx,cx			; is it an instance query?
  5777 000008B8 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5778 000008BA 41                      	inc	cx			; indicate that data is instanced
  5779                                  ;
  5780                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5781                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5782                                  ; M001;  
  5783                                  ; M001; OFFSETS STRUC
  5784                                  ; M001; 	Major_version	db	?
  5785                                  ; M001; 	Minor_version	db	?
  5786                                  ; M001; 	SaveDS		dw	?
  5787                                  ; M001; 	SaveBX		dw	?
  5788                                  ; M001; 	Indos		dw	?
  5789                                  ; M001; 	User_id		dw	?
  5790                                  ; M001; 	CritPatch	dw	?
  5791                                  ; M001; OFFSETS	ENDS
  5792                                  ; M001; 
  5793                                  ; M001; User_Id is the only variable really important for proper functioning  
  5794                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5795                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5796                                  ; M001; pass this table because Win386 depends on this table to get the 
  5797                                  ; M001; User_Id offset.
  5798                                  ; M001; 
  5799 000008BB BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5800 000008BE 1E                      	push	ds			; M001
  5801 000008BF 07                      	pop	es			; es:bx points at offset table ; M001
  5802 000008C0 EB40                    	jmp	short PopIret		; M001
  5803                                  
  5804                                  ; 15/12/2022
  5805                                  ;	; Code to return Win386 2.xx instance table
  5806                                  ;OldWin386Init:
  5807                                  ;	pop	ax			; discard ds pushed on stack
  5808                                  ;	mov	si,OldInstanceJunk 
  5809                                  ;					; ds:si = instance table
  5810                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5811                                  ;	;jmp	next_i2f
  5812                                  ;	; 15/12/2022
  5813                                  ;	jmp	short _next_i2f
  5814                                  
  5815                                  dosmgr_func:
  5816 000008C2 49                      	dec	cx
  5817 000008C3 7435                    	jz	short win386_patch	; call to patch DOS
  5818 000008C5 49                      	dec	cx
  5819 000008C6 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5820 000008C8 49                      	dec	cx
  5821 000008C9 7439                    	jz	short win386_size	; get size of DOS data structures
  5822 000008CB 49                      	dec	cx
  5823 000008CC 7428                    	jz	short win386_inst	; instance more data
  5824                                  	;dec	cx
  5825                                  	;jnz	short PopIret		; no functions above this
  5826                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5827 000008CE E232                    	loop	PopIret
  5828                                  
  5829                                  	; Get DOS device driver size -- es:di points at device driver header
  5830                                  	; In DOS 4.x, the para before the device header contains an arena 
  5831                                  	; header for the driver.
  5832                                  
  5833 000008D0 8CC0                    	mov	ax,es			; ax = device header segment
  5834                                  
  5835                                  	; We check to see if we have a memory arena for this device driver. 
  5836                                  	; The way to do this would be to look at the previous para to see if
  5837                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5838                                  	; in the arena is the same as the device header segment. These two 
  5839                                  	; checks together should take care of all cases
  5840                                  
  5841 000008D2 48                      	dec	ax			; get arena header
  5842 000008D3 06                      	push	es
  5843 000008D4 8EC0                    	mov	es,ax			; arena header for device driver
  5844                                  
  5845 000008D6 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5846 000008DA 7517                    	jnz	short cantsize		; no, cant size this driver
  5847 000008DC 40                      	inc	ax			; get back device header segment
  5848 000008DD 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5849 000008E1 7510                    	jnz	short cantsize		; no, not a proper arena
  5850                                  
  5851 000008E3 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5852 000008E7 07                      	pop	es
  5853                                  
  5854                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5855                                  	; Speed is not critical and so we choose the shortest method 
  5856                                  	; -- use "mul"
  5857                                  
  5858 000008E8 BB1000                  	mov	bx,16
  5859 000008EB F7E3                    	mul	bx
  5860 000008ED 89C1                    	mov	cx,ax
  5861 000008EF 89D3                    	mov	bx,dx
  5862 000008F1 EB09                    	jmp	short win386_done	; return with device driver size
  5863                                  cantsize:
  5864 000008F3 07                      	pop	es
  5865 000008F4 31C0                    	xor	ax,ax
  5866                                  win386_inst:	; 05/01/2024
  5867 000008F6 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5868 000008F8 EB08                    	jmp	short PopIret		; return
  5869                                  
  5870                                  win386_patch:
  5871                                  	; dx contains bits marking the patches to be applied. We return 
  5872                                  	; the field with all bits set to indicate that all patches have been
  5873                                  	; done
  5874                                  
  5875 000008FA 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5876                                   	;jmp	short win386_done	; done, return
  5877                                  	; 15/12/2022
  5878                                  	; 15/12/2022
  5879                                  win386_done:
  5880 000008FC B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5881 000008FF BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5882                                  PopIret:
  5883 00000902 1F                      	pop	ds
  5884 00000903 CF                      	iret	
  5885                                  
  5886                                  win386_size:
  5887                                  	; Return the size of DOS data structures -- currently only CDS size
  5888                                  
  5889                                  	; 17/12/2022
  5890 00000904 F6C201                  	test	dl,1
  5891                                  	;test	dx,1			; check for CDS size bit
  5892 00000907 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5893                                  
  5894 00000909 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5895 0000090C EBEE                    	jmp	short win386_done	; return with the size
  5896                                  
  5897                                  ; 05/01/2024
  5898                                  %if 0
  5899                                  win386_inst:
  5900                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5901                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5902                                  	; this by returning a status of not previously instanced. The basic
  5903                                  	; structure of these things have not changed and so the current
  5904                                  	; DOSMGR code should be able to work it out
  5905                                  
  5906                                  	xor	dx,dx			; make sure dx has a not done value
  5907                                  	jmp	short PopIret		; skip done indication
  5908                                  %endif
  5909                                  
  5910                                  	; 15/12/2022
  5911                                  ;win386_done:
  5912                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5913                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5914                                  ;PopIret:
  5915                                  ;	pop	ds
  5916                                  ;	iret				; return back up the chain
  5917                                  
  5918                                  	; 15/12/2022
  5919                                  ;win_nexti2f:
  5920                                  	;pop	ds
  5921                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5922                                  
  5923                                  ;End WIN386 support
  5924                                  
  5925                                  ; 15/05/2019
  5926                                  
  5927                                  ;M044; Start of changes
  5928                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5929                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5930                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5931                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5932                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5933                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5934                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5935                                  ; last para of the Windows memory block and then restore this para on the
  5936                                  ; Windows swapin callout. 
  5937                                  
  5938                                  getwinlast:
  5939                                  	; 07/12/2022
  5940 0000090E 8B36[3003]              	mov	si,[CurrentPDB]
  5941 00000912 4E                      	dec	si
  5942 00000913 8EC6                    	mov	es,si
  5943 00000915 2603360300              	add	si,[es:3]
  5944 0000091A C3                      	retn
  5945                                  
  5946                                  ; 15/12/2022
  5947                                  %if 0
  5948                                  winold_swap:
  5949                                  	push	ds
  5950                                  	push	es
  5951                                  	push	si
  5952                                  	push	di
  5953                                  	push	cx
  5954                                  
  5955                                  	;getdseg <ds>			;ds = DOSDATA
  5956                                  	mov	ds,[cs:DosDSeg]
  5957                                  
  5958                                  	cmp	al,1			;swap Windows out call
  5959                                  	jne	short swapin		;no, check if Swap in call
  5960                                  	call	getwinlast
  5961                                  	push	ds
  5962                                  	pop	es
  5963                                  	mov	ds,si			;ds = memory arena of Windows
  5964                                  	xor	si,si
  5965                                  	mov	di,WinoldPatch1
  5966                                  	mov	cx,8
  5967                                  	cld
  5968                                  	push	cx
  5969                                  	rep	movsb			;save first 8 bytes
  5970                                  	pop	cx
  5971                                  	mov	di,WinoldPatch2
  5972                                  	rep	movsb			;save next 8 bytes
  5973                                  	jmp	short winold_done
  5974                                  swapin:
  5975                                  	cmp	al,2			;swap Windows in call?
  5976                                  	jne	short winold_done	;no, something else, pass it on
  5977                                  	call	getwinlast
  5978                                  	mov	es,si
  5979                                  	xor	di,di
  5980                                  	mov	si,WinoldPatch1
  5981                                  	mov	cx,8
  5982                                  	cld
  5983                                  	push	cx
  5984                                  	rep	movsb			;restore first 8 bytes
  5985                                  	pop	cx
  5986                                  	mov	si,WinoldPatch2
  5987                                  	rep	movsb			;restore next 8 bytes
  5988                                  winold_done:
  5989                                  	pop	cx
  5990                                  	pop	di
  5991                                  	pop	si
  5992                                  	pop	es
  5993                                  	pop	ds
  5994                                  	jmp	next_i2f		;chain on
  5995                                  
  5996                                  %endif
  5997                                  
  5998                                  ;M044; End of changes
  5999                                  
  6000                                  ; 15/05/2019
  6001                                  
  6002                                  DispatchDOS:
  6003 0000091B 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6004 00000920 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6005 00000925 50                      	PUSH	AX			; push index
  6006 00000926 55                      	PUSH	BP
  6007 00000927 89E5                    	MOV	BP,SP
  6008                                  		; stack looks like:
  6009                                  		;   0	BP
  6010                                  		;   2	DISPATCH
  6011                                  		;   4	TABLE
  6012                                  		;   6	RETURN
  6013                                  		;   8	LONG-RETURN
  6014                                  		;   C	FLAGS
  6015                                  		;   E	AX
  6016                                  	
  6017 00000929 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6018 0000092C 5D                      	POP	BP
  6019 0000092D E8F508                  	call	TableDispatch
  6020 00000930 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6021                                  
  6022                                  INT2F_etcetera:
  6023                                  	;entry	DosGetGroup
  6024                                  DosGetGroup:
  6025                                  	; MSDOS 3.3
  6026                                  	;push	cs
  6027                                  	;pop	ds
  6028                                  	;retn
  6029                                  
  6030                                  	; MSDOS 6.0
  6031                                  ;SR; Cannot use CS now
  6032                                  ;
  6033                                  ;	PUSH	CS
  6034                                  ;	POP	DS
  6035                                  
  6036                                  	; 04/11/2022
  6037                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6038                                  
  6039                                  	;getdseg <ds>
  6040 00000933 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6041 00000938 C3                      	retn
  6042                                  
  6043                                  	;entry	DOSInstall
  6044                                  DOSInstall:
  6045 00000939 B0FF                    	MOV	AL,0FFh
  6046 0000093B C3                      	retn
  6047                                  
  6048                                  ;ENDIF ; (*)
  6049                                  
  6050                                  
  6051                                  ; 15/05/2019 - Retro DOS v4.0
  6052                                  
  6053                                  ;------------------------------------------------------------------------
  6054                                  ;
  6055                                  ; Procedure Name : RW32_CONVERT
  6056                                  ;
  6057                                  ;Input: same as ABSDRD and ABSDWRT
  6058                                  ;	 ES:BP -> DPB
  6059                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6060                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6061                                  ;	 carry clear, parms ok
  6062                                  ;
  6063                                  ;------------------------------------------------------------------------
  6064                                  
  6065                                  	; 06/01/2024
  6066                                  RW32_CONVERT:
  6067 0000093C 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6068 0000093F 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6069 00000941 49                      	dec	cx ; *
  6070 00000942 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6071 00000943 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6072 00000944 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6073 00000948 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6074 0000094C 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6075 0000094F 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6076                                  	;INC	DL			;>32mb			;AN000;
  6077                                  	; 17/12/2022
  6078 00000951 42                      	inc	dx
  6079 00000952 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6080 00000954 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6081 00000956 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6082                                  letold:
  6083 00000958 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6084 00000959 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6085 0000095A 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6086                                  
  6087 0000095C 1E                      	push	ds
  6088                                  	;getdseg <ds>
  6089 0000095D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6090 00000962 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6091 00000968 1F                      	pop	ds
  6092                                  
  6093 00000969 F9                      	STC				;>32mb			;AN000;
  6094 0000096A C3                      	retn				;>32mb			;AN000;
  6095                                  
  6096                                  new32format:
  6097                                  	;mov	dx,[bx+2]
  6098 0000096B 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6099                                  
  6100 0000096E 1E                      	push	ds			; set up ds to DOSDATA
  6101                                  	;getdseg <ds>
  6102 0000096F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6103 00000974 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6104 00000978 1F                      	pop	ds
  6105                                  
  6106 00000979 8B17                    	mov	dx,[bx]
  6107                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6108                                  	;mov	cx,[bx+4]
  6109 0000097B 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6110                                  	;lds	bx,[bx+6]
  6111 0000097E C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6112                                  old_style:				;>32mb			;AN000;
  6113                                  	; 06/01/2024
  6114                                  	; cf=0
  6115                                  	;CLC				;>32mb			;AN000;
  6116 00000981 C3                      	retn				;>32mb			;AN000;
  6117                                  
  6118                                  ;------------------------------------------------------------------------
  6119                                  ;
  6120                                  ; Procedure Name : Fastxxx_Purge
  6121                                  ;
  6122                                  ; Input: None
  6123                                  ; Functions: Purge Fastopen/ Cache Buffers
  6124                                  ; Output: None
  6125                                  ;
  6126                                  ;------------------------------------------------------------------------
  6127                                  
  6128                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6129                                  
  6130                                  Fastxxx_Purge:
  6131 00000982 50                      	PUSH	AX			; save regs.	;AN000;
  6132 00000983 56                      	PUSH	SI						;AN000;
  6133 00000984 52                      	PUSH	DX						;AN000;
  6134                                  topen:
  6135 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6136                                  	;getdseg <ds>
  6137 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6138                                  
  6139 0000098B F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6140                                  					; fastopen installed ?	;AN000;
  6141 00000990 1F                      	pop	ds
  6142 00000991 740B                    	JZ	short nofast		; no			;AN000;
  6143 00000993 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6144                                  dofast:
  6145 00000995 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6146                                  	;;mov	dl,[es:bp+0]
  6147                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6148                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6149                                  	; 15/12/2022
  6150 00000997 268A5600                	mov	dl,[es:bp]
  6151                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6152 0000099B E86D1D                  	call	Fast_Dispatch
  6153                                  nofast:
  6154 0000099E 5A                      	POP	DX						;AN000;
  6155 0000099F 5E                      	POP	SI			; restore regs		;AN000;
  6156 000009A0 58                      	POP	AX			 			;AN000;
  6157 000009A1 C3                      	retn				; exit
  6158                                  
  6159                                  ;============================================================================
  6160                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6161                                  ;============================================================================
  6162                                  ; 29/04/2019 - Retro DOS v4.0
  6163                                  
  6164                                  ;include dossym.inc
  6165                                  ;include dosmac.inc
  6166                                  ;include doscntry.inc
  6167                                  
  6168                                  ; DOSCODE Segment
  6169                                  
  6170                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6171                                  ; ---------------------------------------------------------------------------
  6172                                  ;include divmes.inc
  6173                                  
  6174                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6175                                  ; -------------------------------------
  6176                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6177                                  
  6178                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6179                                  	;PUBLIC	DIVMES
  6180                                  
  6181 000009A2 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6181 000009AB 6F766572666C6F770D-
  6181 000009B4 0A                 
  6182                                  
  6183                                  	;PUBLIC	DivMesLen
  6184                                  DivMesLen:
  6185 000009B5 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6186                                  
  6187                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6188                                  ; -------------------------------------
  6189                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6190                                  
  6191                                  ; (MSDOS 6.0)
  6192                                  ; VxD not found error message
  6193                                  
  6194                                  NoVxDErrMsg:
  6195 000009B7 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6195 000009C0 686176652074686520-
  6195 000009C9 66696C652057494E41-
  6195 000009D2 32302E33383620696E-
  6195 000009DB 2074686520726F6F74-
  6195 000009E4 206F6620796F757220-
  6195 000009ED 626F6F742064726976-
  6195 000009F6 65                 
  6196 000009F7 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6196 00000A00 57696E646F77732069-
  6196 00000A09 6E20456E68616E6365-
  6196 00000A12 64204D6F64650D0A   
  6197                                  
  6198                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6199                                  
  6200                                  ; 13/05/2019 - Retro DOS v4.0
  6201                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6202                                  
  6203                                  ;include yesno.asm  (MNSDOS 6.0)
  6204                                  ; -------------------------------------
  6205                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6206                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6207                                  
  6208                                  ; This is for country Yes and No
  6209                                  
  6210 00000A1A 59                      NLS_YES:	db 'Y'
  6211 00000A1B 4E                      NLS_NO:		db 'N'
  6212 00000A1C 79                      NLS_yes2:	db 'y'
  6213 00000A1D 6E                      NLS_no2:	db 'n'
  6214                                  
  6215                                  ; ---------------------------------------------------------------------------
  6216                                  
  6217                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6219                                  
  6220                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6221                                  
  6222                                  ; The following two tables implement the current buffered input editing
  6223                                  ; routines. The tables are pairwise associated in reverse order for ease
  6224                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6225                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6226                                  
  6227                                  	;PUBLIC	CANCHAR
  6228                                  CANCHAR:
  6229 00000A1E 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6230                                  	
  6231                                  	;PUBLIC	ESCCHAR
  6232                                  ESCCHAR:
  6233 00000A1F 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6234                                  	
  6235                                  	;IF	NOT Rainbow
  6236                                  
  6237                                  ESCTAB:	; LABEL BYTE
  6238                                  
  6239                                  	;IF	IBM
  6240 00000A20 40                      	DB	64		; Ctrl-Z - F6
  6241 00000A21 4D                      	DB	77		; Copy one char - -->
  6242 00000A22 3B                      	DB	59		; Copy one char - F1
  6243 00000A23 53                      	DB	83		; Skip one char - DEL
  6244 00000A24 3C                      	DB	60		; Copy to char - F2
  6245 00000A25 3E                      	DB	62		; Skip to char - F4
  6246 00000A26 3D                      	DB	61		; Copy line - F3
  6247 00000A27 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6248 00000A28 3F                      	DB	63		; Reedit line (new template) - F5
  6249 00000A29 4B                      	DB	75		; Backspace - <--
  6250 00000A2A 52                      	DB	82		; Enter insert mode - INS (toggle)
  6251 00000A2B 52                      	DB	82		; Exit insert mode - INS (toggle)
  6252 00000A2C 41                      	DB	65		; Escape character - F7
  6253 00000A2D 41                      	DB	65		; End of table
  6254                                  	;ENDIF
  6255                                  
  6256                                  ESCEND: ; LABEL BYTE
  6257                                  
  6258                                  ESCTABLEN EQU ESCEND-ESCTAB
  6259                                  
  6260                                  ESCFUNC: ; LABEL WORD
  6261                                  	
  6262 00000A2E [1A14]                  	short_addr  GETCH	; Ignore the escape sequence
  6263 00000A30 [9714]                  	short_addr  TWOESC
  6264 00000A32 [8C15]                  	short_addr  EXITINS
  6265 00000A34 [8C15]                  	short_addr  ENTERINS
  6266 00000A36 [9214]                  	short_addr  BACKSP
  6267 00000A38 [7815]                  	short_addr  REEDIT
  6268 00000A3A [7F14]                  	short_addr  KILNEW
  6269 00000A3C [0E15]                  	short_addr  COPYLIN
  6270 00000A3E [4015]                  	short_addr  SKIPSTR
  6271 00000A40 [1415]                  	short_addr  COPYSTR
  6272 00000A42 [3715]                  	short_addr  SKIPONE
  6273 00000A44 [1915]                  	short_addr  COPYONE
  6274 00000A46 [1915]                  	short_addr  COPYONE
  6275 00000A48 [9315]                  	short_addr  CTRLZ
  6276                                  
  6277                                  	;ENDIF
  6278                                  
  6279                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6280                                  ; ---------------------------------------------------------------------------
  6281                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6282                                  
  6283                                  ; OEMFunction key is expected to process a single function
  6284                                  ;   key input from a device and dispatch to the proper
  6285                                  ;   routines leaving all registers UNTOUCHED.
  6286                                  ;
  6287                                  ; Inputs:   CS, SS are DOSGROUP
  6288                                  ; Outputs:  None. This function is expected to JMP to onw of
  6289                                  ;           the following labels:
  6290                                  ;
  6291                                  ;           GetCh       - ignore the sequence
  6292                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6293                                  ;           ExitIns     - toggle insert mode
  6294                                  ;           EnterIns    - toggle insert mode
  6295                                  ;           BackSp      - move backwards one space
  6296                                  ;           ReEdit      - reedit the line with a new template
  6297                                  ;           KilNew      - discard the current line and start from scratch
  6298                                  ;           CopyLin     - copy the rest of the template into the line
  6299                                  ;           SkipStr     - read the next character and skip to it in the template
  6300                                  ;           CopyStr     - read next char and copy from template to line until char
  6301                                  ;           SkipOne     - advance position in template one character
  6302                                  ;           CopyOne     - copy next character in template into line
  6303                                  ;           CtrlZ       - place a ^Z into the template
  6304                                  ; Registers that are allowed to be modified by this function are:
  6305                                  ;           AX, CX, BP
  6306                                  
  6307                                  ; 13/05/2019 - Retro DOS v4.0
  6308                                  ; -------------------------------------
  6309                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6310                                  
  6311                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6314                                  
  6315                                  OEMFunctionKey:
  6316 00000A4A E82F09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6317 00000A4D B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6318 00000A4F 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6319 00000A50 BF[200A]                	MOV     DI,ESCTAB		; offset of second byte table
  6320 00000A53 06                      	push	es
  6321 00000A54 0E                      	push	cs
  6322 00000A55 07                      	pop	es
  6323 00000A56 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6324 00000A58 07                      	pop	es
  6325 00000A59 5F                      	POP     DI                      ; restore DI
  6326 00000A5A D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6327 00000A5C 89CD                    	MOV     BP,CX                   ; move to indexable register
  6328                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6329 00000A5E 2EFFA6[2E0A]            	JMP	word [CS:BP+ESCFUNC]
  6330                                  
  6331                                  ;DOSCODE ENDS
  6332                                  	
  6333                                  ;============================================================================
  6334                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6335                                  ;============================================================================
  6336                                  ; Retro DOS v3.0 - 18/07/2018
  6337                                  
  6338                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6339                                  ;----------------------------------------------------------------------------
  6340                                  ; Retro DOS v2.0 - 13/03/2018
  6341                                  
  6342                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6343                                  
  6344                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6345                                  
  6346                                  ;**	$GET_DATE - Get Current Date
  6347                                  ;----------------------------------------
  6348                                  ;	ENTRY	none
  6349                                  ;	EXIT	(cx:dx) = current date
  6350                                  ;	USES	all
  6351                                  
  6352                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6353                                  
  6354                                  _$GET_DATE:	;System call 42
  6355                                  
  6356 00000A63 16                      	PUSH	SS
  6357 00000A64 1F                      	POP	DS
  6358 00000A65 E8B700                  	CALL	READTIME	;Check for rollover to next day
  6359 00000A68 A1[5203]                	MOV	AX,[YEAR]
  6360                                  
  6361                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6362                                  
  6363 00000A6B 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6364 00000A6F E813FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6365                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6366 00000A72 895C06                  	MOV	[SI+user_env.user_DX],BX
  6367 00000A75 05BC07                  	ADD	AX,1980		;Put bias back
  6368                                  	;MOV	[SI+4],AX	;CX=year
  6369 00000A78 894404                  	MOV	[SI+user_env.user_CX],AX
  6370 00000A7B 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6371                                  RET20:	; 05/11/2022
  6372                                  RET24:	; 18/12/2022
  6373 00000A7F C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_DATE - Set Current Date
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = current date
  6378                                  ;	EXIT	(al) = -1 iff bad date
  6379                                  ;		(al) = 0 if ok
  6380                                  ;	USES	all
  6381                                  
  6382                                  _$SET_DATE:	;System call 43
  6383                                  
  6384 00000A80 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6385 00000A82 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6386                                  	;JC	SHORT RET24	;Error if not big enough
  6387                                  	; 05/11/2022
  6388 00000A86 72F7                    	jc	short RET20
  6389 00000A88 83F977                  	CMP	CX,119		;Year must be less than 2100
  6390 00000A8B 77F2                    	JA	SHORT RET24
  6391 00000A8D 08F6                    	OR	DH,DH
  6392                                  	;JZ	SHORT RET24
  6393                                   	; 05/11/2022
  6394 00000A8F 74EE                    	jz	short RET20
  6395 00000A91 08D2                    	OR	DL,DL
  6396                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6397                                  	; 05/11/2022
  6398 00000A93 74EA                    	jz	short RET20
  6399 00000A95 80FE0C                  	CMP	DH,12		;Check against max. month
  6400 00000A98 77E5                    	JA	SHORT RET24
  6401 00000A9A 16                      	PUSH	SS
  6402 00000A9B 1F                      	POP	DS
  6403                                  	;CALL	DODATE
  6404                                  	; 18/12/2022
  6405 00000A9C E91301                  	jmp	DODATE
  6406                                  ;RET24:  
  6407                                  	;RETN
  6408                                  
  6409                                  ;**	$GET_TIME - Get Current Time
  6410                                  ;----------------------------------------
  6411                                  ;	ENTRY	none
  6412                                  ;	EXIT	(cx:dx) = current time
  6413                                  ;	USES	all
  6414                                  
  6415                                  _$GET_TIME:			;System call 44
  6416                                  
  6417 00000A9F 16                      	PUSH	SS
  6418 00000AA0 1F                      	POP	DS
  6419 00000AA1 E87B00                  	CALL	READTIME
  6420 00000AA4 E8DEF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6421                                  	;MOV	[SI+6],DX
  6422 00000AA7 895406                  	MOV	[SI+user_env.user_DX],DX
  6423                                  	;MOV	[SI+4],CX
  6424 00000AAA 894C04                  	MOV	[SI+user_env.user_CX],CX
  6425                                  set_time_ok:	; 06/01/2024
  6426 00000AAD 30C0                    	XOR	AL,AL
  6427                                  RET26:  
  6428 00000AAF C3                      	RETN
  6429                                  
  6430                                  ;**	$SET_TIME - Set Current Time
  6431                                  ;----------------------------------------
  6432                                  ;	ENTRY	(cx:dx) = time
  6433                                  ;	EXIT	(al) = 0 if 0k
  6434                                  ;		(al) = -1 if invalid
  6435                                  ;	USES	ALL
  6436                                  
  6437                                  _$SET_TIME:			;System call 45
  6438                                  
  6439 00000AB0 B0FF                    	MOV	AL,-1		;Flag in case of error
  6440 00000AB2 80FD18                  	CMP	CH,24		;Check hours
  6441 00000AB5 73F8                    	JAE	SHORT RET26
  6442 00000AB7 80F93C                  	CMP	CL,60		;Check minutes
  6443 00000ABA 73F3                    	JAE	SHORT RET26
  6444 00000ABC 80FE3C                  	CMP	DH,60		;Check seconds
  6445 00000ABF 73EE                    	JAE	SHORT RET26
  6446 00000AC1 80FA64                  	CMP	DL,100		;Check 1/100's
  6447 00000AC4 73E9                    	JAE	SHORT RET26
  6448 00000AC6 51                      	PUSH	CX
  6449 00000AC7 52                      	PUSH	DX
  6450 00000AC8 16                      	PUSH	SS
  6451 00000AC9 1F                      	POP	DS
  6452 00000ACA BB[B603]                	MOV	BX,TIMEBUF
  6453 00000ACD B90600                  	MOV	CX,6
  6454                                  	;XOR	DX,DX
  6455                                  	;MOV	AX,DX
  6456 00000AD0 31C0                    	xor	ax,ax
  6457 00000AD2 99                      	cwd	; 06/01/2024
  6458 00000AD3 53                      	PUSH	BX
  6459 00000AD4 E81A3C                  	CALL	SETREAD
  6460 00000AD7 1E                      	PUSH	DS
  6461 00000AD8 C536[2E00]              	LDS	SI,[BCLOCK]
  6462 00000ADC E89C3B                  	CALL	DEVIOCALL2	;Get correct day count
  6463 00000ADF 1F                      	POP	DS
  6464 00000AE0 5B                      	POP	BX
  6465 00000AE1 E8403C                  	CALL	SETWRITE
  6466 00000AE4 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6467 00000AE8 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6468 00000AEC C536[2E00]              	LDS	SI,[BCLOCK]
  6469 00000AF0 E8883B                  	CALL	DEVIOCALL2	;Set the time
  6470                                  	; 06/01/2024
  6471                                  	;XOR	AL,AL
  6472                                  	;RETN
  6473 00000AF3 EBB8                    	jmp	short set_time_ok
  6474                                  
  6475                                  ; 11/07/2018 - Retro DOS v3.0
  6476                                  ; Retro DOS v2.0 - 14/03/2018
  6477                                  
  6478                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6479                                  
  6480                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6481                                  ;----------------------------------------------------------
  6482                                  ; Date16 returns the current date in AX, current time in DX
  6483                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6484                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6485                                  
  6486                                  DATE16:
  6487                                  	
  6488                                  ;M048	Context DS
  6489                                  ;
  6490                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6491                                  ; is DOSDATA
  6492                                  
  6493                                  	;push	ss
  6494                                  	;pop	ds
  6495                                  
  6496                                  	;getdseg <ds>		; M048
  6497                                  
  6498                                  	; 13/05/2019 - Retro DOS v4.0
  6499 00000AF5 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6500                                  
  6501 00000AFA 51                      	PUSH	CX
  6502 00000AFB 06                      	PUSH	ES
  6503 00000AFC E82000                  	CALL	READTIME
  6504 00000AFF 07                      	POP	ES
  6505 00000B00 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6506 00000B02 D0E1                    	SHL	CL,1
  6507 00000B04 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6508 00000B06 D1E1                    	SHL	CX,1
  6509 00000B08 D1E1                    	SHL	CX,1
  6510 00000B0A D0EE                    	SHR	DH,1		;Count every two seconds
  6511 00000B0C 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6512 00000B0E 89CA                    	MOV	DX,CX
  6513                                  
  6514                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6515                                  
  6516 00000B10 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6517 00000B13 B104                    	MOV	CL,4
  6518 00000B15 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6519 00000B17 D1E0                    	SHL	AX,1
  6520 00000B19 59                      	POP	CX
  6521 00000B1A 0A06[5003]              	OR	AL,[DAY]
  6522                                  RET21:
  6523 00000B1E C3                      	RETN
  6524                                  
  6525                                  ;----------------------------------------------------------
  6526                                  
  6527                                  READTIME:
  6528                                  
  6529                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6530                                  ;Uses AX, CX, DX.
  6531                                  
  6532 00000B1F C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6533 00000B25 56                      	PUSH	SI
  6534 00000B26 53                      	PUSH	BX
  6535                                  
  6536 00000B27 BB[B603]                	MOV	BX,TIMEBUF
  6537                                  
  6538 00000B2A B90600                  	MOV	CX,6
  6539                                  	;XOR	DX,DX
  6540                                  	;MOV	AX,DX
  6541                                  	; 06/01/2024
  6542 00000B2D 31C0                    	xor	ax,ax
  6543 00000B2F 99                      	cwd
  6544 00000B30 E8BE3B                  	CALL	SETREAD
  6545 00000B33 1E                      	PUSH	DS
  6546 00000B34 C536[2E00]              	LDS	SI,[BCLOCK]
  6547 00000B38 E8403B                  	CALL	DEVIOCALL2	;Get correct date and time
  6548 00000B3B 1F                      	POP	DS
  6549 00000B3C 5B                      	POP	BX
  6550 00000B3D 5E                      	POP	SI
  6551 00000B3E A1[B603]                	MOV	AX,[TIMEBUF]
  6552 00000B41 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6553 00000B45 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6554 00000B49 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6555                                  	;JZ	SHORT RET22
  6556 00000B4D 74CF                    	JZ	SHORT RET21 ; 18/07/2018
  6557                                  	;cmp	ax,43830
  6558 00000B4F 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6559 00000B52 733D                    	JAE	SHORT RET22	;Ignore if too large
  6560 00000B54 A3[5403]                	MOV	[DAYCNT],AX
  6561 00000B57 56                      	PUSH	SI
  6562 00000B58 51                      	PUSH	CX
  6563 00000B59 52                      	PUSH	DX		;Save time
  6564 00000B5A 31D2                    	XOR	DX,DX
  6565                                  	;mov	cx,1461
  6566 00000B5C B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6567 00000B5F F7F1                    	DIV	CX		;Compute number of 4-year units
  6568 00000B61 D1E0                    	SHL	AX,1
  6569 00000B63 D1E0                    	SHL	AX,1
  6570 00000B65 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6571 00000B67 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6572                                  
  6573 00000B69 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6574                                  
  6575 00000B6C E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6576 00000B6F D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6577 00000B71 7304                    	JNC	SHORT SK	;Extra half-year?
  6578 00000B73 81C2C800                	ADD	DX,200
  6579                                  SK:
  6580 00000B77 E82200                  	CALL	SETYEAR
  6581 00000B7A B101                    	MOV	CL,1		;At least at first month in year
  6582                                  
  6583 00000B7C BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6584                                  	
  6585 00000B7F E81000                  	CALL	DSLIDE		;Find out which month we're in
  6586 00000B82 880E[5103]              	MOV	[MONTH],CL
  6587 00000B86 42                      	INC	DX		;Remainder is day of month (start with one)
  6588 00000B87 8816[5003]              	MOV	[DAY],DL
  6589 00000B8B E89400                  	CALL	WKDAY		;Set day of week
  6590 00000B8E 5A                      	POP	DX
  6591 00000B8F 59                      	POP	CX
  6592 00000B90 5E                      	POP	SI
  6593                                  RET22:  
  6594 00000B91 C3                      	RETN
  6595                                  
  6596                                  ;----------------------------------------------------------
  6597                                  
  6598                                  DSLIDE:
  6599                                  	;MOV	AH,0
  6600                                  	; 06/01/2024
  6601                                  	; (AH = 0)
  6602                                  DSLIDE1:
  6603 00000B92 AC                      	LODSB			;Get count of days
  6604 00000B93 39C2                    	CMP	DX,AX		;See if it will fit
  6605                                  	;JB	SHORT RET23	;If not, done
  6606 00000B95 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6607 00000B97 29C2                    	SUB	DX,AX
  6608 00000B99 41                      	INC	CX		;Count one more month/year
  6609 00000B9A EBF6                    	JMP	SHORT DSLIDE1
  6610                                  
  6611                                  ;----------------------------------------------------------
  6612                                  
  6613                                  SETYEAR:
  6614                                  
  6615                                  ;Set year with value in CX. Adjust length of February for this year.
  6616                                  
  6617                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6618                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6619                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6620                                  ;	preserve DS as CHKYR is also called as a routine.
  6621                                  
  6622                                  	; MSDOS 6.0 (18/07/2018) ; *
  6623                                  
  6624                                  	;GETDSEG DS
  6625                                  
  6626                                  	;PUSH	CS  ; *
  6627                                  	;POP	DS  ; *
  6628                                  
  6629                                  	; 13/05/2019 - Retro DOS v4.0
  6630 00000B9C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6631                                  
  6632                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6633                                  	; 05/11/2022 
  6634                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6635                                  
  6636 00000BA1 880E[5203]              	MOV	[YEAR],CL
  6637                                  CHKYR:
  6638 00000BA5 F6C103                  	TEST	CL,3		;Check for leap year
  6639 00000BA8 B01C                    	MOV	AL,28
  6640 00000BAA 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6641 00000BAC FEC0                    	INC	AL		;Add leap day
  6642                                  SAVFEB:
  6643 00000BAE A2[1D0D]                	mov	[february],al
  6644                                  	;MOV	[MONTAB+1],AL	;Store for February
  6645                                  RET23:  
  6646 00000BB1 C3                      	RETN
  6647                                  
  6648                                  ;----------------------------------------------------------
  6649                                  
  6650                                  DODATE:
  6651 00000BB2 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6652 00000BB5 88F0                    	MOV	AL,DH
  6653                                  
  6654 00000BB7 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6655                                  
  6656 00000BBA D7                      	XLAT			;Look up days in month
  6657 00000BBB 38D0                    	CMP	AL,DL
  6658 00000BBD B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6659                                  	;JB	SHORT RET25	;Error if too many days
  6660 00000BBF 72F0                    	jb	short RET23 ; 18/07/2018
  6661 00000BC1 E8D8FF                  	CALL	SETYEAR
  6662                                  ;
  6663                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6664                                  ;
  6665 00000BC4 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6666 00000BC8 D1E9                    	SHR	CX,1
  6667 00000BCA D1E9                    	SHR	CX,1
  6668                                  	;mov	ax,1461
  6669 00000BCC B8B505                  	MOV	AX,FOURYEARS
  6670 00000BCF 89D3                    	MOV	BX,DX
  6671 00000BD1 F7E1                    	MUL	CX
  6672 00000BD3 8A0E[5203]              	MOV	CL,[YEAR]
  6673 00000BD7 80E103                  	AND	CL,3
  6674                                  
  6675 00000BDA BE[140D]                	MOV	SI,YRTAB
  6676                                  
  6677 00000BDD 89C2                    	MOV	DX,AX
  6678 00000BDF D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6679 00000BE1 E85100                  	CALL	DSUM		;Add up the days in each year
  6680 00000BE4 88F9                    	MOV	CL,BH		;Month of year
  6681                                  
  6682 00000BE6 BE[1C0D]                	MOV	SI,MONTAB
  6683                                  
  6684 00000BE9 49                      	DEC	CX		;Account for months starting with one
  6685 00000BEA E84800                  	CALL	DSUM		;Add up days in each month
  6686 00000BED 88D9                    	MOV	CL,BL		;Day of month
  6687 00000BEF 49                      	DEC	CX		;Account for days starting with one
  6688 00000BF0 01CA                    	ADD	DX,CX		;Add in to day total
  6689 00000BF2 92                      	XCHG	AX,DX		;Get day count in AX
  6690 00000BF3 A3[5403]                	MOV	[DAYCNT],AX
  6691 00000BF6 56                      	PUSH	SI
  6692 00000BF7 53                      	PUSH	BX
  6693 00000BF8 50                      	PUSH	AX
  6694                                  
  6695 00000BF9 BB[B603]                	MOV	BX,TIMEBUF
  6696                                  
  6697 00000BFC B90600                  	MOV	CX,6
  6698                                  	;XOR	DX,DX
  6699                                  	;MOV	AX,DX
  6700                                  	; 06/01/2024
  6701 00000BFF 31C0                    	xor	ax,ax
  6702 00000C01 99                      	cwd
  6703 00000C02 53                      	PUSH	BX
  6704 00000C03 E8EB3A                  	CALL	SETREAD
  6705                                  
  6706 00000C06 1E                      	PUSH	DS
  6707 00000C07 C536[2E00]              	LDS	SI,[BCLOCK]
  6708 00000C0B E86D3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6709 00000C0E 1F                      	POP	DS
  6710 00000C0F 5B                      	POP	BX
  6711 00000C10 E8113B                  	CALL	SETWRITE
  6712 00000C13 8F06[B603]              	POP	WORD [TIMEBUF]
  6713 00000C17 1E                      	PUSH	DS
  6714 00000C18 C536[2E00]              	LDS	SI,[BCLOCK]
  6715 00000C1C E85C3A                  	CALL	DEVIOCALL2	;Set the date
  6716 00000C1F 1F                      	POP	DS
  6717 00000C20 5B                      	POP	BX
  6718 00000C21 5E                      	POP	SI
  6719                                  WKDAY:
  6720 00000C22 A1[5403]                	MOV	AX,[DAYCNT]
  6721 00000C25 31D2                    	XOR	DX,DX
  6722 00000C27 B90700                  	MOV	CX,7
  6723 00000C2A 40                      	INC	AX
  6724 00000C2B 40                      	INC	AX		;First day was Tuesday
  6725 00000C2C F7F1                    	DIV	CX		;Compute day of week
  6726 00000C2E 8816[5603]              	MOV	[WEEKDAY],DL
  6727 00000C32 30C0                    	XOR	AL,AL		;Flag OK
  6728                                  RET25:
  6729 00000C34 C3                      	RETN
  6730                                  
  6731                                  ;----------------------------------------------------------
  6732                                  
  6733                                  ;**	DSUM - Compute the sum of a string of bytes
  6734                                  ;
  6735                                  ;	ENTRY	(cx) = byte count
  6736                                  ;		(ds:si) = byte address
  6737                                  ;		(dx) = sum register, initialized by caller
  6738                                  ;	EXIT	(dx) updated
  6739                                  ;	USES	ax, cx, dx, si, flags
  6740                                  
  6741                                  DSUM:
  6742 00000C35 B400                    	MOV	AH,0
  6743 00000C37 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6744                                  	;JCXZ	RET25 ; 18/07/2018
  6745                                  DSUM1:
  6746 00000C39 AC                      	LODSB
  6747 00000C3A 01C2                    	ADD	DX,AX
  6748 00000C3C E2FB                    	LOOP	DSUM1
  6749                                  DSUM9:
  6750 00000C3E C3                      	RETN
  6751                                  
  6752                                  ;============================================================================
  6753                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6754                                  ;============================================================================
  6755                                  ; 29/04/2019 - Retro DOS v4.0
  6756                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6757                                  
  6758                                  ; 12/03/2018 - Retro DOS v2.0 
  6759                                  
  6760                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6761                                  ;NAME	GETSET
  6762                                  
  6763                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6764                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6765                                  
  6766                                  ;USERNUM:
  6767                                  ;	DW	0			; 24 bit user number
  6768                                  ;       DB      0
  6769                                  ;;	IF      IBM
  6770                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6771                                  ;;	ELSE
  6772                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6773                                  ;;	ENDIF
  6774                                  
  6775                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6776                                  ;; 08/07/2018 - Retro DOS v3.0
  6777                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6778                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6779                                  
  6780                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6781                                  ;----------------------------------------------------------------------------
  6782                                  
  6783                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6784                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6785                                  
  6786                                  _$GET_VERSION:
  6787                                  
  6788                                  ; Inputs:
  6789                                  ;       None
  6790                                  ; Function:
  6791                                  ;       Return MS-DOS version number
  6792                                  ; Outputs:
  6793                                  ;       OEM number in BH
  6794                                  ;       User number in BL:CX (24 bits)
  6795                                  ;       Version number as AL.AH in binary
  6796                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6797                                  
  6798                                  ; MSDOS 6.0
  6799                                  ;
  6800                                  ;	Fake_Count is used to lie about the version numbers to support
  6801                                  ;	old binarys. See ms_table.asm for more info.
  6802                                  ;
  6803                                  ;		if input al = 00
  6804                                  ;		  (bh) = OEM number			
  6805                                  ;		else if input al = 01
  6806                                  ;		  (bh) = version flags
  6807                                  ;		 
  6808                                  ;		       	 bits 0-2 = DOS internal revision
  6809                                  ;		       	 bits 3-7 = DOS type flags
  6810                                  ;		              bit 3    = DOS is in ROM
  6811                                  ;		              bit 4    = DOS in in HMA
  6812                                  ;		              bits 5-7 = reserved
  6813                                  ;               M007 change - only bit 3 is now valid. Other bits
  6814                                  ;               are 0 when AL = 1
  6815                                  
  6816                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6817 00000C3F 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6818 00000C44 8CDB                    	mov	bx, ds
  6819                                  
  6820                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6821                                  	;--------------------------------------
  6822                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6823                                  
  6824 00000C46 16                              PUSH    SS
  6825 00000C47 1F                              POP     DS
  6826                                          
  6827                                  	; 06/01/2024
  6828                                  	;MOV	BX,[USERNUM+2]
  6829                                          ;MOV	CX,[USERNUM]
  6830                                  
  6831                                  	; 13/05/2019 - Retro DOS v4.0
  6832                                  
  6833                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6834                                  	;DOS flags
  6835                                  
  6836 00000C48 3C01                    	cmp	AL,1
  6837 00000C4A 7502                    	jne	short Norm_Vers
  6838                                  
  6839                                  ;ifdef ROMDOS
  6840                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6841                                  ;				(DOSINROM = 8)
  6842                                  ;else
  6843 00000C4C 30FF                            xor     bh,bh		; Otherwise return 0
  6844                                  ;endif				;M007 end
  6845                                  
  6846                                  Norm_Vers:
  6847                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6848                                  
  6849                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6850                                  	; 13/05/2019 - Retro DOS v4.0
  6851 00000C4E 1E                      	push	ds		; Get the version number from the
  6852 00000C4F 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6853                                  	;mov	ax,[40h]
  6854 00000C53 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6855                                  	; 07/12/2022
  6856 00000C56 1F                      	pop	ds
  6857 00000C57 E82BF8                  	call	Get_User_Stack
  6858                                  				; Put values for return registers
  6859                                  				; in the proper place on the user's	 
  6860                                  				; stack addressed by DS:SI
  6861                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6862                                  gdrvfspc_ret:
  6863                                          ;MOV	[SI+user_env.user_AX],AX
  6864 00000C5A 8904                            MOV	[SI],AX
  6865                                          ;MOV	[SI+4],CX
  6866 00000C5C 894C04                  	mov	[SI+user_env.user_CX],CX
  6867                                  set_user_bx:
  6868                                  	;MOV	[SI+2],BX
  6869 00000C5F 895C02                  	mov	[SI+user_env.user_BX],BX
  6870                                  
  6871 00000C62 C3                      	RETN
  6872                                  
  6873                                  ; 18/07/2018 - Retro DOS v3.0
  6874                                  
  6875                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6876                                  ;----------------------------------------------------------------------------
  6877                                  
  6878                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6879                                  ;
  6880                                  ;	ENTRY	none
  6881                                  ;	EXIT	(al) = value of VERIFY flag
  6882                                  ;	USES	all
  6883                                  
  6884                                  
  6885                                  _$GET_VERIFY_ON_WRITE:
  6886                                  
  6887                                  ;hkn; SS override
  6888 00000C63 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6889 00000C67 C3                      	retn
  6890                                  
  6891                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6892                                  ;
  6893                                  ;	ENTRY	(al) = value of VERIFY flag
  6894                                  ;	EXIT	none
  6895                                  ;	USES	all
  6896                                  
  6897                                  _$SET_VERIFY_ON_WRITE:
  6898                                  
  6899 00000C68 2401                    	AND	AL,1
  6900                                  ;hkn; SS override
  6901 00000C6A 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6902                                  RET27:	; 18/07/2018
  6903 00000C6E C3                      	retn
  6904                                  
  6905                                  ; 19/07/2018 - Retro DOS v3.0
  6906                                  
  6907                                  ;BREAK <$International - return country-dependent information>
  6908                                  ;----------------------------------------------------------------------------
  6909                                  ;
  6910                                  ; Procedure Name : $INTERNATIONAL
  6911                                  ;
  6912                                  ; Inputs:
  6913                                  ;	MOV	AH,International
  6914                                  ;	MOV	AL,country	(al = 0 => current country)
  6915                                  ;      [MOV	BX,country]
  6916                                  ;	LDS	DX,block
  6917                                  ;	INT	21
  6918                                  ; Function:
  6919                                  ;	give users an idea of what country the application is running
  6920                                  ; Outputs:
  6921                                  ;	IF DX != -1 on input (get country)
  6922                                  ;	  AL = 0 means return current country table.
  6923                                  ;	  0<AL<0FFH means return country table for country AL
  6924                                  ;	  AL = 0FF means return country table for country BX
  6925                                  ;	  No Carry:
  6926                                  ;	     Register BX will contain the 16-bit country code.
  6927                                  ;	     Register AL will contain the low 8 bits of the country code.
  6928                                  ;	     The block pointed to by DS:DX is filled in with the information
  6929                                  ;	     for the particular country.
  6930                                  ;		BYTE  Size of this table excluding this byte and the next
  6931                                  ;		BYTE  Country code represented by this table
  6932                                  ;			A sequence of n bytes, where n is the number specified
  6933                                  ;			by the first byte above and is not > internat_block_max,
  6934                                  ;			in the correct order for being returned by the
  6935                                  ;			INTERNATIONAL call as follows:
  6936                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6937                                  ;		5 BYTE	Currency symbol null terminated
  6938                                  ;		2 BYTE	thousands separator null terminated
  6939                                  ;		2 BYTE	Decimal point null terminated
  6940                                  ;		2 BYTE	Date separator null terminated
  6941                                  ;		2 BYTE	Time separator null terminated
  6942                                  ;		1 BYTE	Bit field.  Currency format.
  6943                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6944                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6945                                  ;		1 BYTE	No. of significant decimal digits in currency
  6946                                  ;		1 BYTE	Bit field.  Time format.
  6947                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6948                                  ;		DWORD	Call address of case conversion routine
  6949                                  ;		2 BYTE	Data list separator null terminated.
  6950                                  ;	  Carry:
  6951                                  ;	     Register AX has the error code.
  6952                                  ;	IF DX = -1 on input (set current country)
  6953                                  ;	  AL = 0 is an error
  6954                                  ;	  0<AL<0FFH means set current country to country AL
  6955                                  ;	  AL = 0FF means set current country to country BX
  6956                                  ;	  No Carry:
  6957                                  ;	    Current country SET
  6958                                  ;	    Register AL will contain the low 8 bits of the country code.
  6959                                  ;	  Carry:
  6960                                  ;	     Register AX has the error code.
  6961                                  ;-----------------------------------------------------------------------------
  6962                                  
  6963                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6964                                  
  6965                                  ; 13/05/2019 - Retro DOS v4.0
  6966                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6967                                  
  6968                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6969                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6970                                  
  6971                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6972                                  	 
  6973 00000C6F 3CFF                    	CMP	AL,0FFH
  6974 00000C71 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6975 00000C73 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6976 00000C75 30FF                    	XOR	BH,BH
  6977                                  BX_HAS_CODE:
  6978 00000C77 1E                      	PUSH	DS
  6979 00000C78 07                      	POP	ES
  6980 00000C79 52                      	PUSH	DX
  6981 00000C7A 5F                      	POP	DI			; User buffer to ES:DI
  6982                                  
  6983                                  ;hkn; SS is DOSDATA
  6984                                  ;	context DS
  6985                                  
  6986 00000C7B 16                      	push	ss
  6987 00000C7C 1F                      	pop	ds
  6988                                  
  6989 00000C7D 83FFFF                  	CMP	DI,-1
  6990 00000C80 745D                    	JZ	short international_set
  6991 00000C82 09DB                    	OR	BX,BX
  6992 00000C84 7505                    	JNZ	short international_find
  6993                                  
  6994                                  ;hkn; country_cdpg is in DOSDATA segment.
  6995 00000C86 BE[0512]                	MOV	SI,COUNTRY_CDPG
  6996                                  
  6997 00000C89 EB39                    	JMP	SHORT international_copy
  6998                                  
  6999                                  international_find:
  7000                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7001                                  	; 06/01/2024
  7002 00000C8B 31ED                    	xor	bp,bp ; 0
  7003 00000C8D E80A00                  	CALL	international_get
  7004 00000C90 7255                    	JC	short errtn
  7005                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7006                                  	; 06/01/2024
  7007 00000C92 09DB                    	or	bx,bx
  7008 00000C94 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7009 00000C96 89D3                    	MOV	BX,DX			 ; put country back
  7010 00000C98 EB3A                    	JMP	SHORT international_ok3
  7011                                  
  7012                                  international_get:
  7013 00000C9A BE[0512]                	MOV	SI,COUNTRY_CDPG
  7014                                  
  7015                                  ;hkn; country_cdpg is in DOSDATA segment.
  7016                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7017                                  
  7018                                  	; MSDOS 3.3
  7019                                  	;;cmp	bx,[SI+63h]
  7020                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7021                                  	;jz	short RET27
  7022                                  
  7023                                  	; 13/05/2019 - Retro DOS v4.0
  7024                                  
  7025                                  	; MSDOS 6.0
  7026                                  	;cmp	bx,[ss:si+68h]
  7027 00000C9D 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7028 00000CA1 74CB                    	jz	short RET27			; return if equal
  7029                                  
  7030 00000CA3 89DA                    	MOV	DX,BX
  7031 00000CA5 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7032                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7033 00000CA7 B80014                  	mov	ax,1400h
  7034 00000CAA CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7035                                  			; Return: AL = 00h not installed, OK to install
  7036                                  			; 01h not installed, not OK
  7037                                  			; FFh installed
  7038 00000CAC 3CFF                    	CMP	AL,0FFH
  7039 00000CAE 7510                    	JNZ	short interr		; not in memory
  7040                                  	
  7041                                  	; 06/01/2024
  7042 00000CB0 B80314                  	mov	ax,1403h		; set country info
  7043                                  
  7044                                  	;cmp	bp,0
  7045 00000CB3 09ED                    	or	bp,bp			; GetCntry ?
  7046 00000CB5 7501                    	JNZ	short stcdpg
  7047                                  	
  7048                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7049                                  	;mov	ax,1404h
  7050 00000CB7 40                      	inc	ax	; AX = 1404h ; get country info
  7051                                  
  7052                                  	; 06/01/2024
  7053                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7054                                  	;		; BX = code page, DX = country code,
  7055                                  	;		; DS:SI -> internal code page structure
  7056                                  	;		; ES:DI -> user buffer
  7057                                  	;		; Return: AL = status
  7058                                  	;
  7059                                  	;JMP	short chkok
  7060                                  	
  7061                                  	;nop
  7062                                  
  7063                                  stcdpg:
  7064                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7065                                  	; 06/01/2024
  7066                                  	;mov     ax,1403h
  7067                                  gscdpg:
  7068 00000CB8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7069                                  			; DS:SI -> internal code page structure
  7070                                  			; BX = code page, DX = country code
  7071                                  			; Return: AL = status
  7072                                  chkok:
  7073 00000CBA 08C0                    	or	al,al			; success ?
  7074                                  	;retz				; yes
  7075 00000CBC 74B0                    	jz	short RET27
  7076                                  
  7077                                  setcarry:
  7078 00000CBE F9                      	STC				; set carry
  7079 00000CBF C3                      	retn
  7080                                  interr:
  7081 00000CC0 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7082 00000CC2 EBFA                    	JMP	short setcarry
  7083                                  
  7084                                  international_copy:
  7085                                  
  7086                                  ;hkn; country_cdpg is in DOSDATA segment.
  7087                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7088                                  
  7089                                  	; MSDOS 3.3
  7090                                  	;;mov	bx,[SI+63h]
  7091                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7092                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7093                                  
  7094                                  	; 13/05/2019 - Retro DOS v4.0
  7095                                  
  7096                                  	; MSDOS 6.0
  7097                                  	;mov	bx,[ss:si+68h]
  7098 00000CC4 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7099 00000CC8 BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7100                                  
  7101                                  	;mov	cx,24
  7102 00000CCB B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7103                                  
  7104                                  	; MSDOS 6.0
  7105                                  
  7106                                  ;hkn;	must set up DS to SS so that international info can be copied
  7107                                  	
  7108 00000CCE 1E                      	push	ds
  7109                                  
  7110 00000CCF 16                      	push	ss			; cs -> ss
  7111 00000CD0 1F                      	pop	ds
  7112                                  
  7113 00000CD1 F3A4                    	REP	MOVSB			; copy country info
  7114                                  
  7115                                  	; MSDOS 6.0
  7116                                  
  7117 00000CD3 1F                      	pop	ds	;hkn;	restore ds
  7118                                  
  7119                                  international_ok3:
  7120 00000CD4 E8AEF7                  	call	Get_User_Stack
  7121                                  ;ASSUME	DS:NOTHING
  7122                                  	;MOV	[SI+2],BX
  7123 00000CD7 895C02                  	MOV	[SI+user_env.user_BX],BX
  7124                                  international_ok:
  7125 00000CDA 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7126                                  ;SYS_RET_OK_jmp:
  7127                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7128                                  nono:	; 15/12/2022
  7129                                  SYS_RET_OK_jmp:
  7130 00000CDC E95CF9                  	jmp	SYS_RET_OK
  7131                                  
  7132                                  international_set:
  7133                                  
  7134                                  ;hkn; ASSUME	DS:DOSGROUP
  7135                                  ;ASSUME	DS:DOSDATA
  7136                                  
  7137 00000CDF BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7138 00000CE2 E8B5FF                  	CALL	international_get
  7139 00000CE5 73F3                    	JNC	short international_ok
  7140                                  errtn:
  7141 00000CE7 3CFF                    	CMP	AL,0FFH
  7142 00000CE9 7403                    	JZ	short errtn2
  7143                                  errtn1:
  7144 00000CEB E956F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7145                                  errtn2:
  7146                                  	;error	error_invalid_function	; NLSFUNC not existent
  7147                                  
  7148                                  	;mov	al,1
  7149 00000CEE B001                    	mov	al,error_invalid_function 
  7150 00000CF0 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7151                                  ;errtn3:
  7152                                  ;	jmp	SYS_RET_ERR
  7153                                  
  7154                                  ;EndProc $INTERNATIONAL
  7155                                  
  7156                                  ; 19/07/2018
  7157                                  
  7158                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7159                                  
  7160                                  ;----------------------------------------------------------------------------
  7161                                  ;
  7162                                  ; Procedure Name : $GetExtCntry
  7163                                  ;
  7164                                  ; Inputs:
  7165                                  ;	if AL >= 20H
  7166                                  ;	  AL= 20H    capitalize single char, DL= char
  7167                                  ;	      21H    capitalize string, CX= string length
  7168                                  ;	      22H    capitalize ASCIIZ string
  7169                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7170                                  ;	      80H bit 0 = use normal upper case table
  7171                                  ;		      1 = use file upper case table
  7172                                  ;	   DS:DX points to string
  7173                                  ;
  7174                                  ;	else
  7175                                  ;
  7176                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7177                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7178                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7179                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7180                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7181                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7182                                  ;	INT	21
  7183                                  ; Function:
  7184                                  ;	give users extended country dependent information
  7185                                  ;	or capitalize chars
  7186                                  ; Outputs:
  7187                                  ;	  No Carry:
  7188                                  ;	     extended country info is succesfully returned
  7189                                  ;	  Carry:
  7190                                  ;	     Register AX has the error code.
  7191                                  ;	     AX=0, NO	 for YES/NO CHECK
  7192                                  ;		1, YES
  7193                                  ;----------------------------------------------------------------------------
  7194                                  
  7195                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7196                                  
  7197                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7198                                  
  7199                                  	; MSDOS 6.0
  7200                                  _$GetExtCntry:
  7201 00000CF2 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7202 00000CF4 7269                    	JB	short notcap
  7203                                  capcap: 				;
  7204 00000CF6 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7205 00000CF8 7505                    	JNZ	short fileupper		; file upper case
  7206                                  
  7207                                  ;hkn; UCASE_TAB in DOSDATA
  7208 00000CFA BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7209 00000CFD EB05                    	JMP	SHORT capit
  7210                                  
  7211                                  fileupper:
  7212                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7213                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7214                                  	; AL >= 80h
  7215 00000CFF 247F                    	and	al,7Fh
  7216                                  
  7217                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7218 00000D01 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7219                                  capit:					;
  7220 00000D04 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7221 00000D06 750D                    	JNZ	short chkyes		; no
  7222 00000D08 88D0                    	MOV	AL,DL			; set up AL
  7223 00000D0A E86843                  	call	GETLET3 		; upper case it
  7224 00000D0D E875F7                  	call	Get_User_Stack		; get user stack
  7225                                  	;mov	[si+6],al
  7226 00000D10 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7227 00000D13 EBC7                    	JMP	SHORT nono		; done
  7228                                  chkyes: 				;
  7229 00000D15 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7230 00000D17 7522                    	JNZ	short capstring		; no
  7231                                  
  7232 00000D19 31C0                    	XOR	AX,AX			; presume NO
  7233                                  		      
  7234                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7235                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7236                                  
  7237                                  	; 06/08/2018 - Retro DOS v3.0
  7238                                  	; 13/05/2019 - Retro DOS v4.0
  7239                                  	;cmp	dl,'Y'
  7240 00000D1B 2E3A16[1A0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7241 00000D20 7416                    	JZ	short yesyes		; yes
  7242                                  	;cmp	dl,'y'
  7243 00000D22 2E3A16[1C0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7244 00000D27 740F                    	JZ	short yesyes		; yes
  7245                                  	;cmp	dl,'N'
  7246 00000D29 2E3A16[1B0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7247 00000D2E 74AC                    	JZ	short nono		; no
  7248                                  	;cmp	dl,'n'
  7249 00000D30 2E3A16[1D0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7250 00000D35 74A5                    	JZ	short nono		; no
  7251                                  ;dbcs_char:				;
  7252 00000D37 40                      	INC	AX			; not YES or NO
  7253                                  yesyes: 				;
  7254 00000D38 40                      	INC	AX			; return 1
  7255                                  	; 15/12/2022
  7256                                  ;nono:	
  7257 00000D39 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7258                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7259                                  	;jmp	SYS_RET_OK		; done
  7260                                  
  7261                                  capstring:				;
  7262 00000D3B 89D6                    	MOV	SI,DX			; si=dx
  7263 00000D3D 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7264 00000D3F 750D                    	JNZ	short capascii		; no
  7265                                  	;OR	CX,CX			; check count 0
  7266                                  	;JZ	short nono		; yes finished
  7267                                  	; 06/01/2024
  7268 00000D41 E399                    	jcxz	nono
  7269                                  concap: 				;
  7270 00000D43 AC                      	LODSB				; get char
  7271 00000D44 E82E43                  	call	GETLET3 		; upper case it
  7272 00000D47 8844FF                  	MOV	byte [SI-1],AL		; store back
  7273                                  ;next99: 				;
  7274 00000D4A E2F7                    	LOOP	concap			; continue
  7275 00000D4C EB8E                    	JMP	short nono		; done
  7276                                  capascii:				;
  7277 00000D4E 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7278 00000D50 7545                    	JNZ	short capinval		; no
  7279                                  concap2:				;
  7280 00000D52 AC                      	LODSB				; get char
  7281 00000D53 08C0                    	or	al,al			; end of string ?
  7282 00000D55 7485                    	JZ	short nono		; yes
  7283 00000D57 E81B43                  	call	GETLET3 		; upper case it
  7284 00000D5A 8844FF                  	MOV	[SI-1],AL		; store back
  7285 00000D5D EBF3                    	JMP	short concap2 		; continue
  7286                                  
  7287                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7288                                  
  7289                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7290                                  ; _$GetExtCntry:
  7291                                  
  7292                                  notcap:
  7293 00000D5F 83F905                  	CMP	CX,5			; minimum size is 5
  7294 00000D62 7277                    	jb	short sizeerror
  7295                                  
  7296                                  GEC_CONT:
  7297                                  ;hkn; SS is DOSDATA
  7298                                  	;context DS
  7299                                  
  7300 00000D64 16                      	push	ss
  7301                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7302 00000D65 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7303                                  	
  7304                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7305 00000D66 BE[0512]                	MOV	SI,COUNTRY_CDPG
  7306                                  
  7307 00000D69 83FAFF                  	CMP	DX,-1			; active country ?
  7308 00000D6C 7503                    	JNZ	short GETCDPG 		; no
  7309                                  
  7310                                  ;hkn; use DS override to accesss country_cdpg fields
  7311                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7312                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7313 00000D6E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7314                                  					; get active country id;smr;use DS
  7315                                  GETCDPG:
  7316 00000D71 83FBFF                  	CMP	BX,-1			; active code page?
  7317 00000D74 7503                    	JNZ	short CHKAGAIN		; no, check again
  7318                                  
  7319                                  ;hkn; use DS override to accesss country_cdpg fields
  7320                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7321                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7322 00000D76 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7323                                  					; get active code page id;smr;Use DS
  7324                                  CHKAGAIN:
  7325                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7326 00000D79 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7327                                  					; same as active country id?;smr;use DS
  7328 00000D7C 7550                    	JNZ	short CHKNLS		; no
  7329                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7330 00000D7E 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7331                                  					; same as active code pg id?;smr;use DS
  7332 00000D81 754B                    	JNZ	short CHKNLS		; no
  7333                                  CHKTYPE:
  7334                                  	;mov	bx,[si+48h]
  7335 00000D83 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7336                                  					; bx = sys code page id;smr;use DS
  7337 00000D86 51                      	PUSH	CX			; save cx
  7338                                  	;mov	cx,[si+4Ah]
  7339 00000D87 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7340                                  	;mov	si,COUNTRY_CDPG+76
  7341 00000D8A BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7342                                  NXTENTRY:
  7343 00000D8D 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7344 00000D8F 740B                    	JZ	short FOUNDIT
  7345 00000D91 83C605                  	ADD	SI,5			; next entry
  7346 00000D94 E2F7                    	LOOP	NXTENTRY
  7347 00000D96 59                      	POP	CX
  7348                                  capinval:
  7349                                  	;error	error_invalid_function	; info type not found
  7350                                  	;mov	al,1
  7351 00000D97 B001                    	mov	al,error_invalid_function
  7352                                  ;SYS_RET_ERR_jmp:
  7353                                  	;jmp	SYS_RET_ERR
  7354                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7355                                  SYS_RET_ERR_jmp:
  7356 00000D99 E9A8F8                  	jmp	SYS_RET_ERR	
  7357                                  
  7358                                  FOUNDIT:
  7359 00000D9C A4                      	MOVSB				; move info id byte
  7360 00000D9D 59                      	POP	CX			; restore char count
  7361                                  	;cmp	al,1
  7362 00000D9E 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7363 00000DA0 7415                    	JZ	short setsize
  7364 00000DA2 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7365 00000DA5 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7366                                  OK_RETN:
  7367 00000DA8 F3A4                    	REP	MOVSB			; copy info
  7368 00000DAA 89C1                    	MOV	CX,AX			; CX = actual length returned
  7369 00000DAC 89D8                    	MOV	AX,BX			; return sys code page in ax
  7370                                  GETDONE:
  7371 00000DAE E8D4F6                  	call	Get_User_Stack		; return actual length to user's CX
  7372                                  	;mov	[si+4],cx 
  7373 00000DB1 894C04                  	MOV	[SI+user_env.user_CX],CX
  7374                                  	;jmp	SYS_RET_OK
  7375                                  	; 15/12/2022
  7376                                  	; 25/06/2019
  7377 00000DB4 E987F8                  	jmp	SYS_RET_OK_clc
  7378                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7379                                  	; 15/12/2022
  7380                                  ;nono_jmp:
  7381                                  	;jmp	short nono
  7382                                  setsize:
  7383 00000DB7 83E903                  	SUB	CX,3			; size after length field
  7384 00000DBA 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7385 00000DBC 7302                    	JAE	short setsize2		; no
  7386 00000DBE 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7387                                  setsize2:
  7388 00000DC0 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7389                                  	;ADD	DI,2			; update index
  7390                                  	;ADD	SI,2
  7391                                  	; 06/01/2024
  7392 00000DC3 47                      	inc	di
  7393 00000DC4 47                      	inc	di
  7394 00000DC5 46                      	inc	si
  7395 00000DC6 46                      	inc	si
  7396 00000DC7 89C8                    	MOV	AX,CX
  7397 00000DC9 83C003                  	ADD	AX,3			; AX has the actual length
  7398 00000DCC EBDA                    	JMP	short OK_RETN 		; go move it
  7399                                  CHKNLS:
  7400 00000DCE 30E4                    	XOR	AH,AH
  7401                                  	;PUSH	AX			; save info type
  7402                                  	;POP	BP			; bp = info type
  7403                                  	; 06/01/2024
  7404 00000DD0 89C5                    	mov	bp,ax
  7405                                  	
  7406                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7407 00000DD2 B80014                  	mov     ax,1400h
  7408 00000DD5 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7409                                  			; Return: AL = 00h not installed, OK to install
  7410                                  			; 01h not installed, not OK
  7411                                  			; FFh installed
  7412 00000DD7 3CFF                    	CMP	AL,0FFH
  7413 00000DD9 7404                    	JZ	short NLSNXT		; in memory
  7414                                  
  7415                                  sizeerror:
  7416                                  	;error	error_invalid_function
  7417                                  	;mov	al,1
  7418 00000DDB B001                    	mov	al,error_invalid_function
  7419                                  	;jmp	SYS_RET_ERR
  7420                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7421                                  sys_ret_err_jmp2:
  7422 00000DDD EBBA                    	jmp	short SYS_RET_ERR_jmp
  7423                                  
  7424                                  NLSNXT: 
  7425                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7426 00000DDF B80214                  	mov     ax,1402h
  7427 00000DE2 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7428                                  			; BP = subfunction, BX = code page
  7429                                  			; DX = country code, DS:SI -> internal code page structure
  7430                                  			; ES:DI -> user buffer, CX = size of user buffer
  7431                                  			; Return: AL = status
  7432                                  			; 00h successful
  7433                                  			; else DOS error code
  7434                                  
  7435 00000DE4 3C00                    	CMP	AL,0			; success ?
  7436 00000DE6 7505                    	JNZ	short NLSERROR
  7437                                  	;mov	ax,[si+48h] ; 13/05/2019
  7438 00000DE8 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7439                                  			; ax = sys code page id;smr;use ds;
  7440                                  			;BUGBUG;check whether DS is OK after the above calls
  7441 00000DEB EBC1                    	JMP	short GETDONE
  7442                                  seterr:
  7443                                  	; 15/12/2022
  7444                                  NLSERROR:
  7445                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7446                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7447                                  	;jmp	short sys_ret_err_jmp2
  7448                                  	; 15/12/2022
  7449 00000DED EBAA                    	jmp	short SYS_RET_ERR_jmp
  7450                                  
  7451                                  ;EndProc $GetExtCntry
  7452                                  
  7453                                  ; 13/05/2019 - Retro DOS v4.0
  7454                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7455                                  
  7456                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7457                                  ;----------------------------------------------------------------------------
  7458                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7459                                  ;
  7460                                  ;   System call format:
  7461                                  ;
  7462                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7463                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7464                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7465                                  ;	INT	21
  7466                                  ;
  7467                                  ;	ENTRY	(al) = n
  7468                                  ;		(bx) = code page
  7469                                  ;	EXIT	'C' clear
  7470                                  ;		  global code page is set	(set global code page)
  7471                                  ;		  (BX) = active code page id	(get global code page)
  7472                                  ;		  (DX) = system code page id	(get global code page)
  7473                                  ;		'C' set
  7474                                  ;		  (AX) = error code
  7475                                  
  7476                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7477                                  
  7478                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7479                                  	; DOSCODE:4BC9h
  7480                                  
  7481                                  _$GetSetCdPg:
  7482                                  
  7483                                  ;hkn; SS is DOSDATA
  7484                                  	;context DS
  7485                                  
  7486 00000DEF 16                      	push	ss
  7487 00000DF0 1F                      	pop	ds
  7488                                  
  7489                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7490 00000DF1 BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7491                                  
  7492 00000DF4 3C01                    	CMP	AL,1		       ; get global code page
  7493 00000DF6 7512                    	JNZ	short setglpg 	       ; set global code page
  7494                                  	
  7495                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7496                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7497 00000DF8 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7498                                  					; get active code page id;smr;use ds
  7499                                  	;mov	dx,[si+48h]
  7500 00000DFB 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7501                                  				  	; get sys code page id;smr;use ds
  7502 00000DFE E884F6                  	call	Get_User_Stack
  7503                                  ;ASSUME DS:NOTHING
  7504                                  	;;mov	[si+2],bx
  7505                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7506                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7507 00000E01 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7508                                  	;mov	[si+6],dx
  7509 00000E04 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7510                                  OK_RETURN:
  7511                                  	; 15/12/2022
  7512                                  	;transfer SYS_RET_OK
  7513 00000E07 E931F8                  	jmp	SYS_RET_OK
  7514                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7515                                  	;jmp	short nono_jmp
  7516                                  
  7517                                  ;hkn; ASSUME DS:DOSGROUP
  7518                                  ;ASSUME	DS:DOSDATA
  7519                                  
  7520                                  setglpg:
  7521 00000E0A 3C02                    	CMP	AL,2
  7522 00000E0C 752F                    	JNZ	short nomem
  7523                                  	
  7524                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7525                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7526 00000E0E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7527                                  	
  7528                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7529 00000E11 B80014                  	mov     ax,1400h
  7530 00000E14 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7531                                  			; Return: AL = 00h not installed, OK to install
  7532                                  			; 01h not installed, not OK
  7533                                  			; FFh installed
  7534 00000E16 3CFF                    	CMP	AL,0FFH
  7535 00000E18 7523                    	JNZ	short nomem		; not in memory
  7536                                  
  7537                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7538 00000E1A B80114                  	mov     ax,1401h
  7539 00000E1D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7540                                  			; DS:SI -> internal code page structure
  7541                                  			; BX = new code page, DX = country code???
  7542                                  			; Return: AL = status
  7543                                  			; 00h successful
  7544                                  			; else DOS error code
  7545                                  	;cmp	al,0
  7546 00000E1F 08C0                    	or	al,al			; success ?
  7547 00000E21 74E4                    	JZ	short OK_RETURN		; yes
  7548                                  
  7549 00000E23 3C41                    	CMP	AL,65			; set device code page failed
  7550 00000E25 75C6                    	JNZ	short seterr
  7551                                  	;MOV	AX,65
  7552                                  	; 06/01/2024
  7553 00000E27 98                      	cbw
  7554 00000E28 A3[2403]                	MOV	[EXTERR],AX
  7555                                  	;mov	byte [EXTERR_ACTION],6
  7556                                  	;mov	byte [EXTERR_CLASS],5
  7557                                  	;mov	byte [EXTERR_LOCUS],4
  7558 00000E2B C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7559 00000E30 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7560 00000E35 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7561                                  	;transfer From_GetSet
  7562 00000E3A E90FF8                  	jmp	From_GetSet
  7563                                  
  7564                                  	; 15/12/2022
  7565                                  ;seterr:
  7566                                  	;;;transfer SYS_RET_ERR
  7567                                  	;;jmp	SYS_RET_ERR
  7568                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7569                                  	;jmp	short NLSERROR
  7570                                  
  7571                                  nomem:
  7572                                  	;error	error_invalid_function	; function not defined
  7573                                  	;mov	al,1
  7574 00000E3D B001                    	mov	al,error_invalid_function
  7575 00000E3F EBAC                    	jmp	short seterr
  7576                                  
  7577                                  ;EndProc $GetSetCdPg
  7578                                  
  7579                                  ; 09/01/2024
  7580                                  ; 13/05/2019 - Retro DOS v4.0
  7581                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7582                                  
  7583                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7584                                  ;----------------------------------------------------------------------------
  7585                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7586                                  ;
  7587                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7588                                  ;		drive.
  7589                                  ;
  7590                                  ;	This call returns the same info in the same registers (except for the
  7591                                  ;	FAT pointer) as the old FAT pointer calls
  7592                                  ;
  7593                                  ;	ENTRY	DL = Drive number
  7594                                  ;	EXIT	AX = Sectors per allocation unit
  7595                                  ;		   = -1 if bad drive specified
  7596                                  ;		On User Stack
  7597                                  ;		    BX = Number of free allocation units
  7598                                  ;		    DX = Total Number of allocation units on disk
  7599                                  ;		    CX = Sector size
  7600                                  
  7601                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7602                                  
  7603                                  _$GET_DRIVE_FREESPACE:
  7604                                  
  7605                                  ;hkn; SS is DOSDATA
  7606                                  	;context DS
  7607 00000E41 16                      	push	ss
  7608 00000E42 1F                      	pop	ds
  7609                                  
  7610 00000E43 88D0                    	MOV	AL,DL
  7611                                  	;invoke	GetThisDrv		; Get drive
  7612 00000E45 E8595C                  	call	GETTHISDRV
  7613                                  SET_AX_RET:
  7614 00000E48 7212                    	JC	short BADFDRV
  7615                                  	;invoke	DISK_INFO
  7616 00000E4A E89F1E                  	call	DISK_INFO
  7617 00000E4D 87D3                    	XCHG	DX,BX
  7618                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7619                                  	; 06/01/2024
  7620 00000E4F 720B                    	jc	short BADFDRV
  7621 00000E51 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7622                                  DoSt:
  7623 00000E53 E82FF6                  	call	Get_User_Stack
  7624                                  ;ASSUME	DS:NOTHING
  7625                                  	;mov	[si+6],dx
  7626                                  	;;mov	[si+4],cx
  7627                                  	;;mov	[si+2],bx
  7628                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7629 00000E56 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7630                                  	;MOV	[SI+user_env.user_CX],CX
  7631                                  	;MOV	[SI+user_env.user_BX],BX
  7632                                  	;;MOV	[SI+user_env.user_AX],AX
  7633                                  	;mov	[si],ax
  7634                                  	;;return
  7635                                  	;retn
  7636                                  	; 09/01/2024
  7637 00000E59 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7638                                  
  7639                                  BADFDRV:
  7640                                  	; MSDOS 3.3
  7641                                  	;;mov	al,0Fh
  7642                                  	;mov	al,error_invalid_drive	; Assume error
  7643                                  
  7644                                  	; 13/05/2019 - Retro DOS v4.0
  7645                                  
  7646                                  	; MSDOS 6.0 & MSDOS 3.3
  7647                                  	;invoke	FCB_RET_ERR
  7648 00000E5C E8FBF7                  	call	FCB_RET_ERR
  7649                                  	
  7650 00000E5F B8FFFF                  	MOV	AX,-1
  7651 00000E62 EBEF                    	JMP	short DoSt
  7652                                  
  7653                                  ;EndProc $GET_DRIVE_FREESPACE
  7654                                  
  7655                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7656                                  ;----------------------------------------------------------------------------
  7657                                  ;**	$Get_DMA - Get Disk Transfer Address
  7658                                  ;
  7659                                  ;	ENTRY	none
  7660                                  ;	EXIT	ES:BX is current transfer address
  7661                                  ;	USES	all
  7662                                  
  7663                                  	; 09/01/2024
  7664                                  _$GET_DMA:
  7665 00000E64 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7666 00000E69 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7667 00000E6E E814F6                  	call	Get_User_Stack
  7668                                  	;mov	[si+2],bx
  7669                                  	;mov	[si+10h],cx
  7670                                  	; 09/01/2024
  7671                                  	;MOV	[SI+user_env.user_BX],BX
  7672 00000E71 894C10                  	MOV	[SI+user_env.user_ES],CX
  7673                                  	;retn
  7674                                  	; 09/01/2024
  7675 00000E74 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7676                                  
  7677                                  ;**	$Set_DMA - Set Disk Transfer Address
  7678                                  ;----------------------------------------------------------------------------
  7679                                  ;	ENTRY	DS:DX is current transfer address
  7680                                  ;	EXIT	none
  7681                                  ;	USES	all
  7682                                  
  7683                                  _$SET_DMA:
  7684 00000E77 368916[2C03]            	MOV	[SS:DMAADD],DX
  7685 00000E7C 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7686 00000E81 C3                      	retn
  7687                                  
  7688                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7689                                  ;------------------------------------------------------------------------------
  7690                                  
  7691                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7692                                  ;-----------------------------------------------------
  7693                                  ;	ENTRY	none
  7694                                  ;	EXIT	(AL) = drive number
  7695                                  ;	USES	all
  7696                                  
  7697                                  _$GET_DEFAULT_DRIVE:
  7698 00000E82 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7699 00000E86 C3                      	retn
  7700                                  
  7701                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7702                                  ;-----------------------------------------------------
  7703                                  ;	ENTRY	(DL) = Drive number for new default drive
  7704                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7705                                  
  7706                                  _$SET_DEFAULT_DRIVE:
  7707 00000E87 88D0                    	MOV	AL,DL
  7708 00000E89 FEC0                    	INC	AL			; A=1, B=2...
  7709 00000E8B E8F75B                  	call	GetVisDrv		; see if visible drive
  7710 00000E8E 7204                    	JC	short SETRET		; errors do not set
  7711 00000E90 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7712                                  
  7713                                  SETRET:
  7714 00000E94 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7715 00000E98 C3                      	retn
  7716                                  
  7717                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7718                                  ;----------------------------------------------------------------------------
  7719                                  
  7720                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7721                                  ;---------------------------------------------------
  7722                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7723                                  ;	contents of an interrupt vector.
  7724                                  ;
  7725                                  ;	ENTRY	(AL) = interrupt number
  7726                                  ;	EXIT	(ES:BX) = current interrupt vector
  7727                                  
  7728                                  _$GET_INTERRUPT_VECTOR:
  7729 00000E99 E82E00                  	CALL	RECSET
  7730 00000E9C 26C41F                  	LES	BX,[ES:BX]
  7731 00000E9F E8E3F5                  	call	Get_User_Stack
  7732                                  set_user_es_bx:
  7733                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7734                                  	;;mov	[si+2],bx
  7735                                  	;mov	[si+10h],es
  7736                                  	;MOV	[SI+user_env.user_BX],BX
  7737 00000EA2 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7738                                  	;retn
  7739 00000EA5 E9B7FD                  	jmp	set_user_bx
  7740                                  
  7741                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7742                                  ;---------------------------------------------------
  7743                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7744                                  ;	contents of an interrupt vector.
  7745                                  ;
  7746                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7747                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7748                                  ;	for explanation.
  7749                                  ;
  7750                                  ;	ENTRY	(AL) = interrupt number
  7751                                  ;		(ds:dx) = desired new vector value
  7752                                  ;	EXIT	none
  7753                                  ;	USES	all
  7754                                  
  7755                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7756                                  ; 13/05/2019 - Retro DOS v4.0
  7757                                  
  7758                                  _$SET_INTERRUPT_VECTOR:
  7759 00000EA8 E81F00                  	CALL	RECSET
  7760 00000EAB FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7761 00000EAC 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7762 00000EAF 268C5F02                	MOV	[ES:BX+2],DS
  7763 00000EB3 FB                      	STI
  7764                                  					; M004, M068 - Start
  7765                                  	; MSDOS 6.0
  7766 00000EB4 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7767                                  					; Q: was the previous call an int 21h
  7768                                  					;    exec call
  7769                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7770                                  	;jnz	short siv_1		; Y: go set count
  7771                                  	;retn				; N: return
  7772                                  	; 15/12/2022
  7773 00000EBA 740D                    	jz	short siv_2
  7774                                  siv_1:	
  7775 00000EBC 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7776 00000EC2 7505                    	jnz	short siv_2		 ; N: done
  7777                                  	; 20/09/2023
  7778 00000EC4 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7779                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7780                                  					 ; dispatcher to turn A20 Off before
  7781                                  					 ; returning to user.
  7782                                  siv_2:
  7783                                  	; 07/12/2022
  7784 00000EC9 C3                      	retn				; M004, M068 - End
  7785                                  	
  7786                                  RECSET:
  7787 00000ECA 31DB                    	XOR	BX,BX
  7788 00000ECC 8EC3                    	MOV	ES,BX
  7789 00000ECE 88C3                    	MOV	BL,AL
  7790 00000ED0 D1E3                    	SHL	BX,1
  7791 00000ED2 D1E3                    	SHL	BX,1
  7792 00000ED4 C3                      	retn
  7793                                  
  7794                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7795                                  ;-------------------------------------------------------------------------------------
  7796                                  
  7797                                  ;**	$Char_Oper - Manipulate Switch Character
  7798                                  ;
  7799                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7800                                  ;
  7801                                  ;	ENTRY	AL = function:
  7802                                  ;		    0 - read switch char
  7803                                  ;		    1 - set switch char (char in DL)
  7804                                  ;		    2 - read device availability
  7805                                  ;			Always returns available
  7806                                  ;		    3 - set device availability
  7807                                  ;			No longer supported (NOP)
  7808                                  ;	EXIT	(al) = 0xff iff error
  7809                                  ;		(al) != 0xff if ok
  7810                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7811                                  ;	USES	AL, DL
  7812                                  ;
  7813                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7814                                  ;		The character / is always returned for subfunction 0,
  7815                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7816                                  
  7817                                  ; 13/05/2019 - Retro DOS v4.0
  7818                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7819                                  
  7820                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7821                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7822                                  
  7823                                  _$CHAR_OPER:
  7824                                  	; MSDOS 6.0
  7825 00000ED5 08C0                    	or	al,al				; get switch?
  7826 00000ED7 B22F                    	mov	dl,'/'				; assume yes
  7827 00000ED9 7407                    	jz	short chop_1			; jump if yes
  7828 00000EDB 3C02                    	cmp	al,2				; check device availability?
  7829 00000EDD B2FF                    	mov	dl,-1				; assume yes
  7830 00000EDF 7401                    	jz	short chop_1			; jump if yes
  7831 00000EE1 C3                      	retn					; otherwise just quit
  7832                                  
  7833                                  ; subfunctions requiring return of value to user come here. DL holds
  7834                                  ; value to return
  7835                                  
  7836                                  chop_1:
  7837 00000EE2 E8A0F5                  	call	Get_User_Stack
  7838 00000EE5 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7839 00000EE8 C3                      	retn
  7840                                  
  7841                                  	; MSDOS 3.3
  7842                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7843                                  	;push	ss
  7844                                  	;pop	ds
  7845                                  	;cmp	al,1
  7846                                  	;jb	short chop_1
  7847                                  	;jz	short chop_2
  7848                                  	;cmp	al,3
  7849                                  	;jb	short chop_3
  7850                                  	;jz	short chop_5
  7851                                  	;mov	al,0FFh
  7852                                  	;retn
  7853                                  ;chop_1:
  7854                                  	;mov	dl,[chSwitch]
  7855                                  	;jmp	short chop_4
  7856                                  ;chop_2:
  7857                                  	;mov	[chSwitch],dl
  7858                                  	;retn
  7859                                  ;chop_3:
  7860                                  	;mov	dl, FFh
  7861                                  ;chop_4:
  7862                                  	;call	Get_User_Stack
  7863                                  	;mov	[si+6],dx
  7864                                  ;chop_5:
  7865                                  	;retn
  7866                                  
  7867                                  ;**	$GetExtendedError - Return Extended error code
  7868                                  ;----------------------------------------------------------------------------
  7869                                  ;	This function reads up the extended error info from the static
  7870                                  ;	variables where it was stored.
  7871                                  ;
  7872                                  ;	ENTRY	none
  7873                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7874                                  ;		BL = recommended action
  7875                                  ;		BH = class of error
  7876                                  ;		CH = locus of error
  7877                                  ;		ES:DI = may be pointer
  7878                                  ;	USES	ALL
  7879                                  
  7880                                  	; 09/01/2024
  7881                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7882                                  
  7883                                  _$GetExtendedError:
  7884 00000EE9 16                      	push	ss
  7885 00000EEA 1F                      	pop	ds
  7886 00000EEB A1[2403]                	MOV	AX,[EXTERR]
  7887 00000EEE C43E[2803]              	LES	DI,[EXTERRPT]
  7888 00000EF2 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7889 00000EF6 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7890 00000EFA E888F5                  	call	Get_User_Stack
  7891                                  	;mov	[si+0Ah],di
  7892 00000EFD 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7893                                  
  7894                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7895                                  	;;mov	[si+10h],es
  7896                                  	;MOV	[SI+user_env.user_ES],ES
  7897                                  	;;mov	[si+2],bx
  7898                                  	;MOV	[SI+user_env.user_BX],BX
  7899 00000F00 E89FFF                  	call	set_user_es_bx
  7900                                  
  7901                                  	;mov	[si+4],cx
  7902 00000F03 894C04                  	MOV	[SI+user_env.user_CX],CX
  7903                                  jmp_SYS_RET_OK:
  7904                                  	; 15/12/2022
  7905                                  	;jmp	SYS_RET_OK
  7906                                  	; 25/06/2019
  7907 00000F06 E935F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7908                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7909                                  ;jmp_SYS_RET_OK:
  7910                                  	;jmp	SYS_RET_OK
  7911                                  
  7912                                  ; --------------------------------------------------------------------------
  7913                                  ; 09/01/2024
  7914                                  %if 0
  7915                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7916                                  	; DOSCODE:4CF3h
  7917                                  ;patch_or_unknown:
  7918                                  ;get_code_page:
  7919                                  	push    si
  7920                                  	mov     si, COUNTRY_CDPG
  7921                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7922                                  	mov     ax, [ss:si+6Ah]
  7923                                  	pop     si
  7924                                  	retn
  7925                                  %endif
  7926                                  ; --------------------------------------------------------------------------
  7927                                  
  7928                                  ; 29/04/2019 - Retro DOS v4.0
  7929                                  
  7930                                  ;BREAK	<ECS_call - Extended Code System support function>
  7931                                  ;---------------------------------------------------------------------------
  7932                                  ; Inputs:
  7933                                  ;	AL = 0	get lead byte table
  7934                                  ;		on return DS:SI has the table location
  7935                                  ;
  7936                                  ;	AL = 1	set / reset interim console flag
  7937                                  ;		DL = flag (00H or 01H)
  7938                                  ;		no return
  7939                                  ;
  7940                                  ;	AL = 2	get interim console flag
  7941                                  ;		on return DL = current flag value
  7942                                  ;
  7943                                  ;	AL = OTHER then error, and returns with:
  7944                                  ;		AX = error_invalid_function
  7945                                  ;
  7946                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7947                                  ;	 SS:SP WILL BE PRESERVED!
  7948                                  ;---------------------------------------------------------------------------
  7949                                  
  7950                                  _$ECS_Call:
  7951 00000F09 08C0                    	or	al,al			; AL = 0 (get table)?
  7952                                  	;jnz	short _okok
  7953                                  	; 15/12/2022
  7954 00000F0B 7403                    	jz	short get_lbt
  7955                                  ;_okok:
  7956 00000F0D E92BF7                  	jmp	SYS_RET_OK
  7957                                  get_lbt:
  7958 00000F10 E872F5                  	call	Get_User_Stack		; *
  7959                                  
  7960                                  ;hkn; dbcs_table moved low to dosdata
  7961                                  	;mov	word [si+8],DBCS_TAB+2
  7962 00000F13 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7963                                  
  7964 00000F18 06                      	push	es
  7965                                  	;getdseg <es>			; es = DOSDATA
  7966 00000F19 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7967                                  	;mov	[si+14],es
  7968 00000F1E 8C440E                  	mov	[SI+user_env.user_DS],es
  7969 00000F21 07                      	pop	es
  7970                                  
  7971                                  	; 15/12/2022
  7972 00000F22 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7973                                  ;_okok:
  7974                                  	; 15/12/2022	
  7975                                  	;;transfer SYS_RET_OK
  7976                                  	;jmp	short jmp_SYS_RET_OK
  7977                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7978                                  	;;jmp	SYS_RET_OK
  7979                                  	;jmp	short jmp_SYS_RET_OK
  7980                                  
  7981                                  ;============================================================================
  7982                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7983                                  ;============================================================================
  7984                                  ; 19/07/2018 - Retro DOS v3.0
  7985                                  ; 15/05/2019 - Retro DOS v4.0
  7986                                  
  7987                                  ; System calls for parsing command lines
  7988                                  ;
  7989                                  ;   $PARSE_FILE_DESCRIPTOR
  7990                                  ;
  7991                                  ;   Modification history:
  7992                                  ;
  7993                                  ;       Created: ARR 30 March 1983
  7994                                  ;               EE PathParse 10 Sept 1983
  7995                                  ;
  7996                                  
  7997                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7998                                  ;---------------------------------------------------------------------------
  7999                                  ; Inputs:
  8000                                  ;       DS:SI Points to a command line
  8001                                  ;       ES:DI Points to an empty FCB
  8002                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8003                                  ;                   = 0 Parse stops if separator encountered
  8004                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8005                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8006                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8007                                  ;                   = 0  "       "      "       - put blanks in FCB
  8008                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8009                                  ;                   = 0  "       "      "        - put blanks in FCB
  8010                                  ; Function:
  8011                                  ;       Parse command line into FCB
  8012                                  ; Returns:
  8013                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8014                                  ;       DS:SI points to first character after filename
  8015                                  ;---------------------------------------------------------------------------
  8016                                  
  8017                                  _$PARSE_FILE_DESCRIPTOR:
  8018 00000F24 E8F03F                  	call	MAKEFCB
  8019 00000F27 56                      	PUSH    SI
  8020 00000F28 E85AF5                  	call	Get_User_Stack
  8021                                  	;pop	word [si+8]
  8022 00000F2B 8F4408                  	POP     word [SI+user_env.user_SI]
  8023 00000F2E C3                      	retn
  8024                                  
  8025                                  ;============================================================================
  8026                                  ; MISC.ASM, MSDOS 6.0, 1991
  8027                                  ;============================================================================
  8028                                  ; 19/07/2018 - Retro DOS v3.0
  8029                                  
  8030                                  ; 29/04/2019 - Retro DOS v4.0
  8031                                  
  8032                                  ;ENTRYPOINTSEG	EQU	0CH
  8033                                  ;MAXDIF		EQU	0FFFH
  8034                                  ;SAVEXIT 	EQU	10
  8035                                  ;WRAPOFFSET	EQU	0FEF0h
  8036                                  
  8037                                  ;
  8038                                  ;----------------------------------------------------------------------------
  8039                                  ;
  8040                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8041                                  ;
  8042                                  ;	Return Stuff sort of like old get fat call
  8043                                  ;
  8044                                  ;	ENTRY	none
  8045                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8046                                  ;			GOD help anyone who tries to do ANYTHING except
  8047                                  ;			READ this ONE byte.
  8048                                  ;		DX = Total Number of allocation units on disk
  8049                                  ;		CX = Sector size
  8050                                  ;		AL = Sectors per allocation unit
  8051                                  ;		   = -1 if bad drive specified
  8052                                  ;	USES	all
  8053                                  ;
  8054                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8055                                  ;
  8056                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8057                                  ;
  8058                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8059                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8060                                  ;			GOD help anyone who tries to do ANYTHING except
  8061                                  ;			READ this ONE byte.
  8062                                  ;		DX = Total Number of allocation units on disk
  8063                                  ;		CX = Sector size
  8064                                  ;		AL = Sectors per allocation unit
  8065                                  ;		   = -1 if bad drive specified
  8066                                  ;	USES	all
  8067                                  ;
  8068                                  ;----------------------------------------------------------------------------
  8069                                  ;
  8070                                  
  8071                                  _$SLEAZEFUNC:
  8072                                  	; 10/01/2024
  8073                                  	; 15/05/2019 - Retro DOS v4.0
  8074 00000F2F B200                    	MOV	DL,0
  8075                                  _$SLEAZEFUNCDL:
  8076 00000F31 16                      	push	ss
  8077 00000F32 1F                      	pop	ds
  8078                                  	
  8079 00000F33 88D0                    	MOV	AL,DL
  8080 00000F35 E8695B                  	call	GETTHISDRV		; Get CDS structure
  8081                                  SET_AL_RET:
  8082                                  	; MSDOS 3.3
  8083                                  	;;mov	al, 0Fh
  8084                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8085                                  	
  8086                                  	; MSDOS 6.0 & MSDOS 3.3
  8087 00000F38 721D                    	JC	short BADSLDRIVE
  8088                                  
  8089 00000F3A E8AF1D                  	call	DISK_INFO
  8090                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8091 00000F3D 7218                    	jc	short BADSLDRIVE
  8092 00000F3F 8826[9805]              	MOV	[FATBYTE],AH
  8093                                  
  8094                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8095                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8096                                  ; CALL AGAIN
  8097                                  
  8098                                  	; 10/01/2024
  8099                                  	;MOV	DI,FATBYTE
  8100 00000F43 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8101 00000F45 E83DF5                  	call	Get_User_Stack
  8102                                  	;mov	[si+4],cx
  8103                                  	;mov	[si+6],bx
  8104                                  	;mov	[si+2],di
  8105 00000F48 894C04                  	MOV	[SI+user_env.user_CX],CX
  8106 00000F4B 895C06                  	MOV	[SI+user_env.user_DX],BX
  8107                                  	;MOV	[SI+user_env.user_BX],DI
  8108                                  	; 10/01/2024
  8109 00000F4E C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8110                                  	
  8111                                  	;mov	[si+0Eh],ss
  8112 00000F53 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8113                                  
  8114 00000F56 C3                      	retn
  8115                                  
  8116                                  BADSLDRIVE:
  8117 00000F57 E900F7                  	jmp	FCB_RET_ERR
  8118                                  
  8119                                  ;
  8120                                  ;----------------------------------------------------------------------------
  8121                                  ;
  8122                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8123                                  ;
  8124                                  ;	Returns location of DOS status for interrupt routines
  8125                                  ;
  8126                                  ;	ENTRY	none
  8127                                  ;	EXIT	(es:bx) = flag location
  8128                                  ;	USES	all
  8129                                  ;
  8130                                  ;----------------------------------------------------------------------------
  8131                                  ;
  8132                                  
  8133                                  _$GET_INDOS_FLAG:
  8134 00000F5A E828F5                          CALL	Get_User_Stack
  8135                                          ;MOV	WORD [SI+2],INDOS
  8136 00000F5D C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8137                                  getin_segm:	; 13/01/2024
  8138                                  	;MOV	[SI+10H],SS
  8139 00000F62 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8140 00000F65 C3                      	RETN 
  8141                                  ;
  8142                                  ;----------------------------------------------------------------------------
  8143                                  ;
  8144                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8145                                  ;
  8146                                  ;	Return a pointer to interesting DOS variables This call is version
  8147                                  ;	dependent and is subject to change without notice in future versions.
  8148                                  ;	Use at risk.
  8149                                  ;
  8150                                  ;	ENTRY	none
  8151                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8152                                  ;	uses	ALL
  8153                                  ;
  8154                                  ;----------------------------------------------------------------------------
  8155                                  ;
  8156                                  
  8157                                  	; 13/01/2024
  8158                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8159                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8160                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8161                                  
  8162                                  _$GET_IN_VARS:
  8163 00000F66 E81CF5                  	CALL	Get_User_Stack
  8164                                  	;MOV	WORD [SI+2],SYSINITVAR
  8165                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8166 00000F69 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8167                                  	; 13/01/2024
  8168                                  	;;MOV	[SI+10H],SS
  8169                                  	;MOV	[SI+user_env.user_ES],SS
  8170                                  	;RETN
  8171 00000F6E EBF2                    	jmp	short getin_segm
  8172                                  
  8173                                  ;
  8174                                  ;----------------------------------------------------------------------------
  8175                                  ;
  8176                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8177                                  ;
  8178                                  ;	Return pointer to drive parameter table for default drive
  8179                                  ;
  8180                                  ;	ENTRY	none
  8181                                  ;	EXIT	(ds:bx) = DPB address
  8182                                  ;	USES	all
  8183                                  ;
  8184                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8185                                  ;
  8186                                  ;	Return pointer to a specified drive parameter table
  8187                                  ;
  8188                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8189                                  ;	EXIT	(al) = 0 iff ok
  8190                                  ;		  (ds:bx) = DPB address
  8191                                  ;		(al) = -1 if bad drive
  8192                                  ;	USES	all
  8193                                  ;
  8194                                  ;----------------------------------------------------------------------------
  8195                                  ;
  8196                                  
  8197                                  ; 15/05/2019 - Retro DOS v4.0
  8198                                  
  8199                                  _$GET_DEFAULT_DPB:
  8200 00000F70 B200                    	MOV	DL,0
  8201                                  _$GET_DPB:
  8202 00000F72 16                      	push	ss
  8203 00000F73 1F                      	pop	ds
  8204                                  
  8205 00000F74 88D0                    	MOV	AL,DL
  8206 00000F76 E8285B                  	call	GETTHISDRV		; Get CDS structure
  8207 00000F79 7222                    	JC	short ISNODRV 		; no valid drive
  8208 00000F7B C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8209                                  	;;test	word [es:di+43h],8000h
  8210                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8211                                  	;test	byte [es:di+44h],80h
  8212 00000F7F 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8213 00000F84 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8214 00000F86 E88903                  	call	ECritDisk
  8215 00000F89 E85247                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8216 00000F8C E89E03                  	call	LCritDisk
  8217 00000F8F 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8218                                  					;   have.
  8219 00000F91 E8F1F4                  	call	Get_User_Stack
  8220                                  	;mov	[si+2],bp
  8221 00000F94 896C02                  	MOV	[SI+user_env.user_BX],BP
  8222                                  	;mov	[si+0Eh],es
  8223 00000F97 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8224 00000F9A 30C0                    	XOR	AL,AL
  8225 00000F9C C3                      	retn
  8226                                  ISNODRV:
  8227 00000F9D B0FF                    	MOV	AL,-1
  8228 00000F9F C3                      	retn
  8229                                  
  8230                                  ;
  8231                                  ;----------------------------------------------------------------------------
  8232                                  ;
  8233                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8234                                  ;
  8235                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8236                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8237                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8238                                  ;
  8239                                  ;	ENTRY	none
  8240                                  ;	EXIT	none
  8241                                  ;	USES	all
  8242                                  ;
  8243                                  ;----------------------------------------------------------------------------
  8244                                  ;
  8245                                  
  8246                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8247                                  	; DOSCODE:4D94h
  8248                                  _$DISK_RESET:
  8249                                  	; 15/05/2019 - Retro DOS v4.0
  8250 00000FA0 B0FF                    	mov	al,0FFh	; -1
  8251 00000FA2 16                      	push	ss
  8252 00000FA3 1F                      	pop	ds
  8253                                  	; 06/11/2022
  8254                                  	;MOV	AL,-1
  8255 00000FA4 E86B03                  	call	ECritDisk
  8256                                  	; MSDOS 6.0
  8257                                  	;;or	word [DOS34_FLAG],4
  8258                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8259 00000FA7 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8260 00000FAC E8A84A                  	call	FLUSHBUF
  8261                                  	; MSDOS 6.0
  8262                                  	;and	word [DOS34_FLAG],0FFFBh
  8263                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8264                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8265                                  	; 15/12/2022
  8266 00000FAF 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8267 00000FB4 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8268                                  ;
  8269                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8270                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8271                                  ; let's do it.
  8272                                  ;
  8273                                  ; Invalidate 'last-buffer' used
  8274                                  ;
  8275 00000FBA BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8276 00000FBD 891E[2000]              	MOV	[LastBuffer+2],BX
  8277 00000FC1 891E[1E00]              	MOV	[LastBuffer],BX
  8278                                  
  8279                                  	; MSDOS 3.3 
  8280                                  	; IBMDOS.COM, Offset 1C66h
  8281                                  	;;;;
  8282                                  	;lds	si,[BUFFHEAD]
  8283                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8284                                  				; .buf_flags, AH = 0, reset/clear
  8285                                  ;DRST_1:
  8286                                  	;;mov	[si+4],ax
  8287                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8288                                  	;lds	si,[SI]
  8289                                  	;cmp	si,bx ; -1
  8290                                  	;je	short DRST_2
  8291                                  	;;mov	[si+4],ax
  8292                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8293                                  	;lds	si,[SI]
  8294                                  	;cmp	si,bx
  8295                                  	;jne	short DRST_1
  8296                                  	;;;;
  8297                                  ;DRST_2:
  8298 00000FC5 E86503                  	call	LCritDisk
  8299 00000FC8 B8FFFF                  	MOV	AX,-1
  8300                                  	; 07/12/2022
  8301                                  	;mov	ax,0FFFFh
  8302                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8303 00000FCB 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8304 00000FCC B82011                  	mov     ax,1120h
  8305 00000FCF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8306                                  			; DS = DOS CS
  8307                                  			; Return: CF clear (successful)
  8308 00000FD1 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8309                                  	
  8310 00000FD2 C3                      	retn
  8311                                  
  8312                                  	; 19/07/2018 - Retro DOS v3.0
  8313                                  
  8314                                  ;
  8315                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8316                                  ;
  8317                                  ;----------------------------------------------------------------------------
  8318                                  ;
  8319                                  ;**	$SetDPB - Create a DPB
  8320                                  ;
  8321                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8322                                  ;
  8323                                  ;	ENTRY	ES:BP Points to DPB
  8324                                  ;		DS:SI Points to BPB
  8325                                  ;	EXIT	DPB setup
  8326                                  ;	USES	ALL but BP, DS, ES
  8327                                  ;
  8328                                  ;----------------------------------------------------------------------------
  8329                                  ;
  8330                                  
  8331                                  ; 10/05/2019 - Retro DOS v4.0
  8332                                  
  8333                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8334                                  
  8335                                  ; MSDOS 6.0
  8336 00000FD3 0300                    word3:	dw	3			; M008 -- word value for divides
  8337                                  
  8338                                  ; 13/01/2024
  8339                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8340                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8341                                  
  8342                                  ;procedure   $SETDPB,NEAR
  8343                                  
  8344                                  _$SETDPB:
  8345 00000FD5 89EF                    	MOV	DI,BP
  8346                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8347                                  	; 13/01/2024
  8348 00000FD7 47                      	inc	di
  8349 00000FD8 47                      	inc	di
  8350 00000FD9 AD                      	LODSW
  8351 00000FDA AB                      	STOSW				; dpb_sector_size
  8352                                  	; MSDOS 6.0
  8353                                  	;cmp	byte [si+3],0
  8354 00000FDB 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8355 00000FDF 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8356                                  	;mov	byte [es:di+4],0
  8357 00000FE1 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8358                                  	; 13/01/2024
  8359 00000FE6 89C3                    	mov	bx,ax
  8360 00000FE8 EB70                    	JMP	short setend			     ; NO		;AN000;
  8361                                  
  8362                                  yesfat: ; 10/08/2018
  8363 00000FEA 89C2                    	MOV	DX,AX
  8364 00000FEC AC                      	LODSB
  8365                                  	;DEC	AL
  8366                                  	; 17/12/2022
  8367 00000FED 48                      	dec	ax
  8368 00000FEE AA                      	STOSB				; dpb_cluster_mask
  8369                                  	;INC	AL
  8370 00000FEF 40                      	inc	ax
  8371 00000FF0 30E4                    	XOR	AH,AH
  8372                                  LOG2LOOP:
  8373 00000FF2 A801                    	test	AL,1
  8374 00000FF4 7506                    	JNZ	short SAVLOG
  8375 00000FF6 FEC4                    	INC	AH
  8376 00000FF8 D0E8                    	SHR	AL,1
  8377 00000FFA EBF6                    	JMP	SHORT LOG2LOOP
  8378                                  SAVLOG:
  8379 00000FFC 88E0                    	MOV	AL,AH
  8380 00000FFE AA                      	STOSB				; dpb_cluster_shift
  8381 00000FFF 88C3                    	MOV	BL,AL
  8382 00001001 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8383 00001002 AC                      	LODSB
  8384 00001003 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8385                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8386                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8387 00001004 88C7                    	MOV	BH,AL
  8388 00001006 AD                      	LODSW
  8389 00001007 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8390 00001008 B105                    	MOV	CL,5
  8391 0000100A D3EA                    	SHR	DX,CL			; Directory entries per sector
  8392 0000100C 48                      	DEC	AX
  8393 0000100D 01D0                    	ADD	AX,DX			; Cause Round Up
  8394 0000100F 89D1                    	MOV	CX,DX
  8395 00001011 31D2                    	XOR	DX,DX
  8396 00001013 F7F1                    	DIV	CX
  8397 00001015 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8398 00001017 47                      	INC	DI
  8399 00001018 47                      	INC	DI			; Skip dpb_first_sector
  8400 00001019 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8401 0000101A AC                      	LODSB
  8402                                  	;mov	[es:bp+17h],al
  8403 0000101B 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8404 0000101F AD                      	LODSW				; Number of sectors in a FAT
  8405                                  	
  8406                                  	;;;
  8407                                  	;MSDOS 3.3
  8408                                  	;
  8409                                  	;STOSB		; DPB.FAT_SIZE
  8410                                  	;MUL	BH
  8411                                  	
  8412                                  	;MSDOS 6.0
  8413                                  	;
  8414 00001020 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8415 00001021 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8416 00001023 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8417 00001025 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8418                                  	;;;
  8419                                  	
  8420                                  	;add	ax,[es:bp+6]
  8421 00001027 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8422 0000102B AB                      	STOSW				; dpb_dir_sector
  8423 0000102C 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8424                                  	;mov	[es:bp+0Bh],ax
  8425 0000102E 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8426                                  	
  8427                                  	; MSDOS 6.0
  8428 00001032 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8429                                  	;;cmp	word [es:bp+0Dh],0
  8430                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8431                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8432                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8433                                  	; 15/12/2022
  8434                                  	; 28/07/2019
  8435 00001034 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8436 00001038 09DB                    	or	bx,bx
  8437 0000103A 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8438                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8439                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8440                                  	
  8441                                  
  8442 0000103C 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8443                                  	;mov	bx,[si+8]
  8444 0000103E 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8445                                  	;mov	dx,[si+10]
  8446 00001041 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8447 00001044 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8448 00001046 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8449 00001049 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8450 0000104B 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8451                                  rott:					;AN000;;F.C. >32mb
  8452 0000104D F8                      	CLC				;AN000;;F.C. >32mb
  8453 0000104E D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8454 00001050 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8455 00001052 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8456                                  norot:					;AN000;
  8457                                  	; 15/12/2022
  8458                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8459 00001054 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8460                                  normal_dpb:
  8461                                  	;;sub	ax,[es:bp+0Dh]
  8462                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8463                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8464                                  	; 15/12/2022
  8465                                  	; bx = [es:bp+DSKSIZ]
  8466                                  	;sub	ax,bx ; 28/07/2019
  8467                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8468                                  	; 15/12/2022
  8469 00001056 29C3                    	sub	bx,ax
  8470                                  	;NEG	AX			; Sectors in data area
  8471                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8472                                  	; 15/12/2022
  8473                                  	; CL = cluster shift
  8474                                  	; BX = number of data sectors 
  8475                                  	;SHR	AX,CL			; Div by sectors/cluster
  8476 00001058 D3EB                    	shr	bx,cl 
  8477                                  setend:
  8478                                  ;	M008 - CAS
  8479                                  ;
  8480                                  	; 15/12/2022
  8481 0000105A 43                      	inc	bx
  8482                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8483                                  ;
  8484                                  ;	There has been a bug in our fatsize calculation for so long
  8485                                  ;	  that we can't correct it now without causing some user to
  8486                                  ;	  experience data loss. There are even cases where allowing
  8487                                  ;	  the number of clusters to exceed the fats is the optimal
  8488                                  ;	  case -- where adding 2 more fat sectors would make the
  8489                                  ;	  data field smaller so that there's nothing to use the extra
  8490                                  ;	  fat sectors for.
  8491                                  ;
  8492                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8493                                  ;	  still report that there was a cluster left when the disk was
  8494                                  ;	  actually full. Very graceful failure for a corrupt system
  8495                                  ;	  configuration. There may be worse cases that were never
  8496                                  ;	  properly traced back to this bug. The problem cases only
  8497                                  ;	  occurred when partition sizes were very near FAT sector
  8498                                  ;	  rounding boundaries, which were rare cases.
  8499                                  ;
  8500                                  ;	Also, it's possible that some third-party partition program might
  8501                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8502                                  ;	  scheme. In this hypothetical case, the number of allocation
  8503                                  ;	  clusters which don't actually have FAT entries to represent
  8504                                  ;	  them might be larger and might create a more catastrophic
  8505                                  ;	  failure. So we'll provide the safeguard of limiting the
  8506                                  ;	  max_cluster to the amount that will fit in the FATs.
  8507                                  ;
  8508                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8509                                  
  8510                                  ;	make sure the number of fat sectors is actually enough to
  8511                                  ;	  hold that many clusters. otherwise, back the number of
  8512                                  ;	  clusters down
  8513                                  
  8514                                  	; 15/12/2022
  8515                                  	; bx = number of clusters
  8516                                  
  8517                                  	; 19/07/2018 - Retro DOS v3.0
  8518                                  	; MSDOS 6.0
  8519                                  	; 15/12/2022
  8520                                  	;mov	bx,ax			; remember calculated # clusters
  8521                                  
  8522                                  	; 01/08/2018 (MSDOS 3.3)
  8523                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8524                                  	;xor	ah,ah 
  8525                                  
  8526                                  	; 10/05/2019 - Retro DOS v4.0
  8527                                  	;mov	ax,[ES:BP+0Fh]
  8528 0000105B 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8529                                  
  8530                                  	;mul	word [es:bp+2]	
  8531 0000105F 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8532 00001063 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8533 00001067 720D                    	jb	short setend_fat12
  8534 00001069 D1EA                    	shr	dx,1
  8535                                  
  8536                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8537                                  	; 15/12/2022
  8538                                  ;cs3 7/2/92
  8539 0000106B 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8540                                  					; than enough for the maximum FAT,
  8541                                  					; so go ahead and use the calculated
  8542                                  					; number of clusters.
  8543                                  ;cs3 7/2/92
  8544                                  
  8545 0000106D D1D8                    	rcr	ax,1			; find number of entries
  8546 0000106F 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8547                                  ;					;  into 12-bit fatland?
  8548 00001072 7215                    	jb	short setend_faterr	; then go ahead and let the
  8549                                  ;					;  inconsistency pass through
  8550                                  ;					;  rather than lose data by
  8551                                  ;					;  correcting the fat type
  8552 00001074 EB0E                    	jmp	short setend_fat16
  8553                                  
  8554                                  setend_fat12:
  8555 00001076 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8556 00001078 11D2                    	adc	dx,dx
  8557                                  
  8558                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8559                                  ;cs3 7/2/92
  8560                                  	; 15/12/2022
  8561 0000107A 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8562 0000107D 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8563                                  					; here. Check for it and use
  8564                                  					; the calculated size in this case.
  8565                                  ;cs3 7/2/92
  8566                                  
  8567 0000107F 2EF736[D30F]            	div	word [cs:word3]
  8568                                  
  8569                                  setend_fat16:
  8570 00001084 48                      	dec	ax			; limit at 1
  8571 00001085 39D8                    	cmp	ax,bx			; is fat big enough?
  8572 00001087 7602                    	jbe	short setend_fat	; use max value that'll fit
  8573                                  
  8574                                  setend_faterr:
  8575 00001089 89D8                    	mov	ax,bx			; use calculated value
  8576                                  
  8577                                  setend_fat:
  8578                                  
  8579                                  ;	now ax = maximum legal cluster
  8580                                  
  8581                                  ;	end M008
  8582                                  
  8583                                  	;mov	[es:bp+0Dh], ax
  8584 0000108B 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8585                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8586                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8587 0000108F 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8588                                  					; Init so first ALLOC starts at
  8589                                  					; begining of FAT
  8590                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8591                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8592 00001095 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8593                                  
  8594 0000109B C3                      	retn
  8595                                  
  8596                                  ;EndProc $SETDPB
  8597                                  
  8598                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8599                                  
  8600                                  ;
  8601                                  ;----------------------------------------------------------------------------
  8602                                  ;
  8603                                  ;**	$Dup_PDB
  8604                                  ;
  8605                                  ; Inputs:   DX is new segment address of process
  8606                                  ;	    SI is end of new allocation block
  8607                                  ;
  8608                                  ;----------------------------------------------------------------------------
  8609                                  ;
  8610                                  
  8611                                  _$DUP_PDB:
  8612                                  
  8613                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8614                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8615                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8616                                  
  8617                                  	; MSDOS 3.3
  8618                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8619                                  	;MOV	DS,[CS:CurrentPDB]
  8620                                  
  8621                                  	; 15/05/2019 - Retro DOS v4.0
  8622                                  	; MSDOS 6.0
  8623 0000109C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8624 000010A1 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8625 000010A6 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8626                                  
  8627 000010AA 56                      	PUSH	SI
  8628 000010AB EB0A                    	JMP	SHORT CreateCopy
  8629                                  
  8630                                  ;
  8631                                  ;----------------------------------------------------------------------------
  8632                                  ;
  8633                                  ; Inputs:
  8634                                  ;	DX = Segment number of new base
  8635                                  ; Function:
  8636                                  ;	Set up program base and copy term and ^C from int area
  8637                                  ; Returns:
  8638                                  ;	None
  8639                                  ; Called at DOS init
  8640                                  ;
  8641                                  ;----------------------------------------------------------------------------
  8642                                  ;
  8643                                  
  8644                                  ; 15/05/2019 - Retro DOS v4.0
  8645                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8646                                  
  8647                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8648                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8649                                  
  8650                                  _$CREATE_PROCESS_DATA_BLOCK:
  8651                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8652 000010AD E8D5F3                  	CALL	Get_User_Stack
  8653                                  	;mov	ds,[si+14h]
  8654 000010B0 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8655                                  	;push	word [2]
  8656 000010B3 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8657                                  CreateCopy:
  8658 000010B7 8EC2                    	MOV	ES,DX
  8659                                  
  8660 000010B9 31F6                    	XOR	SI,SI			; copy entire PDB
  8661 000010BB 89F7                    	MOV	DI,SI
  8662 000010BD B98000                  	MOV	CX,128
  8663 000010C0 F3A5                    	REP	MOVSW
  8664                                  
  8665                                  ; DOS 3.3 7/9/86
  8666                                  	;mov	cx,20
  8667                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8668                                  	; 15/12/2022
  8669 000010C2 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8670                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8671                                  	;mov	cx,FILPERPROC
  8672                                  
  8673                                  	;mov	di,18h
  8674 000010C4 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8675                                  	;;PUSH	DS ; * 15/05/2019
  8676                                  	;;lds	si,[34h]
  8677                                  	;LDS	SI,[PDB.JFN_Pointer]
  8678                                  	;REP	MOVSB
  8679                                  	;;POP	DS ; * 15/05/2019
  8680                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8681                                  	; 05/12/2022
  8682                                  	; (push ds then pop ds is not needed here!)
  8683                                  	;push	ds
  8684                                  	;lds	si,[34h]
  8685 000010C7 C5363400                	lds	si,[PDB.JFN_Pointer]
  8686 000010CB F3A4                    	rep	movsb
  8687                                  	;pop	ds
  8688                                  
  8689                                  ; DOS 3.3 7/9/86
  8690                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8691                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8692                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8693                                  
  8694 000010CD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8695                                  
  8696                                  	;;test	byte [cs:CreatePDB],0FFh
  8697                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8698                                  	; 17/12/2022
  8699 000010D2 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8700                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8701 000010D6 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8702                                  
  8703                                  ; Here we set up for a new process...
  8704                                  
  8705                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8706                                  	;POP	DS
  8707                                  
  8708                                  	; MSDOS 6.0
  8709                                  	;;getdseg <ds>			; ds -> dosdata
  8710                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8711                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8712                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8713                                  	; 15/12/2022
  8714                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8715                                  
  8716 000010D8 31DB                    	XOR	BX,BX			; dup all jfns
  8717                                  	;mov	cx,20
  8718                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8719                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8720                                  	; 15/12/2022
  8721 000010DA B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8722                                  
  8723                                  Create_dup_jfn:
  8724 000010DC 06                      	PUSH	ES ;**			; save new PDB
  8725 000010DD E89D55                  	call	SFFromHandle		; get sf pointer
  8726 000010E0 B0FF                    	MOV	AL,-1			; unassigned JFN
  8727 000010E2 7224                    	JC	short CreateStash	; file was not really open
  8728                                  	;;test	word [es:di+5],1000h
  8729                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8730                                  	; 15/05/2019
  8731                                  	;test	byte [es:di+6],10h
  8732 000010E4 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8733 000010E9 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8734                                  
  8735                                  ; We do not inherit network file handles.
  8736                                  
  8737                                  	;mov	ah,[es:di+2]
  8738 000010EB 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8739                                  	;and	ah,0F0h
  8740 000010EF 80E4F0                  	AND	AH,SHARING_MASK
  8741                                  	;cmp	ah,70h
  8742 000010F2 80FC70                  	CMP	AH,SHARING_NET_FCB
  8743 000010F5 7411                    	jz	short CreateStash
  8744                                  
  8745                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8746                                  ; duplication operation.
  8747                                  
  8748 000010F7 893E[9E05]              	MOV	[THISSFT],DI
  8749 000010FB 8C06[A005]              	MOV	[THISSFT+2],ES
  8750 000010FF E84219                  	call	DOS_DUP 		; signal duplication
  8751                                  
  8752                                  ; get the old sfn for copy
  8753                                  
  8754 00001102 E85B55                  	call	pJFNFromHandle		; ES:DI is jfn
  8755 00001105 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8756                                  
  8757                                  ; Take AL (old sfn or -1) and stash it into the new position
  8758                                  
  8759                                  CreateStash:
  8760 00001108 07                      	POP	ES ;**
  8761                                  	;mov	[es:bx+18h],al
  8762 00001109 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8763 0000110D 43                      	INC	BX			; next jfn...
  8764 0000110E E2CC                    	LOOP	Create_dup_jfn
  8765                                  
  8766 00001110 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8767                                  	; 06/11/2022
  8768                                  	;mov	[es:16h],bx
  8769 00001114 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8770 00001119 8C06[3003]              	MOV	[CurrentPDB],ES
  8771                                  	;MOV	DS,BX ; 28/07/2019
  8772                                  	; 07/12/2022
  8773                                  	;mov	ds,[cs:DosDSeg]
  8774                                  	; 15/12/2022
  8775                                  	; ds = [cs:DosDSeg]
  8776 0000111D C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8777                                  	;mov	ds,bx
  8778                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8779                                  	; 15/12/2022
  8780                                  	;mov	ds,bx
  8781                                  
  8782                                  ; end of new process create
  8783                                  
  8784                                  Create_PDB_cont:
  8785                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8786                                  
  8787                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8788                                  
  8789                                  	;; 28/07/2019
  8790                                  	;;push	ds
  8791                                  	;;mov	ds,[cs:DosDSeg]
  8792                                  	;mov	byte [CreatePDB],0
  8793                                  	;;pop	ds
  8794                                  
  8795                                  ; 05/12/2022
  8796                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8797                                  ;	; (push-pop ds is nonsense here! 
  8798                                  ;	;  but i am using same code with original MSDOS.SYS
  8799                                  ;	;  for address compatibility.)
  8800                                  ;	push	ds
  8801                                  ;	; ds = [cs:DosDSeg] !
  8802                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8803                                  ;	mov	byte [CreatePDB],0
  8804                                  ;	pop	ds
  8805                                  
  8806 00001122 58                      	POP	AX ;*
  8807                                  
  8808                                  	;entry	SETMEM
  8809                                  
  8810                                  	; 17/12/2022
  8811                                  	; cx = 0
  8812                                  
  8813                                  ;---------------------------------------------------------------------------
  8814                                  ; Inputs:
  8815                                  ;	AX = Size of memory in paragraphs
  8816                                  ;	DX = Segment
  8817                                  ; Function:
  8818                                  ;	Completely prepares a program base at the
  8819                                  ;	specified segment.
  8820                                  ; Called at DOS init
  8821                                  ; Outputs:
  8822                                  ;	DS = DX
  8823                                  ;	ES = DX
  8824                                  ;	[0] has INT int_abort
  8825                                  ;	[2] = First unavailable segment
  8826                                  ;	[5] to [9] form a long call to the entry point
  8827                                  ;	[10] to [13] have exit address (from int_terminate)
  8828                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8829                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8830                                  ; DX,BP unchanged. All other registers destroyed.
  8831                                  ;---------------------------------------------------------------------------
  8832                                  
  8833                                  SETMEM:
  8834                                  	;XOR	CX,CX
  8835                                  	; 17/12/2022
  8836                                  	; cx = 0
  8837 00001123 8ED9                    	MOV	DS,CX
  8838 00001125 8EC2                    	MOV	ES,DX
  8839                                  	;mov	si,88h
  8840 00001127 BE8800                  	MOV	SI,addr_int_terminate
  8841                                  	;mov	di,10 ; 0Ah
  8842 0000112A BF0A00                  	MOV	DI,SAVEXIT
  8843                                  	;MOV	CX,6
  8844                                  	; 15/12/2022
  8845 0000112D B106                    	mov	cl,6
  8846 0000112F F3A5                    	REP	MOVSW
  8847 00001131 26A30200                	MOV	[ES:2],AX
  8848 00001135 29D0                    	SUB	AX,DX
  8849 00001137 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8850 0000113A 7603                    	JBE	short HAVDIF
  8851 0000113C B8FF0F                  	MOV	AX,MAXDIF
  8852                                  HAVDIF:
  8853 0000113F 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8854 00001142 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8855 00001145 29C3                    	SUB	BX,AX
  8856 00001147 B104                    	MOV	CL,4
  8857 00001149 D3E0                    	SHL	AX,CL
  8858 0000114B 8EDA                    	MOV	DS,DX
  8859                                  
  8860                                  	; (MSDOS 6.0 note)
  8861                                  	;
  8862                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8863                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8864                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8865                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8866                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8867                                  	; making this equvalence valid for this particular case. If however
  8868                                  	; there is less than 64K remaining the address in BX:AX will not 
  8869                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8870                                  	; into the PSP.
  8871                                  	;
  8872                                  	; Therefore for the case where there is less than 64K remaining in 
  8873                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8874                                  	; requirements will not work. Call 5, however will continue to work
  8875                                  	; for all cases.
  8876                                  	;
  8877                                  
  8878                                  	;mov	[6],ax
  8879                                  	;mov	[8],bx
  8880                                  
  8881 0000114D A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8882 00001150 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8883                                  
  8884                                  	; 06/05/2019 - Retro DOS v4.0
  8885 00001154 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8886                                  					;    memory left
  8887 00001157 740C                    	je	short addr_ok		; Y: the above calculated address is
  8888                                  					;    OK
  8889                                  					; N: 
  8890                                  
  8891 00001159 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8892 0000115F C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8893                                  addr_ok:
  8894                                  	;mov	word [0],20CDh
  8895 00001165 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8896                                  	;mov	byte [5],9Ah
  8897 0000116B C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8898                                  	;mov	word [50h],21CDh
  8899 00001170 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8900                                  	;mov	byte [52h],0CBh
  8901 00001176 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8902                                  	;mov	word [34h],18h
  8903 0000117B C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8904                                  	;mov	word [36h],ds
  8905 00001181 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8906                                  	;mov	word [32h],20
  8907 00001185 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8908                                  ;
  8909                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8910                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8911                                  ; particular SFT.  We perform this by requiring that the server link together
  8912                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8913                                  ; initialize this pointer.
  8914                                  ;
  8915                                   	;mov	word [38h],-1
  8916 0000118B C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8917                                  	;mov	word [3Ah],-1
  8918 00001191 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8919                                  
  8920                                  	; 06/05/2019
  8921                                  	; Set the real version number in the PSP - 5.00
  8922                                  
  8923                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8924                                  	; 07/12/2022
  8925 00001197 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8926                                  
  8927 0000119E C3                      	retn
  8928                                  
  8929                                  ; 29/04/2019 - Retro DOS v4.0
  8930                                  
  8931                                  ;BREAK <$GSetMediaID -- get set media ID>
  8932                                  
  8933                                  ;---------------------------------------------------------------------------
  8934                                  ; Inputs:
  8935                                  ;	BL= drive number as defined in IOCTL
  8936                                  ;	AL= 0 get media ID
  8937                                  ;	    1 set media ID
  8938                                  ;	DS:DX= buffer containing information
  8939                                  ;		DW  0  info level (set on input)
  8940                                  ;		DD  ?  serial #
  8941                                  ;		DB  11 dup(?)  volume id
  8942                                  ;		DB   8 dup(?)  file system type
  8943                                  ; Function:
  8944                                  ;	Get or set media ID
  8945                                  ; Returns:
  8946                                  ;	carry clear, DS:DX is filled
  8947                                  ;	carry set, error
  8948                                  ;---------------------------------------------------------------------------
  8949                                  
  8950                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8951                                  _$GSetMediaID:
  8952                                  	; RAWIO - GET_MEDIA_ID
  8953 0000119F B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8954 000011A2 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8955 000011A4 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8956                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8957                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8958                                  	; 15/12/2022
  8959 000011A6 FEC8                    	dec	al
  8960 000011A8 7507                    	jnz	short errorfunc ; al > 1
  8961                                  	; RAWIO - SET_MEDIA_ID
  8962                                  	;mov	cx,0846h	      ;AN001;MS.;
  8963                                  	; 15/12/2022
  8964 000011AA B146                    	mov	cl,46h	; cx = 0846h 
  8965                                  doioctl:			      ;AN000;
  8966 000011AC B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8967                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8968                                  	;call	_$IOCTL
  8969                                  	;retn			      ;AN000;MS.;
  8970                                  	; 15/12/2022
  8971 000011AE E9D110                  	jmp	_$IOCTL
  8972                                  errorfunc:			      ;AN000;
  8973                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8974                                  	;mov	al,1
  8975 000011B1 B001                    	mov	al,error_invalid_function
  8976 000011B3 E98EF4                  	jmp	SYS_RET_ERR
  8977                                  
  8978                                  ; 16/05/2019 - Retro DOS v4.0
  8979                                  
  8980                                  ;============================================================================
  8981                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8982                                  ;============================================================================
  8983                                  ; 20/07/2018 - Retro DOS v3.0
  8984                                  ; 29/04/2019 - Retro DOS v4.0
  8985                                  
  8986                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8987                                  ;----------------------------------------------------------------------------
  8988                                  ;
  8989                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8990                                  ;	     Strings of different lengths don't match.
  8991                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8992                                  ;   Outputs: Z if strings same, NZ if different
  8993                                  ;   Registers modified: NONE
  8994                                  ;----------------------------------------------------------------------------
  8995                                  
  8996                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8997                                  StrCmp:
  8998 000011B6 56                      	push	si
  8999 000011B7 57                      	push	di
  9000 000011B8 50                      	push	ax
  9001                                  Cmplp:
  9002 000011B9 AC                      	LODSB
  9003 000011BA E8933E                  	call	UCase			; convert to upper case
  9004 000011BD E8E53E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9005 000011C0 88C4                    	MOV	AH,AL
  9006 000011C2 268A05                  	MOV	AL,[ES:DI]
  9007 000011C5 47                      	INC	DI
  9008 000011C6 E8873E                  	call	UCase			; convert to upper case
  9009 000011C9 E8D93E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9010 000011CC 38C4                    	CMP	AH,AL
  9011 000011CE 7504                    	JNZ	short PopRet		; Strings dif
  9012                                  
  9013 000011D0 08C0                    	OR	AL,AL
  9014 000011D2 75E5                    	JNZ	short Cmplp		; More string
  9015                                  PopRet:
  9016 000011D4 58                      	pop	ax
  9017 000011D5 5F                      	pop	di
  9018 000011D6 5E                      	pop	si
  9019 000011D7 C3                      	retn
  9020                                  
  9021                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9022                                  ;----------------------------------------------------------------------------
  9023                                  ;
  9024                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9025                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9026                                  ;	characters.
  9027                                  ;
  9028                                  ;   Inputs:	DS:SI - pointer to source string
  9029                                  ;		ES:DI - pointer to destination string
  9030                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9031                                  ;		DS:SI point byte after nul byte at end of source string
  9032                                  ;   Registers modified: SI,DI
  9033                                  ;----------------------------------------------------------------------------
  9034                                  
  9035                                  StrCpy:
  9036 000011D8 50                      	push	ax
  9037                                  CPYLoop:
  9038 000011D9 AC                      	LODSB
  9039 000011DA E8733E                  	call	UCase			; convert to upper case
  9040 000011DD E8C53E                  	call	PATHCHRCMP		; convert / to \ ;
  9041 000011E0 AA                      	STOSB
  9042                                  
  9043 000011E1 08C0                    	OR	AL,AL
  9044 000011E3 75F4                    	JNZ	short CPYLoop
  9045 000011E5 58                      	pop	ax
  9046 000011E6 C3                      	retn
  9047                                  
  9048                                  ;----------------------------------------------------------------------------
  9049                                  ; Procedure Name : FStrCpy
  9050                                  ;----------------------------------------------------------------------------
  9051                                  
  9052                                  FStrCpy:
  9053 000011E7 50                      	push	ax
  9054                                  FCPYLoop:
  9055 000011E8 AC                      	LODSB
  9056 000011E9 AA                      	STOSB
  9057 000011EA 08C0                    	OR	AL,AL
  9058 000011EC 75FA                    	JNZ	short FCPYLoop
  9059 000011EE 58                      	pop	ax
  9060 000011EF C3                      	retn
  9061                                  
  9062                                  ; 20/07/2018 - Retro DOS v3.0
  9063                                  ;----------------------------------------------------------------------------
  9064                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9065                                  ;----------------------------------------------------------------------------
  9066                                  ;
  9067                                  ;UCase:	
  9068                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9069                                  ;	retn
  9070                                  
  9071                                  ;Break <StrLen - compute length of string ES:DI>
  9072                                  ;----------------------------------------------------------------------------
  9073                                  ;**	StrLen - Compute Length of String
  9074                                  ;
  9075                                  ;	StrLen computes the length of a string, including the trailing 00
  9076                                  ;
  9077                                  ;	ENTRY	(es:di) = address of string
  9078                                  ;	EXIT	(cx) = size of string
  9079                                  ;	USES	cx, flags
  9080                                  ;----------------------------------------------------------------------------
  9081                                  
  9082                                  StrLen:
  9083 000011F0 57                      	push	di
  9084 000011F1 50                      	push	ax
  9085                                  	;MOV	CX,-1
  9086 000011F2 B9FFFF                  	mov	cx,65535
  9087 000011F5 30C0                    	XOR	AL,AL
  9088 000011F7 F2AE                    	REPNE	SCASB
  9089 000011F9 F7D1                    	NOT	CX
  9090 000011FB 58                      	pop	ax
  9091 000011FC 5F                      	pop	di
  9092 000011FD C3                      	retn
  9093                                  
  9094                                  ;----------------------------------------------------------------------------
  9095                                  ;**	DStrLen - Compute Length of String
  9096                                  ;
  9097                                  ;	ENTRY	(ds:si) = address of string
  9098                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9099                                  ;	USES	cx, flags
  9100                                  ;----------------------------------------------------------------------------
  9101                                  
  9102                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9103 000011FE E80300                  	CALL	XCHGP
  9104 00001201 E8ECFF                  	CALL	StrLen
  9105                                  	;CALL	XCHGP
  9106                                  	;retn
  9107                                  	; 18/12/2022
  9108                                  	;jmp	short XCHGP
  9109                                  
  9110                                  ;----------------------------------------------------------------------------
  9111                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9112                                  ;
  9113                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9114                                  ;
  9115                                  ;	ENTRY	none
  9116                                  ;	EXIT	pairs exchanged
  9117                                  ;	USES	SI, DI, DS, ES
  9118                                  ;----------------------------------------------------------------------------
  9119                                  
  9120                                  XCHGP:
  9121 00001204 1E                      	push	ds
  9122 00001205 06                      	push	es
  9123 00001206 1F                      	pop	ds
  9124 00001207 07                      	pop	es
  9125 00001208 87F7                    	XCHG	SI,DI
  9126                                  xchgp_retn:
  9127 0000120A C3                      	retn
  9128                                  
  9129                                  ;Break	<Idle - wait for a specified amount of time>
  9130                                  ;----------------------------------------------------------------------------
  9131                                  ;
  9132                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9133                                  ;   	   we spin until RetryLoop is exhausted.
  9134                                  ;
  9135                                  ;   Inputs:	RetryLoop is the number of times we spin
  9136                                  ;   Outputs:	Wait
  9137                                  ;   Registers modified: none
  9138                                  ;----------------------------------------------------------------------------
  9139                                  
  9140                                  Idle:
  9141                                  	;test	byte [SS:FSHARING],0FFh
  9142 0000120B 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9143                                  	;retnz
  9144 00001211 75F7                    	jnz	short xchgp_retn
  9145                                  	;SAVE	<CX>
  9146 00001213 51                      	push	cx
  9147 00001214 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9148 00001219 E308                    	JCXZ	Idle3
  9149                                  Idle1:	
  9150 0000121B 51                      	PUSH	CX
  9151 0000121C 31C9                    	XOR	CX,CX
  9152                                  Idle2:	
  9153 0000121E E2FE                    	LOOP	Idle2
  9154 00001220 59                      	POP	CX
  9155 00001221 E2F8                    	LOOP	Idle1
  9156                                  Idle3:	
  9157                                  	;RESTORE <CX>
  9158 00001223 59                      	pop	cx
  9159 00001224 C3                      	retn
  9160                                  
  9161                                  ;Break	<TableDispatch - dispatch to a table>
  9162                                  ;----------------------------------------------------------------------------
  9163                                  ;
  9164                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9165                                  ;   routine. Preserve all input registers to the routine.
  9166                                  ;
  9167                                  ;   Inputs:	Push	return address
  9168                                  ;		Push	Table address
  9169                                  ;		Push	index (byte)
  9170                                  ;   Outputs:	appropriate routine gets jumped to.
  9171                                  ;		return indicates invalid index
  9172                                  ;   Registers modified: none.
  9173                                  ;----------------------------------------------------------------------------
  9174                                  
  9175                                  struc TFrame	 ; TableFrame
  9176 00000000 ????                    .OldBP:	 resw 1  ; 0
  9177 00000002 ????                    .OldRet: resw 1  ; 2
  9178 00000004 ??                      .Index:	 resb 1  ; 4
  9179 00000005 ??                      .Pad:	 resb 1  ; 5  
  9180 00000006 ????                    .Tab:	 resw 1  ; 6
  9181 00000008 ????                    .NewRet: resw 1  ; 8
  9182                                  endstruc
  9183                                  
  9184                                  TableDispatch:
  9185 00001225 55                      	PUSH	BP
  9186 00001226 89E5                    	MOV	BP,SP
  9187 00001228 53                      	PUSH	BX			; save BX
  9188                                  	;mov	bx,[bp+6]
  9189 00001229 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9190 0000122C 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9191                                  	;cmp	[bp+4],bl
  9192 0000122F 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9193 00001232 7317                    	JAE	short TableError	; yes
  9194                                  	;mov	bl,[bp+4]
  9195 00001234 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9196 00001237 30FF                    	XOR	BH,BH			; convert to word
  9197 00001239 D1E3                    	SHL	BX,1			; convert to word pointer
  9198 0000123B 43                      	INC	BX			; point past first length byte
  9199                                  	; 17/08/2018
  9200                                  	;add	bx,[bp+6]
  9201 0000123C 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9202 0000123F 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9203                                  	;mov	[bp+6],bx
  9204 00001242 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9205 00001245 5B                      	POP	BX			; restore BX
  9206 00001246 5D                      	POP	BP			; restore BP
  9207 00001247 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9208 0000124A C3                      	retn				; do operation
  9209                                  TableError:
  9210 0000124B 5B                      	POP	BX			; restore BX
  9211 0000124C 5D                      	POP	BP			; restore BP
  9212 0000124D C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9213                                  
  9214                                  ;Break	<TestNet - determine if a CDS is for the network>
  9215                                  ;----------------------------------------------------------------------------
  9216                                  ;
  9217                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9218                                  ;	network CDS. This will handle NULL cds also.
  9219                                  ;
  9220                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9221                                  ;   Outputs:	ES:DI = ThisCDS
  9222                                  ;		carry Set => network
  9223                                  ;		carry Clear => local
  9224                                  ;   Registers modified: none.
  9225                                  ;----------------------------------------------------------------------------
  9226                                  
  9227                                  TestNet:
  9228                                  	;LES	DI,[CS:THISCDS]
  9229                                  
  9230                                  	; 16/05/2019 - Retro DOS v4.0
  9231 00001250 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9232 00001255 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9233 0000125A 83FFFF                  	CMP	DI,-1
  9234 0000125D 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9235                                  	;;test	word [es:di+43h],8000h
  9236                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9237                                  	;test	byte [es:di+44h],80h
  9238 0000125F 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9239 00001264 7501                    	JNZ	short CMCRet		; jump has carry clear
  9240 00001266 C3                      	retn				; carry is clear
  9241                                  CMCRet: 
  9242 00001267 F5                      	CMC
  9243 00001268 C3                      	retn
  9244                                  
  9245                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9246                                  ;----------------------------------------------------------------------------
  9247                                  ;
  9248                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9249                                  ;	network file.
  9250                                  ;
  9251                                  ;   Inputs:	ES:DI point to SFT
  9252                                  ;   Outputs:	Zero set if not network sft
  9253                                  ;		zero reset otherwise
  9254                                  ;		Carry CLEAR!!!
  9255                                  ;   Registers modified: none.
  9256                                  ;----------------------------------------------------------------------------
  9257                                  
  9258                                  IsSFTNet:
  9259                                  	;;test	word [es:di+5],8000h
  9260                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9261                                  	; 16/05/2019 
  9262                                  	;test	byte [es:di+6],80h
  9263 00001269 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9264 0000126E C3                      	retn
  9265                                  
  9266                                  ;Break	<FastInit - Initialize FastTable entries >
  9267                                  ;----------------------------------------------------------------------------
  9268                                  ;   DOS 4.00   2/9/87
  9269                                  ;   FastInit  - initialize the FASTXXX routine entry
  9270                                  ;		  in the FastTable
  9271                                  ;
  9272                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9273                                  ;		DS:SI = address of FASTXXX routine entry
  9274                                  ;		   SI = -1 for query only
  9275                                  ;   Outputs:	Carry flag clear, if success
  9276                                  ;		Carry flag set,   if failure
  9277                                  ;
  9278                                  ;
  9279                                  ;----------------------------------------------------------------------------
  9280                                  
  9281                                  ;Procedure FastInit,NEAR
  9282                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9283                                  
  9284                                  ;	; MSDOS 3.3
  9285                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9286                                  ;FastInit:
  9287                                  ;	mov	di,FastTable ; FastOpenTable
  9288                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9289                                  ;	mov	bx,cs			; get DOS segment
  9290                                  ;	cmp	ax,bx			; first time installed ?	
  9291                                  ;	je	short ok_install	; yes
  9292                                  ;	stc				; set carry
  9293                                  ;	retn				; (cf=1 means) already installed !
  9294                                  ;
  9295                                  ;ok_install:
  9296                                  ;	mov	bx,FastTable ; FastOpenTable
  9297                                  ;	mov	cx,ds
  9298                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9299                                  ;	mov	[cs:bx+4],cx
  9300                                  ;	mov	[cs:bx+2],si
  9301                                  ;	retn
  9302                                  
  9303                                  ; 16/05/2019 - Retro DOS v4.0
  9304                                  
  9305                                  FastInit:
  9306                                  	; MSDOS 6.0
  9307                                  	;hkn; set up es to dosdataseg.
  9308 0000126F 06                      	push	es
  9309                                  	;getdseg <es>			; es -> dosdata
  9310 00001270 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9311                                  
  9312                                  	;hkn; FastTable is in DOSDATA
  9313 00001275 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9314 00001278 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9315 00001279 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9316 0000127B D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9317 0000127D D1E3                    	SHL	BX,1			;AN000;FO.
  9318 0000127F 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9319 00001281 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9320                                  fcheck: 				;AN000;
  9321 00001285 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9322 00001287 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9323 00001289 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9324 0000128B 09C0                    	OR	AX,AX			;AN000;FO.;
  9325                                  	;JZ	short ok_install	;AN000;FO.;
  9326                                  	;STC				;AN000;FO.;; already installed !
  9327                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9328                                  	; 14/01/2024
  9329 0000128D F9                      	stc
  9330 0000128E 7517                    	jnz	short FSret
  9331                                  ok_install:				;AN000;
  9332 00001290 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9333 00001293 7412                    	JZ	short FSret		;AN000;FO.; yes
  9334 00001295 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9335 00001297 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9336 0000129B 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9337                                  
  9338                                  ;hkn; FastFlg moved to DOSDATA
  9339 0000129E BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9340 000012A1 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9341                                  	;or	byte [es:di],80h
  9342 000012A3 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9343                                  FSret:					;AN000;
  9344 000012A7 07                      	pop	es
  9345 000012A8 C3                      	retn				;AN000;FO.
  9346                                  
  9347                                  ;EndProc FastInit
  9348                                  
  9349                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9350                                  ;----------------------------------------------------------------------------
  9351                                  ;   DOS 3.3   6/10/86
  9352                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9353                                  ;
  9354                                  ;   Inputs:	None
  9355                                  ;   Outputs:	AX = -1 and carry flag set
  9356                                  ;
  9357                                  ;   Registers modified: none.
  9358                                  ;----------------------------------------------------------------------------
  9359                                  
  9360                                  FastRet:
  9361                                  	;mov	ax,-1
  9362                                  	;stc
  9363                                  	;retf
  9364 000012A9 F9                      	STC
  9365 000012AA 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9366 000012AC CB                      	RETF
  9367                                  
  9368                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9369                                  ;----------------------------------------------------------------------------
  9370                                  ;   DOS 3.3   6/10/86
  9371                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9372                                  ;
  9373                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9374                                  ;   Outputs:	same output as $OPEN
  9375                                  ;
  9376                                  ;----------------------------------------------------------------------------
  9377                                  
  9378                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9379                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9380                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9381                                  
  9382                                  NLS_OPEN:
  9383                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9384                                  ;	MOV	BYTE [CPSWFLAG],0
  9385                                  ;	PUSH	BX		 ; save current state
  9386                                  
  9387 000012AD 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9388 000012AF E8355C                  	call	_$OPEN
  9389                                  
  9390                                  ;	POP	BX		 ; restore current state
  9391                                  ;	MOV	[CPSWFLAG],BL
  9392                                  	
  9393 000012B2 C3                      	RETN
  9394                                  
  9395                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9396                                  ;----------------------------------------------------------------------------
  9397                                  ;   DOS 3.3   6/10/86
  9398                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9399                                  ;
  9400                                  ;   Inputs:	BP = open mode
  9401                                  ;   Outputs:	same output as $LSEEK
  9402                                  ;
  9403                                  ;----------------------------------------------------------------------------
  9404                                  
  9405                                  ; 16/05/2019 - Retro DOS v4.0
  9406                                  
  9407                                  NLS_LSEEK:
  9408 000012B3 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9409 000012B8 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9410 000012BD E81000                  	CALL	Fake_User_Stack
  9411 000012C0 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9412 000012C2 E8CF55                  	call	_$LSEEK
  9413 000012C5 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9414 000012CA 368F06[8405]            	POP	word [SS:USER_SP]
  9415 000012CF C3                      	RETN
  9416                                  
  9417                                  ;Break	<Fake_User_Stack - save user stack>
  9418                                  ;----------------------------------------------------------------------------
  9419                                  ;   DOS 3.3   6/10/86
  9420                                  ;   Fake_User_Stack - save user stack pointer
  9421                                  ;
  9422                                  ;----------------------------------------------------------------------------
  9423                                  
  9424                                  Fake_User_Stack:
  9425 000012D0 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9426 000012D4 36A3[8405]              	MOV	[SS:USER_SP],AX
  9427 000012D8 8CD0                    	MOV	AX,SS
  9428 000012DA 36A3[8605]              	MOV	[SS:USER_SS],AX
  9429 000012DE C3                      	RETN
  9430                                  
  9431                                  ;Break	<GetDevList - get device header list pointer>
  9432                                  ;----------------------------------------------------------------------------
  9433                                  ;   DOS 3.3   7/25/86
  9434                                  ;   GetDevList - get device header list pointer
  9435                                  ;
  9436                                  ;   Output: AX:BX points to the device header list
  9437                                  ;----------------------------------------------------------------------------
  9438                                  
  9439                                  GetDevList:
  9440                                  	; 16/05/2019 - Retro DOS v4.0
  9441 000012DF BE[280D]                	MOV	SI,SysInitTable
  9442 000012E2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9443 000012E7 C534                    	LDS	SI,[SI]
  9444                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9445 000012E9 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9446                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9447 000012EC 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9448 000012EF C3                      	RETN
  9449                                  
  9450                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9451                                  ;----------------------------------------------------------------------------
  9452                                  ;   DOS 3.3   7/25/86
  9453                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9454                                  ;
  9455                                  ;   Inputs:	BP = function code 0CH
  9456                                  ;   Outputs:	same output as generic $IOCTL
  9457                                  ;
  9458                                  ;----------------------------------------------------------------------------
  9459                                  
  9460                                  NLS_IOCTL:
  9461                                  	; 16/05/2019 - Retro DOS v4.0
  9462 000012F0 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9463 000012F5 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9464 000012FA E8D3FF                  	CALL	Fake_User_Stack
  9465 000012FD 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9466 000012FF E8800F                  	call	_$IOCTL
  9467 00001302 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9468 00001307 368F06[8405]            	POP	word [SS:USER_SP]
  9469 0000130C C3                      	RETN
  9470                                  
  9471                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9472                                  ;----------------------------------------------------------------------------
  9473                                  ;   DOS 3.3   7/25/86
  9474                                  ;   NLS_GETEXT	-
  9475                                  ;
  9476                                  ;   Inputs:	none
  9477                                  ;   Outputs:	AX = extended error
  9478                                  ;
  9479                                  ;----------------------------------------------------------------------------
  9480                                  
  9481                                  NLS_GETEXT:
  9482                                  	; 16/05/2019 - Retro DOS v4.0
  9483 0000130D 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9484                                  	; 23/09/2023
  9485                                  MSG_RETRIEVAL:
  9486 00001311 C3                      	RETN
  9487                                  
  9488                                  ; 29/04/2019 - Retro DOS v4.0
  9489                                  
  9490                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9491                                  
  9492                                  ;----------------------------------------------------------------------------
  9493                                  ;   DOS 4.00
  9494                                  ;
  9495                                  ;   Inputs:	DL=0 get extended error message addr
  9496                                  ;		  =1 set extended error message addr
  9497                                  ;		  =2 get parser error message addr
  9498                                  ;		  =3 set parser error message addr
  9499                                  ;		  =4 get critical error message addr
  9500                                  ;		  =5 set critical error message addr
  9501                                  ;		  =6 get file system error message addr
  9502                                  ;		  =7 set file system error message addr
  9503                                  ;		  =8 get address for code reduction
  9504                                  ;		  =9 set address for code reduction
  9505                                  ;   Function:	get/set message address
  9506                                  ;   Outputs:	ES:DI points to addr when get
  9507                                  ;----------------------------------------------------------------------------
  9508                                  
  9509                                  ;Procedure MSG_RETRIEVAL,NEAR
  9510                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9511                                  
  9512                                  ; 23/09/2023
  9513                                  ;MSG_RETRIEVAL:
  9514                                  
  9515                                  ;;	NOTE:  This function lives in command.com resident code now.
  9516                                  ;;	If the int 2F ever gets this far, we'll return registers
  9517                                  ;;	unchanged, which produces the same result as before, if
  9518                                  ;;	command.com wasn't present (and therefore no messages available).
  9519                                  ;;
  9520                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9521                                  ;;	No_Op zeroes AL.
  9522                                  ;;
  9523                                  ;;;hkn; set up ds to point to DOSDATA
  9524                                  ;;	push	ds
  9525                                  ;;	getdseg	<ds>			; ds -> dosdata
  9526                                  ;;
  9527                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9528                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9529                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9530                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9531                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9532                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9533                                  ;;	DEC	AL		    ;AN000;;MS.
  9534                                  ;;toget:				    ;AN000;
  9535                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9536                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9537                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9538                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9539                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9540                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9541                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9542                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9543                                  ;;getget: 				     ;AN000;
  9544                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9545                                  ;;MSGret: 				     ;AN000;
  9546                                  ;;	POP	SI			     ;AN000;;MS.
  9547                                  ;;	POP	AX			     ;AN000;;MS.
  9548                                  ;;
  9549                                  ;;	pop	ds
  9550                                  
  9551                                  ;	return				     ;AN000;;MS. exit
  9552                                  
  9553                                  ; 23/09/2023
  9554                                  ;	retn	; 29/04/2019
  9555                                  
  9556                                  ;============================================================================
  9557                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9558                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9559                                  ;============================================================================
  9560                                  ; 20/07/2018 - Retro DOS v3.0
  9561                                  
  9562                                  ;	; MSDOS 3.3
  9563                                  ;	; 08/08/2018 - Retro DOS v3.0
  9564                                  ;ECritMEM:
  9565                                  ;ECritSFT:
  9566                                  ;	;
  9567                                  ;ECritDisk:
  9568                                  ;	retn
  9569                                  ;	;push	ax
  9570                                  ;	
  9571                                  ;	mov	ax,8001h
  9572                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9573                                  ;			; AL = critical section number (00h-0Fh)
  9574                                  ;	pop	ax
  9575                                  ;	retn
  9576                                  ;
  9577                                  ;	; MSDOS 3.3
  9578                                  ;	; 08/08/2018 - Retro DOS v3.0
  9579                                  ;LCritMEM:
  9580                                  ;LCritSFT:
  9581                                  ;	;
  9582                                  ;LCritDisk:
  9583                                  ;	retn
  9584                                  ;	;push	ax
  9585                                  ;	
  9586                                  ;	mov	ax,8101h
  9587                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9588                                  ;			; AL = critical section number (00h-0Fh)
  9589                                  ;	pop	ax
  9590                                  ;	retn
  9591                                  ;
  9592                                  ;ECritDevice:
  9593                                  ;	retn
  9594                                  ;	;push	ax
  9595                                  ;	
  9596                                  ;	mov	ax,8002h
  9597                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9598                                  ;			; AL = critical section number (00h-0Fh)
  9599                                  ;	pop	ax
  9600                                  ;	retn
  9601                                  ;
  9602                                  ;LCritDevice:
  9603                                  ;	retn
  9604                                  ;	;push	ax
  9605                                  ;	
  9606                                  ;	mov	ax,8102h
  9607                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9608                                  ;			; AL = critical section number (00h-0Fh)
  9609                                  ;	pop	ax
  9610                                  ;	retn
  9611                                  
  9612                                  ;============================================================================
  9613                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9614                                  ;============================================================================
  9615                                  ; 12/05/2019 - Retro DOS v4.0
  9616                                  
  9617                                  ; Critical Section Routines
  9618                                  
  9619                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9620                                  
  9621                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9622                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9623                                  
  9624                                  ; ---------------------------------------------------------------------------
  9625                                  ; Each handler must leave everything untouched; including flags!
  9626                                  ;
  9627                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9628                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9629                                  ; ---------------------------------------------------------------------------
  9630                                  
  9631                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9632                                  ; ---------------------------------------------------------------------------
  9633                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9634                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9635                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9636                                  ; ---------------------------------------------------------------------------
  9637                                  
  9638                                  ;%macro POPFF 0
  9639                                  ;	jmp	$+3
  9640                                  ;	iret
  9641                                  ;	push	cs
  9642                                  ;	call	$-2
  9643                                  ;%endmacro
  9644                                  
  9645                                  ; ---------------------------
  9646                                  
  9647                                  ;Procedure  ECritDisk,NEAR
  9648                                  	;public  ECritMEM
  9649                                  	;public  ECritSFT
  9650                                  ECritMEM:
  9651                                  ECritSFT:
  9652                                  ;
  9653                                  ECritDisk:
  9654                                  
  9655                                  ;SR; Check if critical section is to be entered
  9656                                  
  9657 00001312 9C                      	pushf
  9658 00001313 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9659 00001319 740D                    	jz	short ECritDisk_2
  9660                                  
  9661                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9662                                  ;	;popff  ; * (macro)
  9663                                  ;	jmp	short ECritDisk_1 ; *
  9664                                  ;
  9665                                  ;ECritDisk_iret: ; *
  9666                                  ;	iret ; *
  9667                                  
  9668                                  	; 16/12/2022
  9669                                  	; 13/11/2022
  9670                                  	;jmp	short ECritDisk_1
  9671                                  	; 06/11/2022
  9672                                  ;ECritDisk_iret:
  9673                                  ;	iret	
  9674                                  
  9675                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9676                                  ECritDisk_1:
  9677 0000131B 0E                      	push	cs ; *
  9678 0000131C E80800                  	call	ECritDisk_iret ; *		
  9679                                  	
  9680                                  ECritDisk_0:
  9681 0000131F 50                      	PUSH    AX
  9682                                  	;MOV	AX,8000h+critDisk
  9683                                  	;INT	int_IBM
  9684 00001320 B80180                  	mov	ax,8001h
  9685 00001323 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9686                                  			; AL = critical section number (00h-0Fh)
  9687 00001325 58                      	POP     AX
  9688 00001326 C3                      	retn
  9689                                  
  9690                                  	; 16/12/2022
  9691                                  	; 13/11/2022
  9692                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9693                                  LCritDisk_iret: 
  9694 00001327 CF                      	iret
  9695                                  
  9696                                  ECritDisk_2:
  9697                                  	;;popff ; *
  9698                                  	;;retn
  9699                                  ;	jmp	short ECritDisk_3 ; *
  9700                                  ;ECritDisk_iret2: ; *
  9701                                  ;	iret
  9702                                  	
  9703                                  	; 16/12/2022
  9704                                  	; 13/11/2022
  9705                                  	;jmp	short ECritDisk_3
  9706                                  ;ECritDisk_iret2:
  9707                                  	;iret
  9708                                  
  9709                                  ECritDisk_3:
  9710 00001328 0E                      	push    cs ; *
  9711                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9712                                  	;call	ECritDisk_iret2 ; *
  9713                                  	;retn
  9714                                  	; 16/12/2022
  9715 00001329 E8FBFF                  	call	ECritDisk_iret
  9716 0000132C C3                      	retn
  9717                                  
  9718                                  ;EndProc ECritDisk
  9719                                  
  9720                                  ; ---------------------------
  9721                                  
  9722                                  ;Procedure   LCritDisk,NEAR
  9723                                  	;public  LCritMEM
  9724                                  	;public  LCritSFT
  9725                                  LCritMEM:
  9726                                  LCritSFT:
  9727                                  ;
  9728                                  LCritDisk:
  9729                                  
  9730                                  ;SR; Check if critical section is to be entered
  9731                                  
  9732 0000132D 9C                      	pushf
  9733 0000132E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9734 00001334 740C                    	jz	short LCritDisk_2
  9735                                  	;popff  ; * (macro)
  9736                                  ;	jmp	short LCritDisk_1 ; *
  9737                                  ;
  9738                                  ;LCritDisk_iret: ; *
  9739                                  ;	iret ; *
  9740                                  
  9741                                  	; 16/12/2022
  9742                                  	; 13/11/2022
  9743                                  	;jmp	short LCritDisk_1
  9744                                  ;LCritDisk_iret:
  9745                                  	;iret
  9746                                  
  9747                                  LCritDisk_1:
  9748 00001336 0E                      	push	cs ; *
  9749 00001337 E8EDFF                  	call	LCritDisk_iret ; *		
  9750                                  	
  9751                                  LCritDisk_0:
  9752 0000133A 50                      	PUSH	AX
  9753                                  	;MOV	AX,8100h+critDisk
  9754                                  	;INT	int_IBM
  9755 0000133B B80181                  	mov	ax,8101h
  9756 0000133E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9757                                  			; AL = critical section number (00h-0Fh)
  9758 00001340 58                      	POP	AX
  9759 00001341 C3                      	retn
  9760                                  
  9761                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9762                                  ;	iret
  9763                                  
  9764                                  LCritDisk_2:
  9765                                  	;;popff ; *
  9766                                  	;;retn
  9767                                  ;	jmp	short LCritDisk_3 ; *
  9768                                  ;LCritDisk_iret2: ; *
  9769                                  ;	iret
  9770                                  
  9771                                  	; 16/12/2022
  9772                                  	; 13/11/2022
  9773                                  	;jmp	short LCritDisk_3
  9774                                  ;LCritDisk_iret2:
  9775                                  	;iret
  9776                                  
  9777                                  LCritDisk_3:
  9778 00001342 0E                      	push    cs ; *
  9779                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9780                                  	;call	LCritDisk_iret2 ; *
  9781                                  	;retn
  9782                                  	; 16/12/2022
  9783 00001343 E8E1FF                  	call	LCritDisk_iret
  9784 00001346 C3                      	retn
  9785                                  
  9786                                  ;EndProc LCritDisk
  9787                                  
  9788                                  ; ---------------------------
  9789                                  
  9790                                  ;Procedure   ECritDevice,NEAR
  9791                                  
  9792                                  ECritDevice:
  9793                                  
  9794                                  ;SR; Check if critical section is to be entered
  9795                                  
  9796 00001347 9C                      	pushf
  9797 00001348 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9798 0000134E 740D                    	jz	short ECritDevice_2
  9799                                  	;popff  ; * (macro)
  9800                                  ;	jmp	short ECritDevice_1 ; *
  9801                                  ;
  9802                                  ;ECritDevice_iret: ; *
  9803                                  ;	iret ; *
  9804                                  
  9805                                  	; 16/12/2022	
  9806                                  	; 13/11/2022
  9807                                  	;jmp	short ECritDevice_1
  9808                                  ;ECritDevice_iret:
  9809                                  	;iret
  9810                                  
  9811                                  ECritDevice_1:
  9812 00001350 0E                      	push	cs ; *
  9813 00001351 E80800                  	call	ECritDevice_iret ; *		
  9814                                  	
  9815                                  ECritDevice_0:
  9816 00001354 50                      	PUSH	AX
  9817                                  	;MOV	AX,8000h+critDevice
  9818                                  	;INT	int_IBM
  9819 00001355 B80280                  	mov	ax,8002h
  9820 00001358 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9821                                  			; AL = critical section number (00h-0Fh)
  9822 0000135A 58                      	POP     AX
  9823 0000135B C3                      	retn
  9824                                  
  9825                                  	; 16/12/2022
  9826                                  	; 06/12/2022
  9827                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9828                                  LCritDevice_iret: 
  9829 0000135C CF                      	iret
  9830                                  
  9831                                  ECritDevice_2:
  9832                                  	;;popff ; *
  9833                                  	;;retn
  9834                                  ;	jmp	short ECritDevice_3 ; *
  9835                                  ;ECritDevice_iret2: ; *
  9836                                  ;	iret
  9837                                  
  9838                                  	; 16/12/2022
  9839                                  	; 13/11/2022
  9840                                  	;jmp	short ECritDevice_3
  9841                                  ;ECritDevice_iret2:
  9842                                  	;iret
  9843                                  
  9844                                  ECritDevice_3:
  9845 0000135D 0E                      	push    cs ; *
  9846                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9847                                  	;call	ECritDevice_iret2 ; *
  9848                                  	;retn
  9849                                  	; 16/12/2022
  9850 0000135E E8FBFF                  	call	ECritDevice_iret
  9851 00001361 C3                      	retn
  9852                                  
  9853                                  ;EndProc ECritDevice
  9854                                  
  9855                                  ; ---------------------------
  9856                                  
  9857                                  ;Procedure   LCritDevice,NEAR
  9858                                  
  9859                                  LCritDevice:
  9860                                  
  9861                                  ;SR; Check if critical section is to be entered
  9862                                  
  9863 00001362 9C                      	pushf
  9864 00001363 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9865 00001369 740C                    	jz	short LCritDevice_2
  9866                                  	;popff  ; * (macro)
  9867                                  ;	jmp	short LCritDevice_1 ; *
  9868                                  ;
  9869                                  ;LCritDevice_iret: ; *
  9870                                  ;	iret ; *
  9871                                  
  9872                                  	; 16/12/2022
  9873                                  	; 13/11/2022
  9874                                  	;jmp	short LCritDevice_1
  9875                                  ;LCritDevice_iret:
  9876                                  	;iret
  9877                                  
  9878                                  LCritDevice_1:
  9879 0000136B 0E                      	push	cs ; *
  9880 0000136C E8EDFF                  	call	LCritDevice_iret ; *		
  9881                                  	
  9882                                  LCritDevice_0:
  9883 0000136F 50                      	PUSH	AX
  9884                                  	;MOV	AX,8100h+critDevice
  9885                                  	;INT	int_IBM
  9886 00001370 B80281                  	mov	ax,8102h
  9887 00001373 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9888                                  			; AL = critical section number (00h-0Fh)
  9889 00001375 58                      	POP     AX
  9890 00001376 C3                      	retn
  9891                                  
  9892                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9893                                  ;	iret
  9894                                  
  9895                                  LCritDevice_2:
  9896                                  	;;popff ; *
  9897                                  	;;retn
  9898                                  ;	jmp	short LCritDevice_3 ; *
  9899                                  ;LCritDevice_iret2: ; *
  9900                                  ;	iret
  9901                                  
  9902                                  	; 16/12/2022
  9903                                  	; 13/11/2022
  9904                                  	;jmp	short LCritDevice_3
  9905                                  ;LCritDevice_iret2:
  9906                                  	;iret
  9907                                  
  9908                                  LCritDevice_3:
  9909 00001377 0E                      	push    cs ; *
  9910                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9911                                  	;call	LCritDevice_iret2 ; *
  9912                                  	;retn
  9913                                  	; 16/12/2022
  9914 00001378 E8E1FF                  	call	LCritDevice_iret
  9915 0000137B C3                      	retn
  9916                                  
  9917                                  ;EndProc LCritDevice
  9918                                  
  9919                                  ;============================================================================
  9920                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9921                                  ;============================================================================
  9922                                  ; 20/07/2018 - Retro DOS v3.0
  9923                                  
  9924                                  ;============================================================================
  9925                                  ; STDIO.ASM - (MSDOS 2.0)
  9926                                  ;============================================================================
  9927                                  
  9928                                  ;
  9929                                  ; Standard device IO for MSDOS (first 12 function calls)
  9930                                  ;
  9931                                  
  9932                                  ;.xlist
  9933                                  ;.xcref
  9934                                  ;INCLUDE STDSW.ASM
  9935                                  ;INCLUDE DOSSEG.ASM
  9936                                  ;.cref
  9937                                  ;.list
  9938                                  
  9939                                  ;TITLE   STDIO - device IO for MSDOS
  9940                                  ;NAME    STDIO
  9941                                  
  9942                                  ;INCLUDE IO.ASM
  9943                                  
  9944                                  ; ---------------------------------------------------------------------------
  9945                                  ;
  9946                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9947                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9948                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9949                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9950                                  ;			    to restore MSDOS 2.0 device IO source code 
  9951                                  ;
  9952                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9953                                  	
  9954                                  ;============================================================================
  9955                                  ; STDIO.ASM - (MSDOS 2.0)
  9956                                  ;============================================================================
  9957                                  
  9958                                  ;
  9959                                  ; Standard device IO for MSDOS (first 12 function calls)
  9960                                  ;
  9961                                  
  9962                                  ;.xlist
  9963                                  ;.xcref
  9964                                  ;INCLUDE STDSW.ASM
  9965                                  ;INCLUDE DOSSEG.ASM
  9966                                  ;.cref
  9967                                  ;.list
  9968                                  
  9969                                  ;TITLE   STDIO - device IO for MSDOS
  9970                                  ;NAME    STDIO
  9971                                  
  9972                                  ;INCLUDE IO.ASM
  9973                                  
  9974                                  ; ---------------------------------------------------------------------------
  9975                                  ;
  9976                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9977                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9978                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9979                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9980                                  ;			    to restore MSDOS 2.0 device IO source code 
  9981                                  ;
  9982                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9983                                  ;
  9984                                  ;============================================================================
  9985                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9986                                  ;============================================================================
  9987                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9988                                  
  9989                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9990                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9991                                  
  9992                                  ;============================================================================
  9993                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9994                                  ;============================================================================
  9995                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9996                                  
  9997                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9998                                  
  9999                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10000                                  ;
 10001                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10002                                  ;	NAME	IBMCPMIO
 10003                                  
 10004                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10005                                  ;
 10006                                  ;	$Std_Con_Input_No_Echo
 10007                                  ;	$Std_Con_String_Output
 10008                                  ;	$Std_Con_String_Input
 10009                                  ;	$RawConIO
 10010                                  ;	$RawConInput
 10011                                  ;	RAWOUT
 10012                                  ;	RAWOUT2
 10013                                  ;
 10014                                  
 10015                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10016                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10017                                  ; references to be SS or CS relative which is desired.
 10018                                  
 10019                                  ; ---------------------------------------------------------------------------
 10020                                  
 10021                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10022                                  ;	NAME	CPMIO2
 10023                                  
 10024                                  ;
 10025                                  ;	Microsoft Confidential
 10026                                  ;	Copyright (C) Microsoft Corporation 1991
 10027                                  ;	All Rights Reserved.
 10028                                  ;
 10029                                  
 10030                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10031                                  ;
 10032                                  ;	$Std_Con_Input
 10033                                  ;	$Std_Con_Output
 10034                                  ;	OUTT
 10035                                  ;	TAB
 10036                                  ;	BUFOUT
 10037                                  ;	$Std_Aux_Input
 10038                                  ;	$Std_Aux_Output
 10039                                  ;	$Std_Printer_Output
 10040                                  ;	$Std_Con_Input_Status
 10041                                  ;	$Std_Con_Input_Flush
 10042                                  ;
 10043                                  ;	Revision History:
 10044                                  ;
 10045                                  ;	  AN000	 version 4.00 - Jan. 1988
 10046                                  
 10047                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10048                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10049                                  ; references to be SS or CS relative which is desired.
 10050                                  
 10051                                  ;DOSCODE SEGMENT
 10052                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10053                                  
 10054                                  
 10055                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10056                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10057                                  ;hkn;	not valid. 
 10058                                  
 10059                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10060                                  ; 08/11/2022
 10061                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10062                                  
 10063                                  ;
 10064                                  ;----------------------------------------------------------------------------
 10065                                  ;
 10066                                  ; Procedure : $Std_Con_Input_No_Echo
 10067                                  ;
 10068                                  ;----------------------------------------------------------------------------
 10069                                  ;
 10070                                  
 10071                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10072                                  
 10073                                  ; Inputs:
 10074                                  ;	None
 10075                                  ; Function:
 10076                                  ;	Input character from console, no echo
 10077                                  ; Returns:
 10078                                  ;	AL = character
 10079                                  
 10080 0000137C 1E                      	push	ds
 10081 0000137D 56                      	push	si
 10082                                  INTEST:
 10083 0000137E E8EE3D                  	call	STATCHK
 10084 00001381 753B                    	jnz	short GET ; 08/09/2018
 10085                                  ;*************************************************************************
 10086                                  ;hkn; SS override
 10087 00001383 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10088 00001389 7505                    	jnz	short no_sys_wait
 10089 0000138B B405                    	mov	ah,5			; get input status with system wait
 10090 0000138D E81631                  	call	IOFUNC
 10091                                  no_sys_wait:
 10092                                  ;**************************************************************************
 10093 00001390 B484                    	MOV	AH,84h
 10094 00001392 CD2A                    	INT	int_IBM	 ; int 2Ah
 10095                                  
 10096                                  ;;; 7/15/86  update the date in the idle loop
 10097                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10098                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10099                                  
 10100                                  ;hkn; SS override
 10101 00001394 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10102 0000139A 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10103                                  
 10104 0000139C 50                      	PUSH	AX
 10105 0000139D 53                      	PUSH	BX			; following is tricky,
 10106 0000139E 51                      	PUSH	CX			; it may be called by critical handler
 10107 0000139F 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10108                                  					; other's READ or WRITE
 10109 000013A0 1E                      	PUSH	DS			; save DS = SFT's segment
 10110                                  
 10111                                  ;hkn; READTIME must use ds = DOSDATA
 10112                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10113                                  
 10114 000013A1 16                      	PUSH	SS ; 04/05/2019
 10115 000013A2 1F                      	POP	DS
 10116                                  
 10117 000013A3 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10118 000013A6 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10119                                  	;invoke	READTIME		; readtime
 10120 000013A9 E873F7                  	call	READTIME
 10121 000013AC B80100                  	MOV	AX,1
 10122 000013AF E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10123                                  
 10124                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10125                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10126                                  ;	push	bx
 10127                                  ;	mov	bx,DATE_FLAG
 10128                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10129                                  ;	cmp	word [cs:bx],5872h
 10130                                  ;	jz	short FETCHI_TAG_chk_ok
 10131                                  ;	call	DOSINIT
 10132                                  ;FETCHI_TAG_chk_ok:
 10133                                  ;	pop	bx
 10134                                  
 10135 000013B2 1F                      	POP	DS			; restore DS
 10136 000013B3 5A                      	POP	DX
 10137 000013B4 59                      	POP	CX
 10138 000013B5 5B                      	POP	BX
 10139 000013B6 58                      	POP	AX
 10140                                  NoUpdate:
 10141                                  
 10142                                  ;hkn; SS override
 10143 000013B7 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10144                                  
 10145                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10146 000013BC EBC0                    	JMP	short INTEST
 10147                                  GET:
 10148 000013BE 30E4                    	XOR	AH,AH
 10149 000013C0 E8E330                  	call	IOFUNC
 10150 000013C3 5E                      	POP	SI
 10151 000013C4 1F                      	POP	DS
 10152                                  ;;; 7/15/86
 10153                                  
 10154                                  ;hkn; SS override
 10155                                  	; MSDOS 6.0
 10156 000013C5 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10157                                  	;
 10158 000013CB 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10159 000013CD 7505                    	JNZ	short noscan
 10160                                  
 10161                                  ;hkn; SS override
 10162                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10163                                  	; 20/06/2023
 10164 000013CF 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10165                                  noscan:
 10166 000013D4 C3                      	retn
 10167                                  ;
 10168                                  ;----------------------------------------------------------------------------
 10169                                  ;
 10170                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10171                                  ;
 10172                                  ;
 10173                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10174                                  ;	EXIT	none
 10175                                  ;	USES	ALL
 10176                                  ;
 10177                                  ;----------------------------------------------------------------------------
 10178                                  ;
 10179                                  
 10180                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10181                                  
 10182 000013D5 89D6                    	mov	si,dx
 10183                                  STRING_OUT1:	
 10184 000013D7 AC                      	lodsb
 10185 000013D8 3C24                    	cmp	al,'$'
 10186 000013DA 74F8                    	je	short noscan
 10187                                  NEXT_STR1:
 10188 000013DC E88402                  	call	OUTT
 10189 000013DF EBF6                    	jmp	short STRING_OUT1
 10190                                  
 10191                                  ;----------------------------------------------------------------------------
 10192                                  ;
 10193                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10194                                  ;
 10195                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10196                                  ;
 10197                                  ;	ENTRY	(ds:dx) = input buffer
 10198                                  ;	EXIT	none
 10199                                  ;	USES	ALL
 10200                                  ;
 10201                                  ;----------------------------------------------------------------------------
 10202                                  
 10203                                  	; 15/01/2024
 10204                                  
 10205                                  _$STD_CON_STRING_INPUT:		;System call 10
 10206                                  
 10207                                  	; 15/01/2024
 10208                                  	;mov	ax,ss
 10209                                  	;mov	es,ax
 10210 000013E1 16                      	push	ss
 10211 000013E2 07                      	pop	es
 10212                                  
 10213 000013E3 89D6                    	mov	si,dx
 10214 000013E5 30ED                    	xor	ch,ch
 10215 000013E7 AD                      	lodsw
 10216                                  
 10217                                  ;	(AL) = the buffer length
 10218                                  ;	(AH) = the template length
 10219                                  
 10220 000013E8 08C0                            or	al,al
 10221 000013EA 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10222 000013EC 88E3                    	mov	bl,ah		;Init template counter
 10223 000013EE 88EF                            mov	bh,ch		;Init template counter
 10224                                  
 10225                                  ;	(BL) = the number of bytes in the template
 10226                                  
 10227 000013F0 38D8                            cmp	al,bl
 10228 000013F2 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10229 000013F4 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10230 000013F7 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10231                                  
 10232                                  ; The number of chars in the template is >= the number of chars in buffer or
 10233                                  ; there is no CR at the end of the template. This is an inconsistant state
 10234                                  ; of affairs. Pretend that the template was empty:
 10235                                  ;
 10236                                  
 10237                                  NOEDIT:	
 10238 000013F9 88EB                    	mov	bl,ch		;Reset buffer
 10239                                  EDITON: 
 10240 000013FB 88C2                    	mov	dl,al
 10241 000013FD 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10242                                  
 10243                                  ;	Top level. We begin to read a line in.
 10244                                  
 10245                                  NEWLIN: 
 10246 000013FE 36A0[F901]              	mov	al,[SS:CARPOS]
 10247 00001402 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10248                                  
 10249 00001406 56                      	push	si
 10250 00001407 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10251 0000140A 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10252 0000140F 88EF                    	mov	bh,ch		;No chars from template yet
 10253 00001411 88EE                    	mov	dh,ch		;No chars to new line yet
 10254 00001413 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10255 00001416 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10256 00001418 7503                    	jnz	short GOTCH
 10257                                  
 10258                                  ;	This is the main loop of reading in a character and processing it.
 10259                                  ;
 10260                                  ;	(BH) = the index of the next byte in the template
 10261                                  ;	(BL) = the length of the template
 10262                                  ;	(DH) = the number of bytes in the buffer
 10263                                  ;	(DL) = the length of the buffer
 10264                                  
 10265                                  GETCH:
 10266 0000141A E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10267                                  GOTCH:
 10268                                  ;
 10269                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10270                                  ; input queue.
 10271                                  ;
 10272 0000141D 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10273 0000141F 74F9                    	jz	short GETCH
 10274                                  
 10275                                  ;	If the leading char is the function-key lead byte
 10276                                  
 10277                                  	;cmp	al,[SS:ESCCHAR]
 10278                                  
 10279                                  	; 04/05/2019 - Retro DOS v4.0
 10280                                  
 10281                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10282                                  
 10283 00001421 2E3A06[1F0A]            	CMP	AL,[cs:ESCCHAR]
 10284 00001426 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10285                                  
 10286                                  ;	Rubout and ^H are both destructive backspaces.
 10287                                  
 10288 00001428 3C7F                            cmp	al,c_DEL ; 7FH
 10289                                          ;jz	short BACKSPJ
 10290                                          ; 15/01/2024
 10291 0000142A 7466                    	je	short BACKSP
 10292 0000142C 3C08                    	cmp	al,c_BS  ; 8
 10293                                          ;jz	short BACKSPJ
 10294                                          ; 15/01/2024
 10295 0000142E 7462                    	je	short BACKSP
 10296                                  
 10297                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10298                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10299                                  	;	   	after CMP and a CMP again!
 10300                                  	;		
 10301                                  	;		-It would be better if they use a 'JMP short' to 
 10302                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10303                                  	;		between them. Then, they would be able use a patch
 10304                                  	;		between 5271h and 5279h when if it will be required.
 10305                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10306                                  	;	
 10307                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10308                                  
 10309                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10310                                  	;
 10311                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10312                                  
 10313                                  ;DOSCODE:526D	cmp     al, 8
 10314                                  ;DOSCODE:526F	jz      short BACKSPJ
 10315                                  ;DOSCODE:5271	cmp     al, 17h
 10316                                  ;DOSCODE:5273	nop
 10317                                  ;DOSCODE:5274	nop
 10318                                  ;DOSCODE:5275	cmp     al, 15h
 10319                                  ;DOSCODE:5277	nop
 10320                                  ;DOSCODE:5278	nop
 10321                                  ;DOSCODE:5279	cmp     al, 0Dh
 10322                                  ;DOSCODE:527B	jz      short ENDLIN
 10323                                  ;DOSCODE:527D	cmp     al, 0Ah
 10324                                  ;DOSCODE:527F	jz      short PHYCRLF
 10325                                  	
 10326                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10327                                  	; DOSCODE:525Dh
 10328                                  
 10329                                  ; 16/12/2022
 10330                                  %if 0
 10331                                  	; MSDOS 6.0
 10332                                  ;	^W deletes backward once and then backs up until a letter is before the
 10333                                  ;	cursor
 10334                                  
 10335                                  	CMP     AL,"W"-"@" ; 17h
 10336                                  
 10337                                  ;	The removal of the comment characters before the jump statement will
 10338                                  ;	cause ^W to backup a word.
 10339                                  
 10340                                  ;***	JZ	short WordDel
 10341                                  	NOP
 10342                                  	NOP
 10343                                  
 10344                                  	CMP     AL,"U"-"@" ; 15h
 10345                                  
 10346                                  ;	The removal of the comment characters before the jump statement will
 10347                                  ;	cause ^U to clear a line.
 10348                                  
 10349                                  ;***	JZ	short LineDel
 10350                                  	NOP
 10351                                  	NOP
 10352                                  
 10353                                  %endif
 10354                                  
 10355                                  ;	CR terminates the line.
 10356                                  
 10357 00001430 3C0D                            cmp	al,c_CR ; 0Dh
 10358 00001432 7430                            jz	short ENDLIN
 10359                                  
 10360                                  ;	LF goes to a new line and keeps on reading.
 10361                                  
 10362 00001434 3C0A                            cmp	al,c_LF ; 0Ah
 10363 00001436 7442                    	jz	short PHYCRLF
 10364                                  
 10365                                  ;	^X (or ESC) deletes the line and starts over
 10366                                  
 10367                                  	; MSDOS 3.3
 10368                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10369                                  	;jz	short KILNEW
 10370                                  
 10371                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10372                                  
 10373                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10374                                  
 10375 00001438 2E3A06[1E0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10376 0000143D 7440                    	jz	short KILNEW
 10377                                  	
 10378                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10379                                  	;jz	short KILNEW
 10380                                  
 10381                                  ; Otherwise, we save the input character.
 10382                                  
 10383                                  SAVCH:	
 10384 0000143F 38D6                    	cmp	dh,dl
 10385 00001441 7317                    	jnb	short BUFFUL		; buffer is full.
 10386 00001443 AA                              stosb
 10387 00001444 FEC6                    	inc	dh                      ; increment count in buffer.
 10388 00001446 E8AE02                  	call	BUFOUT			; Print control chars nicely
 10389                                  
 10390 00001449 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10391 0000144F 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10392 00001451 38DF                            cmp	bh,bl
 10393 00001453 73C5                            jnb	short GETCH		; no more characters in template
 10394 00001455 46                              inc	si                      ; Skip to next char in template
 10395 00001456 FEC7                            inc	bh                      ; remember position in template
 10396 00001458 EBC0                            jmp	short GETCH
 10397                                  
 10398                                  	; 15/01/2024
 10399                                  ;BACKSPJ: 
 10400                                  	;jmp	short BACKSP
 10401                                  
 10402                                  BUFFUL: 
 10403 0000145A B007                    	mov	al, 7			; Bell to signal full buffer
 10404 0000145C E80402                  	call	OUTT
 10405 0000145F EBB9                    	jmp	short GETCH
 10406                                  
 10407                                  ESCAPE: 
 10408                                  	;transfer OEMFunctionKey
 10409 00001461 E9E6F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10410                                  
 10411                                  ENDLIN:
 10412 00001464 AA                              stosb				; Put the CR in the buffer
 10413 00001465 E8FB01                  	call	OUTT                    ; Echo it
 10414 00001468 5F                              pop	di                      ; Get start of user buffer
 10415 00001469 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10416 0000146C FEC6                            inc	dh			; DH is length including CR
 10417                                  
 10418                                  COPYNEW:
 10419                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10420                                  	;mov	bp, es
 10421                                  	;mov	bx, ds
 10422                                  	;mov	es, bx
 10423                                  	;mov	ds, bp
 10424                                  	;mov	si, INBUF
 10425                                  	;mov	cl, dh
 10426                                  	;rep	movsb
 10427                                  	;retn
 10428                                  
 10429                                  	; CPMIO.ASM (MSDOS 6.0)
 10430                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10431                                  	;SAVE	<DS,ES>
 10432 0000146E 1E                      	PUSH	DS
 10433 0000146F 06                      	PUSH	ES
 10434                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10435 00001470 1F                      	POP	DS
 10436 00001471 07                      	POP	ES
 10437                                  
 10438                                  ;;hkn; INBUF is in DOSDATA
 10439 00001472 BE[FB01]                        MOV     SI,INBUF
 10440 00001475 88F1                            MOV     CL,DH                   ; set up count
 10441 00001477 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10442                                  OLDBAK_RETN:
 10443 00001479 C3                              RETN
 10444                                  
 10445                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10446                                  
 10447                                  PHYCRLF:
 10448 0000147A E81B01                  	CALL	CRLF
 10449 0000147D EB9B                            JMP	short GETCH
 10450                                  
 10451                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10452                                  
 10453                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10454                                  
 10455                                  	; Note: Following routines were not used in IBMDOS.COM
 10456                                  	;	-CRTL+W, CRTL+U is not activated-
 10457                                  	;	but they were in the kernel code!?)
 10458                                  
 10459                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10460                                  	; DOSCODE:52B6h
 10461                                  
 10462                                  ;;;;;;;;
 10463                                  
 10464                                  ; 16/12/2022
 10465                                  %if 0
 10466                                  ;
 10467                                  ; Delete the previous line
 10468                                  ;
 10469                                  LineDel:
 10470                                  	OR      DH,DH
 10471                                  	JZ	short GETCH	 ; 06/12/2022
 10472                                  	Call    BackSpace
 10473                                  	JMP	short LineDel
 10474                                  
 10475                                  %endif
 10476                                  
 10477                                  ;
 10478                                  ; delete the previous word.
 10479                                  ;
 10480                                  WordDel:
 10481                                  WordLoop:
 10482                                  ;	Call    BackSpace               ; backspace the one spot
 10483                                  ;	OR      DH,DH
 10484                                  ;	JZ	short GetChj
 10485                                  ;	MOV     AL,[ES:DI-1]
 10486                                  ;	cmp     al,'0'
 10487                                  ;	jb	short GetChj
 10488                                  ;	cmp     al,'9'
 10489                                  ;	jbe	short WordLoop
 10490                                  ;	OR      AL,20h
 10491                                  ;	CMP     AL,'a'
 10492                                  ;	JB	short GetChj
 10493                                  ;	CMP     AL,'z'
 10494                                  ;	JBE	short WordLoop
 10495                                  ;GetChj: 
 10496                                  ;	JMP	GETCH
 10497                                  
 10498                                  ; 16/12/2022
 10499                                  %if 0
 10500                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10501                                  	; (Worddel is not called or jumped from anywhere!)
 10502                                  WordDel:
 10503                                  WordLoop:
 10504                                  	Call    BackSpace               ; backspace the one spot
 10505                                  	OR      DH,DH
 10506                                  	JZ	short GetChj
 10507                                  	MOV     AL,[ES:DI-1]
 10508                                  	cmp     al,'0'
 10509                                  	jb	short GetChj
 10510                                  	cmp     al,'9'
 10511                                  	jbe	short WordLoop
 10512                                  	OR      AL,20h
 10513                                  	CMP     AL,'a'
 10514                                  	JB	short GetChj
 10515                                  	CMP     AL,'z'
 10516                                  	JBE	short WordLoop
 10517                                  GetChj: 
 10518                                  	JMP	GETCH
 10519                                  
 10520                                  %endif
 10521                                  
 10522                                  ;;;;;;;;
 10523                                  
 10524                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10525                                  
 10526                                  ; The user wants to throw away what he's typed in and wants to start over.
 10527                                  ; We print the backslash and then go to the next line and tab to the correct
 10528                                  ; spot to begin the buffered input.
 10529                                  
 10530                                  KILNEW:
 10531 0000147F B05C                            mov	al,'\'
 10532 00001481 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10533 00001484 5E                              pop	si		;Remember start of edit buffer
 10534                                  PUTNEW:
 10535 00001485 E81001                  	call	CRLF            ;Go to next line on screen
 10536 00001488 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10537 0000148C E84802                  	call	TAB             ;Tab over
 10538 0000148F E96CFF                          JMP     NEWLIN		;Start over again
 10539                                  
 10540                                  ;	Destructively back up one character position
 10541                                  
 10542                                  BACKSP:
 10543                                  	; 09/09/2018
 10544 00001492 E80800                  	Call    BackSpace
 10545 00001495 EB83                    	JMP     short GETCH	; 15/01/2024
 10546                                  
 10547                                  	; 15/01/2024
 10548                                  ;User really wants an ESC character in his line
 10549                                  TWOESC:	
 10550 00001497 2EA0[1F0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10551 0000149B EBA2                    	jmp	short SAVCH
 10552                                  
 10553                                  BackSpace:
 10554 0000149D 08F6                    	or	dh,dh
 10555 0000149F 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10556 000014A1 E85800                  	call	BACKUP          ;Do the backup
 10557 000014A4 268A05                  	mov	al,[es:di]	;Get the deleted char
 10558 000014A7 3C20                            cmp	al,20h	; ' '
 10559 000014A9 730F                    	jnb	short OLDBAK	;Was a normal char
 10560 000014AB 3C09                            cmp	al,c_HT ; 9
 10561 000014AD 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10562                                  ;; 9/27/86 fix for ctrl-U backspace
 10563 000014AF 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10564 000014B1 7407                    	JZ	short OLDBAK
 10565 000014B3 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10566 000014B5 7403                    	JZ	short OLDBAK
 10567                                  ;; 9/27/86 fix for ctrl-U backspace
 10568 000014B7 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10569                                  OLDBAK:
 10570 000014BA 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10571 000014C0 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10572 000014C2 08FF                    	or	bh,bh
 10573 000014C4 74B3                            jz	short OLDBAK_RETN 
 10574                                  				;Not advanced in template, stay where we are
 10575 000014C6 FECF                    	dec	bh		;Go back in template
 10576 000014C8 4E                              dec	si
 10577 000014C9 C3                      	retn
 10578                                  BAKTAB:
 10579 000014CA 57                              push	di
 10580 000014CB 4F                              dec	di		;Back up one char
 10581 000014CC FD                              std			;Go backward
 10582 000014CD 88F1                            mov	cl,dh		;Number of chars currently in line
 10583 000014CF B020                            mov	al,20h	; ' '
 10584 000014D1 53                              push	bx
 10585 000014D2 B307                            mov	bl,7		;Max
 10586 000014D4 E30E                            jcxz	FIGTAB		;At start, do nothing
 10587                                  FNDPOS:
 10588 000014D6 AE                              scasb			;Look back
 10589 000014D7 7609                    	jbe	short CHKCNT
 10590 000014D9 26807D0109              	cmp	byte [es:di+1],9
 10591 000014DE 7409                    	jz	short HAVTAB	;Found a tab
 10592 000014E0 FECB                    	dec	bl		;Back one char if non tab control char
 10593                                  CHKCNT:
 10594 000014E2 E2F2                            loop	FNDPOS
 10595                                  FIGTAB:		
 10596 000014E4 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10597                                  HAVTAB:
 10598 000014E9 28F3                    	sub	bl,dh
 10599 000014EB 00D9                    	add	cl,bl
 10600 000014ED 80E107                  	and	cl,7		;CX has correct number to erase
 10601 000014F0 FC                      	cld			;Back to normal
 10602 000014F1 5B                      	pop	bx
 10603 000014F2 5F                      	pop	di
 10604 000014F3 74C5                    	jz	short OLDBAK	;Nothing to erase
 10605                                  TABBAK:
 10606 000014F5 E80700                  	call	BACKMES
 10607 000014F8 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10608 000014FA EBBE                    	jmp	short OLDBAK
 10609                                  
 10610                                  BACKUP:
 10611 000014FC FECE                            dec	dh		;Back up in line
 10612 000014FE 4F                              dec	di
 10613                                  BACKMES:
 10614 000014FF B008                            mov	al,c_BS ; 8	;Backspace
 10615 00001501 E85F01                          call	OUTT
 10616 00001504 B020                            mov	al,20h ; ' '	;Erase
 10617 00001506 E85A01                          call	OUTT
 10618 00001509 B008                            mov	al,c_BS ; 8	;Backspace
 10619 0000150B E95501                  	jmp	OUTT		;Done
 10620                                  
 10621                                  	; 15/01/2024
 10622                                  ;User really wants an ESC character in his line
 10623                                  ;TWOESC:	
 10624                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10625                                  ;	jmp	SAVCH
 10626                                  
 10627                                  ;Copy the rest of the template
 10628                                  COPYLIN:
 10629 0000150E 88D9                            mov	cl,bl		;Total size of template
 10630 00001510 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10631 00001512 EB07                            jmp	short COPYEACH
 10632                                  
 10633                                  COPYSTR:
 10634 00001514 E83200                  	call	FINDOLD         ;Find the char
 10635 00001517 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10636                                  
 10637                                  ;Copy one char from template to line
 10638                                  COPYONE:
 10639 00001519 B101                            mov	cl,1
 10640                                  ;Copy CX chars from template to line
 10641                                  COPYEACH:
 10642 0000151B 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10643 00001521 38D6                    	cmp	dh,dl
 10644 00001523 740F                            jz	short GETCH2		;At end of line, can't do anything
 10645 00001525 38DF                            cmp	bh,bl
 10646 00001527 740B                            jz	short GETCH2		;At end of template, can't do anything
 10647 00001529 AC                              lodsb
 10648 0000152A AA                              stosb
 10649 0000152B E8C901                  	call	BUFOUT
 10650 0000152E FEC7                            inc	bh			;Ahead in template
 10651 00001530 FEC6                            inc	dh			;Ahead in line
 10652 00001532 E2E7                            loop	COPYEACH
 10653                                  GETCH2:
 10654 00001534 E9E3FE                          jmp	GETCH
 10655                                  
 10656                                  ;Skip one char in template
 10657                                  SKIPONE:
 10658 00001537 38DF                    	cmp	bh,bl
 10659 00001539 74F9                    	jz	short GETCH2		;At end of template
 10660 0000153B FEC7                    	inc	bh			;Ahead in template
 10661 0000153D 46                      	inc	si
 10662                                          ;jmp	GETCH
 10663                                  	; 15/01/2024
 10664 0000153E EBF4                    	jmp	short GETCH2
 10665                                  
 10666                                  SKIPSTR:
 10667 00001540 E80600                  	call	FINDOLD                 ;Find out how far to go
 10668 00001543 01CE                            add	si,cx			;Go there
 10669 00001545 00CF                            add	bh,cl
 10670                                          ;jmp	GETCH
 10671                                  	; 15/01/2024
 10672 00001547 EBEB                    	jmp	short GETCH2
 10673                                  
 10674                                  ;Get the next user char, and look ahead in template for a match
 10675                                  ;CX indicates how many chars to skip to get there on output
 10676                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10677                                  ;       address is popped off and a jump to GETCH is taken.
 10678                                  ;       Make sure nothing extra on stack when this routine
 10679                                  ;       is called!!! (no PUSHes before calling it).
 10680                                  
 10681                                  FINDOLD:
 10682 00001549 E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10683                                  
 10684                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10685                                  
 10686                                  	;CMP	AL,[SS:ESCCHAR]	
 10687                                  	;JNZ	SHORT FINDSETUP
 10688                                  
 10689                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10690                                  
 10691                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10692                                  
 10693 0000154C 2E3A06[1F0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10694 00001551 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10695                                  
 10696 00001553 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10697 00001556 EB1D                            JMP	SHORT NOTFND		; go try again
 10698                                  FINDSETUP:
 10699 00001558 88D9                    	mov	cl,bl
 10700 0000155A 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10701 0000155C 7417                    	jz	short NOTFND	;At end of template
 10702 0000155E 49                              dec	cx		;Cannot point past end, limit search
 10703 0000155F 7414                            jz	short NOTFND	;If only one char in template, forget it
 10704 00001561 06                      	push	es
 10705 00001562 1E                      	push	ds
 10706 00001563 07                      	pop	es
 10707 00001564 57                      	push	di
 10708 00001565 89F7                    	mov	di,si		;Template to ES:DI
 10709 00001567 47                      	inc	di
 10710 00001568 F2AE                    	repne	scasb		;Look
 10711 0000156A 5F                      	pop	di
 10712 0000156B 07                      	pop	es
 10713 0000156C 7507                    	jnz	short NOTFND	;Didn't find the char
 10714 0000156E F6D1                            not	cl		;Turn how far to go into how far we went
 10715 00001570 00D9                            add	cl,bl		;Add size of template
 10716 00001572 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10717                                  FINDOLD_RETN:
 10718 00001574 C3                      	retn
 10719                                  
 10720                                  NOTFND:
 10721 00001575 5D                      	pop	bp              ;Chuck return address
 10722                                  	;jmp	GETCH
 10723                                  	; 15/01/2024
 10724                                  GETCH2_j:
 10725 00001576 EBBC                    	jmp	short GETCH2
 10726                                  
 10727                                  REEDIT:
 10728 00001578 B040                    	mov	al,'@'		;Output re-edit character
 10729 0000157A E8E600                  	call	OUTT
 10730 0000157D 5F                      	pop	di
 10731 0000157E 57                      	push	di
 10732 0000157F 06                      	push	es
 10733 00001580 1E                      	push	ds
 10734 00001581 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10735 00001584 1F                      	pop	ds
 10736 00001585 07                      	pop	es
 10737 00001586 5E                      	pop	si
 10738 00001587 88F3                    	mov	bl,dh		;Size of line is new size template
 10739 00001589 E9F9FE                  	jmp	PUTNEW		;Start over again
 10740                                  
 10741                                  EXITINS:
 10742                                  ENTERINS:
 10743 0000158C 36F616[7905]            	not	byte [SS:INSMODE]
 10744                                  	;jmp	GETCH
 10745                                  	; 15/01/2024
 10746 00001591 EBE3                    	jmp	short GETCH2_j
 10747                                  
 10748                                  ;Put a real live ^Z in the buffer (embedded)
 10749                                  CTRLZ:
 10750 00001593 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10751 00001595 E9A7FE                          jmp	SAVCH
 10752                                  
 10753                                  ;Output a CRLF
 10754                                  CRLF:
 10755 00001598 B00D                    	mov	al,c_CR ; 0Dh 
 10756 0000159A E8C600                  	call	OUTT
 10757 0000159D B00A                    	mov	al,c_LF ; 0Ah
 10758 0000159F E9C100                  	jmp	OUTT
 10759                                  
 10760                                  ;
 10761                                  ;----------------------------------------------------------------------------
 10762                                  ;
 10763                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10764                                  ;
 10765                                  ;	Input or output raw character from console, no echo
 10766                                  ;
 10767                                  ;	ENTRY	DL = -1 if input
 10768                                  ;		   =  output character if output
 10769                                  ;	EXIT	(AL) = input character if input
 10770                                  ;	USES	all
 10771                                  ;
 10772                                  ;----------------------------------------------------------------------------
 10773                                  ; 20/07/2018 - Retro DOS v3.0
 10774                                  
 10775                                  ; 04/05/2019 - Retro DOS v4.0
 10776                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10777                                  
 10778                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10779                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10780                                  
 10781                                  _$RAW_CON_IO:			; System call 6
 10782 000015A2 88D0                    	MOV	AL,DL
 10783 000015A4 3CFF                    	CMP	AL,-1
 10784 000015A6 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10785                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10786                                  	;jz	short rci1
 10787                                  	;jmp	short RAWOUT
 10788                                  	; 16/12/202
 10789                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10790                                  	;nop
 10791                                  rci1:
 10792                                  			; Get pointer to register save area
 10793 000015A8 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10794 000015AD 31DB                    	XOR	BX,BX
 10795                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10796 000015AF E8AE20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10797                                          ;JC	SHORT RET17
 10798 000015B2 72C0                            jc	short FINDOLD_RETN
 10799 000015B4 B401                    	MOV	AH,1
 10800 000015B6 E8ED2E                  	CALL	IOFUNC
 10801 000015B9 750B                    	JNZ	SHORT RESFLG
 10802 000015BB E8833B                  	CALL	SPOOLINT
 10803                                  	;OR	BYTE [ES:DI+16H],40H
 10804 000015BE 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10805 000015C3 30C0                    	XOR	AL,AL
 10806                                  RET17:
 10807 000015C5 C3                      	RETN
 10808                                  
 10809                                  RESFLG:
 10810                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10811 000015C6 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10812                                  				; Reset user's zero flag
 10813                                  ;RILP:
 10814                                  rci0:
 10815 000015CB E8733B                  	CALL	SPOOLINT
 10816                                  ;
 10817                                  ;----------------------------------------------------------------------------
 10818                                  ;
 10819                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10820                                  ;
 10821                                  ;	Input raw character from console, no echo
 10822                                  ;
 10823                                  ;	ENTRY	none
 10824                                  ;	EXIT	(al) = character
 10825                                  ;	USES	all
 10826                                  ;
 10827                                  ;----------------------------------------------------------------------------
 10828                                  ;
 10829                                  
 10830                                  ;rci0:	invoke	SPOOLINT
 10831                                  
 10832                                  	;entry	$RAW_CON_INPUT
 10833                                  
 10834                                  	; 04/05/2019 - Retro DOS v4.0
 10835                                  
 10836                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10837                                  
 10838                                  _$RAW_CON_INPUT:		; System call 7
 10839 000015CE 53                      	push	bx
 10840 000015CF 31DB                    	XOR	BX,BX
 10841                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10842 000015D1 E88C20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10843 000015D4 5B                      	pop	bx
 10844 000015D5 72EE                    	JC	SHORT RET17
 10845 000015D7 B401                    	MOV	AH,1
 10846 000015D9 E8CA2E                  	CALL	IOFUNC
 10847                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10848                                  	;XOR	AH,AH
 10849                                          ;CALL	IOFUNC
 10850                                          ;RETN
 10851 000015DC 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10852 000015DE B484                    	MOV	AH,84h
 10853 000015E0 CD2A                    	INT	int_IBM  ; int 2Ah
 10854 000015E2 EBE7                    	JMP	short rci0
 10855                                  rci5:	
 10856 000015E4 30E4                    	XOR	AH,AH
 10857                                  	;CALL	IOFUNC
 10858                                  	;RETN
 10859                                  	; 18/12/2022
 10860 000015E6 E9BD2E                  	jmp	IOFUNC
 10861                                  
 10862                                  ;       Output the character in AL to stdout
 10863                                  ;
 10864                                  	;entry	RAWOUT
 10865                                  RAWOUT:
 10866 000015E9 53                      	PUSH    BX
 10867 000015EA BB0100                  	MOV     BX,1
 10868                                  
 10869                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10870 000015ED E87020                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10871 000015F0 721B                    	JC	SHORT RAWRET1
 10872                                  
 10873                                  	;
 10874                                  	; MSDOS 2.11
 10875                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10876                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10877                                          ;PUSH	DS
 10878                                          ;PUSH	SI
 10879                                          ;LDS	SI,[SI+19H]		; output to special?
 10880                                  	;TEST	BYTE [SI+4],ISSPEC
 10881                                  	;POP	SI
 10882                                  	;
 10883                                          
 10884                                  	; MSDOS 3.3 & MSDOS 6.0
 10885                                  	;mov	bx,[si+5]
 10886 000015F2 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10887                                   ;
 10888                                   ; If we are a network handle OR if we are not a local device then go do the
 10889                                   ; output the hard way.
 10890                                   ;	
 10891                                  	;and	bx,8080h
 10892 000015F5 81E38080                	AND	BX,sf_isnet+devid_device
 10893                                  	;cmp	bx,80h
 10894 000015F9 81FB8000                	CMP	BX,devid_device
 10895 000015FD 7510                    	jnz     short RAWNORM
 10896 000015FF 1E                      	push    ds
 10897                                  	;lds	bx,[si+7]
 10898 00001600 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10899                                  	;test	byte [bx+4],10h
 10900 00001603 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10901                                  	;
 10902                                  
 10903 00001607 1F                      	POP	DS
 10904 00001608 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10905                                  
 10906 0000160A CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10907                                  
 10908                                  	;JMP	SHORT RAWRET
 10909                                  ;RAWNORM:
 10910                                  ;	CALL    RAWOUT3
 10911                                  RAWRET: 
 10912 0000160C F8                      	CLC
 10913                                  RAWRET1:
 10914 0000160D 5B                      	POP     BX
 10915                                  RAWRET2:
 10916 0000160E C3                      	RETN
 10917                                  RAWNORM:
 10918 0000160F E80700                  	CALL    RAWOUT3
 10919 00001612 EBF8                    	jmp	short RAWRET
 10920                                  
 10921                                  ;	Output the character in AL to handle in BX
 10922                                  ;
 10923                                  ;	entry	RAWOUT2
 10924                                  
 10925                                  RAWOUT2:
 10926                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10927                                  	;JC	SHORT RET18
 10928 00001614 E84920                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10929 00001617 72F5                    	JC	SHORT RAWRET2
 10930                                  RAWOUT3:
 10931 00001619 50                      	PUSH	AX
 10932 0000161A EB0C                    	JMP	SHORT RAWOSTRT
 10933                                  ROLP:
 10934 0000161C E8223B                  	CALL	SPOOLINT
 10935                                  
 10936                                  	; 01/05/2019 - Retro DOS v4.0
 10937                                  
 10938                                  	; MSDOS 6.0
 10939                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10940                                  	; 17/12/2022
 10941 0000161F 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10942                                  	;or	word [ss:DOS34_FLAG],200h
 10943                                  				;AN002; set control break
 10944                                  	;invoke DSKSTATCHK
 10945 00001625 E8963A                  	call	DSKSTATCHK	;AN002; check control break
 10946                                  RAWOSTRT:
 10947 00001628 B403                    	MOV	AH,3
 10948 0000162A E8792E                  	CALL	IOFUNC
 10949 0000162D 74ED                    	JZ	SHORT ROLP
 10950                                  
 10951                                  	; MSDOS 6.0
 10952                                  ;SR;
 10953                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10954                                  ;the user failed. We do not send a char if this happens. We however return
 10955                                  ;to the caller with carry clear because this DOS call does not return any
 10956                                  ;status. 
 10957                                  ;
 10958 0000162F 40                      	inc	ax		;fail on I24 if ax = -1
 10959 00001630 58                      	POP	AX
 10960 00001631 7405                    	jz	short nosend	;yes, do not send char
 10961 00001633 B402                    	MOV	AH,2
 10962 00001635 E86E2E                  	call	IOFUNC
 10963                                  nosend:
 10964 00001638 F8                      	CLC			; Clear carry indicating successful
 10965 00001639 C3                      	retn
 10966                                  
 10967                                  	; MSDOS 3.3 & MSDOS 2.11
 10968                                  	;POP	AX
 10969                                  	;MOV	AH,2
 10970                                          ;CALL	IOFUNC
 10971                                  	;CLC			; Clear carry indicating successful
 10972                                  ;RET18:    
 10973                                  	;RETN
 10974                                  
 10975                                  ;;10/08/2018
 10976                                  ; 20/07/2018 - Retro DOS v3.0
 10977                                  ; ---------------------------------------------------------------------------
 10978                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10979                                  ; ---------------------------------------------------------------------------
 10980                                  
 10981                                  ; This routine is called at DOS init
 10982                                  
 10983                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10984                                  ;;OUTMES:
 10985                                  ;;	;LODS	CS:BYTE PTR [SI]
 10986                                  ;;	CS	LODSB
 10987                                  ;;	CMP     AL,"$" ; 24h
 10988                                  ;;	JZ	SHORT RET18
 10989                                  ;;	CALL	OUTT
 10990                                  ;;	JMP     SHORT OUTMES
 10991                                  
 10992                                  ; ---------------------------------------------------------------------------
 10993                                  
 10994                                  ; 20/07/2018 - Retro DOS v3.0
 10995                                  
 10996                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10997                                  
 10998                                  ;
 10999                                  ;----------------------------------------------------------------------------
 11000                                  ;
 11001                                  ; Inputs:
 11002                                  ;	AX=0 save the DEVCALL request packet
 11003                                  ;	  =1 restore the DEVCALL request packet
 11004                                  ; Function:
 11005                                  ;	save or restore the DEVCALL packet
 11006                                  ; Returns:
 11007                                  ;	none
 11008                                  ;
 11009                                  ;----------------------------------------------------------------------------
 11010                                  ;
 11011                                  
 11012                                  ; 04/05/2019 - Retro DOS v4.0
 11013                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11014                                  
 11015                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11016                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11017                                  
 11018                                  ; 12/05/2019
 11019                                  
 11020                                  	; 15/01/2024
 11021                                  
 11022                                  Save_Restore_Packet:
 11023 0000163A 1E                      	PUSH	DS
 11024 0000163B 06                      	PUSH	ES
 11025 0000163C 56                      	PUSH	SI
 11026 0000163D 57                      	PUSH	DI
 11027                                  
 11028                                  	; 16/12/2022
 11029                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11030                                  	; 09/09/2018
 11031 0000163E BF[6C0D]                	mov	di,FAKE_STACK_2F
 11032 00001641 BE[5A03]                	mov	si,DEVCALL
 11033                                  	;
 11034                                  	; 21/09/2023
 11035 00001644 09C0                    	or	ax,ax
 11036                                  	;CMP	AX,0		; save packet
 11037 00001646 7402                    	JZ	short save_packet ; 16/12/2022
 11038                                  	;je	short set_seg
 11039                                  
 11040                                  	; MSDOS 6.0
 11041                                  restore_packet:
 11042                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11043                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11044                                  	; MSDOS 3.3
 11045                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11046                                  	;mov	di,DEVCALL  ; 09/09/2018
 11047                                  	;
 11048                                  	;JMP	short set_seg
 11049                                  
 11050                                  	; 16/12/2022	
 11051                                  	; 09/09/2018
 11052 00001648 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11053                                  
 11054                                  ; 16/12/2022
 11055                                  %if 0
 11056                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11057                                  	cmp	ax,0		; save packet
 11058                                  	jz	short save_packet
 11059                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11060                                  	mov	di,DEVCALL 
 11061                                  	jmp	short set_seg
 11062                                  
 11063                                  	; MSDOS 6.0
 11064                                  save_packet:
 11065                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11066                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11067                                  	; 09/09/2018
 11068                                  	; MSDOS 3.3
 11069                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11070                                  	;mov	si,DEVCALL ; 09/09/2018
 11071                                  
 11072                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11073                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11074                                  	mov	si,DEVCALL
 11075                                  %endif
 11076                                  
 11077                                  ; 15/01/2024
 11078                                  ; 16/12/2022
 11079                                  save_packet:
 11080                                  ;set_seg:
 11081                                  	; MSDOS 3.3
 11082                                  	;mov	ax,cs
 11083                                  
 11084                                  	; MSDOS 6.0
 11085                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11086                                  	;MOV	DS,AX
 11087                                  	;MOV	ES,AX
 11088                                  	; 15/01/2024
 11089 0000164A 16                      	push	ss
 11090 0000164B 1F                      	pop	ds
 11091 0000164C 1E                      	push	ds
 11092 0000164D 07                      	pop	es
 11093                                  
 11094 0000164E B90B00                  	MOV	CX,11		; 11 words to move
 11095 00001651 F3A5                    	REP	MOVSW
 11096                                  
 11097 00001653 5F                      	POP	DI
 11098 00001654 5E                      	POP	SI
 11099 00001655 07                      	POP	ES
 11100 00001656 1F                      	POP	DS
 11101 00001657 C3                      	retn
 11102                                  
 11103                                  ;============================================================================
 11104                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11105                                  ;============================================================================
 11106                                  ; 20/07/2018 - Retro DOS v3.0
 11107                                  ; 01/05/2019 - Retro DOS v4.0
 11108                                  
 11109                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11110                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11111                                  ;hkn;	not valid. 
 11112                                  
 11113                                  ;
 11114                                  ;----------------------------------------------------------------------------
 11115                                  ;
 11116                                  ;**	$STD_CON_INPUT - System Call 1
 11117                                  ;
 11118                                  ;	Input character from console, echo
 11119                                  ;
 11120                                  ;	ENTRY	none
 11121                                  ;	EXIT	(al) = character
 11122                                  ;	USES	ALL
 11123                                  ;
 11124                                  ;----------------------------------------------------------------------------
 11125                                  ;
 11126                                  
 11127                                  _$STD_CON_INPUT:	;System call 1
 11128                                  	
 11129 00001658 E821FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11130 0000165B 50                      	PUSH	AX
 11131 0000165C E80400                  	CALL	OUTT
 11132 0000165F 58                      	POP	AX
 11133                                  CON_INPUT_RETN:	
 11134 00001660 C3                      	RETN
 11135                                  
 11136                                  ;
 11137                                  ;----------------------------------------------------------------------------
 11138                                  ;
 11139                                  ;**	$STD_CON_OUTPUT - System Call 2
 11140                                  ;
 11141                                  ;	Output character to console
 11142                                  ;
 11143                                  ;	ENTRY	(dl) = character
 11144                                  ;	EXIT	none
 11145                                  ;	USES	all
 11146                                  ;
 11147                                  ;----------------------------------------------------------------------------
 11148                                  ;
 11149                                  
 11150                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11151                                  
 11152                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11153                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11154                                  
 11155                                  _$STD_CON_OUTPUT:	;System call 2
 11156                                  
 11157 00001661 88D0                    	MOV	AL,DL
 11158                                  OUTT:
 11159 00001663 3C20                    	CMP	AL,20H ; " "
 11160 00001665 725C                    	JB	SHORT CTRLOUT
 11161 00001667 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11162 00001669 7405                    	JZ	SHORT OUTCH
 11163                                  OUTCHA:	
 11164                                  	;INC	BYTE PTR [CARPOS]
 11165 0000166B 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11166                                  OUTCH:
 11167 00001670 1E                      	PUSH	DS
 11168 00001671 56                      	PUSH	SI
 11169                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11170                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11171 00001672 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11172                                  	;AND	BYTE [SS:CHARCO],00111111B
 11173                                  	; 01/05/2019 - Retro DOS v4.0
 11174 00001677 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11175 0000167D 7505                    	JNZ	SHORT OUTSKIP
 11176                                  
 11177 0000167F 50                      	PUSH	AX
 11178 00001680 E8EC3A                  	CALL	STATCHK
 11179 00001683 58                      	POP	AX
 11180                                  OUTSKIP:
 11181 00001684 E862FF                  	CALL	RAWOUT				;output the character
 11182                                  
 11183 00001687 5E                      	POP	SI
 11184 00001688 1F                      	POP	DS
 11185                                  
 11186                                  	;TEST	BYTE PTR [PFLAG],-1
 11187                                  	;retz
 11188 00001689 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11189 0000168F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11190                                  
 11191 00001691 53                      	PUSH	BX
 11192 00001692 1E                      	PUSH	DS
 11193 00001693 56                      	PUSH	SI
 11194 00001694 BB0100                  	MOV	BX,1
 11195                                  	; 20/07/2018 - Retro DOS v3.0
 11196                                  	; MSDOS 3.3
 11197                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11198 00001697 E8C61F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11199                                  					;hkn; to sft entry
 11200 0000169A 7224                    	JC	SHORT TRIPOPJ
 11201                                  
 11202                                  	; 01/05/2019 - Retro DOS v4.0
 11203                                  
 11204                                  	;mov	bx,[si+5]
 11205 0000169C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11206                                  	;test	bx,8000h
 11207                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11208 0000169F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11209 000016A2 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11210                                  	;;test	bx,80h
 11211                                  	;TEST	BX,devid_device 		; output to file?
 11212 000016A4 F6C380                  	test	bl,devid_device ; 80h
 11213 000016A7 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11214                                  	; 14/03/2018
 11215                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11216                                  	;jc	short TRIPOPJ
 11217                                  	; MSDOS 2.11
 11218                                  	;test	byte [SI+18H], 80h
 11219                                  	;jz	short TRIPOPJ
 11220 000016A9 BB0400                  	MOV	BX,4
 11221 000016AC E8B11F                  	CALL	GET_IO_SFT
 11222 000016AF 720F                    	JC	SHORT TRIPOPJ
 11223                                  	;;test	word [si+5], 800h
 11224                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11225                                  	;test	byte [si+6],8 ; 08/11/2022
 11226 000016B1 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11227                                  						; StdPrn redirected?
 11228                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11229                                  	;jz	LISSTRT2 ; 10/08/2018 
 11230                                  	; 16/12/2022
 11231 000016B5 7503                    	jnz	short outch1
 11232 000016B7 E98700                  	jmp	LISSTRT2
 11233                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11234                                  	;jz	short LISSTRT2J
 11235                                  outch1:
 11236                                  	;MOV	BYTE [PFLAG],0
 11237 000016BA 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11238                                  	; MSDOS 2.11
 11239                                  	;mov	bx,4
 11240                                  	;jmp	short LISSTRT2
 11241                                  	
 11242                                  TRIPOPJ:
 11243                                  	; 20/07/2018
 11244 000016C0 E98100                  	JMP	TRIPOP
 11245                                  
 11246                                  	; 16/12/2022
 11247                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11248                                  ;LISSTRT2J:
 11249                                  ;	JMP	LISSTRT2
 11250                                  
 11251                                  CTRLOUT:
 11252 000016C3 3C0D                    	CMP	AL,c_CR ; 0Dh
 11253 000016C5 7420                    	JZ	SHORT ZERPOS
 11254 000016C7 3C08                    	CMP	AL,c_BS ; 8
 11255 000016C9 7424                    	JZ	SHORT BACKPOS
 11256 000016CB 3C09                    	CMP	AL,c_HT ; 9
 11257 000016CD 75A1                    	JNZ	SHORT OUTCH
 11258                                  	;MOV	AL,[CARPOS]
 11259 000016CF 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11260 000016D3 0CF8                    	OR	AL,0F8H
 11261 000016D5 F6D8                    	NEG	AL
 11262                                  TAB:
 11263 000016D7 51                      	PUSH	CX
 11264 000016D8 88C1                    	MOV	CL,AL
 11265 000016DA B500                    	MOV	CH,0
 11266 000016DC E307                    	JCXZ	POPTAB
 11267                                  TABLP:
 11268 000016DE B020                    	MOV	AL," "
 11269 000016E0 E880FF                  	CALL	OUTT
 11270 000016E3 E2F9                    	LOOP	TABLP
 11271                                  POPTAB:
 11272 000016E5 59                      	POP	CX
 11273                                  
 11274 000016E6 C3                      	RETN
 11275                                  
 11276                                  ZERPOS:
 11277                                  	;MOV	BYTE PTR [CARPOS],0
 11278 000016E7 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11279                                  	; 10/08/2018
 11280 000016ED EB81                    	JMP	short OUTCH ; 04/05/2019
 11281                                  	
 11282                                  	; 18/12/2022
 11283                                  ;OUTJ:	
 11284                                  	;JMP	OUTT
 11285                                  
 11286                                  BACKPOS:
 11287                                  	;DEC	BYTE PTR [CARPOS]
 11288 000016EF 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11289 000016F4 E979FF                  	JMP	OUTCH
 11290                                  
 11291                                  BUFOUT:
 11292 000016F7 3C20                    	CMP	AL," "
 11293 000016F9 7315                    	JAE	SHORT OUTJ		;Normal char
 11294 000016FB 3C09                    	CMP	AL,9
 11295 000016FD 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11296                                  	;DOS 3.3  7/14/86
 11297 000016FF 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11298 00001701 740D                    	JZ	short CTRLU
 11299 00001703 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11300 00001705 7409                    	JZ	short CTRLU
 11301                                  NOT_CTRLU:
 11302                                  	;DOS 3.3  7/14/86
 11303 00001707 50                      	PUSH	AX
 11304 00001708 B05E                    	MOV	AL,"^"
 11305 0000170A E856FF                  	CALL	OUTT		;Print '^' before control chars
 11306 0000170D 58                      	POP	AX
 11307 0000170E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11308                                  CTRLU:
 11309                                  	;CALL	OUTT
 11310                                  	; 18/12/2022
 11311                                  OUTJ:
 11312 00001710 E950FF                  	jmp	OUTT
 11313                                  ;BUFOUT_RETN:
 11314                                  	;RETN
 11315                                  
 11316                                  ;
 11317                                  ;----------------------------------------------------------------------------
 11318                                  ;
 11319                                  ;**	$STD_AUX_INPUT - System Call 3
 11320                                  ;
 11321                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11322                                  ;
 11323                                  ;	ENTRY	none
 11324                                  ;	EXIT	(al) = character
 11325                                  ;	USES	all
 11326                                  ;
 11327                                  ;----------------------------------------------------------------------------
 11328                                  ;
 11329                                  
 11330                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11331                                  
 11332                                  _$STD_AUX_INPUT:	;System call 3
 11333                                  
 11334 00001713 E8593A                  	CALL	STATCHK
 11335 00001716 BB0300                  	MOV	BX,3
 11336 00001719 E8441F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11337                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11338                                  	;retc
 11339                                  	; 16/12/2022
 11340                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11341                                  	;JC	SHORT BUFOUT_RETN
 11342                                  	;JMP	SHORT TAISTRT
 11343                                  	; 07/12/2022
 11344 0000171C 7304                    	jnc	SHORT TAISTRT
 11345 0000171E C3                      	retn	
 11346                                  
 11347                                  AUXILP:
 11348 0000171F E81F3A                  	CALL	SPOOLINT
 11349                                  TAISTRT:
 11350 00001722 B401                    	MOV	AH,1
 11351 00001724 E87F2D                  	CALL	IOFUNC
 11352 00001727 74F6                    	JZ	SHORT AUXILP
 11353 00001729 30E4                    	XOR	AH,AH
 11354                                  	; 16/12/2022
 11355                                  	;CALL	IOFUNC
 11356                                  	;RETN
 11357                                  	; 07/12/2022
 11358 0000172B E9782D                  	jmp	IOFUNC
 11359                                  
 11360                                  ;
 11361                                  ;----------------------------------------------------------------------------
 11362                                  ;
 11363                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11364                                  ;
 11365                                  ;	ENTRY	(dl) = character
 11366                                  ;	EXIT	none
 11367                                  ;	USES	all
 11368                                  ;
 11369                                  ;----------------------------------------------------------------------------
 11370                                  ;
 11371                                  
 11372                                  _$STD_AUX_OUTPUT:	;System call 4
 11373                                  
 11374 0000172E 53                      	PUSH	BX
 11375 0000172F BB0300                  	MOV	BX,3
 11376 00001732 EB04                    	JMP	SHORT SENDOUT
 11377                                  
 11378                                  ;
 11379                                  ;----------------------------------------------------------------------------
 11380                                  ;
 11381                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11382                                  ;
 11383                                  ;	ENTRY	(dl) = character
 11384                                  ;	EXIT	none
 11385                                  ;	USES	all
 11386                                  ;
 11387                                  ;----------------------------------------------------------------------------
 11388                                  ;
 11389                                  
 11390                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11391                                  
 11392 00001734 53                      	PUSH	BX
 11393 00001735 BB0400                  	MOV	BX,4
 11394                                  
 11395                                  SENDOUT:
 11396 00001738 88D0                    	MOV	AL,DL
 11397 0000173A 50                      	PUSH	AX
 11398 0000173B E8313A                  	CALL	STATCHK
 11399 0000173E 58                      	POP	AX
 11400 0000173F 1E                      	PUSH	DS
 11401 00001740 56                      	PUSH	SI
 11402                                  LISSTRT2:
 11403 00001741 E8D0FE                  	CALL	RAWOUT2
 11404                                  TRIPOP:
 11405 00001744 5E                      	POP	SI
 11406 00001745 1F                      	POP	DS
 11407 00001746 5B                      	POP	BX
 11408                                  SCIS_RETN:	; 20/07/2018
 11409 00001747 C3                      	RETN
 11410                                  ;
 11411                                  ;----------------------------------------------------------------------------
 11412                                  ;
 11413                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11414                                  ;
 11415                                  ;	Check console input status
 11416                                  ;
 11417                                  ;	ENTRY	none
 11418                                  ;	EXIT	AL = -1 character available, = 0 no character
 11419                                  ;	USES	all
 11420                                  ;
 11421                                  ;----------------------------------------------------------------------------
 11422                                  ;
 11423                                  
 11424                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11425                                  
 11426 00001748 E8243A                  	CALL	STATCHK
 11427 0000174B B000                    	MOV	AL,0		; no xor!!
 11428                                  	;retz
 11429 0000174D 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11430 0000174F 0CFF                    	OR	AL,-1
 11431                                  ;SCIS_RETN:
 11432 00001751 C3                      	RETN
 11433                                  
 11434                                  ;
 11435                                  ;----------------------------------------------------------------------------
 11436                                  ;
 11437                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11438                                  ;
 11439                                  ;	Flush console input buffer and perform call in AL
 11440                                  ;
 11441                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11442                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11443                                  ;		return arguments for the fcn supplied in (AL)
 11444                                  ;	USES	all
 11445                                  ;
 11446                                  ;----------------------------------------------------------------------------
 11447                                  ;
 11448                                  
 11449                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11450                                  
 11451 00001752 50                      	PUSH	AX
 11452 00001753 52                      	PUSH	DX
 11453 00001754 31DB                    	XOR	BX,BX
 11454 00001756 E8071F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11455                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11456 00001759 7205                    	JC	SHORT BADJFNCON
 11457 0000175B B404                    	MOV	AH,4
 11458 0000175D E8462D                  	CALL	IOFUNC
 11459                                  
 11460                                  BADJFNCON:
 11461 00001760 5A                      	POP	DX
 11462 00001761 58                      	POP	AX
 11463 00001762 88C4                    	MOV	AH,AL
 11464 00001764 3C01                    	CMP	AL,1
 11465 00001766 7413                    	JZ	SHORT REDISPJ
 11466 00001768 3C06                    	CMP	AL,6
 11467 0000176A 740F                    	JZ	SHORT REDISPJ
 11468 0000176C 3C07                    	CMP	AL,7
 11469 0000176E 740B                    	JZ	SHORT REDISPJ
 11470 00001770 3C08                    	CMP	AL,8
 11471 00001772 7407                    	JZ	SHORT REDISPJ
 11472 00001774 3C0A                    	CMP	AL,10
 11473 00001776 7403                    	JZ	SHORT REDISPJ
 11474 00001778 B000                    	MOV	AL,0
 11475 0000177A C3                      	RETN
 11476                                  
 11477                                  REDISPJ:
 11478 0000177B FA                      	CLI
 11479                                  	;transfer REDISP
 11480 0000177C E908EC                  	JMP	REDISP
 11481                                  
 11482                                  ;============================================================================
 11483                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11484                                  ;============================================================================
 11485                                  ; 20/07/2018 - Retro DOS v3.0
 11486                                  ; 17/05/2019 - Retro DOS v4.0
 11487                                  
 11488                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11489                                  ;
 11490                                  ;	$GET_FCB_POSITION
 11491                                  ;	$FCB_DELETE
 11492                                  ;	$GET_FCB_FILE_LENGTH
 11493                                  ;	$FCB_CLOSE
 11494                                  ;	$FCB_RENAME
 11495                                  ;	SaveFCBInfo
 11496                                  ;	ResetLRU
 11497                                  ;	SetOpenAge
 11498                                  ;	LRUFCB
 11499                                  ;	FCBRegen
 11500                                  ;	BlastSFT
 11501                                  ;	CheckFCB
 11502                                  ;	SFTFromFCB
 11503                                  ;	FCBHardErr
 11504                                  ;
 11505                                  ;	Revision history:
 11506                                  ;
 11507                                  ;		Created: ARR 4 April 1983"
 11508                                  ;			 MZ  6 June  1983 completion of functions
 11509                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11510                                  ;					  times.  Change so successive closes work by
 11511                                  ;					  always returning OK.	Also, detect I/O to
 11512                                  ;					  already closed FCB and return EOF.
 11513                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11514                                  ;					  out of sft into FCB for reconnection
 11515                                  ;
 11516                                  ;		A000	 version 4.00  Jan. 1988
 11517                                  
 11518                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11519                                  ;----------------------------------------------------------------------------
 11520                                  ;
 11521                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11522                                  ;	extent and next record field and set the random record field to point
 11523                                  ;	to that record
 11524                                  ;
 11525                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11526                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11527                                  ;   Registers modified: all
 11528                                  ;
 11529                                  ;----------------------------------------------------------------------------
 11530                                  ;
 11531                                  
 11532                                  _$GET_FCB_POSITION:
 11533 0000177F E8E704                  	call	GetExtended		; point to FCB
 11534 00001782 E8B704                  	call	GetExtent		; DX:AX is current record
 11535                                  	;mov	[si+21h],ax
 11536 00001785 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11537                                  	;mov	[si+23h],dl
 11538 00001788 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11539                                  	;cmp	word [si+0Eh],64
 11540 0000178B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11541 0000178F 7303                    	JAE	short GetFCBBye
 11542                                  	;mov	[si+24h],dh
 11543 00001791 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11544                                  GoodPath:	; 16/12/2022
 11545                                  GetFCBBye:
 11546 00001794 E9C0EE                  	jmp	FCB_RET_OK
 11547                                  
 11548                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11549                                  ;----------------------------------------------------------------------------
 11550                                  ;
 11551                                  ;**	$FCB_Delete - Delete from FCB Template
 11552                                  ;
 11553                                  ;	given an FCB, remove all directory entries in the current
 11554                                  ;	directory that have names that match the FCB's ?  marks.
 11555                                  ;
 11556                                  ;	ENTRY	(DS:DX) = address of FCB
 11557                                  ;	EXIT	entries matching the FCB are deleted
 11558                                  ;		(al) = ff iff no entries were deleted
 11559                                  ;	USES	all
 11560                                  ;
 11561                                  ;----------------------------------------------------------------------------
 11562                                  ;
 11563                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11564                                  
 11565                                  _$FCB_DELETE:		; System call 19
 11566                                  					; OpenBuf is in DOSDATA
 11567 00001797 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11568                                  
 11569 0000179A E87953                  	call	TransFCB		; convert FCB to path
 11570 0000179D 7207                    	JC	short BadPath 		; signal no deletions
 11571                                  
 11572 0000179F 16                      	push	SS
 11573 000017A0 1F                      	pop	DS			; SS is DOSDATA
 11574                                  
 11575 000017A1 E8900D                  	call	DOS_DELETE		; wham
 11576                                  	;JC	short BadPath
 11577                                  	; 16/12/2022
 11578 000017A4 73EE                    	jnc 	short GoodPath
 11579                                  ;GoodPath:
 11580                                  ;	;jmp	FCB_RET_OK		; do a good return
 11581                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11582                                  ;	jmp	short GetFCBBye
 11583                                  
 11584                                  BadPath:
 11585                                  	; Error code is in AX
 11586                                  
 11587 000017A6 E9B1EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11588                                  
 11589                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11590                                  ;----------------------------------------------------------------------------
 11591                                  ;
 11592                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11593                                  ;	file in records (rounded up if partial).
 11594                                  ;
 11595                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11596                                  ;   Outputs:	Random record field updated to reflect the number of records
 11597                                  ;   Registers modified: all
 11598                                  ;
 11599                                  ;----------------------------------------------------------------------------
 11600                                  ;
 11601                                  	; 15/01/2024
 11602                                  
 11603                                  _$GET_FCB_FILE_LENGTH:
 11604                                  
 11605 000017A9 E8BD04                  	call	GetExtended		; get real FCB pointer
 11606                                  					; DX points to Input FCB
 11607                                  
 11608                                  					; OpenBuf is in DOSDATA
 11609 000017AC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11610                                  
 11611 000017AF 1E                      	push	ds			; save pointer to true FCB
 11612 000017B0 56                      	push	si
 11613 000017B1 E86253                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11614 000017B4 5E                      	pop	si
 11615 000017B5 1F                      	pop	ds
 11616 000017B6 72EE                    	JC	short BadPath
 11617 000017B8 1E                      	push	ds			; save pointer
 11618 000017B9 56                      	push	si
 11619 000017BA 16                      	push	ss		
 11620 000017BB 1F                      	pop	ds
 11621 000017BC E88511                  	call	GET_FILE_INFO		; grab the info
 11622 000017BF 5E                      	pop	si			; get pointer back
 11623 000017C0 1F                      	pop	ds
 11624 000017C1 72E3                    	JC	short BadPath 		; invalid something
 11625                                  	; 15/01/2024
 11626                                  	;MOV	DX,BX (*)		; get high order size
 11627                                  	;MOV	AX,DI (**)		; get low order size
 11628 000017C3 89D8                    	mov	ax,bx ; hw of file size
 11629                                  	;
 11630                                  	;mov	bx,[si+0Eh]
 11631 000017C5 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11632 000017C8 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11633 000017CA 7502                    	JNZ	short GetSize 		; not empty
 11634                                  	;MOV	BX,128
 11635 000017CC B380                    	mov	bl,128	; 15/01/2024
 11636                                  GetSize:
 11637                                  	; 15/01/2024
 11638                                  	;MOV	DI,AX			; save low order word
 11639                                  	;MOV	AX,DX			; move high order for divide
 11640                                  	;xchg	ax,dx ; (*)
 11641                                  	; ax = hw of file size
 11642                                  
 11643 000017CE 31D2                    	XOR	DX,DX			; clear out high
 11644 000017D0 F7F3                    	DIV	BX			; wham
 11645 000017D2 50                      	PUSH	AX			; save dividend
 11646 000017D3 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11647 000017D5 F7F3                    	DIV	BX			; wham
 11648 000017D7 89D1                    	MOV	CX,DX			; save remainder
 11649 000017D9 5A                      	POP	DX			; get high order dividend
 11650 000017DA E306                    	JCXZ	LengthStore		; no roundup
 11651 000017DC 83C001                  	ADD	AX,1
 11652 000017DF 83D200                  	ADC	DX,0			; 32-bit increment
 11653                                  LengthStore:
 11654                                  	;mov	[si+21h],ax
 11655 000017E2 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11656                                  	;mov	[si+23h],dl
 11657 000017E5 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11658 000017E8 08F6                    	OR	DH,DH
 11659 000017EA 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11660                                  	;mov	[si+24h],dh
 11661 000017EC 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11662                                  	; 16/12/2022
 11663                                  GoodRet:
 11664                                  	;jmp	FCB_RET_OK
 11665 000017EF EBA3                    	jmp	short GoodPath
 11666                                  
 11667                                  ;Break <$FCB_Close - close a file>
 11668                                  ;----------------------------------------------------------------------------
 11669                                  ;
 11670                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11671                                  ;	as the FCB may be used for further I/O
 11672                                  ;
 11673                                  ;   Inputs:	DS:DX point to FCB
 11674                                  ;   Outputs:	AL = FF if file was not found on disk
 11675                                  ;   Registers modified: all
 11676                                  ;
 11677                                  ;----------------------------------------------------------------------------
 11678                                  ;
 11679                                  	; 16/01/2024
 11680                                  
 11681                                  _$FCB_CLOSE:		; System call 16
 11682                                  
 11683 000017F1 30C0                    	XOR	AL,AL			; default search attributes
 11684 000017F3 E87304                  	call	GetExtended		; DS:SI point to real FCB
 11685 000017F6 7403                    	JZ	short NoAttr		; not extended
 11686 000017F8 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11687                                  NoAttr:
 11688                                  					; SS override
 11689 000017FB 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11690 000017FF E8D503                  	call	SFTFromFCB
 11691 00001802 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11692                                  
 11693                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11694                                  	; there is no need to set the SFT's attribute.
 11695                                  
 11696                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11697                                  	;;; done
 11698                                  
 11699                                  	;mov	al,[es:di+4]
 11700 00001804 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11701 00001808 30E4                    	XOR	AH,AH
 11702 0000180A 50                      	PUSH	AX
 11703                                  
 11704                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11705                                  	;;; done
 11706                                  
 11707 0000180B E8345B                  	call	CheckShare
 11708 0000180E 7508                    	JNZ	short NoStash
 11709 00001810 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11710                                  	;mov	[es:di+4],al
 11711 00001814 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11712                                  NoStash:
 11713                                  
 11714                                  ; 16/01/2024
 11715                                  %if 0
 11716                                  	;mov	ax,[si+14h]
 11717                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11718                                  	;mov	[es:di+0Fh],ax
 11719                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11720                                  	;mov	ax,[si+16h]
 11721                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11722                                  	;mov	[es:di+0Dh],ax
 11723                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11724                                  	;mov	ax,[si+10h]
 11725                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11726                                  	;mov	[es:di+11h],ax
 11727                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11728                                  	;mov	ax,[si+12h]
 11729                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11730                                  	;mov	[es:di+13h],ax
 11731                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11732                                  	;or	word [es:di+5],4000h
 11733                                  	; 17/12/2022
 11734                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11735                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11736                                  %else
 11737                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11738 00001818 1E                      	push	ds
 11739                                  	;lds	ax,[si+14h]
 11740 00001819 C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11741                                  	;mov	[es:di+0Fh],ax
 11742 0000181C 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11743                                  	;mov	[es:di+0Dh],ds		
 11744 00001820 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11745 00001824 1F                      	pop	ds
 11746                                  	;lds	ax,[si+10h]
 11747 00001825 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11748                                  	;mov	[es:di+11h],ax
 11749 00001828 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11750                                  	;mov	[es:di+13h],ds
 11751 0000182C 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11752                                  	; 16/01/2024
 11753                                  	;;or	word [es:di+5], 4000h
 11754                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11755 00001830 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11756                                  %endif
 11757                                  
 11758 00001835 16                      	push	ss
 11759 00001836 1F                      	pop	ds
 11760 00001837 E80317                  	call	DOS_CLOSE	; wham
 11761 0000183A C43E[9E05]              	LES	DI,[THISSFT]
 11762                                  
 11763                                  	;;; 9/8/86 F.C. restore SFT attribute
 11764 0000183E 59                      	POP	CX
 11765                                  	;mov	[es:di+4],cl
 11766 0000183F 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11767                                  	;;; 9/8/86 F.C. restore SFT attribute
 11768                                  
 11769 00001843 9C                      	PUSHF
 11770                                  	;test	word [es:di],0FFFFh
 11771                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11772                                  				; zero ref count gets blasted
 11773 00001844 26833D00                	cmp	word [ES:DI],0
 11774 00001848 7507                    	jnz     short CloseOK
 11775 0000184A 50                      	PUSH	AX
 11776 0000184B B04D                    	MOV	AL,'M' ; 4Dh
 11777 0000184D E8FC02                  	call	BlastSFT
 11778 00001850 58                      	POP	AX
 11779                                  CloseOK:
 11780 00001851 9D                      	POPF
 11781 00001852 739B                    	JNC	short GoodRet
 11782                                  	;cmp	al,6
 11783 00001854 3C06                    	CMP	AL,error_invalid_handle
 11784 00001856 7497                    	JZ	short GoodRet
 11785                                  	;mov	al,2
 11786 00001858 B002                    	MOV	AL,error_file_not_found
 11787                                  fren90:
 11788                                  	; 16/12/2022
 11789                                  fcb_close_err:
 11790 0000185A E9FDED                  	jmp	FCB_RET_ERR
 11791                                  
 11792                                  ;
 11793                                  ;----------------------------------------------------------------------------
 11794                                  ;
 11795                                  ;**	$FCB_Rename - Rename a File
 11796                                  ;
 11797                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11798                                  ;	multiple files copying from the meta characters.
 11799                                  ;
 11800                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11801                                  ;		    name of the files to be renamed. Starting at offset 11h
 11802                                  ;		    in the FCB is the destination name.
 11803                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11804                                  ;		AL = FF -> some files may have been renamed but:
 11805                                  ;			rename to existing file or source file not found
 11806                                  ;	USES	ALL
 11807                                  ;
 11808                                  ;----------------------------------------------------------------------------
 11809                                  ;
 11810                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11811                                  
 11812                                  _$FCB_RENAME:		; System call 23
 11813                                  
 11814 0000185D E80904                  	call	GetExtended		; get pointer to real FCB
 11815 00001860 52                      	push	dx
 11816 00001861 8A04                    	MOV	AL,[SI] 		; get drive byte
 11817 00001863 83C610                  	ADD	SI,10h			; point to destination
 11818                                  
 11819                                  					; RenBuf is in DOSDATA
 11820 00001866 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11821 00001869 FF34                    	push	word [SI]
 11822 0000186B 1E                      	push	ds
 11823                                  	;push	di			; save source pointer for TransFCB
 11824                                  	; 16/01/2024 - BugFix !
 11825 0000186C 56                      	push	si
 11826 0000186D 8804                    	MOV	[SI],AL			; drop in real drive
 11827 0000186F 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11828 00001871 E8A252                  	call	TransFCB		; munch this pathname
 11829 00001874 5E                      	pop	si
 11830 00001875 1F                      	pop	ds	
 11831 00001876 8F04                    	pop	WORD [SI]		; get path back
 11832 00001878 5A                      	pop	dx			; Original FCB pointer
 11833 00001879 72DF                    	JC	short fren90		; bad path -> error
 11834                                  
 11835                                  					; SS override for WFP_Start & Ren_WFP
 11836 0000187B 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11837 00001880 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11838                                  
 11839                                  					; OpenBuf is in DOSDATA
 11840 00001885 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11841 00001888 E88B52                  	call	TransFCB		; wham
 11842                                  					; NOTE that this call is pointing
 11843                                  					;  back to the ORIGINAL FCB so
 11844                                  					;  SATTRIB gets set correctly
 11845 0000188B 72CD                    	JC	short fren90		; error
 11846 0000188D E8820E                  	call	DOS_RENAME
 11847 00001890 72C8                    	JC	short fren90
 11848                                  	; 16/12/2022
 11849 00001892 E9C2ED                  	jmp	FCB_RET_OK
 11850                                  	
 11851                                  ;	Error -
 11852                                  ;
 11853                                  ;	(al) = error code
 11854                                  
 11855                                  	; 16/12/2022
 11856                                  ;fren90:	
 11857                                  ;	;jmp	FCB_RET_ERR
 11858                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11859                                  ;	jmp	short fcb_close_err
 11860                                  
 11861                                  ;Break <Misbehavior fixers>
 11862                                  ;
 11863                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11864                                  ;   user's space so he may move them at will. Second, they have a small
 11865                                  ;   reserved area that may be used for system information. Third, there was
 11866                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11867                                  ;   usage.
 11868                                  ;
 11869                                  ;   This results in the following misbehavior:
 11870                                  ;
 11871                                  ;	infinite opens of the same file:
 11872                                  ;
 11873                                  ;	While (TRUE) {			While (TRUE) {
 11874                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11875                                  ;	    Read (FCB); 		    Write (FCB);
 11876                                  ;	    }				    }
 11877                                  ;
 11878                                  ;	infinite opens of different files:
 11879                                  ;
 11880                                  ;	While (TRUE) {			While (TRUE) {
 11881                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11882                                  ;	    Read (FCB); 		    Write (FCB);
 11883                                  ;	    }				    }
 11884                                  ;
 11885                                  ;	multiple closes of the same file:
 11886                                  ;
 11887                                  ;	FCBOpen (FCB);
 11888                                  ;	while (TRUE)
 11889                                  ;	    FCBClose (FCB);
 11890                                  ;
 11891                                  ;	I/O after closing file:
 11892                                  ;
 11893                                  ;	FCBOpen (FCB);
 11894                                  ;	while (TRUE) {
 11895                                  ;	    FCBWrite (FCB);
 11896                                  ;	    FCBClose (FCB);
 11897                                  ;	    }
 11898                                  ;
 11899                                  ;   The following is am implementation of a methodology for emulating the
 11900                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11901                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11902                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11903                                  ;   the local machine.
 11904                                  ;
 11905                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11906                                  ;   structures depending on the file itself and the state of operations of the
 11907                                  ;   OS. The information contained in this reserved field is enough to
 11908                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11909                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11910                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11911                                  ;
 11912                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11913                                  ;
 11914                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11915                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11916                                  ;   regenerated.
 11917                                  ;
 11918                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11919                                  ;   longer available. We can make up for this by using the following
 11920                                  ;   information:
 11921                                  ;
 11922                                  ;	The Drive number (from the DPB).
 11923                                  ;	The physical sector of the directory that contains the entry.
 11924                                  ;	The relative position of the entry in the sector.
 11925                                  ;	The first cluster field.
 11926                                  ;	The last used SFT.
 11927                                  ;      OR In the case of a device FCB
 11928                                  ;	The low 6 bits of sf_flags (indicating device type)
 11929                                  ;	The pointer to the device header
 11930                                  ;
 11931                                  ;   We read in the particular directory sector and examine the indicated
 11932                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11933                                  ;
 11934                                  ;   Some key items need to be remembered:
 11935                                  ;
 11936                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11937                                  ;	information. We enforce good behavior on the FCBs.
 11938                                  ;
 11939                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11940                                  ;	open VCs. The VCs may be closed only at process termination.
 11941                                  ;
 11942                                  ;	If this is not an installed version of the DOS, file sharing will
 11943                                  ;	always be present.
 11944                                  ;
 11945                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11946                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11947                                  ;
 11948                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11949                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11950                                  ;	proper OI record.
 11951                                  ;
 11952                                  ;   The test bits are:
 11953                                  ;
 11954                                  ;	00 -> local file
 11955                                  ;	40 -> sharing local
 11956                                  ;	80 -> network
 11957                                  ;	C0 -> local device
 11958                                  
 11959                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11960                                  ;----------------------------------------------------------------------------
 11961                                  ;
 11962                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11963                                  ;	pieces of information into the FCB to allow for subsequent
 11964                                  ;	regeneration. Poke LRU also.
 11965                                  ;
 11966                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11967                                  ;		DS:SI point to the FCB (not an extended one)
 11968                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11969                                  ;		DS:SI preserved
 11970                                  ;		ES:DI point to sft
 11971                                  ;   Registers modified: All
 11972                                  ;
 11973                                  ;
 11974                                  ;----------------------------------------------------------------------------
 11975                                  ;
 11976                                  
 11977                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11978                                  
 11979                                  SaveFCBInfo:
 11980                                  
 11981 00001895 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11982 0000189A E8CCF9                  	call	IsSFTNet
 11983 0000189D 740B                    	JZ	short SaveLocal		; if not network then save local info
 11984                                  ;
 11985                                  ;----- In net support -----
 11986                                  ;
 11987                                  	; 17/05/2019 - Retro DOS v4.0
 11988                                  
 11989                                  	; MSDOS 3.3
 11990                                  	;;mov	ax,[es:di+1Dh]
 11991                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11992                                  	;;mov	[si+1Ah],ax
 11993                                  	;mov	[si+fcb_net_handle],ax
 11994                                  	;push	es
 11995                                  	;push	di
 11996                                  	;;les	di,[es:di+19h]
 11997                                  	;LES	DI,[ES:DI+sf_netid]
 11998                                  	;;mov	[si+1Ch],di
 11999                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12000                                  	;;mov 	[si+1Eh],es
 12001                                  	;MOV	[SI+fcb_netID+2],ES
 12002                                  	;pop	di
 12003                                  	;pop	es
 12004                                  
 12005                                  	; MSDOS 6.0
 12006                                  	;mov	ax,[es:di+0Bh]
 12007 0000189F 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12008                                  	;mov	[si+1Ch],ax
 12009 000018A3 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12010                                  	
 12011                                  	;mov	bl,80h
 12012 000018A6 B380                    	MOV	BL,FCBNETWORK
 12013                                  ;
 12014                                  ;----- END In net support -----
 12015                                  ;
 12016 000018A8 EB65                    	jmp	SHORT SaveSFN
 12017                                  
 12018                                  SaveLocal:
 12019                                  	;IF	Installed
 12020 000018AA E8955A                  	call	CheckShare
 12021                                  	;JZ	short SaveNoShare	; no sharer
 12022                                  	;JMP	short SaveShare		; sharer present
 12023                                  	; 16/12/2022
 12024                                  	; 28/07/2019
 12025 000018AD 755B                    	jnz	short SaveShare
 12026                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12027                                  	;JZ	short SaveNoShare	; no sharer
 12028                                  	;JMP	short SaveShare		; sharer present
 12029                                  
 12030                                  SaveNoShare:
 12031                                  	;;test 	word [es:di+5],80h
 12032                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12033 000018AF 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12034 000018B4 7542                    	JNZ	short SaveNoShareDev	; Device
 12035                                  
 12036                                  	; Save no sharing local file information
 12037                                  
 12038                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12039                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12040 000018B6 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12041                                  	;mov	[si+1Dh],ax
 12042 000018BA 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12043                                  
 12044                                  	; MSDOS 6.0
 12045                                  
 12046                                  	;SR; Store high byte of directory sector
 12047                                  	;mov	ax,[es:di+1Dh]
 12048 000018BD 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12049                                  	
 12050                                  	; SR;
 12051                                  	; We have to store the read-only and archive attributes of the file.
 12052                                  	; We extract it from the SFT and store it in the top two bits of the 
 12053                                  	; sector number ( sector number == 22 bits only )
 12054                                  
 12055                                  	;mov	bl,[es:di+4]
 12056 000018C1 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12057 000018C5 88DF                    	mov	bh,bl
 12058 000018C7 D0CB                    	ror	bl,1
 12059 000018C9 D0E7                    	shl	bh,1
 12060 000018CB 08FB                    	or	bl,bh
 12061 000018CD 80E3C0                  	and	bl,0C0h
 12062 000018D0 08D8                    	or	al,bl
 12063                                  	;mov	[si+18h],al ; 08/11/2022
 12064 000018D2 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12065                                  
 12066                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12067                                  	;mov	al,[es:di+1Fh]
 12068 000018D5 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12069                                  	;mov	[si+1Fh],al
 12070 000018D9 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12071                                  	;mov	ax,[es:di+0Bh]
 12072 000018DC 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12073                                  	;mov	[si+1Bh],ax
 12074 000018E0 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12075 000018E3 B300                    	MOV	BL,0
 12076                                  
 12077                                  	; Create the bits field from the dirty/device bits of the flags word 
 12078                                  	; and the mode byte
 12079                                  
 12080                                  SetFCBBits:
 12081                                  	;mov	ax,[es:di+5]
 12082 000018E5 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12083 000018E9 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12084                                  	;or	al,[es:di+2]
 12085 000018EB 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12086                                  	;mov	[si+1Ah], al
 12087 000018EF 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12088                                  
 12089                                  	; MSDOS 6.0
 12090                                  	
 12091                                  	; SR;
 12092                                  	; Check if we came here for local file or device. If for local file, 
 12093                                  	; skip setting of SFT index
 12094                                  	
 12095 000018F2 08DB                    	or	bl,bl
 12096 000018F4 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 12097                                  
 12098 000018F6 EB17                    	JMP	short SaveSFN 		; go and save SFN
 12099                                  
 12100                                  	; Save no sharing local device information
 12101                                  
 12102                                  SaveNoShareDev:
 12103                                  	;mov	ax,[es:di+7]
 12104 000018F8 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12105                                  	;mov	[si+1Ah],ax
 12106 000018FC 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 12107                                  	;mov	ax,[es:di+9]
 12108 000018FF 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12109 00001903 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 12110                                  	;mov	bl,40h
 12111 00001906 B340                    	MOV	BL,FCBDEVICE
 12112                                  	; 28/12/2022
 12113 00001908 EBDB                    	JMP	short SetFCBBits	; go and save SFN
 12114                                  
 12115                                  SaveShare:
 12116                                  	;ENDIF
 12117                                  
 12118                                  ;----- In share support -----
 12119                                  
 12120                                  	;call	far [ss:ShSave]
 12121 0000190A 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12122                                  
 12123                                  ;----- end in share support -----
 12124                                  
 12125                                  	; 17/05/2019
 12126                                  
 12127                                  SaveSFN:
 12128                                  	;lea	ax,[di-6]
 12129 0000190F 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12130                                  	
 12131                                  	; Adjust for offset to table.
 12132                                  	
 12133 00001912 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12134                                  
 12135 00001917 53                      	push	bx			;bx = FCB type (net/Share or local)
 12136                                  	;;mov	bl,53 ; MSDOS 3.3
 12137                                  	;mov	bl,59 ; MSDOS 6.0
 12138 00001918 B33B                    	MOV	BL,SF_ENTRY.size
 12139 0000191A F6F3                    	DIV	BL
 12140                                  	;mov	[si+18h],al
 12141 0000191C 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12142 0000191F 5B                      	pop	bx			;restore bx
 12143                                  
 12144                                  SaveNoSFN:
 12145                                  	;mov	ax,[es:di+5]
 12146 00001920 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12147 00001924 243F                    	AND	AL,3Fh			; get real drive
 12148 00001926 08D8                    	OR	AL,BL
 12149                                  	;mov	[si+19h],al
 12150 00001928 884419                  	MOV	[SI+fcb_l_drive],AL
 12151                                  
 12152 0000192B 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12153 0000192F 40                      	INC	AX
 12154                                  	;mov	[es:di+15h],ax
 12155 00001930 26894515                	MOV	[ES:DI+sf_LRU],AX
 12156 00001934 7506                    	JNZ	short SimpleStuff
 12157                                  	
 12158                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12159                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12160                                  	
 12161                                  	;mov	bx,15h
 12162 00001936 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12163 00001939 E80500                  	call	ResetLRU
 12164                                  
 12165                                  	; Set new LRU to AX
 12166                                  SimpleStuff:
 12167 0000193C 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12168 00001940 C3                      	retn
 12169                                  
 12170                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12171                                  ;----------------------------------------------------------------------------
 12172                                  ;
 12173                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12174                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12175                                  ;   at 0.
 12176                                  ;
 12177                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12178                                  ;		ES:DI point to SFT currently being updated
 12179                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12180                                  ;		AX has 8000h
 12181                                  ;   Registers modified: none
 12182                                  ;
 12183                                  ;----------------------------------------------------------------------------
 12184                                  ;
 12185                                  
 12186                                  	; 17/05/2019 - Retro DOS v4.0
 12187                                  ResetLRU:
 12188                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12189                                  	; DOSDATA
 12190                                  
 12191 00001941 B80080                  	MOV	AX,8000h
 12192 00001944 06                      	push	es
 12193 00001945 57                      	push	di
 12194                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12195 00001946 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12196                                  	;mov	cx,[es:di+4]
 12197 0000194B 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12198                                  	;lea	di,[di+6]
 12199 0000194F 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12200                                  ovScan:
 12201 00001952 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12202 00001955 7703                    	JA	short ovLoop
 12203 00001957 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12204                                  ovLoop:
 12205                                  	;;add	di,53	; MSDOS 3.3
 12206                                  	;add	di,59	; MSDOS 6.0	
 12207 0000195A 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12208 0000195D E2F3                    	LOOP	ovScan
 12209 0000195F 5F                      	pop	di
 12210 00001960 07                      	pop	es
 12211 00001961 268901                  	MOV	[ES:DI+BX],AX
 12212 00001964 C3                      	retn
 12213                                  
 12214                                  ;IF  0  ; We dont need this routine any more.
 12215                                  ;
 12216                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12217                                  ;----------------------------------------------------------------------------
 12218                                  ;
 12219                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12220                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12221                                  ;   count here and fill in the appropriate field.
 12222                                  ;
 12223                                  ;   Inputs:	ES:DI point to SFT
 12224                                  ;   Outputs:	ES:DI has the open age field filled in.
 12225                                  ;		If open age has wraparound, we will have subtracted 8000h
 12226                                  ;		    from all open ages.
 12227                                  ;   Registers modified: AX
 12228                                  ;
 12229                                  ;----------------------------------------------------------------------------
 12230                                  ;
 12231                                  ;SetOpenAge:
 12232                                  ;	; 20/07/2018 - Retro DOS v3.0
 12233                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12234                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12235                                  ;
 12236                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12237                                  ;
 12238                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12239                                  ;	INC	AX
 12240                                  ;	;mov	[es:di+17h],ax
 12241                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12242                                  ;	JNZ	short SetDone
 12243                                  ;	;mov	bx,17h
 12244                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12245                                  ;	call	ResetLRU
 12246                                  ;SetDone:
 12247                                  ;	MOV	[CS:OpenLRU],AX
 12248                                  ;	retn
 12249                                  ;
 12250                                  ;ENDIF	; SetOpenAge no longer needed
 12251                                  
 12252                                  ; 21/07/2018 - Retro DOS v3.0
 12253                                  ; LRUFCB for MSDOS 6.0 !
 12254                                  
 12255                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12256                                  ;----------------------------------------------------------------------------
 12257                                  ;
 12258                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12259                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12260                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12261                                  ;
 12262                                  ;   Inputs:	none
 12263                                  ;   Outputs:	ES:DI point to SFT
 12264                                  ;		ThisSFT points to SFT
 12265                                  ;		SFT is zeroed
 12266                                  ;		Carry set of closes failed
 12267                                  ;   Registers modified: none
 12268                                  ;
 12269                                  ;----------------------------------------------------------------------------
 12270                                  ;
 12271                                  ; MSDOS 6.0
 12272                                  ;IF 0	; rewritten this routine
 12273                                  ;
 12274                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12275                                  ;	call	save_world
 12276                                  ;	
 12277                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12278                                  ; to find the lease recently used one that is younger than the open age.  We
 12279                                  ; operate be scanning the list n times finding the least age that is greater
 12280                                  ; or equal to the previous minimum age.
 12281                                  ;
 12282                                  ;   BP is the count of times we need to go through this loop.
 12283                                  ;   AX is the current acceptable minimum age to consider
 12284                                  ;
 12285                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12286                                  ;	XOR	AX,AX			; low = 0;
 12287                                  ;
 12288                                  ; If we've scanned the table n times, then we are done.
 12289                                  ;
 12290                                  ;lru1:
 12291                                  ;	CMP	bp,0			; while (k--) {
 12292                                  ;	JZ	short lru75
 12293                                  ;	DEC	bp
 12294                                  ;
 12295                                  ; Set up for scan.
 12296                                  ;
 12297                                  ;   AX is the minimum age for consideration
 12298                                  ;   BX is the minimum age found during the scan
 12299                                  ;   SI is the position of the entry that corresponds to BX
 12300                                  ;
 12301                                  ;	MOV	BX,-1			;     min = 0xffff;
 12302                                  ;	MOV	si,BX			;     pos = 0xffff;
 12303                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12304                                  ;	;mov	cx,[es:di+4]
 12305                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12306                                  ;	;lea	di,[di+6]
 12307                                  ;	LEA	DI,[DI+SFT.SFTable]
 12308                                  ;
 12309                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12310                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12311                                  ; are done.  In both cases, we use the found entry.
 12312                                  ;
 12313                                  ;lru2:
 12314                                  ;	cmp	word [es:di],0
 12315                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12316                                  ;	jz	short lru25
 12317                                  ;	;cmp	word [es:di],-1
 12318                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12319                                  ;	cmp	word [es:di],sf_busy
 12320                                  ;	jnz	short lru3
 12321                                  ;
 12322                                  ; The entry is usable without further scan.  Go and use it.
 12323                                  ;
 12324                                  ;lru25:
 12325                                  ;	MOV	si,DI			;	      pos = i;
 12326                                  ;	JMP	short lru11		;	      goto got;
 12327                                  ;
 12328                                  ; See if the entry is for the network or for the sharer.
 12329                                  ;
 12330                                  ;  If for the sharer or network then
 12331                                  ;	if the age < current minimum AND >= allowed minimum then
 12332                                  ;	    this entry becomes current minimum
 12333                                  ;
 12334                                  ;lru3:
 12335                                  ;	;test	word [es:di+5],8000h
 12336                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12337                                  ;					;	  if (!net[i]
 12338                                  ;	JNZ	short lru35
 12339                                  ;if installed
 12340                                  ;	call	CheckShare		;		&& !sharing)
 12341                                  ;	JZ	short lru5		;	  else
 12342                                  ;ENDIF
 12343                                  ;
 12344                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12345                                  ; current minimum.
 12346                                  ;
 12347                                  ;lru35:
 12348                                  ;	;mov	dx,[es:di+17h]
 12349                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12350                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12351                                  ;	JB	short lru5
 12352                                  ;	CMP	DX,BX
 12353                                  ;	JAE	short lru5		;	      age[i] < min) {
 12354                                  ;
 12355                                  ; entry is new minimum.  Remember his age.
 12356                                  ;
 12357                                  ;	mov	bx,DX			;	      min = age[i];
 12358                                  ;	mov	si,di			;	      pos = i;
 12359                                  ;
 12360                                  ; End of loop.	gp back for more
 12361                                  ;
 12362                                  ;lru5:
 12363                                  ;	;add	di,53
 12364                                  ;	add	di,SF_ENTRY.size
 12365                                  ;	loop	lru2			;	      }
 12366                                  ;
 12367                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12368                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12369                                  ; complete.  Go find LRU.
 12370                                  ;
 12371                                  ;lru6:	
 12372                                  ;	cmp	si,-1			; position not -1?
 12373                                  ;	jz	short lru75		; no, done with everything
 12374                                  ;	lea	ax,[bx+1]		; set new threshold age
 12375                                  ;	jmp	short lru1		; go and loop for more
 12376                                  ;lru65:	
 12377                                  ;	stc
 12378                                  ;	jmp	short LRUDead		;	  return -1;
 12379                                  ;
 12380                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12381                                  ; network entry. We now make a second pass through to find the LRU entry
 12382                                  ; that is local-no-share or has age >= AX
 12383                                  ;
 12384                                  ;lru75:
 12385                                  ;	mov	bx,-1			; min = 0xffff;
 12386                                  ;	mov	si,bx			; pos = 0xffff;
 12387                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12388                                  ;	;mov	cx,[es:di+4]
 12389                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12390                                  ;	;lea	di,[di+6]
 12391                                  ;	LEA	DI,[DI+SFT.SFTable]
 12392                                  ;
 12393                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12394                                  ; then check for lru.
 12395                                  ;
 12396                                  ;lru8:
 12397                                  ;	;test	word [es:di+5],8000h
 12398                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12399                                  ;	jnz	short lru85		; is for network, go check age
 12400                                  ;	call	CheckShare		; sharer here?
 12401                                  ;	jz	short lru86		; no, go check lru
 12402                                  ;
 12403                                  ; Network or sharer.  Check age
 12404                                  ;
 12405                                  ;lru85:
 12406                                  ;	;cmp	[es:di+17h],ax
 12407                                  ;	cmp	[es:di+sf_OpenAge],ax
 12408                                  ;	jb	short lru9		; age is before threshold, skip it
 12409                                  ;
 12410                                  ; Check LRU
 12411                                  ;
 12412                                  ;lru86:
 12413                                  ;	;cmp	[es:di+15h],bx
 12414                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12415                                  ;	jae	short lru9		; no, skip this
 12416                                  ;	mov	si,di			; remember position
 12417                                  ;	;mov	bx,[es:di+15h]
 12418                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12419                                  ;
 12420                                  ; Done with this entry, go back for more.
 12421                                  ;
 12422                                  ;lru9:
 12423                                  ;	;add	di, 53
 12424                                  ;	add	di,SF_ENTRY.size
 12425                                  ;	loop	lru8
 12426                                  ;
 12427                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12428                                  ; out. The conditions here are:
 12429                                  ;
 12430                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12431                                  ;
 12432                                  ;lru10:
 12433                                  ;	cmp	si,-1			; if no one f
 12434                                  ;	jz	short lru65		;     return -1;
 12435                                  ;lru11:
 12436                                  ;	mov	di,si
 12437                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12438                                  ;	MOV	[CS:THISSFT+2],ES
 12439                                  ;
 12440                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12441                                  ; is 0.
 12442                                  ;
 12443                                  ;	;test	word [es:di+5],8000h
 12444                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12445                                  ;	JNZ	short LRUClose
 12446                                  ;IF INSTALLED
 12447                                  ;	call	CheckShare
 12448                                  ;	JZ	short LRUDone
 12449                                  ;ENDIF
 12450                                  ;
 12451                                  ; Repeat close until ref count is 0
 12452                                  ;
 12453                                  ;LRUClose:
 12454                                  ;	push	ss
 12455                                  ;	pop	ds
 12456                                  ;	LES	DI,[THISSFT]
 12457                                  ;	cmp     word [es:di],0
 12458                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12459                                  ;	JZ	short LRUDone 		; nope, all done
 12460                                  ;	call	DOS_CLOSE
 12461                                  ;	jnc	short LRUClose		; no error => clean up
 12462                                  ;	;cmp	al,6
 12463                                  ;	cmp	al,error_invalid_handle
 12464                                  ;	jz	short LRUClose
 12465                                  ;	stc
 12466                                  ;	JMP	short LRUDead
 12467                                  ;LRUDone:
 12468                                  ;	XOR	AL,AL
 12469                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12470                                  ;
 12471                                  ;LRUDead:
 12472                                  ;	call	restore_world
 12473                                  ;	LES     DI,[CS:THISSFT]
 12474                                  ;	jnc	short LRUFCB_retn
 12475                                  ;LRUFCB_err:
 12476                                  ;	; mov	al, 23h	
 12477                                  ;	MOV	AL,error_FCB_unavailable
 12478                                  ;LRUFCB_retn:	
 12479                                  ;	retn:
 12480                                  ;
 12481                                  ;ENDIF	; LRUFCB has been rewritten below.
 12482                                  
 12483                                  ; 17/05/2019 - Retro DOS v4.0
 12484                                  ; LRUFCB for MSDOS 6.0 !
 12485                                  ;----------------------------------------------------------------------------
 12486                                  ;
 12487                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12488                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12489                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12490                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12491                                  ; optimize regeneration operations by keeping track of the current local
 12492                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12493                                  ; local SFT in the SFT Block.
 12494                                  ;
 12495                                  ; Inputs: al = 0 => Regenerate SFT operation
 12496                                  ;	    = 1 => Allocate new SFT for Open/Create
 12497                                  ;
 12498                                  ; Outputs: Carry clear
 12499                                  ;	 	es:di = Address of allocated SFT
 12500                                  ;	  	ThisSFT = Address of allocated SFT
 12501                                  ;
 12502                                  ;	  carry set if closes of net/Share files failed 
 12503                                  ;		al = error_FCB_unavailable
 12504                                  ;
 12505                                  ; Registers affected: None
 12506                                  ;
 12507                                  ;----------------------------------------------------------------------------
 12508                                  
 12509                                  ;LruFCB	PROC	NEAR
 12510                                  LRUFCB:
 12511                                  	; 17/05/2019 - Retro DOS v4.0
 12512                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12513                                  
 12514                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12515                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12516                                  
 12517 00001965 06                      	push	es	; * (MSDOS 6.21)
 12518                                  	
 12519 00001966 E8FDEA                  	call	save_world
 12520                                  	
 12521                                  	;getdseg <ds>		;ds = DOSDATA
 12522 00001969 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12523                                  
 12524 0000196E 08C0                    	or	al,al		;Check if regenerate allocation
 12525 00001970 751A                    	jnz	short lru1	;Try to find SFT to use
 12526                                  
 12527                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12528                                  	; local SFT, just return that SFT to reuse
 12529                                  
 12530 00001972 8B3E[4410]              	mov	di,[LocalSFT]
 12531 00001976 0B3E[4610]              	or	di,[LocalSFT+2]	;is address == 0?
 12532 0000197A 7410                    	jz	short lru1	;invalid local SFT, find one
 12533                                  
 12534                                  	; We have found a valid local SFT. Recycle this SFT
 12535                                  
 12536 0000197C C43E[4410]              	les	di,[LocalSFT]
 12537                                  
 12538                                  gotlocalSFT:
 12539 00001980 893E[9E05]              	mov	[THISSFT],di
 12540 00001984 8C06[A005]              	mov	[THISSFT+2],es
 12541 00001988 F8                      	clc
 12542 00001989 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12543                                  
 12544                                  lru1:
 12545 0000198C C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12546                                  	;mov	cx,[es:di+4]
 12547 00001990 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12548                                  	;lea	di,[di+6]
 12549 00001994 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12550                                  
 12551                                  	; We scan through all the SFTs scanning for a free one. It also 
 12552                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12553                                  	; bx = min. LRU for local SFTs
 12554                                  	; si = pos. of local SFT with min. LRU
 12555                                  	; dx = min. LRU for net/Share SFTs
 12556                                  	; bp = pos. of net/Share SFT with min. LRU
 12557                                  
 12558 00001997 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12559 0000199A 89DE                    	mov	si,bx
 12560 0000199C 89DA                    	mov	dx,bx
 12561 0000199E 89DD                    	mov	bp,bx
 12562                                  
 12563                                  findSFT:
 12564                                  	;See if this SFT is a free one. If so, return it
 12565 000019A0 26830D00                	or	word [es:di],0
 12566                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12567 000019A4 744D                    	jz	short gotSFT	;yes, SFT is free
 12568                                  	;;cmp	word [es:di],-1
 12569                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12570 000019A6 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12571 000019AA 7447                    	jz	short gotSFT	;no, can use it
 12572                                  
 12573                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12574                                  	; used for a later regen.
 12575                                  
 12576                                  	; 16/12/2022
 12577                                  	; 08/11/2022
 12578                                  	;test	byte [es:di+6],80h
 12579 000019AC 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12580                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12581                                  	;;test	word [es:di+5],8000h
 12582                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12583 000019B1 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12584                                  
 12585                                  ;IF installed
 12586 000019B3 E88C59                  	call	CheckShare	;Share present?
 12587                                  ;ENDIF
 12588 000019B6 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12589                                  
 12590                                  	;Local SFT, register its address
 12591                                  
 12592                                  	; !!HACK!!!
 12593                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12594                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12595                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12596                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12597                                  	; out the code that previously existed at label 'gotSFT'
 12598                                  
 12599                                  hackpoint:
 12600 000019B8 893E[4410]              	mov	[LocalSFT],di
 12601 000019BC 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12602                                  
 12603 000019C0 08C0                    	or	al,al		;Is operation = REGEN?
 12604 000019C2 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12605                                  
 12606                                  	;Get LRU for local files
 12607                                  	
 12608                                  	;cmp	[es:di+15h],bx
 12609 000019C4 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12610 000019C8 7306                    	jae	short lru4	;no, skip 
 12611                                  
 12612                                  	;mov	bx,[es:di+15h]
 12613 000019CA 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12614 000019CE 89FE                    	mov	si,di		;store SFT position
 12615                                  lru4:
 12616                                  	;add	di,59
 12617 000019D0 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12618 000019D3 E2CB                    	loop	findSFT
 12619                                  
 12620                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12621                                  	; available, we will reuse it instead of net/Share LRU
 12622                                  
 12623 000019D5 89F7                    	mov	di,si
 12624 000019D7 83FEFF                  	cmp	si,-1		;local SFT available?
 12625 000019DA 7517                    	jnz	short gotSFT	;yes, return it
 12626                                  
 12627                                  	;No local SFT, see if we got a net/Share SFT
 12628                                  
 12629 000019DC 89EF                    	mov	di,bp
 12630 000019DE 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12631 000019E1 7530                    	jnz	short gotnetSFT	;yes, return it
 12632                                  noSFT:
 12633                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12634                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12635                                  	; count is not maintained properly.
 12636                                  
 12637 000019E3 EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12638                                  
 12639                                  	; Handle the LRU for net/Share SFTs
 12640                                  lru5:
 12641                                  	;cmp	[es:di+15h],dx
 12642 000019E5 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12643 000019E9 73E5                    	jae	short lru4	;no, skip 
 12644                                  
 12645                                  	;mov	dx,[es:di+15h]
 12646 000019EB 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12647                                  
 12648 000019EF 89FD                    	mov	bp,di		;store SFT position
 12649 000019F1 EBDD                    	jmp	short lru4	;continue with next SFT
 12650                                  
 12651                                  gotSFT:
 12652 000019F3 08C0                    	or	al,al
 12653 000019F5 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12654                                  
 12655                                  	; HACK!!!
 12656                                  	; The code here differs from the code at 'hackpoint' only in the 
 12657                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12658                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12659                                  	; has been commented out below and replaced by the code just above.
 12660                                  
 12661                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12662                                  ;
 12663                                  ;	or	al,al		  ;Regen?
 12664                                  ;	jnz	short notlocaluse ;yes, register it and return
 12665                                  ;
 12666                                  ;Register this SFT as a local one
 12667                                  ;
 12668                                  ;	mov	[LocalSFT],di
 12669                                  ;	mov	[LocalSFT+2],es
 12670                                  ;	jmp	gotlocalSFT	;return to caller
 12671                                  ;
 12672                                  ;notlocaluse:
 12673                                  
 12674                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12675                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12676                                  	; does not really know whether it is a local file or not. We 
 12677                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12678                                  	; registered as a local SFT that can be recycled.
 12679                                  
 12680 000019F7 8CC0                    	mov	ax,es
 12681 000019F9 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12682 000019FD 7506                    	jne	short notinvalid
 12683 000019FF 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12684 00001A03 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12685                                  notinvalid:
 12686 00001A05 E978FF                  	jmp	gotlocalSFT
 12687                                  
 12688                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12689                                  	; Invalidate this variable i.e LocalSFT = NULL
 12690                                  
 12691                                  zerolocalSFT:
 12692 00001A08 31C0                    	xor	ax,ax ; 0
 12693 00001A0A A3[4410]                	mov	[LocalSFT],ax
 12694 00001A0D A3[4610]                	mov	[LocalSFT+2],ax
 12695                                  
 12696 00001A10 E96DFF                  	jmp	gotlocalSFT
 12697                                  
 12698                                  gotnetSFT:
 12699                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12700                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12701                                  	; LocalSFT variable
 12702                                  
 12703 00001A13 08C0                    	or	al,al
 12704 00001A15 7508                    	jnz	short closenet
 12705                                  
 12706 00001A17 893E[4410]              	mov	[LocalSFT],di
 12707 00001A1B 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12708                                  closenet:
 12709 00001A1F 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12710 00001A23 8C06[A005]              	mov	[THISSFT+2],es	
 12711                                  
 12712                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12713                                  	; count is 0.
 12714                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12715                                  	; recycled -- no need to check for this.
 12716                                  
 12717                                  LRUClose:
 12718 00001A27 26833D00                	cmp	word [es:di],0
 12719                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12720 00001A2B 740C                    	jz	short LRUDone	; nope, all done
 12721                                  
 12722 00001A2D E80D15                  	call	DOS_CLOSE
 12723 00001A30 73F5                    	jnc	short LRUClose	; no error => clean up
 12724                                  
 12725                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12726                                  	; error closing. Seems like we could have a potential infinite loop  
 12727                                  	; here. This has to be verified.
 12728                                  
 12729 00001A32 3C06                    	cmp	al,error_invalid_handle ; 6
 12730 00001A34 74F1                    	je	short LRUClose
 12731                                  errorbadSFT:
 12732 00001A36 F9                      	stc
 12733 00001A37 EB05                    	JMP	short LRUDead
 12734                                  LRUDone:
 12735 00001A39 30C0                    	XOR	AL,AL
 12736 00001A3B E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12737                                  
 12738                                  LRUDead:
 12739 00001A3E E80EEA                  	call	restore_world		; use macro
 12740                                  	
 12741 00001A41 07                      	pop	es ; * (MSDOS 6.21)
 12742                                  
 12743                                  	;getdseg <es>
 12744 00001A42 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12745 00001A47 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12746                                  
 12747                                  	;;retnc
 12748                                  	;jc	short LruFCB_err
 12749                                  	;retn
 12750                                  
 12751                                  	; 16/12/2022
 12752                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12753 00001A4C 7302                    	jnc	short LruFCB_retn
 12754                                  	;jc	short LruFCB_err
 12755                                  	;retn
 12756                                  		
 12757                                  LruFCB_err:
 12758 00001A4E B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12759                                  LruFCB_retn:
 12760 00001A50 C3                      	retn
 12761                                  	
 12762                                  ;LruFCB	ENDP
 12763                                  
 12764                                  ; 17/05/2019 - Retro DOS v4.0
 12765                                  
 12766                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12767                                  
 12768                                  ; --------------------------------------------------------------------------
 12769                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12770                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12771                                  ; to copy the name to different destinations
 12772                                  ;
 12773                                  ; Inputs: ds:si = source string
 12774                                  ;	 es:di = destination string
 12775                                  ;	 cx = length of string
 12776                                  ;
 12777                                  ; Outputs: String copied to destination
 12778                                  ;
 12779                                  ; Registers affected: cx,di,si
 12780                                  ; --------------------------------------------------------------------------
 12781                                  
 12782                                  RegenCopyName:
 12783                                  CopyName:
 12784 00001A51 AC                      	lodsb			;load character
 12785 00001A52 E8FB35                  	call	UCase		; convert char to upper case
 12786                                  StuffChar2:
 12787 00001A55 AA                      	STOSB			;store converted character
 12788 00001A56 E2F9                    	LOOP	CopyName	;
 12789                                  DoneName:
 12790 00001A58 C3                      	retn
 12791                                  
 12792                                  ; --------------------------------------------------------------------------
 12793                                  
 12794                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12795                                  FCBRegen:
 12796                                  	; called from SFTFromFCB. SS already DOSDATA
 12797                                  
 12798                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12799                                  	; we do not fill, size we do no fill, position we do not fill,
 12800                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12801                                  
 12802                                  	;mov	al,[si+19h]
 12803 00001A59 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12804                                  
 12805                                  	; We discriminate based on the first two bits in the reserved field.
 12806                                  	
 12807                                  	;test	al,80h
 12808 00001A5C A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12809 00001A5E 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12810                                  
 12811                                  	; The FCB is for a network or a sharing based system. At this point 
 12812                                  	; we have already closed the SFT for this guy and reconnection is 
 12813                                  	; impossible.
 12814                                  	;
 12815                                  	; Remember that he may have given us a FCB with bogus information in
 12816                                  	; it. Check to see if sharing is present or if the redir is present.
 12817                                  	; If either is around, presume that we have cycled out the FCB and 
 12818                                  	; give the hard error. Otherwise, just return with carry set.
 12819                                  
 12820 00001A60 E8DF58                  	call	CheckShare		; test for sharer
 12821 00001A63 7509                    	JNZ	short RegenFail		; yep, fail this.
 12822                                  	
 12823                                  	;mov	ax,1100h
 12824 00001A65 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12825 00001A68 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12826                                  			; Return: AL = 00h  not installed, OK to install
 12827                                  			; 01h  not installed, not OK to install
 12828                                  			; FFh  installed
 12829 00001A6A 08C0                    	OR	AL,AL			; is it there?
 12830 00001A6C 740C                    	JZ	short RegenDead		; no, just fail the operation
 12831                                  RegenFail:
 12832                                  	; 17/05/2019 - Retro DOS v4.0
 12833                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12834 00001A6E 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12835                                  
 12836                                  	;cmp	ah,10h
 12837 00001A72 80FC10                  	cmp	AH,FCB_CLOSE
 12838 00001A75 7403                    	jz	short RegenDead
 12839 00001A77 E89301                  	call	FCBHardErr		; massive hard error.
 12840                                  RegenDead:
 12841 00001A7A F9                      	STC				; carry set
 12842                                  FCBRegen_retn:
 12843 00001A7B C3                      	retn
 12844                                  
 12845                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12846                                  	; so fail the operation.
 12847                                  
 12848                                  RegenNoSharing:
 12849 00001A7C E8C358                  	call	CheckShare		; Sharing around?
 12850 00001A7F 75ED                    	JNZ	short RegenFail
 12851                                  	
 12852                                  	; Find an SFT for this guy.
 12853                                  	
 12854                                  	; 17/05/2019 - Retro DOS v4.0
 12855                                  
 12856                                  	; MSDOS 3.3
 12857                                  	;call	LRUFCB
 12858                                  	;jc	short FCBRegen_retn
 12859                                  	
 12860                                  	; MSDOS 6.0
 12861 00001A81 50                      	push	ax
 12862 00001A82 B000                    	mov	al,0			;indicate it is a regen operation
 12863 00001A84 E8DEFE                  	call	LRUFCB
 12864 00001A87 58                      	pop	ax
 12865 00001A88 72F1                    	jc	short FCBRegen_retn
 12866                                  
 12867                                  	;mov	word [es:di+2],8002h
 12868 00001A8A 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12869 00001A90 243F                    	AND	AL,3Fh			; get drive number for flags
 12870 00001A92 98                      	CBW
 12871                                  	;or	ax,4000h
 12872 00001A93 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12873                                  
 12874                                  	; The bits field consists of the upper two bits (dirty and device) 
 12875                                  	; from the SFT and the low 4 bits from the open mode.
 12876                                  
 12877                                  	;mov	cl,[si+1Ah]
 12878 00001A96 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12879 00001A99 88CD                    	MOV	CH,CL
 12880 00001A9B 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12881 00001A9E 08E8                    	OR	AL,CH
 12882                                  	;and	cl,0Fh
 12883 00001AA0 80E10F                  	AND	CL,access_mask		; get the mode bits
 12884                                  	;mov	[es:di+2],cl
 12885 00001AA3 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12886                                  	;mov	[es:di+5],ax
 12887 00001AA7 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12888                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12889 00001AAB 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12890                                  	;mov	[es:di+31h],ax
 12891 00001AAF 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12892 00001AB3 1E                      	push	ds
 12893 00001AB4 56                      	push	si
 12894 00001AB5 06                      	push	es
 12895 00001AB6 57                      	push	di
 12896 00001AB7 16                      	push	ss
 12897 00001AB8 07                      	pop	es
 12898 00001AB9 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12899                                  
 12900 00001ABC B90800                  	MOV	CX,8
 12901 00001ABF 46                      	INC	SI			; Skip past drive byte to name in FCB
 12902                                  
 12903                                  	; MSDOS 3.3
 12904                                  ;RegenCopyName:
 12905                                  	;lodsb
 12906                                  	;call	UCase
 12907                                  	;stosb
 12908                                  	;loop	RegenCopyName
 12909                                  
 12910                                  	; MSDOS 6.0
 12911 00001AC0 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12912                                  
 12913 00001AC3 16                      	push	ss	; SS is DOSDATA
 12914 00001AC4 1F                      	pop	ds
 12915                                  
 12916                                  	;mov	byte [ATTRIB],16h
 12917 00001AC5 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12918                                  					; Must set this to something interesting
 12919                                  					; to call DEVNAME.
 12920 00001ACA E81127                  	call	DEVNAME 		; check for device
 12921 00001ACD 5E                      	pop	si
 12922 00001ACE 07                      	pop	es
 12923 00001ACF 5E                      	pop	si
 12924 00001AD0 1F                      	pop	ds
 12925 00001AD1 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12926                                  
 12927                                  	; Device found. We can ignore disk-specific info
 12928                                  
 12929                                  	;mov	[es:di+5],bh
 12930 00001AD3 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12931                                  	;mov	byte [es:di+4],0
 12932 00001AD7 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12933                                  					; SS override
 12934                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12935 00001ADC 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12936                                  	;mov	[es:di+7],si
 12937 00001AE1 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12938                                  	;mov	[es:di+9],ds
 12939 00001AE5 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12940 00001AE9 C3                      	retn				; carry is clear
 12941                                  
 12942                                  RegenDeadJ:
 12943 00001AEA EB8E                    	JMP	short RegenDead
 12944                                  
 12945                                  	; File found. Just copy in the remaining pieces.
 12946                                  
 12947                                  RegenFileNoSharing:
 12948                                  	;mov	ax,[es:di+5]
 12949 00001AEC 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12950 00001AF0 83E03F                  	AND	AX,03Fh
 12951 00001AF3 1E                      	push	ds
 12952 00001AF4 56                      	push	si
 12953 00001AF5 E8D74E                  	call	FIND_DPB
 12954                                  	;mov	[es:di+7],si
 12955 00001AF8 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12956                                  	;mov	[es:di+9],ds
 12957 00001AFC 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12958 00001B00 5E                      	pop	si
 12959 00001B01 1F                      	pop	ds
 12960 00001B02 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12961                                  					; indicator was bogus
 12962                                  	;mov	ax,[si+1Dh]
 12963 00001B04 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12964                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12965                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12966 00001B07 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12967                                  
 12968                                  	; MSDOS 6.0
 12969                                  
 12970                                  	; SR;
 12971                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12972                                  	; number
 12973                                  
 12974                                  	;mov	al,[si+18h]
 12975 00001B0B 8A4418                  	mov	al,[si+fcb_sfn]
 12976 00001B0E 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12977 00001B10 88C4                    	mov	ah,al
 12978 00001B12 D0C4                    	rol	ah,1
 12979 00001B14 D0E8                    	shr	al,1
 12980 00001B16 08E0                    	or	al,ah
 12981 00001B18 243F                    	and	al,03Fh		;mask off unused bits
 12982                                  	;mov	[es:di+4],al
 12983 00001B1A 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12984                                  
 12985                                  	; SR;
 12986                                  	; Update the higher word of the directory sector from the FCB
 12987                                  
 12988                                  	;;mov	al,[si+18h]
 12989 00001B1E 8A4418                  	mov	al,[si+fcb_sfn]
 12990 00001B21 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12991 00001B23 28E4                    	sub	ah,ah
 12992                                  	;mov	[es:di+1Dh],ax
 12993 00001B25 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12994                                  
 12995                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12996                                  	;mov	ax,[si+1Bh]
 12997 00001B29 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12998                                  	;mov	[es:di+0Bh],ax
 12999 00001B2C 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13000                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13001                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13002 00001B30 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13003                                  	;mov	al,[si+1Fh]
 13004 00001B34 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13005                                  	;mov  	[es:di+1Fh],al
 13006 00001B37 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13007                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13008 00001B3B 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13009                                  					; Existing FCB entries would be
 13010                                  					; flushed unnecessarily because of
 13011                                  					; check in CheckFCB of the ref_count.
 13012                                  					; July 22/85 - BAS
 13013                                  	;lea	si,[si+1]
 13014 00001B3E 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13015                                  	;lea	di,[di+20h]
 13016 00001B41 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13017                                  	;mov	cx,11
 13018 00001B44 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13019                                  	
 13020                                  	; MSDOS 6.0
 13021 00001B47 E807FF                  	call	RegenCopyName	;copy name to SFT 
 13022                                  	
 13023                                  	; MSDOS 3.3
 13024                                  ;RegenCopyName2:
 13025                                  	;lodsb
 13026                                  	;call    UCase
 13027                                  	;stosb
 13028                                  	;loop    RegenCopyName2
 13029                                  
 13030 00001B4A F8                      	clc
 13031 00001B4B C3                      	retn
 13032                                  
 13033                                  ; 17/05/2019 - Retro DOS v4.0
 13034                                  
 13035                                  ;**	BlastSFT - FIll SFT with Garbage
 13036                                  ; --------------------------------------------------------------------------
 13037                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13038                                  ;	various garbage values to put into the SFT.  I don't know why,
 13039                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13040                                  ;	necessary to show that the SFT is free after filling it.
 13041                                  ;
 13042                                  ;	ENTRY	(es:di) = address of SFT
 13043                                  ;		(al) = fill character
 13044                                  ;	EXIT	(ax) = -1
 13045                                  ;		'C' clear
 13046                                  ;	USES	AX, CX, Flags
 13047                                  
 13048                                  BlastSFT:
 13049 00001B4C 57                      	push	di
 13050                                  	;mov	cx,53 ; MSDOS 3.3
 13051                                  	;mov	cx,59 ; MSDOS 6.0
 13052 00001B4D B93B00                  	mov	cx,SF_ENTRY.size
 13053 00001B50 F3AA                    	rep	stosb
 13054 00001B52 5F                      	pop	di
 13055 00001B53 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13056 00001B55 268905                  	mov	[es:di],ax
 13057                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 13058                                  	;mov	[es:di+15h],ax
 13059 00001B58 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13060 00001B5C 48                      	dec	ax	; -1					    ;
 13061                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13062 00001B5D 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13063                                  BlastSFT_retn:
 13064 00001B61 C3                      	retn				; return with 'C' clear     ;
 13065                                  
 13066                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13067                                  ; --------------------------------------------------------------------------
 13068                                  ;
 13069                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13070                                  ;   regenerated.
 13071                                  ;
 13072                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13073                                  ;		AL is SFT index
 13074                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13075                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13076                                  ;   Registers modified: AX and BX
 13077                                  ;
 13078                                  ; --------------------------------------------------------------------------
 13079                                  
 13080                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13081                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13082                                  CheckFCB:
 13083                                  		
 13084                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13085                                  
 13086                                  	; MSDOS 3.3
 13087                                  
 13088                                  	; LES	DI,[CS:SFTFCB]
 13089                                  
 13090                                  	; MSDOS 6.0
 13091                                  	
 13092                                  	; SR;
 13093                                  	; We check if the given FCB is for a local file. If so, we return a 
 13094                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13095                                  
 13096                                  	;test	byte [si+19h],0C0h
 13097 00001B62 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13098 00001B66 744F                    	jz	short BadSFT		;Local file, return bad SFT
 13099 00001B68 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13100                                  
 13101                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13102                                  	;cmp	[es:di+4],al
 13103 00001B6D 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13104 00001B71 7244                    	JC	short BadSFT
 13105                                  	;;mov	bl,53 ; MSDOS 3.3
 13106                                  	;mov	bl,59 ; MSDOS 6.0
 13107 00001B73 B33B                    	MOV	BL,SF_ENTRY.size
 13108 00001B75 F6E3                    	MUL	BL
 13109                                  	;lea	di,[di+6]
 13110 00001B77 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13111 00001B7A 01C7                    	ADD	DI,AX
 13112                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13113 00001B7C 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13114                                  	;cmp	[es:di+31h],ax
 13115 00001B80 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13116 00001B84 7531                    	JNZ	short BadSFT		; must match process
 13117 00001B86 26833D00                	cmp	word [es:di],0
 13118                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13119 00001B8A 742B                    	JZ	short BadSFT		; must also be in use
 13120                                  	;mov	al,[si+19h]
 13121 00001B8C 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13122                                  	;test	al,80h
 13123 00001B8F A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13124 00001B91 7430                    	JZ	short CheckNoShare	; No. try local or device
 13125                                  
 13126                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13127                                  	; FCBSHARE is a superset of FCBNETWORK.
 13128                                  
 13129 00001B93 50                      	PUSH	AX
 13130                                  	;and	al,0C0h
 13131 00001B94 24C0                    	AND	AL,FCBMASK
 13132                                  	;cmp	al,0C0h
 13133 00001B96 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13134 00001B98 58                      	POP	AX
 13135 00001B99 751E                    	JNZ	short CheckNet		; yes
 13136                                  ;
 13137                                  ;----- In share support -----
 13138                                  ;
 13139                                  	;call	far [cs:JShare+(11*4)]
 13140 00001B9B 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13141 00001BA0 7215                    	JC	short BadSFT
 13142 00001BA2 EB06                    	JMP	SHORT CheckD
 13143                                  ;
 13144                                  ;----- End in share support -----
 13145                                  ;
 13146                                  	; 09/11/2022
 13147                                  	; (There is not any procedure/sub
 13148                                  	;  which calls or jumps to CheckFirClus here)
 13149                                  	;;;
 13150                                  CheckFirClus:
 13151                                  	;cmp     bx,[es:di+0Bh]
 13152                                  	; 07/12/2022
 13153 00001BA4 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13154 00001BA8 750D                    	JNZ	short BadSFT
 13155                                  	;;;
 13156                                  CheckD: 
 13157 00001BAA 243F                    	AND	AL,3Fh
 13158                                  	;mov	ah,[es:di+5]
 13159 00001BAC 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13160 00001BB0 80E43F                  	AND	AH,3Fh
 13161 00001BB3 38C4                    	CMP	AH,AL
 13162                                  	; 16/12/2022
 13163 00001BB5 74AA                    	jz	short BlastSFT_retn	; carry is clear
 13164                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13165                                  	;jnz	short BadSFT
 13166                                  ;CheckD_retn:
 13167                                  	;retn
 13168                                  BadSFT: 
 13169 00001BB7 F9                      	STC
 13170 00001BB8 C3                      	retn
 13171                                  				
 13172                                  CheckNet:
 13173                                  	; 17/05/2019 - Retro DOS v4.0
 13174                                  	
 13175                                  ;----- In net support -----
 13176                                  
 13177                                  	; MSDOS 3.3
 13178                                  	;;mov	ax,[si+1Ah]
 13179                                  	;mov	ax,[si+fcb_net_handle]
 13180                                  	;;cmp	ax,[es:di+1Dh]
 13181                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13182                                  	;jnz	short BadSFT
 13183                                  	;;cmp	ax,[es:di+19h]
 13184                                  	;cmp	ax,[ES:DI+sf_netid]
 13185                                  	;jnz     short BadSFT
 13186                                  	;;mov	ax,[si+1Eh]
 13187                                  	;mov	ax,[si+fcb_l_attr]
 13188                                  	;;cmp	ax,[es:di+1Bh]
 13189                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13190                                  	;jnz     short BadSFT
 13191                                  
 13192                                  	; MSDOS 6.0
 13193                                  	;mov	ax,[si+1Ch]
 13194 00001BB9 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13195                                  	; 09/11/2022
 13196                                  	;cmp	ax,[es:di+0Bh] 
 13197 00001BBC 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13198 00001BC0 75F5                    	JNZ	short BadSFT
 13199                                  
 13200                                  ;----- END In net support -----
 13201                                  
 13202                                  CheckNet_retn:
 13203 00001BC2 C3                      	retn
 13204                                  
 13205                                  CheckNoShare:
 13206                                  
 13207                                  ; 16/12/2022
 13208                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13209                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13210                                  ;	;test	al,40h
 13211                                  ;	test	AL,FCBDEVICE		; Device?
 13212                                  ;	;jnz	short $+2 ; 09/11/2022
 13213                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13214                                  
 13215                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13216                                  	;;mov	bx,[si+1Dh]
 13217                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13218                                  	;;cmp	bx,[es:di+1Dh]
 13219                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13220                                  	;jnz	short BadSFT
 13221                                  	;;mov	bl,[si+1Fh]
 13222                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13223                                  	;;cmp	bl,[es:di+1Fh]
 13224                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13225                                  	;jnz	short BadSFT
 13226                                  	;;mov	bl,[si+1Ah]
 13227                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13228                                  	;;mov	bh,[es:di+5]
 13229                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13230                                  	;xor	bh,bl
 13231                                  	;and	bh,0C0h
 13232                                  	;jnz	short BadSFT
 13233                                  	;;xor	bl,[es:di+2]
 13234                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13235                                  	;and	bl,0Fh
 13236                                  	;jnz	short BadSFT
 13237                                  	;push	di
 13238                                  	;push	si
 13239                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13240                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13241                                  	;;lea	si,[si+1]
 13242                                  	;LEA	SI,[SI+SYS_FCB.name]
 13243                                  	;;mov	cx,11
 13244                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13245                                  	;repe	cmpsb
 13246                                  	;pop	si
 13247                                  	;pop	di
 13248                                  	;jnz	short BadSFT
 13249                                  	;;mov	bx,[si+1Bh]
 13250                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13251                                  	;jmp	short CheckFirClus
 13252                                  
 13253                                  	; MSDOS 6.0
 13254                                  
 13255                                  	; SR;
 13256                                  	; The code below to match a local FCB with its SFT can no longer be
 13257                                  	; used. We just return a no-match status. This check is done right
 13258                                  	; at the top.
 13259                                  
 13260                                  CheckNoShareDev:
 13261                                  	;mov	bx,[si+1Ah]
 13262 00001BC3 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13263                                  	;cmp	bx,[es:di+7]
 13264 00001BC6 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13265 00001BCA 75EB                    	JNZ	short BadSFT
 13266                                  	;mov	bx,[si+1Ch]
 13267 00001BCC 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13268                                  	;cmp	bx,[es:di+9]
 13269 00001BCF 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13270 00001BD3 75E2                    	JNZ	short BadSFT
 13271 00001BD5 EBD3                    	JMP	short CheckD
 13272                                  
 13273                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13274                                  ;----------------------------------------------------------------------------
 13275                                  ;
 13276                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13277                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13278                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13279                                  ;	with PID
 13280                                  ;
 13281                                  ;   Inputs:	DS:SI point to FCB
 13282                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13283                                  ;		Carry clear -> OK ES:DI -> SFT
 13284                                  ;		Carry set -> error in ax
 13285                                  ;   Registers modified: ES,DI, AX
 13286                                  ;
 13287                                  ;----------------------------------------------------------------------------
 13288                                  
 13289                                  SFTFromFCB:
 13290                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13291                                  
 13292                                  	; 17/05/2019 - Retro DOS v4.0
 13293                                  
 13294 00001BD7 50                      	push	ax
 13295 00001BD8 53                      	push	bx
 13296                                  	;mov	al,[si+18h]
 13297 00001BD9 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13298 00001BDC E883FF                  	call	CheckFCB
 13299 00001BDF 5B                      	pop	bx
 13300 00001BE0 58                      	pop	ax
 13301                                  	;MOV	[CS:THISSFT],DI		; SS override
 13302                                  	;MOV	[CS:THISSFT+2],ES
 13303 00001BE1 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13304 00001BE6 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13305 00001BEB 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13306                                  	
 13307                                  	; 09/11/2022 (MSDOS 5.0)
 13308                                  	; 31/05/2019
 13309 00001BED 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13310 00001BEE E875E8                  	call	save_world
 13311 00001BF1 E865FE                  	call	FCBRegen
 13312 00001BF4 E858E8                  	call	restore_world		; use macro restore world
 13313 00001BF7 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13314                                  
 13315                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13316 00001BF8 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13317 00001BFC 72C4                    	jc	short CheckNet_retn
 13318                                  
 13319                                  Set_SFT: 
 13320                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13321 00001BFE 36C43E[9E05]            	les	di,[ss:THISSFT]
 13322                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13323 00001C03 36FF36[3C03]            	push	word [ss:PROC_ID]
 13324                                  	;pop	word [es:di+31h]
 13325 00001C08 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13326 00001C0C C3                      	retn				; carry is clear
 13327                                  
 13328                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13329                                  ;----------------------------------------------------------------------------
 13330                                  ;
 13331                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13332                                  ;	unavailable FCB.
 13333                                  ;
 13334                                  ;   Inputs:	none.
 13335                                  ;   Outputs:	none.
 13336                                  ;   Registers modified: all
 13337                                  ;
 13338                                  ;----------------------------------------------------------------------------
 13339                                  
 13340                                  FCBHardErr:
 13341                                  	; 17/05/2019 - Retro DOS v4.0
 13342 00001C0D 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13343                                  	;
 13344                                  	;mov	ax,23h
 13345 00001C12 B82300                  	MOV	AX,error_FCB_unavailable
 13346                                  	;;mov	byte [cs:ALLOWED],8
 13347                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13348 00001C15 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13349                                  	
 13350                                  	;LES	BP,[CS:THISDPB]
 13351 00001C1B 26C42E[8A05]            	les	bp,[es:THISDPB]
 13352                                  	
 13353 00001C20 BF0100                  	MOV	DI,1			; Fake some registers
 13354 00001C23 89F9                    	MOV	CX,DI
 13355                                  	;mov	dx,[es:bp+0Bh]
 13356 00001C25 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13357 00001C29 E8E236                  	call	HARDERR
 13358 00001C2C F9                      	STC
 13359 00001C2D C3                      	retn
 13360                                  
 13361                                  ;============================================================================
 13362                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13363                                  ;============================================================================
 13364                                  ; 21/07/2018 - Retro DOS v3.0
 13365                                  ; 17/05/2019 - Retro DOS v4.0
 13366                                  
 13367                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13368                                  ;
 13369                                  ;	GetRR
 13370                                  ;	GetExtent
 13371                                  ;	SetExtent
 13372                                  ;	GetExtended
 13373                                  ;	GetRecSize
 13374                                  ;	FCBIO
 13375                                  ;	$FCB_OPEN
 13376                                  ;	$FCB_CREATE
 13377                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13378                                  ;	$FCB_RANDOM_READ_BLOCK
 13379                                  ;	$FCB_SEQ_READ
 13380                                  ;	$FCB_SEQ_WRITE
 13381                                  ;	$FCB_RANDOM_READ
 13382                                  ;	$FCB_RANDOM_WRITE
 13383                                  ;
 13384                                  ;	Revision history:
 13385                                  ;
 13386                                  ;		Created: ARR 4 April 1983
 13387                                  ;			 MZ  6 June  1983 completion of functions
 13388                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13389                                  ;				  times.  Change so successive closes work by
 13390                                  ;				  always returning OK.	Also, detect I/O to
 13391                                  ;				  already closed FCB and return EOF.
 13392                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13393                                  ;				  out of sft into FCB for reconnection
 13394                                  ;
 13395                                  ;	    A000   version 4.00	Jan. 1988
 13396                                  
 13397                                  ; Defintions for FCBOp flags
 13398                                  
 13399                                  RANDOM	equ 2				; random operation
 13400                                  FCBREAD equ 4				; doing a read
 13401                                  BLOCK	equ 8				; doing a block I/O
 13402                                  
 13403                                  ;Break <GetRR - return the random record field in DX:AX>
 13404                                  ;---------------------------------------------------------------------------
 13405                                  ;
 13406                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13407                                  ;	from the FCB pointed to by DS:SI
 13408                                  ;
 13409                                  ;   Inputs:	DS:SI point to an FCB
 13410                                  ;		BX has record size
 13411                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13412                                  ;   Registers modified: none
 13413                                  ;---------------------------------------------------------------------------
 13414                                  
 13415                                  GetRR:
 13416                                  	;mov	ax,[si+21h]
 13417 00001C2E 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13418                                  	;mov	dx,[si+23h]
 13419 00001C31 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13420 00001C34 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13421 00001C37 7202                    	JB	short GetRRBye
 13422 00001C39 30F6                    	XOR	DH,DH
 13423                                  GetRRBye:
 13424 00001C3B C3                      	retn
 13425                                  
 13426                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13427                                  ;---------------------------------------------------------------------------
 13428                                  ;
 13429                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13430                                  ;	NR fields in the FCB.
 13431                                  ;
 13432                                  ;   Inputs:	DS:SI - point to FCB
 13433                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13434                                  ;   Registers modified: none
 13435                                  ;---------------------------------------------------------------------------
 13436                                  
 13437                                  GetExtent:
 13438                                  	;mov	al,[si+20h]
 13439 00001C3C 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13440                                  	;mov	dx,[si+0Ch]
 13441 00001C3F 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13442 00001C42 D0E0                    	SHL	AL,1
 13443 00001C44 D1EA                    	SHR	DX,1
 13444 00001C46 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13445 00001C48 88D4                    	MOV	AH,DL
 13446 00001C4A 88F2                    	MOV	DL,DH
 13447 00001C4C 30F6                    	XOR	DH,DH
 13448 00001C4E C3                      	retn
 13449                                  
 13450                                  ;Break <SetExtent - update the extent/NR field>
 13451                                  ;---------------------------------------------------------------------------
 13452                                  ;
 13453                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13454                                  ;	fields
 13455                                  ;
 13456                                  ;   Inputs:	DS:SI point to FCB
 13457                                  ;		DX:AX is a record location in file
 13458                                  ;   Outputs:	Extent/NR fields are filled in
 13459                                  ;   Registers modified: CX
 13460                                  ;---------------------------------------------------------------------------
 13461                                  
 13462                                  SetExtent:
 13463 00001C4F 50                      	push	ax
 13464 00001C50 52                      	push	dx
 13465 00001C51 89C1                    	MOV	CX,AX
 13466 00001C53 247F                    	AND	AL,7FH			; next rec field
 13467                                  	;mov	[si+20h],al
 13468 00001C55 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13469 00001C58 80E180                  	AND	CL,80H			; save upper bit
 13470 00001C5B D1E1                    	SHL	CX,1
 13471 00001C5D D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13472 00001C5F 88E8                    	MOV	AL,CH
 13473 00001C61 88D4                    	MOV	AH,DL
 13474                                  	;mov	[si+0Ch], ax
 13475 00001C63 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13476 00001C66 5A                      	pop	dx
 13477 00001C67 58                      	pop	ax
 13478 00001C68 C3                      	retn
 13479                                  
 13480                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13481                                  ;---------------------------------------------------------------------------
 13482                                  ;
 13483                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13484                                  ;
 13485                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13486                                  ;   Outputs:	DS:SI point to the FCB part
 13487                                  ;		zeroflag set if not extended fcb
 13488                                  ;   Registers modified: SI
 13489                                  ;---------------------------------------------------------------------------
 13490                                  
 13491                                  GetExtended:
 13492 00001C69 89D6                    	MOV	SI,DX			; point to Something
 13493 00001C6B 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13494 00001C6E 7503                    	JNZ	short GetBye		; not there
 13495 00001C70 83C607                  	ADD	SI,7			; point to FCB
 13496                                  GetBye:
 13497 00001C73 39D6                    	CMP	SI,DX			; set condition codes
 13498                                  getextd_retn:
 13499 00001C75 C3                      	retn
 13500                                  
 13501                                  ;Break <GetRecSize - return in BX the FCB record size>
 13502                                  ;---------------------------------------------------------------------------
 13503                                  ;
 13504                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13505                                  ;
 13506                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13507                                  ;   Outputs:	BX contains the record size
 13508                                  ;   Registers modified: None
 13509                                  ;---------------------------------------------------------------------------
 13510                                  
 13511                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13512                                  GetRecSize:
 13513                                  	;mov	bx,[si+0Eh]
 13514 00001C76 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13515 00001C79 09DB                    	OR	BX,BX			; is it nul?
 13516 00001C7B 74F8                    	jz	short getextd_retn
 13517 00001C7D BB8000                  	MOV	BX,128			; use default size
 13518                                  	;mov	[si+0Eh],bx
 13519 00001C80 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13520 00001C83 C3                      	retn
 13521                                  
 13522                                  ;BREAK <FCBIO - do internal FCB I/O>
 13523                                  ;---------------------------------------------------------------------------
 13524                                  ;
 13525                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13526                                  ;
 13527                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13528                                  ;		DS:DX point to FCB
 13529                                  ;		CX may have count of number of records to xfer
 13530                                  ;   Outputs:	AL has error code
 13531                                  ;   Registers modified: all
 13532                                  ;---------------------------------------------------------------------------
 13533                                  
 13534                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13535                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13536                                  FCBIO:
 13537                                  
 13538                                  FEOF	EQU	1
 13539                                  FTRIM	EQU	2
 13540                                  
 13541                                  %define	FCBErr	byte [bp-1]  ; byte	
 13542                                  %define	cRec	word [bp-3]  ; word	
 13543                                  ;%define RecPos	word [bp-7]  ; dword
 13544                                  %define RecPosL	word [bp-7]  ; word
 13545                                  %define RecPosH	word [bp-5]  ; word
 13546                                  %define	RecSize	word [bp-9]  ; word
 13547                                  ;%define bPos	word [bp-13] ; dword
 13548                                  %define bPosL	word [bp-13] ; word
 13549                                  %define bPosH	word [bp-11] ; word
 13550                                  %define cByte	word [bp-15] ; word	
 13551                                  %define cResult word [bp-17] ; word	
 13552                                  %define	cRecRes	word [bp-19] ; word
 13553                                  %define	FCBOp	byte [bp-20] ; byte
 13554                                  
 13555                                  	;Enter
 13556                                  
 13557 00001C84 55                      	push	bp
 13558 00001C85 89E5                    	mov	bp,sp
 13559 00001C87 83EC14                  	sub	sp,20
 13560                                  	;mov	[bp-20],al
 13561 00001C8A 8846EC                  	MOV	FCBOp,AL
 13562                                  	;mov	byte [bp-1],0
 13563 00001C8D C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13564 00001C91 E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13565                                  	;test	byte [bp-20],8
 13566 00001C94 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13567 00001C98 7503                    	JNZ	short GetPos
 13568 00001C9A B90100                  	MOV	CX,1			;	cRec = 1;
 13569                                  GetPos:
 13570                                  	;mov	[bp-3],cx
 13571 00001C9D 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13572 00001CA0 E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13573 00001CA3 E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13574                                  	;mov	[bp-9],bx
 13575 00001CA6 895EF7                  	MOV	RecSize,BX
 13576                                  	;test	byte [bp-20],2
 13577 00001CA9 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13578 00001CAD 7403                    	JZ	short GetRec
 13579 00001CAF E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13580                                  GetRec:
 13581                                  	;mov	[bp-7],ax
 13582 00001CB2 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13583                                  	;mov	[bp-5],dx
 13584 00001CB5 8956FB                  	MOV	RecPosH,DX
 13585 00001CB8 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13586                                  	;mov	ax,[bp-5]
 13587 00001CBB 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13588 00001CBE F7E3                    	MUL	BX
 13589 00001CC0 89C7                    	MOV	DI,AX
 13590                                  	;mov	ax,[bp-7]
 13591 00001CC2 8B46F9                  	MOV	AX,RecPosL
 13592 00001CC5 F7E3                    	MUL	BX
 13593 00001CC7 01FA                    	ADD	DX,DI
 13594                                  	;mov	[bp-13],ax
 13595 00001CC9 8946F3                  	MOV	bPosL,AX
 13596                                  	;mov	[bp-11],dx
 13597 00001CCC 8956F5                  	MOV	bPosH,DX
 13598                                  	;mov	ax,[bp-3]
 13599 00001CCF 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13600 00001CD2 F7E3                    	MUL	BX
 13601                                  	;mov	[bp-15],ax
 13602 00001CD4 8946F1                  	MOV	cByte,AX
 13603                                  
 13604                                  ;hkn; 	SS override
 13605 00001CD7 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13606 00001CDC 83D200                  	ADC	DX,0
 13607 00001CDF 7419                    	JZ	short DoOper
 13608                                  	;mov	byte [bp-1],2
 13609 00001CE1 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13610                                  
 13611                                  ;hkn; 	SS override
 13612 00001CE5 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13613 00001CE9 F7D8                    	NEG	AX
 13614 00001CEB 7501                    	JNZ	short DoDiv
 13615 00001CED 48                      	DEC	AX
 13616                                  DoDiv:
 13617 00001CEE 31D2                    	XOR	DX,DX
 13618 00001CF0 F7F3                    	DIV	BX
 13619                                  	;mov	[bp-3],ax
 13620 00001CF2 8946FD                  	MOV	cRec,AX
 13621 00001CF5 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13622                                  	;mov	[bp-15],ax
 13623 00001CF7 8946F1                  	MOV	cByte,AX		;	}
 13624                                  DoOper:
 13625 00001CFA 31DB                    	XOR	BX,BX
 13626                                  	;mov	[bp-17],bx
 13627 00001CFC 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13628                                  	;cmp	[bp-15],bx
 13629 00001CFF 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13630 00001D02 7506                    	JNZ	short DoGetExt
 13631                                  	;test	byte [bp-1],2
 13632 00001D04 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13633                                  	;JZ	short DoGetExt
 13634                                  	;JMP	short SkipOp
 13635                                  	; 16/12/2022
 13636 00001D08 7576                    	jnz	short SkipOp
 13637                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13638                                  	;JZ	short DoGetExt
 13639                                  	;JMP	short SkipOp
 13640                                  DoGetExt:
 13641 00001D0A E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13642 00001D0D 730F                    	JNC	short ContinueOp
 13643                                  FCBDeath:
 13644 00001D0F E848E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13645                                  	;mov	word [bp-19],0
 13646 00001D12 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13647                                  	;mov	byte [bp-1],1
 13648 00001D17 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13649 00001D1B E9EF00                  	JMP	FCBSave 		; bam!
 13650                                  ContinueOp:
 13651                                  	;mov	ax,[si+10h]
 13652 00001D1E 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13653                                  	;mov	[es:di+11h],ax
 13654 00001D21 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13655                                  	;mov	ax,[si+12h]
 13656 00001D25 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13657                                  	;mov	[es:di+13h],ax
 13658 00001D28 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13659                                  	;mov	ax,[bp-13]
 13660 00001D2C 8B46F3                  	MOV	AX,bPosL
 13661                                  	;mov	dx,[bp-11]
 13662 00001D2F 8B56F5                  	MOV	DX,bPosH
 13663                                  	;mov	[es:di+15h],ax
 13664 00001D32 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13665                                  	;xchg	dx,[es:di+17h]
 13666 00001D36 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13667 00001D3A 52                      	PUSH	DX			; save away Open age.
 13668                                  	;mov	cx,[bp-15]
 13669 00001D3B 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13670                                  
 13671                                  ;hkn; DOS_Read is in DOSCODE
 13672 00001D3E BF[E432]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13673                                  	;test	byte [bp-20],4
 13674 00001D41 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13675 00001D45 7503                    	JNZ	short DoContext
 13676                                  
 13677                                  ;hkn; DOS_Write is in DOSCODE
 13678 00001D47 BF[0D35]                	MOV	DI,DOS_WRITE
 13679                                  DoContext:
 13680 00001D4A 55                      	push	bp
 13681 00001D4B 1E                      	push	ds
 13682 00001D4C 56                      	push	si
 13683                                  
 13684                                  ;hkn; SS is DOSDATA
 13685 00001D4D 16                      	push	ss
 13686 00001D4E 1F                      	pop	ds
 13687                                  
 13688                                  ;; Fix for disk full
 13689 00001D4F FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13690                                  	
 13691 00001D51 5E                      	pop	si
 13692 00001D52 1F                      	pop	ds
 13693 00001D53 5D                      	pop	bp
 13694 00001D54 72B9                    	JC	short FCBDeath
 13695                                  	
 13696 00001D56 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13697 00001D5C 740A                    	JZ	short NODSKFULL
 13698 00001D5E 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13699                                  	;mov	byte [bp-1],1 
 13700 00001D64 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13701                                  NODSKFULL:
 13702                                  ;; Fix for disk full
 13703                                  	;mov	[bp-17],cx
 13704 00001D68 894EEF                  	MOV	cResult,CX
 13705 00001D6B E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13706                                  	;pop	word [es:di+17h]	
 13707 00001D6E 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13708                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13709                                  	;mov	ax,[es:di+11h]
 13710 00001D72 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13711                                  	;mov	[si+10h],ax
 13712 00001D76 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13713                                  	;mov	ax,[es:di+13h]
 13714 00001D79 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13715                                  	;mov	[si+12h],ax
 13716 00001D7D 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13717                                  					;	}
 13718                                  SkipOp:
 13719                                  	;mov	ax,[bp-17]
 13720 00001D80 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13721 00001D83 31D2                    	XOR	DX,DX
 13722                                  	;div	word [bp-9]
 13723 00001D85 F776F7                  	DIV	RecSize
 13724                                  	;mov	[bp-19],ax
 13725 00001D88 8946ED                  	MOV	cRecRes,AX
 13726                                  	;add	[bp-7],ax
 13727 00001D8B 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13728                                  	;adc	word [bp-5],0
 13729 00001D8E 8356FB00                	ADC	RecPosH,0
 13730                                  
 13731                                  ; If we have not gotten the expected number of records, we signal an EOF
 13732                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13733                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13734                                  ; do we.
 13735                                  
 13736                                  	;cmp	ax,[bp-3]
 13737 00001D92 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13738 00001D95 7411                    	JZ	short TryBlank
 13739                                  	;test	byte [bp-20],4
 13740 00001D97 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13741 00001D9B 7507                    	JNZ	short SetEOF
 13742                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13743                                  	; MSDOS 3.3
 13744                                  	;;test	word [es:di+5],80h
 13745                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13746                                  	;JNZ	short TryBlank
 13747                                  	; MSDOS 5.0 & MSDOS 6.0
 13748                                  	;test	byte [es:di+5],80h
 13749 00001D9D 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13750 00001DA2 7504                    	jnz	short TryBlank
 13751                                  
 13752                                  SetEOF:
 13753                                  	;mov	byte [bp-1],1
 13754 00001DA4 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13755                                  TryBlank:				;
 13756 00001DA8 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13757 00001DAA 7426                    	JZ	short SetExt
 13758                                  	;add	word [bp-7],1
 13759 00001DAC 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13760                                  	;adc	word [bp-5],0
 13761 00001DB0 8356FB00                	ADC	RecPosH,0
 13762                                  	;test	byte [bp-20],4
 13763 00001DB4 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13764 00001DB8 7418                    	JZ	short SetExt
 13765                                  	;inc	word [bp-19]
 13766 00001DBA FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13767                                  	;mov	byte [bp-1],3
 13768 00001DBD C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13769                                  	;mov	cx,[bp-9]
 13770 00001DC1 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13771 00001DC4 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13772 00001DC6 30C0                    	XOR	AL,AL
 13773                                  ;hkn; 	SS override
 13774 00001DC8 36C43E[2C03]            	les     di,[ss:DMAADD]
 13775                                  	;add	di,[bp-17]
 13776 00001DCD 037EEF                  	ADD	DI,cResult
 13777 00001DD0 F3AA                    	REP	STOSB			;   }	}
 13778                                  SetExt:
 13779                                  	;mov	dx,[bp-5]
 13780 00001DD2 8B56FB                  	MOV	DX,RecPosH
 13781                                  	;mov	ax,[bp-7]
 13782 00001DD5 8B46F9                  	MOV	AX,RecPosL
 13783                                  	;test	byte [bp-20],2
 13784 00001DD8 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13785 00001DDC 7406                    	JZ	short DoSetExt
 13786                                  	;test	byte [bp-20],8
 13787 00001DDE F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13788 00001DE2 7403                    	JZ	short TrySetRR
 13789                                  DoSetExt:
 13790 00001DE4 E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13791                                  TrySetRR:
 13792                                  	;test	byte [bp-20],8
 13793 00001DE7 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13794 00001DEB 740F                    	JZ	short TryReturn
 13795                                  	;mov	[si+21h],ax
 13796 00001DED 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13797                                  	;mov	[si+23h],dl
 13798 00001DF0 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13799                                  	;cmp	word [si+0Eh],64
 13800 00001DF3 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13801 00001DF7 7303                    	JAE	short TryReturn
 13802                                  	;mov	[si+24h],dh
 13803 00001DF9 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13804                                  TryReturn: 
 13805                                  	;test	byte [bp-20],4
 13806 00001DFC F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13807 00001E00 750B                    	JNZ	short FCBSave
 13808 00001E02 1E                      	push	ds			;	FCB->FDate = date;
 13809 00001E03 E8EFEC                  	call	DATE16			;	FCB->FTime = time;
 13810 00001E06 1F                      	pop	ds
 13811                                  	;mov	[si+14h],ax
 13812 00001E07 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13813                                  	;mov	[si+16h],dx
 13814 00001E0A 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13815                                  FCBSave: 
 13816                                  	;test	byte [bp-20],8
 13817 00001E0D F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13818 00001E11 7409                    	jz	short DoReturn
 13819                                  	;mov	cx,[bp-19]
 13820 00001E13 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13821 00001E16 E86CE6                  	call    Get_User_Stack
 13822                                  	;mov	[si+4],cx
 13823 00001E19 894C04                  	MOV	[SI+user_env.user_CX],CX
 13824                                  DoReturn:
 13825                                  	;mov	al,[bp-1]
 13826 00001E1C 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13827                                  	;Leave	
 13828 00001E1F 89EC                    	mov     sp,bp
 13829 00001E21 5D                      	pop     bp
 13830 00001E22 C3                      	retn
 13831                                  
 13832                                  ; 22/07/2018 - Retro DOS v3.0
 13833                                  
 13834                                  ;Break <$FCB_Open - open an old-style FCB>
 13835                                  ;---------------------------------------------------------------------------
 13836                                  ;
 13837                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13838                                  ;	for us and asked to have the rest filled in.
 13839                                  ;
 13840                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13841                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13842                                  ;		FCB has the following fields filled in:
 13843                                  ;		    Time/Date Extent/NR Size
 13844                                  ;---------------------------------------------------------------------------
 13845                                  
 13846                                  _$FCB_OPEN:			; System call 15
 13847                                  
 13848 00001E23 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13849                                  
 13850                                  ;hkn; DOS_Open is in DOSCODE
 13851 00001E26 B9[842B]                	MOV	CX,DOS_OPEN
 13852                                  
 13853                                  ; The following is common code for Creation and openning of FCBs. AX is
 13854                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13855                                  ; the FCB
 13856                                  
 13857                                  DoAccess:
 13858 00001E29 1E                      	push	ds
 13859 00001E2A 52                      	push	dx
 13860 00001E2B 51                      	push	cx
 13861 00001E2C 50                      	push	ax			; save FCB pointer away
 13862                                  
 13863                                  ;hkn; 	OpenBuf is in DOSDATA
 13864 00001E2D BF[BE03]                	MOV	DI,OPENBUF
 13865 00001E30 E8E34C                  	call	TransFCB		; crunch the fcb
 13866 00001E33 58                      	pop	ax
 13867 00001E34 59                      	pop	cx
 13868 00001E35 5A                      	pop	dx
 13869 00001E36 1F                      	pop	ds			; get fcb
 13870 00001E37 7303                    	JNC	short FindFCB		; everything seems ok
 13871                                  FCBOpenErr:
 13872                                  	; AL has error code
 13873 00001E39 E91EE8                  	jmp	FCB_RET_ERR
 13874                                  FindFCB:
 13875 00001E3C E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13876                                  
 13877                                  	; 17/05/2019 - Retro DOS v4.0
 13878                                  
 13879                                  	; MSDOS 3.3
 13880                                  	;call	LRUFCB
 13881                                  	;jc	short HardMessage
 13882                                  
 13883                                  	; MSDOS 6.0
 13884 00001E3F 50                      	push	ax
 13885 00001E40 B001                    	mov	al,1			;indicate Open/Create operation
 13886 00001E42 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13887 00001E45 58                      	pop	ax
 13888 00001E46 722A                    	jc	short HardMessage
 13889                                  	
 13890                                  	;mov	word [es:di+2],8000h
 13891 00001E48 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13892 00001E4E 1E                      	push	ds
 13893 00001E4F 56                      	push	si	
 13894 00001E50 53                      	push	bx			; save fcb pointer
 13895 00001E51 89CE                    	MOV	SI,CX
 13896                                  
 13897                                  ;hkn; SS is DOSDATA
 13898 00001E53 16                      	push	ss
 13899 00001E54 1F                      	pop	ds			    ; let DOS_Open see variables
 13900 00001E55 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13901 00001E57 5B                      	pop	bx
 13902 00001E58 5E                      	pop	si
 13903 00001E59 1F                      	pop	ds			; get fcb
 13904                                  
 13905                                  ;hkn; SS override
 13906 00001E5A 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13907 00001E5F 7318                    	JNC	short FCBOK		; operation succeeded
 13908                                  failopen:
 13909 00001E61 50                      	PUSH	AX
 13910 00001E62 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13911 00001E64 E8E5FC                  	call	BlastSFT
 13912 00001E67 58                      	POP	AX
 13913                                  	;cmp	ax,4
 13914 00001E68 83F804                  	CMP	AX,error_too_many_open_files
 13915 00001E6B 7405                    	JZ	short HardMessage
 13916                                  	;cmp	ax,24h
 13917 00001E6D 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13918 00001E70 7505                    	jnz	short DeadFCB
 13919                                  HardMessage:
 13920 00001E72 50                      	PUSH	AX
 13921 00001E73 E897FD                  	call	FCBHardErr
 13922 00001E76 58                      	POP	AX
 13923                                  DeadFCB:
 13924                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13925                                  	;jmp	FCB_RET_ERR
 13926 00001E77 EBC0                    	jmp	short FCBOpenErr
 13927                                  FCBOK:
 13928                                  	; MSDOS 6.0
 13929 00001E79 E8EDF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13930 00001E7C 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13931 00001E7E E8C154                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13932 00001E81 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13933                                  ;SR;
 13934                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13935                                  ; LocalSFT variable to reflect this.
 13936                                  
 13937 00001E83 36893E[4410]            	mov	[ss:LocalSFT],di
 13938 00001E88 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13939                                  ;;SR;
 13940                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13941                                  ;;
 13942                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13943                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13944                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13945                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13946                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13947                                  
 13948                                  FCBOK2:
 13949                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13950 00001E8D 26FF05                  	inc	word [es:di]
 13951                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13952 00001E90 E802FA                  	call	SaveFCBInfo
 13953                                  	; MSDOS 3.3
 13954                                  	;call	SetOpenAge
 13955                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13956                                  	;test	word [es:di+5],80h
 13957                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13958 00001E93 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13959 00001E98 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13960 00001E9A 8A04                    	MOV	AL,[SI]			; get drive byte
 13961 00001E9C E8024C                  	call	GETTHISDRV		; convert
 13962                                  	;INC	AL
 13963                                  	; 17/12/2022
 13964 00001E9F 40                      	inc	ax
 13965 00001EA0 8804                    	MOV	[SI],AL			; stash in good drive letter
 13966                                  FCBNoDrive:
 13967                                  	;mov	word [si+0Eh],128
 13968 00001EA2 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13969                                  
 13970                                  	;mov	ax,[es:di+0Dh]
 13971 00001EA7 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13972                                  	;mov	[si+16h],ax
 13973 00001EAB 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13974                                  	;mov	ax,[es:di+0Fh]
 13975 00001EAE 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13976                                  	;mov	[si+14h],ax
 13977 00001EB2 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13978                                  	;mov	ax,[es:di+11h]
 13979 00001EB5 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13980                                  	;mov	[si+10h],ax
 13981 00001EB9 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13982                                  	;mov	ax,[es:di+13h]
 13983 00001EBC 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13984                                  	;mov	[si+12h],ax
 13985 00001EC0 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13986 00001EC3 31C0                    	XOR	AX,AX			; convenient zero
 13987                                  	;mov	[si+0Ch],ax
 13988 00001EC5 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13989                                  
 13990                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13991                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13992                                  
 13993                                  ;hkn; 	SS override
 13994 00001EC8 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13995                                  	;mov	ah,[es:di+4]
 13996 00001ECD 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13997                                  OpenScan:
 13998                                  	;cmp	al,[si+18h]
 13999 00001ED1 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14000 00001ED4 7407                    	JZ	short SkipCheck
 14001 00001ED6 50                      	push	ax			; preserve count
 14002 00001ED7 E888FC                  	call	CheckFCB		; do they match
 14003 00001EDA 58                      	pop	ax			; get count back
 14004 00001EDB 7309                    	JNC	short OpenFound		; found a match!
 14005                                  SkipCheck:
 14006 00001EDD FEC0                    	INC	AL			; advance to next FCB
 14007 00001EDF 38E0                    	CMP	AL,AH			; table full?
 14008 00001EE1 75EE                    	JNZ	short OpenScan		; no, go for more
 14009                                  OpenDone:
 14010 00001EE3 30C0                    	xor	al,al			; return success
 14011 00001EE5 C3                      	retn
 14012                                  
 14013                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14014                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14015                                  ; Consider:
 14016                                  ;
 14017                                  ;   open (foo)	delete (foo) open (bar)
 14018                                  ;
 14019                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14020                                  ; foo even though foo is no longer needed; this is due to the server closing
 14021                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14022                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14023                                  ; bar and subsequent I/O would be lost to the redirector.
 14024                                  ;
 14025                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14026                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14027                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14028                                  ; around. This will allow us to access the same file through multiple network
 14029                                  ; connections and NOT prematurely terminate when the ref count on one
 14030                                  ; connection goes to zero.
 14031                                  
 14032                                  OpenFound:
 14033                                  	;mov	[si+18h],al
 14034 00001EE6 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14035 00001EE9 26FF05                  	inc	word [es:di]
 14036                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14037                                  					; remember this new invocation
 14038 00001EEC 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 14039                                  	;mov	[es:di+15h],ax
 14040 00001EF0 26894515                	MOV	[ES:DI+sf_LRU],AX
 14041                                  ;
 14042                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 14043                                  ; blast it to prevent other reuse.
 14044                                  ;
 14045 00001EF4 16                      	push	ss
 14046 00001EF5 1F                      	pop	ds
 14047 00001EF6 C43E[9E05]              	LES	DI,[THISSFT]
 14048 00001EFA 26FF0D                  	dec	word [es:di]
 14049                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14050                                  					; free the newly allocated SFT
 14051 00001EFD E87A54                  	call	ShareEnd
 14052 00001F00 B043                    	MOV	AL,'C'	 ; 43h
 14053 00001F02 E847FC                  	call	BlastSFT
 14054 00001F05 EBDC                    	JMP	short OpenDone
 14055                                  
 14056                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14057                                  ;----------------------------------------------------------------------------
 14058                                  ;
 14059                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14060                                  ;	FCB for us and asked to have the rest filled in.
 14061                                  ;
 14062                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14063                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14064                                  ;		FCB has the following fields filled in:
 14065                                  ;		    Time/Date Extent/NR Size
 14066                                  ;----------------------------------------------------------------------------
 14067                                  
 14068                                  _$FCB_CREATE:		; System call 22
 14069                                  
 14070                                  ;hkn; DOS_Create is in DOSCODE
 14071 00001F07 B9[5A2A]                	MOV	CX,DOS_CREATE		; routine to call
 14072 00001F0A 31C0                    	XOR	AX,AX			; attributes to create
 14073 00001F0C E85AFD                  	call	GetExtended		; get extended FCB
 14074 00001F0F 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14075 00001F11 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14076                                  DoAccessJ:
 14077 00001F14 E912FF                  	JMP	DoAccess		; do dirty work
 14078                                  
 14079                                  ; 22/07/2018 - Retro DOS v3.0
 14080                                  
 14081                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 14082                                  ;----------------------------------------------------------------------------
 14083                                  ;
 14084                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 14085                                  ;	and write a number of blocks from it.
 14086                                  ;
 14087                                  ;   Inputs:	DS:DX point to an FCB
 14088                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 14089                                  ;		AL <> 0 Not enough room on disk for the output
 14090                                  ;
 14091                                  ;----------------------------------------------------------------------------
 14092                                  
 14093                                  _$FCB_RANDOM_WRITE_BLOCK:
 14094                                  	;mov	AL,0Ah	
 14095 00001F17 B00A                    	MOV	AL,RANDOM+BLOCK
 14096 00001F19 E968FD                  	JMP	FCBIO
 14097                                  
 14098                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 14099                                  ;----------------------------------------------------------------------------
 14100                                  ;
 14101                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 14102                                  ;	and read a number of blocks from it.
 14103                                  ;
 14104                                  ;   Inputs:	DS:DX point to an FCB
 14105                                  ;   Outputs:	AL = error codes defined above
 14106                                  ;
 14107                                  ;----------------------------------------------------------------------------
 14108                                  
 14109                                  _$FCB_RANDOM_READ_BLOCK:
 14110                                  	;mov	AL,0Eh	
 14111 00001F1C B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 14112 00001F1E E963FD                  	JMP	FCBIO
 14113                                  
 14114                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 14115                                  ;----------------------------------------------------------------------------
 14116                                  ;
 14117                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 14118                                  ;	memory
 14119                                  ;
 14120                                  ;   Inputs:	DS:DX point to an FCB
 14121                                  ;   Outputs:	AL = error codes defined above
 14122                                  ;
 14123                                  ;----------------------------------------------------------------------------
 14124                                  
 14125                                  _$FCB_SEQ_READ:
 14126                                  	;mov	AL,4	
 14127 00001F21 B004                    	MOV	AL,FCBREAD
 14128 00001F23 E95EFD                  	JMP	FCBIO
 14129                                  
 14130                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 14131                                  ;----------------------------------------------------------------------------
 14132                                  ;
 14133                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 14134                                  ;	file
 14135                                  ;
 14136                                  ;   Inputs:	DS:DX point to an FCB
 14137                                  ;   Outputs:	AL = error codes defined above
 14138                                  ;
 14139                                  ;----------------------------------------------------------------------------
 14140                                  
 14141                                  _$FCB_SEQ_WRITE:
 14142 00001F26 B000                    	MOV	AL,0
 14143 00001F28 E959FD                  	jmp	FCBIO
 14144                                  
 14145                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 14146                                  ;----------------------------------------------------------------------------
 14147                                  ;
 14148                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 14149                                  ;	record from it.
 14150                                  ;
 14151                                  ;   Inputs:	DS:DX point to an FCB
 14152                                  ;   Outputs:	AL = error codes defined above
 14153                                  ;
 14154                                  ;----------------------------------------------------------------------------
 14155                                  
 14156                                  _$FCB_RANDOM_READ:
 14157                                  	;mov	AL,6	
 14158 00001F2B B006                    	MOV	AL,RANDOM+FCBREAD
 14159 00001F2D E954FD                  	jmp	FCBIO			; single block
 14160                                  
 14161                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 14162                                  ;----------------------------------------------------------------------------
 14163                                  ;
 14164                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 14165                                  ;	a record to it.
 14166                                  ;
 14167                                  ;   Inputs:	DS:DX point to an FCB
 14168                                  ;   Outputs:	AL = error codes defined above
 14169                                  ;
 14170                                  ;----------------------------------------------------------------------------
 14171                                  
 14172                                  _$FCB_RANDOM_WRITE:
 14173                                  	;mov	AL,2	
 14174 00001F30 B002                    	MOV	AL,RANDOM
 14175 00001F32 E94FFD                  	jmp	FCBIO
 14176                                  
 14177                                  ;============================================================================
 14178                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14179                                  ;============================================================================
 14180                                  ; 22/07/2018 - Retro DOS v3.0
 14181                                  ; 17/05/2019 - Retro DOS v4.0
 14182                                  
 14183                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14184                                  
 14185                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14186                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14187                                  
 14188                                  ;**	Search.asm
 14189                                  ;----------------------------------------------------------------------------
 14190                                  ;	Directory search system calls.
 14191                                  ;	These will be passed direct text of the pathname from the user. 
 14192                                  ;	They will need to be passed through the macro expander prior to
 14193                                  ;	being sent through the low-level stuff. 
 14194                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14195                                  ;
 14196                                  ;	$Dir_Search_First	  written
 14197                                  ;	$Dir_Search_Next	  written
 14198                                  ;	$Find_First	  written
 14199                                  ;	$Find_Next		  written
 14200                                  ;	PackName		  written
 14201                                  ;
 14202                                  ;	Modification history:
 14203                                  ;
 14204                                  ;	  Created: ARR 4 April 1983
 14205                                  
 14206                                  ;----------------------------------------------------------------------------
 14207                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14208                                  ;
 14209                                  ; Inputs:
 14210                                  ;	DS:DX Points to unopenned FCB
 14211                                  ; Function:
 14212                                  ;	Directory is searched for first matching entry and the directory
 14213                                  ;	entry is loaded at the disk transfer address
 14214                                  ; Returns:
 14215                                  ;	AL = -1 if no entries matched, otherwise 0
 14216                                  ;----------------------------------------------------------------------------
 14217                                  
 14218                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14219                                  
 14220                                  _$DIR_SEARCH_FIRST:
 14221 00001F35 368916[A605]            	MOV	[SS:THISFCB],DX
 14222 00001F3A 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14223 00001F3F 89D6                    	MOV	SI,DX
 14224 00001F41 803CFF                  	CMP	BYTE [SI],0FFH
 14225 00001F44 7503                    	JNZ	short NORMFCB4
 14226 00001F46 83C607                  	ADD	SI,7			; Point to drive select byte
 14227                                  NORMFCB4:
 14228 00001F49 FF34                    	push	word [SI]		; Save original drive byte for later
 14229                                  
 14230 00001F4B 16                      	push	ss
 14231 00001F4C 07                      	pop	es			; get es to address DOSGroup
 14232                                  
 14233 00001F4D BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14234 00001F50 E8C34B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14235 00001F53 7304                    	JNC	short SearchIt		; no error, go and look
 14236 00001F55 5B                      	pop	bx			; Clean stack
 14237                                  
 14238                                  ; Error code is in AX
 14239                                  
 14240                                  	; 09/11/2022
 14241                                  dcf_errj:
 14242 00001F56 E901E7                  	jmp	FCB_RET_ERR		; error
 14243                                  
 14244                                  SearchIt:
 14245 00001F59 16                      	push	ss
 14246 00001F5A 1F                      	pop	ds			; get ready for search
 14247 00001F5B FF36[2C03]              	push	word [DMAADD]
 14248 00001F5F FF36[2E03]              	push	word [DMAADD+2]
 14249 00001F63 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14250 00001F69 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14251                                  	; MSDOS 3.3
 14252                                  	;call	DOS_SEARCH_FIRST
 14253                                  	; MSDOS 6.0
 14254 00001F6D E88501                  	call	GET_FAST_SEARCH		; search
 14255 00001F70 8F06[2E03]              	pop	word [DMAADD+2]
 14256 00001F74 8F06[2C03]              	pop	word [DMAADD]
 14257 00001F78 7303                    	JNC	short SearchSet		; no error, transfer info
 14258 00001F7A 5B                      	pop	bx			; Clean stack
 14259                                  
 14260                                  ; Error code is in AX
 14261                                  
 14262                                  	; 09/11/2022
 14263                                  	;jmp	FCB_RET_ERR
 14264 00001F7B EBD9                    	jmp	short dcf_errj
 14265                                  
 14266                                  ; The search was successful (or the search-next). We store the information
 14267                                  ; into the user's FCB for continuation.
 14268                                  
 14269                                  SearchSet:
 14270 00001F7D BE[BE04]                	MOV	SI,SEARCHBUF
 14271 00001F80 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14272 00001F84 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14273 00001F89 7403                    	JZ	short NORMFCB1
 14274 00001F8B 83C707                  	ADD	DI,7			; Point past the extension
 14275                                  NORMFCB1:
 14276 00001F8E 5B                      	pop	bx			; Get original drive byte
 14277 00001F8F 08DB                    	OR	BL,BL
 14278 00001F91 7506                    	JNZ	short SearchDrv
 14279 00001F93 8A1E[3603]              	MOV	BL,[CURDRV]
 14280 00001F97 FEC3                    	INC	BL
 14281                                  SearchDrv:
 14282 00001F99 AC                      	LODSB				; Get correct search contin drive byte
 14283 00001F9A 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14284 00001F9C 47                      	INC	DI
 14285                                  	;STOSB				; Store the correct "user" drive byte
 14286                                  					;  at the start of the search info
 14287 00001F9D B90A00                  	MOV	CX,20/2
 14288 00001FA0 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14289 00001FA2 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14290                                  					;   byte to AL
 14291 00001FA4 AA                      	STOSB				; Search contin drive byte at end of
 14292                                  					;   contin info
 14293 00001FA5 C43E[2C03]              	LES	DI,[DMAADD]
 14294 00001FA9 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14295 00001FAE 740D                    	JZ	short NORMFCB2
 14296 00001FB0 B0FF                    	MOV	AL,0FFh
 14297 00001FB2 AA                      	STOSB
 14298 00001FB3 FEC0                    	INC	AL
 14299                                  	;MOV	CX,5
 14300                                  	; 17/12/2022
 14301 00001FB5 B105                    	mov	cl,5
 14302 00001FB7 F3AA                    	REP	STOSB
 14303 00001FB9 A0[6D05]                	MOV	AL,[SATTRIB]
 14304 00001FBC AA                      	STOSB
 14305                                  NORMFCB2:
 14306 00001FBD 88D8                    	MOV	AL,BL			; User Drive byte
 14307 00001FBF AA                      	STOSB
 14308                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14309                                  	; 17/12/2022
 14310 00001FC0 B110                    	mov	cl,16
 14311 00001FC2 F3A5                    	REP	MOVSW
 14312 00001FC4 E990E6                  	jmp	FCB_RET_OK
 14313                                  
 14314                                  ;----------------------------------------------------------------------------
 14315                                  ;
 14316                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14317                                  ;
 14318                                  ; Inputs:
 14319                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14320                                  ; Function:
 14321                                  ;	Directory is searched for the next matching entry and the directory
 14322                                  ;	entry is loaded at the disk transfer address
 14323                                  ; Returns:
 14324                                  ;	AL = -1 if no entries matched, otherwise 0
 14325                                  ;----------------------------------------------------------------------------
 14326                                  
 14327                                  _$DIR_SEARCH_NEXT:
 14328 00001FC7 368916[A605]            	MOV	[SS:THISFCB],DX
 14329 00001FCC 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14330 00001FD1 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14331 00001FD7 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14332                                  
 14333 00001FDD 16                      	push	ss
 14334 00001FDE 07                      	pop	es
 14335                                  
 14336 00001FDF BF[BE04]                	MOV	DI,SEARCHBUF
 14337                                  
 14338 00001FE2 89D6                    	MOV	SI,DX
 14339 00001FE4 803CFF                  	CMP	BYTE [SI],0FFh
 14340 00001FE7 750D                    	JNZ	short NORMFCB6
 14341 00001FE9 83C606                  	ADD	SI,6
 14342 00001FEC AC                      	LODSB
 14343                                  
 14344 00001FED 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14345 00001FF1 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14346                                  NORMFCB6:
 14347 00001FF6 AC                      	LODSB				; Get original user drive byte
 14348 00001FF7 50                      	push	ax			; Put it on stack
 14349 00001FF8 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14350 00001FFB AA                      	STOSB				; Put in correct place
 14351 00001FFC B90A00                  	MOV	CX,20/2
 14352 00001FFF F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14353                                  
 14354 00002001 16                      	push	ss
 14355 00002002 1F                      	pop	ds
 14356                                  
 14357 00002003 FF36[2C03]              	push	word [DMAADD]
 14358 00002007 FF36[2E03]              	push	word [DMAADD+2]
 14359 0000200B C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14360 00002011 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14361 00002015 E8200E                  	call	DOS_SEARCH_NEXT 	; Find it
 14362 00002018 8F06[2E03]              	pop	word [DMAADD+2]
 14363 0000201C 8F06[2C03]              	pop	word [DMAADD]
 14364 00002020 7203                    	JC	short SearchNoMore
 14365 00002022 E958FF                  	JMP	SearchSet		; Ok set return
 14366                                  
 14367                                  SearchNoMore:
 14368 00002025 C43E[A605]              	LES	DI,[THISFCB]
 14369 00002029 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14370 0000202E 7403                    	JZ	short NORMFCB8
 14371 00002030 83C707                  	ADD	DI,7			; Point past the extension
 14372                                  NORMFCB8:
 14373 00002033 5B                      	pop	bx			; Get original drive byte
 14374 00002034 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14375                                  					;  at the right spot
 14376                                  ; error code is in AX
 14377                                  
 14378 00002037 E920E6                  	jmp	FCB_RET_ERR
 14379                                  
 14380                                  ; 17/05/2019 - Retro DOS v4.0
 14381                                  
 14382                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14383                                  
 14384                                  ;---------------------------------------------------------------------------
 14385                                  ;
 14386                                  ;   Procedure Name : $FIND_FIRST
 14387                                  ; 
 14388                                  ;   Assembler usage:
 14389                                  ;	    MOV AH, FindFirst
 14390                                  ;	    LDS DX, name
 14391                                  ;	    MOV CX, attr
 14392                                  ;	    INT 21h
 14393                                  ;	; DMA address has datablock
 14394                                  ;
 14395                                  ;   Error Returns:
 14396                                  ;	    AX = error_path_not_found
 14397                                  ;	       = error_no_more_files
 14398                                  ;---------------------------------------------------------------------------
 14399                                  
 14400                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14401                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14402                                  
 14403                                  _$FIND_FIRST:
 14404 0000203A 89D6                    	MOV	SI,DX			; get name in appropriate place
 14405 0000203C 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14406                                  
 14407 00002041 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14408                                  
 14409 00002044 E8354B                  	call	TransPathSet		; convert the path
 14410 00002047 7305                    	JNC	short Find_it 		; no error, go and look
 14411                                  FindError:
 14412                                  	;mov	al,3
 14413 00002049 B003                    	mov	al, error_path_not_found ; error and map into one.
 14414                                  	; 09/11/2022
 14415                                  FF_errj:
 14416 0000204B E9F6E5                  	jmp	SYS_RET_ERR
 14417                                  Find_it:
 14418 0000204E 16                      	push	ss
 14419 0000204F 1F                      	pop	ds
 14420                                  
 14421 00002050 FF36[2C03]              	push	word [DMAADD]
 14422 00002054 FF36[2E03]              	push	word [DMAADD+2]
 14423 00002058 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14424 0000205E 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14425                                  	; MSDOS 3.3
 14426                                  	;call	DOS_SEARCH_FIRST
 14427                                  	; MSDOS 6.0
 14428 00002062 E89000                  	call	GET_FAST_SEARCH 	; search
 14429 00002065 8F06[2E03]              	pop	word [DMAADD+2]
 14430 00002069 8F06[2C03]              	pop	word [DMAADD]
 14431                                  	
 14432                                  	; 16/12/2022
 14433                                  	;JNC	short FindSet 		; no error, transfer info
 14434 0000206D 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14435                                  	;
 14436                                  	;jmp	SYS_RET_ERR
 14437                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14438                                  ;FFF_errj:
 14439                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14440                                  
 14441                                  FindSet:
 14442 0000206F BE[BE04]                	MOV	SI,SEARCHBUF
 14443 00002072 C43E[2C03]              	LES	DI,[DMAADD]
 14444 00002076 B91500                  	MOV	CX,21
 14445 00002079 F3A4                    	REP	MOVSB
 14446 0000207B 56                      	PUSH	SI			; Save pointer to start of entry
 14447                                  	;mov	al,[si+0Bh]
 14448 0000207C 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14449 0000207F AA                      	STOSB
 14450                                  	;add	si,16h ; 22
 14451 00002080 83C616                  	ADD	SI,dir_entry.dir_time
 14452 00002083 A5                      	MOVSW				; dir_time
 14453 00002084 A5                      	MOVSW				; dir_date
 14454 00002085 46                      	INC	SI
 14455 00002086 46                      	INC	SI			; Skip dir_first
 14456 00002087 A5                      	MOVSW				; dir_size (2 words)
 14457 00002088 A5                      	MOVSW
 14458 00002089 5E                      	POP	SI			; Point back to dir_name
 14459 0000208A E83500                   	CALL	PackName
 14460 0000208D E9ABE5                  	jmp	SYS_RET_OK		; bye with no errors
 14461                                  
 14462                                  ;---------------------------------------------------------------------------
 14463                                  ;
 14464                                  ;   Procedure Name : $FIND_NEXT
 14465                                  ;
 14466                                  ;   Assembler usage:
 14467                                  ;	; dma points at area returned by find_first
 14468                                  ;	    MOV AH, findnext
 14469                                  ;	    INT 21h
 14470                                  ;	; next entry is at dma
 14471                                  ;
 14472                                  ;   Error Returns:
 14473                                  ;	    AX = error_no_more_files
 14474                                  ;---------------------------------------------------------------------------
 14475                                  
 14476                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14477                                  _$FIND_NEXT:
 14478 00002090 16                      	push	ss
 14479 00002091 07                      	pop	es
 14480                                  
 14481 00002092 BF[BE04]                	MOV	DI,SEARCHBUF
 14482                                  
 14483 00002095 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14484                                  
 14485 0000209A B91500                  	MOV	CX,21
 14486 0000209D F3A4                    	REP	MOVSB			; Put the search continuation info
 14487                                  					;  in the right place
 14488 0000209F 16                      	push	ss
 14489 000020A0 1F                      	pop	ds			; get ready for search
 14490                                  	
 14491 000020A1 FF36[2C03]              	push	word [DMAADD]
 14492 000020A5 FF36[2E03]              	push	word [DMAADD+2]
 14493 000020A9 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14494 000020AF 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14495 000020B3 E8820D                  	call	DOS_SEARCH_NEXT 	; Find it
 14496 000020B6 8F06[2E03]              	pop	word [DMAADD+2]
 14497 000020BA 8F06[2C03]              	pop	word [DMAADD]
 14498 000020BE 73AF                    	JNC	short FindSet 		; No error, set info
 14499                                  	;jmp	SYS_RET_ERR
 14500                                  	; 16/12/2022
 14501 000020C0 EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14502                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14503                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14504                                  
 14505                                  ;---------------------------------------------------------------------------
 14506                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14507                                  ;
 14508                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14509                                  ;	the ASCIZ format.
 14510                                  ;
 14511                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14512                                  ;		(ES:DI) = destination area (13 bytes)
 14513                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14514                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14515                                  ;---------------------------------------------------------------------------
 14516                                  
 14517                                  PackName:
 14518                                  ;	Move over 8 characters to cover the name component, then trim it's
 14519                                  ;	trailing blanks.
 14520                                  
 14521 000020C2 B90800                  	MOV	CX,8			; Pack the name
 14522 000020C5 F3A4                    	REP	MOVSB			; Move all of it
 14523                                  main_kill_tail:
 14524 000020C7 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14525 000020CC 7507                    	JNZ	short find_check_dot
 14526 000020CE 4F                      	DEC	DI			; Back up over trailing space
 14527 000020CF 41                      	INC	CX
 14528 000020D0 83F908                  	CMP	CX,8
 14529 000020D3 72F2                    	JB	short main_kill_tail
 14530                                  find_check_dot:
 14531                                  	;CMP	WORD [SI],(" " << 8) | " "
 14532 000020D5 813C2020                	cmp     word [si],2020h 
 14533 000020D9 7506                    	JNZ	short got_ext 		; Some chars in extension
 14534 000020DB 807C0220                	CMP	BYTE [SI+2]," "
 14535 000020DF 7410                    	JZ	short find_done		; No extension
 14536                                  got_ext:
 14537 000020E1 B02E                    	MOV	AL,"."	; 2Eh
 14538 000020E3 AA                      	STOSB
 14539                                  	;MOV	CX,3
 14540                                  	; 18/12/2022
 14541                                  	;mov	cl,3
 14542                                  	;REP	MOVSB
 14543 000020E4 A4                      	movsb
 14544 000020E5 A4                      	movsb
 14545 000020E6 A4                      	movsb
 14546                                  ext_kill_tail:
 14547 000020E7 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14548 000020EC 7503                    	JNZ	short find_done
 14549 000020EE 4F                      	DEC	DI			; Back up over trailing space
 14550 000020EF EBF6                    	JMP	short ext_kill_tail
 14551                                  find_done:
 14552 000020F1 31C0                    	XOR	AX,AX
 14553 000020F3 AA                      	STOSB				; NUL terminate
 14554 000020F4 C3                      	retn
 14555                                  
 14556                                  ;---------------------------------------------------------------------------
 14557                                  
 14558                                  	; 17/05/2019 - Retro DOS v4.0
 14559                                  GET_FAST_SEARCH:
 14560                                  	; 22/07/2018
 14561                                  	; MSDOS 6.0
 14562                                  	; 17/12/2022
 14563 000020F5 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14564                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14565                                  					;FO.trigger fastopen ;AN000;
 14566                                  	;call	DOS_SEARCH_FIRST
 14567                                  	;retn
 14568                                  	; 17/12/2022
 14569 000020FB E94E0C                  	jmp	DOS_SEARCH_FIRST
 14570                                  
 14571                                  ;============================================================================
 14572                                  ; PATH.ASM, MSDOS 6.0, 1991
 14573                                  ;============================================================================
 14574                                  ; 06/08/2018 - Retro DOS v3.0
 14575                                  ; 17/05/2019 - Retro DOS v4.0
 14576                                  
 14577                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14578                                  
 14579                                  ;**	Directory related system calls. These will be passed direct text of the
 14580                                  ;	pathname from the user. They will need to be passed through the macro
 14581                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14582                                  ;	defined in DISPATCH. The system calls are:
 14583                                  ;
 14584                                  ;	$CURRENT_DIR  Written
 14585                                  ;	$RMDIR	  Written
 14586                                  ;	$CHDIR	  Written
 14587                                  ;	$MKDIR	  Written
 14588                                  ;
 14589                                  ;
 14590                                  ;	Modification history:
 14591                                  ;
 14592                                  ;	    Created: ARR 4 April 1983
 14593                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14594                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14595                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14596                                  ;				    current directory.
 14597                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14598                                  
 14599                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14600                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14601                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14602                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14603                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14604                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14605                                  ;	I_Need	cMeta,BYTE
 14606                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14607                                  
 14608                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14609                                  ;----------------------------------------------------------------------------
 14610                                  ;
 14611                                  ;   Procedure Name : $CURRENT_DIR
 14612                                  ;
 14613                                  ;   Assembler usage:
 14614                                  ;		LDS	SI,area
 14615                                  ;		MOV	DL,drive
 14616                                  ;		INT	21h
 14617                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14618                                  ;	    ; current directory.
 14619                                  ;   Error returns:
 14620                                  ;	    AX = error_invalid_drive
 14621                                  ;
 14622                                  ;----------------------------------------------------------------------------
 14623                                  
 14624                                  _$CURRENT_DIR:
 14625                                  	;06/08/2018 - Retro DOS v3.0
 14626                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14627 000020FE E811F2                  	call	ECritDisk
 14628 00002101 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14629 00002103 E87F49                  	call	GetVisDrv		; grab it
 14630 00002106 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14631                                  CurdirErr:
 14632 00002108 E822F2                  	call	LCritDisk
 14633                                  
 14634                                  	; MSDOS 3.3
 14635                                  	;mov	al,0Fh
 14636                                  	
 14637                                  	; MSDOS 6.0
 14638 0000210B 1E                      	push	ds
 14639 0000210C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14640 00002111 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14641 00002114 1F                      	pop	ds
 14642                                  
 14643                                  curdir_errj:
 14644 00002115 E92CE5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14645                                  
 14646                                  CurrentValidate:
 14647 00002118 1E                      	push	ds			; save destination
 14648 00002119 56                      	push	si
 14649                                  	
 14650                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14651                                  	
 14652                                  	; MSDOS 6.0
 14653 0000211A 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14654 0000211F C536[A205]              	lds     si,[THISCDS]
 14655                                  
 14656                                  ; 16/12/2022
 14657                                  %if 0
 14658                                  	; 09/11/2022 (following test instruction is nonsense!)
 14659                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14660                                  
 14661                                  	;test	word [si+43h],8000h
 14662                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14663                                  	;jnz	short $+2  ; 09/11/2022	
 14664                                  	jnz	short DoCheck
 14665                                  %endif
 14666                                  
 14667                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14668                                  ; media check.
 14669                                  ;	CMP	word [SI+curdir.ID],0
 14670                                  ;	JZ	short GetDst
 14671                                  DoCheck:
 14672                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14673                                  
 14674                                  	; MSDOS 6.0
 14675 00002123 1E                      	push	ds
 14676 00002124 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14677 00002129 C606[4C03]00            	mov	byte [NoSetDir],0
 14678 0000212E 1F                      	pop	ds
 14679                                  
 14680 0000212F BF[BE03]                	MOV	DI,OPENBUF
 14681 00002132 E83621                  	call	ValidateCDS		; output is ES:DI -> CDS
 14682                                  
 14683 00002135 06                      	push	es	 		; swap source and destination
 14684 00002136 57                      	push	di
 14685 00002137 5E                      	pop	si
 14686 00002138 1F                      	pop	ds
 14687                                  GetDst:
 14688 00002139 5F                      	pop	di
 14689 0000213A 07                      	pop	es			; get real destination
 14690 0000213B 72CB                    	JC	short CurdirErr
 14691                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14692                                  	;
 14693                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14694                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14695                                  	; 16/12/2022
 14696                                  	;add	si,0  ; add si,curdir.text
 14697                                  	;
 14698                                  	;add	si,[si+4Fh] ; 17/05/2019
 14699 0000213D 03744F                  	ADD	SI,[SI+curdir.end]
 14700 00002140 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14701 00002143 7501                    	JNZ	short CurrentCopy
 14702 00002145 46                      	INC	SI
 14703                                  CurrentCopy:
 14704                                  ;	call	FStrCpy
 14705                                  ;; 10/29/86 E5 char
 14706 00002146 50                      	PUSH	AX
 14707 00002147 AC                      	LODSB				; get char
 14708 00002148 08C0                    	OR	AL,AL
 14709 0000214A 7413                    	JZ	short FOK
 14710 0000214C 3C05                    	CMP	AL,05H
 14711 0000214E 740D                    	JZ	short FCHANGE
 14712 00002150 EB01                    	JMP	short FFF
 14713                                  FCPYNEXT:
 14714 00002152 AC                      	LODSB				; get char
 14715                                  FFF:
 14716 00002153 3C5C                    	CMP	AL,'\'			; beginning of directory
 14717 00002155 7508                    	JNZ	short FOK		; no
 14718 00002157 AA                      	STOSB				; put into user's buffer
 14719 00002158 AC                      	LODSB				; 1st char of dir is 05?
 14720 00002159 3C05                    	CMP	AL,05H
 14721 0000215B 7502                    	JNZ	short FOK		; no
 14722                                  FCHANGE:
 14723 0000215D B0E5                    	MOV	AL,0E5H			; make it E5
 14724                                  FOK:
 14725 0000215F AA                      	STOSB				; put into user's buffer
 14726 00002160 08C0                    	OR	AL,AL			; final char
 14727 00002162 75EE                    	JNZ	short FCPYNEXT		; no
 14728 00002164 58                      	POP	AX
 14729                                  
 14730                                  ;; 10/29/86 E5 char
 14731 00002165 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14732 00002167 E8C3F1                  	call	LCritDisk
 14733 0000216A E9CEE4                  	jmp	SYS_RET_OK		; no more, bye!
 14734                                  
 14735                                  ; 17/05/2019 - Retro DOS v4.0
 14736                                  
 14737                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14738                                  
 14739                                  ;BREAK <$RmDir -- Remove a directory>
 14740                                  ;----------------------------------------------------------------------------
 14741                                  ;
 14742                                  ; Procedure Name : $RmDir
 14743                                  ;
 14744                                  ; Inputs:
 14745                                  ;	DS:DX Points to asciz name
 14746                                  ; Function:
 14747                                  ;	Delete directory if empty
 14748                                  ; Returns:
 14749                                  ;	STD XENIX Return
 14750                                  ;	AX = error_path_not_found If path bad
 14751                                  ;	AX = error_access_denied If
 14752                                  ;		Directory not empty
 14753                                  ;		Path not directory
 14754                                  ;		Root directory specified
 14755                                  ;		Directory malformed (. and .. not first two entries)
 14756                                  ;		User tries to delete a current directory
 14757                                  ;	AX = error_current_directory
 14758                                  ;
 14759                                  ;----------------------------------------------------------------------------
 14760                                  
 14761                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14762                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14763                                  
 14764                                  _$RMDIR:
 14765 0000216D 52                      	push	dx			; Save ptr to name
 14766 0000216E 1E                      	push	ds
 14767 0000216F 89D6                    	mov	si,dx			; Load ptr into si
 14768 00002171 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14769 00002174 57                      	push	di
 14770 00002175 E80C4A                  	call	TransPathNoSet		; Translate the name
 14771 00002178 5F                      	pop	di			; di = ptr to buf for trans name
 14772 00002179 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14773 0000217B 1F                      	pop	ds
 14774 0000217C 5A                      	pop	dx			; Restore the name
 14775                                  	;mov	al,3
 14776 0000217D B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14777                                  	; 16/12/2022
 14778                                  rmdir_errj: ; 10/08/2018
 14779                                  chdir_errj:
 14780 0000217F EB94                    	jmp	short curdir_errj
 14781                                  	;jmp	SYS_RET_ERR
 14782                                  rmlset:
 14783 00002181 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14784 00002187 7512                    	Jnz	short rmerr		;	return (-1);
 14785 00002189 16                      	push	ss
 14786 0000218A 07                      	pop	es
 14787 0000218B 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14788                                  rmloop: 
 14789 0000218D E86649                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14790 00002190 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14791 00002192 E821F0                  	call	StrCmp			; Are the 2 paths the same?
 14792 00002195 7404                    	jz	short rmerr		; Yes, report error.
 14793 00002197 FEC0                    	inc	al			; No, inc al to next drive number
 14794 00002199 EBF2                    	jmp	short rmloop		; Go check next drive.
 14795                                  rmerr:
 14796 0000219B 1F                      	pop	ds
 14797 0000219C 5A                      	pop	dx			; Restore the name
 14798                                  	;mov	al,10h
 14799 0000219D B010                    	mov	al,error_current_directory ; error
 14800                                  	; 16/12/2022
 14801                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14802                                  ;chdir_errj:
 14803 0000219F EBDE                    	jmp	short rmdir_errj
 14804                                  rmcont:
 14805 000021A1 1F                      	pop	ds
 14806 000021A2 5A                      	pop	dx			; Restore the name
 14807 000021A3 BE[0D32]                	MOV	SI,DOS_RMDIR
 14808 000021A6 EB7C                    	JMP	DoDirCall
 14809                                  
 14810                                  ; 17/05/2019 - Retro DOS v4.0
 14811                                  
 14812                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14813                                  
 14814                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14815                                  ;----------------------------------------------------------------------------
 14816                                  ;
 14817                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14818                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14819                                  ; several cases to consider:
 14820                                  ;
 14821                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14822                                  ;	it into a WFP.	We verify the existance of this directory and then
 14823                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14824                                  ;	directory cluster.
 14825                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14826                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14827                                  ;	WFP back into the CDS.
 14828                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14829                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14830                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14831                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14832                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14833                                  ;	to process the path but to return the logical CDS and the logical
 14834                                  ;	path.  We then copy the logical path into the logical CDS.
 14835                                  ;
 14836                                  ; Inputs:
 14837                                  ;	DS:DX Points to asciz name
 14838                                  ; Returns:
 14839                                  ;	STD XENIX Return
 14840                                  ;	AX = chdir_path_not_found if error
 14841                                  ;
 14842                                  ;----------------------------------------------------------------------------
 14843                                  
 14844                                  _$CHDIR:
 14845 000021A8 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14846 000021AB 89D6                    	MOV	SI,DX			; get source
 14847 000021AD E8C849                  	call	TransPath		; go munge the path and get real CDS
 14848 000021B0 7304                    	JNC	short ChDirCrack	; no errors, try path
 14849                                  ChDirErrP:
 14850                                  	;mov	al,3
 14851 000021B2 B003                    	MOV	AL,error_path_not_found
 14852                                  ChDirErr:
 14853                                  	;jmp	SYS_RET_ERR 	; oops!
 14854                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14855 000021B4 EBC9                    	jmp	short chdir_errj
 14856                                  
 14857                                  ChDirCrack:
 14858 000021B6 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14859 000021BB 75F5                    	JNZ	short ChDirErrP
 14860                                  
 14861                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14862                                  ; found.
 14863                                  
 14864 000021BD C43E[A205]              	LES	DI,[THISCDS]
 14865 000021C1 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14866 000021C4 74EC                    	JZ	short ChDirErrP		;	error ();
 14867                                  
 14868                                  ; Find out if the directory exists.
 14869                                  
 14870 000021C6 E80110                  	call	DOS_CHDIR
 14871                                  	;Jc	short ChDirErr
 14872                                  	; 16/12/2022
 14873 000021C9 72B4                    	jc	short chdir_errj
 14874                                  ;
 14875                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14876                                  ; not network). If one was seen, all we need to do is copy in the text
 14877                                  ;
 14878 000021CB C43E[A205]              	LES	DI,[THISCDS]
 14879                                  	;test	word [es:di+43h],2000h
 14880                                  	; 17/12/2022
 14881 000021CF 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14882                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14883 000021D4 7425                    	JZ	short GotCDS
 14884                                  
 14885                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14886                                  
 14887 000021D6 06                      	push	es	
 14888 000021D7 57                      	push	di
 14889 000021D8 51                      	push	cx			; save CDS and cluster...
 14890 000021D9 E8A9E2                  	call	Get_User_Stack		; get original text
 14891                                  	
 14892                                  	;mov	di,[si+6]
 14893 000021DC 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14894                                  	;mov	ds,[si+0Eh]
 14895 000021DF 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14896                                  	
 14897 000021E2 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14898 000021E5 87F7                    	XCHG	SI,DI
 14899 000021E7 30C0                    	XOR	AL,AL			; do no splicing
 14900 000021E9 57                      	push	di
 14901 000021EA E89749                  	call	TransPathNoSet		; Munge path
 14902 000021ED 5E                      	pop	si
 14903                                  
 14904                                  ; There should NEVER be an error here.
 14905                                  
 14906                                  ;IF FALSE
 14907                                  ;	JNC SKipErr
 14908                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14909                                  ;SkipErr:
 14910                                  ;ENDIF
 14911 000021EE C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14912                                  	;mov	word [es:di+49h],-1
 14913 000021F2 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14914                                  					; no valid cluster here...
 14915 000021F8 59                      	pop	cx
 14916 000021F9 5F                      	pop	di
 14917 000021FA 07                      	pop	es
 14918                                  
 14919                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14920                                  
 14921                                  GotCDS:
 14922                                  
 14923                                  ; wfp_start points to the text. See if it is long enough
 14924                                  
 14925                                  	; MSDOS 3.3
 14926                                  	;push	ss
 14927                                  	;pop	ds
 14928                                  	;mov	si,[WFP_START]
 14929                                  	;push	cx
 14930                                  	;call	DStrLen
 14931                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14932                                  	;pop	cx
 14933                                  	;ja	short ChDirErrP
 14934                                  
 14935                                  	; MSDOS 6.0
 14936 000021FB E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14937 000021FE 77B2                    	JA	short ChDirErrP
 14938                                  	; MSDOS 3.3 & MSDOS 6.0
 14939                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14940                                  	; 17/12/2022
 14941 00002200 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14942 00002205 7512                    	JNZ	short SkipRecency
 14943                                  	; MSDOS 6.0
 14944                                  	;test	word [es:di+43h],2000h
 14945                                  	; 17/12/2022
 14946 00002207 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14947                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14948                                  					;PTM. for Join and Subst ;AN000;
 14949 0000220C 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14950 0000220E B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14951                                  setdirclus:
 14952                                  	;mov	[es:di+49h],cx
 14953 00002211 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14954 00002215 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14955                                  SkipRecency:
 14956 00002219 E8CBEF                  	call	FStrCpy
 14957 0000221C 30C0                    	XOR	AL,AL
 14958                                  mkdir_ok:
 14959 0000221E E91AE4                  	jmp	SYS_RET_OK
 14960                                  
 14961                                  ; 17/05/2019 - Retro DOS v4.0
 14962                                  
 14963                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14964                                  
 14965                                  ;BREAK <$MkDir - Make a directory entry>
 14966                                  ;---------------------------------------------------------------------------
 14967                                  ;
 14968                                  ; Procedure Name : $MkDir
 14969                                  ; Inputs:
 14970                                  ;	DS:DX Points to asciz name
 14971                                  ; Function:
 14972                                  ;	Make a new directory
 14973                                  ; Returns:
 14974                                  ;	STD XENIX Return
 14975                                  ;	AX = mkdir_path_not_found if path bad
 14976                                  ;	AX = mkdir_access_denied  If
 14977                                  ;		Directory cannot be created
 14978                                  ;		Node already exists
 14979                                  ;		Device name given
 14980                                  ;		Disk or directory(root) full
 14981                                  ;---------------------------------------------------------------------------
 14982                                  
 14983                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14984                                  
 14985                                  _$MKDIR:
 14986 00002221 BE[DA30]                	MOV	SI,DOS_MKDIR
 14987                                  DoDirCall:
 14988 00002224 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14989                                  
 14990 00002227 56                      	push	si
 14991 00002228 89D6                    	MOV	SI,DX			; get source
 14992 0000222A E84B49                  	call	TransPath		; go munge the path
 14993 0000222D 5E                      	pop	si
 14994 0000222E 7305                    	JNC	short MkDirCrack	; no errors, try path
 14995                                  MkErrP:
 14996 00002230 B003                    	MOV	AL,error_path_not_found	; oops!
 14997                                  MkErr:
 14998 00002232 E90FE4                  	jmp	SYS_RET_ERR
 14999                                  MkDirCrack:
 15000 00002235 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15001 0000223B 75F3                    	JNZ	short MkErrP
 15002                                  
 15003                                  	; MSDOS 3.3
 15004                                  	;push	ss
 15005                                  	;pop	ds
 15006                                  	;call	si
 15007                                  	;jb	short MkErr
 15008                                  	;;jmp	short mkdir_ok
 15009                                  	;jmp	SYS_RET_OK
 15010                                  
 15011                                  	; MSDOS 6.0
 15012 0000223D 56                      	PUSH	SI			;PTM.			;AN000;
 15013 0000223E E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15014 00002241 5E                      	POP	SI			;PTM.			;AN000;
 15015 00002242 7604                    	JBE	short pathok		;PTM.			;AN000;
 15016                                  	;mov	al,5
 15017 00002244 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15018                                  	;jmp	SYS_RET_ERR		;PTM.
 15019 00002246 EBEA                    	jmp	short MkErr
 15020                                  pathok:
 15021 00002248 FFD6                    	CALL	SI			; go get file
 15022 0000224A 72E6                    	JC	short MkErr		; no errors
 15023                                  	; 16/12/2022
 15024                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15025 0000224C EBD0                    	jmp	short mkdir_ok
 15026                                  	;jmp	SYS_RET_OK
 15027                                  
 15028                                  ;----------------------------------------------------------------------------
 15029                                  ;
 15030                                  ; Procedure Name : Check_PathLen
 15031                                  ;
 15032                                  ; Inputs:
 15033                                  ;	nothing
 15034                                  ; Function:
 15035                                  ;	check if final path length greater than 67
 15036                                  ; Returns:
 15037                                  ;	Above flag set if > 67
 15038                                  ;
 15039                                  ;---------------------------------------------------------------------------
 15040                                  
 15041                                  Check_PathLen:
 15042                                  	; 09/09/2018
 15043                                  	;mov	SI,[WFP_START]
 15044 0000224E 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15045                                  Check_PathLen2:
 15046 00002253 16                      	push	ss
 15047 00002254 1F                      	pop	ds
 15048                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15049 00002255 51                      	push	CX	
 15050 00002256 E8A5EF                  	CALL	DStrLen
 15051 00002259 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15052 0000225C 59                      	POP	CX
 15053 0000225D C3                      	retn
 15054                                  
 15055                                  ;============================================================================
 15056                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15057                                  ;============================================================================
 15058                                  ; 07/08/2018 - Retro DOS v3.0
 15059                                  ; 17/05/2019 - Retro DOS v4.0
 15060                                  
 15061                                  ;**	IOCTL system call.
 15062                                  ;----------------------------------------------------------------------------
 15063                                  ;	$IOCTL
 15064                                  ;
 15065                                  ;	  Revision history:
 15066                                  ;
 15067                                  ;		Created: ARR 4 April 1983
 15068                                  ;
 15069                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15070                                  ;
 15071                                  ;		A000	version 4.00	Jan. 1988
 15072                                  ;
 15073                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15074                                  ;
 15075                                  
 15076                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15077                                  ;---------------------------------------------------------------------------
 15078                                  ;
 15079                                  ;   Assembler usage:
 15080                                  ;	    MOV     BX, Handle
 15081                                  ;	    MOV     DX, Data
 15082                                  ;
 15083                                  ;	(or LDS     DX,BUF
 15084                                  ;	    MOV     CX,COUNT)
 15085                                  ;
 15086                                  ;	    MOV     AH, Ioctl
 15087                                  ;	    MOV     AL, Request
 15088                                  ;	    INT     21h
 15089                                  ;
 15090                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15091                                  ;	    attribute word in DX, handle in BX:
 15092                                  ;	    DH = high word of device driver attributes
 15093                                  ;	    DL = low byte of sf_flags
 15094                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15095                                  ;	    in BX.
 15096                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15097                                  ;	    into DS:DX.  Return number read in AX.
 15098                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15099                                  ;	    DS:DX.  Return bytes written in AX.
 15100                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15101                                  ;	    into DS:DX.  Return number read in AX.
 15102                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15103                                  ;	    DS:DX.  Return bytes written in AX.
 15104                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15105                                  ;	    device, AL = 0FFh, otherwise 0.
 15106                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15107                                  ;	    device, AL = 0FFh, otherwise 0.
 15108                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15109                                  ;	    removable media, 0 otherwise.
 15110                                  ;	 9  Return the contents of the device attribute word in DX for the
 15111                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15112                                  ;	    network. 8000h is the bit for local use.
 15113                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15114                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15115                                  ;	    the count and CX is the delay.
 15116                                  ;
 15117                                  ;   Error returns:
 15118                                  ;	    AX = error_invalid_handle
 15119                                  ;	       = error_invalid_function
 15120                                  ;	       = error_invalid_data
 15121                                  ;
 15122                                  ;-------------------------------------------------------------------------------
 15123                                  ;
 15124                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15125                                  ;   than the above
 15126                                  ;
 15127                                  ;	There are several basic forms of IOCTL calls:
 15128                                  ;
 15129                                  ;
 15130                                  ;	** Get/Set device information:	**
 15131                                  ;
 15132                                  ;	ENTRY	(AL) = function code
 15133                                  ;		  0 - Get device information
 15134                                  ;		  1 - Set device information
 15135                                  ;		(BX) = file handle
 15136                                  ;		(DX) = info for "Set Device Information"
 15137                                  ;	EXIT	'C' set if error
 15138                                  ;		  (AX) = error code
 15139                                  ;		'C' clear if OK
 15140                                  ;		  (DX) = info for "Get Device Information"
 15141                                  ;	USES	ALL
 15142                                  ;
 15143                                  ;
 15144                                  ;	**  Read/Write Control Data From/To Handle  **
 15145                                  ;
 15146                                  ;	ENTRY	(AL) = function code
 15147                                  ;		  2 - Read device control info
 15148                                  ;		  3 - Write device control info
 15149                                  ;		(BX) = file handle
 15150                                  ;		(CX) = transfer count
 15151                                  ;		(DS:DX) = address for data
 15152                                  ;	EXIT	'C' set if error
 15153                                  ;		  (AX) = error code
 15154                                  ;		'C' clear if OK
 15155                                  ;		  (AX) = count of bytes transfered
 15156                                  ;	USES	ALL
 15157                                  ;
 15158                                  ;
 15159                                  ;	**  Read/Write Control Data From/To Block Device  **
 15160                                  ;
 15161                                  ;	ENTRY	(AL) = function code
 15162                                  ;		  4 - Read device control info
 15163                                  ;		  5 - Write device control info
 15164                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15165                                  ;		(CX) = transfer count
 15166                                  ;		(DS:DX) = address for data
 15167                                  ;	EXIT	'C' set if error
 15168                                  ;		  (AX) = error code
 15169                                  ;		'C' clear if OK
 15170                                  ;		  (AX) = count of bytes transfered
 15171                                  ;	USES	ALL
 15172                                  ;
 15173                                  ;
 15174                                  ;	**  Get Input/Output Status  **
 15175                                  ;
 15176                                  ;	ENTRY	(AL) = function code
 15177                                  ;		  6 - Get Input status
 15178                                  ;		  7 - Get Output Status
 15179                                  ;		(BX) = file handle
 15180                                  ;	EXIT	'C' set if error
 15181                                  ;		  (AX) = error code
 15182                                  ;		'C' clear if OK
 15183                                  ;		  (AL) = 00 if not ready
 15184                                  ;		  (AL) = FF if ready
 15185                                  ;	USES	ALL
 15186                                  ;
 15187                                  ;
 15188                                  ;	**  Get Drive Information  **
 15189                                  ;
 15190                                  ;	ENTRY	(AL) = function code
 15191                                  ;		  8 - Check for removable media
 15192                                  ;		  9 - Get device attributes
 15193                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15194                                  ;	EXIT	'C' set if error
 15195                                  ;		  (AX) = error code
 15196                                  ;		'C' clear if OK
 15197                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15198                                  ;		  (DX) = device attribute word (func. 9)
 15199                                  ;	USES	ALL
 15200                                  ;
 15201                                  ;
 15202                                  ;	**  Get Redirected bit	**
 15203                                  ;
 15204                                  ;	ENTRY	(AL) = function code
 15205                                  ;		  0Ah - Network stuff
 15206                                  ;		(BX) = file handle
 15207                                  ;	EXIT	'C' set if error
 15208                                  ;		  (AX) = error code
 15209                                  ;		'C' clear if OK
 15210                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15211                                  ;	USES	ALL
 15212                                  ;
 15213                                  ;
 15214                                  ;	**  Change sharer retry parameters  **
 15215                                  ;
 15216                                  ;	ENTRY	(AL) = function code
 15217                                  ;		  0Bh - Set retry parameters
 15218                                  ;		(CX) = retry loop count
 15219                                  ;		(DX) = number of retries
 15220                                  ;	EXIT	'C' set if error
 15221                                  ;		  (AX) = error code
 15222                                  ;		'C' clear if OK
 15223                                  ;	USES	ALL
 15224                                  ;
 15225                                  ;
 15226                                  ;   =================================================================
 15227                                  ;
 15228                                  ;	**  New Standard Control  **
 15229                                  ;
 15230                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15231                                  ;	FORMS ARE OBSOLETE.
 15232                                  ;
 15233                                  ;   =================================================================
 15234                                  ;
 15235                                  ;	ENTRY	(AL) = function code
 15236                                  ;		  0Ch - Control Function subcode
 15237                                  ;		(BX) = File Handle
 15238                                  ;		(CH) = Category Indicator
 15239                                  ;		(CL) = Function within category
 15240                                  ;		(DS:DX) = address for data, if any
 15241                                  ;		(SI) = Passed to device as argument, use depends upon function
 15242                                  ;		(DI) = Passed to device as argument, use depends upon function
 15243                                  ;	EXIT	'C' set if error
 15244                                  ;		  (AX) = error code
 15245                                  ;		'C' clear if OK
 15246                                  ;		  (SI) = Return value, meaning is function dependent
 15247                                  ;		  (DI) = Return value, meaning is function dependent
 15248                                  ;		  (DS:DX) = Return address, use is function dependent
 15249                                  ;	USES	ALL
 15250                                  ;
 15251                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15252                                  ;     (See inc\ioctl.inc for more info)
 15253                                  ;
 15254                                  ;	ENTRY	(AL) = function code
 15255                                  ;		  0Dh - Control Function subcode
 15256                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15257                                  ;		(CH) = Category Indicator
 15258                                  ;		(CL) = Function within category
 15259                                  ;		(DS:DX) = address for data, if any
 15260                                  ;		(SI) = Passed to device as argument, use depends upon function
 15261                                  ;		(DI) = Passed to device as argument, use depends upon function
 15262                                  ;
 15263                                  ;	EXIT	'C' set if error
 15264                                  ;		  (AX) = error code
 15265                                  ;		'C' clear if OK
 15266                                  ;		  (DS:DX) = Return address, use is function dependent
 15267                                  ;	USES	ALL
 15268                                  ;
 15269                                  ;---------------------------------------------------------------------------
 15270                                  	
 15271                                  	; 17/05/2019 - Retro DOS v4.0
 15272                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15273                                  
 15274                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15275                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15276                                  
 15277                                  IOCTLJMPTABLE:	;label	word
 15278                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15279 0000225E [9A22]                  	dw	ioctl_getset_data	; 0
 15280 00002260 [9A22]                  	dw	ioctl_getset_data   	; 1
 15281 00002262 [EA22]                  	dw	ioctl_control_string	; 2
 15282 00002264 [EA22]                  	dw	ioctl_control_string	; 3
 15283 00002266 [3E24]                  	dw	ioctl_get_dev		; 4
 15284 00002268 [3E24]                  	dw	ioctl_get_dev		; 5
 15285 0000226A [0423]                  	dw	ioctl_status		; 6
 15286 0000226C [0423]                  	dw	ioctl_status		; 7
 15287 0000226E [A523]                  	dw	ioctl_rem_media		; 8
 15288 00002270 [E323]                  	dw	ioctl_drive_attr	; 9
 15289 00002272 [3024]                  	dw	ioctl_handle_redir	; A
 15290 00002274 [2023]                  	dw	Set_Retry_Parameters	; B
 15291 00002276 [2E23]                  	dw	GENERICIOCTLHANDLE	; C
 15292 00002278 [4523]                  	dw	GENERICIOCTL		; D
 15293                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15294 0000227A [EF24]                  	dw	ioctl_drive_owner	; E
 15295 0000227C [EF24]                  	dw	ioctl_drive_owner	; F
 15296                                  	; MSDOS 6.0
 15297 0000227E [2E23]                  	dw	query_handle_support	; 10h
 15298 00002280 [4523]                  	dw	query_device_support	; 11h
 15299                                  
 15300                                  	; 11/11/2022
 15301                                  _$IOCTL:
 15302 00002282 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15303 00002284 16                      	push	ss
 15304 00002285 1F                      	pop	ds			;hkn; SS is DOSDATA
 15305                                  
 15306                                  	; MSDOS 3.3
 15307                                  	;cmp	al,0Fh 
 15308                                  	; MSDOS 6.0
 15309 00002286 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15310 00002288 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15311                                  
 15312                                  	; 14/01/2024
 15313                                  	; 28/05/2019
 15314                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15315 0000228A 89C7                    	mov	di,ax			; di NOT a PARM
 15316 0000228C 81E7FF00                	and	di,0FFh			; di = al
 15317 00002290 D1E7                    	shl	di,1			; di = index into jmp table
 15318                                  	;pop	AX			; Restore AL for generic IOCTL
 15319                                  
 15320 00002292 2EFFA5[5E22]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15321                                  
 15322                                  ioctl_bad_funj2:
 15323 00002297 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15324                                  
 15325                                  ;--------------------------------------------------------------------------
 15326                                  ;
 15327                                  ; IOCTL: AL = 0,1
 15328                                  ;
 15329                                  ; ENTRY: DS = DOSDATA
 15330                                  ;
 15331                                  ;--------------------------------------------------------------------------
 15332                                  
 15333                                  ioctl_getset_data:
 15334                                  	; MSDOS 6.0
 15335 0000229A E8E043                  	call	SFFromHandle		; ES:DI -> SFT
 15336 0000229D 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15337                                  ioctl_bad_handle:
 15338                                  	;mov	al,6
 15339 0000229F B006                    	mov	al,error_invalid_handle
 15340                                  ioctl_error:
 15341 000022A1 E9A0E3                  	jmp	SYS_RET_ERR
 15342                                  
 15343                                  ioctl_check_permissions:
 15344 000022A4 3C00                    	CMP	AL,0
 15345                                  	;mov	al,[es:di+5]
 15346 000022A6 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15347 000022AA 741B                    	JZ	short ioctl_read	; read the byte
 15348                                  
 15349 000022AC 08F6                    	or	dh,dh
 15350 000022AE 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15351                                  	;mov	al,0Dh
 15352 000022B0 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15353                                  	;jmp	SYS_RET_ERR
 15354 000022B2 EBED                    	jmp	short ioctl_error
 15355                                  
 15356                                  ioctl_check_device:
 15357 000022B4 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15358 000022B6 74DF                    	jz	short ioctl_bad_funj2
 15359 000022B8 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15360                                  					;   device bit!! He can muck with the
 15361                                  					;   others at will.
 15362 000022BB C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15363 000022C0 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15364                                  ioctl_ok:
 15365 000022C4 E974E3                  	jmp	SYS_RET_OK
 15366                                  
 15367                                  ioctl_read:
 15368 000022C7 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15369 000022CC 30E4                    	XOR	AH,AH
 15370 000022CE A880                    	test	AL,devid_device 	; Should I set high byte
 15371 000022D0 740D                    	JZ	short ioctl_no_high	; no
 15372 000022D2 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15373                                  	;les	di,[es:di+7]
 15374 000022D7 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15375                                  	;mov	ah,[es:di+5]
 15376 000022DB 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15377                                  ioctl_no_high:
 15378 000022DF 89C2                    	MOV	DX,AX
 15379                                  ioctl_set_dx:	; 16/12/2022
 15380 000022E1 E8A1E1                  	call	Get_User_Stack
 15381                                  	;mov	[si+6],dx
 15382 000022E4 895406                  	MOV	[SI+user_env.user_DX],DX
 15383                                  	;;jmp	SYS_RET_OK
 15384                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15385                                  ioctl_ok_j:
 15386                                  	; 16/12/2022
 15387 000022E7 E954E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15388                                  	;jmp	short ioctl_ok
 15389                                  	; 26/07/2019
 15390                                  	;jmp	SYS_RET_OK_clc
 15391                                  
 15392                                  ;--------------------------------------------------------------------------
 15393                                  ;
 15394                                  ; IOCTL: AL = 2,3
 15395                                  ;
 15396                                  ; ENTRY: DS = DOSDATA
 15397                                  ;	 SI = user's DS
 15398                                  ;
 15399                                  ;--------------------------------------------------------------------------
 15400                                  
 15401                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15402                                  ioctl_control_string:
 15403 000022EA E89043                  	call	SFFromHandle		; ES:DI -> SFT
 15404 000022ED 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15405                                  	; 07/12/2022
 15406                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15407                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15408                                  	; MSDOS 5.0 & MSDOS 6.0
 15409 000022EF 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15410 000022F4 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15411 000022F6 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15412 000022FB 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15413 000022FF 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15414 00002301 E94201                  	JMP	ioctl_do_string
 15415                                  
 15416                                  ;--------------------------------------------------------------------------
 15417                                  ;
 15418                                  ; IOCTL: AL = 6,7
 15419                                  ;
 15420                                  ; ENTRY: DS = DOSDATA
 15421                                  ;
 15422                                  ;--------------------------------------------------------------------------
 15423                                  
 15424                                  ioctl_status:
 15425 00002304 B401                    	MOV	AH,1
 15426 00002306 2C06                    	SUB	AL,6			; 6=0,7=1
 15427 00002308 7402                    	JZ	short ioctl_get_status
 15428 0000230A B403                    	MOV	AH,3
 15429                                  ioctl_get_status:
 15430 0000230C 50                      	PUSH	AX
 15431 0000230D E85013                  	call	GET_IO_SFT
 15432 00002310 58                      	POP	AX
 15433                                  	;JNC	short DO_IOFUNC
 15434                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15435                                  	; 16/12/2022
 15436 00002311 728C                    	jc	short ioctl_bad_handle
 15437                                  DO_IOFUNC:
 15438 00002313 E89021                  	call	IOFUNC
 15439 00002316 88C4                    	MOV	AH,AL
 15440 00002318 B0FF                    	MOV	AL,0FFH
 15441 0000231A 7502                    	JNZ	short ioctl_status_ret
 15442 0000231C FEC0                    	INC	AL
 15443                                  ioctl_status_ret:
 15444                                  	;jmp	SYS_RET_OK
 15445                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15446                                  	;jmp	short ioctl_ok_j
 15447                                  	; 16/12/2022
 15448 0000231E EBA4                    	jmp	short ioctl_ok
 15449                                  
 15450                                  ;--------------------------------------------------------------------------
 15451                                  ;
 15452                                  ; IOCTL: AL = B
 15453                                  ;
 15454                                  ; ENTRY: DS = DOSDATA
 15455                                  ;
 15456                                  ;--------------------------------------------------------------------------
 15457                                  
 15458                                  Set_Retry_Parameters:
 15459                                  	; 09/09/2018
 15460 00002320 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15461 00002324 09D2                    	OR	DX,DX			; zero retries not allowed
 15462 00002326 7475                    	JZ	short ioctl_bad_fun
 15463 00002328 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15464                                  doneok:
 15465                                  	;jmp	SYS_RET_OK		; Done
 15466                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15467                                  	;jmp	short ioctl_status_ret
 15468                                  	; 16/12/2022
 15469 0000232C EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15470                                  
 15471                                  ;--------------------------------------------------------------------------
 15472                                  ;
 15473                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15474                                  ;
 15475                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15476                                  ;	SI:DX -> Users Device Parameter Table
 15477                                  ;	IOCALL -> IOCTL_Req structure
 15478                                  ;
 15479                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15480                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15481                                  ;	call.
 15482                                  ;
 15483                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15484                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15485                                  ;         return address off the stack if the drive is invalid.
 15486                                  ;
 15487                                  ;--------------------------------------------------------------------------
 15488                                  
 15489                                  query_handle_support:	; Entry point for handles
 15490                                  GENERICIOCTLHANDLE:
 15491 0000232E E84C43                  	call	SFFromHandle		; Get SFT for device.
 15492 00002331 726F                    	jc	short ioctl_bad_handlej
 15493                                  
 15494                                  	;test	word [es:di+5],8000h
 15495                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15496                                  	;test	byte [es:di+6],80h
 15497 00002333 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15498 00002338 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15499                                  
 15500 0000233A C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15501                                  	;les	di,[es:di+7]
 15502 0000233F 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15503 00002343 EB0F                    	jmp	short Do_GenIOCTL
 15504                                  
 15505                                  query_device_support:	; Entry point for devices:
 15506                                  GENERICIOCTL:
 15507 00002345 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15508 0000234A 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15509 0000234D 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15510                                  
 15511 0000234F E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15512 00002352 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15513                                  
 15514                                  Do_GenIOCTL:
 15515                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15516                                  					; Can device handle Generic IOCTL funcs
 15517                                  	; 09/09/2018
 15518                                  	;test	byte [es:di+4],40h
 15519 00002354 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15520 00002359 7442                    	jz	short ioctl_bad_fun
 15521                                  
 15522                                  	; 17/05/2019 - Retro DOS v4.0
 15523                                  
 15524                                  	; MSDOS 6.0
 15525                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15526 0000235B C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15527                                  	;cmp	al,10h
 15528 00002360 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15529 00002362 7C0C                    	jl	short SetIOCtlBlock
 15530                                  	
 15531                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15532                                  	;test	byte [es:di+4],80h 
 15533 00002364 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15534 00002369 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15535                                  	;
 15536                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15537 0000236B C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15538                                  
 15539                                  SetIOCtlBlock:
 15540 00002370 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15541 00002371 57                      	PUSH	DI			; in DS:SI
 15542                                  					; Setup Generic IOCTL Request Block
 15543                                  	;mov	byte [IOCALL_REQLEN],23
 15544 00002372 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15545                                  	; 07/09/2018 (MSDOS 3.3)
 15546                                  	;;mov	byte [IOCALL_REQFUNC],19
 15547                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15548                                  	;
 15549 00002377 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15550 0000237B 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15551 0000237F 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15552 00002383 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15553 00002387 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15554 0000238B 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15555 0000238F 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15556                                  
 15557                                  ;hkn; IOCALL is in DOSDATA
 15558 00002393 BB[7C03]                	MOV	BX,IOCALL
 15559                                  
 15560 00002396 16                      	PUSH	SS
 15561 00002397 07                      	POP	ES
 15562                                  					; DS:SI -> Device header.
 15563 00002398 5E                      	POP	SI
 15564 00002399 1F                      	POP	DS
 15565                                  	; 10/08/2018
 15566 0000239A E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15567                                  
 15568                                  ioctl_bad_fun:
 15569 0000239D B001                    	mov	al, error_invalid_function  ; 1
 15570 0000239F E9A2E2                  	jmp	SYS_RET_ERR	
 15571                                  
 15572                                  ioctl_bad_handlej:
 15573 000023A2 E9FAFE                  	jmp	ioctl_bad_handle
 15574                                  
 15575                                  ;---------------------------------------------------------------------------
 15576                                  ;
 15577                                  ; IOCTL: AL = 8
 15578                                  ;
 15579                                  ; ENTRY: DS = DOSDATA
 15580                                  ;
 15581                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15582                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15583                                  ;         return address off the stack if the drive is invalid.
 15584                                  ;
 15585                                  ;-------------------------------------------------------------------------
 15586                                  
 15587                                  ioctl_rem_media:
 15588                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15589 000023A5 E82B01                  	CALL	Check_If_Net
 15590 000023A8 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15591                                  					;   certainly don't know how to do this
 15592                                  					;   call.
 15593                                  	;test	word [es:di+4],800h
 15594                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15595                                  	;test	byte [es:di+5],8
 15596 000023AA 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15597 000023AF 74EC                    	JZ	short ioctl_bad_fun		; NO
 15598                                  
 15599                                  ;hkn; SS override for IOCALL
 15600 000023B1 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15601 000023B7 B00D                    	MOV	AL,REMHL  ; 13
 15602 000023B9 88DC                    	MOV	AH,BL			; Unit number
 15603 000023BB 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15604 000023BF 31C0                    	XOR	AX,AX
 15605 000023C1 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15606 000023C5 06                      	PUSH	ES
 15607 000023C6 1F                      	POP	DS
 15608 000023C7 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15609 000023C9 16                      	PUSH	SS
 15610 000023CA 07                      	POP	ES
 15611                                  
 15612                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15613 000023CB BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15614 000023CE 1E                      	push	ds
 15615 000023CF 56                      	push	si
 15616 000023D0 E8A822                  	call	DEVIOCALL2
 15617 000023D3 5E                      	pop	si
 15618 000023D4 1F                      	pop	ds
 15619                                  
 15620                                  ;hkn; SS override
 15621 000023D5 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15622 000023D9 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15623 000023DC B109                    	MOV	CL,9
 15624 000023DE D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15625                                  ioctl_da_ok_j:	; 11/11/2022
 15626 000023E0 E958E2                  	jmp	SYS_RET_OK
 15627                                  
 15628                                  ;-------------------------------------------------------------------------
 15629                                  ;
 15630                                  ; IOCTL: AL = 9
 15631                                  ;
 15632                                  ; ENTRY: DS = DOSDATA
 15633                                  ;
 15634                                  ;-------------------------------------------------------------------------
 15635                                  
 15636                                  ioctl_drive_attr:
 15637                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15638 000023E3 88D8                    	mov	al,bl
 15639 000023E5 E8B946                  	call	GETTHISDRV
 15640 000023E8 7241                    	jc	short ioctl_drv_err
 15641 000023EA E8B800                  	call	Get_Driver_BL
 15642                                  	; MSDOS 6.0
 15643 000023ED 723C                    	JC	short ioctl_drv_err	; drive not valid
 15644                                  
 15645                                  	;mov	dx,[es:di+4]
 15646 000023EF 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15647                                  					; get device attribute word
 15648 000023F3 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15649                                  
 15650                                  ;hkn; SS override
 15651 000023F5 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15652                                  	;test	word [es:di+43h],8000h
 15653                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15654                                  	;test	byte [es:di+44h],80h
 15655 000023FA 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15656 000023FF 7403                    	JZ	short IOCTLShare
 15657                                  
 15658                                  	;or	dx,1000h ; (MSDOS 3.3)
 15659                                  
 15660                                  ;	Net devices don't return a device attribute word.
 15661                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15662                                  
 15663 00002401 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15664                                  IOCTLShare:
 15665 00002404 16                      	push	ss
 15666 00002405 1F                      	pop	ds
 15667 00002406 BE[BE03]                	MOV	SI,OPENBUF
 15668 00002409 80C341                  	ADD	BL,"A"	; 41h
 15669 0000240C 881C                    	MOV	[SI],BL
 15670 0000240E C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15671 00002413 B80003                  	MOV	AX,0300h
 15672 00002416 F8                      	CLC
 15673                                  	;INT	int_IBM
 15674 00002417 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15675                                  			; DS:SI -> ASCIZ disk device name 
 15676                                  			; (may be full path or only drive
 15677                                  			; specifier--must include the colon)
 15678                                  			; Return: CF clear if absolute disk access allowed
 15679 00002419 7303                    	JNC	short IOCTLLocal	; Not shared
 15680                                  	;OR	DX,0200H		; Shared, bit 9
 15681                                  	; 17/12/2022
 15682 0000241B 80CE02                  	or	dh,02h
 15683                                  IOCTLLocal:
 15684                                  	;test	word [es:di+43h],1000h
 15685                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15686                                  	;test	byte [es:di+44h],10h
 15687 0000241E 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15688                                  	;JZ	short ioctl_set_DX
 15689                                  	; 16/12/2022
 15690 00002423 7403                    	jz	short _ioctl_set_DX
 15691                                  	;OR	DX,8000h
 15692                                  	; 17/12/2022
 15693 00002425 80CE80                  	or	dh,80h
 15694                                  ;ioctl_set_DX:
 15695                                  _ioctl_set_DX:
 15696                                  	; 16/12/2022
 15697 00002428 E9B6FE                  	jmp	ioctl_set_dx
 15698                                  ; 16/12/2022
 15699                                  %if 0	
 15700                                  	call	Get_User_Stack
 15701                                  	MOV	[SI+user_env.user_DX],DX
 15702                                  	;;jmp	SYS_RET_OK
 15703                                  	;; 25/06/2019
 15704                                  	;jmp	SYS_RET_OK_clc
 15705                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15706                                  ioctl_gd_ok_j:
 15707                                  	jmp	short ioctl_da_ok_j
 15708                                  %endif
 15709                                  
 15710                                  ioctl_drv_err:
 15711 0000242B B00F                    	mov	al,error_invalid_drive ; 0Fh
 15712                                  ioctl_gd_err_j:	; 11/11/2022
 15713 0000242D E914E2                  	jmp	SYS_RET_ERR
 15714                                  
 15715                                  ;--------------------------------------------------------------------------
 15716                                  ;
 15717                                  ; IOCTL: AL = A
 15718                                  ;
 15719                                  ; ENTRY: DS = DOSDATA
 15720                                  ;
 15721                                  ;--------------------------------------------------------------------------
 15722                                  
 15723                                  ioctl_handle_redir:
 15724 00002430 E84A42                  	call	SFFromHandle		; ES:DI -> SFT
 15725 00002433 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15726 00002435 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15727                                  
 15728                                  ioctl_got_sft:
 15729                                  	;mov	dx,[es:di+5]
 15730 00002438 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15731                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15732                                  	; 16/12/2022
 15733 0000243C EBEA                    	jmp	short _ioctl_set_DX
 15734                                  
 15735                                  	; 16/12/2022
 15736                                  ;ioctl_bad_funj:
 15737                                  	;JMP	ioctl_bad_fun
 15738                                  
 15739                                  ;--------------------------------------------------------------------------
 15740                                  ;
 15741                                  ; IOCTL: AL= 4,5
 15742                                  ;
 15743                                  ; ENTRY: DS = DOSDATA
 15744                                  ;	 SI = user's DS
 15745                                  ;
 15746                                  ;
 15747                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15748                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15749                                  ;         return address off the stack if the drive is invalid.
 15750                                  ;
 15751                                  ;-------------------------------------------------------------------------
 15752                                  
 15753                                  ioctl_get_dev:
 15754 0000243E E89200                  	CALL	Check_If_Net
 15755                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15756                                  					; certainly don't know how to do this
 15757                                  					; call.
 15758                                  	; 16/12/2022
 15759 00002441 7403                    	jz	short ioctl_do_string
 15760                                  ioctl_bad_funj:
 15761 00002443 E957FF                  	JMP	ioctl_bad_fun
 15762                                  
 15763                                  ioctl_do_string:
 15764                                  	;test	word [es:di+4],4000h
 15765                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15766                                  	;test	byte [es:di+5],40h
 15767 00002446 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15768 0000244B 74F6                    	JZ	short ioctl_bad_funj		; NO
 15769                                  					; assume IOCTL read
 15770 0000244D C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15771                                  
 15772 00002452 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15773 00002454 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15774                                  
 15775                                  					; it is an IOCTL write
 15776 00002456 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15777                                  
 15778                                  ioctl_control_call:
 15779 0000245B B016                    	MOV	AL,DRDWRHL ; 22
 15780                                  ioctl_setup_pkt:
 15781 0000245D 88DC                    	MOV	AH,BL			; Unit number
 15782 0000245F A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15783 00002462 31C0                    	XOR	AX,AX
 15784 00002464 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15785 00002467 A2[8903]                	MOV	[IOMED],AL
 15786 0000246A 890E[8E03]              	MOV	[IOSCNT],CX
 15787 0000246E 8916[8A03]              	MOV	[IOXAD],DX
 15788 00002472 8936[8C03]              	MOV	[IOXAD+2],SI
 15789 00002476 06                      	PUSH	ES
 15790 00002477 1F                      	POP	DS
 15791 00002478 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15792 0000247A 16                      	PUSH	SS
 15793 0000247B 07                      	POP	ES
 15794                                  
 15795 0000247C BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15796                                  ioctl_do_IO:
 15797 0000247F E8F921                  	call	DEVIOCALL2
 15798                                  
 15799                                  ;hkn; SS override for IOCALL
 15800                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15801                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15802                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15803 00002482 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15804 00002488 7507                    	JNZ	short ioctl_string_err
 15805                                  
 15806                                  ;hkn; SS override
 15807 0000248A 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15808                                  	; 16/12/2022
 15809 0000248E E9AAE1                  	jmp	SYS_RET_OK
 15810                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15811                                  	;jmp	short ioctl_gd_ok_j
 15812                                  
 15813                                  ioctl_string_err:
 15814 00002491 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15815                                  device_err:
 15816 00002496 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15817 0000249A 89F8                    	MOV	AX,DI
 15818 0000249C E86B30                  	call	SET_I24_EXTENDED_ERROR
 15819                                  
 15820                                  ;hkn; use SS override
 15821                                  ;hkn;	mov	ax,[CS:EXTERR]
 15822 0000249F 36A1[2403]              	mov	ax,[SS:EXTERR]
 15823                                  	;jmp	SYS_RET_ERR
 15824                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15825 000024A3 EB88                    	jmp	short ioctl_gd_err_j
 15826                                  
 15827                                  ; 17/05/2019 - Retro DOS v4.0
 15828                                  
 15829                                  ;--------------------------------------------------------------------------
 15830                                  ; Proc name : Get_Driver_BL
 15831                                  ;
 15832                                  ;	DS is DOSDATA
 15833                                  ;	BL is drive number (0=default)
 15834                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15835                                  ;	No regs modified
 15836                                  ;
 15837                                  ;---------------------------------------------------------------------------
 15838                                  
 15839                                  Get_Driver_BL:
 15840 000024A5 50                      	PUSH	AX
 15841 000024A6 88D8                    	MOV	AL,BL			; Drive
 15842 000024A8 E8F645                  	call	GETTHISDRV
 15843 000024AB 7224                    	jc	short ioctl_bad_drv
 15844 000024AD 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15845 000024AF C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15846 000024B4 C43E[A205]              	LES	DI,[THISCDS]
 15847                                  	;test	word [es:di+43h],8000h
 15848                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15849                                  	;test	byte [es:di+44h],80h
 15850 000024B8 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15851                                  	;les	di,[es:di+45h]
 15852 000024BD 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15853 000024C1 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15854 000024C3 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15855                                  	;mov	bl,[es:di+1]
 15856 000024C8 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15857                                  	;les	di,[es:di+13h]
 15858 000024CC 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15859                                  got_dev_ptr:
 15860 000024D0 F8                      	CLC
 15861                                  ioctl_bad_drv:
 15862 000024D1 58                      	POP	AX
 15863 000024D2 C3                      	retn
 15864                                  
 15865                                  ;-------------------------------------------------------------------------
 15866                                  ; Proc Name : Check_If_Net:
 15867                                  ;
 15868                                  ;
 15869                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15870                                  ; If no device is found, the return address is popped off the stack, and a
 15871                                  ; jump is made to ioctl_drv_err.
 15872                                  ;
 15873                                  ; On Entry:
 15874                                  ; Registers same as those for Get_Driver_BL
 15875                                  ;
 15876                                  ; On Exit:
 15877                                  ; ZERO flag	- set if not a net device
 15878                                  ;		- reset if net device
 15879                                  ; ES:DI -> the device
 15880                                  ;
 15881                                  ;
 15882                                  ; BUGBUG: This function assumes the following stack setup on entry
 15883                                  ;
 15884                                  ;	  SP+2 -> Error return address
 15885                                  ;	  SP   -> Normal return address
 15886                                  ;
 15887                                  ;-------------------------------------------------------------------------
 15888                                  
 15889                                  Check_If_Net:
 15890                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15891 000024D3 E8CFFF                  	CALL	Get_Driver_BL
 15892 000024D6 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15893 000024D8 06                      	PUSH	ES
 15894 000024D9 57                      	PUSH	DI
 15895 000024DA C43E[A205]              	LES	DI,[THISCDS]
 15896                                  	;test	word [es:di+43h],8000h
 15897                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15898                                  	;test	byte [es:di+44h],80h
 15899 000024DE 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15900 000024E3 5F                      	POP	DI
 15901 000024E4 07                      	POP	ES
 15902 000024E5 C3                      	retn
 15903                                  
 15904                                  ioctl_drv_err_pop:
 15905 000024E6 58                      	pop	ax			; pop off return address
 15906 000024E7 E941FF                  	jmp	ioctl_drv_err
 15907                                  
 15908                                  ioctl_bad_funj3:
 15909 000024EA E9B0FE                  	jmp	ioctl_bad_fun
 15910                                  
 15911                                  ioctl_string_errj:
 15912 000024ED EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15913                                  
 15914                                  ;--------------------------------------------------------------------------
 15915                                  ;
 15916                                  ; IOCTL: AL = E, F
 15917                                  ;
 15918                                  ; ENTRY: DS = DOSDATA
 15919                                  ;
 15920                                  ;
 15921                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15922                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15923                                  ;         return address off the stack if the drive is invalid.
 15924                                  ;
 15925                                  ;--------------------------------------------------------------------------
 15926                                  
 15927                                  ioctl_drive_owner:
 15928                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15929 000024EF E8E1FF                  	Call	Check_If_Net
 15930 000024F2 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15931                                  					;   certainly don't know how to do this
 15932                                  					;   call.
 15933                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15934                                  	; 09/09/2018
 15935                                  	;test	byte [es:di+4],40h
 15936 000024F4 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15937 000024F9 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15938                                  	;mov	byte [IOCALL_REQFUNC],23
 15939 000024FB C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15940 00002500 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15941 00002502 7405                    	jz	short GetOwner
 15942                                  SetOwner:
 15943 00002504 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15944                                  GetOwner:
 15945 00002509 B00D                    	MOV	AL,OWNHL ; 13
 15946 0000250B 88DC                    	MOV	AH,BL			; Unit number
 15947 0000250D A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15948 00002510 31C0                    	XOR	AX,AX
 15949 00002512 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15950 00002515 06                      	PUSH	ES
 15951 00002516 1F                      	POP	DS
 15952 00002517 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15953 00002519 16                      	PUSH	SS
 15954 0000251A 07                      	POP	ES
 15955 0000251B BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15956 0000251E 1E                      	push	ds
 15957 0000251F 56                      	push	si
 15958 00002520 E85821                  	call	DEVIOCALL2
 15959 00002523 5E                      	pop	si
 15960 00002524 1F                      	pop	ds
 15961                                  ;hkn; SS override
 15962                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15963                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15964 00002525 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15965 0000252B 75C0                    	jnz	short ioctl_string_errj
 15966 0000252D 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15967                                  					; owner returned is 1-based.
 15968 00002531 E907E1                  	jmp	SYS_RET_OK
 15969                                  
 15970                                  ;============================================================================
 15971                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15972                                  ;============================================================================
 15973                                  ; 07/08/2018 - Retro DOS v3.0
 15974                                  ; 17/05/2019 - Retro DOS v4.0
 15975                                  
 15976                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15977                                  ;	NAME	DOS_DELETE
 15978                                  
 15979                                  ;
 15980                                  ;	Microsoft Confidential
 15981                                  ;	Copyright (C) Microsoft Corporation 1991
 15982                                  ;	All Rights Reserved.
 15983                                  ;
 15984                                  
 15985                                  ;**	DELETE.ASM - Low level routine for deleting files
 15986                                  ;----------------------------------------------------------------------------
 15987                                  ;		DOS_DELETE
 15988                                  ;		REN_DEL_Check
 15989                                  ;		FastOpen_Delete	       ; DOS 3.3
 15990                                  ;		FastOpen_Update	       ; DOS 3.3
 15991                                  
 15992                                  ;   Revision history:
 15993                                  ;
 15994                                  ;   A000  version 4.00	Jan. 1988
 15995                                  ;   A001  Fastopen Rename fix	April 1989
 15996                                  
 15997                                  ;Installed = TRUE
 15998                                  
 15999                                  ;	i_need	NoSetDir,BYTE
 16000                                  ;	i_need	Creating,BYTE
 16001                                  ;	i_need	DELALL,BYTE
 16002                                  ;	i_need	THISDPB,DWORD
 16003                                  ;	i_need	THISSFT,DWORD
 16004                                  ;	i_need	THISCDS,DWORD
 16005                                  ;	i_need	CURBUF,DWORD
 16006                                  ;	i_need	ATTRIB,BYTE
 16007                                  ;	i_need	SATTRIB,BYTE
 16008                                  ;	i_need	WFP_START,WORD
 16009                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16010                                  ;	i_need	NAME1,BYTE			 ;BN001
 16011                                  ;	i_need	FoundDel,BYTE
 16012                                  ;	i_need	AUXSTACK,BYTE
 16013                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16014                                  ;	i_need	JShare,DWORD
 16015                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16016                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16017                                  ;
 16018                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16019                                  ;
 16020                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16021                                  ;	i_need	DMAADD,DWORD
 16022                                  ;	i_need	RENAMEDMA,BYTE
 16023                                  
 16024                                  ;----------------------------------------------------------------------------
 16025                                  ;
 16026                                  ; Procedure Name : DOS_DELETE
 16027                                  ;
 16028                                  ; Inputs:
 16029                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16030                                  ;		terminated)
 16031                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16032                                  ;		( = -1 if current dir not involved, else
 16033                                  ;		 Points to first char after last "/" of current dir part)
 16034                                  ;	[THISCDS] Points to CDS being used
 16035                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16036                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16037                                  ; Function:
 16038                                  ;	Delete the specified file(s)
 16039                                  ; Outputs:
 16040                                  ;	CARRY CLEAR
 16041                                  ;		OK
 16042                                  ;	CARRY SET
 16043                                  ;	    AX is error code
 16044                                  ;		error_file_not_found
 16045                                  ;			Last element of path not found
 16046                                  ;		error_path_not_found
 16047                                  ;			Bad path (not in curr dir part if present)
 16048                                  ;		error_bad_curr_dir
 16049                                  ;			Bad path in current directory part of path
 16050                                  ;		error_access_denied
 16051                                  ;			Attempt to delete device or directory
 16052                                  ;		***error_sharing_violation***
 16053                                  ;			Deny both access required, generates an INT 24.
 16054                                  ;			This error is NOT returned. The INT 24H is generated,
 16055                                  ;			  and the file is ignored (not deleted). Delete will
 16056                                  ;			  simply continue on looking for more files.
 16057                                  ;			  Carry will NOT be set in this case.
 16058                                  ; DS preserved, others destroyed
 16059                                  ;
 16060                                  ;----------------------------------------------------------------------------
 16061                                  
 16062                                  FILEFOUND   equ 01h
 16063                                  FILEDELETED equ 10h
 16064                                  
 16065                                  
 16066                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16067                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16068                                  
 16069                                  DOS_DELETE:
 16070                                  
 16071                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16072                                  ;hkn; appropriately at this point.
 16073                                  
 16074 00002534 E819ED                  	call	TestNet
 16075 00002537 7306                    	JNC	short LOCAL_DELETE
 16076                                  
 16077                                  ;IF NOT Installed
 16078                                  ;	transfer NET_DELETE
 16079                                  ;ELSE
 16080                                  	;MOV	AX,(MultNET SHL 8) | 19
 16081                                  	;INT	2FH
 16082                                  	;return
 16083                                  
 16084 00002539 B81311                  	mov	ax,1113h
 16085 0000253C CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16086                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16087                                  			;		fully-qualified filename in DOS CS
 16088                                  			; SDA CDS pointer -> current directory structure for drive with file
 16089                                  			; Return: CF set on error
 16090 0000253E C3                      	retn
 16091                                  ;ENDIF
 16092                                  
 16093                                  LOCAL_DELETE:
 16094 0000253F C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16095 00002544 E8CBED                  	call	ECritDisk
 16096                                  	;mov	word [CREATING],0E500h
 16097 00002547 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16098 0000254D 8B36[B205]              	MOV	SI,[WFP_START]
 16099                                  SKPNUL:
 16100 00002551 AC                      	LODSB
 16101 00002552 08C0                    	OR	AL,AL
 16102 00002554 75FB                    	JNZ	short SKPNUL		; go to end
 16103 00002556 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16104 00002559 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16105 0000255D 7506                    	JNZ	short TEST_QUEST
 16106 0000255F 807C022A                	CMP	BYTE [SI+2],"*"
 16107 00002563 741F                    	JZ	short CHECK_ATTS
 16108                                  TEST_QUEST:
 16109 00002565 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16110 00002568 87FE                    	XCHG	DI,SI
 16111                                  
 16112 0000256A 16                      	push	ss
 16113                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16114 0000256B 07                      	pop	es ; 17/05/2019
 16115                                  
 16116 0000256C B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16117 0000256F B90400                  	MOV	CX,4		; four sets of "??"
 16118 00002572 F3AF                    	REPE	SCASW
 16119 00002574 751C                    	JNZ	short NOT_ALL
 16120 00002576 87FE                    	XCHG	DI,SI
 16121 00002578 AD                      	LODSW
 16122 00002579 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16123 0000257C 7514                    	JNZ	short NOT_ALL
 16124 0000257E AD                      	LODSW
 16125 0000257F 3D3F3F                  	CMP	AX,"??"
 16126 00002582 750E                    	JNZ	short NOT_ALL
 16127                                  CHECK_ATTS:
 16128 00002584 A0[6D05]                	MOV	AL,[SATTRIB]
 16129                                  	;and	al,1Fh
 16130 00002587 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16131                                  					; Look only at hidden bits
 16132                                  	;cmp	al,1Fh
 16133 00002589 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16134                                  					; All must be set
 16135 0000258B 7505                    	JNZ	short NOT_ALL
 16136                                  
 16137                                  ; NOTE WARNING DANGER-----
 16138                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16139                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16140                                  
 16141 0000258D C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16142                                  NOT_ALL:
 16143 00002592 C606[4C03]01            	MOV	byte [NoSetDir],1
 16144 00002597 E89519                  	call	GetPathNoSet
 16145 0000259A 7312                    	JNC	short Del_found
 16146 0000259C 750B                    	JNZ	short _bad_path
 16147 0000259E 08C9                    	OR	CL,CL
 16148 000025A0 7407                    	JZ	short _bad_path
 16149                                  No_file:
 16150 000025A2 B80200                  	MOV	AX,error_file_not_found
 16151                                  ErrorReturn:
 16152 000025A5 F9                      	STC
 16153                                  	;call	LCritDisk
 16154                                  	;retn
 16155                                  	; 18/12/2022
 16156 000025A6 E984ED                  	jmp	LCritDisk
 16157                                  
 16158                                  _bad_path:
 16159 000025A9 B80300                  	MOV	AX,error_path_not_found
 16160 000025AC EBF7                    	JMP	short ErrorReturn
 16161                                  
 16162                                  Del_found:
 16163 000025AE 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16164 000025B0 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16165 000025B5 7405                    	JZ	short NOT_DIR
 16166                                  Del_access_err:
 16167 000025B7 B80500                  	MOV	AX,error_access_denied
 16168 000025BA EBE9                    	JMP	short ErrorReturn
 16169                                  
 16170                                  NOT_DIR:
 16171 000025BC 08E4                    	OR	AH,AH			; Check if device name
 16172 000025BE 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16173                                  
 16174                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16175                                  
 16176                                  DELFILE:
 16177 000025C0 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16178                                  
 16179                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16180                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16181                                  
 16182 000025C5 1E                      	PUSH	DS
 16183 000025C6 8A26[7F05]              	MOV	AH,[DELALL]
 16184 000025CA C53E[E205]              	LDS	DI,[CURBUF]
 16185                                  	
 16186                                  ;hkn; SS override
 16187 000025CE 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16188 000025D4 7509                    	JNZ	short DoDelete		; yes
 16189                                  
 16190 000025D6 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16191 000025DA 7403                    	JZ	short DoDelete		; not read only
 16192                                  
 16193 000025DC 1F                      	POP	DS
 16194 000025DD EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16195                                  
 16196                                  DoDelete:
 16197 000025DF E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16198 000025E2 7303                    	JNC	short DEL_SHARE_OK
 16199 000025E4 1F                      	POP	DS
 16200 000025E5 EB2A                    	JMP	SHORT DELNXT		; Skip it
 16201                                  
 16202                                  DEL_SHARE_OK:
 16203                                  	; 17/05/2019 - Retro DOS v4.0
 16204                                  	; MSDOS 6.0
 16205                                  	;test	byte [di+5],40h
 16206 000025E7 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16207                                  					;LB. if already dirty		  ;AN000;
 16208 000025EB 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16209 000025ED E86C35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16210                                  	;or	byte [di+5],40h
 16211 000025F0 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16212                                  yesdirty:
 16213 000025F4 8827                    	mov	[bx],ah 
 16214                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16215 000025F6 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16216 000025F8 1F                      	POP	DS
 16217 000025F9 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16218                                  
 16219 000025FE 83FB02                  	CMP	BX,2
 16220 00002601 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16221                                  	;cmp	bx,[es:bp+0Dh]
 16222 00002603 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16223 00002607 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16224                                  
 16225 00002609 E8BE28                  	call	RELEASE 		; Free file data
 16226 0000260C 7252                    	JC	short No_fileJ
 16227                                  
 16228                                  ; DOS 3.3  FastOpen
 16229                                  
 16230 0000260E E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16231                                  
 16232                                  ; DOS 3.3  FastOpen
 16233                                  
 16234                                  DELNXT:
 16235 00002611 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16236 00002615 E88218                  	call	GETENTRY		; Registers need to be reset
 16237 00002618 7246                    	JC	short No_fileJ
 16238 0000261A E8BB17                  	call	NEXTENT
 16239 0000261D 73A1                    	JNC	short DELFILE
 16240 0000261F C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16241                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16242                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16243                                  	;;mov	al,[es:bp+0]
 16244                                  	; 15/12/2022
 16245 00002623 268A4600                	MOV	AL,[ES:BP]
 16246 00002627 E82D34                  	call	FLUSHBUF
 16247 0000262A 7234                    	JC	short No_fileJ
 16248                                  ;
 16249                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16250                                  ;
 16251                                  ;   not found not deleted		file not found
 16252                                  ;   not found	  deleted		*** impossible ***
 16253                                  ;	found not deleted		access denied (read-only)
 16254                                  ;	found	  deleted		no error
 16255                                  ;
 16256 0000262C F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16257 00002631 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16258                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16259                                  ; and to force the DOS to issue a media check.
 16260 00002633 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16261 00002638 741C                    	jz	short No_Set_Flag
 16262 0000263A 50                      	PUSH	AX
 16263 0000263B 06                      	PUSH	ES
 16264 0000263C 57                      	PUSH	DI
 16265 0000263D C43E[A205]              	LES	DI,[THISCDS]
 16266 00002641 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16267 00002644 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16268 00002647 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16269                                  	
 16270                                  	; MSDOS 6.0
 16271 0000264B 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16272 0000264D E8DC04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16273                                  	 
 16274 00002650 E88B30                  	call	FATREAD_CDS		; force media check
 16275 00002653 5F                      	POP	DI
 16276 00002654 07                      	POP	ES
 16277 00002655 58                      	POP	AX
 16278                                  No_Set_Flag:
 16279                                  	;call	LCritDisk		; carry is clear
 16280                                  	;retn
 16281                                  	; 18/12/2022
 16282 00002656 E9D4EC                  	jmp	LCritDisk
 16283                                  DelError:
 16284 00002659 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16285 0000265E 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16286                                  No_fileJ:
 16287 00002660 E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16288                                  Del_access_errJ:
 16289 00002663 E951FF                  	JMP	Del_access_err ; 10/08/2018
 16290                                  
 16291                                  ; 08/08/2018 - Retro DOS v3.0
 16292                                  
 16293                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16294                                  ;---------------------------------------------------------------------------
 16295                                  ; Procedure Name : REN_DEL_Check
 16296                                  ;
 16297                                  ; Inputs:
 16298                                  ;	[THISDPB] set
 16299                                  ;	[CURBUF+2]:BX points to entry
 16300                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16301                                  ;	[WFP_Start] points to name
 16302                                  ; Function:
 16303                                  ;	Check for Exclusive access on given file.
 16304                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16305                                  ; Outputs:
 16306                                  ;	ES:BP = [THISDPB]
 16307                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16308                                  ;		last element will be loaded from the directory entry.  This is
 16309                                  ;		so the name given to the sharer doesn't have any meta chars in
 16310                                  ;		it.
 16311                                  ;	Carry set if sharing violation, INT 24H generated
 16312                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16313                                  ;		This is because input AX is preserved.
 16314                                  ;		Caller must set the error if needed.
 16315                                  ;	Carry clear
 16316                                  ;		OK
 16317                                  ; AX,DS,BX,SI,DI preserved
 16318                                  ;---------------------------------------------------------------------------
 16319                                  
 16320                                  REN_DEL_Check:
 16321                                  
 16322 00002666 1E                      	PUSH	DS
 16323 00002667 57                      	PUSH	DI
 16324 00002668 50                      	PUSH	AX
 16325 00002669 53                      	PUSH	BX
 16326 0000266A 56                      	PUSH	SI		; Save CURBUF pointers
 16327                                  	
 16328 0000266B 16                      	push	ss
 16329 0000266C 07                      	pop	es
 16330                                  
 16331                                  ;hkn; context ES will assume ES to DOSDATA
 16332                                  ;hkn; ASSUME	ES:DOSGROUP
 16333                                  
 16334                                  ;hkn; SS override
 16335 0000266D 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16336 00002672 89DE                    	MOV	SI,BX
 16337                                  
 16338                                  ;hkn; SS override
 16339 00002674 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16340 00002679 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16341 0000267B 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16342 0000267E E86FEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16343 00002681 49                      	DEC	CX		; Don't include nul in count
 16344 00002682 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16345 00002684 E8D446                  	call	SkipBack	; Back up one element
 16346 00002687 47                      	INC	DI		; Point to start of last element
 16347                                  
 16348                                  	; 17/05/2019 - Retro DOS v4.0
 16349                                  ;hkn; SS override
 16350                                  	; MSDOS 6.0
 16351 00002688 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16352                                  	;
 16353 0000268D E832FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16354 00002690 5E                      	POP	SI		; Get back entry pointers
 16355 00002691 5B                      	POP	BX
 16356 00002692 53                      	PUSH	BX
 16357 00002693 56                      	PUSH	SI		; Back on stack
 16358                                  	
 16359 00002694 16                      	push	ss
 16360 00002695 1F                      	pop	ds
 16361                                  
 16362                                  ;hkn; context DS will assume ES to DOSDATA
 16363                                  ;hkn; ASSUME	DS:DOSGROUP
 16364                                  
 16365                                  ; Close the file if possible by us.
 16366                                  ;
 16367                                  ;if installed
 16368 00002696 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16369                                  ;else
 16370                                  ;	Call	ShCloseFile
 16371                                  ;endif
 16372 0000269A 8C1E[A005]              	MOV	[THISSFT+2],DS
 16373                                  
 16374                                  ;hkn; AUXSTACK is in DOSDATA
 16375 0000269E C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16376                                  				; Scratch space
 16377 000026A4 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16378 000026A6 E8AB24                  	call	DOOPEN		; Fill in SFT for share check
 16379 000026A9 C43E[9E05]              	LES	DI,[THISSFT]
 16380                                  	;mov	word [es:di+2],10h
 16381 000026AD 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16382                                  				; requires exclusive access
 16383                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16384 000026B3 26C7050100              	mov	word [ES:DI],1
 16385 000026B8 E8C44C                  	call	ShareEnter
 16386 000026BB 720D                    	jc	short CheckDone
 16387 000026BD C43E[9E05]              	LES	DI,[THISSFT]
 16388                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16389 000026C1 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16390                                  	
 16391 000026C6 E8B14C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16392 000026C9 F8                      	CLC
 16393                                  CheckDone:
 16394 000026CA C42E[8A05]              	LES	BP,[THISDPB]
 16395 000026CE 5E                      	POP	SI
 16396 000026CF 5B                      	POP	BX
 16397 000026D0 58                      	POP	AX
 16398 000026D1 5F                      	POP	DI
 16399 000026D2 1F                      	POP	DS
 16400 000026D3 C3                      	retn
 16401                                  
 16402                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16403                                  ;---------------------------------------------------------------------------
 16404                                  ; Procedure Name : FastOpen_Delete
 16405                                  ; Inputs:
 16406                                  ;	None
 16407                                  ; Function:
 16408                                  ;	Call FastOpen to delete the dir info.
 16409                                  ; Outputs:
 16410                                  ;	None
 16411                                  ;---------------------------------------------------------------------------
 16412                                  
 16413                                  FastOpen_Delete:
 16414 000026D4 9C                      	PUSHF			; save flag
 16415 000026D5 56                      	PUSH	SI		; save registers
 16416 000026D6 53                      	PUSH	BX
 16417 000026D7 50                      	PUSH	AX
 16418                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16419                                  ;hkn; SS override
 16420                                  	; 17/05/2019 - Retro DOS v4.0
 16421                                  	; MSDOS 6.0
 16422 000026D8 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16423                                  	
 16424 000026DD B003                    	MOV	AL,FONC_delete	; al = 3
 16425                                  fastinvoke:
 16426                                  ;hkn; FastTable is in DOSDATA
 16427 000026DF BB[320D]                	MOV	BX,FastTable+2
 16428 000026E2 FF1F                    	CALL	far [BX]	; call fastopen
 16429 000026E4 58                      	POP	AX		; restore registers
 16430 000026E5 5B                      	POP	BX
 16431 000026E6 5E                      	POP	SI
 16432 000026E7 9D                      	POPF			; restore flag
 16433 000026E8 C3                      	retn
 16434                                  
 16435                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16436                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16437                                  
 16438                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16439                                  ;---------------------------------------------------------------------------
 16440                                  ; PROCEDURE Name : FastOpen_Rename
 16441                                  ;
 16442                                  ; Inputs:
 16443                                  ;	 REN_WFP   = Path Name
 16444                                  ;	 NAME1	   = New Name
 16445                                  ; Function:
 16446                                  ;	Call FastOpen to rename the dir entry in the cache
 16447                                  ; Outputs:
 16448                                  ;	None
 16449                                  ;---------------------------------------------------------------------------
 16450                                  
 16451                                  FastOpen_Rename:
 16452                                  	; 17/05/2019 - Retro DOS v4.0
 16453                                  	; 08/08/2018 - Retro DOS v3.0
 16454                                  	; MSDOS 6.0
 16455 000026E9 9C                      	PUSHF			;AN001 save flag
 16456 000026EA 56                      	PUSH	SI		;AN001 save registers
 16457 000026EB 57                      	PUSH	DI		;AN001
 16458 000026EC 53                      	PUSH	BX		;AN001
 16459 000026ED 50                      	PUSH	AX		;AN001
 16460                                  	;
 16461                                  ;hkn; SS override
 16462 000026EE 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16463                                  
 16464                                  ;hkn; NAME1 is in DOSDATA
 16465 000026F3 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16466                                  	;mov	al,6
 16467 000026F6 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16468                                  	
 16469                                  ;hkn; FastTable is in DOSDATA
 16470 000026F8 BB[320D]                	MOV	BX,FastTable+2
 16471 000026FB FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16472                                  	
 16473 000026FD 58                      	POP	AX		; restore registers  ;AN001
 16474 000026FE 5B                      	POP	BX				     ;AN001
 16475 000026FF 5F                      	POP	DI				     ;AN001
 16476 00002700 5E                      	POP	SI				     ;AN001
 16477 00002701 9D                      	POPF			; restore flag	     ;AN001
 16478 00002702 C3                      	retn					     ;AN001
 16479                                  
 16480                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16481                                  ;---------------------------------------------------------------------------
 16482                                  ; Procedure Name : FastOpen_Update
 16483                                  ;
 16484                                  ; Inputs:
 16485                                  ;	DL     drive number (A=0,B=1,,,)
 16486                                  ;	CX     first cluster #
 16487                                  ;	AH     0 updates dir entry
 16488                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16489                                  ;	ES:DI  directory entry
 16490                                  ; Function:
 16491                                  ;	Call FastOpen to update the dir info.
 16492                                  ; Outputs:
 16493                                  ;	None
 16494                                  ;---------------------------------------------------------------------------
 16495                                  
 16496                                  FastOpen_Update:
 16497 00002703 9C                      	PUSHF			; save flag
 16498 00002704 56                      	PUSH	SI
 16499 00002705 53                      	PUSH	BX		; save regs
 16500 00002706 50                      	PUSH	AX
 16501 00002707 B004                    	MOV	AL,FONC_update	; al = 4
 16502 00002709 EBD4                    	JMP	short fastinvoke
 16503                                  
 16504                                  	; 17/05/2019
 16505                                  
 16506                                  	; MSDOS 6.0
 16507                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16508                                  ;---------------------------------------------------------------------------
 16509                                  Fast_Dispatch:
 16510                                  ;hkn; FastTable is in DOSDATA
 16511 0000270B BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16512                                  ;hkn; use SS override
 16513 0000270E 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16514 00002711 C3                      	retn
 16515                                  
 16516                                  ;============================================================================
 16517                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16518                                  ;============================================================================
 16519                                  ; 08/08/2018 - Retro DOS v3.0
 16520                                  ; 17/05/2019 - Retro DOS v4.0
 16521                                  
 16522                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16523                                  ;	NAME	DOS_RENAME
 16524                                  
 16525                                  ;**	Low level routine for renaming files
 16526                                  ;----------------------------------------------------------------------------
 16527                                  ;	DOS_RENAME
 16528                                  ;
 16529                                  ;	Modification history:
 16530                                  ;
 16531                                  ;	    Created: ARR 30 March 1983
 16532                                  
 16533                                  ;----------------------------------------------------------------------------
 16534                                  ;
 16535                                  ; Procedure Name : DOS_RENAME
 16536                                  ;
 16537                                  ; Inputs:
 16538                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16539                                  ;		chars, NUL terminated)
 16540                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16541                                  ;		( = -1 if current dir not involved, else
 16542                                  ;		 Points to first char after last "/" of current dir part)
 16543                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16544                                  ;		chars, NUL terminated)
 16545                                  ;	[THISCDS] Points to CDS being used
 16546                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16547                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16548                                  ; Function:
 16549                                  ;	Rename the specified file(s)
 16550                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16551                                  ; Outputs:
 16552                                  ;	CARRY CLEAR
 16553                                  ;	    OK
 16554                                  ;	CARRY SET
 16555                                  ;	    AX is error code
 16556                                  ;		error_file_not_found
 16557                                  ;			No match for source, or dest path invalid
 16558                                  ;		error_not_same_device
 16559                                  ;			Source and dest are on different devices
 16560                                  ;		error_access_denied
 16561                                  ;			Directory specified (not simple rename),
 16562                                  ;			Device name given, Destination exists.
 16563                                  ;			NOTE: In third case some renames may have
 16564                                  ;			 been done if metas.
 16565                                  ;		error_path_not_found
 16566                                  ;			Bad path (not in curr dir part if present)
 16567                                  ;			SOURCE ONLY
 16568                                  ;		error_bad_curr_dir
 16569                                  ;			Bad path in current directory part of path
 16570                                  ;			SOURCE ONLY
 16571                                  ;		error_sharing_violation
 16572                                  ;			Deny both access required, generates an INT 24.
 16573                                  ; DS preserved, others destroyed
 16574                                  ;
 16575                                  ;----------------------------------------------------------------------------
 16576                                  
 16577                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16578                                  
 16579                                  DOS_RENAME:
 16580                                  
 16581                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16582                                  ;hkn; at this point to DOSDATA.
 16583                                  
 16584 00002712 E83BEB                  	call	TestNet
 16585 00002715 7306                    	JNC	short LOCAL_RENAME
 16586                                  
 16587                                  ;IF NOT Installed
 16588                                  ;	transfer NET_RENAME
 16589                                  ;ELSE
 16590                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16591                                  	;INT	2FH
 16592                                  	;return
 16593                                  
 16594 00002717 B81111                  	mov     ax, 1111h
 16595 0000271A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16596                                  			; SS = DS = DOS CS, 
 16597                                  			; SDA first filename pointer = offset of fully-qualified old name
 16598                                  			; SDA CDS pointer -> current directory
 16599                                  			; Return: CF set on error
 16600 0000271C C3                      	retn
 16601                                  ;ENDIF
 16602                                  
 16603                                  LOCAL_RENAME:
 16604 0000271D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16605 00002722 8B36[B205]              	MOV	SI,[WFP_START]
 16606 00002726 8B3E[B405]              	MOV	DI,[REN_WFP]
 16607 0000272A 8A04                    	MOV	AL,[SI]
 16608 0000272C 8A25                    	MOV	AH,[DI]
 16609 0000272E 0D2020                  	OR	AX,2020H		; Lower case
 16610 00002731 38E0                    	CMP	AL,AH
 16611 00002733 7405                    	JZ	short SAMEDRV
 16612 00002735 B81100                  	MOV	AX,error_not_same_device ; 11h
 16613 00002738 F9                      	STC
 16614 00002739 C3                      	retn
 16615                                  
 16616                                  SAMEDRV:
 16617 0000273A FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16618 0000273E FF36[2C03]              	PUSH	WORD [DMAADD]
 16619 00002742 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16620                                  
 16621                                  ;hkn; RENAMEDMA is in DOSDATA
 16622 00002746 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16623 0000274C C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16624 00002751 E8BEEB                  	call	ECritDisk
 16625 00002754 E8F505                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16626                                  					;    points to entry
 16627 00002757 7314                    	JNC	short Check_Dev
 16628 00002759 83F812                  	CMP	AX,error_no_more_files ; 12h
 16629 0000275C 7503                    	JNZ	short GOTERR
 16630 0000275E B80200                  	MOV	AX,error_file_not_found ; 2
 16631                                  GOTERR:
 16632 00002761 F9                      	STC
 16633                                  RENAME_POP:
 16634 00002762 8F06[2C03]              	POP	WORD [DMAADD]
 16635 00002766 8F06[2E03]              	POP	WORD [DMAADD+2]
 16636                                  	;call	LCritDisk
 16637                                  	;retn
 16638                                  	; 16/12/2022
 16639 0000276A E9C0EB                  	jmp	LCritDisk
 16640                                  
 16641                                  Check_Dev:
 16642                                  	; 17/05/2019 - Retro DOS v4.0
 16643                                  	;mov	ax,5
 16644 0000276D B80500                  	MOV	AX,error_access_denied	; Assume error
 16645                                  	
 16646                                  	; MSDOS 6.0
 16647 00002770 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16648 00002771 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16649                                  	;add	si,21
 16650 00002775 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16651                                  	;test	byte [si+11],10h
 16652 00002778 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16653 0000277C 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16654 0000277E 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16655 00002782 E8CEFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16656                                  notdir:
 16657 00002785 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16658 00002786 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16659                                  
 16660                                  	; MSDOS 3.3 & MSDOS 6.0
 16661 00002788 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16662 0000278D 75D2                    	JNZ	short GOTERR
 16663                                  
 16664                                  ; At this point a source has been found. There is search continuation info (a
 16665                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16666                                  ; directory entry found.
 16667                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16668                                  ; throughout the RENAME since it is known at this point that the source and
 16669                                  ; destination are both on the same device.
 16670                                  ; [SATTRIB] is also set.
 16671                                  
 16672 0000278F 89DE                    	MOV	SI,BX
 16673                                  	;add	si,26
 16674 00002791 83C61A                  	ADD	SI,dir_entry.dir_first
 16675 00002794 E8CFFE                  	call	REN_DEL_Check
 16676 00002797 7305                    	JNC	short REN_OK1
 16677 00002799 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16678 0000279C EBC4                    	JMP	short RENAME_POP
 16679                                  
 16680                                  ;------------------------------------------------------------------------------
 16681                                  ; Check if the source is a file or directory. If file, delete the entry
 16682                                  ; from the Fastopen cache. If directory, rename it later
 16683                                  ;------------------------------------------------------------------------------
 16684                                  
 16685                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16686                                  	; MSDOS 6.0
 16687 0000279E 56                      	PUSH	SI
 16688 0000279F C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16689                                  	;add	si,21
 16690 000027A3 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16691                                  	;test	byte [si+11],10h
 16692 000027A6 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16693 000027AA 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16694 000027AC 5E                      	POP	SI			;BN00X
 16695 000027AD EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16696                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16697 000027AF 5E                      	POP	SI
 16698                                  
 16699                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16700 000027B0 E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16701                                  SWAP_SOURCE:
 16702                                  	; MSDOS 3.3
 16703                                  	;MOV	SI,[REN_WFP]
 16704                                  	;MOV	[WFP_START],SI
 16705                                  	; MSDOS 6.0
 16706 000027B3 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16707 000027B6 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16708 000027BA 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16709 000027BE A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16710                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16711 000027C1 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16712                                  	;mov	word [CREATING],0E5FFh
 16713 000027C7 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16714                                  					; A rename is like a CREATE_NEW as far
 16715                                  					; as the destination is concerned.
 16716 000027CD E85F17                  	call	GetPathNoSet
 16717                                  
 16718                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16719                                  ;   since no files match the destination name. If it fails for any other
 16720                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16721                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16722                                  ;   if the rename should fail because we haven't built an explicit name by
 16723                                  ;   substituting for the meta chars in it. In this case the destination file
 16724                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16725                                  ;   in the directory entry part.
 16726                                  	
 16727 000027D0 7223                    	JC	short NODEST
 16728                                  	
 16729                                  	; MSDOS 6.0
 16730                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16731                                  	; !! MSDOS 3.3 !!
 16732                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16733                                  
 16734 000027D2 08E4                    	OR	AH,AH			; Device?
 16735 000027D4 792C                    	JNS	short SAVEDEST		; No, continue
 16736                                  BAD_ACC:
 16737 000027D6 B80500                  	MOV	AX,error_access_denied
 16738 000027D9 F9                      	STC
 16739                                  RENAME_CLEAN:
 16740 000027DA 9C                      	PUSHF				; Save carry state
 16741 000027DB 50                      	PUSH	AX			; and error code (if carry set)
 16742 000027DC A0[7605]                	MOV	AL,[THISDRV]
 16743 000027DF E87532                  	call	FLUSHBUF
 16744 000027E2 58                      	POP	AX
 16745 000027E3 803E[4A03]00            	CMP	byte [FAILERR],0
 16746 000027E8 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16747 000027EA 9D                      	POPF
 16748 000027EB E974FF                  	JMP	RENAME_POP
 16749                                  
 16750                                  BAD_ERR:
 16751 000027EE 58                      	POP	AX			; Saved flags
 16752                                  	; 16/12/202
 16753                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16754                                  BAD_PATH: ; *
 16755 000027EF B80300                  	MOV	AX,error_path_not_found
 16756 000027F2 E96CFF                  	JMP	GOTERR
 16757                                  
 16758                                  NODEST:
 16759 000027F5 75F8                    	JNZ	short BAD_PATH
 16760 000027F7 803E[4A03]00            	CMP	byte [FAILERR],0
 16761 000027FC 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16762                                  					; because user FAILed on I 24
 16763                                  	; 14/11/2022
 16764 000027FE 08C9                    	OR	CL,CL
 16765                                  	;JNZ	short SAVEDEST
 16766                                  	; 17/05/2019
 16767 00002800 74ED                    	jz	short BAD_PATH ; *
 16768                                  ;BAD_PATH: ; *
 16769                                  ;	MOV	AX,error_path_not_found
 16770                                  ;	;STC
 16771                                  ;	;JMP	RENAME_POP
 16772                                  ;	; 17/05/2019
 16773                                  ;	jmp	GOTERR 
 16774                                  
 16775                                  ; 16/12/2022
 16776                                  %if 0
 16777                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16778                                  	or	cl,cl
 16779                                  	jnz	short SAVEDEST
 16780                                  	;jz	short BAD_PATH ; *
 16781                                  BAD_PATH: ; *
 16782                                  	;mov	ax,3
 16783                                  	mov	ax,error_path_not_found
 16784                                  	stc
 16785                                  	jmp	RENAME_POP
 16786                                  %endif
 16787                                  
 16788                                  SAVEDEST:
 16789 00002802 16                      	push	ss
 16790 00002803 07                      	pop	es
 16791                                  
 16792                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16793 00002804 BF[5705]                	MOV	DI,NAME2
 16794 00002807 BE[4B05]                	MOV	SI,NAME1
 16795                                  
 16796 0000280A B90B00                  	MOV	CX,11
 16797 0000280D F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16798 0000280F A1[C205]                	MOV	AX,[DIRSTART]
 16799 00002812 A3[6405]                	MOV	[DESTSTART],AX
 16800                                  BUILDDEST:
 16801 00002815 16                      	push	ss
 16802 00002816 07                      	pop	es			; needed due to JMP BUILDDEST below
 16803                                  
 16804                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16805 00002817 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16806 0000281A BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16807 0000281D BE[5705]                	MOV	SI,NAME2		; Raw dest
 16808                                  
 16809 00002820 B90B00                  	MOV	CX,11
 16810                                  
 16811                                  	; 17/05/2019 - Retro DOS v4.0
 16812                                  	
 16813                                  	; MSDOS 6.0
 16814 00002823 E81201                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16815                                  
 16816                                  	; MSDOS 3.3
 16817                                  
 16818                                  ; 08/08/2018 - Retro DOS v3.0
 16819                                  ; MSDOS 6.0 
 16820                                  ;---------------------------------------------------------------------------
 16821                                  ;Procedure: NEW_RENAME
 16822                                  ;
 16823                                  ;Input: DS:SI -> raw string with ?
 16824                                  ;	ES:DI -> destination string
 16825                                  ;	DS:BX -> source string
 16826                                  ;Function: replace ? chars of raw string with chars in source string and
 16827                                  ;	   put in destination string
 16828                                  ;Output: ES:DI-> new string
 16829                                  ;---------------------------------------------------------------------------
 16830                                  ;
 16831                                  ;NEW_RENAME:
 16832                                  ;NEWNAM:
 16833                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16834                                  ;	LODSB
 16835                                  ;	CMP	AL,"?"
 16836                                  ;	JNZ	short NOCHG
 16837                                  ;	MOV	AL,[BX] 		; Get replace char
 16838                                  ;NOCHG:
 16839                                  ;	STOSB
 16840                                  ;	INC	BX			; Next replace char
 16841                                  ;	LOOP	NEWNAM
 16842                                  ;	; MSDOS 6.0
 16843                                  ;	;retn
 16844                                  
 16845                                  	; MSDOS 3.3 & MSDOS 6.0
 16846                                  	;mov	byte [ATTRIB],16h
 16847 00002826 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16848 0000282B C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16849 00002830 E8AB19                  	call	DEVNAME 		; Check if we built a device name
 16850 00002833 73A1                    	JNC	short BAD_ACC
 16851 00002835 8B1E[6405]              	MOV	BX,[DESTSTART]
 16852 00002839 C42E[8A05]              	LES	BP,[THISDPB]
 16853 0000283D E88C16                  	call	SETDIRSRCH		; Reset search to start of dir
 16854 00002840 7294                    	JC	short BAD_ACC 		; Screw up
 16855 00002842 E84615                  	call	FINDENTRY		; See if new name already exists
 16856 00002845 738F                    	JNC	short BAD_ACC 		; Error if found
 16857 00002847 803E[4A03]00            	CMP	byte [FAILERR],0
 16858 0000284C 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16859 0000284E A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16860 00002851 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16861 00002855 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16862                                  
 16863                                  	;mov	al,[RENAMEDMA+32]
 16864 00002857 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16865 0000285A A810                    	TEST	AL,attr_directory ; 10h
 16866 0000285C 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16867                                  					; otherwise the . and .. entries get
 16868                                  					; wiped.
 16869 0000285E A2[6B05]                	MOV	[ATTRIB],AL
 16870 00002861 8C1E[A005]              	MOV	[THISSFT+2],DS
 16871                                  
 16872                                  ;hkn; AUXSTACK is in DOSDATA
 16873                                  	;mov	si,[RENAMEDMA+145h]
 16874 00002865 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16875 00002868 8936[9E05]              	MOV	[THISSFT],SI
 16876                                  	;mov	word [SI+2],2
 16877 0000286C C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16878 00002871 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16879 00002873 E84621                  	call	RENAME_MAKE		; This is in mknode
 16880 00002876 7303                    	JNC	short GOT_DEST
 16881                                  BAD_ACCJ:
 16882 00002878 E95BFF                  	JMP	BAD_ACC
 16883                                  
 16884                                  GOT_DEST:
 16885 0000287B 53                      	push	bx
 16886 0000287C C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16887 00002880 E8F74A                  	call	ShareEnd		; we need to remove it.
 16888 00002883 5B                      	pop	bx
 16889                                  
 16890                                  ; A zero length entry with the correct new name has now been made at
 16891                                  ;   [CURBUF+2]:BX.
 16892                                  
 16893 00002884 C43E[E205]              	LES	DI,[CURBUF]
 16894                                  
 16895                                  	; MSDOS 6.0
 16896                                  	;test	byte [es:di+5],40h
 16897 00002888 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16898                                  					;LB. if already dirty		  ;AN000;
 16899 0000288D 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16900 0000288F E8CA32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16901                                  	;or	byte [es:di+5],40h
 16902 00002892 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16903                                  yesdirty1:
 16904 00002897 89DF                    	MOV	DI,BX
 16905                                  	;add	di,11
 16906 00002899 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16907                                  
 16908                                  ;hkn; RENAMEDMA is in DOSDATA
 16909                                  	;mov	si,[RENAMEDMA+32]
 16910 0000289C BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16911                                  	;mov	cx,21
 16912 0000289F B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16913 000028A2 F3A4                    	REP	MOVSB
 16914 000028A4 E87B00                  	CALL	GET_SOURCE
 16915 000028A7 7276                    	JC	short RENAME_OVER
 16916 000028A9 89DF                    	MOV	DI,BX
 16917 000028AB 8E06[E405]              	MOV	ES,[CURBUF+2]
 16918 000028AF B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16919 000028B1 AA                      	STOSB				; "free" the source
 16920 000028B2 EB13                    	JMP	SHORT DIRTY_IT
 16921                                  
 16922                                  SIMPLE_RENAME:
 16923 000028B4 E86B00                  	CALL	GET_SOURCE		; Get the source back
 16924 000028B7 7266                    	JC	short RENAME_OVER
 16925 000028B9 89DF                    	MOV	DI,BX
 16926 000028BB 8E06[E405]              	MOV	ES,[CURBUF+2]
 16927                                  
 16928                                  ;hkn; NAME1 is in DOSDATA
 16929 000028BF BE[4B05]                	MOV	SI,NAME1		; New Name
 16930 000028C2 B90B00                  	MOV	CX,11
 16931 000028C5 F3A4                    	REP	MOVSB
 16932                                  DIRTY_IT:
 16933 000028C7 8B3E[E205]              	MOV	DI,[CURBUF]
 16934                                  
 16935                                  	; MSDOS 6.0
 16936 000028CB 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16937                                  					;LB. if already dirty		  ;AN000;
 16938 000028D0 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16939 000028D2 E88732                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16940                                  	
 16941 000028D5 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16942                                  
 16943                                  ;------------------------------------------------------------------------------
 16944                                  ; Check if the source is a directory of file. If directory rename it to the
 16945                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16946                                  ; previously deleted.
 16947                                  ;------------------------------------------------------------------------------
 16948                                  
 16949                                  yesdirty2:
 16950                                  	; MSDOS 6.0
 16951 000028DA 56                      	PUSH	SI
 16952 000028DB C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16953 000028DF 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16954 000028E2 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16955 000028E6 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16956 000028E8 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16957 000028EB 5E                      	POP	SI
 16958 000028EC EB01                    	JMP	SHORT NOT_DIRTY1
 16959                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16960 000028EE 5E                      	POP	SI
 16961                                  NOT_DIRTY1:				;;BN00X
 16962                                  NEXT_SOURCE:
 16963                                  ;hkn; RENAMEDMA is in DOSDATA
 16964 000028EF BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16965                                  
 16966                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16967                                  ; to enter it before going to RENAME_Next.
 16968                                  
 16969 000028F2 E81DEA                  	call	ECritDisk
 16970 000028F5 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16971                                  				  ;  to FF when we made the prev new file).
 16972 000028FA E88705                  	call	RENAME_NEXT
 16973                                  
 16974                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16975                                  ; we were before.
 16976                                  
 16977 000028FD 7220                    	JC	short RENAME_OVER
 16978                                  
 16979                                  	;lea	si,[bx+26]
 16980 000028FF 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16981 00002902 E861FD                  	call	REN_DEL_Check
 16982 00002905 7306                    	JNC	short REN_OK2
 16983 00002907 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16984                                  jmp_to_rename_clean: ; 28/12/2022
 16985 0000290A E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16986                                  
 16987                                  ;------------------------------------------------------------------------------
 16988                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16989                                  ; if directory, rename directory name in the Fastopen cache.
 16990                                  ;-----------------------------------------------------------------------------
 16991                                  
 16992                                  REN_OK2:
 16993                                  	; MSDOS 6.0
 16994                                  	;mov	al,[RERNAMEDMA+32]
 16995 0000290D A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16996                                  	;test	al,10h
 16997 00002910 A810                    	TEST	AL,attr_directory	;;BN00X directory
 16998 00002912 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16999                                  	
 17000                                  	; MSDOS 3.3 & MSDOS 6.0
 17001 00002914 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17002                                  jmp_to_builddest: ; 28/12/2022
 17003 00002917 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 17004                                  
 17005                                  	; MSDOS 6.0
 17006                                  Ren_Directory:
 17007 0000291A E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17008                                  	;JMP	BUILDDEST
 17009                                  	; 28/12/2022
 17010 0000291D EBF8                    	jmp	short jmp_to_builddest
 17011                                  
 17012                                  RENAME_OVER:
 17013 0000291F F8                      	CLC
 17014                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17015                                  	; 28/12/2022
 17016 00002920 EBE8                    	jmp	short jmp_to_rename_clean
 17017                                  
 17018                                  ;----------------------------------------------------------------------------
 17019                                  ; Procedure: GET_SOURCE
 17020                                  ;
 17021                                  ; Inputs:
 17022                                  ;	RENAMEDMA has source info
 17023                                  ; Function:
 17024                                  ;	Re-find the source
 17025                                  ; Output:
 17026                                  ;	[CURBUF] set
 17027                                  ;	[CURBUF+2]:BX points to entry
 17028                                  ;	Carry set if error (currently user FAILed to I 24)
 17029                                  ; DS preserved, others destroyed
 17030                                  ;----------------------------------------------------------------------------
 17031                                  
 17032                                  GET_SOURCE:
 17033 00002922 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17034 00002926 C42E[8A05]              	LES	BP,[THISDPB]
 17035 0000292A E89F15                  	call	SETDIRSRCH
 17036 0000292D 7214                    	JC	short gs_ret_label	; retc
 17037 0000292F E88B18                  	call	STARTSRCH
 17038 00002932 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17039                                  	;call	GETENT
 17040                                  	; 18/12/2022
 17041 00002935 E96515                  	jmp	GETENT
 17042                                  ;gs_ret_label:
 17043                                  	;retn
 17044                                  
 17045                                  ; MSDOS 6.0 
 17046                                  ;---------------------------------------------------------------------------
 17047                                  ;Procedure: NEW_RENAME
 17048                                  ;
 17049                                  ;Input: DS:SI -> raw string with ?
 17050                                  ;	ES:DI -> destination string
 17051                                  ;	DS:BX -> source string
 17052                                  ;Function: replace ? chars of raw string with chars in source string and
 17053                                  ;	   put in destination string
 17054                                  ;Output: ES:DI-> new string
 17055                                  ;---------------------------------------------------------------------------
 17056                                  
 17057                                  NEW_RENAME:
 17058                                  	; 17/05/2019 - Retro DOS v4.0
 17059                                  NEWNAM:
 17060                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17061 00002938 AC                      	LODSB
 17062 00002939 3C3F                    	CMP	AL,"?" ; 3Fh
 17063 0000293B 7502                    	JNZ	short NOCHG
 17064 0000293D 8A07                    	MOV	AL,[BX] 		; Get replace char
 17065                                  NOCHG:
 17066 0000293F AA                      	STOSB
 17067 00002940 43                      	INC	BX			; Next replace char
 17068 00002941 E2F5                    	LOOP	NEWNAM
 17069                                  	; MSDOS 6.0
 17070                                  gs_ret_label:	; 18/12/2022
 17071 00002943 C3                      	retn
 17072                                  
 17073                                  ;============================================================================
 17074                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17075                                  ;============================================================================
 17076                                  ; 08/08/2018 - Retro DOS v3.0
 17077                                  ; 17/05/2019 - Retro DOS v4.0
 17078                                  
 17079                                  ;**	Low level routines for returning file information and setting file
 17080                                  ;	attributes
 17081                                  ;
 17082                                  ;	GET_FILE_INFO
 17083                                  ;	SET_FILE_ATTRIBUTE
 17084                                  ;
 17085                                  ;	Modification history:
 17086                                  ;
 17087                                  ;	    Created: ARR 30 March 1983
 17088                                  ;
 17089                                  ;	M025: Return access_denied if attempting to set
 17090                                  ;	      attribute of root directory.
 17091                                  ;
 17092                                  
 17093                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17094                                  
 17095                                  ;---------------------------------------------------------------------------
 17096                                  ; Procedure Name : GET_FILE_INFO
 17097                                  ;
 17098                                  ; Inputs:
 17099                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17100                                  ;		terminated)
 17101                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17102                                  ;		( = -1 if current dir not involved, else
 17103                                  ;		 Points to first char after last "/" of current dir part)
 17104                                  ;	[THISCDS] Points to CDS being used
 17105                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17106                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17107                                  ; Function:
 17108                                  ;	Get Information about a file
 17109                                  ; Returns:
 17110                                  ;	CARRY CLEAR
 17111                                  ;	    AX = Attribute of file
 17112                                  ;	    CX = Time stamp of file
 17113                                  ;	    DX = Date stamp of file
 17114                                  ;	    BX:DI = Size of file (32 bit)
 17115                                  ;	CARRY SET
 17116                                  ;	    AX is error code
 17117                                  ;		error_file_not_found
 17118                                  ;			Last element of path not found
 17119                                  ;		error_path_not_found
 17120                                  ;			Bad path (not in curr dir part if present)
 17121                                  ;		error_bad_curr_dir
 17122                                  ;			Bad path in current directory part of path
 17123                                  ; DS preserved, others destroyed
 17124                                  ;---------------------------------------------------------------------------
 17125                                  
 17126                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17127                                  
 17128                                  GET_FILE_INFO:
 17129                                  
 17130                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17131                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17132                                  
 17133 00002944 E809E9                  	call	TestNet
 17134 00002947 7306                    	JNC	short LOCAL_INFO
 17135                                  
 17136                                  ;IF NOT Installed
 17137                                  ;	transfer NET_GET_FILE_INFO
 17138                                  ;ELSE
 17139                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17140                                  ;	INT	2FH
 17141                                  ;	return
 17142                                  
 17143 00002949 B80F11                  	mov     ax, 110Fh
 17144 0000294C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17145                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17146                                  			; SDA CDS pointer -> current directory
 17147                                  			; Return: CF set on error, AX = file attributes
 17148 0000294E C3                      	retn
 17149                                  ;ENDIF
 17150                                  
 17151                                  LOCAL_INFO:
 17152 0000294F E8C0E9                  	call	ECritDisk
 17153 00002952 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17154                                  	; MSDOS 3.3
 17155                                  	;call	GETPATH
 17156                                  	; MSDOS 6.0
 17157 00002957 E8D800                  	call	GET_FAST_PATH
 17158                                  	; MSDOS 3.3 & MSDOS 6.0
 17159 0000295A 7312                    	JNC	short info_check_dev
 17160                                  NO_PATH:
 17161 0000295C 750B                    	JNZ	short bad_path1
 17162 0000295E 08C9                    	OR	CL,CL
 17163 00002960 7407                    	JZ	short bad_path1
 17164                                  info_no_file:
 17165 00002962 B80200                  	MOV	AX,error_file_not_found
 17166                                  BadRet:
 17167 00002965 F9                      	STC
 17168                                  JustRet:
 17169                                  	;call	LCritDisk
 17170                                  	;retn
 17171                                  	; 18/12/2022
 17172 00002966 E9C4E9                  	jmp	LCritDisk
 17173                                  
 17174                                  bad_path1:
 17175 00002969 B80300                  	MOV	AX,error_path_not_found
 17176 0000296C EBF7                    	jmp	short BadRet
 17177                                  
 17178                                  info_check_dev:
 17179 0000296E 08E4                    	OR	AH,AH
 17180 00002970 78F0                    	JS	short info_no_file	; device
 17181                                  
 17182                                  	; MSDOS 6.0
 17183                                  ;SR;
 17184                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17185                                  ;for a root dir
 17186                                  
 17187 00002972 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17188 00002977 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17189                                  
 17190 00002979 30E4                    	xor	ah,ah
 17191 0000297B B010                    	mov	al,attr_directory ; 10h
 17192                                  	;clc
 17193                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17194                                  	; (DOSCODE:683Eh)
 17195                                  	; 16/12/2022
 17196                                  	;clc
 17197 0000297D EBE7                    	jmp	short JustRet
 17198                                  
 17199                                  not_root:
 17200                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17201 0000297F 1E                      	PUSH	DS
 17202 00002980 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17203 00002984 89DE                    	MOV	SI,BX
 17204 00002986 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17205 00002988 89DF                    	MOV	DI,BX
 17206                                  	;mov	cx,[si+16h]
 17207 0000298A 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17208                                  	;mov	dx,[si+18h]
 17209 0000298D 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17210 00002990 30E4                    	XOR	AH,AH
 17211                                  	;mov	al,[si+0Bh]
 17212 00002992 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17213                                  	;test	al,10h
 17214 00002995 A810                    	TEST	AL,attr_directory
 17215 00002997 7506                    	JNZ	short NO_SIZE
 17216                                  	;mov	di,[si+1Ch]
 17217 00002999 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17218                                  	;mov	bx,[si+1Eh]
 17219 0000299C 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17220                                  NO_SIZE:
 17221 0000299F 1F                      	POP	DS
 17222                                  	;CLC
 17223                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17224                                  	; (DOSCODE:6864h)
 17225                                  	; 16/12/2022
 17226                                  	;clc
 17227 000029A0 EBC4                    	jmp	short JustRet
 17228                                  
 17229                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17230                                  ;-------------------------------------------------------------------------------
 17231                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17232                                  ; Inputs:
 17233                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17234                                  ;		terminated)
 17235                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17236                                  ;		( = -1 if current dir not involved, else
 17237                                  ;		 Points to first char after last "/" of current dir part)
 17238                                  ;	[THISCDS] Points to CDS being used
 17239                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17240                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17241                                  ;	AX is new attributes to give to file
 17242                                  ; Function:
 17243                                  ;	Set File Attributes
 17244                                  ; Returns:
 17245                                  ;	CARRY CLEAR
 17246                                  ;	    No error
 17247                                  ;	CARRY SET
 17248                                  ;	    AX is error code
 17249                                  ;		error_file_not_found
 17250                                  ;			Last element of path not found
 17251                                  ;		error_path_not_found
 17252                                  ;			Bad path (not in curr dir part if present)
 17253                                  ;		error_bad_curr_dir
 17254                                  ;			Bad path in current directory part of path
 17255                                  ;		error_access_denied
 17256                                  ;			Attempt to set an attribute which cannot be set
 17257                                  ;			(attr_directory, attr_volume_ID)
 17258                                  ;		error_sharing_violation
 17259                                  ;			Sharing mode of file did not allow the change
 17260                                  ;			(this request requires exclusive write/read access)
 17261                                  ;			(INT 24H generated)
 17262                                  ; DS preserved, others destroyed
 17263                                  ;----------------------------------------------------------------------------
 17264                                  
 17265                                  SET_FILE_ATTRIBUTE:
 17266                                  
 17267                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17268                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17269                                  
 17270 000029A2 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17271 000029A5 7414                    	JZ	short set_look
 17272                                  _BAD_ACC:
 17273 000029A7 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17274 000029AC C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17275 000029B1 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17276 000029B6 B80500                  	MOV	AX,error_access_denied ; 5
 17277 000029B9 F9                      	STC
 17278 000029BA C3                      	retn
 17279                                  
 17280                                  set_look:
 17281 000029BB E892E8                  	call	TestNet
 17282 000029BE 7308                    	JNC	short LOCAL_SET
 17283                                  
 17284                                  ;IF NOT Installed
 17285                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17286                                  ;ELSE
 17287 000029C0 50                      	PUSH	AX
 17288                                  	
 17289                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17290                                  	;INT	2FH
 17291                                  
 17292 000029C1 B80E11                  	mov     ax, 110Eh
 17293 000029C4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17294                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17295                                  			; SDA CDS pointer -> current directory
 17296                                  			; STACK: WORD new file attributes
 17297                                  			; Return: CF set on error
 17298                                  
 17299 000029C6 5B                      	POP	BX			; clean stack
 17300 000029C7 C3                      	retn
 17301                                  ;ENDIF
 17302                                  
 17303                                  LOCAL_SET:
 17304 000029C8 E847E9                  	call	ECritDisk
 17305 000029CB 50                      	PUSH	AX			; Save new attributes
 17306 000029CC C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17307 000029D1 E85515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17308 000029D4 7303                    	JNC	short set_check_device
 17309 000029D6 5B                      	POP	BX			; Clean stack (don't zap AX)
 17310 000029D7 EB83                    	JMP	short NO_PATH
 17311                                  
 17312                                  set_check_device:
 17313 000029D9 08E4                    	OR	AH,AH
 17314 000029DB 7906                    	JNS	short set_check_share
 17315 000029DD 58                      	POP	AX
 17316 000029DE E84CE9                  	call	LCritDisk
 17317 000029E1 EBC4                    	JMP	short _BAD_ACC 		; device
 17318                                  
 17319                                  set_check_share:
 17320 000029E3 58                      	POP	AX			; Get new attributes
 17321                                  
 17322                                  	; MSDOS 6.0
 17323 000029E4 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17324 000029E9 740A                    	je	short cannot_set_root	; M025: Y: return error
 17325                                  
 17326                                  	; MSDOS 3.3 & MSDOS 6.0
 17327 000029EB E878FC                  	call	REN_DEL_Check
 17328 000029EE 730B                    	JNC	short set_do
 17329 000029F0 B82000                  	MOV	AX,error_sharing_violation ; 32
 17330 000029F3 EB3A                    	jmp	short OK_BYE
 17331                                  
 17332                                  	; MSDOS 6.0
 17333                                  cannot_set_root:			; M025:
 17334 000029F5 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17335 000029F8 F9                      	stc				; M025: to set attr. of root
 17336 000029F9 EB34                    	jmp	short OK_BYE		; M025:
 17337                                  
 17338                                  set_do:
 17339                                  	; MSDOS 3.3 & MSDOS 6.0
 17340 000029FB C43E[E205]              	LES	DI,[CURBUF]
 17341 000029FF 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17342 00002A04 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17343                                  
 17344                                  	; MSDOS 6.0
 17345 00002A08 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17346                                  					;LB. if already dirty		  ;AN000;
 17347 00002A0D 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17348 00002A0F E84A31                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17349                                  	
 17350 00002A12 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17351                                  yesdirty3:
 17352 00002A17 A0[7605]                	MOV	AL,[THISDRV]
 17353                                  ;;;; 10/1/86 F.C update fastopen cache
 17354 00002A1A 52                      	PUSH	DX
 17355 00002A1B 57                      	PUSH	DI
 17356 00002A1C B400                    	MOV	AH,0		  ; dir entry update
 17357 00002A1E 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17358 00002A20 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17359 00002A22 E8DEFC                  	call	FastOpen_Update
 17360 00002A25 5F                      	POP	DI
 17361 00002A26 5A                      	POP	DX
 17362                                  ;;;; 9/11/86 F.C update fastopen cache
 17363 00002A27 E82D30                  	call	FLUSHBUF
 17364 00002A2A 7303                    	JNC	short OK_BYE
 17365 00002A2C B80200                  	MOV	AX,error_file_not_found
 17366                                  OK_BYE:
 17367                                  	;call	LCritDisk
 17368                                  	;retn
 17369                                  	; 16/12/2022
 17370 00002A2F E9FBE8                  	jmp	LCritDisk
 17371                                  
 17372                                  	; 17/05/2019 - Retro DOS v4.0
 17373                                  
 17374                                  	; MSDOS 6.0
 17375                                  GET_FAST_PATH:
 17376                                  ;hkn; use SS override for FastOpenFlg
 17377 00002A32 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17378                                  					;FO. trigger fastopen	;AN000;
 17379 00002A38 E8EE14                  	call	GETPATH
 17380 00002A3B 9C                      	PUSHF			 	;FO.			;AN000;
 17381 00002A3C 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17382                                  					;FO. clear all fastopen flags ;AN000;
 17383 00002A42 9D                      	POPF				;FO.			;AN000;
 17384 00002A43 C3                      	retn
 17385                                  
 17386                                  ;============================================================================
 17387                                  ; DUP.ASM, MSDOS 6.0, 1991
 17388                                  ;============================================================================
 17389                                  ; 08/08/2018 - Retro DOS v3.0
 17390                                  ; 17/05/2019 - Retro DOS v4.0
 17391                                  
 17392                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17393                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17394                                  ;
 17395                                  ;	DOS_DUP
 17396                                  ;
 17397                                  ;	Modification history:
 17398                                  ;
 17399                                  ;	  Created: ARR 30 March 1983
 17400                                  
 17401                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17402                                  ;---------------------------------------------------------------------------
 17403                                  ; Procedure Name : DOS_DUP
 17404                                  ;
 17405                                  ; Inputs:
 17406                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17407                                  ;		(a non net SFT is OK, in this case the ref
 17408                                  ;		 count is simply incremented)
 17409                                  ; Function:
 17410                                  ;	Signal to the devices that a logical open is occurring
 17411                                  ; Returns:
 17412                                  ;	ES:DI point to SFT
 17413                                  ;    Carry clear
 17414                                  ;	SFT ref_count is incremented
 17415                                  ; Registers modified: None.
 17416                                  ; NOTE:
 17417                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17418                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17419                                  ;	that time.
 17420                                  ;---------------------------------------------------------------------------
 17421                                  
 17422                                  DOS_DUP:
 17423                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17424                                  
 17425                                  	; MSDOS 6.0
 17426 00002A44 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17427 00002A49 26C43E[9E05]            	les	di,[es:THISSFT]
 17428                                  
 17429                                  	;Entry	Dos_Dup_Direct
 17430                                  DOS_Dup_Direct:
 17431 00002A4E E818E8                  	call	IsSFTNet
 17432 00002A51 7503                    	JNZ	short DO_INC
 17433 00002A53 E8A11B                  	call	DEV_OPEN_SFT
 17434                                  DO_INC:
 17435                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17436 00002A56 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17437                                  					;   we're in big trouble anyway)
 17438 00002A59 C3                      	retn
 17439                                  
 17440                                  ;============================================================================
 17441                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17442                                  ;============================================================================
 17443                                  ; 08/08/2018 - Retro DOS v3.0
 17444                                  ; 18/05/2019 - Retro DOS v4.0
 17445                                  
 17446                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17447                                  ;NAME	DOS_CREATE
 17448                                  ;----------------------------------------------------------------------------
 17449                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17450                                  ;
 17451                                  ;	DOS_CREATE
 17452                                  ;	DOS_CREATE_NEW
 17453                                  ;	SET_MKND_ERR
 17454                                  ;	SET_Media_ID
 17455                                  ;	SET_EXT_Mode
 17456                                  ;
 17457                                  ;	Revision history:
 17458                                  ;
 17459                                  ;	    A000 version 4.00	  Jan. 1988
 17460                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17461                                  
 17462                                  ;Installed = TRUE
 17463                                  
 17464                                  ;	i_need	THISSFT,DWORD
 17465                                  ;	i_need	THISCDS,DWORD
 17466                                  ;	I_need	EXTERR,WORD
 17467                                  ;	I_Need	ExtErr_locus,BYTE
 17468                                  ;	I_need	JShare,DWORD
 17469                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17470                                  ;	I_need	SATTRIB,BYTE
 17471                                  ;	I_need	CALLVIDM,DWORD
 17472                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17473                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17474                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17475                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17476                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17477                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17478                                  
 17479                                  ;***	DOS_CREATE - Create a File
 17480                                  ;----------------------------------------------------------------------------
 17481                                  ;	DOS_Create is called to create the specified file, truncating
 17482                                  ;	the old one if it exists.
 17483                                  ;
 17484                                  ;	ENTRY	AX is Attribute to create
 17485                                  ;		(ds) = DOSDATA
 17486                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17487                                  ;			terminated)
 17488                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17489                                  ;			( = -1 if current dir not involved, else
 17490                                  ;			 Points to first char after last "/" of current dir part)
 17491                                  ;		[THISCDS] Points to CDS being used
 17492                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17493                                  ;		[THISSFT] Points to SFT to fill in if file created
 17494                                  ;			(sf_mode field set so that FCB may be detected)
 17495                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17496                                  ;
 17497                                  ;	EXIT	sf_ref_count is NOT altered
 17498                                  ;		CARRY CLEAR
 17499                                  ;		    THISSFT filled in.
 17500                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17501                                  ;		CARRY SET
 17502                                  ;		    AX is error code
 17503                                  ;			error_path_not_found
 17504                                  ;				Bad path (not in curr dir part if present)
 17505                                  ;			error_bad_curr_dir
 17506                                  ;				Bad path in current directory part of path
 17507                                  ;			error_access_denied
 17508                                  ;				Attempt to re-create read only file , or
 17509                                  ;				create a second volume id or create a dir
 17510                                  ;			error_sharing_violation
 17511                                  ;				The sharing mode was correct but not allowed
 17512                                  ;				generates an INT 24
 17513                                  ;	USES	all but DS
 17514                                  ;----------------------------------------------------------------------------
 17515                                  
 17516                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17517                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17518                                  
 17519                                  DOS_CREATE:
 17520                                  	; 18/05/2019 - Retro DOS v4.0
 17521                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17522                                  
 17523                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17524                                  ;hkn; this point.
 17525                                  
 17526 00002A5A 30E4                    	XOR	AH,AH		; Truncate is OK
 17527                                  
 17528                                  ;	Enter here from Dos_Create_New
 17529                                  ;
 17530                                  ;	(ah) = 0 iff truncate OK
 17531                                  
 17532                                  Create_inter:
 17533 00002A5C A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17534                                  				; Mask out any meaningless bits
 17535 00002A5E 7511                    	JNZ	short AttErr
 17536 00002A60 A808                    	TEST	AL,attr_volume_id
 17537 00002A62 7407                    	JZ	short NoReset
 17538                                  	
 17539                                  	; MSDOS 6.0
 17540                                  	; 16/12/2022
 17541 00002A64 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17542                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17543                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17544                                  	
 17545 00002A69 B008                    	MOV	AL,attr_volume_id ; 8
 17546                                  NoReset:
 17547 00002A6B 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17548 00002A6D A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17549 00002A6F 740A                    	JZ	short ATT_OK
 17550                                  AttErr:
 17551 00002A71 B80500                  	MOV	AX,5		; Attribute problem
 17552 00002A74 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17553 00002A79 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17554                                  				   ;	attr_device to be set.
 17555                                  ATT_OK:
 17556 00002A7B C43E[9E05]              	LES	DI,[THISSFT]
 17557 00002A7F 06                      	PUSH	ES
 17558 00002A80 C436[A205]              	LES	SI,[THISCDS]
 17559 00002A84 83FEFF                  	CMP	SI,-1
 17560 00002A87 751D                    	JNE	short TEST_RE_NET
 17561                                  
 17562                                  ;	No CDS, it must be redirected.
 17563                                  
 17564 00002A89 07                      	POP	ES
 17565                                  
 17566                                  	; MSDOS 6.0
 17567                                  ;Extended open hooks
 17568                                  	;test	byte [EXTOPEN_ON],1
 17569 00002A8A F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17570 00002A8F 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17571                                  IFS_extopen:				    ;AN000;EO.
 17572 00002A91 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17573                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17574 00002A92 B82E11                  	mov	ax,112Eh
 17575 00002A95 CD2F                    	INT	2FH			    ;AN000;EO.
 17576 00002A97 5B                      	POP	BX			    ;AN000;EO. trash bx
 17577 00002A98 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17578 00002A9D C3                      	retn				    ;AN000;EO.
 17579                                  NOEXTOP:				    ;AN000;
 17580                                  ;Extended open hooks
 17581                                  
 17582                                  ;IF NOT Installed
 17583                                  ;	transfer NET_SEQ_CREATE
 17584                                  ;ELSE
 17585 00002A9E 50                      	PUSH	AX
 17586                                  
 17587                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17588                                  	;INT	2FH
 17589                                  
 17590 00002A9F B81811                  	mov     ax,1118h
 17591 00002AA2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17592                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17593                                  			; SDA first filename pointer -> fully-qualified name of file
 17594                                  			; STACK: WORD file creation mode???
 17595                                  
 17596 00002AA4 5B                      	POP	BX			; BX is trashed anyway
 17597 00002AA5 C3                      	retn
 17598                                  ;ENDIF
 17599                                  
 17600                                  ;	We have a CDS. See if it's network
 17601                                  
 17602                                  TEST_RE_NET:
 17603                                  	;;test	word [es:si+43h],8000h
 17604                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17605                                  	; 07/12/2022
 17606                                  	;test	byte [es:si+44h],80h
 17607                                  	; 17/12/2022
 17608 00002AA6 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17609 00002AAB 07                      	POP	ES
 17610 00002AAC 7419                    	JZ	short LOCAL_CREATE
 17611                                  
 17612                                  	; MSDOS 6.0
 17613 00002AAE E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17614 00002AB1 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17615                                  	;;or	word [es:di+2],2
 17616                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17617                                  	; 17/12/2022
 17618 00002AB3 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17619                                  
 17620                                  ;Extended open hooks
 17621                                  dochk:
 17622 00002AB8 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17623 00002ABD 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17624                                  ;Extended open hooks
 17625                                  
 17626                                  ;IF NOT Installed
 17627                                  ;	transfer NET_CREATE
 17628                                  ;ELSE
 17629 00002ABF 50                      	PUSH	AX
 17630                                  	
 17631                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17632                                  	;INT	2FH
 17633                                  	
 17634 00002AC0 B81711                  	mov     ax,1117h
 17635 00002AC3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17636                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17637                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17638                                  			; SDA CDS pointer -> current directory
 17639                                  			; Return: CF set on error
 17640                                  
 17641 00002AC5 5B                      	POP	BX			; BX is trashed anyway
 17642                                  ;nomore:
 17643 00002AC6 C3                      	retn
 17644                                  ;ENDIF
 17645                                  
 17646                                  ;**	It's a local create. We have a local CDS for it.
 17647                                  
 17648                                  LOCAL_CREATE:
 17649                                  	; MSDOS 6.0
 17650 00002AC7 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17651 00002ACA 7205                    	JC	short setdone	;AN000;EO.
 17652                                  	
 17653                                  	; MSDOS 3.3 & MSDOS 6.0
 17654                                  	; 17/12/2022
 17655                                  	;;or	word [es:di+2],2
 17656                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17657                                  	;or	byte [es:di+2],2
 17658 00002ACC 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17659                                  setdone:
 17660 00002AD1 E83EE8                  	call	ECritDisk
 17661 00002AD4 E8BF1E                  	call	MakeNode
 17662 00002AD7 7317                    	JNC	short Create_ok
 17663 00002AD9 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17664 00002ADE E84CE8                  	call	LCritDisk
 17665                                  
 17666                                  	;entry	SET_MKND_ERR
 17667                                  SET_MKND_ERR:
 17668                                  
 17669                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17670                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17671                                  
 17672                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17673 00002AE1 BB[E82A]                	MOV     BX,CRTERRTAB
 17674                                  	;XLAT  ; MSDOS 3.3
 17675                                  	; 18/05/2019 - Retro DOS v4.0
 17676 00002AE4 2E                      	CS
 17677 00002AE5 D7                      	XLAT
 17678                                  CreatBadRet:
 17679 00002AE6 F9                      	STC
 17680 00002AE7 C3                      	retn
 17681                                  
 17682                                  ; 13/05/2019 - Retro DOS v4.0
 17683                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17684                                  ; ---------------------------------------------------------------------------
 17685                                  
 17686                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17687                                  
 17688                                  ; 17/07/2018 - Retro DOS v3.0
 17689                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17690                                  
 17691                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17692                                  ;	db	0,5,52h,50h,3,5,20h
 17693                                  
 17694                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17695                                  ;	db	0,5,52h,50h,3,5,20h,2
 17696                                  
 17697                                  ; 08/08/2018
 17698                                  
 17699                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17700 00002AE8 00                      	DB	0			; none
 17701 00002AE9 05                      	DB	error_access_denied	; MakeNode error 1
 17702 00002AEA 52                      	DB	error_cannot_make	; MakeNode error 2
 17703 00002AEB 50                      	DB	error_file_exists	; MakeNode error 3
 17704 00002AEC 03                      	DB	error_path_not_found	; MakeNode error 4
 17705 00002AED 05                      	DB	error_access_denied	; MakeNode error 5
 17706 00002AEE 20                      	DB	error_sharing_violation ; MakeNode error 6
 17707                                  	; MSDOS 6.0
 17708 00002AEF 02                      	DB	error_file_not_found	; MakeNode error 7
 17709                                  
 17710                                  ; ---------------------------------------------------------------------------
 17711                                  
 17712                                  ; We have just created a new file. This results in the truncation of old
 17713                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17714                                  ; file to the current size.
 17715                                  
 17716                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17717                                  ; drive number to force a Build BPB after Media Check.
 17718                                  
 17719                                  ;;; FASTOPEN 8/29/86
 17720                                  Create_ok:
 17721 00002AF0 E8E1FB                  	call	FastOpen_Delete
 17722                                  ;;; FASTOPEN 8/29/86
 17723 00002AF3 A0[6D05]                	mov	al,[SATTRIB]
 17724 00002AF6 A808                    	test	al,attr_volume_id
 17725 00002AF8 741C                    	jz	short NoVolLabel
 17726 00002AFA C43E[A205]              	LES	DI,[THISCDS]
 17727                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17728 00002AFE 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17729 00002B01 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17730 00002B04 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17731                                  	
 17732                                  	; 18/05/2019 - Retro DOS v4.0
 17733                                  
 17734                                  	; MSDOS 6.0
 17735 00002B08 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17736 00002B0A E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17737                                  	
 17738 00002B0D E802E8                  	call	ECritDisk
 17739 00002B10 E8CB2B                  	call	FATREAD_CDS		; force a media check
 17740 00002B13 E817E8                  	call	LCritDisk
 17741                                  
 17742                                  NoVolLabel:
 17743 00002B16 B80200                  	MOV	ax,2
 17744 00002B19 C43E[9E05]              	LES	DI,[THISSFT]
 17745                                  ;if installed
 17746                                  	;call	JShare + 14 * 4
 17747 00002B1D FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17748                                  ;else
 17749                                  ;	Call	ShSU
 17750                                  ;endif
 17751 00002B21 E809E8                  	call	LCritDisk
 17752 00002B24 E94901                  	jmp	SET_SFT_MODE
 17753                                  
 17754                                  ;---------------------------------------------------------------------------
 17755                                  ; Procedure Name : Dos_Create_New
 17756                                  ;
 17757                                  ; Inputs:
 17758                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17759                                  ;		terminated)
 17760                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17761                                  ;		( = -1 if current dir not involved, else
 17762                                  ;		 Points to first char after last "/" of current dir part)
 17763                                  ;	[THISCDS] Points to CDS being used
 17764                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17765                                  ;	[THISSFT] Points to SFT to fill in if file created
 17766                                  ;		(sf_mode field set so that FCB may be detected)
 17767                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17768                                  ;	AX is Attribute to create
 17769                                  ; Function:
 17770                                  ;	Try to create the specified file truncating an old one that exists
 17771                                  ; Outputs:
 17772                                  ;	sf_ref_count is NOT altered
 17773                                  ;	CARRY CLEAR
 17774                                  ;	    THISSFT filled in.
 17775                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17776                                  ;	CARRY SET
 17777                                  ;	    AX is error code
 17778                                  ;		error_path_not_found
 17779                                  ;			Bad path (not in curr dir part if present)
 17780                                  ;		error_bad_curr_dir
 17781                                  ;			Bad path in current directory part of path
 17782                                  ;		error_access_denied
 17783                                  ;			Create a second volume id or create a dir
 17784                                  ;		error_file_exists
 17785                                  ;			Already a file by this name
 17786                                  ; DS preserved, others destroyed
 17787                                  ;---------------------------------------------------------------------------
 17788                                  
 17789                                  DOS_Create_New:
 17790 00002B27 B401                    	MOV	AH,1		; Truncate is NOT OK
 17791 00002B29 E930FF                  	JMP	Create_inter
 17792                                  
 17793                                  ; MSDOS 6.0
 17794                                  ;---------------------------------------------------------------------------
 17795                                  ; Procedure Name : Set_Media_ID
 17796                                  ;
 17797                                  ; Inputs:
 17798                                  ;	NAME1= Volume ID
 17799                                  ;	BH= 0, delete volume id
 17800                                  ;	    1, set new volume id
 17801                                  ;	DS= DOSGROUP
 17802                                  ; Function:
 17803                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17804                                  ; Outputs:
 17805                                  ;	CARRY CLEAR
 17806                                  ;	    volume id set
 17807                                  ;	CARRY SET
 17808                                  ;	    AX is error code
 17809                                  ;---------------------------------------------------------------------------
 17810                                  
 17811                                  	; 18/05/2019 - Retro DOS v4.0
 17812                                  Set_Media_ID:
 17813 00002B2C 50                      	PUSH	AX		;AN000;;>32mb
 17814 00002B2D 06                      	PUSH	ES		;AN000;;>32mb
 17815 00002B2E 57                      	PUSH	DI		;AN000;;>32mb
 17816                                  
 17817 00002B2F FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17818 00002B31 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17819 00002B33 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17820 00002B35 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17821                                  
 17822                                  ;hkn; PACKET_TEMP is in DOSDATA
 17823 00002B38 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17824                                  
 17825 00002B3B 53                      	PUSH	BX		;AN000;;>32mb
 17826 00002B3C 52                      	PUSH	DX		;AN000;;>32mb
 17827 00002B3D 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17828                                  
 17829                                  	;invoke	$IOCTL		;AN000;;>32mb
 17830 00002B3F E840F7                  	call	_$IOCTL	
 17831                                  
 17832 00002B42 5A                      	POP	DX		;AN000;;>32mb
 17833 00002B43 5B                      	POP	BX		;AN000;;>32mb
 17834 00002B44 7224                    	JC	short geterr	;AN000;;>32mb
 17835                                  
 17836 00002B46 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17837 00002B48 7405                    	JZ	short NoName	;AN000;>32mb yes
 17838                                  
 17839                                  ;hkn; NAME1 is in DOSDATA
 17840 00002B4A BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17841                                  
 17842 00002B4D EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17843                                  NoName: 			;AN000;
 17844                                  
 17845                                  ;hkn; NO_NAME_ID is in DOSDATA
 17846 00002B4F BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17847                                  
 17848                                  doset:				;AN000;
 17849 00002B52 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17850                                  	;add	di,6
 17851 00002B54 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17852                                  
 17853                                  ;hkn; ES & DS must point to SS
 17854                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17855 00002B57 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17856                                  
 17857 00002B58 1F                      	POP	DS		;AN000;;>32mb
 17858                                  
 17859                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17860 00002B59 16                      	PUSH	SS		;AN000;;>32mb
 17861                                  
 17862 00002B5A 07                      	POP	ES		;AN000;;>32mb
 17863 00002B5B B90B00                  	MOV	CX,11		;AN000;;>32mb
 17864 00002B5E F3A4                    	REP	MOVSB		;AN000;;>32mb
 17865 00002B60 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17866 00002B63 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17867 00002B65 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17868                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17869 00002B67 E818F7                  	call	_$IOCTL	
 17870                                  geterr: 			;AN000;
 17871                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17872 00002B6A 16                      	PUSH	SS		;AN000;>32mb
 17873                                  
 17874 00002B6B 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17875                                  
 17876 00002B6C 5F                      	POP	DI		;AN000;;>32mb
 17877 00002B6D 07                      	POP	ES		;AN000;;>32mb
 17878 00002B6E 58                      	POP	AX		;AN000;;>32mb
 17879 00002B6F C3                      	retn			;AN000;>32mb
 17880                                  
 17881                                  ; MSDOS 6.0
 17882                                  ;---------------------------------------------------------------------------
 17883                                  ; Procedure Name : Set_EXT_mode
 17884                                  ;
 17885                                  ; Inputs:
 17886                                  ;	[EXTOPEN_ON]= flag for extended open
 17887                                  ;	SAVE_BX= mode specified in Extended Open
 17888                                  ; Function:
 17889                                  ;	Set mode in ThisSFT
 17890                                  ; Outputs:
 17891                                  ;	carry set,mode is set if from Extended Open
 17892                                  ;	carry clear, mode not set yet
 17893                                  ;---------------------------------------------------------------------------
 17894                                  
 17895                                  ; 13/05/2019 - Retro DOS v4.0
 17896                                  
 17897                                  Set_EXT_mode:
 17898                                  
 17899                                  ;hkn; SS override
 17900 00002B70 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17901 00002B76 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17902 00002B78 50                      	PUSH	AX			    ;AN000;EO.
 17903                                  
 17904                                  ;hkn; SS override
 17905 00002B79 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17906                                  	;or	[es:di+2],ax
 17907 00002B7D 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17908 00002B81 58                      	POP	AX			    ;AN000;EO.
 17909 00002B82 F9                      	STC				    ;AN000;EO.
 17910                                  NOTEX:					    ;AN000;
 17911 00002B83 C3                      	retn				    ;AN000;EO.
 17912                                  
 17913                                  ;============================================================================
 17914                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17915                                  ;============================================================================
 17916                                  ; 08/08/2018 - Retro DOS v3.0
 17917                                  ; 18/05/2019 - Retro DOS v4.0
 17918                                  
 17919                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17920                                  ;	NAME	DOS_OPEN
 17921                                  
 17922                                  ;**	OPEN.ASM - File Open
 17923                                  ;----------------------------------------------------------------------------
 17924                                  ;	Low level routines for openning a file from a file spec.
 17925                                  ;	Also misc routines for sharing errors
 17926                                  ;
 17927                                  ;	DOS_Open
 17928                                  ;	Check_Access_AX
 17929                                  ;	SHARE_ERROR
 17930                                  ;	SET_SFT_MODE
 17931                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17932                                  ;
 17933                                  ;	Revision history:
 17934                                  ;
 17935                                  ;	    Created: ARR 30 March 1983
 17936                                  ;	    A000	version 4.00   Jan. 1988
 17937                                  ;
 17938                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17939                                  ; 	       remote extended opens and not save_cx.
 17940                                  ;
 17941                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17942                                  ;	       on the stack before calling off to the redir.
 17943                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17944                                  ;	       to handle open from exec. In this case set the appropriate bit
 17945                                  ;	       else do not.
 17946                                  ;----------------------------------------------------------------------------	
 17947                                  
 17948                                  ;Installed = TRUE
 17949                                  
 17950                                  ;	i_need	NoSetDir,BYTE
 17951                                  ;	i_need	THISSFT,DWORD
 17952                                  ;	i_need	THISCDS,DWORD
 17953                                  ;	i_need	CURBUF,DWORD
 17954                                  ;	i_need	CurrentPDB,WORD
 17955                                  ;	i_need	CURR_DIR_END,WORD
 17956                                  ;	I_need	RetryCount,WORD
 17957                                  ;	I_need	Open_Access,BYTE
 17958                                  ;	I_need	fSharing,BYTE
 17959                                  ;	i_need	JShare,DWORD
 17960                                  ;	I_need	FastOpenFlg,byte
 17961                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17962                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17963                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17964                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17965                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17966                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17967                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17968                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17969                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17970                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17971                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17972                                  ;
 17973                                  ;	I_need	DOS_FLAG,BYTE
 17974                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17975                                  
 17976                                  ;Break	<DOS_Open - internal file access>
 17977                                  ;---------------------------------------------------------------------------
 17978                                  ; Procedure Name : DOS_Open
 17979                                  ;
 17980                                  ; Inputs:
 17981                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17982                                  ;		terminated)
 17983                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17984                                  ;		( = -1 if current dir not involved, else
 17985                                  ;		 Points to first char after last "/" of current dir part)
 17986                                  ;	[THISCDS] Points to CDS being used
 17987                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17988                                  ;	[THISSFT] Points to SFT to fill in if file found
 17989                                  ;		(sf_mode field set so that FCB may be detected)
 17990                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17991                                  ;	AX is Access and Sharing mode
 17992                                  ;	  High NIBBLE of AL (Sharing Mode)
 17993                                  ;		sharing_compat	   file is opened in compatibility mode
 17994                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17995                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17996                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17997                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17998                                  ;	  Low NIBBLE of AL (Access Mode)
 17999                                  ;		open_for_read	file is opened for reading
 18000                                  ;		open_for_write	file is opened for writing
 18001                                  ;		open_for_both	file is opened for both reading and writing.
 18002                                  ;
 18003                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18004                                  ;		(not checked)
 18005                                  ; Function:
 18006                                  ;	Try to open the specified file
 18007                                  ; Outputs:
 18008                                  ;	sf_ref_count is NOT altered
 18009                                  ;	CARRY CLEAR
 18010                                  ;	    THISSFT filled in.
 18011                                  ;	CARRY SET
 18012                                  ;	    AX is error code
 18013                                  ;		error_file_not_found
 18014                                  ;			Last element of path not found
 18015                                  ;		error_path_not_found
 18016                                  ;			Bad path (not in curr dir part if present)
 18017                                  ;		error_bad_curr_dir
 18018                                  ;			Bad path in current directory part of path
 18019                                  ;		error_invalid_access
 18020                                  ;			Bad sharing mode or bad access mode or bad combination
 18021                                  ;		error_access_denied
 18022                                  ;			Attempt to open read only file for writting, or
 18023                                  ;			open a directory
 18024                                  ;		error_sharing_violation
 18025                                  ;			The sharing mode was correct but not allowed
 18026                                  ;			generates an INT 24 on compatibility mode SFTs
 18027                                  ; DS preserved, others destroyed
 18028                                  ;----------------------------------------------------------------------------
 18029                                  
 18030                                  ; 18/05/2019 - Retro DOS v4.0
 18031                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18032                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18033                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18034                                  
 18035                                  DOS_OPEN:
 18036                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18037                                  
 18038 00002B84 C606[4C03]00            	MOV	byte [NoSetDir],0
 18039 00002B89 E83301                  	CALL	Check_Access_AX
 18040 00002B8C 722B                    	JC	short do_ret_label	    ; retc
 18041                                  
 18042 00002B8E C43E[9E05]              	LES	DI,[THISSFT]
 18043 00002B92 30E4                    	XOR	AH,AH
 18044                                  
 18045                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18046                                  
 18047 00002B94 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18048 00002B98 06                      	PUSH	ES
 18049 00002B99 C436[A205]              	LES	SI,[THISCDS]
 18050                                  	; 18/08/2018
 18051 00002B9D 83FEFF                  	CMP	SI,-1
 18052 00002BA0 7530                    	JNZ	short TEST_RE_NET1
 18053 00002BA2 07                      	POP	ES
 18054                                  
 18055                                  	; MSDOS 6.0
 18056                                  ;Extended open hooks
 18057 00002BA3 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18058 00002BA8 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18059                                  _IFS_extopen:									;AN000;
 18060 00002BAA A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18061                                  					    ; with which call was made. This
 18062                                  					    ; has the open access bits. 
 18063                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18064                                  	
 18065 00002BAD 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18066                                  	;mov	ax,112Eh
 18067                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18068 00002BAE B82E11                  	mov	ax,(MultNET*256)+46 
 18069 00002BB1 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18070 00002BB3 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18071 00002BB4 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18072                                  
 18073                                  do_ret_label:
 18074 00002BB9 C3                      	retn				    ;FT.				;AN000;
 18075                                  _NOEXTOP:
 18076                                  ;Extended open hooks
 18077                                  	;
 18078                                  ;IF NOT Installed
 18079                                  	;transfer NET_SEQ_OPEN
 18080                                  ;ELSE
 18081                                  	
 18082                                  do_net_int2f:
 18083 00002BBA F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18084 00002BBF 7409                    	jz	short not_exec_open	; N: just do net open
 18085                                  					; Y: check to see if redir is aware
 18086                                  					;    of this 
 18087                                  	
 18088                                  					; M042 - start
 18089                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18090 00002BC1 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18091                                  					; Q: does this redir know how to 
 18092                                  					;    this
 18093 00002BC6 7402                    	jz	short not_exec_open	; N: just do net open
 18094                                  					; Y: set bit 3 of access byte and 
 18095                                  					;    set sharing mode to DENY_WRITE
 18096                                  					; M042 - end
 18097                                  	
 18098                                  	; NOTE: This specific mode has not been set for the code assembled
 18099                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18100                                  	; always one.
 18101                                  					; M035 - set the bits on the stack
 18102                                  	;mov	al,23h
 18103 00002BC8 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18104                                  	
 18105                                  not_exec_open:
 18106                                  	; MSDOS 3.3 & MSDOS 6.0
 18107 00002BCA 50                      	PUSH	AX
 18108                                  
 18109                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18110                                  	;INT	2FH
 18111                                  
 18112 00002BCB B81611                  	mov     ax,1116h
 18113 00002BCE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18114                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18115                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18116                                  			; STACK: WORD file open mode
 18117                                  			; Return: CF set on error
 18118                                  
 18119 00002BD0 5B                      	POP	BX			; clean stack
 18120                                  ;do_ret_label: ; 09/08/2018
 18121 00002BD1 C3                      	retn
 18122                                  ;ENDIF
 18123                                  
 18124                                  TEST_RE_NET1:
 18125                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18126                                  	; 17/12/2022
 18127 00002BD2 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18128 00002BD7 07                      	POP	ES
 18129                                  	; 18/05/2019
 18130 00002BD8 7409                    	JZ	short LOCAL_OPEN
 18131                                  
 18132                                  ;Extended open hooks
 18133                                  	; MSDOS 6.0
 18134 00002BDA F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18135 00002BDF 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18136                                  ;Extended open hooks
 18137                                  
 18138                                  ;IF NOT Installed
 18139                                  ;	transfer NET_OPEN
 18140                                  ;ELSE
 18141 00002BE1 EBD7                    	jmp	short do_net_int2f
 18142                                  ;ENDIF
 18143                                  
 18144                                  LOCAL_OPEN:
 18145                                  	; MSDOS 3.3 & MSDOS 6.0
 18146 00002BE3 E82CE7                  	call	ECritDisk
 18147                                  
 18148                                  ; DOS 3.3 FastOPen 6/16/86
 18149                                  
 18150                                  	;or	byte [FastOpenFlg],5
 18151 00002BE6 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18152                                  
 18153 00002BEB E83B13                  	call	GETPATH
 18154                                  
 18155                                  ; DOS 3.3 FastOPen 6/16/86
 18156                                  
 18157 00002BEE 731D                    	JNC	short Open_found
 18158 00002BF0 7511                    	JNZ	short bad_path2
 18159 00002BF2 08C9                    	OR	CL,CL
 18160 00002BF4 740D                    	JZ	short bad_path2
 18161                                  OpenFNF:
 18162 00002BF6 B80200                  	MOV	AX,error_file_not_found	; 2
 18163                                  OpenBadRet:
 18164                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18165                                  	; 12/08/2018
 18166                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18167                                  	; MSDOS 6.0
 18168 00002BF9 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18169 00002BFF F9                      	STC
 18170                                  	;call	LCritDisk
 18171                                  	; 16/12/2022
 18172 00002C00 E92AE7                  	jmp	LCritDisk
 18173                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18174                                  	;retn 	; 08/09/2018
 18175                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18176                                  	;jmp	Clear_FastOpen
 18177                                  
 18178                                  bad_path2:
 18179 00002C03 B80300                  	MOV	AX,error_path_not_found	; 3
 18180 00002C06 EBF1                    	JMP	short OpenBadRet
 18181                                  
 18182                                  Open_Bad_Access:
 18183 00002C08 B80500                  	MOV	AX,error_access_denied	; 5
 18184 00002C0B EBEC                    	JMP	short OpenBadRet
 18185                                  
 18186                                  Open_found:
 18187 00002C0D 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18188 00002C0F 08E4                    	OR	AH,AH
 18189 00002C11 783E                    	JS	short open_ok		; Devices don't have attributes
 18190 00002C13 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18191                                  	;mov	al,[es:bx+0Bh]
 18192 00002C17 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18193 00002C1B A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18194 00002C1D 75E9                    	JNZ	short Open_Bad_Access
 18195 00002C1F A801                    	TEST	AL,attr_read_only	; check write on read only
 18196 00002C21 742E                    	JZ	short open_ok
 18197                                  
 18198                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18199                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18200                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18201                                  ; processing until the actual write operation:
 18202                                  ;
 18203                                  ; If FCB, then we change the mode to be read_only.
 18204                                  ; If net_FCB, then we change the mode to be read_only.
 18205                                  ; If not open for read then error.
 18206                                  
 18207 00002C23 1E                      	push	ds
 18208 00002C24 56                      	push	si
 18209 00002C25 C536[9E05]              	LDS	SI,[THISSFT]
 18210                                  	;mov	cx,[si+2]
 18211 00002C29 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18212                                  	; 17/12/2022
 18213                                  	;test	ch,80h
 18214 00002C2C F6C580                  	test	ch,sf_isFCB>>8
 18215                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18216 00002C2F 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18217 00002C31 88CA                    	MOV	DL,CL
 18218 00002C33 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18219 00002C36 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18220 00002C39 7508                    	JNZ	short NormalOpen	; no
 18221                                  ResetAccess:
 18222                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18223                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18224                                  	; 16/12/2022
 18225 00002C3B 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18226                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18227 00002C3E 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18228 00002C41 EB0C                    	JMP	SHORT FillSFT
 18229                                  
 18230                                  ; The SFT is normal. See if the requested access is open_for_read
 18231                                  
 18232                                  NormalOpen:
 18233 00002C43 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18234 00002C46 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18235 00002C49 7404                    	JZ	short FillSFT
 18236 00002C4B 5E                      	pop	si
 18237 00002C4C 1F                      	pop	ds
 18238 00002C4D EBB9                    	JMP	short Open_Bad_Access
 18239                                  ;
 18240                                  ; All done, restore registers and fill the SFT.
 18241                                  ;
 18242                                  FillSFT:
 18243 00002C4F 5E                      	pop	si
 18244 00002C50 1F                      	pop	ds
 18245                                  open_ok:
 18246 00002C51 E8001F                  	call	DOOPEN			; Fill in SFT
 18247                                  
 18248                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18249                                  	; 18/05/2019
 18250                                  	;and	byte [ss:FastOpenFlag],80h
 18251 00002C54 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18252                                  	; 12/08/2018
 18253                                  	;and	byte [FastOpenFlg],Fast_yes	
 18254                                  
 18255                                  	; MSDOS 6.0
 18256 00002C5A E84300                  	CALL	DO_SHARE_CHECK
 18257 00002C5D 7303                    	JNC	short SHARE_OK
 18258                                  	;call	LCritDisk
 18259                                  	; 16/12/2022
 18260 00002C5F E9CBE6                  	jmp	LCritDisk
 18261                                  	;;JMP	short Clear_FastOpen
 18262                                  	;retn	; 18/05/2019
 18263                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18264                                  	;jmp	short Clear_FastOpen	
 18265                                  
 18266                                  	; MSDOS 3.3
 18267                                  ;DO_SHARE_CHECK:
 18268                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18269                                  ;OpenShareRetry:
 18270                                  ;	push	cx			; Save number left to do
 18271                                  ;	call	SHARE_CHECK		; Final Check
 18272                                  ;	pop	cx			; CX = # left
 18273                                  ;	JNC	short SHARE_OK		; No problem with access
 18274                                  ;	call	Idle
 18275                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18276                                  ;OpenShareFail:
 18277                                  ;	LES	DI,[THISSFT]
 18278                                  ;	call	SHARE_ERROR
 18279                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18280                                  	
 18281                                  	;12/08/2018
 18282                                  	;mov	byte [ss:FastOpenFlg],0
 18283                                  	;08/09/2018
 18284                                  	;mov	byte [FastOpenFlg],0
 18285                                  	;call	LCritDisk
 18286                                  	;JMP	short Clear_FastOpen
 18287                                  	;retn
 18288                                  
 18289                                  SHARE_OK:
 18290                                  	; MSDOS 3.3 & MSDOS 6.0
 18291 00002C62 B80300                  	MOV	AX,3
 18292 00002C65 C43E[9E05]              	LES	DI,[THISSFT]
 18293                                  ;if installed
 18294                                  	;call	JShare + 14 * 4
 18295 00002C69 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18296                                  ;else
 18297                                  ;	Call	ShSU
 18298                                  ;endif
 18299 00002C6D E8BDE6                  	call	LCritDisk
 18300                                  	
 18301                                  	;FallThru Set_SFT_Mode
 18302                                  
 18303                                  ;----------------------------------------------------------------------------
 18304                                  ; Procedure Name : SET_SFT_MODE
 18305                                  ;
 18306                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18307                                  ;
 18308                                  ;   Inputs:
 18309                                  ;	ThisSFT points to SFT
 18310                                  ;
 18311                                  ;   Outputs:
 18312                                  ;	Carry clear
 18313                                  ;   Registers modified: AX.
 18314                                  ;---------------------------------------------------------------------------
 18315                                  
 18316                                  ;hkn; called from create. DS already set up to DOSDATA.
 18317                                  
 18318                                  SET_SFT_MODE:
 18319 00002C70 C43E[9E05]              	LES	DI,[THISSFT]
 18320 00002C74 E88019                  	call	DEV_OPEN_SFT
 18321                                  	;test	word [es:di+2],8000h
 18322                                  	; 17/12/2022
 18323                                  	;test	byte [es:di+3],80h
 18324 00002C77 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18325                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18326 00002C7C 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18327 00002C7E A1[3003]                	MOV	AX,[CurrentPDB]
 18328                                  	;mov	[es:di+31h],ax
 18329 00002C81 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18330                                  
 18331                                  Clear_FastOpen:
 18332 00002C85 C3                      	retn			       ;;;;; DOS 3.3
 18333                                  
 18334                                  ;----------------------------------------------------------------------------
 18335                                  ; Procedure Name : SHARE_ERROR
 18336                                  ;
 18337                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18338                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18339                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18340                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18341                                  ;---------------------------------------------------------------------------
 18342                                  
 18343                                  SHARE_ERROR:
 18344                                  	; 17/12/2022
 18345                                  	;test	byte [es:di+3],80h
 18346 00002C86 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18347                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18348 00002C8B 7509                    	JNZ	short _HARD_ERR
 18349 00002C8D 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18350 00002C91 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18351                                  	;CMP	CL,SHARING_COMPAT ; 0
 18352                                  	;JNE	short _NO_HARD_ERR
 18353                                  	; 21/09/2023
 18354 00002C94 7505                    	jnz	short _NO_HARD_ERR
 18355                                  _HARD_ERR:
 18356 00002C96 E8BB46                  	call	SHARE_VIOLATION
 18357                                  	;retnc				; User wants retry
 18358 00002C99 73EA                    	jnc	short Clear_FastOpen
 18359                                  _NO_HARD_ERR:
 18360 00002C9B B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18361 00002C9E F9                      	STC
 18362 00002C9F C3                      	retn
 18363                                  
 18364                                  ; MSDOS 6.0
 18365                                  ;----------------------------------------------------------------------------
 18366                                  ; Procedure Name : DO_SHARE_CHECK
 18367                                  ;
 18368                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18369                                  ; Functions: check file sharing mode is valid
 18370                                  ; Output: carry set, error
 18371                                  ;	  carry clear, share ok
 18372                                  ;----------------------------------------------------------------------------
 18373                                  
 18374                                  	; 18/05/2019 - Retro DOS v4.0
 18375                                  DO_SHARE_CHECK:
 18376 00002CA0 E86FE6                  	call	ECritDisk		; enter critical section
 18377                                  OPN_RETRY:
 18378 00002CA3 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18379                                  OpenShareRetry:
 18380 00002CA7 51                      	push	cx			; Save number left to do
 18381 00002CA8 E8A446                  	call	SHARE_CHECK		; Final Check
 18382 00002CAB 59                      	pop	cx			; CX = # left
 18383 00002CAC 730E                    	JNC	short Share_Ok2		; No problem with access
 18384 00002CAE E85AE5                  	call	Idle
 18385 00002CB1 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18386                                  OpenShareFail:
 18387 00002CB3 C43E[9E05]              	LES	DI,[THISSFT]
 18388 00002CB7 E8CCFF                  	call	SHARE_ERROR
 18389 00002CBA 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18390                                  Share_Ok2:
 18391                                  	;call	LCritDisk		; leave critical section
 18392                                  	;retn
 18393                                  	; 18/12/2022
 18394 00002CBC E96EE6                  	jmp	LCritDisk
 18395                                  
 18396                                  ;-----------------------------------------------------------------------------
 18397                                  ; Procedure Name : Check_Access
 18398                                  ;
 18399                                  ; Inputs:
 18400                                  ;	AX is mode
 18401                                  ;	  High NIBBLE of AL (Sharing Mode)
 18402                                  ;		sharing_compat	   file is opened in compatibility mode
 18403                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18404                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18405                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18406                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18407                                  ;	  Low NIBBLE of AL (Access Mode)
 18408                                  ;		open_for_read	file is opened for reading
 18409                                  ;		open_for_write	file is opened for writing
 18410                                  ;		open_for_both	file is opened for both reading and writing.
 18411                                  ; Function:
 18412                                  ;	Check this access mode for correctness
 18413                                  ; Outputs:
 18414                                  ;	[open_access] = AL input
 18415                                  ;	Carry Clear
 18416                                  ;		Mode is correct
 18417                                  ;		AX unchanged
 18418                                  ;	Carry Set
 18419                                  ;		Mode is bad
 18420                                  ;		AX = error_invalid_access
 18421                                  ; No other registers effected
 18422                                  ;----------------------------------------------------------------------------
 18423                                  
 18424                                  Check_Access_AX:
 18425 00002CBF A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18426 00002CC2 53                      	PUSH	BX
 18427                                  
 18428                                  ;	If sharing, then test for special sharing mode for FCBs
 18429                                  
 18430 00002CC3 88C3                    	MOV	BL,AL
 18431 00002CC5 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18432 00002CC8 803E[7205]FF            	CMP	byte [FSHARING],-1
 18433 00002CCD 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18434 00002CCF 80FB70                  	CMP	BL,SHARING_NET_FCB
 18435 00002CD2 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18436                                  CheckShareMode:
 18437 00002CD4 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18438 00002CD7 770D                    	JA	short Make_Bad_Access
 18439                                  CheckAccessMode:
 18440 00002CD9 88C3                    	MOV	BL,AL
 18441 00002CDB 80E30F                  	AND	BL,access_mask
 18442 00002CDE 80FB02                  	CMP	BL,2
 18443 00002CE1 7703                    	JA	short Make_Bad_Access
 18444 00002CE3 5B                      	POP	BX
 18445 00002CE4 F8                      	CLC
 18446 00002CE5 C3                      	retn
 18447                                  
 18448                                  Make_Bad_Access:
 18449 00002CE6 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18450 00002CE9 5B                      	POP	BX
 18451 00002CEA F9                      	STC
 18452 00002CEB C3                      	retn
 18453                                  
 18454                                  ;============================================================================
 18455                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18456                                  ;============================================================================
 18457                                  ; 08/08/2018 - Retro DOS v3.0
 18458                                  ; 18/05/2019 - Retro DOS v4.0
 18459                                  
 18460                                  ;**	Low level routine for returning disk drive information from a local
 18461                                  ;	  or NET device
 18462                                  ;
 18463                                  ;	DISK_INFO
 18464                                  ;
 18465                                  ;	  Modification history:
 18466                                  ;
 18467                                  ;		Created: ARR 30 March 1983
 18468                                  
 18469                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18470                                  ;---------------------------------------------------------------------------
 18471                                  ; Procedure Name : DISK_INFO
 18472                                  ;
 18473                                  ; Inputs:
 18474                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18475                                  ;		(It MAY NOT be NUL, error not detected)
 18476                                  ; Function:
 18477                                  ;	Get Interesting Drive Information
 18478                                  ; Returns:
 18479                                  ;	DX = Number of free allocation units
 18480                                  ;	BX = Total Number of allocation units on disk
 18481                                  ;	CX = Sector size
 18482                                  ;	AL = Sectors per allocation unit
 18483                                  ;	AH = FAT ID BYTE
 18484                                  ;	Carry set if error (currently user FAILed to I 24)
 18485                                  ; Segs except ES preserved, others destroyed
 18486                                  ;----------------------------------------------------------------------------
 18487                                  
 18488                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18489                                  ;hkn; DOSDATA. 
 18490                                  
 18491                                  DISK_INFO:
 18492                                  	; 08/08/2018 - Retro DOS v3.0
 18493                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18494                                  
 18495 00002CEC E861E5                  	call	TestNet
 18496 00002CEF 7306                    	JNC	short LOCAL_DSK_INFO
 18497                                  
 18498                                  ;IF NOT Installed
 18499                                  ;	transfer NET_DISK_INFO
 18500                                  ;ELSE
 18501                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18502                                  	;INT	2FH
 18503                                  	;return
 18504                                  
 18505 00002CF1 B80C11                  	mov     ax,110Ch
 18506 00002CF4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18507                                  			; ES:DI -> current directory
 18508                                  			; Return: AL = sectors per cluster, BX = total clusters
 18509                                  			; CX = bytes per sector, DX = number of available clusters
 18510 00002CF6 C3                      	retn
 18511                                  ;ENDIF
 18512                                  
 18513                                  LOCAL_DSK_INFO:
 18514 00002CF7 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18515 00002CFC E813E6                  	call	ECritDisk
 18516 00002CFF E8DC29                  	call	FATREAD_CDS		; perform media check.
 18517 00002D02 7241                    	JC	short CRIT_LEAVE
 18518 00002D04 BB0200                  	MOV	BX,2
 18519 00002D07 E83E28                  	call	UNPACK			; Get first FAT sector into CURBUF
 18520 00002D0A 7239                    	JC	short CRIT_LEAVE
 18521 00002D0C C536[E205]              	LDS	SI,[CURBUF]
 18522                                  	;mov	ah,[si+20]
 18523 00002D10 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18524                                  
 18525                                  ;hkn; SS is DOSDATA
 18526 00002D13 16                      	push	ss
 18527 00002D14 1F                      	pop	ds
 18528                                  	;mov	cx,[es:bp+0Dh]
 18529 00002D15 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18530                                  
 18531                                  ; Examine the current free count. If it indicates that we have an invalid
 18532                                  ; count, do the expensive calculation.
 18533                                  
 18534                                  	;mov	dx,[es:bp+1Fh]
 18535 00002D19 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18536 00002D1D 83FAFF                  	CMP	DX,-1			; is it valid?
 18537 00002D20 7404                    	JZ	short DoScan
 18538                                  
 18539                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18540                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18541                                  ; the count.
 18542                                  
 18543 00002D22 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18544 00002D24 7222                    	JB	short GotVal		; yes, trust it.
 18545                                  DoScan:
 18546 00002D26 31D2                    	XOR	DX,DX
 18547 00002D28 49                      	DEC	CX
 18548                                  SCANFREE:
 18549 00002D29 E81C28                  	call	UNPACK
 18550 00002D2C 7217                    	JC	short CRIT_LEAVE
 18551 00002D2E 7501                    	JNZ	short NOTFREECLUS
 18552 00002D30 42                      	INC	DX			; A free one
 18553                                  NOTFREECLUS:
 18554 00002D31 43                      	INC	BX			; Next cluster
 18555 00002D32 E2F5                    	LOOP	SCANFREE
 18556 00002D34 4B                      	DEC	BX			; BX was next cluster. Convert to
 18557                                  ReturnVals:
 18558 00002D35 4B                      	DEC	BX			; count
 18559                                  	;mov	al,[es:bp+4]
 18560 00002D36 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18561 00002D3A FEC0                    	INC	AL			; Sectors/cluster
 18562                                  	;mov	cx,[es:bp+2]
 18563 00002D3C 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18564                                  	;mov	[es:bp+1Fh],dx
 18565 00002D40 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18566 00002D44 F8                      	CLC
 18567                                  CRIT_LEAVE:
 18568                                  	;call	LCritDisk
 18569                                  	;retn
 18570                                  	; 17/12/2022
 18571 00002D45 E9E5E5                  	jmp	LCritDisk
 18572                                  
 18573                                  ; We have correctly computed everything previously. Load up registers for
 18574                                  ; return.
 18575                                  
 18576                                  GotVal: 
 18577 00002D48 89CB                    	MOV	BX,CX			; get cluster count
 18578 00002D4A EBE9                    	JMP	short ReturnVals
 18579                                  
 18580                                  ;============================================================================
 18581                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18582                                  ;============================================================================
 18583                                  ; 22/07/2018 - Retro DOS v3.0
 18584                                  
 18585                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18586                                  ;	NAME	DOS_SEARCH
 18587                                  
 18588                                  ;**	Low level routines for doing local and NET directory searches
 18589                                  ;
 18590                                  ;	DOS_SEARCH_FIRST
 18591                                  ;	DOS_SEARCH_NEXT
 18592                                  ;	RENAME_NEXT
 18593                                  ;
 18594                                  ;	Revision history:
 18595                                  ;
 18596                                  ;	    Created: ARR 30 March 1983
 18597                                  ;	    A000	version 4.00  Jan. 1988
 18598                                  ;	    A001	PTM 3564 -- search for fastopen
 18599                                  
 18600                                  ;Installed = TRUE
 18601                                  
 18602                                  ;--------------------------------------------------------------------------
 18603                                  ;
 18604                                  ; Procedure Name : DOS_SEARCH_FIRST
 18605                                  ;
 18606                                  ; Inputs:
 18607                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18608                                  ;		terminated)
 18609                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18610                                  ;		( = -1 if current dir not involved, else
 18611                                  ;		 Points to first char after last "/" of current dir part)
 18612                                  ;	[THISCDS] Points to CDS being used
 18613                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18614                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18615                                  ;	[DMAADD] Points to 53 byte buffer
 18616                                  ; Function:
 18617                                  ;	Initiate a search for the given file spec
 18618                                  ; Outputs:
 18619                                  ;	CARRY CLEAR
 18620                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18621                                  ;
 18622                                  ;	LOCAL
 18623                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18624                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18625                                  ;	    11 byte search name with Meta chars in it
 18626                                  ;	    Search Attribute Byte, attribute of search
 18627                                  ;	    WORD LastEnt value
 18628                                  ;	    WORD DirStart
 18629                                  ;	    4 byte pad
 18630                                  ;	    32 bytes of the directory entry found
 18631                                  ;	NET
 18632                                  ;	    21 bytes First byte has high bit set
 18633                                  ;	    32 bytes of the directory entry found
 18634                                  ;
 18635                                  ;	CARRY SET
 18636                                  ;	    AX = error code
 18637                                  ;		error_no_more_files
 18638                                  ;			No match for this file
 18639                                  ;		error_path_not_found
 18640                                  ;			Bad path (not in curr dir part if present)
 18641                                  ;		error_bad_curr_dir
 18642                                  ;			Bad path in current directory part of path
 18643                                  ; DS preserved, others destroyed
 18644                                  ;---------------------------------------------------------------------------
 18645                                  
 18646                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18647                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18648                                  
 18649                                  DOS_SEARCH_FIRST:
 18650                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18651                                  
 18652 00002D4C C43E[A205]              	LES	DI,[THISCDS]
 18653 00002D50 83FFFF                  	CMP	DI,-1
 18654 00002D53 7506                    	JNZ	short TEST_RE_NET2
 18655                                  
 18656                                  ;IF NOT Installed
 18657                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18658                                  ;ELSE
 18659                                  	;mov	ax,1119h
 18660 00002D55 B81911                  	MOV	AX,(MultNET<<8)|25
 18661 00002D58 CD2F                    	INT	2Fh
 18662 00002D5A C3                      	retn
 18663                                  ;ENDIF
 18664                                  
 18665                                  TEST_RE_NET2:
 18666                                  	;test	word [es:di+43h],8000h
 18667                                  	; 17/12/2022
 18668                                  	;test	byte [es:di+44h],80h
 18669                                  	; 28/12/2022
 18670 00002D5B 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18671                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18672 00002D60 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18673                                  
 18674                                  ;IF NOT Installed
 18675                                  ;	transfer NET_SEARCH_FIRST
 18676                                  ;ELSE
 18677                                  	;mov	ax,111Bh
 18678 00002D62 B81B11                  	MOV	AX,(MultNET<<8)|27
 18679 00002D65 CD2F                    	INT	2FH
 18680 00002D67 C3                      	retn
 18681                                  ;ENDIF
 18682                                  	; 18/05/2019 - Retro DOS v4.0
 18683                                  LOCAL_SEARCH_FIRST:
 18684 00002D68 E8A7E5                  	call	ECritDisk
 18685                                  	; MSDOS 6.0
 18686                                  	;;test	word [DOS34_FLAG],400h
 18687                                  	; 17/12/2022
 18688                                  	;test	byte [DOS34_FLAG+1],04h
 18689 00002D6B F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18690                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18691 00002D70 7405                    	JZ	short NOFN			;AN000;
 18692                                  	;or	byte [FastOpenFlg],1
 18693 00002D72 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18694                                  NOFN:						;AN000;
 18695 00002D77 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18696                                  	; MSDOS 6.0
 18697 00002D7C E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18698 00002D7F 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18699                                  	;and	byte [FastOpenFlg],80h
 18700 00002D81 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18701                                  norm_GETPATH:
 18702 00002D86 E8A011                  	call	GETPATH
 18703                                  	; BX = offset NAME1
 18704                                  ;_getdone:
 18705 00002D89 7318                    	JNC	short find_check_dev
 18706 00002D8B 7511                    	JNZ	short bad_path3
 18707 00002D8D 08C9                    	OR	CL,CL
 18708 00002D8F 740D                    	JZ	short bad_path3
 18709                                  find_no_more:
 18710                                  	;mov	ax,12h
 18711 00002D91 B81200                  	MOV	AX,error_no_more_files
 18712                                  BadBye:
 18713                                  	; MSDOS 6.0
 18714 00002D94 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18715                                  
 18716 00002D9A F9                      	STC
 18717                                  	;call	LCritDisk
 18718                                  	;retn
 18719                                  	; 18/12/2022
 18720 00002D9B E98FE5                  	jmp	LCritDisk
 18721                                  
 18722                                  bad_path3:
 18723                                  	;mov	ax,3
 18724 00002D9E B80300                  	MOV	AX,error_path_not_found
 18725 00002DA1 EBF1                    	JMP	short BadBye
 18726                                  
 18727                                  find_check_dev:
 18728 00002DA3 08E4                    	OR	AH,AH
 18729 00002DA5 790A                    	JNS	short found_entry
 18730 00002DA7 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18731 00002DAD FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18732                                  found_entry:
 18733                                  
 18734                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18735                                  ; a search-next may not have wfp_start set correctly
 18736                                  
 18737 00002DB1 C43E[2C03]              	LES	DI,[DMAADD]
 18738 00002DB5 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18739 00002DB9 AC                      	LODSB
 18740 00002DBA 2C40                    	SUB	AL,'A'-1                ; logical drive
 18741 00002DBC AA                      	STOSB				; High bit not set (local)
 18742                                  found_it:
 18743 00002DBD C43E[2C03]              	LES	DI,[DMAADD]
 18744 00002DC1 47                      	INC	DI
 18745                                  
 18746                                  	; MSDOS 6.0
 18747 00002DC2 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18748                                  	;test	byte [FastOpenFlg],10h
 18749 00002DC3 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18750 00002DC8 7408                    	JZ	short notfast			  ;FO.;AN001;
 18751 00002DCA 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18752 00002DCC 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18753 00002DD0 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18754                                  
 18755                                  notfast:
 18756 00002DD2 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18757                                  movmov:
 18758                                  ; Special E5 code
 18759 00002DD5 A4                      	MOVSB
 18760 00002DD6 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18761 00002DDB 7505                    	JNZ	short NOTKANJB
 18762 00002DDD 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18763                                  NOTKANJB:
 18764 00002DE2 B90A00                  	MOV	CX,10
 18765 00002DE5 F3A4                    	REP	MOVSB
 18766                                  
 18767                                  	; 08/09/2018
 18768 00002DE7 1F                      	POP	DS			;FO.;AN001; restore ds
 18769                                  
 18770 00002DE8 A0[6B05]                	MOV	AL,[ATTRIB]
 18771 00002DEB AA                      	STOSB
 18772 00002DEC 50                      	PUSH	AX			; Save AH device info
 18773 00002DED A1[4803]                	MOV	AX,[LASTENT]
 18774 00002DF0 AB                      	STOSW
 18775 00002DF1 A1[C205]                	MOV	AX,[DIRSTART]
 18776 00002DF4 AB                      	STOSW
 18777                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18778 00002DF5 83C704                  	ADD	DI,4
 18779 00002DF8 58                      	POP	AX			; Recover AH device info
 18780 00002DF9 08E4                    	OR	AH,AH
 18781 00002DFB 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18782 00002DFD 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18783 00002E02 7510                    	JNZ	short OKSTORE
 18784                                  
 18785                                  	; MSDOS 6.0
 18786 00002E04 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18787                                  					;AN000;;FO. from fastopen and is good
 18788 00002E09 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18789                                  
 18790                                  	; The user has specified the root directory itself, rather than some
 18791                                  	; contents of it. We can't "find" that.
 18792                                  
 18793 00002E0B 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18794                                  					;   stuffing a -1 at Lastent
 18795 00002E11 E97DFF                  	JMP	find_no_more
 18796                                  
 18797                                  OKSTORE:
 18798 00002E14 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18799                                  DOSREL:
 18800                                  	; BX = offset NAME1 (from GETPATH)
 18801 00002E18 89DE                    	MOV	SI,BX			; SI-> start of entry
 18802                                  
 18803                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18804                                  
 18805                                  	;mov	cx,32
 18806 00002E1A B92000                  	MOV	CX,dir_entry.size
 18807                                  ;;;;; 7/29/86
 18808 00002E1D 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18809 00002E1F F3A4                    	REP	MOVSB
 18810 00002E21 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18811 00002E23 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18812 00002E27 7504                    	JNZ	short NO05
 18813 00002E29 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18814                                  NO05:
 18815                                  
 18816                                  ;;;;; 7/29/86
 18817                                  
 18818                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18819                                  	; 16/12/2022
 18820                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18821                                  	; MSDOS 6.0
 18822                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18823                                  	; 18/05/2019 - Retro DOS v4.0
 18824 00002E2D 16                      	push	ss
 18825 00002E2E 1F                      	pop	ds
 18826                                  	; 16/12/2022
 18827 00002E2F 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18828                                  
 18829                                  ;hkn; SS is DOSDATA
 18830                                  	;push	ss
 18831                                  	;pop	ds
 18832 00002E34 F8                      	CLC
 18833                                  	;call	LCritDisk
 18834                                  	;retn
 18835                                  	; 16/12/2022
 18836 00002E35 E9F5E4                  	jmp	LCritDisk
 18837                                  
 18838                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18839                                  ;----------------------------------------------------------------------------
 18840                                  ;
 18841                                  ; Procedure Name : DOS_SEARCH_NEXT
 18842                                  ;
 18843                                  ; Inputs:
 18844                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18845                                  ;	    (only first 21 bytes must have valid information)
 18846                                  ; Function:
 18847                                  ;	Look for subsequent matches
 18848                                  ; Outputs:
 18849                                  ;	CARRY CLEAR
 18850                                  ;	    The 53 bytes at DMAADD are updated for next call
 18851                                  ;		(see DOS_SEARCH_FIRST)
 18852                                  ;	CARRY SET
 18853                                  ;	    AX = error code
 18854                                  ;		error_no_more_files
 18855                                  ;			No more files to find
 18856                                  ; DS preserved, others destroyed
 18857                                  ;---------------------------------------------------------------------------
 18858                                  
 18859                                  ;hkn; called from search.asm. DS already set up at this point.
 18860                                  
 18861                                  DOS_SEARCH_NEXT:
 18862 00002E38 C43E[2C03]              	LES	DI,[DMAADD]
 18863 00002E3C 268A05                  	MOV	AL,[ES:DI]
 18864 00002E3F A880                    	TEST	AL,80H			; Test for NET
 18865 00002E41 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18866                                  ;IF NOT Installed
 18867                                  ;	transfer NET_SEARCH_NEXT
 18868                                  ;ELSE
 18869                                  	;mov	ax,111Ch
 18870 00002E43 B81C11                  	MOV	AX,(MultNET<<8)|28
 18871 00002E46 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18872                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18873                                  		     ; Return: CF set on error, AX = DOS error code
 18874                                  		     ; CF clear if successful
 18875 00002E48 C3                      	retn
 18876                                  ;ENDIF
 18877                                  
 18878                                  LOCAL_SEARCH_NEXT:
 18879                                  	;AL is drive A=1
 18880                                  	;mov	byte [EXTERR_LOCUS],2
 18881 00002E49 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18882 00002E4E E8C1E4                  	call	ECritDisk
 18883                                  
 18884                                  ;hkn; DummyCDS is in DOSDATA
 18885 00002E51 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18886                                  ;hkn; Segment address is DOSDATA - use ds
 18887                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18888 00002E57 8C1E[A405]              	mov	[THISCDS+2],DS
 18889                                  
 18890 00002E5B 0440                    	ADD	AL,'A'-1
 18891 00002E5D E8843B                  	call	InitCDS
 18892                                  
 18893                                  ;	call	GETTHISDRV		; Set CDS pointer
 18894                                  
 18895 00002E60 7236                    	JC	short No_files		; Bogus drive letter
 18896 00002E62 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18897                                  	;les	bp,[es:di+45h]
 18898 00002E66 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18899 00002E6A E8C5D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18900                                  
 18901                                  	 ;16/12/2022
 18902 00002E6D 268A4600                	mov	al,[ES:BP]
 18903                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18904                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18905 00002E71 A2[7605]                	mov	[THISDRV],AL
 18906                                  	;mov	word [CREATING],0E500h
 18907 00002E74 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18908 00002E7A C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18909 00002E7F C536[2C03]              	LDS	SI,[DMAADD]
 18910 00002E83 AC                      	LODSB				; Drive Byte
 18911                                  
 18912                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18913                                  RENAME_NEXT:
 18914                                  	;context ES
 18915 00002E84 16                      	push	ss
 18916 00002E85 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18917                                  
 18918                                  ;hkn; NAME1 is in DOSDATA
 18919 00002E86 BF[4B05]                	MOV	DI,NAME1
 18920                                  
 18921 00002E89 B90B00                  	MOV	CX,11
 18922 00002E8C F3A4                    	REP	MOVSB			; Search name
 18923 00002E8E AC                      	LODSB				; Attribute
 18924                                  
 18925                                  ;hkn; SS override
 18926 00002E8F 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18927 00002E93 AD                      	LODSW				; LastEnt
 18928 00002E94 09C0                    	OR	AX,AX
 18929 00002E96 7903                    	JNS	short cont_load
 18930                                  No_files:
 18931 00002E98 E9F6FE                  	JMP	find_no_more
 18932                                  
 18933                                  cont_load:
 18934 00002E9B 50                      	PUSH	AX			; Save LastEnt
 18935 00002E9C AD                      	LODSW				; DirStart
 18936 00002E9D 89C3                    	MOV	BX,AX
 18937                                  
 18938                                  ;hkn; SS is DOSDATA
 18939                                  	;context DS
 18940 00002E9F 16                      	push	ss
 18941 00002EA0 1F                      	pop	ds
 18942 00002EA1 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18943                                  	;invoke	SetDirSrch
 18944 00002EA5 E82410                  	call	SETDIRSRCH
 18945 00002EA8 7303                    	JNC	short SEARCH_GOON
 18946 00002EAA 58                      	POP	AX			; Clean stack
 18947 00002EAB EBEB                    	JMP	short No_files
 18948                                  
 18949                                  SEARCH_GOON:
 18950 00002EAD E80D13                  	call	STARTSRCH
 18951 00002EB0 58                      	POP	AX
 18952 00002EB1 E8E90F                  	call	GETENT
 18953 00002EB4 72E2                    	JC	short No_files
 18954 00002EB6 E81F0F                  	call	NEXTENT
 18955 00002EB9 72DD                    	JC	short No_files
 18956 00002EBB 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18957 00002EBD E9FDFE                  	JMP	found_it ; 10/08/2018
 18958                                  
 18959                                  ; MSDOS 6.0
 18960                                  ;---------------------------------------------------------------------------
 18961                                  ;
 18962                                  ; Procedure Name : CHECK_QUESTION
 18963                                  ;
 18964                                  ; Input: [WFP_START]= pointer to final path
 18965                                  ; Function: check '?' char
 18966                                  ; Output: carry clear, if no '?'
 18967                                  ;	 carry set, if '?' exists
 18968                                  ;---------------------------------------------------------------------------
 18969                                  
 18970                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18971                                  CHECK_QUESTION:
 18972                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18973                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18974 00002EC0 16                      	push	ss
 18975 00002EC1 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18976                                  	; 16/12/2022
 18977                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18978 00002EC2 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18979                                  	;mov	si,[ss:WFP_START]
 18980                                  getnext:				;AN000;
 18981 00002EC6 AC                      	LODSB				;AN000;;FO. get char
 18982 00002EC7 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18983 00002EC9 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18984 00002ECB 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18985 00002ECD 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18986 00002ECF F9                      	STC				;AN000;;FO.
 18987                                  NO_Question:				;AN000;
 18988 00002ED0 C3                      	retn				;AN000;;FO.
 18989                                  
 18990                                  ;============================================================================
 18991                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18992                                  ;============================================================================
 18993                                  ; 23/07/2018 - Retro DOS v3.0
 18994                                  ; 18/05/2019 - Retro DOS v4.0
 18995                                  
 18996                                  ;**
 18997                                  ;
 18998                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18999                                  ;  If process has NET resources a close all is sent out over the net.
 19000                                  ;
 19001                                  ;   DOS_ABORT
 19002                                  ;
 19003                                  ;   Modification history:
 19004                                  ;
 19005                                  ;       Created: ARR 30 March 1983
 19006                                  ;
 19007                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19008                                  ;				being terminated only if it is busy.
 19009                                  ;
 19010                                  
 19011                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19012                                  ;--------------------------------------------------------------------------
 19013                                  ;
 19014                                  ; Procedure Name : DOS_ABORT
 19015                                  ;
 19016                                  ; Inputs:
 19017                                  ;       [CurrentPDB] set to PID of process aborting
 19018                                  ; Function:
 19019                                  ;       Close all files and free all SFTs for this PID
 19020                                  ; Returns:
 19021                                  ;       None
 19022                                  ; All destroyed except stack
 19023                                  ;---------------------------------------------------------------------------
 19024                                  
 19025                                  DOS_ABORT:
 19026 00002ED1 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19027 00002ED6 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19028                                  reset_free_jfn:
 19029 00002EDB 89CB                    	MOV     BX,CX
 19030 00002EDD 51                      	PUSH    CX
 19031 00002EDE 4B                      	DEC     BX                      ; get jfn (start with last one)
 19032                                  
 19033 00002EDF E83638                  	CALL	_$CLOSE
 19034 00002EE2 59                      	POP     CX
 19035 00002EE3 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19036                                  
 19037                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19038                                  ; are running in the no-sharing no-network environment, we are simulating the
 19039                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19040                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19041                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19042                                  ;
 19043                                  ; If sharing is loaded, then the following call to close process will
 19044                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19045                                  ;
 19046                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19047                                  ; known network resources. These resources are then responsible for cleaning
 19048                                  ; up after this process.
 19049                                  ;
 19050                                  ; Sleazy, eh?
 19051                                  
 19052                                  	;context DS			; SS is DOSDATA
 19053 00002EE5 16                      	push	ss
 19054 00002EE6 1F                      	pop	ds  ; 09/09/2018
 19055                                  
 19056                                  	;CallInstall Net_Abort, MultNET, 29
 19057 00002EE7 B81D11                  	mov	ax, 111Dh
 19058 00002EEA CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19059                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19060                                  			; DS???, SS = DOS CS
 19061                                  ;if installed
 19062 00002EEC FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19063                                  ;else
 19064                                  ;	call 	MFTCloseP
 19065                                  ;endif
 19066                                  
 19067                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19068                                  ; counts.
 19069                                  					; SS override
 19070 00002EF0 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19071                                  	;mov	cx,[es:di+4]
 19072 00002EF5 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19073 00002EF9 E317                    	jcxz    FCBScanDone
 19074                                  	;lea	di,[di+6]
 19075 00002EFB 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19076 00002EFE 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19077                                  FCBTest:
 19078                                  	;cmp	[es:di+31h],ax
 19079 00002F02 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19080 00002F06 7505                    	jnz	short FCBNext		; no, skip it
 19081 00002F08 26C7050000              	mov	word [es:di],0
 19082                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19083                                  FCBNext:
 19084 00002F0D 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19085 00002F10 E2F0                    	loop    FCBTest
 19086                                  FCBScanDone:
 19087                                  
 19088                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19089                                  
 19090 00002F12 31DB                    	XOR     BX,BX
 19091                                  Scan:
 19092 00002F14 53                      	push    bx
 19093 00002F15 E87B37                  	call	SFFromSFN
 19094 00002F18 5B                      	pop     bx
 19095                                  	;jnc	short Scan1
 19096                                  	;retn
 19097                                  	; 18/12/2022
 19098 00002F19 72B5                    	jc	short NO_Question ; retn
 19099                                  
 19100                                  ;M038
 19101                                  ; Do what the comment above says, check for busy state
 19102                                  
 19103                                  Scan1:
 19104                                  	;cmp	word [es:di],0
 19105                                  	;jz	short scan_next  ; MSDOS 3.3
 19106                                  	; MSDOS 6.0
 19107 00002F1B 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19108                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19109                                  				; Is Sft busy? ;M038
 19110 00002F1F 7519                    	jnz	short scan_next
 19111                                  ;
 19112                                  ; we have a SFT that is busy. See if it is for the current process
 19113                                  ;
 19114 00002F21 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19115                                  	;cmp	[es:di+31h],ax
 19116 00002F25 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19117 00002F29 750F                    	jnz	short scan_next
 19118 00002F2B 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19119                                  	;cmp	[es:di+2Fh],ax
 19120 00002F2F 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19121 00002F33 7505                    	jnz	short scan_next
 19122                                  
 19123                                  ; This SFT is labelled as ours.
 19124                                  
 19125 00002F35 26C7050000              	mov	word [es:di],0
 19126                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19127                                  scan_next:
 19128 00002F3A 43                      	inc     bx
 19129 00002F3B EBD7                    	jmp     short Scan
 19130                                  
 19131                                  ;============================================================================
 19132                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19133                                  ;============================================================================
 19134                                  ; 23/07/2018 - Retro DOS v3.0
 19135                                  ; 18/05/2019 - Retro DOS v4.0
 19136                                  
 19137                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19138                                  ;
 19139                                  ;	DOS_CLOSE
 19140                                  ;	DOS_COMMIT
 19141                                  ;	FREE_SFT
 19142                                  ;	SetSFTTimes
 19143                                  ;
 19144                                  ;	Revision history:
 19145                                  ;
 19146                                  ;	   AN000  version 4.00	Jan. 1988
 19147                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19148                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19149                                  
 19150                                  ;Installed = TRUE
 19151                                  
 19152                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19153                                  ;---------------------------------------------------------------------------
 19154                                  ;
 19155                                  ; Procedure Name : DOS_CLOSE
 19156                                  ;
 19157                                  ; Inputs:
 19158                                  ;	[THISSFT] set to the SFT for the file being used
 19159                                  ; Function:
 19160                                  ;	Close the indicated file via the SFT
 19161                                  ; Returns:
 19162                                  ;	sf_ref_count decremented otherwise
 19163                                  ;	ES:DI point to SFT
 19164                                  ;	Carry set if error
 19165                                  ;	    AX has error code
 19166                                  ; DS preserved, others destroyed
 19167                                  ;---------------------------------------------------------------------------
 19168                                  
 19169                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 19170                                  
 19171                                  ; 18/05/2019 - Retro DOS v4.0
 19172                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19173                                  
 19174                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19175                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19176                                  
 19177                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19178                                  
 19179                                  DOS_CLOSE:
 19180 00002F3D C43E[9E05]              	LES	DI,[THISSFT]
 19181                                  	;mov	bx,[ES:DI+5]
 19182 00002F41 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19183                                  
 19184                                  ; Network closes are handled entirely by the net code.
 19185                                  
 19186                                  	;;test	bx,8000h
 19187                                  	;TEST	BX,sf_isnet
 19188                                  	; 17/12/2022
 19189                                  	;test	bh,80h
 19190 00002F45 F6C780                  	test	bh,(sf_isnet>>8)
 19191 00002F48 7406                    	JZ	short LocalClose
 19192                                  
 19193                                  	;CallInstall Net_Close,MultNET,6
 19194 00002F4A B80611                  	mov     ax,1106h
 19195 00002F4D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19196                                  			; ES:DI -> SFT
 19197                                  			; SFT DPB field -> DPB of drive containing file
 19198                                  			; Return: CF set on error, AX = DOS error code
 19199                                  			; CF clear if successful
 19200 00002F4F C3                      	retn
 19201                                  
 19202                                  ; All closes release the sharing information.
 19203                                  ; No commit releases sharing information
 19204                                  ;
 19205                                  ; All closes decrement the ref count.
 19206                                  ; No commit decrements the ref count.
 19207                                  
 19208                                  LocalClose:
 19209 00002F50 E8BFE3                  	call	ECritDisk
 19210 00002F53 E86401                  	CALL	SetSFTTimes
 19211 00002F56 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19212                                  
 19213                                  ;hkn; SS is DOSDATA
 19214                                  	;Context DS
 19215 00002F59 16                      	push	ss
 19216 00002F5A 1F                      	pop	ds
 19217                                  
 19218 00002F5B 50                      	push	ax
 19219 00002F5C 53                      	push	bx
 19220 00002F5D E81A44                  	call	ShareEnd
 19221 00002F60 5B                      	pop	bx
 19222 00002F61 58                      	pop	ax
 19223                                  
 19224                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19225                                  
 19226                                  CloseEntry:
 19227 00002F62 50                      	PUSH	AX
 19228                                  
 19229                                  ; File clean or device does not get stamped nor disk looked at.
 19230                                  
 19231                                  	;test	bx,0C0h
 19232                                  	; 17/12/2022
 19233 00002F63 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19234                                  	;TEST	BX,devid_file_clean+devid_device
 19235 00002F66 7403                    	JZ	short rdir
 19236                                  	; 14/11/2022
 19237 00002F68 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19238                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19239                                  
 19240                                  ; Retrieve the directory entry for the file
 19241                                  
 19242                                  rdir:
 19243 00002F6B E8DA00                  	CALL	DirFromSFT
 19244                                  	;mov	al,5
 19245 00002F6E B005                    	MOV	AL,error_access_denied
 19246 00002F70 7303                    	JNC	short clook
 19247                                  	; 14/11/2022
 19248 00002F72 E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19249                                  	;jc	short CloseFinish ; 24/07/2019
 19250                                  clook:
 19251                                  
 19252                                  ; ES:DI points to entry
 19253                                  ; DS:SI points to SFT
 19254                                  ; ES:BX points to buffer header
 19255                                  
 19256 00002F75 57                      	push	di
 19257 00002F76 56                      	push	si
 19258                                  	;lea	si,[si+20h]
 19259 00002F77 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19260                                  
 19261                                  ; ES:DI point to directory entry
 19262                                  ; DS:SI point to unpacked name
 19263                                  
 19264 00002F7A E887E2                  	call	XCHGP
 19265                                  
 19266                                  ; ES:DI point to unpacked name
 19267                                  ; DS:SI point to directory entry
 19268                                  
 19269 00002F7D E8B60E                  	call	MetaCompare
 19270 00002F80 E881E2                  	call	XCHGP
 19271 00002F83 5E                      	pop	si
 19272 00002F84 5F                      	pop	di
 19273 00002F85 740C                    	JZ	short CLOSE_GO		; Name OK
 19274                                  Bye:	
 19275 00002F87 89F7                    	MOV	DI,SI
 19276 00002F89 1E                      	PUSH	DS
 19277 00002F8A 07                      	POP	ES			; ES:DI points to SFT
 19278 00002F8B 16                      	PUSH	SS
 19279 00002F8C 1F                      	POP	DS
 19280 00002F8D F9                      	STC
 19281                                  	;mov	al,2
 19282 00002F8E B002                    	MOV	AL,error_file_not_found
 19283 00002F90 E99600                  	JMP	CloseFinish ; 24/07/2019
 19284                                  
 19285                                  	; 18/05/2019 - Retro DOS v4.0
 19286                                  CLOSE_GO:
 19287                                  	; MSDOS 6.0
 19288                                  	;test	word [si+2],8000h
 19289                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19290                                  	; 17/12/2022
 19291                                  	;test	byte [si+3],80h
 19292 00002F93 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19293 00002F97 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19294                                  	; MSDOS 3.3 & MSDOS 6.0
 19295                                  	;mov	ch,[es:di+0Bh]
 19296 00002F99 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19297                                  	;mov	al,[si+4]
 19298 00002F9D 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19299                                  
 19300                                  ;hkn; SS override
 19301 00002FA0 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19302                                  	; MSDOS 3.3
 19303                                  	;;call	MatchAttributes
 19304                                  	;;JNZ	short Bye		; attributes do not match
 19305                                  	; 18/05/2019
 19306 00002FA4 EB07                    	JMP	SHORT setattr		;FT.
 19307                                  nofcb:
 19308                                  	; MSDOS 6.0
 19309                                  	;mov	al,[si+4]
 19310 00002FA6 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19311 00002FA9 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19312                                  setattr:
 19313                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19314                                  	;or	byte [es:di+0Bh],20h
 19315 00002FAD 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19316                                  	; MSDOS 6.0
 19317                                  	;mov	ax,[es:di+1Ah]
 19318 00002FB2 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19319                                  					;F.O. save old first cluster
 19320                                  ;hkn; SS override
 19321 00002FB6 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19322                                  
 19323                                  	;mov	ax,[si+0Bh]
 19324 00002FBA 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19325                                  	;mov	[es:di+1Ah],ax
 19326 00002FBD 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19327                                  	;mov	ax,[si+11h]
 19328 00002FC1 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19329                                  	;mov	[es:di+1Ch],ax
 19330 00002FC4 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19331                                  	;mov	ax,[si+13h]
 19332 00002FC8 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19333                                  	;mov	[es:di+1Eh],ax
 19334 00002FCB 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19335                                  	;mov	ax,[si+0Fh]
 19336 00002FCF 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19337                                  	;mov	[es:di+18h],ax
 19338 00002FD2 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19339                                  	;mov	ax,[si+0Dh]
 19340 00002FD6 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19341                                  	;mov	[es:di+16h],ax
 19342 00002FD9 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19343                                  
 19344                                  	; MSDOS 6.0
 19345                                  ;; File Tagging
 19346 00002FDD 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19347                                  				  ;LB. if already dirty		    ;AN000;
 19348 00002FE2 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19349                                  	; 02/06/2019
 19350 00002FE4 E8752B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19351                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19352                                  	;or	byte [es:bx+5],40h
 19353 00002FE7 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19354                                  yesdirty4:
 19355 00002FEC 1E                      	push	ds
 19356 00002FED 56                      	push	si
 19357                                  	; MSDOS 6.0
 19358                                  	;mov	cx,[si+0Bh]
 19359                                  	; 07/12/2022
 19360 00002FEE 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19361                                  ;hkn; SS override
 19362 00002FF1 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19363                                  	; MSDOS 3.3 
 19364                                  	;push	ss
 19365                                  	;pop	ds
 19366                                  	;MOV	AL,[THISDRV]
 19367                                  ;;; 10/1/86  update fastopen cache
 19368                                  	; MSDOS 3.3 & MSDOS 6.0
 19369 00002FF5 52                      	PUSH	DX
 19370 00002FF6 B400                    	MOV	AH,0			; dir entry update
 19371 00002FF8 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19372                                  	; MSDOS 6.0
 19373 00002FFA 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19374 00002FFC 750D                    	JNZ	short do_update2	;AN005; no, do update
 19375 00002FFE B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19376                                  	;mov	di,[si+1Bh]
 19377 00003000 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19378                                  	;mov	cx,[si+1Dh]
 19379 00003003 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19380                                  	;mov	dh,[si+1Fh]
 19381 00003006 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19382 00003009 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19383                                  do_update2:				;AN011;F.O.
 19384                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19385                                  	; 
 19386 0000300B 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19387 00003010 7407                    	JZ	short do_update		;AN011;F.O. yes
 19388 00003012 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19389 00003014 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19390                                  do_update:				;AN005;
 19391                                  ;hkn; SS is DOSDATA
 19392                                  	;Context DS
 19393 00003019 16                      	push	ss
 19394 0000301A 1F                      	pop	ds	
 19395                                  	; MSDOS 3.3 & MSDOS 6.0
 19396 0000301B E8E5F6                  	call	FastOpen_Update 	; invoke fastopen
 19397 0000301E 5A                      	POP	DX
 19398                                  
 19399                                  ;;; 10/1/86  update fastopen cache
 19400 0000301F E8352A                  	call	FLUSHBUF		; flush all relevant buffers
 19401 00003022 5F                      	pop	di
 19402 00003023 07                      	pop	es
 19403                                  	;mov	al,5
 19404 00003024 B005                    	MOV	AL,error_access_denied
 19405 00003026 7201                    	JC	short CloseFinish
 19406                                  FREE_SFT_OK:
 19407 00003028 F8                      	CLC				; signal no error.
 19408                                  CloseFinish:
 19409                                  
 19410                                  ; Indicate to the device that the SFT is being closed.
 19411                                  
 19412                                  ;;;; 7/21/86
 19413 00003029 9C                      	PUSHF				; save flag from DirFromSFT
 19414 0000302A E8D215                  	call	DEV_CLOSE_SFT
 19415 0000302D 9D                      	POPF
 19416                                  ;;;; 7/21/86
 19417                                  ;
 19418                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19419                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19420                                  ; going to be moving from busy to free.
 19421                                  ;
 19422 0000302E 59                      	POP	CX			; get old ref count
 19423 0000302F 9C                      	PUSHF
 19424 00003030 49                      	DEC	CX			; if cx != 1
 19425 00003031 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19426 00003033 26890D                  	mov	[es:di],cx
 19427                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19428                                  NoFree:
 19429 00003036 E8F4E2                  	call	LCritDisk
 19430 00003039 9D                      	POPF
 19431 0000303A C3                      	retn
 19432                                  
 19433                                  ;---------------------------------------------------------------------------
 19434                                  ;
 19435                                  ; Procedure Name : FREE_SFT
 19436                                  ;
 19437                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19438                                  ; Flags preserved. Return old ref count in AX
 19439                                  ;
 19440                                  ; Note that busy is indicated by the SFT ref count being -1.
 19441                                  ;
 19442                                  ;---------------------------------------------------------------------------
 19443                                  
 19444                                  FREE_SFT:
 19445 0000303B 9C                      	PUSHF		; Save carry state
 19446 0000303C 268B05                  	mov	ax,[es:di]
 19447                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19448 0000303F 48                      	DEC	AX
 19449 00003040 7501                    	JNZ	short SetCount
 19450 00003042 48                      	DEC	AX
 19451                                  SetCount:
 19452 00003043 268705                  	xchg	ax,[es:di]
 19453                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19454 00003046 9D                      	POPF
 19455 00003047 C3                      	retn
 19456                                  
 19457                                  	; 18/05/2019 - Retro DOS v4.0
 19458                                  
 19459                                  ;----------------------------------------------------------------------------
 19460                                  ;
 19461                                  ; Procedure Name : DirFromSFT
 19462                                  ;
 19463                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19464                                  ;
 19465                                  ;   Inputs:	ES:DI point to SFT
 19466                                  ;		DS = DOSDATA
 19467                                  ;   Outputs:
 19468                                  ;		EXTERR_LOCUS = errLOC_Disk
 19469                                  ;		CurBuf points to buffer
 19470                                  ;		Carry Clear -> operation OK
 19471                                  ;		    ES:DI point to entry
 19472                                  ;		    ES:BX point to buffer
 19473                                  ;		    DS:SI point to SFT
 19474                                  ;		Carry SET   -> operation failed
 19475                                  ;		    registers trashified
 19476                                  ;   Registers modified: ALL
 19477                                  ;----------------------------------------------------------------------------
 19478                                  
 19479                                  DirFromSFT:
 19480                                  	;mov	byte [EXTERR_LOCUS],2
 19481 00003048 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19482 0000304D 06                      	push	es
 19483 0000304E 57                      	push	di
 19484                                  	; MSDOS 3.3
 19485                                  	;;mov	dx,[es:di+1Dh]
 19486                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19487                                  	; MSDOS 6.0
 19488                                  	;mov	dx,[es:[di+1Dh]
 19489 0000304F 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19490 00003053 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19491                                  	;mov	dx,[es:di+1Bh]
 19492 00003057 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19493                                  	; 19/05/2019
 19494 0000305B FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19495                                  	; MSDOS 3.3 & MSDOS 6.0
 19496 0000305F 52                      	PUSH	DX
 19497 00003060 E86B26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19498                                  					; [THISDPB] set
 19499 00003063 5A                      	POP	DX
 19500 00003064 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19501 00003068 721E                    	JC	short PopDone
 19502                                  	; 22/09/2023
 19503                                  	;XOR	AL,AL	; *		; Pre read
 19504                                  	;;mov	byte [ALLOWED],18h
 19505                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19506                                  	;call	GETBUFFR
 19507                                  	; 22/09/2023
 19508 0000306A E8E628                  	call	GETBUFFER ; * 		; Pre read
 19509 0000306D 7219                    	JC	short PopDone
 19510 0000306F 5E                      	pop	si
 19511 00003070 1F                      	pop	ds			; Get back SFT pointer
 19512                                  
 19513                                  ;hkn; SS override
 19514 00003071 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19515                                  	;or	byte [es:di+5],4
 19516 00003076 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19517 0000307B 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19518                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19519                                  	;lea	di,[di+20] ; MSDOS 6.0
 19520 0000307D 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19521                                  	;mov	al,32
 19522 00003080 B020                    	MOV	AL,dir_entry.size
 19523                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19524 00003082 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19525 00003085 01C7                    	ADD	DI,AX			; Point at the entry
 19526 00003087 C3                      	retn				; carry is clear
 19527                                  PopDone:
 19528 00003088 5F                      	pop	di
 19529 00003089 07                      	pop	es
 19530                                  PopDone_retn:
 19531 0000308A C3                      	retn
 19532                                  
 19533                                  ;----------------------------------------------------------------------------
 19534                                  ;
 19535                                  ;**	DOS_Commit - UPdate Directory Entries
 19536                                  ;
 19537                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19538                                  ;		(DS) = DOSGROUP
 19539                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19540                                  ;	USES	all but DS
 19541                                  ;
 19542                                  ;----------------------------------------------------------------------------
 19543                                  
 19544                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19545                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19546                                  
 19547                                  DOS_COMMIT:
 19548                                  	;hkn; called from srvcall. DS already set up.
 19549 0000308B C43E[9E05]              	LES	DI,[THISSFT]
 19550                                  	;mov	bx,[es:di+5]
 19551 0000308F 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19552                                  	;test	bx,0C0h
 19553                                  	; 17/12/2022
 19554 00003093 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19555                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19556 00003096 75F2                    	jnz	short PopDone_retn
 19557                                  	;test	bx,8000h
 19558                                  	; 17/12/2022
 19559                                  	;test	bh,80h
 19560 00003098 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19561                                  	;TEST	BX,sf_isnet ; 8000h
 19562 0000309B 7406                    	JZ	short LOCAL_COMMIT
 19563                                  
 19564                                  ;IF NOT Installed
 19565                                  ;	transfer NET_COMMIT
 19566                                  ;ELSE
 19567                                  	;mov	ax,1107h
 19568 0000309D B80711                  	MOV	AX,(MultNET<<8)|7
 19569 000030A0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19570                                  			; ES:DI -> SFT
 19571                                  			; SFT DPB field -> DPB of drive containing file
 19572                                  			; Return: CF set on error, AX = DOS error code
 19573                                  			; CF clear if successful
 19574                                  localcommit_retn: ; 18/12/2022	
 19575 000030A2 C3                      	retn
 19576                                  ;ENDIF
 19577                                  
 19578                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19579                                  ; There are three ways we can do this. One is to enter a critical section to
 19580                                  ; protect a potential free. The second is to increment the ref count to mask
 19581                                  ; the close decrementing.
 19582                                  ;
 19583                                  ; The proper way is to let the caller's of close decide if a decrement should
 19584                                  ; be done. We do this by providing another entry into close after the
 19585                                  ; decrement and after the share information release.
 19586                                  
 19587                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19588                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19589                                  
 19590                                  LOCAL_COMMIT:
 19591 000030A3 E86CE2                  	call	ECritDisk
 19592                                  	; MSDOS 6.0
 19593 000030A6 E869E2                  	call	ECritDisk	;PTM.
 19594 000030A9 E80E00                  	call	SetSFTTimes
 19595 000030AC B8FFFF                  	MOV	AX,-1
 19596 000030AF E8B0FE                  	call	CloseEntry
 19597                                  	; MSDOS 6.0
 19598 000030B2 9C                      	PUSHF			;PTM.				;AN000;
 19599 000030B3 E84115                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19600 000030B6 9D                      	POPF			;PTM.				;AN000;
 19601                                  	;call	LCritDisk	;PTM.				;AN000;
 19602                                  	; 18/12/2022
 19603 000030B7 E973E2                  	jmp	LCritDisk
 19604                                  ;localcommit_retn:
 19605                                  ;	retn
 19606                                  
 19607                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19608                                  ;----------------------------------------------------------------------------
 19609                                  ;
 19610                                  ; Procedure Name : SetSFTTimes
 19611                                  ;
 19612                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19613                                  ;   Reflect these times in other SFT's for the same file.
 19614                                  ;
 19615                                  ;   Inputs:	ES:DI point to SFT
 19616                                  ;		BX = sf_flags set apprpriately
 19617                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19618                                  ;   Registers modified: All except ES:DI, BX, AX
 19619                                  ;
 19620                                  ;----------------------------------------------------------------------------
 19621                                  
 19622                                  SetSFTTimes:
 19623                                  ;	File clean or device does not get stamped nor disk looked at.
 19624                                  	
 19625                                  	;test	bx,0C0h
 19626                                  	; 17/12/2022
 19627 000030BA F6C3C0                  	test	bl,devid_file_clean+devid_device
 19628                                  	;TEST	BX,devid_file_clean+devid_device
 19629                                  	;retnz				; clean or device => no timestamp
 19630 000030BD 75E3                    	jnz	short localcommit_retn
 19631                                  
 19632                                  ;	file and dirty. See if date is good
 19633                                  
 19634                                  	;test	bx,4000h
 19635                                  	; 17/12/2022
 19636                                  	;test	bh,40h
 19637 000030BF F6C740                  	test	bh,(sf_close_nodate>>8)
 19638                                  	;TEST	BX,sf_close_nodate
 19639                                  	;retnz				; nodate => no timestamp
 19640 000030C2 75DE                    	jnz	short localcommit_retn
 19641                                  
 19642 000030C4 50                      	push	ax
 19643 000030C5 53                      	push	bx
 19644 000030C6 E82CDA                  	call	DATE16			; Date/Time to AX/DX
 19645                                  	;mov	[es:di+0Fh],ax
 19646 000030C9 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19647                                  	;mov	[es:di+0Dh],dx
 19648 000030CD 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19649 000030D1 31C0                    	XOR	AX,AX
 19650                                  ;if installed
 19651                                  	;call	JShare + 14 * 4
 19652 000030D3 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19653                                  ;else
 19654                                  ;	call	ShSU
 19655                                  ;endif
 19656 000030D7 5B                      	pop	bx
 19657 000030D8 58                      	pop	ax
 19658 000030D9 C3                      	retn
 19659                                  
 19660                                  ;============================================================================
 19661                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19662                                  ;============================================================================
 19663                                  ; 23/07/2018 - Retro DOS v3.0
 19664                                  ; 18/05/2019 - Retro DOS v4.0
 19665                                  
 19666                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19667                                  
 19668                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19669                                  ;NAME  DIRCALL
 19670                                  
 19671                                  ;**	Low level directory manipulation routines for making removing and
 19672                                  ;	  verifying local or NET directories
 19673                                  ;
 19674                                  ;	DOS_MKDIR
 19675                                  ;	DOS_CHDIR
 19676                                  ;	DOS_RMDIR
 19677                                  ;
 19678                                  ;	Modification history:
 19679                                  ;
 19680                                  ;		Created: ARR 30 March 1983
 19681                                  
 19682                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19683                                  ;---------------------------------------------------------------------------
 19684                                  ;
 19685                                  ; Procedure Name : DOS_MkDir
 19686                                  ;
 19687                                  ; Inputs:
 19688                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19689                                  ;		terminated)
 19690                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19691                                  ;		( = -1 if current dir not involved, else
 19692                                  ;		 Points to first char after last "/" of current dir part)
 19693                                  ;	[THISCDS] Points to CDS being used
 19694                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19695                                  ; Function:
 19696                                  ;	Make a new directory
 19697                                  ; Returns:
 19698                                  ;	Carry Clear
 19699                                  ;		No error
 19700                                  ;	Carry Set
 19701                                  ;	    AX is error code
 19702                                  ;		error_path_not_found
 19703                                  ;			Bad path (not in curr dir part if present)
 19704                                  ;		error_bad_curr_dir
 19705                                  ;			Bad path in current directory part of path
 19706                                  ;		error_access_denied
 19707                                  ;			Already exists, device name
 19708                                  ; DS preserved, Others destroyed
 19709                                  ;---------------------------------------------------------------------------
 19710                                  
 19711                                  ;hkn; called from path.asm. DS already set up.
 19712                                  
 19713                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19714                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19715                                  
 19716                                  DOS_MKDIR:
 19717 000030DA E873E1                  	call	TestNet
 19718 000030DD 7313                    	JNC	short LOCAL_MKDIR
 19719                                  
 19720                                  ;IF NOT Installed
 19721                                  ;	transfer NET_MKDIR
 19722                                  ;ELSE
 19723                                  	;mov	ax,1103h
 19724 000030DF B80311                  	MOV	AX,(MultNET<<8)|3
 19725 000030E2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19726                                  			; SS = DOS CS
 19727                                  			; SDA first filename pointer -> fully-qualified directory name
 19728                                  			; SDA CDS pointer -> current directory
 19729                                  			; Return: CF set on error, AX = DOS error code
 19730                                  			; CF clear if successful
 19731 000030E4 C3                      	retn
 19732                                  ;ENDIF
 19733                                  
 19734                                  NODEACCERRJ:
 19735                                  	;mov	ax,5
 19736 000030E5 B80500                  	MOV	AX,error_access_denied
 19737                                  _BadRet:
 19738 000030E8 F9                      	STC
 19739                                  	;call	LCritDisk
 19740                                  	;retn
 19741                                  	; 18/12/2022
 19742 000030E9 E941E2                  	jmp	LCritDisk
 19743                                  
 19744                                  PATHNFJ:
 19745 000030EC E83EE2                  	call	LCritDisk
 19746 000030EF E9EFF9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19747                                  
 19748                                  LOCAL_MKDIR:
 19749 000030F2 E81DE2                  	call	ECritDisk
 19750                                  
 19751                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19752                                  
 19753 000030F5 8C16[A005]              	MOV	[THISSFT+2],SS
 19754                                  
 19755                                  ;hkn; DOSDATA
 19756 000030F9 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19757                                  
 19758                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19759                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19760                                  
 19761                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19762 000030FF C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19763                                  				; make sure SHARER won't complain.
 19764                                  	;mov	al,10h
 19765 00003105 B010                    	MOV	AL,attr_directory
 19766 00003107 E88C18                  	call	MakeNode
 19767 0000310A 72E0                    	JC	short PATHNFJ
 19768 0000310C 83F803                  	CMP	AX,3
 19769 0000310F 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19770 00003111 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19771 00003115 C53E[E205]              	LDS	DI,[CURBUF]
 19772 00003119 29FE                    	SUB	SI,DI
 19773 0000311B 56                      	PUSH	SI		; Pointer to dir_first
 19774                                  	; MSDOS 6.0
 19775                                  	;push	word [DI+8]
 19776 0000311C FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19777                                  	; MSDOS 3.3 & MSDOS 6.0
 19778                                  	;push	word [di+6]
 19779 0000311F FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19780 00003122 16                      	push	ss
 19781 00003123 1F                      	pop	ds
 19782 00003124 FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19783 00003128 31C0                    	XOR	AX,AX
 19784 0000312A A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19785 0000312D E8A217                  	call	NEWDIR
 19786 00003130 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 19787 00003132 E8680D                  	call	GETENT		; First entry
 19788 00003135 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19789 00003137 C43E[E205]              	LES	DI,[CURBUF]
 19790                                  
 19791                                  	; MSDOS 6.0
 19792 0000313B 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19793                                  				 ;LB. if already dirty		    ;AN000;
 19794 00003140 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19795 00003142 E8172A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19796                                  	
 19797                                  	; MSDOS 3.3 & MSDOS 6.0
 19798                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19799 00003145 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19800                                  yesdirty5:
 19801                                  	;;add	di,16 ; MSDOS 3.3
 19802                                  	;add	di,20 ; MSDOS 6.0
 19803 0000314A 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19804 0000314D B82E20                  	MOV	AX,202EH	; ". "
 19805 00003150 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19806 00003154 E81B18                  	call	SETDOTENT
 19807 00003157 B82E2E                  	MOV	AX,2E2EH	; ".."
 19808 0000315A 5A                      	POP	DX		; Parent
 19809 0000315B E81418                  	call	SETDOTENT
 19810 0000315E C42E[8A05]              	LES	BP,[THISDPB]
 19811                                  	; 22/09/2023
 19812                                  	;;mov	byte [ALLOWED],18h
 19813                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19814 00003162 5A                      	POP	DX		; Entry sector
 19815                                  	; MSDOS 6.0
 19816 00003163 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19817                                  
 19818                                  	;XOR	AL,AL ; *	; Pre read
 19819                                  	;call	GETBUFFR
 19820                                  	; 22/09/2023
 19821 00003167 E8E927                  	call	GETBUFFER ; *	 ;Pre read
 19822 0000316A 725B                    	JC	short NODEEXISTSP
 19823 0000316C 8B16[C205]              	MOV	DX,[DIRSTART]
 19824 00003170 C53E[E205]              	LDS	DI,[CURBUF]
 19825                                  	;or	byte [di+5],4
 19826 00003174 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19827 00003178 5E                      	POP	SI		; dir_first pointer
 19828 00003179 01FE                    	ADD	SI,DI
 19829 0000317B 8914                    	MOV	[SI],DX
 19830 0000317D 31D2                    	XOR	DX,DX
 19831 0000317F 895402                  	MOV	[SI+2],DX	; Zero size
 19832 00003182 895404                  	MOV	[SI+4],DX
 19833                                  DIRUP:
 19834                                  	; MSDOS 6.0
 19835 00003185 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19836                                  	;			 ;LB. if already dirty 		   ;AN000;
 19837 00003189 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19838 0000318B E8CE29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19839                                  	
 19840                                  	; MSDOS 3.3 & MSDOS 6.0
 19841                                  	;or	byte [di+5],40h
 19842 0000318E 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19843                                  yesdirty6:
 19844 00003192 16                      	push	ss
 19845 00003193 1F                      	pop	ds
 19846 00003194 268A4600                	mov	al,[es:bp]
 19847                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19848 00003198 E8BC28                  	call	FLUSHBUF
 19849                                  	;mov	ax,5
 19850 0000319B B80500                  	MOV	AX,error_access_denied
 19851                                  	;call	LCritDisk
 19852                                  	;retn
 19853                                  	; 18/12/2022
 19854 0000319E E98CE1                  	jmp	LCritDisk
 19855                                  
 19856                                  NODEEXISTSPOPDEL:
 19857 000031A1 5A                      	POP	DX		; Parent
 19858 000031A2 5A                      	POP	DX		; Entry sector
 19859                                  	; MSDOS 6.0 
 19860 000031A3 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19861 000031A7 C42E[8A05]              	LES	BP,[THISDPB]
 19862                                  	; 22/09/2023
 19863                                  	;;mov	byte [ALLOWED],18h
 19864                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19865                                  	;XOR	AL,AL ; *	; Pre read
 19866                                  	;call	GETBUFFR
 19867                                  	; 22/09/2023
 19868 000031AB E8A527                  	call	GETBUFFER ; *	; Pre read
 19869 000031AE 7217                    	JC	short NODEEXISTSP
 19870 000031B0 C53E[E205]              	LDS	DI,[CURBUF]
 19871                                  	;or	byte [di+5],4
 19872 000031B4 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19873 000031B8 5E                      	POP	SI		; dir_first pointer
 19874 000031B9 01FE                    	ADD	SI,DI
 19875                                  	;sub	si,1Ah ; 26
 19876 000031BB 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19877 000031BE C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19878 000031C1 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19879                                  NODEEXISTS:
 19880 000031C4 E91EFF                  	JMP	NODEACCERRJ ; 10/08/2018
 19881                                  
 19882                                  NODEEXISTSP:
 19883 000031C7 5E                      	POP	SI		; Clean stack
 19884 000031C8 EBFA                    	JMP	short NODEEXISTS
 19885                                  
 19886                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19887                                  
 19888                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19889                                  ;----------------------------------------------------------------------------
 19890                                  ;
 19891                                  ; Procedure Name : DOS_ChDir
 19892                                  ;
 19893                                  ; Inputs:
 19894                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19895                                  ;		terminated)
 19896                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19897                                  ;		( = -1 if current dir not involved, else
 19898                                  ;		 Points to first char after last "/" of current dir part)
 19899                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19900                                  ; Function:
 19901                                  ;	Validate the path for potential new current directory
 19902                                  ; Returns:
 19903                                  ;	NOTE:
 19904                                  ;	    [SATTRIB] is modified by this call
 19905                                  ;	Carry Clear
 19906                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19907                                  ;		Caller must NOT set ID fields on a NET CDS.
 19908                                  ;	Carry Set
 19909                                  ;	    AX is error code
 19910                                  ;		error_path_not_found
 19911                                  ;			Bad path
 19912                                  ;		error_access_denied
 19913                                  ;			device or file name
 19914                                  ; DS preserved, Others destroyed
 19915                                  ;----------------------------------------------------------------------------
 19916                                  
 19917                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19918                                  
 19919                                  ; 18/05/2019 - Retro DOS v4.0
 19920                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19921                                  
 19922                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19923                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19924                                  
 19925                                  DOS_CHDIR:
 19926 000031CA E883E0                  	call	TestNet
 19927 000031CD 7306                    	JNC	short LOCAL_CHDIR
 19928                                  
 19929                                  ;IF NOT Installed
 19930                                  ;	transfer NET_CHDIR
 19931                                  ;ELSE
 19932                                  	;mov	ax,1105h
 19933 000031CF B80511                  	MOV	AX,(MultNET<<8)|5
 19934 000031D2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19935                                  			; SS = DOS CS
 19936                                  			; SDA first filename pointer -> fully-qualified directory name
 19937                                  			; SDA CDS pointer -> current directory
 19938                                  			; Return: CF set on error, AX = DOS error code
 19939                                  			; CF clear if successful
 19940 000031D4 C3                      	retn
 19941                                  ;ENDIF
 19942                                  
 19943                                  LOCAL_CHDIR:
 19944 000031D5 E83AE1                  	call	ECritDisk
 19945                                  	; MSDOS 6.0
 19946                                  	;;test	word [es:di+43h],2000h
 19947                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19948                                  	; 17/12/2022
 19949                                  	;test	byte [es:di+44h],20h
 19950 000031D8 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19951 000031DD 7406                    	JZ	short nojoin		   ;PTM.
 19952                                  	;mov	word [es:di+49h], 0FFFFh
 19953 000031DF 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19954                                  nojoin:
 19955                                  	; MSDOS 3.3 & MSDOS 6.0
 19956 000031E5 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19957                                  	;mov	byte [SATTRIB],16h
 19958 000031EA C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19959                                  				; Dir calls can find these
 19960                                  ; DOS 3.3  6/24/86 FastOpen
 19961 000031EF 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19962 000031F4 E8320D                  	call	GETPATH
 19963 000031F7 9C                      	PUSHF						;AN000;
 19964 000031F8 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19965 000031FD 9D                      	POPF						;AN000;
 19966                                  ; DOS 3.3  6/24/86 FastOpen
 19967                                  
 19968                                  	; MSDOS 3.3
 19969                                  	;mov	byte [FastOpenFlg],0
 19970                                  	
 19971                                  	;mov	ax,3
 19972 000031FE B80300                  	MOV	AX,error_path_not_found
 19973 00003201 7207                    	JC	short ChDirDone
 19974 00003203 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19975 00003205 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19976 00003209 F8                      	CLC
 19977                                  ChDirDone:
 19978                                  	;call	LCritDisk
 19979                                  	;retn
 19980                                  	; 18/12/2022
 19981 0000320A E920E1                  	jmp	LCritDisk
 19982                                  
 19983                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19984                                  ;----------------------------------------------------------------------------
 19985                                  ;
 19986                                  ; Procedure Name : DOS_RmDir
 19987                                  ;
 19988                                  ; Inputs:
 19989                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19990                                  ;		terminated)
 19991                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19992                                  ;		( = -1 if current dir not involved, else
 19993                                  ;		 Points to first char after last "/" of current dir part)
 19994                                  ;	[THISCDS] Points to CDS being used
 19995                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19996                                  ; Function:
 19997                                  ;	Remove a directory
 19998                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19999                                  ; Returns:
 20000                                  ;	NOTE:
 20001                                  ;	    [SATTRIB] is modified by this call
 20002                                  ;	Carry Clear
 20003                                  ;		No error
 20004                                  ;	Carry Set
 20005                                  ;	    AX is error code
 20006                                  ;		error_path_not_found
 20007                                  ;			Bad path (not in curr dir part if present)
 20008                                  ;		error_bad_curr_dir
 20009                                  ;			Bad path in current directory part of path
 20010                                  ;		error_access_denied
 20011                                  ;			device or file name, root directory
 20012                                  ;			Bad directory ('.' '..' messed up)
 20013                                  ; DS preserved, Others destroyed
 20014                                  ;----------------------------------------------------------------------------
 20015                                  
 20016                                  ;hkn; called from path.asm. DS already set up.
 20017                                  
 20018                                  ; 18/05/2019 - Retro DOS v4.0
 20019                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20020                                  
 20021                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20022                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20023                                  
 20024                                  DOS_RMDIR:
 20025 0000320D E840E0                  	call	TestNet
 20026 00003210 7306                    	JNC	short LOCAL_RMDIR
 20027                                  
 20028                                  ;IF NOT Installed
 20029                                  ;	transfer NET_RMDIR
 20030                                  ;ELSE
 20031                                  	;mov	ax,1101h
 20032 00003212 B80111                  	MOV	AX,(MultNET<<8)|1
 20033 00003215 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20034                                  			; SS = DOS CS
 20035                                  			; SDA first filename pointer -> fully-qualified directory name
 20036                                  			; SDA CDS pointer -> current directory
 20037                                  			; Return: CF set on error, AX = DOS error code
 20038                                  			; CF clear if successful
 20039 00003217 C3                      	retn
 20040                                  ;ENDIF
 20041                                  
 20042                                  LOCAL_RMDIR:
 20043 00003218 E8F7E0                  	call	ECritDisk
 20044 0000321B C606[4C03]00            	MOV	byte [NoSetDir],0
 20045                                  	;mov	byte [SATTRIB],16h
 20046 00003220 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20047                                  					; Dir calls can find these
 20048 00003225 E8010D                  	call	GETPATH
 20049 00003228 720C                    	JC	short NOPATH		; Path not found
 20050 0000322A 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20051 0000322C 8B3E[C205]              	MOV	DI,[DIRSTART]
 20052 00003230 09FF                    	OR	DI,DI			; Root ?
 20053 00003232 750E                    	JNZ	short rmdir_get_buf	; No
 20054 00003234 EB09                    	JMP	SHORT NOTDIRPATH
 20055                                  
 20056                                  NOPATH:
 20057                                  	;mov	ax,3
 20058 00003236 B80300                  	MOV	AX,error_path_not_found
 20059 00003239 E9ACFE                  	JMP	_BadRet
 20060                                  
 20061                                  NOTDIRPATHPOP:
 20062 0000323C 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20063 0000323D 58                      	POP	AX
 20064                                  NOTDIRPATHPOP2:
 20065 0000323E 58                      	POP	AX
 20066                                  NOTDIRPATH:
 20067 0000323F E9A3FE                  	JMP	NODEACCERRJ
 20068                                  
 20069                                  rmdir_get_buf:
 20070 00003242 C53E[E205]              	LDS	DI,[CURBUF]
 20071 00003246 29FB                    	SUB	BX,DI		; Compute true offset
 20072 00003248 53                      	PUSH	BX		; Save entry pointer
 20073                                  	
 20074                                  	; MSDOS 6.0
 20075                                  	;push	word [di+8]
 20076 00003249 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20077                                  	
 20078                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20079                                  	;push	word [di+6]
 20080 0000324C FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20081                                  
 20082                                  ;hkn; SS is DOSDATA
 20083                                  	;context DS
 20084 0000324F 16                      	push	ss
 20085 00003250 1F                      	pop	ds
 20086                                  	;context ES
 20087 00003251 16                      	push	ss
 20088 00003252 07                      	pop	es
 20089                                  
 20090                                  ;hkn; NAME1 is in DOSDATA
 20091 00003253 BF[4B05]                	MOV	DI,NAME1
 20092 00003256 B03F                    	MOV	AL,'?'
 20093 00003258 B90B00                  	MOV	CX,11
 20094 0000325B F3AA                    	REP	STOSB
 20095 0000325D 30C0                    	XOR	AL,AL
 20096 0000325F AA                      	STOSB				; Nul terminate it
 20097 00003260 E85A0F                  	call	STARTSRCH		; Set search
 20098 00003263 E8340C                  	call	GETENTRY		; Get start of directory
 20099 00003266 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20100 00003268 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20101 0000326C 89DE                    	MOV	SI,BX
 20102 0000326E AD                      	LODSW
 20103                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20104 0000326F 3D2E20                  	cmp	ax,202Eh ; ". "
 20105 00003272 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20106                                  	;add	si,30
 20107 00003274 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20108 00003277 AD                      	LODSW
 20109                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20110                                  	;cmp	ax, '..'
 20111 00003278 3D2E2E                  	cmp	ax,2E2Eh
 20112 0000327B 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20113                                  
 20114                                  ;hkn; SS is DOSDATA
 20115                                  	;context DS
 20116 0000327D 16                      	push	ss
 20117 0000327E 1F                      	pop	ds
 20118 0000327F C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20119 00003285 E8120C                  	call	GETENTRY		; Get next entry
 20120 00003288 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20121                                  	;mov	byte [ATTRIB],16h
 20122 0000328A C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20123 0000328F E8100B                  	call	SRCH			; Do a search
 20124 00003292 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20125 00003294 803E[4A03]00            	CMP	byte [FAILERR],0
 20126 00003299 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20127 0000329B C42E[8A05]              	LES	BP,[THISDPB]
 20128 0000329F 8B1E[C205]              	MOV	BX,[DIRSTART]
 20129 000032A3 E8241C                  	call	RELEASE 		; Release data in sub dir
 20130 000032A6 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20131 000032A8 5A                      	POP	DX			; Sector # of entry
 20132 000032A9 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20133                                  	; 22/09/2023
 20134                                  	;;mov	byte [ALLOWED],18h
 20135                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20136                                  	;XOR	AL,AL ; *		; Pre read
 20137                                  	;call	GETBUFFR		; Get sector back
 20138 000032AD E8A326                  	call	GETBUFFER ; *		; Pre Read
 20139 000032B0 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20140 000032B2 C53E[E205]              	LDS	DI,[CURBUF]
 20141                                  	;or	byte [di+5],4
 20142 000032B6 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20143 000032BA 5B                      	POP	BX			; Pointer to start of entry
 20144 000032BB 01FB                    	ADD	BX,DI			; Corrected
 20145 000032BD C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20146                                  
 20147                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20148 000032C0 1E                      	PUSH	DS
 20149                                  
 20150                                  ;hkn; SS is DOSDATA
 20151                                  	;context DS
 20152 000032C1 16                      	push	ss
 20153 000032C2 1F                      	pop	ds
 20154                                  
 20155                                  	; MSDOS 6.0
 20156 000032C3 E80EF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20157                                  
 20158                                  ;	; MSDOS 3.3
 20159                                  ;_FastOpen_Delete:
 20160                                  ;	push	ax
 20161                                  ;	mov	si,[WFP_START]
 20162                                  ;	mov	bx,FastTable
 20163                                  ;	;mov	al,3  ; FONC_delete
 20164                                  ;	mov	al,FONC_delete
 20165                                  ;	call	far [BX+2]  ; FastTable+2
 20166                                  ;	pop	ax
 20167                                  
 20168 000032C6 1F                      	POP	DS
 20169                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20170                                  
 20171 000032C7 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20172                                  
 20173                                  ;============================================================================
 20174                                  ; DISK.ASM, MSDOS 6.0, 1991
 20175                                  ;============================================================================
 20176                                  ; 23/07/2018 - Retro DOS v3.0 
 20177                                  ; 04/05/2019 - Retro DOS v4.0
 20178                                  
 20179                                  ;	TITLE	DISK - Disk utility routines
 20180                                  ;	NAME	Disk
 20181                                  
 20182                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20183                                  ;
 20184                                  ;	SWAPCON
 20185                                  ;	SWAPBACK
 20186                                  ;	DOS_READ
 20187                                  ;	DOS_WRITE
 20188                                  ;	get_io_sft
 20189                                  ;	DirRead
 20190                                  ;	FIRSTCLUSTER
 20191                                  ;	SET_BUF_AS_DIR
 20192                                  ;	FATSecRd
 20193                                  ;	DREAD
 20194                                  ;	CHECK_WRITE_LOCK
 20195                                  ;	CHECK_READ_LOCK
 20196                                  ;
 20197                                  ;	Revision history:
 20198                                  ;
 20199                                  ;		A000   version 4.00  Jan. 1988
 20200                                  ;
 20201                                  ;----------------------------------------------------------------------------
 20202                                  ;
 20203                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20204                                  ;		error happens, DOS retries the entire block assuming that
 20205                                  ;		zero characters were transferred. Modified the code to take
 20206                                  ;		into account the number of characters transfered before
 20207                                  ;		retrying the operation.
 20208                                  ;
 20209                                  ;----------------------------------------------------------------------------
 20210                                  ;
 20211                                  
 20212                                  ;Installed = TRUE
 20213                                  
 20214                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20215                                  
 20216                                  ; **** Drivers for file input from devices ****
 20217                                  ;----------------------------------------------------------------------------
 20218                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20219                                  ;   of handles 0 and 1
 20220                                  ;
 20221                                  ;   Inputs:	DS is DOSDATA
 20222                                  ;   Outputs:	CONSWAP is set to false.
 20223                                  ;   Registers modified: none
 20224                                  ;----------------------------------------------------------------------------
 20225                                  
 20226                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20227                                  
 20228                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20229                                  ; 04/05/2019 - Retro DOS v4.0
 20230                                  
 20231                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20232                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20233                                  
 20234                                  SWAPBACK:
 20235 000032CA C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20236 000032CF C3                      	retn
 20237                                  
 20238                                  ;----------------------------------------------------------------------------
 20239                                  ;
 20240                                  ; Procedure Name : SWAPCON
 20241                                  ;
 20242                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20243                                  ;
 20244                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20245                                  ;		DS is DOSDATA
 20246                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20247                                  ;   Registers modified: none
 20248                                  ;--------------------------------------------------------------------------
 20249                                  
 20250                                  SWAPCON:
 20251                                  	; MSDOS 3.3
 20252                                  	;push	es
 20253                                  	;push	di
 20254                                  	;mov	byte [CONSWAP],1
 20255                                  	;les	di,[THISSFT]
 20256                                  	;mov	word [CONSFT],di
 20257                                  	;mov	word [CONSFT+2],es
 20258                                  	;pop	di
 20259                                  	;pop	es
 20260                                  	;retn
 20261                                  
 20262                                  	; MSDOS 6.0
 20263 000032D0 C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20264 000032D5 50                      	push	ax
 20265 000032D6 A1[9E05]                	mov	ax,[THISSFT]
 20266 000032D9 A3[E605]                	mov	[CONSFT],ax
 20267 000032DC A1[A005]                	mov	ax,[THISSFT+2]
 20268 000032DF A3[E805]                	mov	[CONSFT+2],ax
 20269 000032E2 58                      	pop	ax
 20270 000032E3 C3                      	retn
 20271                                  
 20272                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20273                                  ; 04/05/2019 - Retro DOS v4.0
 20274                                  
 20275                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20276                                  ;-----------------------------------------------------------------------------
 20277                                  ;
 20278                                  ; Inputs:
 20279                                  ;	ThisSFT set to the SFT for the file being used
 20280                                  ;	[DMAADD] contains transfer address
 20281                                  ;	CX = No. of bytes to read
 20282                                  ;	DS = DOSDATA
 20283                                  ; Function:
 20284                                  ;	Perform read operation
 20285                                  ; Outputs:
 20286                                  ;    Carry clear
 20287                                  ;	SFT Position and cluster pointers updated
 20288                                  ;	CX = No. of bytes read
 20289                                  ;	ES:DI point to SFT
 20290                                  ;    Carry set
 20291                                  ;	AX is error code
 20292                                  ;	CX = 0
 20293                                  ;	ES:DI point to SFT
 20294                                  ; DS preserved, all other registers destroyed
 20295                                  ;
 20296                                  ;-----------------------------------------------------------------------------
 20297                                  
 20298                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20299                                  
 20300                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20301                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20302                                  
 20303                                  DOS_READ:
 20304 000032E4 C43E[9E05]              	LES	DI,[THISSFT]
 20305                                  
 20306                                  ; Verify that the sft has been opened in a mode that allows reading.
 20307                                  
 20308                                  	;mov	al,[es:di+2]
 20309 000032E8 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20310                                  	;and	al,0Fh
 20311 000032EC 240F                    	AND	AL,access_mask
 20312                                  	;cmp	al,1
 20313 000032EE 3C01                    	CMP	AL,open_for_write
 20314 000032F0 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20315 000032F2 E90306                  	jmp	SET_ACC_ERR
 20316                                  
 20317                                  READ_NO_MODE:
 20318 000032F5 E8E104                  	call	SETUP
 20319 000032F8 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20320 000032FA E86CDF                  	call	IsSFTNet
 20321 000032FD 7408                    	JZ	short LOCAL_READ
 20322                                  
 20323                                  ;IF NOT Installed
 20324                                  ;	transfer NET_READ
 20325                                  ;ELSE
 20326                                  	;mov	ax,1108h
 20327 000032FF B80811                  	MOV	AX,(MultNET<<8)|8
 20328 00003302 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20329                                  			; ES:DI -> SFT
 20330                                  			; SFT DPB field -> DPB of drive containing file
 20331                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20332                                  			; Return: CF set on error, CX = bytes read
 20333 00003304 C3                      	retn
 20334                                  ;ENDIF
 20335                                  
 20336                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20337                                  ; except return immediately.
 20338                                  
 20339                                  NoIORet:
 20340 00003305 F8                      	CLC
 20341 00003306 C3                      	retn
 20342                                  
 20343                                  LOCAL_READ:
 20344                                  	;test	word [es:di+5],80h
 20345                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20346 00003307 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20347 0000330C 750E                    	JNZ	short READDEV
 20348                                  
 20349                                  	;mov	byte [EXTERR_LOCUS],2
 20350 0000330E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20351 00003313 E8FCDF                  	call	ECritDisk
 20352 00003316 E89B05                  	call	DISKREAD
 20353                                  
 20354                                  critexit:
 20355                                  	;call	LCritDisk
 20356                                  	;retn
 20357                                  	; 16/12/2022
 20358 00003319 E911E0                  	jmp	LCritDisk
 20359                                  
 20360                                  ; We are reading from a device. Examine the status of the device to see if we
 20361                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20362                                  ; null device, we can safely indicate no transfer.
 20363                                  
 20364                                  READDEV:
 20365                                  	;mov	byte [EXTERR_LOCUS],4
 20366 0000331C C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20367                                  	;mov	bl,[es:di+5]
 20368 00003321 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20369 00003325 C43E[2C03]              	LES	DI,[DMAADD]
 20370                                  	;test	bl,40h
 20371 00003329 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20372 0000332C 7407                    	JZ	short ENDRDDEVJ3
 20373                                  	;test	bl,4
 20374 0000332E F6C304                  	test	BL,devid_device_null	; NUL device?
 20375 00003331 7405                    	JZ	short TESTRAW 		; NO
 20376 00003333 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20377                                  ENDRDDEVJ3:
 20378                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20379                                  	;JMP	short ENDRDDEVJ2
 20380                                  	; 16/12/2022
 20381 00003335 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20382                                  
 20383                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20384                                  ; bizarre std_con_string_input.
 20385                                  
 20386                                  TESTRAW:
 20387                                  	;test	bl,20h
 20388 00003338 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20389 0000333B 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20390                                  	;test	bl,1
 20391 0000333D F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20392 00003340 7461                    	JZ	short NOTRDCON
 20393 00003342 E98F01                  	JMP	READCON
 20394                                  
 20395                                  DVRDRAW:
 20396 00003345 06                      	PUSH	ES
 20397 00003346 1F                      	POP	DS			; Xaddr to DS:DI
 20398                                  
 20399                                  	; 04/05/2019 - Retro DOS v4.0
 20400                                  
 20401                                  	; MSDOS 6.0
 20402                                  ;SR;
 20403                                  ;Check for win386 presence -- if present, do polled read of characters
 20404                                  
 20405 00003347 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20406 0000334D 7408                    	jz	short ReadRawRetry	;not present
 20407 0000334F F6C301                  	test	bl,devid_device_con_in	;is it console device
 20408 00003352 7403                    	jz	short ReadRawRetry	;no, do normal read
 20409 00003354 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20410                                  
 20411                                  ReadRawRetry:
 20412 00003357 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20413 00003359 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20414 0000335B 89C2                    	MOV	DX,AX			; Start at 0
 20415 0000335D E89113                  	call	SETREAD
 20416 00003360 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20417                                  
 20418                                  ;hkn; SS override
 20419 00003361 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20420 00003366 E80F13                  	call	DEVIOCALL
 20421 00003369 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20422 0000336B B486                    	MOV	AH,86H			; Read error
 20423                                  
 20424                                  ;hkn; SS override
 20425 0000336D 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20426                                  	; MSDOS 3.3
 20427                                  	;test	di,8000h
 20428                                  	;jz	short CRDROK
 20429                                  	; MSDOS 6.0
 20430 00003372 09FF                    	or	di,di
 20431 00003374 7923                    	jns	short CRDROK		; no errors
 20432                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20433 00003376 E8641F                  	call	CHARHARD
 20434 00003379 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20435                                  
 20436                                  	; 04/05/2019
 20437                                  
 20438                                  	; MSDOS 6.0
 20439 0000337B 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20440 00003380 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20441                                  
 20442                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20443 00003385 08C0                    	OR	AL,AL
 20444 00003387 7410                    	JZ	short CRDROK		; Ignore
 20445 00003389 3C03                    	CMP	AL,3
 20446 0000338B 7403                    	JZ	short CRDFERR 		; fail.
 20447 0000338D 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20448 0000338E EBC7                    	JMP	short ReadRawRetry	; Retry
 20449                                  
 20450                                  ; We have encountered a device-driver error. We have informed the user of it
 20451                                  ; and he has said for us to fail the system call.
 20452                                  
 20453                                  CRDFERR:
 20454 00003390 5F                      	POP	DI			; Clean stack
 20455                                  DEVIOFERR:
 20456                                  
 20457                                  ;hkn; SS override
 20458 00003391 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20459 00003396 E95D05                  	jmp	SET_ACC_ERR_DS
 20460                                  
 20461                                  CRDROK:
 20462 00003399 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20463 0000339A 89D7                    	MOV	DI,DX
 20464                                  
 20465                                  ;hkn; SS override
 20466 0000339C 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20467                                  	;JMP	SHORT ENDRDDEVJ3
 20468                                  	; 16/12/2022
 20469 000033A1 EB6B                    	jmp	short ENDRDDEVJ2
 20470                                  
 20471                                  ; We are going to do a cooked read on some character device. There is a
 20472                                  ; problem here, what does the data look like? Is it a terminal device, line
 20473                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20474                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20475                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20476                                  ; included in data). this "simulates" the way con works in cooked mode
 20477                                  ; reading one line at a time. With file data, however, the lines will look
 20478                                  ; like, LF line CR. This is a little weird.
 20479                                  
 20480                                  NOTRDCON:
 20481 000033A3 8CC0                    	MOV	AX,ES
 20482 000033A5 8ED8                    	MOV	DS,AX
 20483 000033A7 89FB                    	MOV	BX,DI
 20484 000033A9 31D2                    	XOR	DX,DX
 20485 000033AB 89D0                    	MOV	AX,DX
 20486 000033AD 51                      	PUSH	CX
 20487 000033AE B90100                  	MOV	CX,1
 20488 000033B1 E83D13                  	call	SETREAD
 20489 000033B4 59                      	POP	CX
 20490                                  
 20491                                  ;hkn; SS override
 20492 000033B5 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20493                                  	;lds	si,[si+7]
 20494 000033BA C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20495                                  DVRDLP:
 20496 000033BD E8FE1C                  	call	DSKSTATCHK
 20497 000033C0 E8B812                  	call	DEVIOCALL2
 20498 000033C3 57                      	PUSH	DI		; Save "count" done
 20499 000033C4 B486                    	MOV	AH,86H
 20500                                  
 20501                                  ;hkn; SS override
 20502 000033C6 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20503                                  	
 20504                                  	; MSDOS 3.3
 20505                                  	;test	di,8000h
 20506                                  	;jz	short CRDOK
 20507                                  	; MSDOS 6.0
 20508 000033CB 09FF                    	or	di,di
 20509 000033CD 7917                    	jns	short CRDOK
 20510                                  	
 20511 000033CF E80B1F                  	call	CHARHARD
 20512 000033D2 5F                      	POP	DI
 20513                                  
 20514                                  ;hkn; SS override
 20515 000033D3 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20516 000033DA 3C01                    	CMP	AL,1
 20517 000033DC 74DF                    	JZ	short DVRDLP		;Retry
 20518 000033DE 3C03                    	CMP	AL,3
 20519 000033E0 74AF                    	JZ	short DEVIOFERR		; FAIL
 20520 000033E2 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20521 000033E4 EB12                    	JMP	SHORT DVRDIGN
 20522                                  
 20523                                  CRDOK:
 20524 000033E6 5F                      	POP	DI
 20525                                  
 20526                                  ;hkn; SS override
 20527 000033E7 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20528                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20529 000033ED 751F                    	JNZ	short ENDRDDEVJ2
 20530                                  	; 16/12/2022
 20531                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20532                                  
 20533 000033EF 1E                      	PUSH	DS
 20534                                  
 20535                                  ;hkn; SS override
 20536 000033F0 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20537 000033F5 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20538 000033F7 1F                      	POP	DS
 20539                                  DVRDIGN:
 20540                                  
 20541                                  ;hkn; SS override
 20542 000033F8 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20543 000033FD 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20544 00003404 47                      	INC	DI			; Next character
 20545 00003405 3C1A                    	CMP	AL,1Ah			; ^Z?
 20546                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20547 00003407 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20548                                  	; 16/12/2022
 20549                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20550 00003409 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20551 0000340B E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20552 0000340D 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20553                                  					;  AX=FFFF which is not likely
 20554                                  ENDRDDEVJ2:
 20555                                  	; 16/12/2022
 20556                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20557                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20558 0000340E E98E00                  	jmp	ENDRDDEV
 20559                                  
 20560                                  	; 04/05/2019
 20561                                  
 20562                                  	; MSDOS 6.0
 20563                                  ;SR;
 20564                                  ;Polling code for raw read on CON when WIN386 is present
 20565                                  ;
 20566                                  ;At this point -- ds:di is transfer address
 20567                                  ;		  cx is count
 20568                                  
 20569                                  do_polling:
 20570 00003411 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20571 00003413 31C0                    	xor	ax,ax
 20572 00003415 89C2                    	mov	dx,ax
 20573 00003417 E8D712                  	call	SETREAD			;prepare device packet
 20574                                  
 20575                                  do_io:
 20576                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20577                                  
 20578 0000341A 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20579 0000341F 1E                      	push	ds
 20580 00003420 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20581 00003425 E85012                  	call	DEVIOCALL		;call device driver
 20582 00003428 1F                      	pop	ds
 20583                                  	
 20584                                  	;test	word [es:bx+3],8000h
 20585                                  	; 16/12/2022
 20586                                  	;test	byte [es:bx+4],80h
 20587 00003429 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20588                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20589 0000342E 7413                    	jz	short check_busy	;no
 20590                                  
 20591 00003430 1E                      	push	ds
 20592 00003431 89FA                    	mov	dx,di
 20593                                  	;invoke charhard		;invoke int 24h handler
 20594 00003433 E8A71E                  	call	CHARHARD
 20595 00003436 89D7                    	mov	di,dx
 20596 00003438 08C0                    	or	al,al
 20597 0000343A 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20598 0000343C 3C03                    	cmp	al,3
 20599 0000343E 7448                    	jz	short devrderr		;user asked to fail
 20600 00003440 1F                      	pop	ds
 20601 00003441 EBD7                    	jmp	short do_io		;user asked to retry
 20602                                  
 20603                                  check_busy:
 20604                                  	;test	word [es:bx+3],200h
 20605                                  	; 16/12/2022
 20606 00003443 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20607                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20608 00003448 7547                    	jnz	short no_char		;yes, no character available
 20609                                  
 20610                                  ;Character is available. Read in 1 character at a time until all characters
 20611                                  ;are read in or no character is available
 20612                                  
 20613 0000344A 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20614 0000344F 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20615 00003455 1E                      	push	ds
 20616 00003456 36C536[9E05]            	lds	si,[ss:THISSFT]
 20617 0000345B E81A12                  	call	DEVIOCALL
 20618                                  
 20619 0000345E 89FA                    	mov	dx,di
 20620 00003460 B486                    	mov	ah,86h
 20621                                  	;mov	di,[es:bx+3]
 20622 00003462 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20623 00003466 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20624 0000346A 7410                    	jz	short next_char		;no,read next character
 20625                                  
 20626                                  	;invoke	charhard		;invoke int 24h handler
 20627 0000346C E86E1E                  	call	CHARHARD
 20628 0000346F 89D7                    	mov	di,dx			;restore di
 20629 00003471 08C0                    	or	al,al			;
 20630 00003473 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20631 00003475 3C03                    	cmp	al,3
 20632 00003477 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20633 00003479 1F                      	pop	ds
 20634 0000347A EB9E                    	jmp	short do_io		;user issued a retry
 20635                                  
 20636                                  next_char:
 20637 0000347C 1F                      	pop	ds
 20638 0000347D 89D7                    	mov	di,dx
 20639 0000347F 49                      	dec	cx			;decrement count
 20640 00003480 E318                    	jcxz	done_read		;all characters read in
 20641 00003482 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20642 00003486 EB92                    	jmp	short do_io			;read next character in
 20643                                  
 20644                                  devrderr:
 20645 00003488 5F                      	pop	di			;discard segment address
 20646 00003489 36C43E[9E05]            	les	di,[ss:THISSFT]
 20647                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20648 0000348E E96504                  	jmp     SET_ACC_ERR_DS
 20649                                  
 20650                                  no_char:
 20651                                  ;Since no character is available, we let win386 switch the VM out
 20652                                  
 20653 00003491 50                      	push	ax
 20654 00003492 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20655 00003494 CD2A                    	int	2Ah			;indicate idle to WIN386
 20656                                  
 20657                                  ;When control returns from WIN386, we continue the raw read
 20658                                  
 20659 00003496 58                      	pop	ax
 20660 00003497 EB81                    	jmp	do_io
 20661                                  
 20662                                  pop_done_read:
 20663 00003499 1F                      	pop	ds
 20664                                  done_read:
 20665 0000349A 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20666                                  
 20667                                  	; 16/12/2022
 20668                                  
 20669                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20670                                  	;jmp	ENDRDDEV ; 04/05/2019
 20671                                  
 20672                                  	; 04/05/2019 - Retro DOS v4.0
 20673                                  ENDRDDEV:
 20674 0000349F 16                      	push	ss
 20675 000034A0 1F                      	pop	ds
 20676 000034A1 EB1F                    	jmp	short endrddev1
 20677                                  
 20678                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20679                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20680                                  
 20681                                  TRANBUF:
 20682 000034A3 AC                      	LODSB
 20683 000034A4 AA                      	STOSB
 20684 000034A5 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20685 000034A7 7503                    	JNZ	short NORMCH
 20686 000034A9 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20687                                  NORMCH:
 20688 000034AC 3C0A                    	CMP	AL,c_LF ; 0Ah
 20689 000034AE E0F3                    	LOOPNZ	TRANBUF
 20690 000034B0 7507                    	JNZ	short ENDRDCON
 20691 000034B2 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20692 000034B4 E8ACE1                  	call	OUTT		; Transmit linefeed
 20693 000034B7 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20694                                  ENDRDCON:
 20695                                  ;hkn; SS is DOSDATA
 20696 000034B9 16                      	push	ss
 20697 000034BA 1F                      	pop	ds
 20698 000034BB E80CFE                  	CALL	SWAPBACK
 20699 000034BE 8936[2200]              	MOV	[CONTPOS],SI
 20700                                  
 20701                                  	; 16/12/2022
 20702                                  ;ENDRDDEV:
 20703                                  ;;hkn; SS is DOSDATA
 20704                                  ;	push	ss
 20705                                  ;	pop	ds
 20706                                  endrddev1:	; 04/05/2019
 20707 000034C2 893E[B805]              	MOV	[NEXTADD],DI
 20708 000034C6 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20709 000034C8 C43E[9E05]              	LES	DI,[THISSFT]
 20710                                  	;and	byte [es:di+5],0BFh
 20711 000034CC 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20712                                  				; Mark as no more data available
 20713                                  SETSFTC:
 20714                                  	; 31/07/2019
 20715                                  	;call	SETSFT
 20716                                  	;retn
 20717 000034D1 E9B604                  	jmp	SETSFT
 20718                                  
 20719                                  ; 16/12/2022
 20720                                  %if 0
 20721                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20722                                  ENDRDDEV:
 20723                                  ;hkn; SS is DOSDATA
 20724                                  	push	ss
 20725                                  	pop	ds
 20726                                  	MOV	[NEXTADD],DI
 20727                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20728                                  	LES	DI,[THISSFT]
 20729                                  	;and	byte [es:di+5],0BFh
 20730                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20731                                  				; Mark as no more data available
 20732                                  SETSFTC:
 20733                                  	;call	SETSFT
 20734                                  	;retn
 20735                                  	jmp	SETSFT	
 20736                                  %endif
 20737                                  
 20738                                  READCON:
 20739 000034D4 E8F9FD                  	CALL	SWAPCON
 20740 000034D7 8B36[2200]              	MOV	SI,[CONTPOS]
 20741 000034DB 09F6                    	OR	SI,SI
 20742 000034DD 75C4                    	JNZ	short TRANBUF
 20743 000034DF 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20744 000034E4 7406                    	JZ	short GETBUF
 20745 000034E6 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20746                                  GETBUF:
 20747 000034EC 51                      	PUSH	CX
 20748 000034ED 06                      	PUSH	ES
 20749 000034EE 57                      	PUSH	DI
 20750                                  
 20751                                  ;hkn; CONBUF is in DOSDATA
 20752 000034EF BA[7B02]                	MOV	DX,CONBUF
 20753                                  
 20754 000034F2 E8ECDE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20755 000034F5 5F                      	POP	DI
 20756 000034F6 07                      	POP	ES
 20757 000034F7 59                      	POP	CX
 20758                                  
 20759                                  ;hkn; CONBUF is in DOSDATA
 20760 000034F8 BE[7D02]                	MOV	SI,CONBUF+2
 20761                                  
 20762 000034FB 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20763 000034FE 75A3                    	JNZ	short TRANBUF
 20764 00003500 B01A                    	MOV	AL,1AH
 20765 00003502 AA                      	STOSB
 20766 00003503 4F                      	DEC	DI
 20767 00003504 B00A                    	MOV	AL,c_LF
 20768 00003506 E85AE1                  	call	OUTT		; Send linefeed
 20769 00003509 31F6                    	XOR	SI,SI
 20770 0000350B EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20771                                  
 20772                                  ; 24/07/2018 - Retro DOS v3.0
 20773                                  
 20774                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20775                                  ;---------------------------------------------------------------------------
 20776                                  ;
 20777                                  ; Procedure Name : DOS_WRITE
 20778                                  ;
 20779                                  ; Inputs:
 20780                                  ;	ThisSFT set to the SFT for the file being used
 20781                                  ;	[DMAADD] contains transfer address
 20782                                  ;	CX = No. of bytes to write
 20783                                  ; Function:
 20784                                  ;	Perform write operation
 20785                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20786                                  ;		to current sf_position
 20787                                  ; Outputs:
 20788                                  ;    Carry clear
 20789                                  ;	SFT Position and cluster pointers updated
 20790                                  ;	CX = No. of bytes written
 20791                                  ;	ES:DI point to SFT
 20792                                  ;    Carry set
 20793                                  ;	AX is error code
 20794                                  ;	CX = 0
 20795                                  ;	ES:DI point to SFT
 20796                                  ; DS preserved, all other registers destroyed
 20797                                  ;---------------------------------------------------------------------------
 20798                                  
 20799                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20800                                  ;hkn; point to DOSDATA.
 20801                                  
 20802                                  ; 04/05/2019 - Retro DOS v4.0
 20803                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20804                                  
 20805                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20806                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20807                                  
 20808                                  DOS_WRITE:
 20809 0000350D C43E[9E05]              	LES	DI,[THISSFT]
 20810                                  	;mov	al,[ES:DI+2]
 20811 00003511 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20812                                  	;and	al,0Fh
 20813 00003515 240F                    	AND	AL,access_mask
 20814                                  	;cmp	al,0
 20815 00003517 3C00                    	CMP	AL,open_for_read
 20816 00003519 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20817                                  BadMode:
 20818 0000351B E9DA03                  	jmp	SET_ACC_ERR
 20819                                  
 20820                                  ; NOTE: The following check for writting to a Read Only File is performed
 20821                                  ;	    ONLY on FCBs!!!!
 20822                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20823                                  ;	    of a read only file which can then be written to.
 20824                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20825                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20826                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20827                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20828                                  ;	    to a read-only file.
 20829                                  
 20830                                  Check_FCB_RO:
 20831                                  	;;test	word [es:di+2],8000h
 20832                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20833                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20834                                  	
 20835                                  	;test	byte [es:di+3],80h
 20836 0000351E 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20837 00003523 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20838                                  
 20839                                  	;test	byte [es:di+4],1
 20840 00003525 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20841 0000352A 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20842                                  WRITE_NO_MODE:
 20843 0000352C E8AA02                  	call	SETUP
 20844 0000352F E837DD                  	call	IsSFTNet
 20845 00003532 7406                    	JZ	short LOCAL_WRITE
 20846                                  
 20847                                  ;IF NOT Installed
 20848                                  ;	transfer NET_WRITE
 20849                                  ;ELSE
 20850                                  	;mov	ax,1109h
 20851 00003534 B80911                  	MOV	AX,(MultNET<<8)|9
 20852 00003537 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20853                                  			; ES:DI -> SFT
 20854                                  			; SFT DPB field -> DPB of drive containing file
 20855                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20856                                  			; Return: CF set on error, CX = bytes written
 20857 00003539 C3                      	retn
 20858                                  ;ENDIF
 20859                                  
 20860                                  LOCAL_WRITE:
 20861                                  	;;test	word [es:di+5],80h
 20862                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20863                                  	;jnz	short WRTDEV
 20864                                  
 20865                                  	;test	byte [es:di+5],80h
 20866 0000353A 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20867 0000353F 756E                    	jnz	short WRTDEV
 20868                                  
 20869                                  	;mov	byte [EXTERR_LOCUS],2
 20870 00003541 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20871 00003546 E8C9DD                  	call	ECritDisk
 20872                                  
 20873 00003549 E8F404                  	call	DISKWRITE
 20874                                  
 20875                                  	; 04/05/2019 - Retro DOS v4.0
 20876                                  
 20877                                  	; MSDOS 6.0
 20878                                  ; Extended Open
 20879 0000354C 7210                    	JC	short nocommit
 20880                                  	
 20881 0000354E C43E[9E05]              	LES	DI,[THISSFT]
 20882                                  	
 20883                                  	;;test	word [ES:DI+2],4000h
 20884                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20885                                  	;JZ	short nocommit
 20886                                  	
 20887                                  	;test	byte [ES:DI+3],40h
 20888 00003552 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20889 00003557 7405                    	JZ	short nocommit
 20890                                  	
 20891 00003559 51                      	PUSH	CX
 20892 0000355A E82EFB                  	call	DOS_COMMIT
 20893 0000355D 59                      	POP	CX
 20894                                  nocommit:
 20895                                  ; Extended Open
 20896                                  	;call	LCritDisk
 20897                                  	;retn
 20898                                  	; 18/12/2022
 20899 0000355E E9CCDD                  	jmp	LCritDisk
 20900                                  
 20901                                  DVWRTRAW:
 20902 00003561 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20903 00003563 E8BE11                  	call	SETWRITE
 20904 00003566 1E                      	PUSH	DS			; Save seg of transfer
 20905                                  
 20906                                  ;hkn; SS override
 20907 00003567 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20908 0000356C E80911                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20909                                  
 20910 0000356F 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20911 00003571 B487                    	MOV	AH,87H
 20912                                  
 20913                                  ;hkn; SS override
 20914 00003573 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20915                                  
 20916                                  	; MSDOS 3.3
 20917                                  	;test	di,8000h
 20918                                  	;jz	short CWRTROK
 20919                                  
 20920                                  	; MSDOS 6.0
 20921 00003578 09FF                    	or	di,di
 20922 0000357A 7920                    	jns	short CWRTROK
 20923                                  	
 20924                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20925 0000357C E85E1D                  	call	CHARHARD
 20926                                  
 20927                                  	; 04/05/2019  - Retro DOS v4.0
 20928                                  
 20929                                  	; MSDOS 6.0
 20930 0000357F 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20931 00003584 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20932 00003586 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20933 0000358B 89DF                    	mov	di,bx			;				M065
 20934                                  	
 20935                                  	; MSDOS 3.3
 20936                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20937                                  
 20938                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20939 0000358D 08C0                    	OR	AL,AL
 20940 0000358F 740B                    	JZ	short CWRTROK 		; Ignore
 20941 00003591 3C03                    	CMP	AL,3
 20942 00003593 7403                    	JZ	short CWRFERR
 20943 00003595 1F                      	POP	DS			; Recover saved seg of transfer
 20944 00003596 EBC9                    	JMP	short DVWRTRAW		; Try again
 20945                                  CWRFERR:
 20946 00003598 58                      	POP	AX			; Chuck saved seg of transfer
 20947 00003599 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20948                                  CWRTROK:
 20949 0000359C 58                      	POP	AX			; Chuck saved seg of transfer
 20950 0000359D 1F                      	POP	DS
 20951 0000359E A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20952                                  ENDWRDEV:
 20953 000035A1 C43E[9E05]              	LES	DI,[THISSFT]
 20954 000035A5 89C1                    	MOV	CX,AX
 20955                                  	;call	ADDREC
 20956                                  	;retn
 20957                                  	; 16/12/2022
 20958                                  	; 10/06/2019
 20959 000035A7 E90104                  	jmp	ADDREC
 20960                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20961                                  	;call	ADDREC
 20962                                  	;retn
 20963                                  	
 20964                                  WRTNUL:
 20965 000035AA 89CA                    	MOV	DX,CX			; Entire transfer done
 20966                                  WRTCOOKJ:
 20967 000035AC E98D00                  	JMP	WRTCOOKDONE
 20968                                  WRTDEV:
 20969                                  	;mov	byte [EXTERR_LOCUS],4
 20970 000035AF C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20971                                  	;or	byte [es:di+5],40h
 20972 000035B4 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20973                                  					; Reset EOF for input
 20974                                  	;mov	bl,[es:di+5]
 20975 000035B9 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20976 000035BD 31C0                    	XOR	AX,AX
 20977 000035BF E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20978 000035C1 1E                      	PUSH	DS
 20979 000035C2 88D8                    	MOV	AL,BL
 20980 000035C4 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20981 000035C8 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20982 000035CA 31D2                    	XOR	DX,DX			; Set starting point
 20983                                  	;test	al,20h
 20984 000035CC A820                    	test	AL,devid_device_raw	; Raw?
 20985                                  	;JZ	short TEST_DEV_CON
 20986                                  	;JMP	DVWRTRAW
 20987                                  	; 16/12/2022
 20988 000035CE 7591                    	jnz	short DVWRTRAW
 20989                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20990                                  	;JZ	short TEST_DEV_CON
 20991                                  	;JMP	short DVWRTRAW
 20992                                  
 20993                                  TEST_DEV_CON:
 20994                                  	;test	al,2
 20995 000035D0 A802                    	test	AL,devid_device_con_out ; Console output device?
 20996 000035D2 756E                    	jnz	short WRITECON
 20997                                  	;test	al,4
 20998 000035D4 A804                    	test	AL,devid_device_null
 20999 000035D6 75D2                    	JNZ	short WRTNUL
 21000 000035D8 89D0                    	MOV	AX,DX
 21001 000035DA 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21002 000035DD 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21003 000035DF 51                      	PUSH	CX
 21004 000035E0 B90100                  	MOV	CX,1
 21005 000035E3 E83E11                  	call	SETWRITE
 21006 000035E6 59                      	POP	CX
 21007                                  
 21008                                  ;hkn; SS override
 21009 000035E7 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21010                                  ;
 21011                                  ;SR; Removed X25 support from here
 21012                                  ;
 21013                                  	;lds	si,[si+7]
 21014 000035EC C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21015                                  DVWRTLP:
 21016 000035EF E8CC1A                  	call	DSKSTATCHK
 21017 000035F2 E88610                  	call	DEVIOCALL2
 21018 000035F5 57                      	PUSH	DI
 21019 000035F6 B487                    	MOV	AH,87H
 21020                                  
 21021                                  ;hkn; SS override
 21022 000035F8 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21023                                  	
 21024                                  	; MSDOS 3.3
 21025                                  	;test	di,8000h
 21026                                  	;jz	short CWROK
 21027                                  
 21028                                  	; MSDOS 6.0
 21029 000035FD 09FF                    	or	di,di
 21030 000035FF 7916                    	jns	short CWROK
 21031                                  	
 21032                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21033 00003601 E8D91C                  	call	CHARHARD
 21034 00003604 5F                      	POP	DI
 21035                                  
 21036                                  ;hkn; SS override
 21037 00003605 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21038 0000360C 3C01                    	CMP	AL,1
 21039 0000360E 74DF                    	JZ	short DVWRTLP 	; Retry
 21040 00003610 08C0                    	OR	AL,AL
 21041 00003612 740C                    	JZ	short DVWRTIGN	; Ignore
 21042                                  	; 10/08/2018
 21043 00003614 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21044                                  CWROK:
 21045 00003617 5F                      	POP	DI
 21046                                  
 21047                                  ;hkn; SS override
 21048 00003618 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21049 0000361E 741C                    	JZ	short WRTCOOKDONE
 21050                                  DVWRTIGN:
 21051 00003620 42                      	INC	DX
 21052                                  
 21053                                  ;hkn; SS override for CALLXAD
 21054 00003621 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21055 00003626 47                      	INC	DI
 21056 00003627 1E                      	PUSH	DS
 21057 00003628 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21058 0000362D 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21059 00003630 1F                      	POP	DS
 21060 00003631 7409                    	JZ	short WRTCOOKDONE
 21061                                  
 21062                                  ;hkn; SS override
 21063 00003633 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21064 0000363A E2B3                    	LOOP	DVWRTLP
 21065                                  WRTCOOKDONE:
 21066 0000363C 89D0                    	MOV	AX,DX
 21067 0000363E 1F                      	POP	DS
 21068 0000363F E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21069                                  
 21070                                  WRITECON:
 21071 00003642 1E                      	PUSH	DS
 21072                                  
 21073                                  ;hkn; SS is DOSDATA
 21074 00003643 16                      	push	ss
 21075 00003644 1F                      	pop	ds
 21076 00003645 E888FC                  	CALL	SWAPCON
 21077 00003648 1F                      	POP	DS
 21078 00003649 89DE                    	MOV	SI,BX
 21079 0000364B 51                      	PUSH	CX
 21080                                  WRCONLP:
 21081 0000364C AC                      	LODSB
 21082 0000364D 3C1A                    	CMP	AL,1Ah		; ^Z?
 21083 0000364F 7405                    	JZ	short CONEOF
 21084 00003651 E80FE0                  	call	OUTT
 21085 00003654 E2F6                    	LOOP	WRCONLP
 21086                                  CONEOF:
 21087 00003656 58                      	POP	AX			; Count
 21088 00003657 29C8                    	SUB	AX,CX			; Amount actually written
 21089 00003659 1F                      	POP	DS
 21090 0000365A E86DFC                  	CALL	SWAPBACK
 21091 0000365D E941FF                  	JMP	ENDWRDEV
 21092                                  
 21093                                  ;---------------------------------------------------------------------------
 21094                                  ;
 21095                                  ; Procedure Name : get_io_sft
 21096                                  ;
 21097                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21098                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21099                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21100                                  ;
 21101                                  ;---------------------------------------------------------------------------
 21102                                  
 21103                                  ; 04/05/2019 - Retro DOS v4.0
 21104                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21105                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21106                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21107                                  
 21108                                  GET_IO_SFT:
 21109                                  	;test	byte [SS:CONSWAP],0FFh
 21110 00003660 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21111 00003666 7512                    	JNZ	short GetRedir
 21112                                  GetNormal:
 21113 00003668 16                      	push	ss
 21114 00003669 1F                      	pop	ds
 21115 0000366A 06                      	PUSH	ES
 21116 0000366B 57                      	PUSH	DI
 21117 0000366C E80E30                  	call	SFFromHandle
 21118 0000366F 7206                    	JC	short RET44P
 21119 00003671 8CC6                    	MOV	SI,ES
 21120 00003673 8EDE                    	MOV	DS,SI
 21121 00003675 89FE                    	MOV	SI,DI
 21122                                  RET44P:
 21123 00003677 5F                      	POP	DI
 21124 00003678 07                      	POP	ES
 21125 00003679 C3                      	retn
 21126                                  GetRedir:
 21127 0000367A 83FB01                  	CMP	BX,1
 21128 0000367D 77E9                    	JA	short GetNormal
 21129 0000367F 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21130 00003684 F8                      	CLC
 21131                                  get_io_sft_retn:
 21132 00003685 C3                      	retn
 21133                                  
 21134                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21135                                  ;---------------------------------------------------------------------------
 21136                                  ;
 21137                                  ; Procedure Name : DIRREAD
 21138                                  ;
 21139                                  ; Inputs:
 21140                                  ;	AX = Directory block number (relative to first block of directory)
 21141                                  ;	ES:BP = Base of drive parameters
 21142                                  ;	[DIRSEC] = First sector of first cluster of directory
 21143                                  ;	[CLUSNUM] = Next cluster
 21144                                  ;	[CLUSFAC] = Sectors/Cluster
 21145                                  ; Function:
 21146                                  ;	Read the directory block into [CURBUF].
 21147                                  ; Outputs:
 21148                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21149                                  ;	[SECCLUSPOS] Set
 21150                                  ;	ES:BP unchanged
 21151                                  ;	[CURBUF] Points to Buffer with dir sector
 21152                                  ;	Carry set if error (user said FAIL to I 24)
 21153                                  ; DS preserved, all other registers destroyed.
 21154                                  ;---------------------------------------------------------------------------
 21155                                  
 21156                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21157                                  
 21158                                  DIRREAD:
 21159                                  
 21160                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21161                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21162                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21163                                  ; by DIRStart = 0.
 21164                                  
 21165 00003686 31D2                    	XOR	DX,DX
 21166                                  	;CMP	word [DIRSTART],0
 21167                                  	; 21/09/2023
 21168 00003688 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21169 0000368C 7503                    	jnz	short SubDir
 21170 0000368E 92                      	XCHG	AX,DX
 21171 0000368F EB0C                    	JMP	short DoRead
 21172                                  
 21173                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21174                                  
 21175                                  SubDir:
 21176 00003691 88C2                    	MOV	DL,AL
 21177                                  	;and	dl,[es:bp+4]
 21178 00003693 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21179                                  
 21180                                  ;	(DX) = sector-in-cluster
 21181                                  
 21182                                  	;mov	cl,[es:bp+5]
 21183 00003697 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21184 0000369B D3E8                    	SHR	AX,CL
 21185                                  
 21186                                  ;	(DX) = position in cluster
 21187                                  ;	(AX) = number of clusters to skip
 21188                                  
 21189                                  DoRead:
 21190 0000369D 8816[7305]              	MOV	[SECCLUSPOS],DL
 21191 000036A1 89C1                    	MOV	CX,AX
 21192 000036A3 88D4                    	MOV	AH,DL
 21193                                  
 21194                                  ;	(CX) = number of clusters to skip.
 21195                                  ;	(AH) = remainder
 21196                                  
 21197                                  	; 04/05/2019 - Retro DOS v4.0
 21198                                  
 21199                                  	; MSDOS 6.0
 21200                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21201                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21202                                  	;MOV	DX,[DIRSEC]
 21203                                  	;ADD	DL,AH
 21204                                  	;ADC	DH,0
 21205                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21206                                  	; 21/09/2023
 21207 000036A5 31DB                    	xor	bx,bx ; 0
 21208 000036A7 8B16[BE05]              	mov	dx,[DIRSEC]
 21209 000036AB 00E2                    	add	dl,ah
 21210 000036AD 10DE                    	adc	dh,bl ; 0
 21211 000036AF 131E[C005]              	adc	bx,[DIRSEC+2]
 21212 000036B3 891E[0706]              	mov	[HIGH_SECTOR],bx
 21213                                  
 21214 000036B7 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21215 000036BB 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21216 000036BF E319                    	JCXZ	FIRSTCLUSTER
 21217                                  SKPCLLP:
 21218 000036C1 E8841E                  	call	UNPACK
 21219 000036C4 72BF                    	jc	short get_io_sft_retn
 21220 000036C6 87DF                    	XCHG	BX,DI
 21221 000036C8 E8661E                  	call	IsEOF			; test for eof based on fat size
 21222 000036CB 7302                    	JAE	short HAVESKIPPED
 21223 000036CD E2F2                    	LOOP	SKPCLLP
 21224                                  HAVESKIPPED:
 21225 000036CF 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21226 000036D3 89FA                    	MOV	DX,DI
 21227 000036D5 88E3                    	MOV	BL,AH
 21228 000036D7 E81717                  	call	FIGREC
 21229                                  
 21230                                  	;entry	FIRSTCLUSTER
 21231                                  
 21232                                  FIRSTCLUSTER:
 21233                                  	; 22/09/2023
 21234                                  	;;mov	byte [ALLOWED],18h
 21235                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21236                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21237                                  	;call	GETBUFFR
 21238 000036DA E87622                  	call	GETBUFFER ; *	; pre-read
 21239 000036DD 72A6                    	jc	short get_io_sft_retn
 21240                                  
 21241                                  	;entry	SET_BUF_AS_DIR
 21242                                  
 21243                                  SET_BUF_AS_DIR:
 21244                                  
 21245                                  ;	Set the type of CURBUF to be a directory sector.
 21246                                  ;	Only flags are modified.
 21247                                  
 21248 000036DF 1E                      	PUSH	DS
 21249 000036E0 56                      	PUSH	SI
 21250 000036E1 C536[E205]              	LDS	SI,[CURBUF]
 21251                                  	;or	byte [si+5],4
 21252 000036E5 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21253 000036E9 5E                      	POP	SI
 21254 000036EA 1F                      	POP	DS
 21255                                  dirread_retn:
 21256 000036EB C3                      	retn
 21257                                  
 21258                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21259                                  ;----------------------------------------------------------------------------
 21260                                  ;
 21261                                  ; Procedure Name : FATSECRD
 21262                                  ; Inputs:
 21263                                  ;	Same as DREAD
 21264                                  ;	DS:BX = Transfer address
 21265                                  ;	CX = Number of sectors
 21266                                  ;	DX = Absolute record number
 21267                                  ;	ES:BP = Base of drive parameters
 21268                                  ; Function:
 21269                                  ;	Calls BIOS to perform FAT read.
 21270                                  ; Outputs:
 21271                                  ;	Same as DREAD
 21272                                  ;---------------------------------------------------------------------------
 21273                                  
 21274                                  	; 04/05/2019 - Retro DOS v4.0
 21275                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21276                                  
 21277                                  FATSECRD:
 21278                                  ;hkn; SS override
 21279                                  	;mov	byte [ss:ALLOWED],18h
 21280 000036EC 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21281 000036F2 89CF                    	MOV	DI,CX
 21282                                  	;mov	cl,[es:bp+8]
 21283 000036F4 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21284                                  	; MSDOS 3.3
 21285                                  	;;mov	al,[es:bp+0Fh]
 21286                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21287                                  	;XOR	AH,AH
 21288                                  	; MSDOS 6.0
 21289                                  	;mov	ax,[es:bp+0Fh]
 21290 000036F8 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21291 000036FC 30ED                    	XOR	CH,CH	
 21292 000036FE 52                      	PUSH	DX
 21293                                  NXTFAT:
 21294                                  	; MSDOS 6.0
 21295                                  ;hkn; SS override
 21296 000036FF 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21297 00003706 51                      	PUSH	CX			;32mb
 21298 00003707 50                      	PUSH	AX
 21299 00003708 89F9                    	MOV	CX,DI
 21300 0000370A E85B00                  	call	DSKREAD
 21301 0000370D 58                      	POP	AX
 21302 0000370E 59                      	POP	CX
 21303 0000370F 7420                    	JZ	short RET41P		; Carry clear
 21304 00003711 01C2                    	ADD	DX,AX
 21305 00003713 E2EA                    	LOOP	NXTFAT
 21306 00003715 5A                      	POP	DX
 21307 00003716 89F9                    	MOV	CX,DI
 21308                                  
 21309                                  ; NOTE FALL THROUGH
 21310                                  
 21311                                  ;Break	<DREAD -- DO A DISK READ>
 21312                                  ;---------------------------------------------------------------------------
 21313                                  ;
 21314                                  ; Procedure Name : DREAD
 21315                                  ;
 21316                                  ; Inputs:
 21317                                  ;	DS:BX = Transfer address
 21318                                  ;	CX = Number of sectors
 21319                                  ;	DX = Absolute record number	      (LOW)
 21320                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21321                                  ;	ES:BP = Base of drive parameters
 21322                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21323                                  ; Function:
 21324                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21325                                  ;	errors, will call HARDERRRW for further action.
 21326                                  ; Outputs:
 21327                                  ;	Carry set if error (currently user FAILED to INT 24)
 21328                                  ; DS,ES:BP preserved. All other registers destroyed.
 21329                                  ;---------------------------------------------------------------------------
 21330                                  
 21331                                  	;entry	DREAD
 21332                                  DREAD:
 21333 00003718 E84D00                  	call	DSKREAD
 21334 0000371B 74CE                    	jz	short dirread_retn	; Carry clear
 21335                                  ;hkn; SS override
 21336 0000371D 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21337 00003723 E89A00                  	call	HARDERRRW
 21338 00003726 3C01                    	CMP	AL,1			; Check for retry
 21339 00003728 74EE                    	JZ	short DREAD
 21340 0000372A 3C03                    	CMP	AL,3			; Check for FAIL
 21341 0000372C F8                      	CLC
 21342 0000372D 7501                    	JNZ	short NO_CAR		; Ignore
 21343 0000372F F9                      	STC
 21344                                  NO_CAR:
 21345 00003730 C3                      	retn
 21346                                  RET41P: 
 21347 00003731 5A                      	POP	DX
 21348 00003732 C3                      	retn
 21349                                  
 21350                                  ; 24/07/2018 - Retro DOS v3.0
 21351                                  
 21352                                  ;Break	<CHECK_WRITE_LOCK>
 21353                                  ;---------------------------------------------------------------------------
 21354                                  ;
 21355                                  ; Procedure Name : CHECK_WRITE_LOCK
 21356                                  ;
 21357                                  ; Inputs:
 21358                                  ;	output of SETUP
 21359                                  ;	ES:DI -> SFT
 21360                                  ; Function:
 21361                                  ;	check write lock
 21362                                  ; Outputs:
 21363                                  ;	Carry set if error
 21364                                  ;	Carry clear if ok
 21365                                  ;
 21366                                  ;----------------------------------------------------------------------------
 21367                                  
 21368                                  	; 04/05/2019 - Retro DOS v4.0
 21369                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21370                                  
 21371                                  CHECK_WRITE_LOCK:
 21372                                  	; MSDOS 6.0
 21373                                  	;test	byte [es:di+4],8
 21374 00003733 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21375                                  	;JZ	short write_cont			     ;no
 21376                                  	;;call	SET_ACC_ERR_DS
 21377                                  	;;retn
 21378                                  	;;jnz	SET_ACC_ERR_DS
 21379                                  	; 19/08/2018
 21380                                  	;jz	short write_cont
 21381                                  	;jmp	SET_ACC_ERR_DS
 21382                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21383 00003738 7403                    	JZ	short write_cont
 21384                                  	;call	SET_ACC_ERR_DS
 21385                                  	;retn
 21386                                  	; 16/12/2022
 21387 0000373A E9B901                  	jmp	SET_ACC_ERR_DS
 21388                                  
 21389                                  write_cont:				;
 21390 0000373D 51                      	PUSH	CX			;save reg
 21391 0000373E 09C9                    	OR	CX,CX			;
 21392 00003740 7501                    	JNZ	short Not_Truncate	;
 21393 00003742 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21394                                  Not_Truncate:				;
 21395 00003743 B080                    	MOV	AL,80H			;check write access
 21396 00003745 E8BE3B                  	call	LOCK_CHECK		;check lock
 21397 00003748 59                      	POP	CX			;restore reg
 21398 00003749 7305                    	JNC	short WRITE_OK		;lock ok
 21399 0000374B E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21400 0000374E 73ED                    	JNC	short write_cont	;retry
 21401                                  WRITE_OK:				;
 21402 00003750 C3                      	retn				;
 21403                                  
 21404                                  ;Break	<CHECK_READ_LOCK>
 21405                                  ;---------------------------------------------------------------------------
 21406                                  ;
 21407                                  ; Procedure Name : CHECK_READ_LOC
 21408                                  ;
 21409                                  ; Inputs:
 21410                                  ;	ES:DI -> SFT
 21411                                  ;	output of SETUP
 21412                                  ; Function:
 21413                                  ;	check read lock
 21414                                  ; Outputs:
 21415                                  ;	Carry set if error
 21416                                  ;	Carry clear if ok
 21417                                  ;----------------------------------------------------------------------------
 21418                                  
 21419                                  CHECK_READ_LOCK:
 21420                                  	; MSDOS 6.0
 21421                                  	;test	byte [es:di+4],8
 21422 00003751 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21423                                  	;JZ	short do_retry			   	     ; no
 21424                                  	;;call	SET_ACC_ERR
 21425                                  	;;retn
 21426                                  	;;jnz	SET_ACC_ERR
 21427                                  	; 16/12/2022
 21428                                  	; 28/07/2019
 21429 00003756 7403                    	jz	short do_retry
 21430 00003758 E99D01                  	jmp	SET_ACC_ERR
 21431                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21432                                  	;JZ	short do_retry
 21433                                  	;call	SET_ACC_ERR
 21434                                  	;retn
 21435                                  do_retry:				;
 21436 0000375B 30C0                    	xor	al,al			;check read access
 21437 0000375D E8A63B                  	call	LOCK_CHECK		;check lock
 21438 00003760 7305                    	JNC	short READLOCK_OK 	;lock ok
 21439 00003762 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21440 00003765 73F4                    	JNC	short do_retry		;retry
 21441                                  READLOCK_OK:				;
 21442 00003767 C3                      	retn				;
 21443                                  
 21444                                  ;============================================================================
 21445                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21446                                  ;============================================================================
 21447                                  ; 24/07/2018 - Retro DOS v3.0
 21448                                  ; 04/05/2019 - Retro DOS v4.0
 21449                                  
 21450                                  ;	TITLE	DISK2 - Disk utility routines
 21451                                  ;	NAME	Disk2
 21452                                  
 21453                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21454                                  ;
 21455                                  ;	DskRead
 21456                                  ;	DWRITE
 21457                                  ;	DSKWRITE
 21458                                  ;	HarderrRW
 21459                                  ;	SETUP
 21460                                  ;	BREAKDOWN
 21461                                  ;	READ_LOCK_VIOLATION
 21462                                  ;	WRITE_LOCK_VIOLATION
 21463                                  ;	DISKREAD
 21464                                  ;	SET_ACC_ERR_DS
 21465                                  ;	SET_ACC_ERR
 21466                                  ;	SETSFT
 21467                                  ;	SETCLUS
 21468                                  ;	AddRec
 21469                                  ;
 21470                                  ;	Revision history:
 21471                                  ;
 21472                                  ;		AN000 version 4.00 Jan. 1988
 21473                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21474                                  
 21475                                  ; 04/05/2019 - Retro DOS v4.0
 21476                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21477                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21478                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21479                                  
 21480                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21481                                  ;---------------------------------------------------------------------------
 21482                                  ;
 21483                                  ; Procedure Name : DSKREAD
 21484                                  ;
 21485                                  ; Inputs:
 21486                                  ;	DS:BX = Transfer addr
 21487                                  ;	CX = Number of sectors
 21488                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21489                                  ;	DX = Absolute record number	       (LOW)
 21490                                  ;	ES:BP = Base of drive parameters
 21491                                  ; Function:
 21492                                  ;	Call BIOS to perform disk read
 21493                                  ; Outputs:
 21494                                  ;	DI = CX on entry
 21495                                  ;	CX = Number of sectors unsuccessfully transfered
 21496                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21497                                  ;	Zero set if OK (from BIOS) (carry clear)
 21498                                  ;	Zero clear if error (carry clear)
 21499                                  ; SI Destroyed, others preserved
 21500                                  ;---------------------------------------------------------------------------
 21501                                  
 21502                                  DSKREAD:
 21503 00003768 51                      	PUSH	CX
 21504                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21505 00003769 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21506                                  	;mov	al,[es:bp+1]
 21507 0000376D 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21508 00003771 53                      	PUSH	BX
 21509 00003772 06                      	PUSH	ES
 21510 00003773 E87B0F                  	call	SETREAD
 21511 00003776 EB27                    	JMP	short DODSKOP
 21512                                  
 21513                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21514                                  ;--------------------------------------------------------------------------
 21515                                  ;
 21516                                  ; Procedure Name : DWRITE
 21517                                  ;
 21518                                  ; Inputs:
 21519                                  ;	DS:BX = Transfer address
 21520                                  ;	CX = Number of sectors
 21521                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21522                                  ;	DX = Absolute record number	       (LOW)
 21523                                  ;	ES:BP = Base of drive parameters
 21524                                  ;	[ALLOWED] must be set in case HARDERR called
 21525                                  ; Function:
 21526                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21527                                  ;	errors, will call HARDERRRW for further action.
 21528                                  ; Output:
 21529                                  ;	Carry set if error (currently, user FAILed to I 24)
 21530                                  ; BP preserved. All other registers destroyed.
 21531                                  ;----------------------------------------------------------------------------
 21532                                  
 21533                                  	;entry	DWRITE
 21534                                  DWRITE:
 21535 00003778 E81600                  	CALL	DSKWRITE
 21536 0000377B 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21537                                  
 21538                                  ;hkn; SS override
 21539 0000377D 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21540 00003783 E83A00                  	call	HARDERRRW
 21541 00003786 3C01                    	CMP	AL,1		; Check for retry
 21542 00003788 74EE                    	JZ	short DWRITE
 21543 0000378A 3C03                    	CMP	AL,3		; Check for FAIL
 21544 0000378C F8                      	CLC
 21545 0000378D 7501                    	JNZ	short NO_CAR2 	; Ignore
 21546 0000378F F9                      	STC
 21547                                  NO_CAR2:
 21548                                  dw_ret_label:
 21549 00003790 C3                      	retn
 21550                                  
 21551                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21552                                  ;---------------------------------------------------------------------------
 21553                                  ;
 21554                                  ; Procedure Name : DSKWRITE
 21555                                  ;
 21556                                  ; Inputs:
 21557                                  ;	DS:BX = Transfer addr
 21558                                  ;	CX = Number of sectors
 21559                                  ;	DX = Absolute record number	       (LOW)
 21560                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21561                                  ;	ES:BP = Base of drive parameters
 21562                                  ; Function:
 21563                                  ;	Call BIOS to perform disk read
 21564                                  ; Outputs:
 21565                                  ;	DI = CX on entry
 21566                                  ;	CX = Number of sectors unsuccessfully transfered
 21567                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21568                                  ;	Zero set if OK (from BIOS) (carry clear)
 21569                                  ;	Zero clear if error (carry clear)
 21570                                  ; SI Destroyed, others preserved
 21571                                  ;
 21572                                  ;----------------------------------------------------------------------------
 21573                                  
 21574                                  	;entry	DSKWRITE
 21575                                  DSKWRITE:
 21576 00003791 51                      	PUSH	CX
 21577                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21578 00003792 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21579                                  	;mov	al,[es:bp+1]
 21580 00003796 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21581 0000379A 53                      	PUSH	BX
 21582 0000379B 06                      	PUSH	ES
 21583 0000379C E8850F                  	call	SETWRITE
 21584                                  DODSKOP:
 21585 0000379F 8CD9                    	MOV	CX,DS		; Save DS
 21586 000037A1 1F                      	POP	DS		; DS:BP points to DPB
 21587 000037A2 1E                      	PUSH	DS
 21588                                  
 21589                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21590 000037A3 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21591 000037A7 E8D10E                  	call	DEVIOCALL2
 21592                                  
 21593 000037AA 8ED9                    	MOV	DS,CX		; Restore DS
 21594 000037AC 07                      	POP	ES		; Restore ES
 21595 000037AD 5B                      	POP	BX
 21596                                  
 21597                                  ;hkn; SS override
 21598 000037AE 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21599 000037B3 5F                      	POP	DI
 21600 000037B4 29F9                    	SUB	CX,DI
 21601 000037B6 F7D9                    	NEG	CX		; Number of sectors not transferred
 21602                                  
 21603                                  ;hkn; SS override
 21604 000037B8 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21605                                  	;test	ax,8000h
 21606                                  	; 17/12/2022
 21607                                  	;test	ah,80h
 21608 000037BC F6C480                  	test	ah,(STERR>>8)
 21609                                  	;test	AX,STERR
 21610 000037BF C3                      	retn
 21611                                  
 21612                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21613                                  ;---------------------------------------------------------------------------
 21614                                  ;
 21615                                  ; Procedure Name : HardErrRW
 21616                                  ;
 21617                                  ; Inputs:
 21618                                  ;	AX is error code from read or write
 21619                                  ;	Other registers set as per HARDERR
 21620                                  ; Function:
 21621                                  ;	Checks the error code for special extended
 21622                                  ;	errors and maps them if needed. Then invokes
 21623                                  ;	Harderr
 21624                                  ; Outputs:
 21625                                  ;	Of HARDERR
 21626                                  ; AX may be modified prior to call to HARDERR.
 21627                                  ; No other registers altered.
 21628                                  ;
 21629                                  ;---------------------------------------------------------------------------
 21630                                  
 21631                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21632                                  HARDERRRW:
 21633                                  	;cmp	al,0Fh
 21634 000037C0 3C0F                    	CMP	AL,error_I24_wrong_disk
 21635 000037C2 7512                    	JNZ	short DO_ERR				; Nothing to do
 21636                                  
 21637                                  	; MSDOS 3.3
 21638                                  	;push	ds
 21639                                  	;push	si
 21640                                  	;lds	si,[ss:CALLVIDRW]
 21641                                  	;mov	[ss:EXTERRPT+2], ds
 21642                                  	;mov	[ss:EXTERRPT], si
 21643                                  	;pop	si
 21644                                  	;pop	ds
 21645                                  
 21646                                  	; MSDOS 6.0
 21647 000037C4 50                      	push	ax
 21648 000037C5 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21649 000037C9 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21650 000037CD 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21651 000037D1 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21652 000037D5 58                      	pop	ax
 21653                                  DO_ERR:
 21654                                  	;;call	HARDERR
 21655                                  	;;retn
 21656                                  	; 16/12/2022
 21657                                  	; 10/06/2019
 21658 000037D6 E9351B                  	jmp	HARDERR	
 21659                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21660                                  	;call	HARDERR
 21661                                  	;retn
 21662                                  
 21663                                  ; 24/07/2018 - Retro DOS v3.0
 21664                                  
 21665                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21666                                  ;----------------------------------------------------------------------------
 21667                                  ;
 21668                                  ; Procedure Name : SETUP
 21669                                  ;
 21670                                  ; Inputs:
 21671                                  ;	ES:DI point to SFT (value also in THISSFT)
 21672                                  ;	DMAAdd contains transfer address
 21673                                  ;	CX = Byte count
 21674                                  ;	DS = DOSDATA
 21675                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21676                                  ;		2nd of caller of caller.
 21677                                  ; Outputs:
 21678                                  ;	    CX = byte count
 21679                                  ;	    [THISDPB] = Base of drive parameters if file
 21680                                  ;		      = Pointer to device header if device or NET
 21681                                  ;	    ES:DI Points to SFT
 21682                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21683                                  ;	    [TRANS] = 0 (No transfers yet)
 21684                                  ;	    BytPos = Byte position in file
 21685                                  ;
 21686                                  ;	The following fields are relevant to local files (not devices) only:
 21687                                  ;
 21688                                  ;	    SecPos = Position of first sector (local files only)
 21689                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21690                                  ;	    [CLUSNUM] = First cluster (local files only)
 21691                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21692                                  ;	    [THISDRV] = Physical unit number (local files only)
 21693                                  ;
 21694                                  ;      RETURNS ONE LEVEL UP WITH:
 21695                                  ;	   CX = 0
 21696                                  ;	   CARRY = Clear
 21697                                  ;	IF AN ERROR IS DETECTED
 21698                                  ; All other registers destroyed
 21699                                  ;----------------------------------------------------------------------------
 21700                                  
 21701                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21702                                  
 21703                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21704                                  
 21705                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21706                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21707                                  
 21708                                  SETUP:
 21709                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21710                                  
 21711                                  	;lds 	si,[es:di+7]
 21712 000037D9 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21713                                  
 21714                                  ;hkn; SS override
 21715 000037DD 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21716                                  
 21717                                  ;hkn; SS is DOSDATA
 21718 000037E2 16                      	push	ss
 21719 000037E3 1F                      	pop	ds
 21720                                  
 21721 000037E4 8936[8A05]              	MOV	[THISDPB],SI
 21722                                  
 21723 000037E8 8B1E[2C03]              	MOV	BX,[DMAADD]
 21724 000037EC 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21725 000037F0 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21726                                  	;mov	ax,[es:di+15h]
 21727 000037F5 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21728                                  	;mov	dx,[es:di+17h]
 21729 000037F9 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21730 000037FD 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21731 00003801 A3[CE05]                	MOV	[BYTPOS],AX
 21732                                  	;test	word [es:di+5],8080h
 21733 00003804 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21734 0000380A 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21735 0000380C 06                      	PUSH	ES
 21736 0000380D C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21737                                  
 21738                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21739                                  	;;mov	bl,[es:bp+0]
 21740                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21741                                  	; 05/12/2022
 21742 00003811 268A5E00                	mov	bl,[es:bp]
 21743                                  	
 21744 00003815 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21745                                  	;mov	bx,[es:bp+2]
 21746 00003819 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21747                                  
 21748                                  	;; MSDOS 3.3
 21749                                  	;cmp	dx,bx
 21750                                  	;jnb	short EOFERR
 21751                                  	;div	bx
 21752                                  	;mov	[SECPOS],ax
 21753                                  	;mov	[BYTSECPOS],dx
 21754                                  	;mov	dx,ax
 21755                                  	;;and	al,[es:bp+4]
 21756                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21757                                  	;mov	[SECCLUSPOS],al
 21758                                  	;mov	ax,cx
 21759                                  	;;mov	cl,[es:bp+5]
 21760                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21761                                  	;shr	dx,cl
 21762                                  	;mov	[CLUSNUM],dx
 21763                                  	;pop	es
 21764                                  	;mov	cx,ax
 21765                                  
 21766                                  	; 04/05/2019 - Retro DOS v4.0
 21767                                  
 21768                                  	; MSDOS 6.0
 21769                                  ;M039: Optimized this section.
 21770 0000381D 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21771 0000381E E83405                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21772 00003821 8916[CC05]              	MOV	[BYTSECPOS],DX
 21773 00003825 A3[C405]                	MOV	[SECPOS],AX
 21774 00003828 890E[C605]              	MOV	[SECPOS+2],CX
 21775 0000382C 89CA                    	MOV	DX,CX
 21776                                  
 21777 0000382E 89C3                    	MOV	BX,AX
 21778                                  	;and	bl,[es:bp+4]
 21779 00003830 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21780 00003834 881E[7305]              	MOV	[SECCLUSPOS],BL
 21781                                  
 21782 00003838 E84105                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21783 0000383B 59                      	POP	CX			;CX = byte count.
 21784 0000383C 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21785                                  	;cmp	ax,[es:bp+0Dh]
 21786 0000383E 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21787 00003842 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21788                                  
 21789 00003844 A3[BC05]                	MOV	[CLUSNUM],AX
 21790 00003847 07                      	POP	ES			; ES:DI point to SFT
 21791                                  ;M039
 21792                                  
 21793                                  NOSETSTUFF:
 21794 00003848 89C8                    	MOV	AX,CX		; AX = Byte count.
 21795 0000384A 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21796 0000384E 730C                    	JNC	short setup_OK	; Must be less than 64
 21797 00003850 A1[2C03]                	MOV	AX,[DMAADD]
 21798 00003853 F7D8                    	NEG	AX		; Amount of room left in segment (know
 21799                                  				;    less than 64K since max value of CX
 21800                                  				;    is FFFF).
 21801 00003855 7501                    	JNZ	short NoDec
 21802 00003857 48                      	DEC	AX
 21803                                  NoDec:
 21804 00003858 89C1                    	MOV	CX,AX		; Can do this much
 21805 0000385A E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21806                                  setup_OK:
 21807 0000385C C3                      	retn
 21808                                  
 21809                                  EOFERR:
 21810 0000385D 07                      	POP	ES		; ES:DI point to SFT
 21811 0000385E 31C9                    	XOR	CX,CX		; No bytes read
 21812                                  ;;;;;;;;;;; 7/18/86
 21813                                  	; MSDOS 3.3
 21814                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21815                                  ;;;;;;;;;;;
 21816                                  NOROOM:
 21817 00003860 5B                      	POP	BX		; Kill return address
 21818 00003861 F8                      	CLC
 21819 00003862 C3                      	retn			; RETURN TO CALLER OF CALLER
 21820                                  
 21821                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21822                                  ;---------------------------------------------------------------------------
 21823                                  ;
 21824                                  ; Procedure Name : BREAKDOWN
 21825                                  ;
 21826                                  ; Inputs:
 21827                                  ;	CX = Length of disk transfer in bytes
 21828                                  ;	ES:BP = Base of drive parameters
 21829                                  ;	[BYTSECPOS] = Byte position within first sector
 21830                                  ;	DS = DOSDATA
 21831                                  ; Outputs:
 21832                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21833                                  ;	[SECCNT] = No. of whole sectors to transfer
 21834                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21835                                  ; AX, BX, DX destroyed. No other registers affected.
 21836                                  ;---------------------------------------------------------------------------
 21837                                  
 21838                                  BREAKDOWN:
 21839 00003863 A1[CC05]                	MOV	AX,[BYTSECPOS]
 21840 00003866 89CB                    	MOV	BX,CX
 21841 00003868 09C0                    	OR	AX,AX
 21842 0000386A 740E                    	JZ	short SAVFIR	; Partial first sector?
 21843                                  	;sub	ax,[es:bp+2]
 21844 0000386C 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21845 00003870 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21846 00003872 29C3                    	SUB	BX,AX		; Subtract from total length
 21847 00003874 7304                    	JAE	short SAVFIR
 21848 00003876 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21849 00003878 31DB                    	XOR	BX,BX		; And no bytes are left
 21850                                  SAVFIR:
 21851 0000387A A3[D205]                	MOV	[BYTCNT1],AX
 21852 0000387D 89D8                    	MOV	AX,BX
 21853 0000387F 31D2                    	XOR	DX,DX
 21854                                  	;div	word [ES:BP+2]
 21855 00003881 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21856 00003885 A3[D605]                	MOV	[SECCNT],AX
 21857 00003888 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21858                                  	; MSDOS 3.3
 21859                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21860                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21861                                  	;CMP	AX,1
 21862                                  	;retnz
 21863                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21864                                  	;MOV	[BYTCNT2],AX
 21865                                  	;MOV	[SECCNT],DX	; DX = 0
 21866                                  _RET45:
 21867 0000388C C3                      	retn
 21868                                  
 21869                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21870                                  
 21871                                  ;----------------------------------------------------------------------------
 21872                                  ;
 21873                                  ; Procedure Name : READ_LOCK_VIOLATION
 21874                                  ;
 21875                                  ; ES:DI points to SFT. This entry used by NET_READ
 21876                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21877                                  ; Else do retrys.
 21878                                  ; ES:DI,DS,CX preserved
 21879                                  ;
 21880                                  ;----------------------------------------------------------------------------
 21881                                  
 21882                                  READ_LOCK_VIOLATION:
 21883 0000388D C606[7505]00            	MOV	byte [READOP],0
 21884                                  ERR_ON_CHECK:
 21885                                  	;;test	word [es:di+2],8000h
 21886                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21887                                  	;JNZ	short HARD_ERR
 21888                                  
 21889                                  	; 04/05/2019
 21890                                  	;test	byte [es:di+3],80h
 21891 00003892 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21892 00003897 7508                    	JNZ	short HARD_ERR
 21893                                  
 21894                                  	;PUSH	CX
 21895                                  	;;mov	cl,[es:di+2]
 21896                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21897                                  	;;and	cl,0F0h
 21898                                  	;AND	CL,SHARING_MASK
 21899                                  	;;cmp	cl,0
 21900                                  	;CMP	CL,SHARING_COMPAT
 21901                                  	;POP	CX
 21902                                  	;JNE	short NO_HARD_ERR
 21903                                  	; 21/09/2023
 21904 00003899 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 21905 0000389D 24F0                    	and	al,SHARING_MASK
 21906                                  	;cmp	al,SHARING_COMPAT
 21907                                  	;jne	short NO_HARD_ERR
 21908 0000389F 7505                    	jnz	short NO_HARD_ERR
 21909                                  HARD_ERR:
 21910 000038A1 E8783A                  	call	LOCK_VIOLATION
 21911 000038A4 73E6                    	jnc	short _RET45		; User wants Retrys
 21912                                  NO_HARD_ERR:
 21913 000038A6 31C9                    	XOR	CX,CX			;No bytes transferred
 21914                                  	;mov	ax,21h
 21915 000038A8 B82100                  	MOV	AX,error_lock_violation
 21916 000038AB F9                      	STC
 21917 000038AC C3                      	retn
 21918                                  
 21919                                  ;----------------------------------------------------------------------------
 21920                                  ;
 21921                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21922                                  ;
 21923                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21924                                  ; This entry used by NET_WRITE
 21925                                  ;
 21926                                  ;----------------------------------------------------------------------------
 21927                                  
 21928                                  WRITE_LOCK_VIOLATION:
 21929 000038AD C606[7505]01            	MOV	byte [READOP],1
 21930 000038B2 EBDE                    	JMP	short ERR_ON_CHECK
 21931                                  
 21932                                  ; 04/05/2019 - Retro DOS v4.0
 21933                                  
 21934                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21935                                  
 21936                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21937                                  ;----------------------------------------------------------------------------
 21938                                  ;
 21939                                  ; Procedure Name : DISKREAD
 21940                                  ;
 21941                                  ; Inputs:
 21942                                  ;	Outputs of SETUP
 21943                                  ; Function:
 21944                                  ;	Perform disk read
 21945                                  ; Outputs:
 21946                                  ;    Carry clear
 21947                                  ;	CX = No. of bytes read
 21948                                  ;	ES:DI point to SFT
 21949                                  ;	SFT offset and cluster pointers updated
 21950                                  ;    Carry set
 21951                                  ;	CX = 0
 21952                                  ;	ES:DI point to SFT
 21953                                  ;	AX has error code
 21954                                  ;----------------------------------------------------------------------------
 21955                                  
 21956                                  ;hkn; called from disk.asm. DS already set up.
 21957                                  
 21958                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21959                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21960                                  
 21961                                  DISKREAD:
 21962                                  	;mov	ax,[es:di+11h]
 21963 000038B4 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21964                                  	;mov	bx,[es:di+13h]
 21965 000038B8 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21966 000038BC 2B06[CE05]              	SUB	AX,[BYTPOS]
 21967 000038C0 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21968 000038C4 7226                    	JB	short RDERR		;Read starts past EOF
 21969 000038C6 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21970 000038C8 09C0                    	OR	AX,AX
 21971 000038CA 7420                    	JZ	short RDERR		;Read starts at EOF
 21972 000038CC 39C8                    	CMP	AX,CX
 21973 000038CE 7302                    	JAE	short ENUF		;I/O fits
 21974 000038D0 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21975                                  ENUF:
 21976                                  	; MSDOS 3.3
 21977                                  	;test	byte [es:di+4],8
 21978                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21979                                  	;jnz	short SET_ACC_ERR
 21980                                  	;call	LOCK_CHECK
 21981                                  	;jnb	short _READ_OK
 21982                                  	;call	READ_LOCK_VIOLATION
 21983                                  	;jnb	short ENUF
 21984                                  	;retn
 21985                                  
 21986                                  	; MSDOS 6.0
 21987 000038D2 E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21988 000038D5 7301                    	JNC	short _READ_OK 		; There are no locks
 21989 000038D7 C3                      	retn
 21990                                  
 21991                                  _READ_OK:
 21992 000038D8 C42E[8A05]              	LES	BP,[THISDPB]
 21993 000038DC E884FF                  	CALL	BREAKDOWN
 21994 000038DF 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21995                                  
 21996 000038E3 E87113                  	call	FNDCLUS
 21997                                       	; MSDOS 6.0			;M022 conditional removed here
 21998 000038E6 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21999                                  					; migrated from 330a - HKN
 22000 000038E8 09C9                    	OR	CX,CX
 22001 000038EA 7413                    	JZ	short SKIPERR
 22002                                  RDERR:
 22003 000038EC B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22004 000038EE E92102                  	jmp	WRTERR22
 22005                                  
 22006                                  ;RDLASTJ: 
 22007                                  	;JMP	RDLAST                  ;M039
 22008                                  
 22009                                  SETSFTJ2: 
 22010 000038F1 E99600                  	JMP	SETSFT
 22011                                  
 22012                                  CANOT_READ:
 22013                                  	; MSDOS 3.3
 22014                                  	;POP	CX		;M039.
 22015                                  	; MSDOS 3.3 & MSDOS 6.0
 22016 000038F4 59                      	POP	CX              ;Clean stack.
 22017 000038F5 5B                      	POP	BX
 22018                                  
 22019                                  	;entry	SET_ACC_ERR_DS
 22020                                  SET_ACC_ERR_DS:
 22021                                  
 22022                                  ;hkn; SS is DOSDATA
 22023                                  	;Context DS
 22024 000038F6 16                      	push	ss
 22025 000038F7 1F                      	pop	ds
 22026                                  
 22027                                  	;entry	SET_ACC_ERR
 22028                                  SET_ACC_ERR:
 22029 000038F8 31C9                    	XOR	CX,CX
 22030                                  	;mov	ax,5
 22031 000038FA B80500                  	MOV	AX,error_access_denied
 22032 000038FD F9                      	STC
 22033 000038FE C3                      	retn
 22034                                  
 22035                                  SKIPERR:
 22036 000038FF 8916[BA05]              	MOV	[LASTPOS],DX
 22037 00003903 891E[BC05]              	MOV	[CLUSNUM],BX
 22038 00003907 833E[D205]00            	CMP	word [BYTCNT1],0
 22039 0000390C 7405                    	JZ	short RDMID
 22040                                  
 22041 0000390E E8BC13                  	call	BUFRD
 22042 00003911 72E3                    	JC	short SET_ACC_ERR_DS
 22043                                  
 22044                                  RDMID:
 22045 00003913 833E[D605]00            	CMP	word [SECCNT],0
 22046                                  	;JZ	RDLAST ; 10/08/2018
 22047 00003918 7453                    	jz	short RDLAST
 22048                                  
 22049 0000391A E84514                  	call	NEXTSEC
 22050 0000391D 72D2                    	JC	short SETSFTJ2
 22051                                  
 22052 0000391F C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22053                                  ONSEC:
 22054 00003924 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22055 00003928 8B0E[D605]              	MOV	CX,[SECCNT]
 22056 0000392C 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22057                                  RDLP:
 22058 00003930 E86014                  	call	OPTIMIZE
 22059 00003933 72C1                    	JC	short SET_ACC_ERR_DS
 22060                                  
 22061 00003935 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22062 00003936 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22063 00003937 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22064                                  	;mov	byte [ALLOWED],38h
 22065 00003938 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22066 0000393D 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22067                                  
 22068 00003941 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22069 00003942 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22070                                  
 22071                                  	; 04/05/2019 - Retro DOS v4.0
 22072                                  
 22073                                  	; MSDOS 6.0
 22074 00003943 E80322                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22075                                  
 22076                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22077 00003946 E8CFFD                  	call	DREAD
 22078                                  
 22079                                  	; MSDOS 3.3 
 22080                                  	;pop	bx
 22081                                  	;pop	dx
 22082                                  	;jc	short CANOT_READ
 22083                                  	;add	bx,dx	; (bx = Extent end)
 22084                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22085                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22086                                  	;call	SETVISIT
 22087                                  	; ->***
 22088                                  ;M039
 22089                                  	; MSDOS 6.0 
 22090 00003949 59                      	pop	cx
 22091 0000394A 5A                      	pop	dx
 22092 0000394B 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22093 00003950 72A2                    	jc	short CANOT_READ
 22094                                  
 22095 00003952 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22096                                  
 22097                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22098                                  ;            sectors, also termed an "Extent".)
 22099                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22100                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22101                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22102                                  ;
 22103                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22104                                  ;	buffers must be "read" into the transfer memory block, so that the
 22105                                  ;       transfer memory reflects the most recent data.
 22106                                  
 22107 00003957 E85E00                  	call	DskRdBufScan
 22108                                  
 22109                                  	;Context DS
 22110 0000395A 16                      	push	ss
 22111 0000395B 1F                      	pop	ds
 22112                                          
 22113 0000395C 59                      	pop	cx
 22114 0000395D 5B                              pop	bx
 22115                                  
 22116                                  ;       CX = # of sector remaining.
 22117                                  ;       BX = Next physical cluster.
 22118                                  
 22119                                  ;M039
 22120                                  
 22121                                  ;;;;;;;;
 22122                                  ;	; 25/07/2018 - Retro DOS v3.0
 22123                                  ;	; ***->
 22124                                  ;	; MSDOS 3.3
 22125                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22126                                  ;bufq:
 22127                                  ;;	DX = Extent start.
 22128                                  ;;	BX = Extent end.
 22129                                  ;;	 AL = Drive #.
 22130                                  ;;     DS:DI-> 1st buffer in queue.
 22131                                  ;
 22132                                  ;	;or	byte [di+5],20h
 22133                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22134                                  ;	;cmp	al,[di+4]	
 22135                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22136                                  ;	jnz	short bufq3
 22137                                  ;	;cmp	[di+6],dx
 22138                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22139                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22140                                  ;	;cmp	[di+6],bx
 22141                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22142                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22143                                  ;	
 22144                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22145                                  ;
 22146                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22147                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22148                                  ;;      as MRU (Most Recently Used).
 22149                                  ;
 22150                                  ;	;test	byte [di+5],40h
 22151                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22152                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22153                                  ;	pop	ax ; transfer address
 22154                                  ;	push	ax
 22155                                  ;	push	di
 22156                                  ;	push	dx
 22157                                  ;	;sub	dx,[di+6]
 22158                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22159                                  ;	neg	dx
 22160                                  ;
 22161                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22162                                  ;;           block.
 22163                                  ;
 22164                                  ;	mov	si,di
 22165                                  ;	mov	di,ax
 22166                                  ;	mov	ax,dx
 22167                                  ;	;mov	cx,[es:bp+6]	
 22168                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22169                                  ;	mul	cx
 22170                                  ;	add	di,ax
 22171                                  ;
 22172                                  ;	lea	si,[si+16]
 22173                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22174                                  ;	shr	cx,1
 22175                                  ;	push	es
 22176                                  ;	mov	es,[SS:DMAADD+2]
 22177                                  ;
 22178                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22179                                  ;;      DS:SI-> Buffer sector data.
 22180                                  ;;      ES:DI-> Destination within Transfer memory block.
 22181                                  ;
 22182                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22183                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22184                                  ;	;rep	movsb                   ;Copy last byte.
 22185                                  ;	jnc	short bufq1
 22186                                  ;	movsb
 22187                                  ;bufq1:
 22188                                  ;	pop	es
 22189                                  ;	pop	dx
 22190                                  ;	pop	di
 22191                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22192                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22193                                  ;bufq2:
 22194                                  ;	call	SCANPLACE
 22195                                  ;bufq3:
 22196                                  ;	call	SKIPVISIT
 22197                                  ;	jnz	short bufq
 22198                                  ;	
 22199                                  ;	push	ss
 22200                                  ;	pop	ds
 22201                                  ;	pop	cx
 22202                                  ;	pop	cx
 22203                                  ;	pop	bx	
 22204                                  ;bufq4:
 22205                                  ;;;;;;;
 22206 0000395E E30D                    	JCXZ	RDLAST
 22207                                  
 22208 00003960 E8CE1B                  	call	IsEOF			; test for eof on fat size
 22209 00003963 7325                    	JAE	short SETSFT
 22210                                  
 22211 00003965 B200                    	MOV	DL,0
 22212 00003967 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22213 0000396B EBC3                    	JMP	short RDLP ; 19/05/2019
 22214                                  
 22215                                  RDLAST:
 22216 0000396D A1[D405]                	MOV	AX,[BYTCNT2]
 22217 00003970 09C0                    	OR	AX,AX
 22218 00003972 7416                    	JZ	short SETSFT
 22219 00003974 A3[D205]                	MOV	[BYTCNT1],AX
 22220                                  
 22221 00003977 E8E813                  	call	NEXTSEC
 22222 0000397A 720E                    	JC	short SETSFT
 22223                                  
 22224 0000397C C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22225 00003982 E84813                  	call	BUFRD
 22226                                  	; 10/08/2018
 22227                                  
 22228 00003985 7303                    	JNC	short SETSFT
 22229 00003987 E96CFF                  	JMP	SET_ACC_ERR_DS
 22230                                  
 22231                                  ;------------------------------------------------------------------------------
 22232                                  ;
 22233                                  ; Procedure Name : SETSFT
 22234                                  ; Inputs:
 22235                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22236                                  ;		and set cluster fields
 22237                                  ; Function:
 22238                                  ;	Update [THISSFT] based on the transfer
 22239                                  ; Outputs:
 22240                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22241                                  ;	ES:DI points to [THISSFT]
 22242                                  ;	CX No. of bytes transferred
 22243                                  ;	Carry clear
 22244                                  ;
 22245                                  ;----------------------------------------------------------------------------
 22246                                  
 22247                                  	;entry	SETSFT
 22248                                  
 22249                                  ; 26/07/2018 - Retro DOS v3.0
 22250                                  SETSFT:
 22251 0000398A C43E[9E05]              	LES	DI,[THISSFT]
 22252                                  
 22253                                  ; Same as SETSFT except ES:DI already points to SFT
 22254                                  	;entry	SETCLUS
 22255                                  SETCLUS:	
 22256 0000398E 8B0E[B805]              	MOV	CX,[NEXTADD]
 22257 00003992 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22258                                  	;;test	word [es:di+5],80h
 22259                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22260                                  	;JNZ	short ADDREC		; don't set clusters if device
 22261                                  
 22262                                  	; 04/05/2019 - Retro DOS v4.0
 22263                                  	;test	byte [es:di+5],80h
 22264 00003996 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22265 0000399B 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22266                                  
 22267 0000399D A1[BC05]                	MOV	AX,[CLUSNUM]
 22268                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22269                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22270 000039A0 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22271 000039A4 A1[BA05]                	MOV	AX,[LASTPOS]
 22272                                  	;mov	[es:di+19h],ax
 22273 000039A7 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22274                                  
 22275                                  ;----------------------------------------------------------------------------
 22276                                  ;
 22277                                  ; Procedure : AddRec
 22278                                  ; Inputs:
 22279                                  ;	ES:DI points to SFT
 22280                                  ;	CX is No. Bytes transferred
 22281                                  ; Function:
 22282                                  ;	Update the SFT offset based on the transfer
 22283                                  ; Outputs:
 22284                                  ;	sf_position updated to point to first byte after transfer
 22285                                  ;	ES:DI points to SFT
 22286                                  ;	CX No. of bytes transferred
 22287                                  ;	Carry clear
 22288                                  ;----------------------------------------------------------------------------
 22289                                  
 22290                                  	;entry	AddRec
 22291                                  ADDREC:
 22292 000039AB E309                    	JCXZ	RET28		; If no records read,  don't change position
 22293                                  	;add	[es:di+15h],cx
 22294 000039AD 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22295                                  	;adc	word [es:di+17h], 0
 22296 000039B1 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22297                                  RET28:	
 22298 000039B6 F8                      	CLC
 22299 000039B7 C3                      	retn
 22300                                  
 22301                                  ; 25/07/2018
 22302                                  ; MSDOS 6.0
 22303                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22304                                  ;----------------------------------------------------------------------------
 22305                                  ;
 22306                                  ; Procedure Name : DskRdBufScan
 22307                                  ;
 22308                                  ; Inputs:
 22309                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22310                                  ;            sectors, also termed an "Extent".)
 22311                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22312                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22313                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22314                                  ;
 22315                                  ; Function:
 22316                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22317                                  ;	"read" into the transfer memory block, so that the transfer memory
 22318                                  ;	reflects the most recent data.
 22319                                  ;
 22320                                  ; Outputs:
 22321                                  ;       Transfer memory updated as required.
 22322                                  ;
 22323                                  ; Uses:
 22324                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22325                                  ;       SS override for all global variables.
 22326                                  ;
 22327                                  ; Notes:
 22328                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22329                                  ;	than the FIRST.
 22330                                  ;----------------------------------------------------------------------------
 22331                                  ;M039: Created
 22332                                  
 22333                                  ; 04/05/2019 - Retro DOS v4.0
 22334                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22335                                  
 22336                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22337                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22338                                  
 22339                                  ;procedure DskRdBufScan,NEAR
 22340                                  ;
 22341                                  ;ASSUME  DS:NOTHING
 22342                                  
 22343                                  DskRdBufScan:
 22344 000039B8 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22345 000039BE 743C                    	je	short bufx		     ; -no, skip all work.
 22346                                  
 22347 000039C0 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22348 000039C5 89DE                    	mov     si,bx
 22349 000039C7 01D1                    	add     cx,dx
 22350 000039C9 83D600                  	adc     si,0
 22351                                  
 22352 000039CC E8121F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22353                                  	;mov	ax,[di+2]
 22354 000039CF 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22355 000039D2 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22356                                  		
 22357                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22358                                  	;;mov	al,[es:bp+0]
 22359                                  	;mov	al,[es:bp+DPB.DRIVE]
 22360                                  	; 15/12/2022
 22361 000039D6 268A4600                	mov	al,[es:bp]
 22362                                  
 22363                                  ;       BX:DX = Extent start.
 22364                                  ;       SI:CX = Extent end + 1.
 22365                                  ;          AL = Drive #.
 22366                                  ;       DS:DI-> 1st buffer in queue.
 22367                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22368                                  
 22369                                  bufq:	
 22370                                  	;cmp	al,[di+4]
 22371 000039DA 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22372 000039DD 7514                    	jne	short bufq1        	;  -no, jump.
 22373                                  
 22374                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22375                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22376                                  
 22377                                  	;cmp	bx,[di+8]
 22378 000039DF 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22379 000039E2 7503                    	jne	short bufq01
 22380                                  	;cmp	dx,[di+6]
 22381 000039E4 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22382                                  bufq01:
 22383 000039E7 770A                    	ja	short bufq1
 22384                                  
 22385                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22386                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22387                                  
 22388                                  	;cmp	si,[di+8]
 22389 000039E9 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22390 000039EC 7503                    	jne	short bufq02
 22391                                  	;cmp	cx,[di+6]
 22392 000039EE 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22393                                  bufq02:
 22394 000039F1 770A                    	ja	short bufq2
 22395                                  bufq1:	
 22396 000039F3 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22397 000039F8 8B3D                    	mov	di,[di]
 22398                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22399 000039FA 75DE                    	jne	short bufq		; -no, do next buffer
 22400                                  bufx:
 22401 000039FC C3                      	retn				;Exit.
 22402                                  
 22403                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22404                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22405                                  ;       as MRU (Most Recently Used).
 22406                                  
 22407                                  bufq2:	
 22408 000039FD 50                      	push	ax
 22409                                  	;test	byte [di+5],40h
 22410 000039FE F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22411 00003A02 742D                    	jz	short bufq3                    ; -no, jump.
 22412                                  
 22413                                  ;       SaveReg <cx,dx,si,di,es>
 22414 00003A04 51                      	push	cx
 22415 00003A05 52                      	push	dx
 22416 00003A06 56                      	push	si
 22417 00003A07 57                      	push	di
 22418 00003A08 06                      	push	es
 22419                                  
 22420 00003A09 89D0                    	mov     ax,dx
 22421                                  	;sub	ax,[di+6]
 22422 00003A0B 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22423 00003A0E F7D8                    	neg	ax
 22424                                  
 22425                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22426                                  ;            block. (Note: the upper word of the sector # may be ignored
 22427                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22428                                  ;            is imposed by the input parameters of the disk read operation.)
 22429                                  
 22430                                  	;lea	si,[di+20]
 22431 00003A10 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22432                                  	;mov	cx,[es:bp+2]
 22433 00003A13 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22434 00003A17 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22435 00003A19 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22436 00003A1E 01C7                    	add	di,ax
 22437 00003A20 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22438 00003A25 D1E9                    	shr	cx,1
 22439                                  
 22440                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22441                                  ;       DS:SI-> Buffer sector data.
 22442                                  ;       ES:DI-> Destination within Transfer memory block.
 22443                                  
 22444 00003A27 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22445                                  	;; 04/05/2019
 22446                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22447                                  	;;rep	movsb                   ;Copy last byte.
 22448                                  	;jnc	short bufq03	
 22449                                  	;movsb
 22450                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22451                                  	;adc	cx,0
 22452                                  	;rep	movsb
 22453                                  	; 22/09/2023
 22454 00003A29 7301                    	jnc	short bufq03
 22455 00003A2B A4                      	movsb
 22456                                  bufq03:
 22457                                  	;RestoreReg <es,di,si,dx,cx>
 22458 00003A2C 07                      	pop	es
 22459 00003A2D 5F                      	pop	di
 22460 00003A2E 5E                      	pop	si
 22461 00003A2F 5A                      	pop	dx
 22462 00003A30 59                      	pop	cx
 22463                                  
 22464                                  ;       DS:DI -> current buffer.
 22465                                  bufq3:	
 22466 00003A31 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22467                                          ;invoke SCANPLACE
 22468 00003A33 E8BD1E                  	call	SCANPLACE
 22469 00003A36 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22470 00003A3B 58                      	pop	ax
 22471                                  	;jne	short bufq		; -no, jump.
 22472                                  	;;jmp	short bufx		; -yes, exit.
 22473                                  	;; 12/06/2019
 22474                                  	;retn
 22475                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22476 00003A3C 759C                    	jne	short bufq
 22477 00003A3E EBBC                    	jmp	short bufx
 22478                                  
 22479                                  ;EndProc DskRdBufScan
 22480                                  
 22481                                  ;============================================================================
 22482                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22483                                  ;============================================================================
 22484                                  ; 04/05/2019 - Retro DOS v4.0
 22485                                  ; 24/07/2018 - Retro DOS v3.0
 22486                                  
 22487                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22488                                  ;----------------------------------------------------------------------------
 22489                                  ;
 22490                                  ; Procedure Name : DISKWRITE
 22491                                  ;
 22492                                  ; Inputs:
 22493                                  ;       Outputs of SETUP
 22494                                  ; Function:
 22495                                  ;       Perform disk write
 22496                                  ; Outputs:
 22497                                  ;    Carry clear
 22498                                  ;       CX = No. of bytes written
 22499                                  ;       ES:DI point to SFT
 22500                                  ;       SFT offset and cluster pointers updated
 22501                                  ;    Carry set
 22502                                  ;       CX = 0
 22503                                  ;       ES:DI point to SFT
 22504                                  ;       AX has error code
 22505                                  ;----------------------------------------------------------------------------
 22506                                  
 22507                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22508                                  
 22509                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22510                                  
 22511                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22512                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22513                                  
 22514                                  DISKWRITE:
 22515                                  	; MSDOS 3.3
 22516                                  	; IBMDOS.COM - Offset 436Dh
 22517                                  	;;test	byte [es:di+4],8
 22518                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22519                                  	;jz	short write_cont
 22520                                  	;jmp	SET_ACC_ERR_DS
 22521                                  ;write_cont:
 22522                                  	;push	cx
 22523                                  	;or	cx,cx
 22524                                  	;jnz	short Not_Truncate
 22525                                  	;;mov	cx,-1
 22526                                  	;dec	cx
 22527                                  ;Not_Truncate:
 22528                                  	;call	LOCK_CHECK
 22529                                  	;pop	cx
 22530                                  	;jnb	short _WRITE_OK
 22531                                  	;call	WRITE_LOCK_VIOLATION
 22532                                  	;jnb	short DISKWRITE
 22533                                  	;retn
 22534                                  
 22535                                  	; MSDOS 6.0
 22536 00003A40 E8F0FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22537                                  	; 19/08/2018
 22538 00003A43 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22539 00003A45 C3                      	retn
 22540                                  
 22541                                  WRTEOFJ:
 22542 00003A46 E9DC01                  	JMP     WRTEOF
 22543                                  
 22544                                  _WRITE_OK:
 22545                                   	; 27/07/2018
 22546                                  	; IBMDOS.COM - Offset 438Eh
 22547                                  	
 22548                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22549                                  	;and	word [es:di+5],0BFBFh
 22550 00003A49 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22551                                  				; Mark file as dirty, clear no date on close
 22552                                  
 22553                                  	; 04/05/2019 - Retro DOS v4.0	
 22554                                  
 22555                                  	; MSDOS 6.0
 22556                                  	; mov 	ax,[es:di+11h]
 22557 00003A4F 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22558 00003A53 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22559                                  	;mov	ax,[es:di+13h]
 22560 00003A56 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22561 00003A5A A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22562                                  
 22563                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22564                                  
 22565                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22566 00003A5D C42E[8A05]              	LES     BP,[THISDPB]
 22567                                  
 22568 00003A61 E8FFFD                  	call	BREAKDOWN
 22569                                  
 22570 00003A64 A1[CE05]                	MOV     AX,[BYTPOS]
 22571 00003A67 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22572 00003A6B E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22573 00003A6D 01C8                    	ADD     AX,CX
 22574 00003A6F 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22575                                  
 22576                                  	;mov	bx,[es:bp+2]
 22577 00003A72 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22578                                  
 22579                                  	; MSDOS 3.3
 22580                                  	;cmp	dx,bx
 22581                                  	;jnb	short WRTERR33
 22582                                  	;div	bx
 22583                                  	;mov	bx,ax
 22584                                  	;OR	DX,DX
 22585                                  	;JNZ	short CALCLUS
 22586                                  	;dec	ax
 22587                                  ;CALCLUS:
 22588                                  	; MSDOS 3.3
 22589                                  	;mov	cl,[es:bp+5]
 22590                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22591                                  	;shr	ax,cl
 22592                                  	;push	ax
 22593                                  	;push	dx
 22594                                  	;push	es
 22595                                  	;les	di,[THISSFT]
 22596                                  	;;mov	ax,[es:di+11h]
 22597                                  	;;mov	dx,[es:di+13h]
 22598                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22599                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22600                                  	;pop	es
 22601                                  	;;DX:AX = current file size (in bytes).
 22602                                  	;;div	word [es:bp+2]
 22603                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22604                                  	;mov	cx,ax
 22605                                  	;or	dx,dx
 22606                                  	;jz	short NORND
 22607                                  	;inc	ax
 22608                                  ;NORND:
 22609                                  	; MSDOS 6.0
 22610 00003A76 E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22611 00003A79 89C6                    	MOV	SI,AX
 22612 00003A7B 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22613                                  
 22614                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22615                                  
 22616 00003A7F 09D2                    	OR	DX,DX
 22617 00003A81 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22618 00003A82 89CA                    	MOV	DX,CX			;M039
 22619 00003A84 7506                    	JNZ	short CALCLUS
 22620 00003A86 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22621 00003A89 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22622                                  
 22623                                  CALCLUS:
 22624                                  	; MSDOS 6.0
 22625 00003A8C E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22626 00003A8F 5A                      	POP	DX
 22627                                  
 22628                                  ;       AX = Last cluster to write.
 22629                                  ;       DX = # of bytes in last sector to write (the "tail").
 22630                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22631                                  
 22632 00003A90 50                      	PUSH	AX
 22633 00003A91 52                      	PUSH	DX
 22634                                  ;M039
 22635 00003A92 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22636 00003A96 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22637 00003A99 E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22638 00003A9C 890E[0E06]              	mov	[TEMP_VAR2],cx
 22639 00003AA0 890E[CA05]              	mov	[VALSEC+2],cx
 22640 00003AA4 89C1                    	mov	cx,ax
 22641 00003AA6 89F3                    	mov	bx,si
 22642                                  
 22643                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22644                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22645                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22646                                  ;                     DX = # of bytes in last sector of current file.
 22647                                  ;M039
 22648 00003AA8 09D2                    	OR	DX,DX
 22649 00003AAA 7407                    	JZ	short NORND
 22650                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 22651                                  	;ADC	word [VALSEC+2],0
 22652                                  	; 22/09/2023
 22653 00003AAC 40                      	inc	ax  ; 0FFFFh -> 0
 22654 00003AAD 7504                    	jnz	short NORND
 22655 00003AAF FF06[CA05]              	inc	word [VALSEC+2]
 22656                                  NORND:		
 22657                                  	; MSDOS 3.3 & MSDOS 6.0
 22658 00003AB3 A3[C805]                	MOV     [VALSEC],AX
 22659                                  
 22660                                  ;       [VALSEC] = Last sector of current file.
 22661                                  
 22662 00003AB6 31C0                    	XOR     AX,AX
 22663 00003AB8 A3[DE05]                	MOV     [GROWCNT],AX
 22664 00003ABB A3[E005]                	MOV     [GROWCNT+2],AX
 22665 00003ABE 58                      	POP     AX
 22666                                  
 22667                                  	; MSDOS 6.0
 22668 00003ABF 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22669 00003AC3 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22670 00003AC7 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22671 00003AC9 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22672 00003ACB 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22673 00003ACD 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22674 00003AD1 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22675                                  lowsec:
 22676                                  	;MOV	DI,0			;F.C. >32mb
 22677                                  	; 22/09/2023
 22678 00003AD3 31FF                    	xor	di,di
 22679                                  	; MSDOS 3.3 & MSDOS 6.0
 22680 00003AD5 29CB                    	SUB	BX,CX			; Number of full sectors
 22681 00003AD7 7253                    	JB	short NOGROW
 22682 00003AD9 7444                    	JZ	short TESTTAIL
 22683                                  yesgrow:
 22684                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22685 00003ADB 89D1                    	MOV     CX,DX
 22686 00003ADD 93                      	XCHG    AX,BX
 22687                                  	;mul	word [es:bp+2]
 22688 00003ADE 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22689                                  	
 22690                                  	; MSDOS 6.0
 22691 00003AE2 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22692 00003AE6 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22693 00003AE9 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22694                                  	;mul	word [es:bp+2]
 22695 00003AEB 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22696                                  	
 22697 00003AEF 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22698 00003AF3 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22699 00003AF5 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22700                                  
 22701                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22702 00003AF8 29C8                    	SUB     AX,CX			; Take off current "tail"
 22703 00003AFA 83DA00                  	SBB     DX,0			; 32-bit extension
 22704 00003AFD 01D8                    	ADD     AX,BX			; Add on new "tail"
 22705 00003AFF 83D200                  	ADC     DX,0			; ripple tim's head off
 22706 00003B02 EB21                    	JMP     SHORT SETGRW
 22707                                  
 22708                                  HAVSTART:
 22709                                  	;int 3
 22710 00003B04 89C1                    	MOV     CX,AX
 22711 00003B06 E86E11                  	call	SKPCLP
 22712                                  	;JCXZ	DOWRTJ
 22713                                  	; 16/12/2022
 22714 00003B09 E357                    	jcxz	DOWRT
 22715                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22716                                  	;jcxz	DOWRTJ
 22717                                  
 22718 00003B0B E81013                  	call	ALLOCATE
 22719                                  	;JNC	short DOWRTJ
 22720                                  	; 16/12/2022
 22721 00003B0E 7352                    	jnc	short DOWRT
 22722                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22723                                  	;jnc	short DOWRTJ
 22724                                  
 22725                                  	;entry   WRTERR
 22726                                  WRTERR:
 22727 00003B10 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22728                                  
 22729                                  	;entry WRTERR22
 22730                                  WRTERR22:
 22731 00003B12 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22732                                  
 22733                                  	; 27/07/2018
 22734                                  WRTERR33:
 22735                                  	;MOV	CX,0			;No bytes transferred
 22736 00003B15 31C9                    	XOR     CX,CX
 22737                                  					
 22738 00003B17 C43E[9E05]              	LES     DI,[THISSFT]
 22739                                  	;CLC ; 19/05/2019
 22740                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22741                                  	; 16/12/2022
 22742                                  	;clc
 22743 00003B1B C3                      	retn
 22744                                  
 22745                                  	; 16/12/2022
 22746                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22747                                  ;DOWRTJ:
 22748                                  	;JMP	short DOWRT
 22749                                  
 22750                                  ACC_ERRWJ:
 22751                                  	; 10/08/2018
 22752                                  	;JMP	SET_ACC_ERRW
 22753                                  	; 16/12/2022
 22754 00003B1C E9D7FD                  	jmp	SET_ACC_ERR_DS
 22755                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22756                                  	;jmp	SET_ACC_ERRW	
 22757                                  
 22758                                  TESTTAIL:
 22759 00003B1F 29D0                    	SUB     AX,DX
 22760 00003B21 7609                    	JBE	short NOGROW
 22761 00003B23 31D2                    	XOR     DX,DX
 22762                                  SETGRW:
 22763 00003B25 A3[DE05]                	MOV	[GROWCNT],AX
 22764 00003B28 8916[E005]              	MOV	[GROWCNT+2],DX
 22765                                  NOGROW:
 22766 00003B2C 58                      	POP     AX
 22767 00003B2D 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22768 00003B31 E82311                  	call	FNDCLUS
 22769 00003B34 72E6                    	JC	short ACC_ERRWJ
 22770 00003B36 891E[BC05]              	MOV     [CLUSNUM],BX
 22771 00003B3A 8916[BA05]              	MOV     [LASTPOS],DX
 22772                                  
 22773 00003B3E 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22774 00003B40 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22775 00003B42 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22776 00003B44 51                      	PUSH    CX              ; No. of clusters short of first
 22777 00003B45 89C1                    	MOV     CX,AX
 22778 00003B47 E8D412                  	call	ALLOCATE
 22779 00003B4A 59                      	POP     CX
 22780 00003B4B 72C3                    	JC	short WRTERR
 22781 00003B4D 8B16[BA05]              	MOV     DX,[LASTPOS]
 22782 00003B51 42                      	INC     DX
 22783 00003B52 49                      	DEC     CX
 22784 00003B53 7405                    	JZ	short NOSKIP
 22785 00003B55 E81F11                  	call	SKPCLP
 22786 00003B58 72C2                    	JC	short ACC_ERRWJ
 22787                                  NOSKIP:
 22788 00003B5A 891E[BC05]              	MOV     [CLUSNUM],BX
 22789 00003B5E 8916[BA05]              	MOV     [LASTPOS],DX
 22790                                  DOWRT:
 22791 00003B62 833E[D205]00            	CMP     word [BYTCNT1],0
 22792 00003B67 7409                    	JZ	short WRTMID
 22793 00003B69 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22794 00003B6D E89611                  	call	BUFWRT
 22795 00003B70 72AA                    	JC	short ACC_ERRWJ
 22796                                  WRTMID:
 22797 00003B72 A1[D605]                	MOV     AX,[SECCNT]
 22798 00003B75 09C0                    	OR      AX,AX
 22799                                  	; 20/11/2022
 22800 00003B77 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22801 00003B79 0106[C405]              	ADD     [SECPOS],AX
 22802                                  	; 19/05/2019
 22803                                  	; MSDOS 6.0
 22804 00003B7D 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22805 00003B82 E8DD11                  	call	NEXTSEC
 22806                                  	; 16/12/2022
 22807 00003B85 7295                    	JC	short ACC_ERRWJ
 22808                                  	;JC	short SET_ACC_ERRW	;M039
 22809 00003B87 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22810 00003B8C 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22811 00003B90 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22812 00003B94 8B0E[D605]              	MOV     CX,[SECCNT]
 22813                                  WRTLP:
 22814 00003B98 E8F811                  	call	OPTIMIZE
 22815 00003B9B 7248                    	JC	short SET_ACC_ERRW
 22816                                  	; 16/12/2022
 22817                                  	;JC	short ACC_ERRWJ
 22818                                  
 22819                                  ;M039
 22820                                  ;       DI = Next physical cluster.
 22821                                  ;       AX = # sectors remaining.
 22822                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22823                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22824                                  ;	     sectors, also termed an "Extent".)
 22825                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22826                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22827                                  ;
 22828                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22829                                  ;	are in Extent; they are being over-written.
 22830                                  
 22831 00003B9D 57                      	push    di
 22832 00003B9E 50                      	push    ax
 22833                                  
 22834                                  	; MSDOS 3.3
 22835                                  	; IBMDOS.COM (1987) - Offset 4497h
 22836                                  	;push	dx
 22837                                  	;push	bx
 22838                                  	;mov	al,[es:bp]
 22839                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22840                                  	;mov	bx,cx
 22841                                  	;add	bx,dx	; (bx = Extent end)
 22842                                  
 22843                                  ;	DX = Extent start.
 22844                                  ;	BX = Extent end.
 22845                                  ;	AL = Drive #.
 22846                                  
 22847                                  	;call	SETVISIT
 22848                                  
 22849                                  ;wbufq1:
 22850                                  	;;or	byte [di+5],20h
 22851                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22852                                  	;;cmp	al,[di+4]	
 22853                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22854                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22855                                  	;;cmp	[di+6],dx
 22856                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22857                                  	;jb	short wbufq2
 22858                                  	;;cmp	[di+6],bx
 22859                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22860                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22861                                  
 22862                                  	;; Buffer sector is in the Extent
 22863                                  
 22864                                  	;;mov	word [di+4],20FFh
 22865                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22866                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22867                                  	;				; .buf_flags, AH = 0, reset/clear
 22868                                  	;call	SCANPLACE
 22869                                  ;wbufq2:
 22870                                  	;call	SKIPVISIT
 22871                                  	;jnz	short wbufq1
 22872                                  	;pop	bx
 22873                                  	;pop	dx
 22874                                  
 22875                                          ; MSDOS 6.0
 22876 00003B9F E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22877                                  
 22878                                  ;ASSUME DS:NOTHING
 22879                                  ;M039
 22880                                  	; MSDOS 3.3 & MSDOS 6.0
 22881                                  ;hkn; SS override for DMAADD and ALLOWED
 22882 00003BA2 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22883                                  	;mov	byte [ss:ALLOWED],38h
 22884 00003BA7 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22885                                  
 22886                                  ;	put logic from DWRITE in-line here so we can modify it
 22887                                  ;	for DISK FULL conditions.
 22888                                  
 22889                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22890                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22891                                  
 22892                                  	; 16/12/2022
 22893                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22894                                  	;call	DWRITE
 22895                                  
 22896                                  ;DWRITE_OKAY:
 22897                                  
 22898                                  	; 16/12/2022
 22899                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22900                                  	;pop     cx
 22901                                  	;pop     bx
 22902                                  	;push    ss
 22903                                  	;pop     ds
 22904                                  	;jc      short SET_ACC_ERRW
 22905                                  	;jcxz    WRTLAST
 22906                                  	;mov     dl, 0
 22907                                  	;inc     word [LASTPOS]
 22908                                  	;jmp     short WRTLP
 22909                                  
 22910                                  	; 16/12/2022
 22911                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22912                                  DWRITE_LUP:
 22913                                  	; 23/07/2019 - Retro DOS v3.2
 22914                                  
 22915                                  	; MSDOS 6.0
 22916 00003BAD E8E1FB                  	call	DSKWRITE
 22917 00003BB0 7417                    	jz	short DWRITE_OKAY
 22918                                  
 22919                                  ;;	int	3
 22920                                  
 22921 00003BB2 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22922 00003BB4 7423                    	jz	short DWRITE_DISK_FULL
 22923                                  
 22924                                  	; 16/12/2022
 22925                                  
 22926                                  ;;hkn; SS override
 22927 00003BB6 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22928 00003BBC E801FC                  	call	HARDERRRW
 22929 00003BBF 3C01                    	CMP	AL,1		; Check for retry
 22930 00003BC1 74EA                    	JZ	short DWRITE_LUP
 22931                                  
 22932                                  	; 16/12/2022
 22933                                  	; 23/07/2019
 22934                                  	;POP	CX ; *4*
 22935                                  	;POP	BX ; *5*
 22936                                  	;
 22937                                  	;push	ss
 22938                                  	;pop	ds
 22939                                  	;
 22940                                  
 22941                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22942                                  
 22943                                  	; 16/12/2022
 22944 00003BC3 3C03                    	CMP	AL,3		; Check for FAIL
 22945 00003BC5 F8                      	CLC
 22946 00003BC6 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22947 00003BC8 F9                      	STC
 22948                                  
 22949                                  DWRITE_OKAY:
 22950                                  	; 16/12/2022
 22951                                  	; 23/07/2019
 22952                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22953 00003BC9 59                      	POP	CX ; *4*
 22954 00003BCA 5B                      	POP	BX ; *5*
 22955                                  
 22956                                  ;       CX = # sectors remaining.
 22957                                  ;       BX = Next physical cluster.
 22958                                  
 22959                                  ;hkn; SS override
 22960                                          ;Context DS
 22961                                  	; 16/12/2022
 22962                                  	;push	ss
 22963                                  	;pop	ds
 22964                                  
 22965                                  	; 16/12/2022
 22966 00003BCB 7218                    	jc	short SET_ACC_ERRW
 22967                                  
 22968                                  	; 16/12/2022
 22969 00003BCD 16                      	push	ss
 22970 00003BCE 1F                      	pop	ds
 22971                                  
 22972 00003BCF E317                    	JCXZ    WRTLAST
 22973                                  
 22974                                  	;MOV	DL,0
 22975 00003BD1 30D2                    	xor	dl,dl ; 23/07/2019
 22976 00003BD3 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22977 00003BD7 EBBF                    	JMP     short WRTLP
 22978                                  
 22979                                  	; 23/07/2019 - Retro DOS v3.2
 22980                                  	; 09/08/2018
 22981                                  	; MSDOS 6.0
 22982                                  DWRITE_DISK_FULL:
 22983                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22984                                  	; 16/12/2022
 22985 00003BD9 16                      	push	ss
 22986 00003BDA 1F                      	pop	ds
 22987 00003BDB 59                      	pop	cx		; unjunk stack
 22988 00003BDC 5B                      	pop	bx
 22989 00003BDD C606[0B06]01            	mov	byte [DISK_FULL],1
 22990                                  	;stc
 22991 00003BE2 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22992                                  
 22993                                  	; 16/12/2022
 22994                                  SET_ACC_ERRW:
 22995 00003BE5 E90EFD                  	jmp	SET_ACC_ERR_DS
 22996                                  
 22997                                  WRTLAST:
 22998 00003BE8 A1[D405]                	MOV     AX,[BYTCNT2]
 22999 00003BEB 09C0                    	OR      AX,AX
 23000 00003BED 7413                    	JZ	short FINWRT
 23001 00003BEF A3[D205]                	MOV     [BYTCNT1],AX
 23002 00003BF2 E86D11                  	call	NEXTSEC
 23003 00003BF5 72EE                    	JC	short SET_ACC_ERRW
 23004 00003BF7 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23005 00003BFD E80611                  	call	BUFWRT
 23006 00003C00 72E3                    	JC	short SET_ACC_ERRW
 23007                                  FINWRT:
 23008 00003C02 C43E[9E05]              	LES     DI,[THISSFT]
 23009 00003C06 A1[DE05]                	MOV     AX,[GROWCNT]
 23010 00003C09 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23011 00003C0D 09C0                    	OR      AX,AX
 23012 00003C0F 7502                    	JNZ	short UPDATE_size
 23013 00003C11 E30F                    	JCXZ    SAMSIZ
 23014                                  UPDATE_size:
 23015                                  	;add	[es:di+11h],ax
 23016 00003C13 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23017                                  	;adc	[es:di+13h],cx
 23018 00003C17 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23019                                  
 23020                                  ; Make sure that all other SFT's see this growth also.
 23021                                  
 23022 00003C1B B80100                  	MOV     AX,1
 23023                                  ;if installed
 23024                                  	;Call	JShare + 14 * 4
 23025 00003C1E FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23026                                  ;else
 23027                                  ;	Call    ShSU
 23028                                  ;endif
 23029                                  
 23030                                  SAMSIZ:
 23031 00003C22 E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23032                                  
 23033                                  	; 16/12/2022
 23034                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23035                                  ;SET_ACC_ERRW:
 23036                                  	;jmp	SET_ACC_ERR_DS
 23037                                  
 23038                                  WRTEOF:
 23039 00003C25 89C1                    	MOV     CX,AX
 23040 00003C27 09D1                    	OR      CX,DX
 23041 00003C29 746C                    	JZ	short KILLFIL
 23042 00003C2B 83E801                  	SUB     AX,1
 23043 00003C2E 83DA00                  	SBB     DX,0
 23044                                  
 23045                                  	; MSDOS 3.3
 23046                                  	;;div	word [es:bp+2]
 23047                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23048                                  	;;mov	cl,[es:bp+5]
 23049                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23050                                  	;shr	ax,cl
 23051                                  
 23052                                  	; MSDOS 6.0
 23053 00003C31 53                      	PUSH	BX
 23054                                  	;mov	bx,[es:bp+2]
 23055 00003C32 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23056 00003C36 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23057 00003C39 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23058 00003C3A 89CA                    	MOV	DX,CX			      ;M039
 23059 00003C3C 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23060 00003C40 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23061                                  
 23062 00003C43 89C1                    	MOV     CX,AX
 23063 00003C45 E80F10                  	call	FNDCLUS
 23064                                  SET_ACC_ERRWJ2:
 23065 00003C48 729B                    	JC	short SET_ACC_ERRW
 23066                                  
 23067 00003C4A E326                    	JCXZ    RELFILE
 23068 00003C4C E8CF11                  	call	ALLOCATE
 23069                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23070                                  	; 16/12/2022
 23071 00003C4F 7303                    	jnc	short UPDATE
 23072 00003C51 E9BCFE                  	JMP	WRTERR
 23073                                  UPDATE:
 23074 00003C54 C43E[9E05]              	LES	DI,[THISSFT]
 23075 00003C58 A1[CE05]                	MOV	AX,[BYTPOS]
 23076                                  	;mov	[es:di+11h],ax
 23077 00003C5B 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23078 00003C5F A1[D005]                	MOV	AX,[BYTPOS+2]
 23079                                  	;mov	[es:di+13h],ax
 23080 00003C62 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23081                                  ;
 23082                                  ; Make sure that all other SFT's see this growth also.
 23083                                  ;
 23084 00003C66 B80200                  	MOV     AX,2
 23085                                  ;if installed
 23086                                  	;Call	JShare + 14 * 4
 23087 00003C69 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23088                                  ;else
 23089                                  ;	Call    ShSU
 23090                                  ;endif
 23091 00003C6D 31C9                    	XOR     CX,CX
 23092 00003C6F E939FD                  	jmp	ADDREC
 23093                                  
 23094                                  	; 16/12/2022
 23095                                  ;WRTERRJ: 
 23096                                  	;JMP	WRTERR
 23097                                  
 23098                                  ;;;;;;;;;;;;;;;; 7/18/86
 23099                                  ;;;;;;;;;;;;;;;;
 23100                                  
 23101                                  RELFILE:
 23102                                  	; MSDOS 6.0
 23103 00003C72 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23104 00003C73 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23105                                  	;cmp	dx,[es:di+19h]
 23106 00003C77 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23107 00003C7B 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23108                                  	;mov	[es:di+19h],0
 23109 00003C7D 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23110                                  	;mov	dx,[es:di+0Bh]
 23111 00003C83 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23112                                  	;mov	[es:di+35h],dx
 23113 00003C87 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23114                                  SKIPRESET:                            		;AN002; BL
 23115 00003C8B 07                      	POP     ES                    		;AN002; BL
 23116                                  ;
 23117 00003C8C BAFFFF                  	MOV     DX,0FFFFH
 23118 00003C8F E83A12                  	call	RELBLKS
 23119                                  	; 16/12/2022
 23120                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23121 00003C92 73C0                    	jnc	short UPDATE
 23122                                  SET_ACC_ERRWJ:
 23123                                  	;JC	short SET_ACC_ERRWJ2
 23124                                  	;JMP	SHORT UPDATE
 23125                                  	; 16/12/2022
 23126 00003C94 E95FFC                  	jmp	SET_ACC_ERR_DS
 23127                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23128                                  	;JC	short SET_ACC_ERRWJ2
 23129                                  	;JMP	SHORT UPDATE
 23130                                  
 23131                                  KILLFIL:
 23132 00003C97 31DB                    	XOR     BX,BX
 23133 00003C99 06                      	PUSH    ES
 23134 00003C9A C43E[9E05]              	LES     DI,[THISSFT]
 23135                                  	;mov	[es:di+19h],bx
 23136 00003C9E 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23137                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23138 00003CA2 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23139                                  	;xchg	bx,[es:di+0Bh]
 23140 00003CA6 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23141 00003CAA 07                      	POP	ES
 23142                                  
 23143 00003CAB 09DB                    	OR	BX,BX
 23144                                  	;JZ	short UPDATEJ
 23145                                  	; 16/12/2022
 23146 00003CAD 74A5                    	jz	short UPDATE
 23147                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23148                                  	;jz	short UPDATEJ
 23149                                  
 23150                                  ;; 10/23/86 FastOpen update
 23151 00003CAF 06                      	PUSH	ES              ; since first cluster # is 0
 23152 00003CB0 55                      	PUSH	BP              ; we must delete the old cache entry
 23153 00003CB1 50                      	PUSH	AX
 23154 00003CB2 51                      	PUSH	CX
 23155 00003CB3 52                      	PUSH	DX
 23156 00003CB4 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23157                                  	; 15/12/2022
 23158 00003CB8 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23159                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23160                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23161 00003CBC 89D9                    	MOV	CX,BX                    ; first cluster #
 23162 00003CBE B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23163 00003CC0 E840EA                  	call	FastOpen_Update          ; call fastopen
 23164 00003CC3 5A                      	POP	DX
 23165 00003CC4 59                      	POP	CX
 23166 00003CC5 58                      	POP	AX
 23167 00003CC6 5D                      	POP	BP
 23168 00003CC7 07                      	POP	ES
 23169                                  ;; 10/23/86 FastOpen update
 23170                                  
 23171 00003CC8 E8FF11                  	call	RELEASE
 23172 00003CCB 72C7                    	JC	short SET_ACC_ERRWJ
 23173                                  UPDATEJ:
 23174                                  	; 20/11/2022
 23175 00003CCD EB85                    	JMP	short UPDATE ; 10/08/2018
 23176                                  
 23177                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23178                                  ;----------------------------------------------------------------------------
 23179                                  ;
 23180                                  ; Procedure Name : DskWrtBufPurge
 23181                                  ;
 23182                                  ; Inputs:
 23183                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23184                                  ;	     sectors, also termed an "Extent".)
 23185                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23186                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23187                                  ;
 23188                                  ; Function:
 23189                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23190                                  ;	are in Extent; they are being over-written.
 23191                                  ;
 23192                                  ; Outputs:
 23193                                  ;       (Same as Input.)
 23194                                  ; Uses:
 23195                                  ;       All registers except DS,AX,SI,DI preserved.
 23196                                  ;       SS override for all global variables.
 23197                                  ;----------------------------------------------------------------------------
 23198                                  ;M039: Created
 23199                                  
 23200                                  ;procedure   DskWrtBufPurge,NEAR
 23201                                  ;
 23202                                  ;ASSUME  DS:NOTHING
 23203                                  
 23204                                  ; 04/05/2019 - Retro DOS v4.0
 23205                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23206                                  
 23207                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23208                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23209                                  
 23210                                  DskWrtBufPurge:
 23211                                  	;SaveReg <bx,cx>
 23212 00003CCF 53                      	push	bx
 23213 00003CD0 51                      	push	cx
 23214                                  
 23215 00003CD1 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23216 00003CD6 89DE                    	mov	si,bx
 23217 00003CD8 01D1                    	add	cx,dx
 23218 00003CDA 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23219                                  
 23220                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23221                                  	;;mov	al,[es:bp+0]
 23222                                  	;mov	al,[es:bp+DPB.DRIVE]
 23223                                  	; 15/12/2022
 23224 00003CDD 268A4600                	mov	al,[es:bp]
 23225                                  
 23226                                  ;	BX:DX = Extent start.
 23227                                  ;	SI:CX = Extent end + 1.
 23228                                  ;	AL = Drive #
 23229                                  
 23230 00003CE1 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23231 00003CE7 7431                    	je	short nosc		; -no, jump.
 23232                                  
 23233                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23234                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23235                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23236                                  
 23237 00003CE9 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23238 00003CEE 752A                    	jne	short nosc		; -no, jump.
 23239                                  
 23240 00003CF0 50                      	push    ax
 23241 00003CF1 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23242 00003CF5 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23243                                  
 23244                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23245                                  	;jbe	short sc5		; -yes, jump.
 23246                                  
 23247 00003CFA 39FE                    	cmp	si,di
 23248 00003CFC 7502                    	jne	short sc01
 23249 00003CFE 39C1                    	cmp	cx,ax
 23250                                  sc01: 
 23251 00003D00 7617                    	jbe	short sc5	
 23252                                  
 23253 00003D02 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23254 00003D07 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23255                                  	
 23256                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23257                                  	;jae	short sc5		; -yes, jump.
 23258                                  
 23259 00003D0A 39FB                    	cmp	bx,di
 23260 00003D0C 7502                    	jne	short sc02
 23261 00003D0E 39C2                    	cmp	dx,ax
 23262                                  sc02:
 23263 00003D10 7307                    	jnb	short sc5
 23264                                  
 23265 00003D12 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23266                                  sc5:	
 23267 00003D19 58                      	pop     ax
 23268                                  
 23269                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23270                                  ;	written.
 23271                                  
 23272                                  nosc:	
 23273 00003D1A E8C41B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23274                                  
 23275                                  _bufq:	
 23276                                  	;cmpo	al,[di+4]
 23277 00003D1D 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23278 00003D20 7527                    	jne	short bufq5		; -no, jump.
 23279                                  
 23280                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23281                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23282                                  
 23283                                  	;cmp	bx,[di+8]
 23284 00003D22 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23285 00003D25 7503                    	jne	short bufq04
 23286                                  	;cmp	dx,[di+6]
 23287 00003D27 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23288                                  bufq04:
 23289 00003D2A 771D                    	ja	short bufq5
 23290                                  
 23291                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23292                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23293                                  
 23294                                  	;cmp	si,[di+8]
 23295 00003D2C 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23296 00003D2F 7503                    	jne	short bufq05
 23297                                  	;cmp	cx,[di+6]
 23298 00003D31 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23299                                  bufq05:
 23300 00003D34 7613                    	jbe	short bufq5
 23301                                  
 23302                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23303                                  
 23304                                  	;test	byte [di+5],40h
 23305 00003D36 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23306 00003D3A 7403                    	jz	short bufq4		; -no, jump.
 23307 00003D3C E8231E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23308                                  bufq4:
 23309                                  	;mov	word [di+4],20FFh
 23310 00003D3F C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23311                                  
 23312 00003D44 E8AC1B                  	call	SCANPLACE
 23313 00003D47 EB02                    	jmp     short bufq6
 23314                                  bufq5: 
 23315 00003D49 8B3D                    	mov     di,[di]
 23316                                  	;mov	di,[di+BUFFINFO.buf_next]
 23317                                  bufq6: 
 23318 00003D4B 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23319 00003D50 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23320                                  	
 23321                                  	;RestoreReg <cx,bx>
 23322 00003D52 59                      	pop	cx
 23323 00003D53 5B                      	pop	bx
 23324 00003D54 C3                      	retn
 23325                                  
 23326                                  ;EndProc DskWrtBufPurge
 23327                                  
 23328                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23329                                  ;----------------------------------------------------------------------------
 23330                                  ;
 23331                                  ; Procedure Name : DIV32
 23332                                  ;
 23333                                  ; Inputs:
 23334                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23335                                  ; Function:
 23336                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23337                                  ; Outputs:
 23338                                  ;       CX:AX = quotient , DX= remainder
 23339                                  ; Uses:
 23340                                  ;       All registers except AX,CX,DX preserved.
 23341                                  ;----------------------------------------------------------------------------
 23342                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23343                                  
 23344                                  ; 04/05/2019 - Retro DOS v4.0
 23345                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23346                                  
 23347                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23348                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23349                                  
 23350                                  DIV32:
 23351 00003D55 81FB0002                	cmp	bx,512
 23352 00003D59 7515                    	jne	short div5
 23353                                  
 23354 00003D5B 89D1                    	mov	cx,dx
 23355 00003D5D 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23356 00003D5F 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23357 00003D63 88E0                    	mov	al,ah
 23358 00003D65 88CC                    	mov	ah,cl
 23359 00003D67 88E9                    	mov	cl,ch
 23360 00003D69 30ED                    	xor	ch,ch
 23361 00003D6B D1E9                    	shr	cx,1
 23362 00003D6D D1D8                    	rcr	ax,1
 23363 00003D6F C3                      	retn
 23364                                  div5:	
 23365 00003D70 89C1                    	mov	cx,ax
 23366 00003D72 89D0                    	mov	ax,dx
 23367 00003D74 31D2                    	xor	dx,dx
 23368 00003D76 F7F3                    	div	bx              ; 0:AX/BX
 23369 00003D78 91                      	xchg	cx,ax
 23370 00003D79 F7F3                    	div	bx              ; DX:AX/BX
 23371 00003D7B C3                      	retn
 23372                                  
 23373                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23374                                  ;----------------------------------------------------------------------------
 23375                                  ;
 23376                                  ; Procedure Name : SHR32
 23377                                  ;
 23378                                  ; Inputs:
 23379                                  ;	DX:AX = 32 bit sector number
 23380                                  ; Function:
 23381                                  ;       Perform 32 bit shift right
 23382                                  ; Outputs:
 23383                                  ;	AX = cluster number
 23384                                  ;	ZF = 1 if no error
 23385                                  ;	   = 0 if error (cluster number > 64k)
 23386                                  ; Uses:
 23387                                  ;       DX,CX
 23388                                  ;---------------------------------------------------------------------------
 23389                                  ; M017	- SHR32 rewritten for better performance
 23390                                  ; M039	- Additional optimization
 23391                                  
 23392                                  ; 04/05/2019 - Retro DOS v4.0
 23393                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23394                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23395                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23396                                  
 23397                                  SHR32:
 23398                                  	;mov	cl,[es:bp+5]
 23399 00003D7C 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23400 00003D80 30ED                    	xor	ch,ch	    ;ZF=1
 23401 00003D82 E306                    	jcxz	norota
 23402                                  
 23403                                  rotashft2:
 23404 00003D84 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23405 00003D86 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23406 00003D88 E2FA                    	loop	rotashft2
 23407                                  norota:
 23408 00003D8A C3                      	retn
 23409                                  
 23410                                  ;============================================================================
 23411                                  ; DIR.ASM, MSDOS 6.0, 1991
 23412                                  ;============================================================================
 23413                                  ; 27/07/2018 - Retro DOS v3.0
 23414                                  ; 19/05/2019 - Retro DOS v4.0 
 23415                                  
 23416                                  ;	TITLE	DIR - Directory and path cracking
 23417                                  ;	NAME	Dir
 23418                                  
 23419                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23420                                  ;---------------------------------------------------------------------------
 23421                                  ;
 23422                                  ; Procedure Name : FINDENTRY,SEARCH
 23423                                  ;
 23424                                  ; Inputs:
 23425                                  ;	[THISDPB] set
 23426                                  ;	[SECCLUSPOS] = 0
 23427                                  ;	[DIRSEC] = Starting directory sector number
 23428                                  ;	[CLUSNUM] = Next cluster of directory
 23429                                  ;	[CLUSFAC] = Sectors/Cluster
 23430                                  ;	[NAME1] = Name to look for
 23431                                  ; Function:
 23432                                  ;	Find file name in disk directory.
 23433                                  ;	"?" matches any character.
 23434                                  ; Outputs:
 23435                                  ;	Carry set if name not found
 23436                                  ;	ELSE
 23437                                  ;	Zero set if attributes match (always except when creating)
 23438                                  ;	AH = Device ID (bit 7 set if not disk)
 23439                                  ;	[THISDPB] = Base of drive parameters
 23440                                  ;	DS = DOSGROUP
 23441                                  ;	ES = DOSGROUP
 23442                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23443                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23444                                  ;	[CURBUF] has directory record with match
 23445                                  ;	[NAME1] has file name
 23446                                  ;	[LASTENT] is entry number of the entry
 23447                                  ; All other registers destroyed.
 23448                                  ;----------------------------------------------------------------------------
 23449                                  
 23450                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23451                                  ;hkn; this point.
 23452                                  
 23453                                  SEARCH:
 23454                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23455                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23456                                  
 23457                                  	; 19/05/2019 - Retro DOS v4.0
 23458                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23459                                  
 23460                                  	; 27/07/2018 - Retro DOS v3.0
 23461                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23462                                  	; 15/03/2018 - Retro DOS v2.0
 23463                                  
 23464                                  	;entry	FindEntry
 23465                                  FINDENTRY:
 23466 00003D8B E82F04                  	call	STARTSRCH
 23467 00003D8E A0[6B05]                	MOV	AL,[ATTRIB]
 23468                                  	;and	al,9Eh
 23469 00003D91 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23470                                  	;cmp	al,8
 23471 00003D93 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23472 00003D95 7503                    	JNZ	short NOTVOLSRCH	; No
 23473 00003D97 E86D01                  	CALL	SETROOTSRCH		; Yes force search of root
 23474                                  NOTVOLSRCH:
 23475 00003D9A E8FD00                  	CALL	GETENTRY
 23476 00003D9D 7303                    	JNC	short SRCH
 23477 00003D9F E99100                  	JMP	SETESRET
 23478                                  
 23479                                  	;entry	Srch
 23480                                  SRCH:
 23481 00003DA2 1E                      	PUSH	DS
 23482 00003DA3 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23483                                  
 23484                                  ;	(DS:BX) = directory entry address
 23485                                  
 23486 00003DA7 8A27                    	mov	ah,[BX]
 23487                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23488 00003DA9 08E4                    	OR	AH,AH			; End of directory?
 23489 00003DAB 7436                    	JZ	short FREE
 23490                                  
 23491                                  ;hkn; SS override
 23492 00003DAD 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23493 00003DB2 742F                    	JZ	short FREE
 23494                                  	;test	byte [bx+0Bh],8
 23495 00003DB4 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23496                                  					; Volume ID file?
 23497 00003DB8 7405                    	JZ	short CHKFNAM 		; NO
 23498                                  
 23499                                  ;hkn; SS override
 23500 00003DBA 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23501                                  CHKFNAM:
 23502                                  ;	Context ES
 23503 00003DBF 8CD6                    	MOV	SI,SS
 23504 00003DC1 8EC6                    	MOV	ES,SI
 23505 00003DC3 89DE                    	MOV	SI,BX
 23506                                  
 23507                                  ;hkn; NAME1 is in DOSDATA
 23508 00003DC5 BF[4B05]                	MOV	DI,NAME1
 23509                                  ;;;;; 7/29/86
 23510                                  
 23511                                  ;hkn; SS override for NAME1
 23512                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 23513                                  	;JNZ	short NO_E5
 23514                                  	;MOV	BYTE [SS:NAME1],05H
 23515                                  	; 22/09/2023
 23516 00003DC8 26803DE5                	cmp	byte [es:di],0E5h
 23517 00003DCC 7504                    	jnz	short NO_E5
 23518 00003DCE 26C60505                	mov	byte [es:di],05h
 23519                                  NO_E5:
 23520                                  ;;;;; 7/29/86
 23521 00003DD2 E86100                  	CALL	MetaCompare
 23522 00003DD5 7428                    	JZ	short FOUND
 23523 00003DD7 1F                      	POP	DS
 23524                                  
 23525                                  	;entry	NEXTENT
 23526                                  NEXTENT:
 23527 00003DD8 C42E[8A05]              	LES	BP,[THISDPB]
 23528 00003DDC E86600                  	CALL	NEXTENTRY
 23529 00003DDF 73C1                    	JNC	short SRCH
 23530 00003DE1 EB50                    	JMP	SHORT SETESRET
 23531                                  
 23532                                  FREE:
 23533 00003DE3 1F                      	POP	DS
 23534 00003DE4 8B0E[4803]              	MOV	CX,[LASTENT]
 23535 00003DE8 3B0E[D805]              	CMP	CX,[ENTFREE]
 23536 00003DEC 7304                    	JAE	short TSTALL
 23537 00003DEE 890E[D805]              	MOV	[ENTFREE],CX
 23538                                  TSTALL:
 23539 00003DF2 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23540                                  NEXTENTJ:
 23541 00003DF6 74E0                    	je	short NEXTENT 		; No - continue search
 23542 00003DF8 890E[DA05]              	MOV	[ENTLAST],CX
 23543 00003DFC F9                      	STC
 23544 00003DFD EB34                    	JMP	SHORT SETESRET
 23545                                  
 23546                                  FOUND:
 23547                                  ; We have a file with a matching name. We must now consider the attributes:
 23548                                  ; ATTRIB	Action
 23549                                  ; ------	------
 23550                                  ; Volume_ID	Is Volume_ID in test?
 23551                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23552                                  ;		If create then Is ATTRIB equal to test?
 23553                                  
 23554 00003DFF 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23555 00003E01 1F                      	POP	DS
 23556 00003E02 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23557                                  	;and	ah,9Eh
 23558 00003E06 80E4DE                  	AND	AH,~attr_ignore
 23559                                  	;lea	si,[si+15]
 23560 00003E09 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23561                                  					; point to first cluster field
 23562                                  	;test	ch,8
 23563 00003E0C F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23564 00003E0F 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23565                                  	;test	ah,8
 23566 00003E11 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23567                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23568                                  	; 16/12/2022
 23569 00003E14 74C2                    	jz	short NEXTENT ; 19/05/2019
 23570                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23571                                  	;JZ	short NEXTENTJ
 23572 00003E16 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23573 00003E18 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23574                                  check_one_volume_id:
 23575                                  	;CMP	ah,8
 23576 00003E1A 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23577                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23578                                  	; 16/12/2022
 23579 00003E1D 74B9                    	je	short NEXTENT ; 19/05/2019
 23580                                  	;JZ	short NEXTENTJ
 23581 00003E1F E8AF03                  	CALL	MatchAttributes
 23582 00003E22 7407                    	JZ	SHORT RETFF
 23583 00003E24 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23584                                  	; 16/12/2022
 23585                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23586 00003E29 74AD                    	jz	short NEXTENT ; 19/05/2019
 23587                                  RETFF:
 23588 00003E2B C42E[8A05]              	LES	BP,[THISDPB]
 23589                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23590                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23591                                  	; 15/12/2022
 23592 00003E2F 268A6600                	MOV	AH,[ES:BP]
 23593                                  SETESRET:
 23594 00003E33 16                      	PUSH	SS
 23595 00003E34 07                      	POP	ES
 23596 00003E35 C3                      	retn
 23597                                  
 23598                                  ;----------------------------------------------------------------------------
 23599                                  ;
 23600                                  ; Procedure Name : MetaCompare
 23601                                  ;
 23602                                  ; Inputs:
 23603                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23604                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23605                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23606                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23607                                  ; Function:
 23608                                  ;	Compare FCB style names allowing for ? match to any char
 23609                                  ; Outputs:
 23610                                  ;	Zero if match else NZ
 23611                                  ; Destroys CX,SI,DI all others preserved
 23612                                  ;----------------------------------------------------------------------------
 23613                                  
 23614                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23615                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23616                                  
 23617                                  MetaCompare:
 23618 00003E36 B90B00                  	MOV	CX,11
 23619                                  WILDCRD:
 23620 00003E39 F3A6                    	REPE	CMPSB
 23621 00003E3B 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23622                                  CHECK_META:
 23623 00003E3D 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23624 00003E42 74F5                    	JZ	short WILDCRD
 23625                                  MetaRet:
 23626 00003E44 C3                       	retn				; Zero set, Match
 23627                                  
 23628                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23629                                  ;----------------------------------------------------------------------------
 23630                                  ;
 23631                                  ; Procedure Name : NEXTENTRY
 23632                                  ;
 23633                                  ; Inputs:
 23634                                  ;	Same as outputs of GETENTRY, above
 23635                                  ; Function:
 23636                                  ;	Update BX, and [LASTENT] for next directory entry.
 23637                                  ;	Carry set if no more.
 23638                                  ;----------------------------------------------------------------------------
 23639                                  
 23640                                  NEXTENTRY:
 23641                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23642                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23643                                  
 23644                                  	; 19/05/2019 - Retro DOS v4.0
 23645                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23646                                  
 23647                                  	; 27/07/2018 - Retro DOS v3.0
 23648                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23649                                  	; 15/03/2018 - Retro DOS v2.0
 23650                                  
 23651 00003E45 A1[4803]                	MOV	AX,[LASTENT]
 23652 00003E48 3B06[DA05]              	CMP	AX,[ENTLAST]
 23653 00003E4C 7422                    	JZ	short NONE
 23654 00003E4E 40                      	INC	AX
 23655                                  	;ADD	BX,32
 23656 00003E4F 8D5F20                  	LEA	BX,[BX+32]
 23657 00003E52 39D3                    	CMP	BX,DX
 23658                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23659                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23660                                  	; 16/12/2022
 23661 00003E54 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23662 00003E56 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23663 00003E5A FEC3                    	INC	BL
 23664 00003E5C 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23665 00003E60 7215                    	JB	short SAMECLUS
 23666 00003E62 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23667 00003E66 E8C816                  	call	IsEOF
 23668 00003E69 7305                    	JAE	short NONE
 23669                                  	; 23/07/2019
 23670 00003E6B 83FB02                  	CMP	BX,2
 23671                                  	;JB	short NONE
 23672                                  	;JMP	short GETENT
 23673                                  	; 16/12/2022
 23674 00003E6E 732D                    	jnb	short GETENT
 23675                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23676                                  	;JB	short NONE
 23677                                  	;JMP	short GETENT
 23678                                  NONE:
 23679 00003E70 F9                      	STC
 23680 00003E71 C3                      	retn
 23681                                  HAVIT:
 23682 00003E72 A3[4803]                	MOV	[LASTENT],AX
 23683 00003E75 F8                      	CLC
 23684                                  nextentry_retn:
 23685 00003E76 C3                      	retn
 23686                                  SAMECLUS:
 23687 00003E77 881E[7305]              	MOV	[SECCLUSPOS],BL
 23688 00003E7B A3[4803]                	MOV	[LASTENT],AX
 23689 00003E7E 1E                      	PUSH	DS
 23690 00003E7F C53E[E205]              	LDS	DI,[CURBUF]
 23691                                  	; 19/05/2019
 23692                                  	; MSDOS 6.0
 23693                                  	;;mov	dx,[di+8]
 23694                                  	; 23/09/2023
 23695                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23696                                  ;hkn; SS override
 23697                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23698                                  	; 23/09/2023
 23699 00003E83 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 23700                                  	
 23701                                  	;mov	dx,[di+6]
 23702 00003E86 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23703                                  	;inc	dx ; MSDOS 3.3
 23704                                  	; MSDOS 6.0
 23705                                  	;ADD	DX,1				;AN000; >32mb
 23706                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23707                                  	; 23/09/2023
 23708 00003E89 42                      	inc	dx
 23709 00003E8A 7501                    	jnz	short nextexntry_fc
 23710 00003E8C 46                      	inc	si
 23711                                  	;inc	word [SS:HIGH_SECTOR]
 23712                                  nextexntry_fc:
 23713                                  	; 23/09/2023
 23714 00003E8D 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 23715                                  	; MSDOS 3.3 & MSDOS 6.0
 23716 00003E92 1F                      	POP	DS
 23717 00003E93 E844F8                  	call	FIRSTCLUSTER
 23718 00003E96 31DB                    	XOR	BX,BX
 23719 00003E98 EB23                    	JMP	short SETENTRY
 23720                                  
 23721                                  ;----------------------------------------------------------------------------
 23722                                  ;
 23723                                  ; Procedure Name : GETENTRY
 23724                                  ;
 23725                                  ; Inputs:
 23726                                  ;	[LASTENT] has directory entry
 23727                                  ;	ES:BP points to drive parameters
 23728                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23729                                  ; Function:
 23730                                  ;	Locates directory entry in preparation for search
 23731                                  ;	GETENT provides entry for passing desired entry in AX
 23732                                  ; Outputs:
 23733                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23734                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23735                                  ;	[LASTENT] = New directory entry number
 23736                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23737                                  ;	Carry set if error (currently user FAILed to I 24)
 23738                                  ;----------------------------------------------------------------------------
 23739                                  
 23740                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23741                                  GETENTRY:
 23742                                  	; 27/07/2018 - Retro DOS v3.0
 23743 00003E9A A1[4803]                	MOV	AX,[LASTENT]
 23744                                  
 23745                                  	;entry	GETENT
 23746                                  GETENT:
 23747 00003E9D A3[4803]                	MOV	[LASTENT],AX
 23748                                  ;
 23749                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23750                                  ; directory.
 23751                                  ;
 23752 00003EA0 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23753 00003EA2 D3C0                    	rol	ax,cl			; keep hight order bits
 23754 00003EA4 89C2                    	mov	dx,ax
 23755                                  	; 19/05/2019 - Retro DOS v4.0
 23756                                  	;and	ax,0FFE0h
 23757                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23758                                  	;and	ax,~(32-1)		; mask off high order bits
 23759                                  	; 16/12/2022
 23760 00003EA6 24E0                    	and	al,0E0h ; ~31
 23761 00003EA8 83E21F                  	and	dx,1Fh
 23762                                  	;and	dx,32-1			; mask off low order bits
 23763                                  ;
 23764                                  ; DX:AX contain the byte offset of the required directory entry from the
 23765                                  ; beginning of the directory. Convert this to a sector number. Round the
 23766                                  ; sector size down to a multiple of 32.
 23767                                  ;
 23768                                  	;mov	bx,[es:bp+2]
 23769 00003EAB 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23770 00003EAF 80E3E0                  	and	bl,0E0h
 23771                                  	;AND	BL,255-31		; Must be multiple of 32
 23772 00003EB2 F7F3                    	DIV	BX
 23773 00003EB4 89D3                    	MOV	BX,DX			; Position within sector
 23774 00003EB6 53                      	PUSH	BX
 23775 00003EB7 E8CCF7                  	call	DIRREAD
 23776 00003EBA 5B                      	POP	BX
 23777                                  	;retc
 23778 00003EBB 72B9                    	jc	short nextentry_retn	
 23779                                  SETENTRY:
 23780 00003EBD 8B16[E205]              	MOV	DX,[CURBUF]
 23781                                  	;add	dx,16 ; MSDOS 3.3
 23782                                  	;add	dx,20 ; MSDOS 6.0 
 23783 00003EC1 83C214                  	ADD	DX,BUFINSIZ
 23784 00003EC4 01D3                    	ADD	BX,DX
 23785                                  	;add	dx,[es:bp+2]
 23786 00003EC6 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23787                                  	; 29/12/2022
 23788                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 23789 00003ECA F8                      	clc
 23790 00003ECB C3                      	retn
 23791                                  
 23792                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23793                                  ;----------------------------------------------------------------------------
 23794                                  ;
 23795                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23796                                  ;
 23797                                  ; Inputs:
 23798                                  ;	BX cluster number of start of directory
 23799                                  ;	ES:BP Points to DPB
 23800                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23801                                  ; Function:
 23802                                  ;	Set up a directory search
 23803                                  ; Outputs:
 23804                                  ;	[DIRSTART] = BX
 23805                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23806                                  ;	Carry set if error (currently user FAILed to I 24)
 23807                                  ; destroys AX,DX,BX
 23808                                  ;----------------------------------------------------------------------------
 23809                                  
 23810                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23811                                  SETDIRSRCH:
 23812 00003ECC 09DB                    	OR	BX,BX
 23813 00003ECE 7437                    	JZ	short SETROOTSRCH
 23814 00003ED0 891E[C205]              	MOV	[DIRSTART],BX
 23815                                  	;mov	al,[es:bp+4]
 23816 00003ED4 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23817 00003ED8 FEC0                    	INC	AL
 23818 00003EDA A2[7705]                	MOV	[CLUSFAC],AL
 23819                                  
 23820                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23821                                  	;SAVE	<SI>
 23822 00003EDD 56                      	push	si
 23823                                  	;test	byte [FastOpenFlg],2
 23824 00003EDE F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23825 00003EE3 7507                    	JNZ	short UNP_OK
 23826                                  
 23827                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23828                                  	;invoke	UNPACK
 23829 00003EE5 E86016                  	call	UNPACK
 23830 00003EE8 7302                    	JNC	short UNP_OK
 23831                                  	;RESTORE <SI>
 23832 00003EEA 5E                      	pop	si
 23833                                  	;return
 23834 00003EEB C3                      	retn
 23835                                  
 23836                                  UNP_OK:
 23837 00003EEC 893E[BC05]              	MOV	[CLUSNUM],DI
 23838 00003EF0 89DA                    	MOV	DX,BX
 23839 00003EF2 30DB                    	XOR	BL,BL
 23840 00003EF4 881E[7305]              	MOV	[SECCLUSPOS],BL
 23841                                  	;invoke	FIGREC
 23842 00003EF8 E8F60E                  	call	FIGREC
 23843                                  	;RESTORE <SI>
 23844 00003EFB 5E                      	pop	si
 23845                                  	
 23846                                  	; 19/05/2019 - Retro DOS v4.0
 23847                                  
 23848                                  	; MSDOS 6.0
 23849                                  	;PUSH	DX			   ;AN000; >32mb
 23850                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23851                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23852                                  	;POP	DX			   ;AN000; >32mb
 23853                                  
 23854                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23855                                  	;push	dx
 23856                                  	;mov	dx,[HIGH_SECTOR]
 23857                                  	;mov	[DIRSEC+2],dx
 23858                                  	;pop	dx
 23859                                  	;MOV	[DIRSEC],dx
 23860                                  	; 16/12/2022
 23861 00003EFC A1[0706]                	mov	ax,[HIGH_SECTOR]
 23862 00003EFF A3[C005]                	mov	[DIRSEC+2],AX
 23863 00003F02 8916[BE05]              	MOV	[DIRSEC],DX
 23864                                  
 23865                                  	; 16/12/2022
 23866                                  	; cf=0 (at the return of FIGREC)
 23867                                  	;CLC
 23868 00003F06 C3                      	retn
 23869                                  
 23870                                  	;entry	SETROOTSRCH
 23871                                  SETROOTSRCH:
 23872 00003F07 31C0                    	XOR	AX,AX
 23873 00003F09 A3[C205]                	MOV	[DIRSTART],AX
 23874                                  	; 22/09/2023
 23875 00003F0C A3[C005]                	mov	[DIRSEC+2],ax ; 0
 23876 00003F0F A2[7305]                	MOV	[SECCLUSPOS],AL
 23877 00003F12 48                      	DEC	AX
 23878 00003F13 A3[BC05]                	MOV	[CLUSNUM],AX
 23879                                  	;mov	ax,[es:bp+0Bh]
 23880 00003F16 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23881                                  	; 19/05/2019
 23882                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23883                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23884 00003F1A 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23885 00003F1E 29D0                    	SUB	AX,DX
 23886 00003F20 A2[7705]                	MOV	[CLUSFAC],AL
 23887 00003F23 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23888                                  	; 22/09/2023
 23889                                  	; MSDOS 6.0
 23890                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23891 00003F27 F8                      	CLC
 23892 00003F28 C3                      	retn
 23893                                  
 23894                                  ;============================================================================
 23895                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23896                                  ;============================================================================
 23897                                  ; 27/07/2018 - Retro DOS v3.0
 23898                                  ; 19/05/2019 - Retro DOS v4.0 
 23899                                  
 23900                                  ;	TITLE	DIR2 - Directory and path cracking
 23901                                  ;	NAME	Dir2
 23902                                  
 23903                                  ;Break	<GETPATH -- PARSE A WFP>
 23904                                  ;----------------------------------------------------------------------------
 23905                                  ;
 23906                                  ; Procedure Name : GETPATH
 23907                                  ;
 23908                                  ; Inputs:
 23909                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23910                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23911                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23912                                  ;		( = -1 if current dir not involved, else
 23913                                  ;		 Points to first char after last "/" of current dir part)
 23914                                  ;	[THISCDS] Points to CDS being used
 23915                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23916                                  ;	[NoSetDir] set
 23917                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23918                                  ; Function:
 23919                                  ;	Crack the path
 23920                                  ; Outputs:
 23921                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23922                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23923                                  ;	ID1 field of [THISCDS] updated appropriately
 23924                                  ;	[ATTRIB] = [SATTRIB]
 23925                                  ;	ES:BP Points to DPB
 23926                                  ;	Carry set if bad path
 23927                                  ;	   SI Points to path element causing failure
 23928                                  ;	   Zero set
 23929                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23930                                  ;	      start a search on the last directory
 23931                                  ;	      CL is zero if there is a bad name in the path
 23932                                  ;	      CL is non-zero if the name was simply not found
 23933                                  ;		 [ENTFREE] may have free spot in directory
 23934                                  ;		 [NAME1] is the name.
 23935                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23936                                  ;	   Zero reset
 23937                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23938                                  ;		or path too long or malformed path
 23939                                  ;	ELSE
 23940                                  ;	   [CurBuf] = -1 if root directory
 23941                                  ;	   [CURBUF] contains directory record with match
 23942                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23943                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23944                                  ;	   AH = device ID
 23945                                  ;	      bit 7 of AH set if device SI and BX
 23946                                  ;	      will point DOSGROUP relative The firclus
 23947                                  ;	      field of the device entry contains the device pointer
 23948                                  ;	   [NAME1] Has name looked for
 23949                                  ;	   If last element is a directory zero is set and:
 23950                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23951                                  ;	      are set up to start a search on it.
 23952                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23953                                  ;	      like that for a file (except for zero flag)
 23954                                  ;	   If last element is a file zero is reset
 23955                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23956                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23957                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23958                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23959                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23960                                  ; DS preserved, Others destroyed
 23961                                  ;---------------------------------------------------------------------------
 23962                                  
 23963                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23964                                  ;hkn; DS already set up at this point.
 23965                                  
 23966                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23967                                  GETPATH:
 23968                                  	;mov	word [CREATING],0E500h
 23969 00003F29 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23970                                  
 23971                                  ; Same as GetPath only CREATING and DELALL already set
 23972                                  
 23973                                  	;entry	GetPathNoSet
 23974                                  GetPathNoSet:
 23975                                  	;mov	byte [EXTERR_LOCUS],2	
 23976 00003F2F C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23977 00003F34 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23978                                  
 23979                                  ; See if the input indicates a device that has already been detected. If so,
 23980                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23981                                  
 23982 00003F3A 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23983                                  	;cmp	word [DI+1],5C3Ah
 23984                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23985 00003F3E 817D013A5C              	cmp	word [DI+1],':\'
 23986 00003F43 7438                    	JZ	short CrackIt
 23987                                  
 23988                                  ; Let ChkDev find it in the device list
 23989                                  
 23990 00003F45 83C703                  	ADD	DI,3
 23991                                  	; 18/08/2018
 23992                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23993                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23994                                  	; 16/12/2022
 23995                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23996 00003F48 E8AB00                  	CALL	CHKDEV
 23997 00003F4B 722E                    	JC	short InternalError
 23998                                  
 23999                                  Build_devJ:
 24000 00003F4D A0[6D05]                	MOV	AL,[SATTRIB]
 24001 00003F50 A2[6B05]                	MOV	[ATTRIB],AL
 24002                                  	;mov	byte [EXTERR_LOCUS],1
 24003 00003F53 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24004                                  					; "finding" a char device
 24005                                  					; set LOCUS to Unknown. This makes
 24006                                  					; certain idiotic problems reported
 24007                                  					; by a certain 3 letter OEM go away.
 24008                                  
 24009                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24010                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24011                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24012                                  ; wfp into the share set.
 24013                                  ;
 24014                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24015                                  ; non-space seen +1.  This position is kept in DX.
 24016                                  
 24017                                  ;hkn; SS is DOSDATA
 24018 00003F58 16                      	push	ss
 24019 00003F59 07                      	pop	es
 24020                                  
 24021                                  ;hkn; NAME1 is in DOSDATA
 24022 00003F5A BE[4B05]                	mov	si,NAME1
 24023 00003F5D 8B3E[B205]              	mov	di,[WFP_START]
 24024 00003F61 89FA                    	mov	dx,di
 24025 00003F63 B90800                  	mov	cx,8			; 8 chars in device name
 24026                                  MoveLoop:
 24027 00003F66 AC                      	lodsb
 24028 00003F67 AA                      	stosb
 24029 00003F68 3C20                    	cmp	al," "
 24030 00003F6A 7402                    	jz	short NoSave
 24031                                  
 24032 00003F6C 89FA                    	mov	dx,di
 24033                                  NoSave:
 24034 00003F6E E2F6                    	loop	MoveLoop
 24035                                  
 24036                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24037                                  ; at this point.
 24038                                  
 24039 00003F70 89D7                    	mov	di,dx
 24040 00003F72 C60500                  	mov	byte [di],0		; end of string
 24041 00003F75 E8C502                  	call	Build_device_ent	; Clears carry sets zero
 24042 00003F78 FEC0                    	INC	AL			; reset zero
 24043 00003F7A C3                      	retn
 24044                                  
 24045                                  InternalError:
 24046                                  InternalError_loop:
 24047 00003F7B EBFE                    	JMP	short InternalError_loop	; freeze
 24048                                  
 24049                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24050                                  
 24051                                  CrackIt:
 24052 00003F7D 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24053 00003F81 83FEFF                  	CMP	SI,-1			; valid?
 24054 00003F84 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24055 00003F86 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24056                                  LOOK_SING:
 24057                                  	;mov	byte [ATTRIB],16h
 24058 00003F89 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24059                                  					; Attributes to search through Dirs
 24060 00003F8E C43E[A205]              	LES	DI,[THISCDS]
 24061 00003F92 B8FFFF                  	MOV	AX,-1
 24062                                  	;mov	bx,[es:di+73]
 24063 00003F95 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24064 00003F99 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24065                                  
 24066                                  ; AX = -1
 24067                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24068                                  ;      has been uncertainly changed.
 24069                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24070                                  ;      may be -1 if no current directory part has been used.
 24071                                  
 24072 00003F9D 39C6                    	CMP	SI,AX			; if Current directory is not part
 24073 00003F9F 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24074 00003FA1 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24075                                  
 24076                                  ; DOS 3.3  6/25/86
 24077 00003FA3 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24078                                  	;test	byte [FastOpenFlg],1
 24079 00003FA5 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24080 00003FAA 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24081 00003FAC 06                      	PUSH	ES			; save registers
 24082 00003FAD 57                      	PUSH	DI
 24083 00003FAE 51                      	PUSH	CX
 24084 00003FAF FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24085 00003FB2 56                      	PUSH	SI
 24086 00003FB3 53                      	PUSH	BX
 24087                                  
 24088 00003FB4 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24089 00003FB8 8B36[B205]              	MOV	SI,[WFP_START]
 24090                                  
 24091                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24092 00003FBC BB[300D]                	MOV	BX,FastOpenTable
 24093 00003FBF BF[460D]                	MOV	DI,Dir_Info_Buff
 24094 00003FC2 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24095                                  	;mov	al,1
 24096 00003FC5 B001                    	MOV	AL,FONC_Look_up
 24097 00003FC7 1E                      	PUSH	DS
 24098 00003FC8 07                      	POP	ES
 24099                                  	;call	far [BX+2]
 24100 00003FC9 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24101 00003FCC 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24102                                  					; Go to Got_Srch_cluster
 24103                                  	; 29/12/2022
 24104                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24105                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24106                                  	;stc
 24107                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24108                                  
 24109 00003FCE 803C01                  	cmp	byte [si],1
 24110                                  GO_Chk_end1:	; 29/12/2022
 24111 00003FD1 F5                      	cmc 
 24112                                  	; [si] = 0 -> cf = 0
 24113                                  	; [si] > 0 -> cf = 1
 24114                                  
 24115                                  ;GO_Chk_end1:
 24116                                  	; 29/12/2022
 24117                                  	;clc
 24118                                  
 24119                                  GO_Chk_end:				; restore registers
 24120 00003FD2 5B                      	POP	BX
 24121 00003FD3 5E                      	POP	SI
 24122 00003FD4 8F44FF                  	POP	word [SI-1]
 24123 00003FD7 59                      	POP	CX
 24124 00003FD8 5F                      	POP	DI
 24125 00003FD9 07                      	POP	ES
 24126 00003FDA 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24127                                  
 24128                                  ; DOS 3.3  6/25/86
 24129                                  ;
 24130                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24131                                  ; of path and go crack from root.
 24132                                  
 24133                                  NO_CURR_D:
 24134 00003FDC 8B36[B205]              	MOV	SI,[WFP_START]
 24135 00003FE0 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24136 00003FE3 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24137 00003FE7 EB3B                    	JMP	short ROOTPATH
 24138                                  
 24139                                  ; We are able to crack from the current directory part. Go set up for search
 24140                                  ; of specified cluster.
 24141                                  
 24142                                  GOT_SEARCH_CLUSTER:
 24143 00003FE9 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24144 00003FED E8DCFE                  	call	SETDIRSRCH
 24145                                  	;JC	short SETFERR
 24146                                  	;JMP	short FINDPATH
 24147                                  	; 16/12/2022
 24148 00003FF0 7343                    	jnc	short FINDPATH ; 17/08/2018
 24149                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24150                                  	;JC	short SETFERR
 24151                                  	;JMP	short FINDPATH
 24152                                  SETFERR:
 24153 00003FF2 30C9                    	XOR	CL,CL			; set zero
 24154 00003FF4 F9                      	STC
 24155 00003FF5 C3                      	retn
 24156                                  
 24157                                  ;---------------------------------------------------------------------------
 24158                                  ;
 24159                                  ; Procedure Name : ChkDev
 24160                                  ;
 24161                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24162                                  ;   device.
 24163                                  ; Blasts CX,SI,DI,AX,BX
 24164                                  ;---------------------------------------------------------------------------
 24165                                  
 24166                                  CHKDEV:
 24167 00003FF6 89FE                    	MOV	SI,DI
 24168 00003FF8 8CD7                    	MOV	DI,SS
 24169 00003FFA 8EC7                    	MOV	ES,DI
 24170                                  
 24171 00003FFC BF[4B05]                	MOV	DI,NAME1
 24172 00003FFF B90900                  	MOV	CX,9
 24173                                  TESTLOOP:
 24174 00004002 E84A10                  	call	GETLET
 24175                                  
 24176 00004005 3C2E                    	CMP	AL,'.'
 24177 00004007 740E                    	JZ	short TESTDEVICE
 24178 00004009 E89910                  	call	PATHCHRCMP
 24179 0000400C 7407                    	JZ	short NOTDEV
 24180 0000400E 08C0                    	OR	AL,AL
 24181 00004010 7405                    	JZ	short TESTDEVICE
 24182                                  
 24183 00004012 AA                      	STOSB
 24184 00004013 E2ED                    	LOOP	TESTLOOP
 24185                                  NOTDEV:
 24186 00004015 F9                      	STC
 24187 00004016 C3                      	retn
 24188                                  
 24189                                  TESTDEVICE:
 24190                                  	;ADD	CX,2
 24191                                  	; 23/09/2023
 24192 00004017 41                      	inc	cx
 24193 00004018 41                      	inc	cx
 24194 00004019 B020                    	MOV	AL,' '
 24195 0000401B F3AA                    	REP	STOSB
 24196 0000401D 8CD0                    	MOV	AX,SS
 24197 0000401F 8ED8                    	MOV	DS,AX
 24198                                  	;call	DEVNAME
 24199                                  	;retn
 24200                                  	; 18/12/2022
 24201 00004021 E9BA01                  	jmp	DEVNAME
 24202                                  
 24203                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24204                                  ;----------------------------------------------------------------------------
 24205                                  ;
 24206                                  ; Procedure Name : ROOTPATH,FINDPATH
 24207                                  ;
 24208                                  ; Inputs:
 24209                                  ;	Same as FINDPATH but,
 24210                                  ;	SI Points to asciz string of path which is assumed to start at
 24211                                  ;		the root (no leading '/').
 24212                                  ; Function:
 24213                                  ;	Search from root for path
 24214                                  ; Outputs:
 24215                                  ;	Same as FINDPATH but:
 24216                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24217                                  ;	[NoSetDir] is ignored.
 24218                                  ;----------------------------------------------------------------------------
 24219                                  
 24220                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24221                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24222                                  
 24223                                  ROOTPATH:
 24224 00004024 E8E0FE                  	call	SETROOTSRCH
 24225 00004027 803C00                  	CMP	BYTE [SI],0
 24226 0000402A 7509                    	JNZ	short FINDPATH
 24227                                  
 24228                                  ; Root dir specified
 24229 0000402C A0[6D05]                	MOV	AL,[SATTRIB]
 24230 0000402F A2[6B05]                	MOV	[ATTRIB],AL
 24231 00004032 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24232                                  					; (dir), clears carry.
 24233 00004034 C3                      	retn
 24234                                  
 24235                                  ; Inputs:
 24236                                  ;	[ATTRIB] Set to get through directories
 24237                                  ;	[SATTRIB] Set to find last element
 24238                                  ;	ES:BP Points to DPB
 24239                                  ;	SI Points to asciz string of path (no leading '/').
 24240                                  ;	[SECCLUSPOS] = 0
 24241                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24242                                  ;	[CLUSNUM] = Cluster # of next cluster
 24243                                  ;	[CLUSFAC] = Sectors per cluster
 24244                                  ;	[NoSetDir] set
 24245                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24246                                  ;		( = -1 if current dir not involved, else
 24247                                  ;		 Points to first char after last "/" of current dir part)
 24248                                  ;	[THISCDS] Points to CDS being used
 24249                                  ;	[CREATING] and [DELALL] set
 24250                                  ; Function:
 24251                                  ;	Parse path name
 24252                                  ; Outputs:
 24253                                  ;	ID1 field of [THISCDS] updated appropriately
 24254                                  ;	[ATTRIB] = [SATTRIB]
 24255                                  ;	ES:BP Points to DPB
 24256                                  ;	[THISDPB] = ES:BP
 24257                                  ;	Carry set if bad path
 24258                                  ;	   SI Points to path element causing failure
 24259                                  ;	   Zero set
 24260                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24261                                  ;	      start a search on the last directory
 24262                                  ;	      CL is zero if there is a bad name in the path
 24263                                  ;	      CL is non-zero if the name was simply not found
 24264                                  ;		 [ENTFREE] may have free spot in directory
 24265                                  ;		 [NAME1] is the name.
 24266                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24267                                  ;	   Zero reset
 24268                                  ;	      File in middle of path or bad name in path
 24269                                  ;		or path too long or malformed path
 24270                                  ;	ELSE
 24271                                  ;	   [CURBUF] contains directory record with match
 24272                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24273                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24274                                  ;	   [NAME1] Has name looked for
 24275                                  ;	   AH = device ID
 24276                                  ;	      bit 7 of AH set if device SI and BX
 24277                                  ;	      will point DOSGROUP relative The firclus
 24278                                  ;	      field of the device entry contains the device pointer
 24279                                  ;	   If last element is a directory zero is set and:
 24280                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24281                                  ;	      are set up to start a search on it,
 24282                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24283                                  ;	      like that for a file (except for zero flag)
 24284                                  ;	   If last element is a file zero is reset
 24285                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24286                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24287                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24288                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24289                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24290                                  ; Destroys all other registers
 24291                                  
 24292                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24293                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24294                                  
 24295                                      	;entry	FINDPATH
 24296                                  FINDPATH:
 24297 00004035 06                      	PUSH	ES			; Save ES:BP
 24298 00004036 56                      	PUSH	SI
 24299 00004037 89F7                    	MOV	DI,SI
 24300 00004039 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24301 0000403D 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24302 00004042 740E                    	JZ	short NOIDS		; No current dir part
 24303 00004044 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24304 00004048 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24305 0000404A C43E[A205]              	LES	DI,[THISCDS]
 24306                                  	;mov	[es:di+73],cx
 24307 0000404E 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24308                                  NOIDS:
 24309                                  
 24310                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24311                                  ; character in the string. CX,DI may be destroyed.
 24312                                  ;
 24313                                  ;	invoke	NAMETRANS
 24314                                  ;	MOV	CL,AL
 24315                                  ;
 24316                                  ; The above is the slow method. The name has *already* been munged by
 24317                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24318                                  ; the name until ., \ or 0 is hit.
 24319                                  
 24320 00004052 8CD0                    	MOV	AX,SS
 24321 00004054 8EC0                    	MOV	ES,AX
 24322                                  
 24323                                  ;hkn; Name1 is in DOSDATA
 24324 00004056 BF[4B05]                	MOV	DI,NAME1
 24325 00004059 B82020                  	MOV	AX,'  ' ; 2020h
 24326 0000405C AA                      	STOSB
 24327 0000405D AB                      	STOSW
 24328 0000405E AB                      	STOSW
 24329 0000405F AB                      	STOSW
 24330 00004060 AB                      	STOSW
 24331 00004061 AB                      	STOSW
 24332                                  
 24333                                  ;hkn; Name1 is in DOSDATA
 24334 00004062 BF[4B05]                	MOV	DI,NAME1
 24335 00004065 30E4                    	XOR	AH,AH			; bits for CL
 24336                                  GetNam:
 24337                                  	; 19/05/2019 - Retro DOS v4.0
 24338                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24339                                  
 24340                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24341                                  	; 16/12/2022
 24342                                  	;inc	cl ; not required !	
 24343                                  	
 24344 00004067 AC                      	LODSB
 24345 00004068 3C2E                    	CMP	AL,'.'	; 2Eh
 24346 0000406A 7412                    	JZ	short _SetExt
 24347 0000406C 08C0                    	OR	AL,AL
 24348 0000406E 7424                    	JZ	short _GetDone
 24349 00004070 3C5C                    	CMP	AL,'\'	; 5Ch
 24350 00004072 7420                    	JZ	short _GetDone
 24351 00004074 3C3F                    	CMP	AL,'?'	; 3Fh
 24352 00004076 7503                    	JNZ	short StoNam
 24353 00004078 80CC01                  	OR	AH,1
 24354                                  StoNam: 
 24355 0000407B AA                      	STOSB
 24356 0000407C EBE9                    	JMP	short GetNam
 24357                                  _SetExt:
 24358 0000407E BF[5305]                	MOV	DI,NAME1+8
 24359                                  GetExt:
 24360 00004081 AC                      	LODSB
 24361 00004082 08C0                    	OR	AL,AL
 24362 00004084 740E                    	JZ	short _GetDone
 24363 00004086 3C5C                    	CMP	AL,'\'
 24364 00004088 740A                    	JZ	short _GetDone
 24365 0000408A 3C3F                    	CMP	AL,'?'
 24366 0000408C 7503                    	JNZ	short StoExt
 24367 0000408E 80CC01                  	OR	AH,1
 24368                                  StoExt: 
 24369 00004091 AA                      	STOSB
 24370 00004092 EBED                    	JMP	short GetExt
 24371                                  _GetDone:
 24372 00004094 4E                      	DEC	SI
 24373 00004095 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24374 00004097 80C980                  	OR	CL,80H
 24375 0000409A 5F                      	POP	DI			; Start of this element
 24376 0000409B 07                      	POP	ES			; Restore ES:BP
 24377 0000409C 39FE                    	CMP	SI,DI
 24378 0000409E 7503                    	JNZ	short check_device
 24379 000040A0 E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24380                                  check_device:
 24381 000040A3 56                      	PUSH	SI			; Start of next element
 24382                                  	;MOV	AL,[SI]
 24383                                  	;OR	AL,AL
 24384                                  	; 23/09/2023
 24385 000040A4 803C00                  	cmp	byte [si],0
 24386 000040A7 7508                    	JNZ	short NOT_LAST
 24387                                  
 24388                                  ; for last element of the path switch to the correct search attributes
 24389                                  
 24390 000040A9 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24391 000040AD 883E[6B05]              	MOV	[ATTRIB],BH
 24392                                  
 24393                                  NOT_LAST:
 24394                                  
 24395                                  ; check name1 to see if we have a device...
 24396                                  
 24397 000040B1 06                      	PUSH	ES			; Save ES:BP
 24398                                  
 24399                                  ;hkn; SS is DOSDATA
 24400                                  	;context ES
 24401 000040B2 16                      	push	ss
 24402 000040B3 07                      	pop	es
 24403 000040B4 E82701                  	call	DEVNAME 		; blast BX
 24404 000040B7 07                      	POP	ES			; Restore ES:BP
 24405 000040B8 720B                    	JC	short FindFile		; Not a device
 24406 000040BA 08C0                    	OR	AL,AL			; Test next char again
 24407 000040BC 7403                    	JZ	short GO_BDEV
 24408 000040BE E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24409                                  
 24410                                  GO_BDEV:
 24411 000040C1 5E                      	POP	SI			; Points to NUL at end of path
 24412 000040C2 E988FE                  	JMP	Build_devJ
 24413                                  
 24414                                  FindFile:
 24415                                  ;;;; 7/28/86
 24416 000040C5 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24417 000040CA 7505                    	JNZ	short NOE5		; no
 24418 000040CC C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24419                                  NOE5:
 24420                                  ;;;; 7/28/86
 24421 000040D1 57                      	PUSH	DI			; Start of this element
 24422 000040D2 06                      	PUSH	ES			; Save ES:BP
 24423 000040D3 51                      	PUSH	CX			; CL return from NameTrans
 24424                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24425                                  
 24426 000040D4 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24427 000040D7 7303                    	JNC	short DIR_FOUND		; found dir entry
 24428                                  
 24429                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24430 000040D9 E8AFFC                  	call	FINDENTRY
 24431                                  DIR_FOUND:
 24432 000040DC 59                      	POP	CX
 24433 000040DD 07                      	POP	ES
 24434 000040DE 5F                      	POP	DI
 24435 000040DF 7303                    	JNC	short LOAD_BUF
 24436 000040E1 E9CA00                  	JMP	BADPATHPOP
 24437                                  
 24438                                  LOAD_BUF:
 24439 000040E4 C53E[E205]              	LDS	DI,[CURBUF]
 24440                                  	;test	byte [bx+0Bh],10h
 24441 000040E8 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24442 000040EC 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24443 000040EE E99800                  	JMP	FILEINPATH		; Error or end of path
 24444                                  
 24445                                  ; if we are not setting the directory, then check for end of string
 24446                                  
 24447                                  GO_NEXT:
 24448                                  ;hkn; SS override
 24449 000040F1 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24450 000040F7 7423                    	JZ	short SetDir
 24451 000040F9 89FA                    	MOV	DX,DI			; Save pointer to entry
 24452 000040FB 8CD9                    	MOV	CX,DS
 24453                                  
 24454                                  ;hkn; SS is DOSDATA
 24455                                  	;context DS
 24456 000040FD 16                      	push	ss
 24457 000040FE 1F                      	pop	ds
 24458 000040FF 5F                      	POP	DI			; Start of next element
 24459                                  	; 19/05/2019 - Retro DOS v4.0
 24460                                  	; MSDOS 6.0
 24461 00004100 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24462 00004105 740B                    	JZ	short _nofast			; the FastOpen
 24463 00004107 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24464 0000410C 7404                    	JZ	short _nofast			; no
 24465 0000410E 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24466                                  _nofast:
 24467 00004112 803D00                  	CMP	BYTE [DI],0
 24468                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24469                                  	;;JMP	_SETRET  ; retn		; Got it
 24470                                  	;retn	; 05/09/2018
 24471                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24472                                  	;jmp	_SETRET
 24473                                  	; 16/12/2022
 24474 00004115 7421                    	jz	short _SETRET
 24475                                  
 24476                                  NEXT_ONE:
 24477 00004117 57                      	PUSH	DI			; Put start of next element back on stack
 24478 00004118 89D7                    	MOV	DI,DX
 24479 0000411A 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24480                                  SetDir:
 24481 0000411C 8B14                    	MOV	DX,[SI] 		; Dir_first
 24482                                  
 24483                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24484 0000411E 1E                      	PUSH	DS		      ; save [curbuf+2]
 24485                                  ;hkn; SS is DOSDATA
 24486 0000411F 16                      	push	ss
 24487 00004120 1F                      	pop	ds		      ; set DS Dosgroup
 24488                                  	;test	byte [FastOpenFlg],2
 24489 00004121 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24490 00004126 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24491 00004128 89D3                    	MOV	BX,DX		      ; not found
 24492 0000412A 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24493 0000412E 50                      	PUSH	AX		      ; save device id (AH)
 24494 0000412F E89AFD                  	call	SETDIRSRCH
 24495 00004132 58                      	POP	AX		      ; restore device id (AH)
 24496 00004133 83C402                  	ADD	SP,2		      ; pop ds in stack
 24497 00004136 EB37                    	JMP	short FAST_OPEN_SKIP
 24498                                  
 24499                                  	; 16/12/2022
 24500                                  _SETRET:
 24501 00004138 C3                      	retn
 24502                                  
 24503                                  DO_NORMAL:
 24504 00004139 1F                      	POP	DS			; DS = [curbuf + 2]
 24505                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24506                                  
 24507 0000413A 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24508 0000413C 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24509 0000413E 53                      	PUSH	BX
 24510 0000413F 50                      	PUSH	AX
 24511 00004140 56                      	PUSH	SI
 24512 00004141 51                      	PUSH	CX
 24513                                  	;push	word [di+6]
 24514 00004142 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24515                                  	; 19/05/2019
 24516                                  	; MSDOS 6.0
 24517                                  	;push	word [di+8]
 24518 00004145 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24519 00004148 89D3                    	MOV	BX,DX
 24520                                  
 24521                                  ;hkn; SS is DOSDATA
 24522                                  	;context DS
 24523 0000414A 16                      	push	ss
 24524 0000414B 1F                      	pop	ds
 24525                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24526 0000414C E87DFD                  	call	SETDIRSRCH		; the entry sector buffer
 24527                                  	; 19/05/2019
 24528                                  	; MSDOS 6.0
 24529 0000414F 8F06[0706]              	POP	word [HIGH_SECTOR]
 24530 00004153 5A                      	POP	DX
 24531 00004154 7203                    	JC	short SKIP_GETB
 24532                                  	; 22/09/2023
 24533                                  	;;mov	byte [ALLOWED],18h
 24534                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 24535                                  	;XOR	AL,AL ; *
 24536                                  	;;invoke GETBUFFR		; Get the entry buffer back
 24537                                  	;call	GETBUFFR
 24538 00004156 E8FA17                  	call	GETBUFFER ; * ; pre-read
 24539                                  SKIP_GETB:
 24540 00004159 59                      	POP	CX
 24541 0000415A 5E                      	POP	SI
 24542 0000415B 58                      	POP	AX
 24543 0000415C 5B                      	POP	BX
 24544 0000415D 7305                    	JNC	short SET_THE_BUF
 24545 0000415F 5F                      	POP	DI			; Start of next element
 24546 00004160 89FE                    	MOV	SI,DI			; Point with SI
 24547 00004162 EB21                    	JMP	SHORT _BADPATH
 24548                                  
 24549                                  SET_THE_BUF:
 24550 00004164 E878F5                  	call	SET_BUF_AS_DIR
 24551 00004167 8B3E[E205]              	MOV	DI,[CURBUF]
 24552 0000416B 01FE                    	ADD	SI,DI			; Get the offsets back
 24553 0000416D 01FB                    	ADD	BX,DI
 24554                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24555                                  FAST_OPEN_SKIP:
 24556 0000416F 5F                      	POP	DI			; Start of next element
 24557 00004170 E89D02                  	CALL	InsertPath		; insert dir entry info
 24558                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24559 00004173 8A05                    	MOV	AL,[DI]
 24560 00004175 08C0                    	OR	AL,AL
 24561 00004177 74BF                    	JZ	short _SETRET		; At end
 24562 00004179 47                      	INC	DI			; Skip over "/"
 24563 0000417A 89FE                    	MOV	SI,DI			; Point with SI
 24564 0000417C E8260F                  	call	PATHCHRCMP
 24565 0000417F 7503                    	JNZ	short find_bad_name	; oops
 24566 00004181 E9B1FE                  	JMP	FINDPATH		; Next element
 24567                                  
 24568                                  find_bad_name:
 24569 00004184 4E                      	DEC	SI			; Undo above INC to get failure point
 24570                                  _BADPATH:
 24571 00004185 30C9                    	XOR	CL,CL			; Set zero
 24572 00004187 EB2C                    	JMP	SHORT BADPRET
 24573                                  
 24574                                  FILEINPATH:
 24575 00004189 5F                      	POP	DI			; Start of next element
 24576                                  
 24577                                  ;hkn; SS is DOSDATA
 24578                                  	;context DS			; Got to from one place with DS gone
 24579 0000418A 16                      	push	ss
 24580 0000418B 1F                      	pop	ds
 24581                                  
 24582                                  ; DOS 3.3 FastOpen
 24583                                  	;test	byte [FastOpenFlg],1
 24584 0000418C F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24585 00004191 740B                    	JZ	short NO_FAST		; device info to fastopen
 24586                                  	;test	byte [FastOpenFlg],2
 24587 00004193 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24588 00004198 7404                    	JZ	short NO_FAST
 24589 0000419A 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24590                                  					 ; success
 24591                                  NO_FAST:
 24592                                  ; DOS 3.3 FastOpen
 24593 0000419E 8A05                    	MOV	AL,[DI]
 24594 000041A0 08C0                    	OR	AL,AL
 24595 000041A2 7404                    	JZ	short INCRET
 24596 000041A4 89FE                    	MOV	SI,DI			; Path too long
 24597 000041A6 EB0D                    	JMP	SHORT BADPRET
 24598                                  
 24599                                  INCRET:
 24600                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24601                                  
 24602 000041A8 E86502                  	CALL   InsertPath		; insert dir entry info
 24603                                  
 24604                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24605 000041AB FEC0                    	INC	AL			; Reset zero
 24606                                  	; 16/12/2022	
 24607                                  ;_SETRET:
 24608 000041AD C3                      	retn
 24609                                  
 24610                                  BADPATHPOP:
 24611 000041AE 5E                      	POP	SI			; Start of next element
 24612 000041AF 8A04                    	MOV	AL,[SI]
 24613 000041B1 89FE                    	MOV	SI,DI			; Start of bad element
 24614 000041B3 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24615                                  BADPRET:
 24616 000041B5 A0[6D05]                	MOV	AL,[SATTRIB]
 24617 000041B8 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24618 000041BB F9                      	STC
 24619 000041BC C3                      	retn
 24620                                  
 24621                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24622                                  ;---------------------------------------------------------------------------
 24623                                  ;
 24624                                  ; Procedure Name : STARTSRCH
 24625                                  ;
 24626                                  ; Inputs:
 24627                                  ;	[THISDPB] Set
 24628                                  ; Function:
 24629                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24630                                  ; Outputs:
 24631                                  ;	ES:BP = Drive parameters
 24632                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24633                                  ; Destroys ES,BP,AX
 24634                                  ;--------------------------------------------------------------------------
 24635                                  
 24636                                  STARTSRCH:
 24637 000041BD C42E[8A05]              	LES	BP,[THISDPB]
 24638 000041C1 31C0                    	XOR	AX,AX
 24639 000041C3 A3[4803]                	MOV	[LASTENT],AX
 24640 000041C6 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24641 000041C9 48                      	DEC	AX
 24642 000041CA A3[D805]                	MOV	[ENTFREE],AX
 24643 000041CD A3[DA05]                	MOV	[ENTLAST],AX
 24644 000041D0 C3                      	retn
 24645                                  
 24646                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24647                                  ;----------------------------------------------------------------------------
 24648                                  ; Procedure Name : MatchAttributes
 24649                                  ;
 24650                                  ; Input:    [Attrib] = attribute to search for
 24651                                  ;	    CH = found attribute
 24652                                  ; Output:   JZ <match>
 24653                                  ;	    JNZ <nomatch>
 24654                                  ; Registers modified: noneski
 24655                                  ;----------------------------------------------------------------------------
 24656                                  
 24657                                  MatchAttributes:
 24658 000041D1 50                      	PUSH	AX
 24659                                  
 24660                                  ;hkn; SS override
 24661 000041D2 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24662 000041D6 F6D0                    	NOT	AL			; AL <- SearchSet'
 24663 000041D8 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24664                                  	;and	al,16h
 24665 000041DA 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24666                                  ;
 24667                                  ; the result is non-zero if an attribute is not in the search set
 24668                                  ; and in the found set and in the important set. This means that we do not
 24669                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24670                                  ;
 24671 000041DC 58                      	POP	AX
 24672 000041DD C3                      	retn
 24673                                  
 24674                                  ; 19/05/2019 - Retro DOS v4.0
 24675                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24676                                  
 24677                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24678                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24679                                  
 24680                                  ;Break <DevName - Look for name of device>
 24681                                  ;---------------------------------------------------------------------------
 24682                                  ;
 24683                                  ; Procedure Name : DevName
 24684                                  ;
 24685                                  ; Inputs:
 24686                                  ;	DS,ES:DOSDATA
 24687                                  ;	Filename in NAME1
 24688                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24689                                  ; Function:
 24690                                  ;	Determine if file is in list of I/O drivers
 24691                                  ; Outputs:
 24692                                  ;	Carry set if not a device
 24693                                  ;	ELSE
 24694                                  ;	Zero flag set
 24695                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24696                                  ;	     bits 0-4 set from low byte of attribute word
 24697                                  ;	DEVPT = DWORD pointer to Device header of device
 24698                                  ; BX destroyed, others preserved
 24699                                  ;---------------------------------------------------------------------------
 24700                                  
 24701                                  DEVNAME:
 24702                                  	; 28/07/2018 - Retro DOS v3.0
 24703                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24704                                  
 24705 000041DE 56                      	PUSH	SI
 24706 000041DF 57                      	PUSH	DI
 24707 000041E0 51                      	PUSH	CX
 24708 000041E1 50                      	PUSH	AX
 24709                                  
 24710                                  ; E5 special code
 24711 000041E2 FF36[4B05]              	PUSH	WORD [NAME1]
 24712 000041E6 803E[4B05]05            	CMP	byte [NAME1],5
 24713 000041EB 7505                    	JNZ	short NOKTR
 24714 000041ED C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24715                                  NOKTR:
 24716                                  	;test	byte [ATTRIB],8
 24717 000041F2 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24718                                  					; If looking for VOL id don't find devs
 24719 000041F7 7521                    	JNZ	short RET31
 24720                                  
 24721                                  ;hkn; NULDEV is in DOSDATA
 24722 000041F9 BE[4800]                	MOV	SI,NULDEV
 24723                                  LOOKIO:
 24724                                  	; 21/11/2022
 24725                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24726                                  	; 17/12/2022
 24727                                  	;test	byte [si+5],80h
 24728 000041FC F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24729                                  	;;test	word [si+4],8000h
 24730                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24731 00004200 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24732 00004202 89F0                    	MOV	AX,SI
 24733                                  	;add	si,10
 24734 00004204 83C60A                  	ADD	SI,SYSDEV.NAME
 24735                                  
 24736                                  ;hkn; NAME1 is in DOSDATA
 24737 00004207 BF[4B05]                	MOV	DI,NAME1
 24738 0000420A B90400                  	MOV	CX,4			; All devices are 8 letters
 24739 0000420D F3A7                    	REPE	CMPSW			; Check for name in list
 24740 0000420F 89C6                    	MOV	SI,AX
 24741 00004211 7415                    	JZ	short IOCHK		; Found it?
 24742                                  SKIPDEV:
 24743 00004213 C534                    	LDS	SI,[SI]			; Get address of next device
 24744 00004215 83FEFF                  	CMP	SI,-1			; At end of list?
 24745 00004218 75E2                    	JNZ	short LOOKIO
 24746                                  RET31:	
 24747 0000421A F9                      	STC				; Not found
 24748                                  RETNV:	
 24749 0000421B 8CD1                    	MOV	CX,SS
 24750 0000421D 8ED9                    	MOV	DS,CX
 24751                                  
 24752 0000421F 8F06[4B05]              	POP	WORD [NAME1]
 24753 00004223 58                      	POP	AX
 24754 00004224 59                      	POP	CX
 24755 00004225 5F                      	POP	DI
 24756 00004226 5E                      	POP	SI
 24757 00004227 C3                      	RETN
 24758                                  
 24759                                  IOCHK:
 24760                                  ;hkn; SS override for DEVPT
 24761 00004228 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24762                                  	;mov	bh,[si+4]
 24763 0000422D 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24764 00004230 80CFC0                  	OR	BH,0C0h
 24765 00004233 80E7DF                  	and	bh,0DFh
 24766                                  	;AND	BH,~(020h)		; Clears Carry
 24767 00004236 368936[9A05]            	MOV	[SS:DEVPT],SI
 24768 0000423B EBDE                    	JMP	short RETNV
 24769                                  
 24770                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24771                                  ;---------------------------------------------------------------------------
 24772                                  ; Procedure Name : Build_device_ent
 24773                                  ;
 24774                                  ; Inputs:
 24775                                  ;	[NAME1] has name
 24776                                  ;	BH is attribute field (supplied by DEVNAME)
 24777                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24778                                  ; Function:
 24779                                  ;	Build a directory entry for a device at DEVFCB
 24780                                  ; Outputs:
 24781                                  ;	BX points to DEVFCB
 24782                                  ;	SI points to dir_first field
 24783                                  ;	AH = input BH
 24784                                  ;	AL = 0
 24785                                  ;	dir_first = DEVPT
 24786                                  ;	Zero Set, Carry Clear
 24787                                  ; DS,ES,BP preserved, others destroyed
 24788                                  ;--------------------------------------------------------------------------
 24789                                  
 24790                                  Build_device_ent:
 24791 0000423D B82020                  	MOV	AX,"  " ; 2020h
 24792                                  
 24793                                  ;hkn; DEVFCB is in DOSDATA
 24794 00004240 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24795                                  
 24796                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 24797                                  
 24798 00004243 AB                      	STOSW
 24799 00004244 AA                      	STOSB				; Blank out extent field
 24800                                  	;mov	al,40h
 24801 00004245 B040                    	MOV	AL,attr_device
 24802                                  
 24803                                  ;	Fill Dir_attr
 24804                                  
 24805 00004247 AA                      	STOSB				; Set attribute field
 24806 00004248 31C0                    	XOR	AX,AX
 24807 0000424A B90A00                  	MOV	CX,10
 24808                                  
 24809                                  ; Fill dir_pad
 24810                                  
 24811 0000424D F3AB                    	REP	STOSW			; Fill rest with zeros
 24812 0000424F E8A3C8                  	call	DATE16
 24813                                  
 24814                                  ;hkn; DEVFCB is in DOSDATA
 24815 00004252 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24816 00004255 92                      	XCHG	AX,DX
 24817                                  
 24818                                  ; Fill dir_time
 24819                                  
 24820 00004256 AB                      	STOSW
 24821 00004257 92                      	XCHG	AX,DX
 24822                                  
 24823                                  ; Fill dir_date
 24824                                  
 24825 00004258 AB                      	STOSW
 24826 00004259 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24827 0000425B A1[9A05]                	MOV	AX,[DEVPT]
 24828                                  
 24829                                  ; Fill dir_first
 24830                                  
 24831 0000425E AB                      	STOSW				; Dir_first points to device
 24832 0000425F A1[9C05]                	MOV	AX,[DEVPT+2]
 24833                                  ;
 24834                                  ; Fill dir_size_l
 24835                                  ;
 24836 00004262 AB                      	STOSW
 24837 00004263 88FC                    	MOV	AH,BH			; Put device atts in AH
 24838                                  
 24839                                  ;hkn; DEVFCB is in DOSDATA
 24840 00004265 BB[4B05]                	MOV	BX,DEVFCB
 24841 00004268 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24842 0000426A C3                      	retn
 24843                                  
 24844                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24845                                  ;----------------------------------------------------------------------------
 24846                                  ;
 24847                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24848                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24849                                  ;   If invalid, reset original CDS to root.
 24850                                  ;
 24851                                  ;   Inputs:	ThisCDS points to CDS of interest
 24852                                  ;		SS:DI points to temp buffer
 24853                                  ;   Outputs:	The current directory string is validated on the appropriate
 24854                                  ;		    drive
 24855                                  ;		ThisDPB changed
 24856                                  ;		ES:DI point to CDS
 24857                                  ;		Carry set if error (currently user FAILed to I 24)
 24858                                  ;   Registers modified: all
 24859                                  ;----------------------------------------------------------------------------
 24860                                  
 24861                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24862                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24863                                  
 24864                                  ValidateCDS:
 24865                                  	; 19/05/2019 - Retro DOS v4.0
 24866                                  	; 28/07/2018 - Retro DOS v3.0
 24867                                  
 24868                                     %define  Temp	[bp-2]	; word
 24869                                     %define  SaveCDS	[bp-6]	; dword
 24870                                     %define  SaveCDSL	[bp-6]	; word
 24871                                     %define  SaveCDSH	[bp-4]	; word
 24872                                  
 24873                                  	;Enter
 24874 0000426B 55                      	push	bp
 24875 0000426C 89E5                    	mov	bp,sp
 24876 0000426E 83EC06                  	sub	sp,6
 24877                                  
 24878 00004271 897EFE                  	MOV	Temp,DI
 24879                                  
 24880                                  ;hkn; SS override
 24881 00004274 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24882 00004279 8976FA                  	MOV	SaveCDSL,SI
 24883 0000427C 8C5EFC                  	MOV	SaveCDSH,DS
 24884                                  	;EnterCrit critDisk
 24885 0000427F E890D0                  	call	ECritDisk
 24886                                  	; 21/11/2022
 24887                                  	;test	byte [SI+curdir.flags+1],80h
 24888                                  	;test	word [si+67],8000h
 24889                                  	; 17/12/2022
 24890                                  	;test	byte [SI+68],80h
 24891 00004282 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24892                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24893 00004286 7403                    	JZ	short _DoSplice
 24894 00004288 E99200                  	JMP	FatFail
 24895                                  _DoSplice:
 24896 0000428B 30D2                    	XOR	DL,DL
 24897 0000428D 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24898                                  
 24899                                  ;hkn; SS is DOSDATA
 24900                                  	;Context ES
 24901 00004292 16                      	push	ss
 24902 00004293 07                      	pop	es
 24903                                  	;Invoke	FStrcpy
 24904 00004294 E850CF                  	call	FStrCpy
 24905 00004297 8B76FE                  	MOV	SI,Temp
 24906                                  
 24907                                  ;hkn; SS is DOSDATA
 24908                                  	;Context DS
 24909 0000429A 16                      	push	ss
 24910 0000429B 1F                      	pop	ds	
 24911                                  	;Invoke	Splice
 24912 0000429C E85D2B                  	call	Splice
 24913                                  
 24914                                   ;hkn; SS is DOSDATA
 24915                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24916 0000429F 16                      	push	ss
 24917 000042A0 1F                      	pop	ds
 24918 000042A1 8816[4C03]              	MOV	[NoSetDir],DL
 24919 000042A5 C43E[A205]              	LES	DI,[THISCDS]
 24920                                  	;SAVE	<BP>
 24921 000042A9 55                      	push	bp
 24922                                  	;Invoke	FATREAD_CDS
 24923 000042AA E83114                  	call	FATREAD_CDS	
 24924                                  	;RESTORE <BP>
 24925 000042AD 5D                      	pop	bp
 24926 000042AE 726D                    	JC	short FatFail
 24927                                  
 24928 000042B0 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24929                                  	;cmp	word [si+73],-1
 24930 000042B4 837C49FF                	CMP	word [SI+curdir.ID],-1
 24931 000042B8 7555                    	JNZ	short RestoreCDS
 24932                                  
 24933                                  ;hkn; SS is DOSDATA
 24934                                  	;Context ES
 24935 000042BA 16                      	push	ss
 24936 000042BB 07                      	pop	es
 24937                                  
 24938                                  ;hkn; SS override
 24939                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24940 000042BC 36FF36[B205]            	push	word [SS:WFP_START]
 24941                                  	;cmp	si,[bp-6]
 24942 000042C1 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24943 000042C4 750B                    	JNZ	short DoChdir
 24944                                  	;mov	di,[bp-2]
 24945 000042C6 8B7EFE                  	MOV	DI,Temp
 24946                                  
 24947                                  ;hkn; SS override
 24948 000042C9 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24949                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24950 000042CE E816CF                  	call	FStrCpy
 24951                                  DoChdir:
 24952                                  ;hkn; SS is DOSDATA
 24953                                  	;Context DS
 24954 000042D1 16                      	push	ss
 24955 000042D2 1F                      	pop	ds
 24956                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24957 000042D3 FF36[6D05]              	push	word [SATTRIB]
 24958 000042D7 55                      	push	bp
 24959                                  	;Invoke	DOS_ChDir
 24960 000042D8 E8EFEE                  	call	DOS_CHDIR
 24961                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24962 000042DB 5D                      	pop	bp
 24963 000042DC 5B                      	pop	bx
 24964 000042DD 8F06[B205]              	pop	word [WFP_START]
 24965 000042E1 881E[6D05]              	MOV	[SATTRIB],BL
 24966 000042E5 C576FA                  	LDS	SI,SaveCDS
 24967 000042E8 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24968                                  
 24969                                  ;hkn; SS override for THISCDS
 24970 000042EA 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24971 000042EF 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24972 000042F4 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24973 000042F6 884C03                  	MOV	[SI+3],CL		;	    }
 24974                                  SetCluster:
 24975                                  	;mov	word [si+73],0FFFFh
 24976 000042F9 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24977 000042FE 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24978                                  	; 21/11/2022
 24979                                  	;test	byte [si+curdir.flags+1],20h
 24980                                  	; 19/05/2019
 24981                                  	; MSDOS 6.0
 24982                                  	; 17/12/2022
 24983                                  	;test	byte [si+68],20h
 24984 00004303 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24985                                  	;;test	word [si+67],2000h
 24986                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24987 00004307 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24988 00004309 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24989                                  _setdirclus:
 24990                                  	;mov	[si+73],cx
 24991 0000430C 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24992                                  RestoreCDS:
 24993 0000430F C47EFA                  	LES	DI,SaveCDS
 24994 00004312 36893E[A205]            	MOV	[SS:THISCDS],DI
 24995 00004317 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24996 0000431C F8                      	CLC
 24997                                  FatFail:
 24998                                  	;LeaveCrit critDisk
 24999 0000431D E80DD0                  	call	LCritDisk
 25000                                  
 25001                                  	;les	di,[bp-6]
 25002 00004320 C47EFA                  	LES	DI,SaveCDS
 25003                                  	;Leave
 25004 00004323 89EC                    	mov	sp,bp
 25005 00004325 5D                      	pop	bp
 25006 00004326 C3                      	retn
 25007                                  
 25008                                  ; 28/07/2018 - Retro DOS v3.0
 25009                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25010                                  
 25011                                  ;Break	<CheckThisDevice - Check for being a device>
 25012                                  ;---------------------------------------------------------------------------
 25013                                  ;
 25014                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25015                                  ;   device specified. We will return carry if there is a device present. 
 25016                                  ;   The forms of devices we will recognize are:
 25017                                  ;
 25018                                  ;	[path]device
 25019                                  ;
 25020                                  ;   Note that the drive letter has *already* been removed. All other forms
 25021                                  ;   are not considered to be devices. If such a device is found we change
 25022                                  ;   the source pointer to point to the device component.
 25023                                  ;
 25024                                  ;   Inputs:	ES is DOSDATA
 25025                                  ;		DS:SI contains name
 25026                                  ;   Outputs:	ES is DOSDATA
 25027                                  ;		DS:SI point to name or device
 25028                                  ;		Carry flag set if device was found
 25029                                  ;		Carry flag reset otherwise
 25030                                  ;   Registers Modified: all except ES:DI, DS
 25031                                  ;----------------------------------------------------------------------------
 25032                                  
 25033                                  CheckThisDevice:
 25034 00004327 57                      	push	di
 25035 00004328 56                      	push	si
 25036 00004329 89F7                    	MOV	DI,SI
 25037                                  
 25038                                  ; Check for presence of \dev\ (Dam multiplan!)
 25039                                  
 25040 0000432B 8A04                    	MOV	AL,[SI]
 25041 0000432D E8750D                  	call	PATHCHRCMP		; is it a path char?
 25042 00004330 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25043 00004332 46                      	INC	SI			; simulate LODSB
 25044                                  
 25045                                  ; We have the leading path separator. Look for DEV part.
 25046                                  
 25047 00004333 AD                      	LODSW
 25048 00004334 0D2020                  	OR	AX,2020h
 25049 00004337 3D6465                  	cmp	ax,"de"
 25050                                  	;CMP	AX,"e"<< 8 + "d"
 25051 0000433A 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25052 0000433C AC                      	LODSB
 25053 0000433D 0C20                    	OR	AL,20h
 25054 0000433F 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25055 00004341 7526                    	JNZ	short NotDevice
 25056 00004343 AC                      	LODSB
 25057 00004344 E85E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25058 00004347 7520                    	JNZ	short NotDevice		; no. go for it.
 25059                                  
 25060                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25061                                  ; SI and DevName may destroy DS.
 25062                                  
 25063                                  ParseDev:
 25064 00004349 1E                      	push	ds
 25065 0000434A 56                      	push	si			; preserve the source pointer
 25066 0000434B E8950C                  	call	NameTrans		; advance DS:SI
 25067 0000434E 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25068 00004351 F9                      	STC				; simulate a Carry return from DevName
 25069 00004352 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25070                                  
 25071                                  ;hkn; SS is DOSDATA
 25072 00004354 16                      	push	ss
 25073 00004355 1F                      	pop	ds
 25074                                  
 25075                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25076                                  ;
 25077                                  ; SR;
 25078                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25079                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25080                                  ; old call set the volume attribute bit.
 25081                                  
 25082 00004356 A0[6D05]                	mov	al,[SATTRIB]
 25083 00004359 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25084                                  
 25085                                  ; M026 - end
 25086                                  
 25087 0000435C E87FFE                  	call	DEVNAME
 25088                                  
 25089                                  SkipSearch:
 25090 0000435F 5E                      	pop	si
 25091 00004360 1F                      	pop	ds
 25092                                  
 25093                                  ; SI points to the beginning of the potential device. If we have a device
 25094                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25095                                  ; original value. At this point Carry set indicates FILE.
 25096                                  
 25097                                  CheckReturn:
 25098 00004361 5F                      	pop	di			; get original SI
 25099 00004362 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25100 00004364 89FE                    	MOV	SI,DI
 25101                                  Check_Done:
 25102 00004366 5F                      	pop	di
 25103 00004367 F5                      	CMC				; invert carry. Carry => device
 25104 00004368 C3                      	retn
 25105                                  NotDevice:
 25106 00004369 F9                      	STC
 25107 0000436A EBF5                    	JMP	short CheckReturn
 25108                                  
 25109                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25110                                  ;-----------------------------------------------------------------------------
 25111                                  ;
 25112                                  ; Procedure Name : LookupPath
 25113                                  ;
 25114                                  ; Output  DS:SI -> path name,
 25115                                  ;	  ES:DI -> dir entry info buffer
 25116                                  ;	  ES:CX -> extended dir info buffer
 25117                                  ;
 25118                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25119                                  ;			     FastOpen, DS:SI points to char just one after
 25120                                  ;			     the last char of path name which is fully or
 25121                                  ;			     partially found in FastOPen
 25122                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25123                                  ;
 25124                                  ;----------------------------------------------------------------------------
 25125                                  
 25126                                  LookupPath:
 25127                                  ;	PUSH	AX
 25128                                  
 25129                                  ;hkn; SS override
 25130                                  	;test	byte [ss:FastOpenFlg],1
 25131 0000436C 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25132 00004372 7503                    	JNZ	short FASTINST			    ; and this routine is
 25133                                  NOLOOK:
 25134 00004374 E99700                  	JMP	NOLOOKUP			    ; executed once
 25135                                  
 25136                                  FASTINST:
 25137                                  ;hkn; SS override
 25138                                  	;test	byte [ss:FastOpenFlg],8
 25139 00004377 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25140 0000437D 75F5                    	JNZ	short NOLOOK			    ; yes
 25141                                  
 25142 0000437F BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25143                                  
 25144                                  ;hkn; SS override
 25145 00004382 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25146 00004387 BF[460D]                	MOV	DI,Dir_Info_Buff
 25147 0000438A B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25148 0000438D B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25149 0000438F 1E                      	PUSH	DS
 25150 00004390 07                      	POP	ES
 25151                                  
 25152                                  ;hkn; SS override
 25153                                  	;call	far [bx+2]
 25154 00004391 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25155 00004394 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25156                                  
 25157 00004396 8D5CFE                  	LEA	BX,[SI-2]
 25158                                  
 25159                                  ;hkn; SS override
 25160 00004399 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25161 0000439E 745D                    	JZ	short NOTFOUND			    ; no
 25162                                  
 25163                                  	; 19/05/2019 - Retro DOS v4.0
 25164                                  
 25165                                  	; MSDOS 6.0				    ; fully or partially found
 25166 000043A0 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25167 000043A3 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25168 000043A5 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25169                                  
 25170                                  ;hkn; SS override for attrib/sattrib
 25171 000043A6 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25172 000043AB 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25173 000043B0 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25174                                  	;mov	ch,[es:di+0Bh]
 25175 000043B5 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25176 000043B9 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25177                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25178 000043BC 59                      	POP	CX				    ;AN000;FO.;
 25179 000043BD 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25180                                  parfnd:
 25181                                  
 25182                                  ;hkn; SS override
 25183 000043BF 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25184 000043C4 89CB                    	MOV	BX,CX
 25185                                  	; MSDOS 6.0
 25186                                  	;mov	ax,[bx+7]
 25187 000043C6 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25188                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25189 000043C9 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25190 000043CD 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25191 000043D0 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25192                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25193                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25194                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25195 000043D4 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25196 000043D7 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25197                                  
 25198 000043DB 06                      	PUSH	ES				    ; save ES
 25199                                  ;hkn; SS override
 25200 000043DC 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25201 000043E1 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25202                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25203 000043E4 07                      	POP	ES				    ; pop ES
 25204                                  ;SR;
 25205                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25206                                  ;indicate it is not a root dir
 25207                                  
 25208 000043E5 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25209 000043EC 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25210 000043F1 89FB                    	MOV	BX,DI				    ; start of entry
 25211                                  	;lea	si,[di+1Ah]
 25212 000043F3 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25213                                  						    ; dir_first field in the
 25214                                  						    ; dir entry
 25215                                  ;hkn; SS override for FastOpenFlg
 25216                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25217 000043F6 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25218                                  ;	POP	AX
 25219 000043FC C3                      	RETN
 25220                                  NOTFOUND:
 25221 000043FD 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25222 00004400 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25223 00004402 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25224                                  Partial_Success:
 25225                                  	;and	byte [SS:FastOpenFlg],0FBh
 25226 00004408 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25227                                  NOLOOKUP:
 25228                                  ;	POP	AX
 25229 0000440E F9                      	STC
 25230 0000440F C3                      	RETN
 25231                                  
 25232                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25233                                  ;-----------------------------------------------------------------------------
 25234                                  ;
 25235                                  ; Procedure Name : InsertPath
 25236                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25237                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25238                                  ;	  DS = DOSDATA
 25239                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25240                                  ;
 25241                                  ;-----------------------------------------------------------------------------
 25242                                  
 25243                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25244                                  
 25245                                  InsertPath:
 25246 00004410 9C                      	PUSHF
 25247                                  ;hkn; SS override for FastOpenFlag
 25248                                  	;test	byte [SS:FastOpenFlg], 1
 25249 00004411 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25250 00004417 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25251                                  	;test	byte [ss:FastOpenFlg],2
 25252 00004419 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25253 0000441F 740D                    	JZ	short INSERT_DIR_INFO		; no
 25254                                  	;and	byte [ss:FastOpenFlg],0FDh
 25255 00004421 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25256 00004427 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25257 0000442C EB5E                    	JMP	short GET_NEXT2
 25258                                  INSERT_DIR_INFO:				; save registers
 25259 0000442E 1E                      	PUSH	DS
 25260 0000442F 06                      	PUSH	ES
 25261 00004430 53                      	PUSH	BX
 25262 00004431 56                      	PUSH	SI
 25263 00004432 57                      	PUSH	DI
 25264 00004433 51                      	PUSH	CX
 25265 00004434 50                      	PUSH	AX
 25266                                  
 25267                                  ;hkn; SS override
 25268 00004435 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25269 0000443A BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25270                                  	;mov	ax,[di+6]
 25271 0000443D 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25272                                  	; MSDOS 6.0
 25273                                  	;mov	[ss:si+1],ax
 25274 00004440 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25275                                  	; 19/05/2019 - Retro DOS v4.0
 25276 00004444 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25277                                  
 25278                                  ;hkn; SS is DOSDATA
 25279 00004447 16                      	push	ss
 25280 00004448 1F                      	pop	ds
 25281                                  	; MSDOS 3.3	
 25282                                  	;;mov	[si+1],ax	
 25283                                  	;MOV	[SI+FEI.dirsec],AX
 25284                                  	; MSDOS 6.0
 25285                                  	;mov	[si+3],ax
 25286 00004449 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25287                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25288 0000444C A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25289                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25290                                  	;mov	[si+3],ax ; MSDOS 3.3
 25291 0000444F 894405                  	MOV	[SI+FEI.clusnum],AX
 25292                                  	; MSDOS 6.0
 25293 00004452 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25294                                  	;mov	[si+7],ax
 25295 00004455 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25296 00004458 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25297                                  	;mov	[si+9],ax
 25298 0000445B 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25299                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25300 0000445E 89D8                    	MOV	AX,BX
 25301                                  	;;add	di,16  ; MSDOS 3.3
 25302                                  	;add	di,20  ; MSDOS 6.0
 25303 00004460 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25304 00004463 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25305                                  	;mov	cl,32
 25306 00004465 B120                    	MOV	CL,dir_entry.size
 25307 00004467 F6F1                    	DIV	CL
 25308                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25309 00004469 8804                    	mov	[si],al
 25310                                  
 25311 0000446B 1E                      	PUSH	DS
 25312 0000446C 07                      	POP	ES
 25313                                  
 25314 0000446D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25315 00004471 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25316                                  	;cmp	word [di+1Ah],0
 25317 00004473 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25318                                  					; never insert info when file is empty
 25319 00004477 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25320                                  
 25321 00004479 56                      	PUSH	SI			; ES:BX -> extended info
 25322 0000447A 5B                      	POP	BX
 25323                                  
 25324                                  	;mov	al,2
 25325 0000447B B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25326 0000447D BE[300D]                	MOV	SI,FastOpenTable
 25327                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25328                                  	; 07/12/2022
 25329 00004480 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25330                                  
 25331 00004484 F8                      	CLC
 25332                                  SKIP_INSERT:
 25333 00004485 58                      	POP	AX
 25334 00004486 59                      	POP	CX			; restore registers
 25335 00004487 5F                      	POP	DI
 25336 00004488 5E                      	POP	SI
 25337 00004489 5B                      	POP	BX
 25338 0000448A 07                      	POP	ES
 25339 0000448B 1F                      	POP	DS
 25340                                  GET_NEXT2:
 25341                                  	;or	[ss:FastOpenFlg],8
 25342 0000448C 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25343                                  					; we got dir info from fastopen so
 25344                                  GET_NEXT_ELEMENT:
 25345 00004492 9D                      	POPF
 25346 00004493 C3                      	RETN
 25347                                  
 25348                                  ;============================================================================
 25349                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25350                                  ;============================================================================
 25351                                  ; 17/07/2018 - Retro DOS v3.0
 25352                                  ; 30/04/2019 - Retro DOS v4.0
 25353                                  
 25354                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25355                                  
 25356                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25357                                  
 25358                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25359                                  
 25360                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25361                                  ;DEV001s:
 25362                                  ;		length of packets
 25363 00004494 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25364                                  ;LenTab: db	22,14,22,13,15,14
 25365                                  
 25366                                  ;	Error Function
 25367                                  
 25368                                  CmdTab:
 25369 0000449A 8604                    	DB	86h, DEVRD	; 0 input
 25370 0000449C 8605                    	DB	86h, DEVRDND	; 1 input status
 25371 0000449E 8708                    	DB	87h, DEVWRT	; 2 output
 25372 000044A0 870A                    	DB	87h, DEVOST	; 3 output status
 25373 000044A2 8607                    	DB	86h, DEVIFL	; 4 input flush
 25374 000044A4 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25375                                  
 25376                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25377                                  
 25378                                  ;CmdTab:
 25379                                  ;	db	86h, 4
 25380                                  ;	db	86h, 5
 25381                                  ;	db	87h, 8
 25382                                  ;	db	87h, 10
 25383                                  ;	db	86h, 7
 25384                                  ;	db	86h, 5
 25385                                  
 25386                                  ;DEV001E:
 25387                                  
 25388                                  ; 30/04/2019 - Retro DOS v4.0
 25389                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25390                                  
 25391                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25392                                  ;----------------------------------------------------------------------------
 25393                                  ;
 25394                                  ; Procedure Name : IOFUNC
 25395                                  ;
 25396                                  ; Inputs:
 25397                                  ;	DS:SI Points to SFT
 25398                                  ;	AH is function code
 25399                                  ;		= 0 Input
 25400                                  ;		= 1 Input Status
 25401                                  ;		= 2 Output
 25402                                  ;		= 3 Output Status
 25403                                  ;		= 4 Flush
 25404                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25405                                  ;				   present.
 25406                                  ;	AL = character if output
 25407                                  ; Function:
 25408                                  ;	Perform indicated I/O to device or file
 25409                                  ; Outputs:
 25410                                  ;	AL is character if input
 25411                                  ;	If a status call
 25412                                  ;		zero set if not ready
 25413                                  ;		zero reset if ready (character in AL for input status)
 25414                                  ; For regular files:
 25415                                  ;	Input Status
 25416                                  ;		Gets character but restores position
 25417                                  ;		Zero set on EOF
 25418                                  ;	Input
 25419                                  ;		Gets character advances position
 25420                                  ;		Returns ^Z on EOF
 25421                                  ;	Output Status
 25422                                  ;		Always ready
 25423                                  ; AX altered, all other registers preserved
 25424                                  ;----------------------------------------------------------------------------
 25425                                  
 25426                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25427                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25428                                  
 25429                                  IOFUNC:
 25430 000044A6 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25431                                  					; DEVIOBUF
 25432 000044AB 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25433 000044B2 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25434 000044B9 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25435                                  	;test	byte [si+6],80h
 25436                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25437 000044BD F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25438 000044C1 7403                    	JZ	short IOTO22		;AN000;
 25439 000044C3 E9A500                  	JMP	IOTOFILE		;AN000;
 25440                                  IOTO22:
 25441                                  	;test	word [si+5],80h
 25442                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25443 000044C6 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25444 000044CA 7503                    	JNZ	short IOTO33		;AN000;
 25445 000044CC E99C00                  	JMP	IOTOFILE		;AN000;
 25446                                  IOTO33:
 25447 000044CF 06                      	push	es ; * (MSDOS 6.21)
 25448 000044D0 E893BF                  	call	save_world
 25449 000044D3 8CDA                    	MOV	DX,DS
 25450 000044D5 8CD3                    	MOV	BX,SS
 25451 000044D7 8EDB                    	MOV	DS,BX
 25452 000044D9 8EC3                    	MOV	ES,BX
 25453 000044DB 31DB                    	XOR	BX,BX
 25454 000044DD 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25455 000044E0 7503                    	jnz	short _no_sys_wait
 25456                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25457                                  	; 16/12/2022
 25458 000044E2 80CF04                  	or	bh,04h
 25459                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25460                                  				    ; It is up to device driver to carry out
 25461                                  				    ; appropriate action.
 25462                                  _no_sys_wait:
 25463 000044E5 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25464 000044E9 31DB                    	XOR	BX,BX
 25465 000044EB 881E[8903]              	MOV	[IOMED],BL
 25466                                  
 25467 000044EF 88E3                    	MOV	BL,AH		 	; get function
 25468 000044F1 2E8AA7[9444]            	MOV	AH,[cs:BX+LenTab]
 25469 000044F6 D1E3                    	SHL	BX,1
 25470 000044F8 2E8B8F[9A44]            	MOV	CX,[cs:BX+CmdTab]
 25471 000044FD BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25472 00004500 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25473 00004504 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25474                                  
 25475 00004508 8EDA                    	MOV	DS,DX
 25476 0000450A E86B01                  	CALL	DEVIOCALL
 25477 0000450D 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25478 00004512 21FF                    	and	di,di
 25479 00004514 7834                    	js	short DevErr
 25480                                  OKDevIO:
 25481 00004516 8CD0                    	MOV	AX,SS
 25482 00004518 8ED8                    	MOV	DS,AX
 25483                                  
 25484                                  	;cmp	ch,5
 25485 0000451A 80FD05                  	CMP	CH,DEVRDND
 25486 0000451D 7506                    	JNZ	short DNODRD
 25487 0000451F A0[8903]                	MOV	AL,[IORCHR]
 25488 00004522 A2[BC03]                	MOV	[DEVIOBUF],AL
 25489                                  
 25490                                  DNODRD: 
 25491 00004525 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25492 00004529 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25493                                  	;and	ah,2
 25494 0000452B 80E402                  	AND	AH,STBUI>>8
 25495                                  
 25496                                  QuickReturn:				;AN000; 2/13/KK
 25497 0000452E E81EBF                  	call	restore_world
 25498 00004531 07                      	pop	es ; * (MSDOS 6.21)
 25499                                  
 25500                                  	; SR;
 25501                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25502                                  	; IoStatFail = -1 (set after return from the I24)
 25503                                  
 25504                                  	; MSDOS 6.0
 25505 00004532 9C                      	pushf
 25506 00004533 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25507 00004537 98                      	cbw				;sign extend to word
 25508 00004538 83F8FF                  	cmp	ax,-1
 25509 0000453B 7507                    	jne	short not_fail_ret
 25510 0000453D 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25511 00004542 9D                      	popf
 25512 00004543 C3                      	retn
 25513                                  
 25514                                  not_fail_ret:
 25515 00004544 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25516 00004548 9D                      	popf
 25517 00004549 C3                      	retn
 25518                                  
 25519                                  DevErr:
 25520 0000454A 88CC                    	MOV	AH,CL
 25521 0000454C E88E0D                  	call	CHARHARD
 25522 0000454F 3C01                    	CMP	AL,1
 25523 00004551 7507                    	JNZ	short NO_RETRY
 25524 00004553 E8F9BE                  	call	restore_world
 25525                                  	; 12/05/2019
 25526 00004556 07                      	pop	es ; * (MSDOS 6.21)		
 25527 00004557 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25528                                  
 25529                                  NO_RETRY:
 25530                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25531                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25532                                  	; simply wants to ignore the error.
 25533                                  	;
 25534                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25535                                  	; should be checked by the caller on return
 25536                                  
 25537                                  					; SS override
 25538 0000455A 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25539                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25540                                  
 25541                                  	; SR;
 25542                                  	; Check if user failed
 25543                                  
 25544                                  	; MSDOS 6.0
 25545 00004560 3C03                    	cmp	al,3
 25546 00004562 7505                    	jnz	short not_fail
 25547 00004564 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25548                                  not_fail:
 25549 00004569 EBAB                    	JMP	short OKDevIO
 25550                                  
 25551                                  IOTOFILE:
 25552 0000456B 08E4                    	OR	AH,AH
 25553 0000456D 7421                    	JZ	short IOIN
 25554 0000456F FECC                    	DEC	AH
 25555 00004571 7405                    	JZ	short IOIST
 25556 00004573 FECC                    	DEC	AH
 25557 00004575 7411                    	JZ	short IOUT
 25558                                  IOUT_retn:	; 18/12/2022
 25559 00004577 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25560                                  IOIST:
 25561                                  	;push	word [si+15h]
 25562 00004578 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25563                                  	;push	word [si+17h]
 25564 0000457B FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25565 0000457E E80F00                  	CALL	IOIN
 25566                                  	;pop	word [si+17h]
 25567 00004581 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25568                                  	;pop	word [si+15h]
 25569 00004584 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25570 00004587 C3                      	retn
 25571                                  IOUT:
 25572 00004588 E82500                  	CALL	SETXADDR
 25573 0000458B E87FEF                  	call	DOS_WRITE
 25574                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25575                                  	; 18/12/2022
 25576 0000458E EB52                    	jmp	RESTXADDR
 25577                                  ;IOUT_retn:
 25578                                  	;retn			; come crying to me when things don't
 25579                                  				; work ARR
 25580                                  IOIN:
 25581 00004590 E81D00                  	CALL	SETXADDR
 25582                                  					; SS override for DOS34_FLAG
 25583                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25584                                  	;or	word [ss:DOS34_FLAG],40h
 25585                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25586                                  	; 16/12/2022
 25587 00004593 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25588 00004599 E848ED                  	CALL	DOS_READ
 25589                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25590                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25591                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25592                                  	; 16/12/2022
 25593 0000459C 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25594 000045A2 09C9                    	OR	CX,CX			; Check EOF
 25595 000045A4 E83B00                  	CALL	RESTXADDR
 25596                                  					; SS override
 25597 000045A7 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25598 000045AB 75CA                    	jnz	short IOUT_retn	
 25599 000045AD B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25600 000045AF C3                      	retn
 25601                                  
 25602                                  SETXADDR:
 25603                                  					; SS override
 25604 000045B0 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25605                                  
 25606 000045B5 06                      	push	es ; * (MSDOS 6.21)
 25607                                  
 25608 000045B6 E8ADBE                  	call	save_world
 25609                                  					; SS override for DMAADD and THISSFT
 25610                                  	; 24/09/2023
 25611                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25612                                  	;PUSH	WORD [SS:DMAADD+2]
 25613 000045B9 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25614                                  
 25615 000045BE 16                      	push	ss
 25616 000045BF 1F                      	pop	ds
 25617                                  
 25618                                  	; 24/09/2023
 25619 000045C0 FF36[2C03]              	push	word [DMAADD]
 25620 000045C4 FF36[2E03]              	push	word [DMAADD+2]
 25621                                  
 25622 000045C8 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25623 000045CC 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25624 000045D0 890E[2E03]              	MOV	[DMAADD+2],CX
 25625 000045D4 8B0E[8A03]              	MOV	CX,[IOXAD]
 25626 000045D8 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25627 000045DC 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25628 000045E0 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25629                                  
 25630                                  RESTXADDR:
 25631 000045E2 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25632 000045E6 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25633 000045EA 8F06[2C03]              	POP	WORD [DMAADD]
 25634                                  
 25635 000045EE E85EBE                  	call	restore_world
 25636                                  
 25637 000045F1 07                      	pop	es ; * (MSDOS 6.21)
 25638                                  					; SS override
 25639                                  RESTRET:
 25640 000045F2 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25641                                  
 25642                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25643                                  ; 21/11/2022
 25644                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25645                                  
 25646                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25647                                  
 25648                                  ;----------------------------------------------------------------------------
 25649                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25650                                  ;
 25651                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25652                                  ;	the SFT.
 25653                                  ;
 25654                                  ;	ENTRY	(ES:DI) = SFT
 25655                                  ;	EXIT	none
 25656                                  ;	USES	all
 25657                                  ;----------------------------------------------------------------------------
 25658                                  
 25659                                  DEV_OPEN_SFT:
 25660 000045F7 06                      	push	es ; * (MSDOS 6.21)
 25661 000045F8 E86BBE                  	call	save_world
 25662                                  	;mov	al,0Dh	
 25663 000045FB B00D                    	MOV	AL,DEVOPN
 25664 000045FD EB06                    	JMP	SHORT DO_OPCLS
 25665                                  
 25666                                  ;----------------------------------------------------------------------------
 25667                                  ; Procedure Name : DEV_CLOSE_SFT
 25668                                  ;
 25669                                  ; Inputs:
 25670                                  ;	ES:DI Points to SFT
 25671                                  ; Function:
 25672                                  ;	Issue a CLOSE call to the correct device
 25673                                  ; Outputs:
 25674                                  ;	None
 25675                                  ; ALL preserved
 25676                                  ;----------------------------------------------------------------------------
 25677                                  
 25678                                  DEV_CLOSE_SFT:
 25679 000045FF 06                      	push	es ; * (MSDOS 6.21)
 25680 00004600 E863BE                  	call	save_world
 25681                                  	;mov	al,0Eh	
 25682 00004603 B00E                    	MOV	AL,DEVCLS
 25683                                  
 25684                                  	; Main entry for device open and close. AL contains the function 
 25685                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25686                                  	; open/close to block devices. This allows networks to function but 
 25687                                  	; does NOT hang up with bogus change-line code.
 25688                                  
 25689                                  	;entry	DO_OPCLS
 25690                                  DO_OPCLS:
 25691                                  	; Is the SFT for the net? If so, no action necessary.
 25692                                  
 25693                                  	; MSDOS 6.0
 25694                                  	;test	word [es:di+5],8000h
 25695                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25696 00004605 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25697 0000460A 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25698 0000460C 30E4                    	XOR	AH,AH			; Unit
 25699                                  	;test	byte [es:di+5],80h
 25700 0000460E 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25701                                  	;les	di,[es:di+7]
 25702 00004613 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25703 00004617 7513                    	JNZ	short GOT_DEV_ADDR
 25704                                  
 25705                                  	; We are about to call device open/close on a block driver. If no 
 25706                                  	; sharing then just short circuit to done.
 25707                                  	
 25708                                  	; MSDOS 6.0
 25709                                  					; SS override
 25710 00004619 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25711 0000461F 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25712                                  
 25713                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25714                                  	;mov	ah,[es:di+1]
 25715 00004621 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25716 00004625 268A0D                  	mov	cl,[es:di]
 25717                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25718                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25719                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25720 00004628 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25721                                  GOT_DEV_ADDR:				; ES:DI -> device
 25722                                  	;test	word [es:di+4],800h
 25723                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25724 0000462C 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25725 00004631 7440                    	JZ	short OPCLS_DONE	; Device can't
 25726 00004633 06                      	PUSH	ES
 25727 00004634 1F                      	POP	DS
 25728 00004635 89FE                    	MOV	SI,DI			; DS:SI -> device
 25729                                  
 25730                                  OPCLS_RETRY:
 25731                                  	;Context ES
 25732 00004637 16                      	push	ss
 25733 00004638 07                      	pop	es
 25734                                  					; DEVCALL is in DOSDATA
 25735 00004639 BF[5A03]                	MOV	DI,DEVCALL
 25736                                  
 25737 0000463C 89FB                    	MOV	BX,DI
 25738 0000463E 50                      	PUSH	AX
 25739                                  	;mov	al,13
 25740 0000463F B00D                    	MOV	AL,DOPCLHL
 25741 00004641 AA                      	STOSB				; Length
 25742 00004642 58                      	POP	AX
 25743 00004643 86E0                    	XCHG	AH,AL
 25744 00004645 AA                      	STOSB				; Unit
 25745 00004646 86E0                    	XCHG	AH,AL
 25746 00004648 AA                      	STOSB				; Command
 25747 00004649 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25748 0000464E 50                      	PUSH	AX			; Save Unit,Command
 25749                                  	;invoke	DEVIOCALL2
 25750 0000464F E82900                  	call	DEVIOCALL2
 25751                                  
 25752                                  	;mov	di,[es:bx+3]
 25753 00004652 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25754                                  	;test	di,8000h
 25755                                  	;jz	short OPCLS_DONEP	
 25756 00004656 21FF                    	and	di,di
 25757 00004658 7918                    	jns	short OPCLS_DONEP	; No error
 25758                                  	; 21/11/2022
 25759                                  	;test	word [si+4],8000h
 25760                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25761                                  	;test	word [si+5],80h
 25762 0000465A F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25763 0000465E 7404                    	JZ	short BLKDEV
 25764 00004660 B486                    	MOV	AH,86H			; Read error in data, Char dev
 25765 00004662 EB04                    	JMP	SHORT HRDERR
 25766                                  BLKDEV:
 25767 00004664 88C8                    	MOV	AL,CL			; Drive # in AL
 25768 00004666 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25769                                  HRDERR:
 25770                                  	;invoke	CHARHARD
 25771 00004668 E8720C                  	call	CHARHARD
 25772 0000466B 3C01                    	cmp	al,1
 25773 0000466D 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25774                                  					;  Note that FAIL is essentually IGNORED
 25775 0000466F 58                      	POP	AX			; Get back Unit, Command
 25776 00004670 EBC5                    	JMP	short OPCLS_RETRY
 25777                                  OPCLS_DONEP:
 25778 00004672 58                      	POP	AX			; Clean stack
 25779                                  OPCLS_DONE:
 25780 00004673 E8D9BD                  	call	restore_world
 25781 00004676 07                      	pop	es ; * (MSDOS 6.21)
 25782 00004677 C3                      	retn
 25783                                  
 25784                                  ; 30/04/2019 - Retro DOS v4.0
 25785                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25786                                  
 25787                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25788                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25789                                  
 25790                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25791                                  ;----------------------------------------------------------------------------
 25792                                  ;**	DevIoCall  - Call Device
 25793                                  ;
 25794                                  ;	ENTRY	DS:SI Points to device SFT
 25795                                  ;		ES:BX Points to request data
 25796                                  ;	EXIT	DS:SI -> Device driver
 25797                                  ;	USES	DS:SI,AX
 25798                                  ;----------------------------------------------------------------------------
 25799                                  ;**	DevIoCall2 - Call Device
 25800                                  ;
 25801                                  ;	ENTRY	DS:SI Points to DPB
 25802                                  ;		ES:BX Points to request data
 25803                                  ;	EXIT	DS:SI -> Device driver
 25804                                  ;	USES	DS:SI,AX
 25805                                  ;----------------------------------------------------------------------------
 25806                                  
 25807                                  DEVIOCALL:
 25808                                  					; SS override for CALLSSEC, 
 25809                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25810 00004678 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25811                                  
 25812                                  	;entry	DEVIOCALL2
 25813                                  DEVIOCALL2:
 25814                                  	;EnterCrit critDevice
 25815 0000467B E8C9CC                  	call	ECritDevice
 25816                                  
 25817                                  	; MSDOS 6.0
 25818                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25819                                  	;test	byte [si+5],80h
 25820 0000467E F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25821 00004682 7548                    	jnz	short chardev2		;AN000; >32mb no
 25822                                  
 25823                                  	; 16/12/2022
 25824                                  	; 22/11/2022
 25825 00004684 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25826 00004688 3C04                    	cmp	al,DEVRD	; 4
 25827 0000468A 7408                    	je	short chkext	
 25828 0000468C 3C08                    	cmp	al,DEVWRT	; 8
 25829 0000468E 7404                    	je	short chkext
 25830 00004690 3C09                    	cmp	al,DEVWRTV	; 9
 25831 00004692 7538                    	jne	short chardev2
 25832                                  
 25833                                  	; 16/12/2022
 25834                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25835                                  	;;cmp	byte [es:bx+2],4
 25836                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25837                                  	;JZ	short chkext		;AN000; >32mb   yes
 25838                                  	;;cmp	byte [es:bx+2],8
 25839                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25840                                  	;JZ	short chkext		;AN000; >32mb   yes
 25841                                  	;;cmp	byte [es:bx+2],9
 25842                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25843                                  	;				;AN000; >32mb write/verify ?
 25844                                  	;JNZ	short chardev2		;AN000; >32mb no
 25845                                  chkext:
 25846 00004694 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25847 00004697 7255                    	JC	short dev_exit		;AN000;LB. done
 25848                                  
 25849                                  	;test	byte [si+4],2
 25850 00004699 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25851 0000469D 741D                    	JZ	short chksector		;AN000;>32mb   no
 25852 0000469F 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25853 000046A3 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25854 000046A7 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25855 000046AE 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25856 000046B2 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25857 000046B6 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25858 000046BA EB10                    	JMP	short chardev2		;AN000; >32mb
 25859                                  chksector:				;AN000; >32mb
 25860 000046BC 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25861 000046C2 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25862                                  	;mov	word [es:bx+3],8107h
 25863 000046C4 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25864                                  					;AN000; >32mb
 25865 000046CA EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25866                                  
 25867                                  chardev2:				;AN000;
 25868                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25869                                  	; preserved
 25870                                  
 25871                                  	;mov	ax,[si+6]
 25872 000046CC 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25873 000046CF 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25874 000046D3 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25875 000046D8 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25876                                  
 25877                                  	;mov	ax,[si+8]
 25878 000046DD 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25879 000046E0 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25880 000046E4 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25881                                  
 25882                                  	; MSDOS 6.0
 25883 000046E9 E83A01                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25884 000046EC 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25885                                  
 25886                                  dev_exit:
 25887                                  	;LeaveCrit critDevice
 25888                                  	;call	LCritDevice
 25889                                  	;retn
 25890                                  	; 18/12/2022
 25891 000046EE E971CC                  	jmp	LCritDevice
 25892                                  
 25893                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25894                                  ; 22/11/2022
 25895                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25896                                  
 25897                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25898                                  ;---------------------------------------------------------------------------
 25899                                  ;
 25900                                  ; Procedure Name : SETREAD, SETWRITE
 25901                                  ;
 25902                                  ; Inputs:
 25903                                  ;	DS:BX = Transfer Address
 25904                                  ;	CX = Record Count
 25905                                  ;	DX = Starting Record
 25906                                  ;	AH = Media Byte
 25907                                  ;	AL = Unit Code
 25908                                  ; Function:
 25909                                  ;	Set up the device call header at DEVCALL
 25910                                  ; Output:
 25911                                  ;	ES:BX Points to DEVCALL
 25912                                  ; No other registers effected
 25913                                  ;
 25914                                  ;---------------------------------------------------------------------------
 25915                                  
 25916                                  SETREAD:
 25917 000046F1 57                      	PUSH	DI
 25918 000046F2 51                      	PUSH	CX
 25919 000046F3 50                      	PUSH	AX
 25920 000046F4 B104                    	MOV	CL,DEVRD ; mov cl,4
 25921                                  SETCALLHEAD:
 25922 000046F6 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25923 000046F8 16                      	PUSH	SS
 25924 000046F9 07                      	POP	ES
 25925                                  					; DEVCALL is in DOSDATA
 25926 000046FA BF[5A03]                	MOV	DI,DEVCALL
 25927                                  
 25928 000046FD AA                      	STOSB				; length
 25929 000046FE 58                      	POP	AX			; 
 25930 000046FF AA                      	STOSB				; Unit
 25931 00004700 50                      	PUSH	AX
 25932 00004701 88C8                    	MOV	AL,CL
 25933 00004703 AA                      	STOSB				; Command code
 25934 00004704 31C0                    	XOR	AX,AX
 25935 00004706 AB                      	STOSW				; Status
 25936 00004707 83C708                  	ADD	DI,8			; Skip link fields
 25937 0000470A 58                      	POP	AX
 25938 0000470B 86E0                    	XCHG	AH,AL
 25939 0000470D AA                      	STOSB				; Media byte
 25940 0000470E 86C4                    	XCHG	AL,AH
 25941 00004710 50                      	PUSH	AX
 25942 00004711 89D8                    	MOV	AX,BX
 25943 00004713 AB                      	STOSW
 25944                                  
 25945 00004714 8CD8                    	MOV	AX,DS
 25946 00004716 AB                      	STOSW				; Transfer addr
 25947                                  
 25948 00004717 59                      	POP	CX			; Real AX
 25949 00004718 58                      	POP	AX			; Real CX
 25950 00004719 AB                      	STOSW				; Count
 25951                                  
 25952 0000471A 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25953 0000471B AB                      	STOSW				; Start
 25954 0000471C 91                      	XCHG	AX,CX
 25955 0000471D 87D1                    	XCHG	DX,CX
 25956 0000471F 5F                      	POP	DI
 25957                                  					; DEVCALL is in DOSDATA
 25958 00004720 BB[5A03]                	MOV	BX,DEVCALL
 25959 00004723 C3                      	retn
 25960                                  
 25961                                  	;entry	SETWRITE
 25962                                  SETWRITE:
 25963                                  
 25964                                  ; Inputs:
 25965                                  ;	DS:BX = Transfer Address
 25966                                  ;	CX = Record Count
 25967                                  ;	DX = Starting Record
 25968                                  ;	AH = Media Byte
 25969                                  ;	AL = Unit Code
 25970                                  ; Function:
 25971                                  ;	Set up the device call header at DEVCALL
 25972                                  ; Output:
 25973                                  ;	ES:BX Points to DEVCALL
 25974                                  ; No other registers effected
 25975                                  
 25976 00004724 57                      	PUSH	DI
 25977 00004725 51                      	PUSH	CX
 25978 00004726 50                      	PUSH	AX
 25979 00004727 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25980 00004729 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25981 0000472E EBC6                    	JMP	SHORT SETCALLHEAD
 25982                                  
 25983                                  ; 30/04/2019 - Retro DOS v4.0
 25984                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25985                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25986                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25987                                  
 25988                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25989                                  ;---------------------------------------------------------------------------
 25990                                  ;
 25991                                  ; Procedure Name : RW_SC
 25992                                  ;
 25993                                  ; Inputs:
 25994                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25995                                  ;	 [SC_STATUS]= SC validity status
 25996                                  ;	 [SEQ_SECTOR]= last sector read
 25997                                  ; Function:
 25998                                  ;	Read from or write through secondary cache
 25999                                  ; Output:
 26000                                  ;	ES:BX Points to DEVCALL
 26001                                  ;	carry clear, I/O is not done
 26002                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26003                                  ;	carry set, I/O is done
 26004                                  ;
 26005                                  ;----------------------------------------------------------------------------
 26006                                  
 26007                                  RW_SC:
 26008                                  	; SS override for all variables used.
 26009                                  	
 26010 00004730 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26011 00004736 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26012 00004738 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26013 0000473E 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26014 00004740 51                      	PUSH	CX			    ;AN000;LB.
 26015 00004741 52                      	PUSH	DX			    ;AN000;LB. yes
 26016 00004742 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26017 00004743 56                      	PUSH	SI			    ;AN000;LB.
 26018 00004744 06                      	PUSH	ES			    ;AN000;LB.
 26019 00004745 57                      	PUSH	DI			    ;AN000;LB.
 26020                                  
 26021 00004746 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26022 0000474B 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26023 00004751 7408                    	JZ	short doread		    ;AN000;LB. yes
 26024 00004753 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26025 00004756 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26026                                  scexit4:				    ;AN000;
 26027 00004759 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26028 0000475A C3                      	retn				    ;AN000;LB.
 26029                                  doread: 				    ;AN000;
 26030 0000475B E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26031 0000475E 720A                    	JC	short readSC		    ;AN000;LB.
 26032 00004760 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26033 00004767 F9                      	STC				    ;AN000;LB. set carry
 26034 00004768 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26035                                  readSC: 				    ;AN000;
 26036 0000476A 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26037 0000476E 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26038 00004773 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26039 00004778 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26040                                  	; 24/09/2023
 26041                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26042 0000477D 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26043                                  chklow: 						
 26044 0000477F 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26045 00004782 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26046 00004784 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26047 0000478B 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26048 0000478F 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26049                                  readsr:
 26050 00004793 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26051 00004797 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26052 0000479B 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26053 0000479F 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26054                                  
 26055 000047A3 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26056 000047A7 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26057 000047AB 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26058 000047AF 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26059 000047B3 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26060 000047B9 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26061 000047BD 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26062 000047C1 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26063 000047C5 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26064 000047C9 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26065 000047CD 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26066                                  saveseq2:				    ;AN000;
 26067 000047D1 F8                      	CLC				    ;AN000;LB. clear carry
 26068                                  saveseq:				    ;AN000;	
 26069 000047D2 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26070 000047D6 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26071 000047DA 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26072 000047DE 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26073 000047E2 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26074                                  scexit2:				    ;AN000;LB.
 26075 000047E4 F8                      	CLC				    ;AN000;LB.	clear carry
 26076                                  scexit: 				    ;AN000;		
 26077 000047E5 5F                      	POP	DI			    ;AN000;LB.
 26078 000047E6 07                      	POP	ES			    ;AN000;LB. restore registers
 26079 000047E7 5E                      	POP	SI			    ;AN000;LB.
 26080 000047E8 1F                      	POP	DS			    ;AN000;LB.
 26081 000047E9 5A                      	POP	DX			    ;AN000;LB.
 26082 000047EA 59                      	POP	CX			    ;AN000;LB.
 26083 000047EB C3                      	retn				    ;AN000;LB.
 26084                                  
 26085                                  ;Break	<IN_SC -- check if in secondary cache>
 26086                                  ;--------------------------------------------------------------------------
 26087                                  ;
 26088                                  ; Procedure Name : IN_SC
 26089                                  ;
 26090                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26091                                  ;	   [CURSC_DRIVE]= current SC drive
 26092                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26093                                  ;	   [SC_CACHE_COUNT]= SC count
 26094                                  ;	   [HIGH_SECTOR]:DX= sector number
 26095                                  ; Function:
 26096                                  ;	Check if the sector is in secondary cache
 26097                                  ; Output:
 26098                                  ;	carry clear, in SC
 26099                                  ;	   CX= the index in the secondary cache
 26100                                  ;	carry set, not in SC
 26101                                  ;
 26102                                  ;---------------------------------------------------------------------------
 26103                                  
 26104                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26105                                  IN_SC:
 26106                                  	; SS override for all variables used
 26107 000047EC 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26108 000047F0 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26109 000047F5 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26110 000047F7 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26111 000047FB 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26112 000047FD 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26113 00004802 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26114                                  	; 24/09/2023
 26115                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26116 00004807 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26117 00004809 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26118 0000480E 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26119 00004810 F8                      	CLC				    ;AN000;;LB. clear carry
 26120                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26121                                  	; 16/12/2022
 26122 00004811 C3                      	retn	; 30/04/2019
 26123                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26124                                  	;jmp	short inexit
 26125                                  
 26126                                  outrange2:				    ;AN000;;LB. set carry
 26127 00004812 F9                      	STC				    ;AN000;;LB.
 26128                                  inexit: 				    ;AN000;;LB.
 26129 00004813 C3                      	retn				    ;AN000;;LB.
 26130                                  
 26131                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26132                                  ;---------------------------------------------------------------------------
 26133                                  ;
 26134                                  ; Procedure Name : Invalidate_Sc
 26135                                  ;
 26136                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26137                                  ;	   [CURSC_DRIVE]= current SC drive
 26138                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26139                                  ;	   [SC_CACHE_COUNT]= SC count
 26140                                  ;	   [SC_STATUS]= SC status word
 26141                                  ;	   [HIGH_SECTOR]:DX= sector number
 26142                                  ;
 26143                                  ; Function:
 26144                                  ;	invalidate secondary cache if in there
 26145                                  ; Output:
 26146                                  ;	[SC_STATUS] is updated
 26147                                  ;---------------------------------------------------------------------------
 26148                                  
 26149                                  INVALIDATE_SC:
 26150                                  	; SS override for all variables used
 26151                                  
 26152 00004814 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26153 00004817 720C                    	JC	short outrange		    ;AN000;;LB. no
 26154 00004819 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26155 0000481C D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26156 0000481E F7D0                    	NOT	AX			    ;AN000;;LB.
 26157 00004820 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26158                                  outrange:				    ;AN000;;LB.
 26159 00004825 C3                      	retn				    ;AN000;;LB.
 26160                                  
 26161                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26162                                  ; 22/11/2022
 26163                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26164                                  
 26165                                  ;Break	<VIRREAD- virtually read data into buffer>
 26166                                  ;--------------------------------------------------------------------------
 26167                                  ;
 26168                                  ; Procedure Name : SC_FLAG
 26169                                  ;
 26170                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26171                                  ;		     1, continuous sectors were read into SC
 26172                                  ; Function:
 26173                                  ;	   Move data from SC to buffer
 26174                                  ; Output:
 26175                                  ;	 carry clear, data is moved to buffer
 26176                                  ;	 carry set, bad sector or exceeds maximum sector
 26177                                  ;	   SC_FLAG =0
 26178                                  ;	   CALLSCNT=1
 26179                                  ;	   SC_STATUS= -1 if succeeded
 26180                                  ;     
 26181                                  ;		       0 if failed
 26182                                  ;--------------------------------------------------------------------------
 26183                                  
 26184                                  VIRREAD:
 26185                                  	; SS override for all variables used
 26186                                  
 26187 00004826 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26188 0000482C 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26189 0000482E 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26190 00004832 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26191 00004836 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26192 0000483A 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26193 0000483E 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26194 00004844 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26195                                  
 26196                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26197 0000484B 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26198 00004851 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26199 00004853 1E                      	PUSH	DS			    ;AN000;;LB.
 26200 00004854 56                      	PUSH	SI			    ;AN000;;LB.
 26201 00004855 06                      	PUSH	ES			    ;AN000;;LB.
 26202 00004856 57                      	PUSH	DI			    ;AN000;;LB.
 26203 00004857 52                      	PUSH	DX			    ;AN000;;LB.
 26204 00004858 51                      	PUSH	CX			    ;AN000;;LB.
 26205 00004859 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26206 0000485B E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26207 0000485E 59                      	POP	CX
 26208 0000485F 5A                      	POP	DX			    ;AN000;;LB.
 26209 00004860 5F                      	POP	DI			    ;AN000;;LB.
 26210 00004861 07                      	POP	ES			    ;AN000;;LB.
 26211 00004862 5E                      	POP	SI			    ;AN000;;LB.
 26212 00004863 1F                      	POP	DS			    ;AN000;;LB.
 26213 00004864 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26214                                  scerror:				    ;AN000;
 26215 00004866 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26216 0000486D 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26217 00004874 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26218 0000487A F9                      	STC				    ;AN000;;LB. carry set
 26219 0000487B C3                      	retn				    ;AN000;;LB.
 26220                                  sc2end: 				    ;AN000;
 26221 0000487C F8                      	CLC				    ;AN000;;LB. carry clear
 26222 0000487D C3                      	retn				    ;AN000;;LB.
 26223                                  
 26224                                  ; 30/04/2019 - Retro  DOS v4.0
 26225                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26226                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26227                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26228                                  
 26229                                  ;Break	<SC2BUF- move data from SC to buffer>
 26230                                  ;----------------------------------------------------------------------------
 26231                                  ;
 26232                                  ; Procedure Name : SC2BUF
 26233                                  ;
 26234                                  ; Inputs:  [SC_STATUS] = SC validity status
 26235                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26236                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26237                                  ; Function:
 26238                                  ;	   Move data from SC to buffer
 26239                                  ; Output:
 26240                                  ;	   carry clear, in SC  and data is moved
 26241                                  ;	   carry set, not in SC and data is not moved
 26242                                  ;---------------------------------------------------------------------------
 26243                                  
 26244                                  SC2BUF:
 26245                                  	; SS override for all variables used
 26246 0000487E E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26247                                  	;JC	short noSC		    ;AN000;LB. no
 26248                                  	; 24/09/2023
 26249 00004881 723D                    	jc	short sexit
 26250 00004883 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26251 00004886 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26252 00004888 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26253 0000488D 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26254                                  ;entry SC2BUF2
 26255                                  SC2BUF2:				    ;AN000;
 26256                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26257                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26258                                  	; 24/09/2023
 26259 0000488F 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26260 00004893 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26261 00004894 F7E1                    	mul	cx
 26262 00004896 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26263 0000489B 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26264 000048A0 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26265 000048A2 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26266 000048A4 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26267 000048A9 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26268                                  	; 24/09/2023
 26269                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26270 000048AE D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26271                                  ;entry MOVWORDS
 26272                                  MOVWORDS:				    ;AN000;
 26273 000048B0 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26274 000048B6 7403                    	JZ	short nodd		    ;AN000;LB. no
 26275 000048B8 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26276 000048BA 66                      	DB	66H			    ;AN000;LB. use double word move
 26277                                  nodd:
 26278 000048BB F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26279 000048BD F8                      	CLC				    ;AN000;LB. clear carry
 26280 000048BE C3                      	retn				    ;AN000;LB. exit
 26281                                  noSC:					    ;AN000;
 26282 000048BF F9                      	STC				    ;AN000;LB. set carry
 26283                                  sexit:					    ;AN000;
 26284 000048C0 C3                      	retn				    ;AN000;LB.
 26285                                  
 26286                                  ;============================================================================
 26287                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26288                                  ;============================================================================
 26289                                  ; 29/07/2018 - Retro DOS v3.0
 26290                                  ; 19/05/2019 - Retro DOS v4.0
 26291                                  
 26292                                  ;	TITLE	MKNODE - Node maker
 26293                                  ;	NAME	MKNODE
 26294                                  
 26295                                  ;**	MKNODE.ASM
 26296                                  ;----------------------------------------------------------------------------
 26297                                  ;	Low level routines for making a new local file system node
 26298                                  ;	and filling in an SFT from a directory entry
 26299                                  ;
 26300                                  ;	BUILDDIR
 26301                                  ;	SETDOTENT
 26302                                  ;	MakeNode
 26303                                  ;	NEWENTRY
 26304                                  ;	FREEENT
 26305                                  ;	NEWDIR
 26306                                  ;	DOOPEN
 26307                                  ;	RENAME_MAKE
 26308                                  ;	CHECK_VIRT_OPEN
 26309                                  ;
 26310                                  ;	Revision history:
 26311                                  ;
 26312                                  ;	 AN000	version 4.0  Jan. 1988
 26313                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26314                                  
 26315                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26316                                  ;----------------------------------------------------------------------------
 26317                                  ;
 26318                                  ; Procedure Name : BUILDDIR,NEWDIR
 26319                                  ;
 26320                                  ; Inputs:
 26321                                  ;       ES:BP Points to DPB
 26322                                  ;       [THISSFT] Set if using NEWDIR entry point
 26323                                  ;               (used by ALLOCATE)
 26324                                  ;       [LASTENT] current last valid entry number in directory if no free
 26325                                  ;               entries
 26326                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26327                                  ; Function:
 26328                                  ;       Grow directory if no free entries and not root
 26329                                  ; Outputs:
 26330                                  ;       CARRY SET IF FAILURE
 26331                                  ;       ELSE
 26332                                  ;          AX entry number of new entry
 26333                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26334                                  ;               AX = first entry of new dir
 26335                                  ;       GETENT should be called to set [LASTENT]
 26336                                  ;
 26337                                  ;----------------------------------------------------------------------------
 26338                                  
 26339                                  ; 19/05/2019 - Retro DOS v4.0
 26340                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26341                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26342                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26343                                  
 26344                                  BUILDDIR:
 26345                                  	; 29/07/2018 - Retro DOS v3.0
 26346                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26347                                  
 26348 000048C1 A1[D805]                        MOV     AX,[ENTFREE]
 26349 000048C4 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26350                                  	;JZ	short CHECK_IF_ROOT
 26351                                          ;CLC
 26352                                          ;retn
 26353                                  	; 24/09/2023
 26354 000048C7 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26355                                  
 26356                                  CHECK_IF_ROOT:
 26357 000048C9 833E[C205]00                    CMP     word [DIRSTART],0
 26358 000048CE 7502                            JNZ	short NEWDIR
 26359                                          ;STC
 26360                                  	; 24/09/2023
 26361                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26362                                  builddir_cmc_retn:
 26363                                  	; 24/09/2023
 26364 000048D0 F5                      	cmc	; cf=1 <-> cf=0
 26365                                  builddir_retn:
 26366 000048D1 C3                              retn				; Can't grow root
 26367                                  
 26368                                  	;entry   NEWDIR
 26369                                  NEWDIR: 
 26370 000048D2 8B1E[C205]              	MOV     BX,[DIRSTART]
 26371 000048D6 09DB                            OR      BX,BX
 26372 000048D8 7405                            JZ	short NULLDIR
 26373 000048DA E82806                  	call	GETEOF
 26374 000048DD 72F2                            jc	short builddir_retn	; Screw up
 26375                                  NULLDIR:
 26376 000048DF B90100                          MOV     CX,1
 26377 000048E2 E83905                  	call	ALLOCATE
 26378 000048E5 72EA                            jc	short  builddir_retn
 26379 000048E7 8B16[C205]                      MOV     DX,[DIRSTART]
 26380 000048EB 09D2                            OR      DX,DX
 26381 000048ED 750D                            JNZ	short ADDINGDIR
 26382 000048EF E8DAF5                  	call	SETDIRSRCH
 26383 000048F2 72DD                            jc	short  builddir_retn
 26384 000048F4 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26385 000048FA EB29                            JMP     SHORT GOTDIRREC
 26386                                  ADDINGDIR:
 26387 000048FC 53                              PUSH    BX
 26388 000048FD 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26389 00004901 E82D0C                          call	IsEOF
 26390 00004904 5B                              POP     BX
 26391 00004905 7217                            JB	short NOTFIRSTGROW
 26392                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26393 00004907 891E[BC05]                      MOV     [CLUSNUM],BX
 26394                                  	; 24/09/2023
 26395                                  	;PUSH	CX ; (not necessary)
 26396 0000490B 50                      	PUSH	AX
 26397 0000490C 55                      	PUSH	BP
 26398 0000490D B401                            MOV     AH,1			; CLUSNUM update
 26399                                  	; 15/12/2022
 26400 0000490F 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26401                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26402                                  	;;mov	dl,[es:bp+0]
 26403                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26404 00004913 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26405 00004917 89DD                            MOV     BP,BX 			; CLUSNUM
 26406 00004919 E8E7DD                  	call	FastOpen_Update
 26407 0000491C 5D                              POP     BP
 26408 0000491D 58                              POP     AX
 26409                                  	; 24/09/2023
 26410                                          ;POP	CX
 26411                                  
 26412                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26413                                  NOTFIRSTGROW:
 26414 0000491E 89DA                            MOV     DX,BX
 26415 00004920 30DB                            XOR     BL,BL
 26416 00004922 E8CC04                  	call	FIGREC
 26417                                  GOTDIRREC:
 26418                                  	;mov	cl,[es:bp+4]
 26419 00004925 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26420 00004929 FEC1                            INC     CL
 26421 0000492B 30ED                            XOR     CH,CH
 26422                                  ZERODIR:
 26423 0000492D 51                              PUSH    CX
 26424                                  	; 22/09/2023
 26425                                  	;;mov	byte [ALLOWED],18h
 26426                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26427 0000492E B0FF                            MOV     AL,0FFH
 26428                                          ;call	GETBUFFR
 26429 00004930 E82210                          call	GETBUFFRD ; *
 26430 00004933 7302                    	JNC	short GET_SSIZE
 26431 00004935 59                              POP     CX
 26432 00004936 C3                              retn
 26433                                  
 26434                                  GET_SSIZE:
 26435                                  	;mov	cx,[es:bp+2]
 26436 00004937 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26437 0000493B 06                              PUSH    ES
 26438 0000493C C43E[E205]                      LES     DI,[CURBUF]
 26439                                  	;or	byte [es:di+5],4
 26440 00004940 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26441 00004945 57                              PUSH    DI
 26442                                  	;;add	di,16	; MSDOS 3.3
 26443                                  	;add	di,20	; MSDOS 6.0	
 26444 00004946 83C714                          ADD     DI,BUFINSIZ
 26445 00004949 31C0                            XOR     AX,AX
 26446 0000494B D1E9                            SHR     CX,1
 26447 0000494D F3AB                            REP     STOSW
 26448 0000494F 7301                            JNC	short EVENZ
 26449 00004951 AA                              STOSB
 26450                                  EVENZ:
 26451 00004952 5F                              POP     DI
 26452                                  
 26453                                  	; MSDOS 6.0
 26454 00004953 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26455                                  					;LB. if already dirty		  ;AN000;
 26456 00004958 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26457 0000495A E8FF11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26458                                          
 26459                                  	;or	byte [es:di+5],40h
 26460 0000495D 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26461                                  yesdirty7:
 26462 00004962 07                              POP	ES
 26463 00004963 59                              POP	CX
 26464                                  
 26465                                  	; 19/05/2019 - Retro DOS v4.0
 26466                                  
 26467                                  	; MSDOS 3.3
 26468                                  	;INC	DX
 26469                                  
 26470                                  	; MSDOS 6.0
 26471                                  	; 24/09/2023
 26472                                  	;add	dx,1
 26473                                  	;;adc	word [HIGH_SECTOR],0
 26474                                  	;; 24/09/2023
 26475                                  	;; ax=0
 26476                                  	;adc	[HIGH_SECTOR],ax ; 0
 26477                                  	; 24/09/2023
 26478 00004964 42                      	inc	dx
 26479 00004965 7504                    	jnz	short loop_zerodir
 26480 00004967 FF06[0706]              	inc	word [HIGH_SECTOR]
 26481                                  loop_zerodir:
 26482 0000496B E2C0                            LOOP    ZERODIR
 26483                                  
 26484 0000496D A1[4803]                        MOV     AX,[LASTENT]
 26485 00004970 40                              INC     AX
 26486                                  	; 24/09/2023
 26487                                  	; cf=0
 26488                                  	;CLC
 26489 00004971 C3                              retn
 26490                                  
 26491                                  ;--------------------------------------------------------------------------
 26492                                  ;
 26493                                  ; Procedure Name : SETDOTENT
 26494                                  ;
 26495                                  ; set up a . or .. directory entry for a directory.
 26496                                  ;
 26497                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26498                                  ;               AX contains ". " or ".."
 26499                                  ;               DX contains first cluster of entry
 26500                                  ;
 26501                                  ;----------------------------------------------------------------------------
 26502                                  
 26503                                  SETDOTENT:
 26504                                  ;	Fill in name field
 26505 00004972 AB                              STOSW
 26506 00004973 B90400                          MOV     CX,4
 26507 00004976 B82020                          MOV     AX,"  " ; 2020h
 26508 00004979 F3AB                            REP     STOSW
 26509 0000497B AA                              STOSB
 26510                                  
 26511                                  ;	Set up attribute
 26512                                  	;mov	al, 10h
 26513 0000497C B010                            MOV     AL,attr_directory
 26514 0000497E AA                              STOSB
 26515                                  
 26516                                  ;	Initialize time and date of creation
 26517 0000497F 83C70A                          ADD     DI,10
 26518 00004982 8B36[9E05]                      MOV     SI,[THISSFT]
 26519                                  	;mov	ax,[si+0Dh]
 26520 00004986 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26521 00004989 AB                              STOSW
 26522                                  	;mov	ax,[si+0Fh]
 26523 0000498A 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26524 0000498D AB                      	STOSW
 26525                                  
 26526                                  ;	Set up first cluster field
 26527 0000498E 89D0                            MOV     AX,DX
 26528 00004990 AB                              STOSW
 26529                                  
 26530                                  ;	0 file size
 26531 00004991 31C0                            XOR     AX,AX
 26532 00004993 AB                              STOSW
 26533 00004994 AB                              STOSW
 26534 00004995 C3                              retn
 26535                                  
 26536                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26537                                  ;---------------------------------------------------------------------------
 26538                                  ;
 26539                                  ; Procedure Name : MakeNode
 26540                                  ;
 26541                                  ; Inputs:
 26542                                  ;       AL - attribute to create
 26543                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26544                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26545                                  ;               (AH ignored on dirs and devices)
 26546                                  ;
 26547                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26548                                  ;               a name already existant is ALWAYS an error in these cases.
 26549                                  ;
 26550                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26551                                  ;               terminated)
 26552                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26553                                  ;               ( = -1 if current dir not involved, else
 26554                                  ;                Points to first char after last "/" of current dir part)
 26555                                  ;       [THISCDS] Points to CDS being used
 26556                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26557                                  ; Function:
 26558                                  ;       Make a new node
 26559                                  ; Outputs:
 26560                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26561                                  ;       CARRY SET IF ERROR
 26562                                  ;          AX = 1 A node by this name exists and is a directory
 26563                                  ;          AX = 2 A new node could not be created
 26564                                  ;          AX = 3 A node by this name exists and is a disk file
 26565                                  ;               (AH was NZ on input)
 26566                                  ;          AX = 4 Bad Path
 26567                                  ;               SI return from GetPath maintained
 26568                                  ;          AX = 5 Attribute mismatch
 26569                                  ;          AX = 6 Sharing Violation
 26570                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26571                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26572                                  ;       ELSE
 26573                                  ;          AX = 0 Disk Node
 26574                                  ;          AX = 3 Device Node (error in some cases)
 26575                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26576                                  ;               containing new node.
 26577                                  ;          [CURBUF+2]:BX Points to entry
 26578                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26579                                  ;          [THISSFT] is filled in
 26580                                  ;               sf_mode = unchanged.
 26581                                  ;          Attribute byte in entry is input AL
 26582                                  ; DS preserved, others destroyed
 26583                                  ;
 26584                                  ;-------------------------------------------------------------------------
 26585                                  
 26586                                  ; 19/05/2019 - Retro DOS v4.0
 26587                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26588                                  
 26589                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26590                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26591                                  
 26592                                  MakeNode:
 26593                                  	;mov	word [CREATING],0E5FFh
 26594 00004996 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26595 0000499C 50                              PUSH    AX              ; Save AH value
 26596 0000499D C606[4C03]00            	MOV	byte [NoSetDir],0
 26597 000049A2 A2[6D05]                	MOV	[SATTRIB],AL
 26598 000049A5 E887F5                  	call	GetPathNoSet
 26599 000049A8 88CA                            MOV     DL,CL           ; Save CL info
 26600 000049AA 89C1                            MOV     CX,AX           ; Device ID to CH
 26601 000049AC 58                              POP     AX              ; Get back AH
 26602 000049AD 732E                            JNC	short make_exists ; File existed
 26603 000049AF 7505                            JNZ	short make_err_4 ; Path bad
 26604 000049B1 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26605 000049B4 7406                            JZ	short make_type	; Name simply not found, and no metas
 26606                                  make_err_4:
 26607 000049B6 B004                            MOV     AL,4            ; case 1 bad path
 26608                                  make_err_ret:
 26609 000049B8 30E4                            XOR     AH,AH
 26610 000049BA F9                              STC
 26611                                  ;make_retn:	; 22/11/2022
 26612 000049BB C3                              retn
 26613                                  
 26614                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26615                                  RENAME_MAKE:
 26616                                  make_type:
 26617                                  ;Extended Open hooks
 26618                                  	; MSDOS 6.0
 26619                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26620 000049BC F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26621 000049C1 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26622 000049C3 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26623                                  					;FT. set for extended open ;AN000;
 26624                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26625 000049C8 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26626 000049CD 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26627 000049CF F9                      	STC				;FT. set carry			;AN000;
 26628 000049D0 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26629                                  	; 22/11/2022
 26630                                  make_retn:
 26631                                  	;return
 26632 000049D3 C3                      	retn				;FT.				;AN000;
 26633                                  
 26634                                  ;	Extended Open hooks
 26635                                  
 26636                                  make_type2:
 26637 000049D4 C43E[9E05]                      LES     DI,[THISSFT]
 26638 000049D8 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26639 000049DA F9                              STC                     ; Not found
 26640 000049DB EB5A                            JMP     short make_new
 26641                                  
 26642                                  ; The node exists. It may be either a device, directory or file:
 26643                                  ;   Zero set => directory
 26644                                  ;   High bit of CH on => device
 26645                                  ;   else => file
 26646                                  
 26647                                  make_exists:
 26648 000049DD 7448                            JZ	short make_exists_dir
 26649 000049DF B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26650                                  	;test	byte [ATTRIB],18h
 26651 000049E1 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26652 000049E6 753B                            JNZ	short make_err_ret_5
 26653                                  				; Cannot already exist as Disk or Device Node
 26654                                                                  ;       if making DIR or Volume ID
 26655 000049E8 08ED                            OR      CH,CH
 26656 000049EA 781A                            JS	short make_share ; No further checks on attributes if device
 26657 000049EC 08E4                            OR      AH,AH
 26658 000049EE 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26659 000049F0 51                              PUSH    CX              ; Save device ID
 26660 000049F1 8E06[E405]                      MOV     ES,[CURBUF+2]
 26661                                  	;mov	ch,[es:bx+0Bh]
 26662 000049F5 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26663                                  	;test	ch,1
 26664 000049F9 F6C501                  	test	CH,attr_read_only
 26665 000049FC 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26666 000049FE E8D0F7                  	call	MatchAttributes
 26667 00004A01 59                              POP     CX              ; Devid back in CH
 26668 00004A02 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26669 00004A04 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26670                                  make_share:
 26671 00004A06 30E4                            XOR     AH,AH
 26672 00004A08 50                              PUSH    AX              ; Save Disk or Device node
 26673 00004A09 51                              PUSH    CX              ; Save Device ID
 26674 00004A0A 88EC                            MOV     AH,CH           ; Device ID to AH
 26675 00004A0C E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 26676 00004A0F C43E[9E05]                      LES     DI,[THISSFT]
 26677 00004A13 56                      	push	si
 26678 00004A14 53                      	push	bx		; Save CURBUF pointers
 26679 00004A15 E86729                  	call	ShareEnter
 26680 00004A18 735A                            jnc	short MakeEndShare
 26681                                  
 26682                                  ; User failed request.
 26683 00004A1A 5B                      	pop	bx
 26684 00004A1B 5E                      	pop	si
 26685 00004A1C 59                      	pop	cx
 26686 00004A1D 58                      	pop	ax
 26687                                  
 26688                                  Make_Share_ret:
 26689 00004A1E B006                            MOV     AL,6
 26690 00004A20 EB96                            JMP	short make_err_ret
 26691                                  
 26692                                  make_err_ret_5P:
 26693 00004A22 59                              POP     CX              ; Get back device ID
 26694                                  make_err_ret_5:
 26695 00004A23 B005                            MOV     AL,5            ; Attribute mismatch
 26696                                          ; 22/11/2022
 26697 00004A25 EB91                    	JMP     short make_err_ret
 26698                                  
 26699                                  make_exists_dir:
 26700 00004A27 B001                            MOV     AL,1            ; exists as directory, always an error
 26701                                  	; 22/11/2022
 26702 00004A29 EB8D                    	JMP     short make_err_ret
 26703                                  
 26704                                  make_save:
 26705 00004A2B 50                              PUSH    AX              ; Save whether Disk or File
 26706 00004A2C 89C8                            MOV     AX,CX           ; Device ID to AH
 26707 00004A2E E87400                          CALL    NEWENTRY
 26708 00004A31 58                              POP     AX              ; 0 if Disk, 3 if File
 26709 00004A32 739F                            jnc	short make_retn
 26710 00004A34 B002                            MOV     AL,2            ; create failed case 2
 26711                                  make_save_retn:
 26712 00004A36 C3                              retn
 26713                                  
 26714                                  make_new:
 26715 00004A37 E8F1FF                          call    make_save
 26716 00004A3A 72FA                            jc	short make_save_retn	; case 2 fail
 26717                                  	;test	byte [ATTRIB],10h
 26718 00004A3C F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26719 00004A41 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26720                                  					; so don't tell the sharer about them
 26721 00004A43 50                      	push	ax
 26722 00004A44 53                      	push	bx
 26723 00004A45 56                      	push	si		
 26724 00004A46 E83629                          call	ShareEnter
 26725 00004A49 5E                      	pop	si
 26726 00004A4A 5B                      	pop	bx
 26727 00004A4B 58                      	pop	ax
 26728 00004A4C 73E8                    	jnc	short make_save_retn
 26729                                  
 26730                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26731                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26732                                  ; possible: delete the newly created directory entry and return share_error.
 26733                                  
 26734 00004A4E 50                              PUSH    AX
 26735 00004A4F C43E[E205]                      LES     DI,[CURBUF]
 26736                                  	;mov	byte [es:bx],0E5h
 26737 00004A53 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26738                                  	
 26739                                  	; MSDOS 6.0
 26740                                  	;test	byte [es:di+5],40h
 26741 00004A57 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26742                                  					;LB. if already dirty		  ;AN000;
 26743 00004A5C 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26744                                  	; 22/11/2022
 26745 00004A5E E8FB10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26746                                  	;or	byte [es:di+5],40h
 26747 00004A61 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26748                                  yesdirty8:
 26749 00004A66 C42E[8A05]                      LES     BP,[THISDPB]
 26750                                  	; 15/12/2022
 26751 00004A6A 268A4600                        mov	al,[ES:BP]
 26752                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26753                                  	;;mov	al,[es:bp+0]
 26754                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26755 00004A6E E8E60F                          call	FLUSHBUF		; write out buffer.
 26756 00004A71 58                              POP     AX
 26757 00004A72 EBAA                            jmp	short Make_Share_ret
 26758                                  
 26759                                  ; We have found an existing file. We have also entered it into the share set.
 26760                                  ; At this point we need to call newentry to correctly address the problem of
 26761                                  ; getting rid of old data (create an existing file) or creating a new
 26762                                  ; directory entry (create a new file). Unfortunately, this operation may
 26763                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26764                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26765                                  ; the share set now, do the operation and then reassert the share access.
 26766                                  ;
 26767                                  ; We are allowed to do this! There is no window! After all, we are in
 26768                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26769                                  
 26770                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26771                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26772                                  
 26773                                  MakeEndShare:
 26774 00004A74 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26775 00004A78 31C0                            XOR     AX,AX
 26776 00004A7A E895C8                  	call	ECritSFT
 26777 00004A7D 268705                  	xchg	AX,[ES:DI]
 26778                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26779 00004A80 50                      	push	ax
 26780 00004A81 57                      	push	di
 26781 00004A82 06                      	push	es
 26782 00004A83 9C                              PUSHF
 26783 00004A84 E8F328                          call	ShareEnd                ; remove sharing
 26784 00004A87 9D                              POPF
 26785 00004A88 07                      	pop	es
 26786 00004A89 5F                      	pop	di
 26787 00004A8A 268F05                          pop	word [ES:DI]	
 26788                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26789 00004A8D E89DC8                  	call	LCritSFT
 26790                                  	; 22/11/2022
 26791                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26792 00004A90 5B                      	pop	bx
 26793 00004A91 5E                      	pop	si
 26794 00004A92 59                      	pop	cx
 26795 00004A93 58                      	pop	ax
 26796 00004A94 E894FF                          CALL    make_save
 26797                                  
 26798                                  ; If the user failed, we do not reenter into the sharing set.
 26799                                  
 26800 00004A97 729D                            jc	short make_save_retn	; bye if error
 26801 00004A99 50                      	push	ax
 26802 00004A9A 53                      	push	bx
 26803 00004A9B 56                      	push	si
 26804 00004A9C 9C                              PUSHF
 26805 00004A9D E8DF28                          call	ShareEnter
 26806 00004AA0 9D                              POPF
 26807 00004AA1 5E                      	pop	si
 26808 00004AA2 5B                      	pop	bx
 26809 00004AA3 58                      	pop	ax
 26810                                  
 26811                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26812                                  
 26813                                  makeendshare_retn:
 26814 00004AA4 C3                              retn
 26815                                  
 26816                                  ;---------------------------------------------------------------------------
 26817                                  ;
 26818                                  ; Procedure Name : NEWENTRY
 26819                                  ;
 26820                                  ; Inputs:
 26821                                  ;       [THISSFT] set
 26822                                  ;       [THISDPB] set
 26823                                  ;       [LASTENT] current last valid entry number in directory if no free
 26824                                  ;               entries
 26825                                  ;       [VOLID] set if a volume ID was found during search
 26826                                  ;	Attrib Contains attributes for new file
 26827                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26828                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26829                                  ;               NC means file existed (device)
 26830                                  ;               C  means file did not exist
 26831                                  ;       AH = Device ID byte
 26832                                  ;       If FILE
 26833                                  ;           [CURBUF+2]:BX points to start of directory entry
 26834                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26835                                  ;       If device
 26836                                  ;           DS:BX points to start of "fake" directory entry
 26837                                  ;           DS:SI points to dir_first of "fake" directory entry
 26838                                  ;               (has DWORD pointer to device header)
 26839                                  ; Function:
 26840                                  ;       Make a new directory entry
 26841                                  ;       If an old one existed it is truncated first
 26842                                  ; Outputs:
 26843                                  ;       Carry set if error
 26844                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26845                                  ;               vol ID, user FAILed to I 24
 26846                                  ;       else
 26847                                  ;               outputs of DOOPEN
 26848                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26849                                  ;
 26850                                  ;----------------------------------------------------------------------------
 26851                                  
 26852                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26853                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26854                                  
 26855                                  NEWENTRY:
 26856 00004AA5 C42E[8A05]              	LES     BP,[THISDPB]
 26857 00004AA9 7315                            JNC	short EXISTENT	
 26858 00004AAB 803E[4A03]00                    CMP     byte [FAILERR],0
 26859                                  	;STC
 26860                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 26861                                          ; 24/09/2023
 26862 00004AB0 750C                    	jnz	short ERRRET3
 26863 00004AB2 E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 26864 00004AB5 72ED                            jc	short makeendshare_retn	; Failed
 26865 00004AB7 E8E3F3                          call	GETENT          ; Point at that free entry
 26866 00004ABA 72E8                            jc	short makeendshare_retn	; Failed
 26867 00004ABC EB0E                            JMP     SHORT FREESPOT
 26868                                  
 26869                                  ERRRET3:
 26870 00004ABE F9                              STC
 26871                                  newentry_retn:
 26872 00004ABF C3                              retn
 26873                                  
 26874                                  EXISTENT:
 26875 00004AC0 08E4                            OR      AH,AH           ; Check if file is I/O device
 26876 00004AC2 7903                            JNS	short NOT_DEV1
 26877 00004AC4 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26878                                  
 26879                                  NOT_DEV1:
 26880 00004AC7 E82901                          call	FREEENT		; Free cluster chain
 26881 00004ACA 72F3                            jc	short newentry_retn ; Failed
 26882                                  FREESPOT:
 26883                                  	;test	byte [ATTRIB],8
 26884 00004ACC F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26885 00004AD1 7407                            JZ	short NOTVOLID
 26886 00004AD3 803E[7B05]00                    CMP     BYTE [VOLID],0
 26887 00004AD8 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26888                                  NOTVOLID:
 26889 00004ADA 8E06[E405]                      MOV     ES,[CURBUF+2]
 26890 00004ADE 89DF                            MOV     DI,BX
 26891                                  
 26892 00004AE0 BE[4B05]                        MOV     SI,NAME1
 26893                                  
 26894 00004AE3 B90500                          MOV     CX,5
 26895 00004AE6 F3A5                            REP     MOVSW
 26896 00004AE8 A4                              MOVSB                   ; Move name into dir entry
 26897 00004AE9 A0[6B05]                	MOV	AL,[ATTRIB]
 26898 00004AEC AA                      	STOSB                   ; Attributes
 26899                                  
 26900                                  ;; File Tagging for Create DOS 4.00
 26901 00004AED B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26902                                  ;; File Tagging for Create DOS 4.00
 26903                                  
 26904 00004AEF 31C0                            XOR     AX,AX
 26905 00004AF1 F3AB                            REP     STOSW           ; Zero pad
 26906 00004AF3 E8FFBF                          call	DATE16
 26907 00004AF6 92                              XCHG    AX,DX
 26908 00004AF7 AB                              STOSW                   ; dir_time
 26909 00004AF8 92                              XCHG    AX,DX
 26910 00004AF9 AB                              STOSW                   ; dir_date
 26911 00004AFA 31C0                            XOR     AX,AX
 26912 00004AFC 57                              PUSH    DI              ; Correct SI input value
 26913                                  				; 	(recomputed for new buffer)
 26914 00004AFD AB                              STOSW                   ; Zero dir_first and size
 26915 00004AFE AB                              STOSW
 26916 00004AFF AB                              STOSW
 26917                                  updnxt:
 26918 00004B00 8B36[E205]              	MOV	SI,[CURBUF]
 26919                                  
 26920                                  	; 19/05/2019 - Retro DOS v4.0
 26921                                  
 26922                                  	; MSDOS 6.0
 26923 00004B04 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26924                                  				;LB. if already dirty		  ;AN000;
 26925 00004B09 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26926 00004B0B E84E10                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26927                                          
 26928                                  	;or	byte [es:si+5],40h
 26929 00004B0E 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26930                                  yesdirty9:
 26931 00004B13 C42E[8A05]                      LES     BP,[THISDPB]
 26932                                  	; 15/12/2022
 26933 00004B17 268A4600                	MOV	AL,[ES:BP]
 26934                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26935                                  	;;mov	al,[es:bp+0]
 26936                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26937 00004B1B 50                              PUSH    AX
 26938 00004B1C 53                              PUSH    BX
 26939                                  
 26940                                  ; If we have a file, we need to increment the open ref. count so that
 26941                                  ; we have some protection against invalid media changes if an Int 24
 26942                                  ; error occurs.
 26943                                  ; Do nothing for a device.
 26944                                  
 26945 00004B1D 06                      	push	es
 26946 00004B1E 57                      	push	di
 26947 00004B1F C43E[9E05]                      LES     DI,[THISSFT]
 26948                                  	;test	word [es:di+5],80h
 26949                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26950 00004B23 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26951 00004B28 751A                            jnz	short GotADevice
 26952 00004B2A 1E                      	push	ds
 26953 00004B2B 53                      	push	bx
 26954 00004B2C C51E[8A05]                      LDS     BX,[THISDPB]
 26955                                  	;mov	[es:di+7],bx
 26956 00004B30 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26957 00004B34 8CDB                            MOV     BX,DS
 26958                                  	;mov	[es:di+9],bx
 26959 00004B36 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26960 00004B3A 5B                      	pop	bx
 26961 00004B3B 1F                      	pop	ds ; need to use DS for segment later on
 26962 00004B3C E8B8FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26963 00004B3F C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26964                                  GotADevice:
 26965 00004B44 5F                      	pop	di
 26966 00004B45 07                      	pop	es
 26967                                  
 26968 00004B46 E80E0F                          call	FLUSHBUF
 26969 00004B49 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26970 00004B4C 5B                              POP     BX
 26971 00004B4D 58                              POP     AX
 26972 00004B4E 5E                              POP     SI              ; Get SI input back
 26973 00004B4F 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26974 00004B51 7301                    	jnc	short DOOPEN    ; Failed
 26975 00004B53 C3                      	retn
 26976                                  	
 26977                                  ;NOTE FALL THROUGH
 26978                                  
 26979                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26980                                  
 26981                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26982                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26983                                  
 26984                                  ; DOOPEN
 26985                                  ;----------------------------------------------------------------------------
 26986                                  ;
 26987                                  ; Inputs:
 26988                                  ;       [THISDPB] points to DPB if file
 26989                                  ;       [THISSFT] points to SFT being used
 26990                                  ;       AH = Device ID byte
 26991                                  ;       If FILE
 26992                                  ;           [CURBUF+2]:BX points to start of directory entry
 26993                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26994                                  ;       If device
 26995                                  ;           DS:BX points to start of "fake" directory entry
 26996                                  ;           DS:SI points to dir_first of "fake" directory entry
 26997                                  ;               (has DWORD pointer to device header)
 26998                                  ; Function:
 26999                                  ;       Fill in SFT from dir entry
 27000                                  ; Outputs:
 27001                                  ;       CARRY CLEAR
 27002                                  ;       sf_ref_count and sf_mode fields not altered
 27003                                  ;       sf_flags high byte = 0
 27004                                  ;       sf_flags low byte = AH except
 27005                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27006                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27007                                  ;       sf_position = 0
 27008                                  ;       If device
 27009                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27010                                  ;           sf_size = 0
 27011                                  ;       If file
 27012                                  ;           sf_firclus sf_size set from entry
 27013                                  ;           sf_devptr = [THISDPB]
 27014                                  ;           sf_cluspos = 0
 27015                                  ;           sf_lstclus = sf_firclus
 27016                                  ;           sf_dirsec sf_dirpos set
 27017                                  ; DS,SI,BX preserved, others destroyed
 27018                                  ;
 27019                                  ;----------------------------------------------------------------------------
 27020                                  
 27021                                  	;entry	DOOPEN
 27022                                  DOOPEN:
 27023                                  ;	Generate and store attribute
 27024                                  
 27025 00004B54 88E6                            MOV     DH,AH           ; AH to different place
 27026 00004B56 C43E[9E05]                      LES     DI,[THISSFT]
 27027                                  	;add	di,4
 27028 00004B5A 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27029                                  	; 24/09/2023
 27030 00004B5D 31C0                    	xor	ax,ax
 27031                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27032                                  				;   attribute of 0 (for R/O testing etc).
 27033 00004B5F 08F6                            OR      DH,DH           ; See if our assumption good.
 27034 00004B61 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27035 00004B63 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27036                                  	;mov	al,[BX+0Bh]
 27037 00004B67 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27038                                  				; If file, get attrib from dir entry
 27039                                  DEV_SFT1:
 27040 00004B6A AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27041                                  
 27042                                  ;	Generate and store flags word
 27043                                  
 27044                                  	; 24/09/2023
 27045                                  	;XOR	AX,AX
 27046                                          ; ah=0
 27047 00004B6B 88F0                    	MOV     AL,DH
 27048                                  	;or	al,40h
 27049 00004B6D 0C40                            OR      AL,devid_file_clean
 27050 00004B6F AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27051                                  
 27052                                  ;	Generate and store device pointer
 27053                                  
 27054 00004B70 1E                              PUSH    DS
 27055                                  	;lds	ax,[bx+1Ah]
 27056 00004B71 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27057 00004B74 08F6                            OR      DH,DH
 27058 00004B76 7805                            JS	short DEV_SFT2
 27059                                  
 27060                                  ;hkn; SS override
 27061 00004B78 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27062                                  DEV_SFT2:
 27063 00004B7D AB                              STOSW 			; store offset
 27064 00004B7E 8CD8                            MOV     AX,DS
 27065 00004B80 1F                              POP     DS
 27066 00004B81 AB                      	STOSW			; store segment
 27067                                  				; ES:DI -> sf_firclus
 27068                                  
 27069                                  ;	Generate pointer to, generate and store first cluster 
 27070                                  ;	(irrelevant for devices)
 27071                                  
 27072 00004B82 56                              PUSH    SI              ; Save pointer to dir_first
 27073 00004B83 A5                              MOVSW                   ; dir_first -> sf_firclus
 27074                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27075                                  
 27076                                  ;	Copy time/date of last modification
 27077                                  
 27078                                  	;sub	si,6
 27079 00004B84 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27080                                  				; DS:SI->dir_time
 27081 00004B87 A5                              MOVSW                   ; dir_time -> sf_time
 27082                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27083 00004B88 A5                              MOVSW                   ; dir_date -> sf_date
 27084                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27085                                  
 27086                                  ;	Generate and store file size (0 for devices)
 27087                                  
 27088 00004B89 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27089 00004B8A AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27090 00004B8B 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27091 00004B8D AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27092 00004B8E 08F6                            OR      DH,DH
 27093 00004B90 7904                            JNS	short FILE_SFT1
 27094 00004B92 31C0                            XOR     AX,AX
 27095 00004B94 89C1                            MOV     CX,AX           ; Devices are open ended
 27096                                  FILE_SFT1:
 27097 00004B96 91                              XCHG    AX,CX
 27098 00004B97 AB                              STOSW                   ; Low word of sf_size
 27099 00004B98 91                              XCHG    AX,CX
 27100 00004B99 AB                              STOSW                   ; High word of sf_size
 27101                                                                  ; ES:DI -> sf_position
 27102                                  ; Initialize position to 0
 27103                                  
 27104 00004B9A 31C0                            XOR     AX,AX
 27105 00004B9C AB                              STOSW
 27106 00004B9D AB                              STOSW                   ; sf_position
 27107                                                                  ; ES:DI -> sf_cluspos
 27108                                  
 27109                                  ; Generate cluster optimizations for files
 27110                                  
 27111 00004B9E 08F6                            OR      DH,DH
 27112 00004BA0 7843                            JS	short DEV_SFT3
 27113 00004BA2 AB                              STOSW                   ; sf_cluspos ; 19h
 27114                                  	;mov	ax,[bx+1Ah]
 27115 00004BA3 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27116                                  	; 19/05/2019
 27117                                  	; MSDOS 3.3
 27118                                  	;STOSW 			; sf_lstclus ; 1Bh
 27119                                  	; MSDOS 6.0
 27120 00004BA6 57                              PUSH	DI              ;AN004; save dirsec offset
 27121                                  	;sub	di,1Bh
 27122 00004BA7 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27123                                  	;mov	[es:di+35h],ax
 27124 00004BAA 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27125 00004BAE 5F                              POP	DI              ;AN004; restore dirsec offset
 27126                                  
 27127                                  ; DOS 3.3  FastOpen  6/13/86
 27128                                  
 27129 00004BAF 1E                      	PUSH	DS
 27130                                  
 27131                                  ;hkn; SS is DOSDATA
 27132 00004BB0 16                      	push	ss
 27133 00004BB1 1F                      	pop	ds
 27134                                  	;test	byte [FastOpenFlg],4
 27135 00004BB2 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27136 00004BB7 7411                    	JZ	short Not_FastOpen
 27137                                  
 27138                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27139 00004BB9 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27140                                  
 27141                                  	;mov	ax,[si+1]
 27142 00004BBC 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27143 00004BBF AB                              STOSW                   ; sf_dirsec
 27144                                  	; MSDOS 6.0
 27145                                  	;mov	ax,[si+3]
 27146 00004BC0 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27147                                  				;;; changed for >32mb
 27148 00004BC3 AB                              STOSW                   ; sf_dirsec
 27149                                  	; 19/08//2018
 27150 00004BC4 8A04                    	mov	al,[SI]
 27151                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27152 00004BC6 AA                              STOSB                   ; sf_dirpos
 27153 00004BC7 1F                              POP	DS
 27154                                          ;JMP	short Next_Name
 27155                                  	; 24/09/2023
 27156 00004BC8 EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27157                                  
 27158                                  ; DOS 3.3  FastOpen  6/13/86
 27159                                  
 27160                                  Not_FastOpen:
 27161                                          ;POP     DS		; normal path
 27162                                  
 27163                                  ;hkn; SS override
 27164                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27165                                  	; 16/12/2022
 27166                                  	; 28/07/2019
 27167 00004BCA 8B36[E205]              	mov	si,[CURBUF]
 27168 00004BCE 1F                      	pop	ds
 27169                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27170                                  	;pop	ds
 27171                                  	;mov	si,[ss:CURBUF]
 27172                                  	
 27173                                  	;mov	ax,[si+6]
 27174 00004BCF 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27175 00004BD2 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27176                                  	; 19/05/2019        
 27177                                  	; MSDOS 6.0
 27178                                  	;mov	ax,[si+8]
 27179 00004BD3 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27180 00004BD6 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27181                                          
 27182 00004BD7 89D8                    	MOV     AX,BX
 27183                                  	;;add	si,16	; MSDOS 3.3	
 27184                                  	;add	si,20	; MSDOS 6.0
 27185 00004BD9 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27186 00004BDC 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27187                                          ;mov	cl,32
 27188 00004BDE B120                    	MOV     CL,dir_entry.size
 27189 00004BE0 F6F1                            DIV     CL
 27190 00004BE2 AA                              STOSB                   ; sf_dirpos
 27191                                  Next_Name:
 27192 00004BE3 EB03                            JMP     SHORT FILE_SFT2
 27193                                  
 27194                                  	; 24/09/2023
 27195                                  	; cf=0 (after 'or' instruction)
 27196                                  DEV_SFT3:
 27197                                  	;add	di,7
 27198 00004BE5 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27199                                  FILE_SFT2:
 27200                                  
 27201                                  ; Copy in the object's name
 27202                                  
 27203 00004BE8 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27204 00004BEA B90B00                          MOV     CX,11
 27205 00004BED F3A4                            REP     MOVSB           ; sf_name
 27206 00004BEF 5E                              POP     SI              ; recover DS:SI -> dir_first
 27207                                  
 27208                                  ;hkn; SS is DOSDATA
 27209 00004BF0 16                              push	ss
 27210 00004BF1 1F                      	pop	ds
 27211                                  	; 24/09/2023
 27212                                  	; cf=0
 27213                                          ;CLC
 27214 00004BF2 C3                              retn
 27215                                  
 27216                                  ;---------------------------------------------------------------------------
 27217                                  ;
 27218                                  ; Procedure Name : FREEENT
 27219                                  ;
 27220                                  ; Inputs:
 27221                                  ;       ES:BP -> DPB
 27222                                  ;       [CURBUF] Set
 27223                                  ;       [CURBUF+2]:BX points to directory entry
 27224                                  ;       [CURBUF+2]:SI points to above dir_first
 27225                                  ; Function:
 27226                                  ;       Free the cluster chain for the entry if present
 27227                                  ; Outputs:
 27228                                  ;       Carry set if error (currently user FAILed to I 24)
 27229                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27230                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27231                                  ;---------------------------------------------------------------------------
 27232                                  
 27233                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27234                                  FREEENT:
 27235 00004BF3 1E                              PUSH    DS
 27236 00004BF4 C53E[E205]                      LDS     DI,[CURBUF]
 27237 00004BF8 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27238                                  	; 19/05/2019 - Retro DOS v4.0
 27239                                  	; MSDOS 6.0
 27240 00004BFA 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27241                                  ;hkn; SS override
 27242 00004BFD 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27243 00004C02 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27244 00004C05 1F                              POP     DS
 27245 00004C06 83F902                  	CMP	CX,2
 27246 00004C09 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27247                                  	;cmp	cx,[es:bp+0Dh]
 27248 00004C0B 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27249 00004C0F 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27250 00004C11 29FB                            SUB     BX,DI
 27251 00004C13 53                              PUSH    BX              ; Save offset
 27252 00004C14 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27253 00004C18 52                              PUSH    DX              ; Save sector number
 27254 00004C19 89CB                            MOV     BX,CX
 27255 00004C1B E8AC02                          call	RELEASE         ; Free any data allocated
 27256 00004C1E 5A                              POP     DX
 27257 00004C1F 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27258 00004C23 7302                            JNC	short GET_BUF_BACK
 27259 00004C25 5B                              POP     BX
 27260                                  freeent_retn:
 27261 00004C26 C3                              retn			; Screw up
 27262                                  
 27263                                  GET_BUF_BACK:
 27264                                  	; 22/09/2023
 27265                                  	;;mov	byte [ALLOWED],18h
 27266                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27267                                          ;XOR	AL,AL ; *
 27268                                  	;call	GETBUFFR        ; Get sector back
 27269 00004C27 E8290D                  	call	GETBUFFER ; * ; pre read  
 27270                                  
 27271 00004C2A 5B                              POP     BX              ; Get offset back
 27272 00004C2B 72F9                            jc	short freeent_retn
 27273 00004C2D E8AFEA                  	call	SET_BUF_AS_DIR
 27274 00004C30 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27275 00004C34 89DE                            MOV     SI,BX
 27276                                  	;add	si,1Ah
 27277 00004C36 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27278                                  RET1:
 27279 00004C39 F8                              CLC
 27280 00004C3A C3                              retn
 27281                                  
 27282                                  ;---------------------------------------------------------------------------
 27283                                  ;
 27284                                  ; Procedure Name : CHECK_VIRT_OPEN
 27285                                  ;
 27286                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27287                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27288                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27289                                  ; flag [VIRTUAL_OPEN].
 27290                                  ; No registers affected (including flags).
 27291                                  ; On input, [THISSFT] points to current SFT.
 27292                                  ;
 27293                                  ;---------------------------------------------------------------------------
 27294                                  
 27295                                  CHECK_VIRT_OPEN:
 27296 00004C3B 50                      	PUSH    AX
 27297 00004C3C 9F                              lahf                    ; preserve flags
 27298 00004C3D 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27299 00004C42 7410                            JZ	short ALL_CLOSED
 27300 00004C44 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27301 00004C49 06                      	push	es
 27302 00004C4A 57                      	push	di
 27303 00004C4B C43E[9E05]                      LES     DI,[THISSFT]
 27304 00004C4F E8ADF9                          call	DEV_CLOSE_SFT
 27305 00004C52 5F                      	pop	di
 27306 00004C53 07                      	pop	es
 27307                                  
 27308                                  ALL_CLOSED:
 27309 00004C54 9E                              sahf                    ; restore flags
 27310 00004C55 58                              POP     AX
 27311 00004C56 C3                              retn
 27312                                  
 27313                                  ;============================================================================
 27314                                  ; ROM.ASM, MSDOS 6.0, 1991
 27315                                  ;============================================================================
 27316                                  ; 29/07/2018 - Retro DOS v3.0
 27317                                  ; 20/05/2019 - Retro DOS v4.0
 27318                                  
 27319                                  ;	TITLE	ROM - Miscellaneous routines
 27320                                  ;	NAME	ROM
 27321                                  
 27322                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27323                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27324                                  ;
 27325                                  ;	SKPCLP
 27326                                  ;	FNDCLUS
 27327                                  ;	BUFSEC
 27328                                  ;	BUFRD
 27329                                  ;	BUFWRT
 27330                                  ;	NEXTSEC
 27331                                  ;	OPTIMIZE
 27332                                  ;	FIGREC
 27333                                  ;	ALLOCATE
 27334                                  ;	RESTFATBYT
 27335                                  ;	RELEASE
 27336                                  ;	RELBLKS
 27337                                  ;	GETEOF
 27338                                  ;
 27339                                  ;	Modification history:
 27340                                  ;
 27341                                  ;		Created: ARR 30 March 1983
 27342                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27343                                  
 27344                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27345                                  ;--------------------------------------------------------------------------
 27346                                  ;
 27347                                  ; Procedure Name : FNDCLUS
 27348                                  ;
 27349                                  ; Inputs:
 27350                                  ;       CX = No. of clusters to skip
 27351                                  ;       ES:BP = Base of drive parameters
 27352                                  ;       [THISSFT] point to SFT
 27353                                  ; Outputs:
 27354                                  ;       BX = Last cluster skipped to
 27355                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27356                                  ;       DX = Position of last cluster
 27357                                  ;       Carry set if error (currently user FAILed to I 24)
 27358                                  ; DI destroyed. No other registers affected.
 27359                                  ;--------------------------------------------------------------------------
 27360                                  
 27361                                  ; 20/05/2019 - Retro DOS v4.0
 27362                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27363                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27364                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27365                                  
 27366                                  FNDCLUS:
 27367 00004C57 06                      	PUSH	ES
 27368 00004C58 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27369                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27370                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27371 00004C5C 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27372                                  	;mov	dx,[es:di+19h]
 27373 00004C60 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27374 00004C64 09DB                    	OR	BX,BX
 27375 00004C66 7424                    	JZ	short NOCLUS
 27376                                  
 27377 00004C68 29D1                            SUB     CX,DX
 27378 00004C6A 7308                            JNB	short FINDIT
 27379                                  
 27380 00004C6C 01D1                            ADD     CX,DX
 27381 00004C6E 31D2                            XOR     DX,DX
 27382                                  	;mov	bx,[es:di+0Bh]
 27383 00004C70 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27384                                  FINDIT:
 27385 00004C74 07                              POP	ES
 27386 00004C75 E313                    	JCXZ	RET9
 27387                                  
 27388                                  	;entry	SKPCLP
 27389                                  SKPCLP:
 27390 00004C77 E8CE08                  	call	UNPACK
 27391 00004C7A 7214                            jc	short fndclus_retn	; retc
 27392                                  
 27393                                  	; 09/09/2018
 27394                                  
 27395                                  	; MSDOS 3.3
 27396                                  	;push	bx
 27397                                  	;mov	bx,di
 27398                                  	;call	IsEOF
 27399                                  	;pop	bx	
 27400                                  	;jae	short RET9
 27401                                  
 27402                                  	; 20/05/2019 - Retro DOS v4.0
 27403                                  
 27404                                  	; MSDOS 6.0
 27405 00004C7C 87DF                    	xchg	bx,di
 27406 00004C7E E8B008                  	call	IsEOF
 27407 00004C81 87DF                    	xchg	bx,di
 27408 00004C83 7305                    	jae	short RET9
 27409                                  
 27410 00004C85 87DF                            XCHG    BX,DI
 27411 00004C87 42                              INC     DX
 27412                                  
 27413 00004C88 E2ED                    	LOOP	SKPCLP			; RMFS
 27414                                  RET9:	
 27415 00004C8A F8                      	CLC
 27416 00004C8B C3                              retn
 27417                                  NOCLUS:
 27418 00004C8C 07                              POP	ES
 27419 00004C8D 41                              INC	CX
 27420 00004C8E 4A                              DEC	DX
 27421 00004C8F F8                              CLC
 27422                                  
 27423                                  fndclus_retn:
 27424 00004C90 C3                              retn
 27425                                  
 27426                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27427                                  ;--------------------------------------------------------------------------
 27428                                  ;
 27429                                  ; Procedure Name : BUFSEC
 27430                                  ;
 27431                                  ; Inputs:
 27432                                  ;       AH = priority of buffer
 27433                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27434                                  ;       ES:BP = Base of drive parameters
 27435                                  ;       [CLUSNUM] = Physical cluster number
 27436                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27437                                  ;       [BYTCNT1] = Size of transfer
 27438                                  ; Function:
 27439                                  ;       Insure specified sector is in buffer, flushing buffer before
 27440                                  ;       read if necessary.
 27441                                  ; Outputs:
 27442                                  ;       ES:DI = Pointer to buffer
 27443                                  ;       SI = Pointer to transfer address
 27444                                  ;       CX = Number of bytes
 27445                                  ;       [NEXTADD] updated
 27446                                  ;       [TRANS] set to indicate a transfer will occur
 27447                                  ;       Carry set if error (user FAILed to I 24)
 27448                                  ;--------------------------------------------------------------------------
 27449                                  
 27450                                  BUFSEC:
 27451 00004C91 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27452 00004C95 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27453                                  	;mov	byte [ALLOWED],38h
 27454 00004C99 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27455 00004C9E E85001                          CALL    FIGREC
 27456 00004CA1 E8B60C                  	call	GETBUFFR
 27457 00004CA4 72EA                            jc	short fndclus_retn
 27458                                  
 27459 00004CA6 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27460 00004CAB 8B36[B805]                      MOV     SI,[NEXTADD]
 27461 00004CAF 89F7                            MOV     DI,SI
 27462 00004CB1 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27463 00004CB5 01CF                            ADD     DI,CX
 27464 00004CB7 893E[B805]                      MOV     [NEXTADD],DI
 27465 00004CBB C43E[E205]                      LES     DI,[CURBUF]
 27466                                  	;or	byte [es:di+5],8
 27467 00004CBF 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27468                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27469                                  	;lea	di,[di+20] ; MSDOS 6.0
 27470 00004CC4 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27471 00004CC7 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27472 00004CCB F8                              CLC
 27473 00004CCC C3                              retn
 27474                                  
 27475                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27476                                  
 27477                                  ;---------------------------------------------------------------------------
 27478                                  ;
 27479                                  ; Procedure Name : BUFRD
 27480                                  ;
 27481                                  ; Do a partial sector read via one of the system buffers
 27482                                  ; ES:BP Points to DPB
 27483                                  ; Carry set if error (currently user FAILed to I 24)
 27484                                  ;
 27485                                  ; DS - set to DOSDATA
 27486                                  ;
 27487                                  ;----------------------------------------------------------------------------
 27488                                  
 27489                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27490                                  	; 20/05/2019 - Retro DOS v4.0
 27491                                  BUFRD:
 27492 00004CCD 06                              PUSH	ES
 27493 00004CCE 31C0                            xor	ax, ax			; pre-read sector
 27494 00004CD0 E8BEFF                          CALL    BUFSEC
 27495 00004CD3 7303                            JNC	short BUF_OK
 27496                                  
 27497                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27498 00004CD5 07                              POP	ES
 27499 00004CD6 EB2B                            JMP     SHORT RBUFPLACED
 27500                                  
 27501                                  BUF_OK:
 27502 00004CD8 8CC3                            MOV     BX,ES
 27503 00004CDA 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27504 00004CDE 8EDB                            MOV     DS,BX
 27505 00004CE0 87FE                    	XCHG    DI,SI
 27506 00004CE2 D1E9                            SHR     CX,1
 27507                                  ;M039
 27508                                  	; MSDOS 3.3
 27509                                  	;JNC	short EVENRD
 27510                                  	;MOVSB
 27511                                  ;EVENRD:
 27512                                  	;REP     MOVSW
 27513                                  
 27514                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27515                                  ;       DS:SI-> Source within Buffer.
 27516                                  ;       ES:DI-> Destination within Transfer memory block.
 27517                                  
 27518                                  	; MSDOS 6.0
 27519 00004CE4 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27520                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27521                                  	;rep	movsb                   ;Copy last byte.
 27522                                  	; 16/12/2022
 27523 00004CE6 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27524 00004CE8 A4                      	movsb ; ****
 27525                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27526                                  	;adc	cx,0
 27527                                  	;rep	movsb
 27528                                  ;M039
 27529                                  EVENRD: ; ****
 27530 00004CE9 07                              POP	ES
 27531                                  ;hkn; SS override
 27532 00004CEA 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27533                                  	;;lea	bx,[di+16]
 27534                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27535 00004CEF 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27536 00004CF2 29DE                            SUB     SI,BX                   ; Position in buffer
 27537 00004CF4 E8030C                          call	PLACEBUF
 27538                                  	;cmp	si,[es:bp+2]
 27539 00004CF7 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27540 00004CFB 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27541                                  ;M039
 27542                                  	; MSDOS 3.3
 27543                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27544                                                                          ;  even though it is MRU.
 27545                                          ; MSDOS 6.0
 27546 00004CFD 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27547                                  ;M039					; chucking even though it is MRU.
 27548                                  
 27549                                  RBUFPLACEDC:
 27550 00004D02 F8                              CLC
 27551                                  RBUFPLACED:
 27552 00004D03 16                      	push	ss
 27553 00004D04 1F                      	pop	ds
 27554 00004D05 C3                              retn
 27555                                  
 27556                                  ;----------------------------------------------------------------------------
 27557                                  ;
 27558                                  ; Procedure : BUFWRT
 27559                                  ;
 27560                                  ; Do a partial sector write via one of the system buffers
 27561                                  ; ES:BP Points to DPB
 27562                                  ; Carry set if error (currently user FAILed to I 24)
 27563                                  ;
 27564                                  ; DS - set to DOSDATA
 27565                                  ;
 27566                                  ;----------------------------------------------------------------------------
 27567                                  
 27568                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27569                                  	; 20/05/2019 - Retro DOS v4.0
 27570                                  BUFWRT:
 27571                                          ;MOV     AX,[SECPOS]
 27572                                          ; MSDOS 6.0
 27573                                  	;ADD	AX,1            	; Set for next sector
 27574                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27575                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27576                                          ; 24/09/2023
 27577 00004D06 FF06[C405]              	inc	word [SECPOS]
 27578 00004D0A 7504                    	jnz	short bufw_secpos
 27579 00004D0C FF06[C605]              	inc	word [SECPOS+2]
 27580                                  bufw_secpos:
 27581 00004D10 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27582 00004D13 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27583 00004D17 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27584 00004D19 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27585 00004D1B 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27586 00004D1D A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27587                                  
 27588                                  	; MSDOS 3.3
 27589                                  	;INC	AX
 27590                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27591                                  
 27592                                  	; 20/05/2019
 27593                                  	; MSDOS 3.3 & MSDOS 6.0
 27594 00004D20 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27595 00004D24 B001                            MOV     AL,1
 27596 00004D26 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27597                                  _doread:
 27598 00004D28 30C0                            XOR     AL,AL
 27599                                  NOREAD:
 27600 00004D2A 06                              PUSH	ES
 27601 00004D2B E863FF                          CALL    BUFSEC
 27602 00004D2E 72A5                    	JC	short BUF_IO_FAIL
 27603 00004D30 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27604 00004D34 D1E9                            SHR     CX,1
 27605                                  ;M039
 27606                                  	; MSDOS 3.3
 27607                                  	;JNC	short EVENWRT ; 09/09/2018
 27608                                  	;MOVSB
 27609                                  ;EVENWRT:
 27610                                  	;REP	MOVSW
 27611                                  
 27612                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27613                                  ;       DS:SI-> Source within Transfer memory block.
 27614                                  ;       ES:DI-> Destination within Buffer.
 27615                                  
 27616                                  	; MSDOS 6.0
 27617 00004D36 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27618                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27619                                  	;rep	movsb                   ;Copy last byte.
 27620                                  	; 16/12/2022
 27621 00004D38 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27622 00004D3A A4                      	movsb ; ****
 27623                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27624                                  	;adc	cx,0
 27625                                  	;rep	movsb
 27626                                  ;M039
 27627                                  EVENWRT: ; ****
 27628 00004D3B 07                              POP	ES
 27629                                  
 27630                                  ;hkn; SS override
 27631 00004D3C 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27632                                  
 27633                                  	; MSDOS 6.0
 27634 00004D41 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27635                                  					;LB. if already dirty		  ;AN000;
 27636 00004D45 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27637 00004D47 E8120E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27638                                  	
 27639                                  	;or	byte [bx+5],40h
 27640 00004D4A 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27641                                  yesdirty10:
 27642                                  	;;lea	si,[bx+16]
 27643                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27644 00004D4E 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27645 00004D51 29F7                            SUB     DI,SI                   ; Position in buffer
 27646                                  ;M039
 27647                                  	; MSDOS 3.3
 27648                                  	;MOV	SI,DI
 27649                                  	;MOV	DI,BX
 27650                                  	;call	PLACEBUF
 27651                                  	;;cmp	si,[es:bp+2]
 27652                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27653                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27654                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27655                                                                          ;  even though it is MRU.
 27656                                  	; MSDOS 6.0
 27657                                  	;cmp	di,[es:bp+2]
 27658 00004D53 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27659 00004D57 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27660 00004D59 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27661                                  					; chucking even though it is MRU.
 27662                                  ;M039
 27663                                  
 27664                                  WBUFPLACED:
 27665 00004D5E F8                              CLC
 27666 00004D5F 16                      	push	ss
 27667 00004D60 1F                      	pop	ds
 27668 00004D61 C3                              retn
 27669                                  
 27670                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27671                                  ;---------------------------------------------------------------------------
 27672                                  ;
 27673                                  ; Procedure Name : NEXTSEC
 27674                                  ;
 27675                                  ; Compute the next sector to read or write
 27676                                  ; ES:BP Points to DPB
 27677                                  ;
 27678                                  ;---------------------------------------------------------------------------
 27679                                  
 27680                                  NEXTSEC:
 27681 00004D62 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27682 00004D67 7426                            JZ	short CLRET
 27683                                  
 27684 00004D69 A0[7305]                        MOV     AL,[SECCLUSPOS]
 27685 00004D6C FEC0                            INC     AL
 27686                                  	;cmp	al,[es:bp+4]
 27687 00004D6E 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27688 00004D72 7618                            JBE	short SAVPOS
 27689                                  
 27690 00004D74 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27691 00004D78 E8B607                          call	IsEOF
 27692 00004D7B 7314                            JAE	short NONEXT
 27693                                  
 27694 00004D7D E8C807                          call	UNPACK
 27695 00004D80 720F                            JC	short NONEXT
 27696                                  clusgot:
 27697 00004D82 893E[BC05]                      MOV     [CLUSNUM],DI
 27698 00004D86 FF06[BA05]                      INC     word [LASTPOS]
 27699 00004D8A B000                            MOV     AL,0
 27700                                  SAVPOS:
 27701 00004D8C A2[7305]                        MOV     [SECCLUSPOS],AL
 27702                                  CLRET:
 27703 00004D8F F8                              CLC
 27704 00004D90 C3                              retn
 27705                                  NONEXT:
 27706 00004D91 F9                              STC
 27707 00004D92 C3                              retn
 27708                                  
 27709                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27710                                  ;----------------------------------------------------------------------------
 27711                                  ;
 27712                                  ; Procedure Name : OPTIMIZE
 27713                                  ;
 27714                                  ; Inputs:
 27715                                  ;       BX = Physical cluster
 27716                                  ;       CX = No. of records
 27717                                  ;       DL = sector within cluster
 27718                                  ;       ES:BP = Base of drive parameters
 27719                                  ;       [NEXTADD] = transfer address
 27720                                  ; Outputs:
 27721                                  ;       AX = No. of records remaining
 27722                                  ;       BX = Transfer address
 27723                                  ;       CX = No. or records to be transferred
 27724                                  ;       DX = Physical sector address            (LOW)
 27725                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27726                                  ;       DI = Next cluster
 27727                                  ;       [CLUSNUM] = Last cluster accessed
 27728                                  ;       [NEXTADD] updated
 27729                                  ;       Carry set if error (currently user FAILed to I 24)
 27730                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27731                                  ;
 27732                                  ;---------------------------------------------------------------------------
 27733                                  
 27734                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27735                                  OPTIMIZE:
 27736 00004D93 52                      	PUSH    DX
 27737 00004D94 53                              PUSH    BX
 27738                                  	;mov	al,[es:bp+4]
 27739 00004D95 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27740 00004D99 FEC0                            INC     AL              ; Number of sectors per cluster
 27741 00004D9B 88C4                            MOV     AH,AL
 27742 00004D9D 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27743 00004D9F 89CA                            MOV     DX,CX
 27744                                  	;MOV	CX,0
 27745                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27746                                  	; 16/12/2022
 27747 00004DA1 31C9                    	xor	cx,cx	; sub cx,cx
 27748                                  OPTCLUS:
 27749                                  ; AL has number of sectors available in current cluster
 27750                                  ; AH has number of sectors available in next cluster
 27751                                  ; BX has current physical cluster
 27752                                  ; CX has number of sequential sectors found so far
 27753                                  ; DX has number of sectors left to transfer
 27754                                  ; ES:BP Points to DPB
 27755                                  ; ES:SI has FAT pointer
 27756                                  
 27757                                  do_norm3:
 27758 00004DA3 E8A207                          call	UNPACK
 27759 00004DA6 7236                            JC	short OP_ERR
 27760                                  clusgot2:
 27761 00004DA8 00C1                    	ADD	CL,AL
 27762 00004DAA 80D500                          ADC     CH,0
 27763 00004DAD 39D1                            CMP     CX,DX
 27764 00004DAF 7332                            JAE	short BLKDON
 27765 00004DB1 88E0                            MOV     AL,AH
 27766 00004DB3 43                              INC     BX
 27767 00004DB4 39DF                            CMP     DI,BX
 27768 00004DB6 74EB                            JZ	short OPTCLUS
 27769 00004DB8 4B                              DEC     BX
 27770                                  FINCLUS:
 27771 00004DB9 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27772 00004DBD 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27773 00004DBF 52                              PUSH    DX
 27774 00004DC0 89C8                            MOV     AX,CX
 27775                                  	;mul	word[ES:BP+2]
 27776 00004DC2 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27777                                  				; Number of sectors times sector size
 27778 00004DC6 8B36[B805]                      MOV     SI,[NEXTADD]
 27779 00004DCA 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27780 00004DCC A3[B805]                        MOV     [NEXTADD],AX
 27781 00004DCF 58                              POP     AX              ; Number of sectors still needed
 27782 00004DD0 5A                              POP     DX              ; Starting cluster
 27783 00004DD1 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27784 00004DD3 011E[BA05]                      ADD     [LASTPOS],BX
 27785 00004DD7 5B                              POP     BX              ; BL = sector position within cluster
 27786 00004DD8 E81600                  	call	FIGREC
 27787 00004DDB 89F3                            MOV     BX,SI
 27788                                  	; 24/09/2023
 27789                                  	; cf=0 (at the return of FIGREC)
 27790                                  	;CLC
 27791 00004DDD C3                              retn
 27792                                  OP_ERR:
 27793 00004DDE 83C404                          ADD     SP,4
 27794 00004DE1 F9                      	STC
 27795 00004DE2 C3                              retn
 27796                                  BLKDON:
 27797 00004DE3 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27798 00004DE5 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27799 00004DE7 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27800 00004DE9 8826[7305]                      MOV     [SECCLUSPOS],AH
 27801 00004DED 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27802 00004DEF EBC8                            JMP     SHORT FINCLUS
 27803                                  
 27804                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27805                                  ;---------------------------------------------------------------------------
 27806                                  ;
 27807                                  ; Procedure Name : FIGREC
 27808                                  ;
 27809                                  ; Inputs:
 27810                                  ;       DX = Physical cluster number
 27811                                  ;       BL = Sector position within cluster
 27812                                  ;       ES:BP = Base of drive parameters
 27813                                  ; Outputs:
 27814                                  ;       DX = physical sector number           (LOW)
 27815                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27816                                  ; No other registers affected.
 27817                                  ;
 27818                                  ;---------------------------------------------------------------------------
 27819                                  
 27820                                  	; 10/06/2019
 27821                                  	; 20/05/2019 - Retro DOS v4.0
 27822                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27823                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27824                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27825                                  FIGREC:
 27826 00004DF1 51                              PUSH    CX
 27827                                  	;mov	cl,[es:bp+5]
 27828 00004DF2 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27829 00004DF6 4A                              DEC     DX
 27830 00004DF7 4A                              DEC     DX
 27831                                  
 27832                                  	; MSDOS 3.3
 27833                                  	;SHL	DX,CL
 27834                                  
 27835                                  ;hkn; SS override HIGH_SECTOR
 27836                                  	; MSDOS 6.0
 27837 00004DF8 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27838                                  	; 24/09/2023
 27839 00004DFF 30ED                    	xor	ch,ch				;F.C. >32mb
 27840 00004E01 08C9                    	OR	CL,CL				;F.C. >32mb
 27841 00004E03 740C                    	JZ	short noshift			;F.C. >32mb
 27842 00004E05 30ED                    	XOR	CH,CH				;F.C. >32mb
 27843                                  rotleft:					;F.C. >32mb
 27844 00004E07 F8                      	CLC					;F.C. >32mb
 27845 00004E08 D1D2                    	RCL	DX,1				;F.C. >32mb
 27846                                  	; 10/06/2019
 27847 00004E0A 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27848 00004E0F E2F6                    	LOOP	rotleft				;F.C. >32mb
 27849                                  noshift:
 27850                                  	; MSDOS 3.3 & MSDOS 6.0
 27851 00004E11 08DA                            OR      DL,BL
 27852                                  	;add	dx,[es:bp+0Bh]
 27853 00004E13 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27854                                  	; MSDOS 6.0
 27855                                  	; 10/06/2019
 27856                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27857                                  	; 24/09/2023
 27858                                  	; cx=0
 27859 00004E17 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 27860                                  
 27861                                  	; MSDOS 3.3 & MSDOS 6.0
 27862 00004E1C 59                      	POP     CX
 27863                                  figrec_retn:
 27864 00004E1D C3                              retn
 27865                                  
 27866                                  ; 20/05/2019 - Retro DOS v4.0
 27867                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27868                                  
 27869                                  ; 30/07/2018 - Retro DOS v3.0
 27870                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27871                                  
 27872                                  ;Break   <ALLOCATE -- Assign disk space>
 27873                                  ;---------------------------------------------------------------------------
 27874                                  ;
 27875                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27876                                  ;
 27877                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27878                                  ;   FAT-chained onto the end of the existing file.
 27879                                  ;
 27880                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27881                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27882                                  ;   numbered clusters, looking for the necessary free blocks.
 27883                                  ;
 27884                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27885                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27886                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27887                                  ;
 27888                                  ;       If we get to the end of the disk without satisfaction:
 27889                                  ;
 27890                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27891                                  ;               return (insufficient_disk_space)
 27892                                  ;           ELSE
 27893                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27894                                  ;
 27895                                  ;   Note that there is no multitasking interlock. There is no race when
 27896                                  ;   examining the entrys in an in-core FAT block since there will be no
 27897                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27898                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27899                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27900                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27901                                  ;   satisfied. We can't allow another activation to think this cluster is
 27902                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27903                                  ;   allocated.
 27904                                  ;
 27905                                  ;   Note that when we run out of space this algorithem will scan from
 27906                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27907                                  ;   redundantly scanning the later part of the disk. This only happens when
 27908                                  ;   we run out of space, so sue me.
 27909                                  ;
 27910                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27911                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27912                                  ;                                                                          ;
 27913                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27914                                  ;   explanation:
 27915                                  ;
 27916                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27917                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27918                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27919                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27920                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27921                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27922                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27923                                  ;   the
 27924                                  ;           LOOP   findfre         ; alloc more if needed
 27925                                  ;   instruction when the first cluster is allocated to the nul file. The
 27926                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27927                                  ;
 27928                                  ;   This method is obviously useless (because it is non-reentrant) for
 27929                                  ;   multitasking, and will have to be changed. Storing the required value on
 27930                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27931                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27932                                  ;   problems with INT 24 well.
 27933                                  ;
 27934                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27935                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27936                                  ;                                                                          ;
 27937                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27938                                  ;               CX = No. of clusters to allocate
 27939                                  ;               ES:BP = Base of drive parameters
 27940                                  ;               [THISSFT] = Points to SFT
 27941                                  ;
 27942                                  ;       EXIT    'C' set if insufficient space
 27943                                  ;                 [FAILERR] can be tested to see the reason for failure
 27944                                  ;                 CX = max. no. of clusters that could be added to file
 27945                                  ;               'C' clear if space allocated
 27946                                  ;                 BX = First cluster allocated
 27947                                  ;                 FAT is fully updated
 27948                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27949                                  ;
 27950                                  ;       USES    ALL but SI, BP
 27951                                  
 27952                                  ;callmagic  proc near
 27953                                  ;       push    ds                             ;push segment of routine 
 27954                                  ;       push    Offset MagicPatch              ;push offset for routine
 27955                                  ;       retf                                   ;simulate jmp far
 27956                                  ;                                              ;far return address is on
 27957                                  ;                                              ;stack, so far return from
 27958                                  ;                                              ;call will return this routine
 27959                                  ;callmagic  endp
 27960                                  
 27961                                  ALLOCATE:
 27962                                  	; 10/09/2018
 27963                                  ;BEGIN MAGICDRV MODIFICATIONS
 27964                                  ;
 27965                                  ;7/5/92 scottq
 27966                                  ;
 27967                                  ;This is the disk compression patch location which allows
 27968                                  ;the disk compression software to fail allocations if the
 27969                                  ;FAT would allows allocation, but the free space for compressed
 27970                                  ;data would not.
 27971                                  ;        
 27972                                  ;;;	call    far ptr MAGICPATCH
 27973                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27974                                  ;;; but we do know the segment and offset of the routine
 27975                                  ;;; so simulate a far call to dosdata:magicpatch
 27976                                  ;;; note dosassume above, so DS -> dosdata
 27977                                  
 27978                                  	; MSDOS 6.0
 27979                                          ;clc				;clear carry so we fall through
 27980                                  	;				;if no patch is present
 27981                                  	;push	cs			;push segment for far return
 27982                                          ;call	callmagic		;this is a near call
 27983                                          ;jnc	short Regular_Allocate_Path
 27984                                  	;jmp	Disk_Full_Return
 27985                                  
 27986                                  ;Regular_Allocate_Path:
 27987                                  	; 20/05/2019 - Retro DOS v4.0
 27988                                  ;END MAGICDRV MODIFICATIONS
 27989                                  
 27990                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27991                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27992                                  
 27993 00004E1E 53                              PUSH    BX                      ; save (bx)
 27994 00004E1F 31DB                            XOR     BX,BX
 27995 00004E21 E82407                  	call	UNPACK
 27996 00004E24 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27997 00004E28 5B                              POP     BX
 27998 00004E29 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27999                                  
 28000 00004E2B 51                              PUSH    CX
 28001 00004E2C 53                              PUSH    BX
 28002                                  
 28003 00004E2D 89DA                            MOV     DX,BX
 28004                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28005                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28006 00004E2F 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28007 00004E33 83FB02                          cmp     bx,2
 28008 00004E36 7709                            ja	short FINDFRE
 28009                                  
 28010                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28011                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28012                                  
 28013                                  ads1:
 28014                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28015                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28016 00004E38 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28017 00004E3E BB0100                          mov     bx,1                    ; Counter next instruction so first
 28018                                                                          ;       cluster examined is 2
 28019                                  
 28020                                  ;   Scanning both forwards and backwards for a free cluster
 28021                                  ;
 28022                                  ;       (BX) = forwards scan pointer
 28023                                  ;       (CX) = clusters remaining to be allocated
 28024                                  ;       (DX) = current last cluster in file
 28025                                  ;       (TOS) = last cluster of file
 28026                                  
 28027                                  FINDFRE:
 28028 00004E41 43                              INC     BX
 28029                                  	;cmp	bx,[es:bp+0Dh]
 28030 00004E42 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28031 00004E46 7757                    	ja	short ads7	; at end of disk
 28032 00004E48 E8FD06                          call	UNPACK          ; check out this cluster
 28033 00004E4B 722F                            jc	short ads4	; FAT error             [INTERR?]
 28034 00004E4D 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28035                                  
 28036                                  ;   Have found a free cluster. Chain it to the file
 28037                                  ;
 28038                                  ;       (BX) = found free cluster #
 28039                                  ;       (DX) = current last cluster in file
 28040                                  
 28041                                  	;;mov	[es:bp+1Ch],bx
 28042                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28043 00004E4F 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28044 00004E53 92                              xchg    ax,dx           ; save (dx) in ax
 28045 00004E54 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28046 00004E57 E84207                  	call	PACK            ; set special "temporary" mark
 28047 00004E5A 7220                            jc	short ads4	; FAT error             [INTERR?]
 28048                                  	;;cmp	word [es:bp+1Eh],-1
 28049                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28050 00004E5C 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28051 00004E61 7404                            JZ	short NO_ALLOC	; No
 28052                                  	;;dec	word [es:bp+1Eh]
 28053                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28054 00004E63 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28055                                  NO_ALLOC:
 28056 00004E67 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28057 00004E68 87DA                            XCHG    BX,DX
 28058 00004E6A 89D0                            MOV     AX,DX
 28059 00004E6C E82D07                  	call	PACK            ; link free cluster onto file
 28060                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28061                                                                  ;    cluster 0 with FIRCLUS value.
 28062 00004E6F 720B                            jc	short ads4	; FAT error [INTERR?]
 28063 00004E71 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28064 00004E72 89DA                            mov     dx,bx           ; (dx) = current end of file
 28065 00004E74 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28066                                  
 28067                                  ;   We've successfully extended the file. Clean up and exit
 28068                                  ;
 28069                                  ;       (BX) = last cluster in file
 28070                                  
 28071 00004E76 BAFFFF                          MOV     DX,0FFFFH
 28072 00004E79 E82007                  	call	PACK            ; mark last cluster EOF
 28073                                  
 28074                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28075                                  ;   2 whole bytes. Hope its worth it...
 28076                                  ;
 28077                                  ;       'C' set if error
 28078                                  ;       calling (BX) and (CX) pushed on stack
 28079                                  
 28080                                  ads4:   
 28081 00004E7C 5B                      	POP     BX
 28082 00004E7D 59                              POP     CX              ; Don't need this stuff since we're successful
 28083 00004E7E 729D                            jc	short figrec_retn
 28084 00004E80 E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28085                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28086 00004E83 7298                            jc	short figrec_retn
 28087 00004E85 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28088 00004E88 7293                            jc	short figrec_retn
 28089 00004E8A 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28090 00004E8C 09FF                            OR      DI,DI           ; clear 'C'
 28091 00004E8E 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28092                                  
 28093                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28094                                  ;   info
 28095                                  dofastk:
 28096                                  	; 20/05/2019
 28097                                  	; MSDOS 6.0
 28098                                  	;push	dx ; * MSDOS 6.0
 28099                                  	;;mov	dl,[es:bp+0]
 28100                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28101                                  	;mov	dl,[es:bp]
 28102                                  
 28103                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28104                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28105                                  	
 28106                                  	; 16/12/2022
 28107                                  	;push	dx ; *
 28108                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28109                                  	; 15/12/2022
 28110                                  	;mov	dl,[es:bp]
 28111                                  	
 28112                                  	; MSDOS 3.3 & MSDOS 6.0
 28113 00004E90 06                      	PUSH	ES
 28114 00004E91 C43E[9E05]              	LES     DI,[THISSFT]
 28115                                  	;mov	[es:di+0Bh],bx
 28116 00004E95 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28117                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28118                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28119 00004E99 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28120 00004E9D 07                      	POP	ES
 28121                                  	;retn
 28122                                  
 28123                                  	;pop	dx ; * MSDOS 6.0
 28124                                  
 28125                                  	; 16/12/2022
 28126                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28127                                  	;pop	dx ; *
 28128                                  
 28129 00004E9E C3                      	retn	
 28130                                  
 28131                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28132                                  ;   of the disk...
 28133                                  
 28134                                  ads7:   
 28135 00004E9F 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28136 00004EA4 7592                    	jnz	short ads1	; start scan from front of disk
 28137                                  
 28138                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28139                                  ;   the space back to the free list and tell the caller how much he could have
 28140                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28141                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28142                                  ;
 28143                                  ;       (CX) = clusters remaining to be allocated
 28144                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28145                                  ;       (TOS+1) = # of clusters wanted to allocate
 28146                                  
 28147 00004EA6 5B                              POP     BX              ; (BX) = last cluster of file
 28148 00004EA7 BAFFFF                          MOV     DX,0FFFFH
 28149 00004EAA E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28150 00004EAD 58                              POP     AX              ; No. of clusters requested
 28151                                                                  ; Don't "retc". We are setting Carry anyway,
 28152                                                                  ;   Alloc failed, so proceed with return CX
 28153                                                                  ;   setup.
 28154 00004EAE 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28155 00004EB0 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28156                                                                  ;   Alloc failed.
 28157                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28158                                          ; MSDOS 6.0
 28159 00004EB3 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28160 00004EB8 F9                              STC
 28161 00004EB9 C3                              retn
 28162                                  
 28163                                  ;-----------------------------------------------------------------------
 28164                                  ;
 28165                                  ; Procedure Name : RESTFATBYT
 28166                                  ;
 28167                                  ; SEE ALLOCATE CAVEAT
 28168                                  ;       Carry set if error (currently user FAILed to I 24)
 28169                                  ;-----------------------------------------------------------------------
 28170                                  
 28171                                  RESTFATBYT:
 28172 00004EBA 53                              PUSH    BX
 28173 00004EBB 52                              PUSH    DX
 28174 00004EBC 57                              PUSH    DI
 28175 00004EBD 31DB                            XOR     BX,BX
 28176 00004EBF 8B16[9605]                      MOV     DX,[FATBYT]
 28177 00004EC3 E8D606                  	call	PACK
 28178 00004EC6 5F                              POP     DI
 28179 00004EC7 5A                              POP     DX
 28180 00004EC8 5B                              POP     BX
 28181                                  ; 16/12/2022
 28182                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28183                                  ;RELEASE_flush:
 28184 00004EC9 C3                      	retn
 28185                                  
 28186                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28187                                  ;---------------------------------------------------------------------------
 28188                                  ;
 28189                                  ; Procedure Name : RELEASE
 28190                                  ;
 28191                                  ; Inputs:
 28192                                  ;       BX = Cluster in file
 28193                                  ;       ES:BP = Base of drive parameters
 28194                                  ; Function:
 28195                                  ;       Frees cluster chain starting with [BX]
 28196                                  ;       Carry set if error (currently user FAILed to I 24)
 28197                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28198                                  ;
 28199                                  ;-----------------------------------------------------------------------------
 28200                                  
 28201                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28202                                  	; 20/05/2019 - Retro DOS v4.0
 28203                                  RELEASE:
 28204 00004ECA 31D2                            XOR     DX,DX
 28205                                  
 28206                                  	;entry	RELBLKS
 28207                                  RELBLKS:
 28208                                  
 28209                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28210                                  ;   and free the rest in the chain.
 28211                                  
 28212 00004ECC E87906                  	call	UNPACK
 28213 00004ECF 7224                    	jc	short RELEASE_flush
 28214 00004ED1 7422                    	jz	short RELEASE_flush
 28215 00004ED3 89F8                            MOV     AX,DI
 28216 00004ED5 52                              PUSH    DX
 28217 00004ED6 E8C306                  	call	PACK
 28218 00004ED9 5A                              POP     DX
 28219 00004EDA 7219                    	jc	short RELEASE_flush
 28220 00004EDC 09D2                            OR      DX,DX
 28221 00004EDE 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28222                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28223                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28224 00004EE0 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28225 00004EE5 7404                            JZ	short NO_DEALLOC	; No
 28226 00004EE7 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28227                                  NO_DEALLOC:
 28228 00004EEB 89C3                            MOV     BX,AX
 28229 00004EED 48                              dec     ax              ; check for "1"
 28230 00004EEE 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28231 00004EF0 E83E06                  	call	IsEOF
 28232 00004EF3 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28233                                  
 28234                                  	; 16/12/2022
 28235                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28236                                  ;%if 0
 28237                                  RELEASE_flush:
 28238                                  	; MSDOS 6.0
 28239 00004EF5 268A4600                	mov	al,[es:bp]
 28240                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28241 00004EF9 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28242 00004EFA 51                      	push	cx		;  them to be preserved.
 28243 00004EFB 06                      	push	es
 28244 00004EFC 55                      	push	bp
 28245 00004EFD E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28246 00004F00 5D                      	pop	bp
 28247 00004F01 07                      	pop	es
 28248 00004F02 59                      	pop	cx
 28249 00004F03 5E                      	pop	si
 28250                                  ;%endif
 28251                                  RET12:
 28252 00004F04 C3                      	retn
 28253                                  
 28254                                  ;Break	<GETEOF -- Find the end of a file>
 28255                                  ;------------------------------------------------------------------------
 28256                                  ;
 28257                                  ; Procedure Name : GETEOF
 28258                                  ;
 28259                                  ; Inputs:
 28260                                  ;       ES:BP Points to DPB
 28261                                  ;       BX = Cluster in a file
 28262                                  ;       DS = CS
 28263                                  ; Outputs:
 28264                                  ;       BX = Last cluster in the file
 28265                                  ;       Carry set if error (currently user FAILed to I 24)
 28266                                  ; DI destroyed. No other registers affected.
 28267                                  ;
 28268                                  ;--------------------------------------------------------------------------
 28269                                  
 28270                                  GETEOF:
 28271 00004F05 E84006                  	call	UNPACK
 28272 00004F08 72FA                            jc	short RET12
 28273 00004F0A 53                              PUSH    BX
 28274 00004F0B 89FB                            MOV     BX,DI
 28275 00004F0D E82106                  	call	IsEOF
 28276 00004F10 5B                              POP     BX
 28277 00004F11 73F1                            JAE     short RET12
 28278 00004F13 89FB                            MOV     BX,DI
 28279 00004F15 EBEE                            JMP     short GETEOF
 28280                                  
 28281                                  ;============================================================================
 28282                                  ; FCB.ASM, MSDOS 6.0, 1991
 28283                                  ;============================================================================
 28284                                  ; 30/07/2018 - Retro DOS v3.0
 28285                                  ; 20/05/2019 - Retro DOS v4.0
 28286                                  
 28287                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28288                                  ;	NAME	FCB
 28289                                  
 28290                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28291                                  ;		  filename characters
 28292                                  ;
 28293                                  ;	MakeFcb
 28294                                  ;	NameTrans
 28295                                  ;	PATHCHRCMP
 28296                                  ;	GetLet
 28297                                  ;	UCase
 28298                                  ;	GetLet3
 28299                                  ;	GetCharType
 28300                                  ;	TESTKANJ
 28301                                  ;	NORMSCAN
 28302                                  ;	DELIM
 28303                                  ;
 28304                                  ;	Revision history:
 28305                                  ;
 28306                                  ;		A000  version 4.00  Jan. 1988
 28307                                  ;	
 28308                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28309                                  
 28310                                  TableLook	EQU	-1
 28311                                  
 28312                                  SCANSEPARATOR	EQU	1
 28313                                  DRVBIT		EQU	2
 28314                                  NAMBIT		EQU	4
 28315                                  EXTBIT		EQU	8
 28316                                  
 28317                                  ;----------------------------------------------------------------------------
 28318                                  ;
 28319                                  ; Procedure : MakeFcb
 28320                                  ;
 28321                                  ;----------------------------------------------------------------------------
 28322                                  
 28323                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28324                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28325                                  MAKEFCB:
 28326                                  ;hkn; SS override
 28327 00004F17 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28328 00004F1D 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28329                                  	;test	al,2
 28330 00004F1F A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28331 00004F21 7504                    	JNZ	short DEFDRV
 28332 00004F23 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28333                                  DEFDRV:
 28334 00004F27 47                      	INC	DI
 28335 00004F28 B90800                  	MOV	CX,8
 28336                                  	;test	al,4
 28337 00004F2B A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28338 00004F2D 93                      	XCHG	AX,BX		; Save bits in BX
 28339 00004F2E B020                    	MOV	AL," "
 28340 00004F30 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28341 00004F32 01CF                    	ADD	DI,CX
 28342 00004F34 31C9                    	XOR	CX,CX		; Don't fill any
 28343                                  FILLB:
 28344 00004F36 F3AA                    	REP	STOSB
 28345 00004F38 B103                    	MOV	CL,3
 28346 00004F3A F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28347 00004F3D 7404                    	JZ	short FILLB2
 28348 00004F3F 01CF                    	ADD	DI,CX
 28349 00004F41 31C9                    	XOR	CX,CX
 28350                                  FILLB2:
 28351 00004F43 F3AA                    	REP	STOSB
 28352 00004F45 91                      	XCHG	AX,CX		; Put zero in AX
 28353 00004F46 AB                      	STOSW
 28354 00004F47 AB                      	STOSW			; Initialize two words after to zero
 28355 00004F48 83EF10                  	SUB	DI,16		; Point back at start
 28356                                  	;test	bl,1
 28357 00004F4B F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28358 00004F4E 7409                    	JZ	short SKPSPC
 28359 00004F50 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28360 00004F53 E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28361 00004F56 7504                    	JNZ	short NOSCAN
 28362 00004F58 46                      	INC	SI		; Skip over the delimiter
 28363                                  SKPSPC:
 28364 00004F59 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28365                                  NOSCAN:
 28366 00004F5C E8F000                  	CALL	GETLET
 28367 00004F5F 761E                    	JBE	short NODRV	; Quit if termination character
 28368 00004F61 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28369 00004F64 7519                    	JNZ	short NODRV
 28370 00004F66 46                      	INC	SI		; Skip over colon
 28371 00004F67 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28372 00004F69 760F                    	JBE	short BADDRV	; Drive letter out of range
 28373                                  
 28374 00004F6B 50                      	PUSH	AX
 28375 00004F6C E8161B                  	call	GetVisDrv
 28376 00004F6F 58                      	POP	AX
 28377 00004F70 730A                    	JNC	short HAVDRV
 28378                                  
 28379                                  	; 20/05/2019 - Retro DOS v4.0
 28380                                  	; MSDOS 6.0
 28381                                  ;hkn; SS override
 28382 00004F72 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28383                                  					; if not FAT drive ;AN000;
 28384 00004F78 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28385                                  BADDRV:
 28386 00004F7A B2FF                    	MOV	DL,-1
 28387                                  HAVDRV:
 28388 00004F7C AA                      	STOSB			; Put drive specifier in first byte
 28389 00004F7D 46                      	INC	SI
 28390 00004F7E 4F                      	DEC	DI		; Counteract next two instructions
 28391                                  NODRV:
 28392 00004F7F 4E                      	DEC	SI		; Back up
 28393 00004F80 47                      	INC	DI		; Skip drive byte
 28394                                  
 28395                                  	;entry	NORMSCAN
 28396                                  NORMSCAN:
 28397 00004F81 B90800                  	MOV	CX,8
 28398 00004F84 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28399 00004F87 803C2E                  	CMP	BYTE [SI],"."
 28400 00004F8A 7510                    	JNZ	short NODOT
 28401 00004F8C 46                      	INC	SI		; Skip over dot if present
 28402                                  
 28403                                  	; 24/09/2023
 28404                                  	;mov	cx,3
 28405 00004F8D B103                    	mov	cl,3	; ch=0
 28406                                  
 28407                                  	; MSDOS 6.0
 28408                                  ;hkn; SS override
 28409                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28410                                  	; 10/06/2019
 28411 00004F8F 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28412 00004F95 7402                    	JZ	short VOLOK				;AN000;
 28413 00004F97 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28414                                  	; 24/09/2023
 28415                                  	;MOV	CX,2					;AN000;
 28416 00004F98 49                      	dec	cx  ; cx=2
 28417                                  	;JMP	SHORT contvol				;AN000;
 28418                                  VOLOK:
 28419                                  	;MOV	CX,3		; Get 3-letter extension
 28420                                  contvol:
 28421 00004F99 E81300                  	CALL	MUSTGETWORD
 28422                                  NODOT:
 28423 00004F9C 88D0                    	MOV	AL,DL
 28424                                  
 28425                                  	; MSDOS 6.0
 28426                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28427                                  	; 18/12/2022
 28428 00004F9E 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28429                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28430                                  
 28431 00004FA4 C3                      	retn
 28432                                  
 28433                                  NONAM:
 28434 00004FA5 01CF                    	ADD	DI,CX
 28435 00004FA7 4E                      	DEC	SI
 28436 00004FA8 C3                      	retn
 28437                                  
 28438                                  GETWORD:
 28439 00004FA9 E8A300                  	CALL	GETLET		
 28440 00004FAC 76F7                    	JBE	short NONAM	; Exit if invalid character
 28441 00004FAE 4E                      	DEC	SI
 28442                                  
 28443                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28444                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28445                                  
 28446                                  MUSTGETWORD:
 28447 00004FAF E89D00                  	CALL	GETLET
 28448                                  
 28449                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28450                                  
 28451                                  ;IF NOT TABLELOOK
 28452                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28453                                  ;ENDIF
 28454 00004FB2 750C                    	JNZ	short MustCheckCX
 28455                                  
 28456                                  ;hkn; SS override
 28457 00004FB4 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28458 00004FBA 7419                    	JZ	short FILLNAM
 28459 00004FBC 3C20                    	CMP	AL," "
 28460 00004FBE 7515                    	JNZ	short FILLNAM
 28461                                  
 28462                                  MustCheckCX:
 28463 00004FC0 E3ED                    	JCXZ	MUSTGETWORD
 28464 00004FC2 49                      	DEC	CX
 28465 00004FC3 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28466 00004FC5 7504                    	JNZ	short NOSTAR
 28467 00004FC7 B03F                    	MOV	AL,"?"
 28468 00004FC9 F3AA                    	REP	STOSB
 28469                                  NOSTAR:
 28470 00004FCB AA                      	STOSB
 28471 00004FCC 3C3F                    	CMP	AL,"?"
 28472 00004FCE 75DF                    	JNZ	short MUSTGETWORD
 28473 00004FD0 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28474 00004FD3 EBDA                    	JMP	short MUSTGETWORD
 28475                                  FILLNAM:
 28476 00004FD5 B020                    	MOV	AL," "
 28477 00004FD7 F3AA                    	REP	STOSB
 28478 00004FD9 4E                      	DEC	SI
 28479 00004FDA C3                      	retn
 28480                                  
 28481                                  SCANB:
 28482 00004FDB AC                      	LODSB
 28483 00004FDC E8A100                  	CALL	SPCHK
 28484 00004FDF 74FA                    	JZ	short SCANB
 28485 00004FE1 4E                      	DEC	SI
 28486                                  scanb_retn:
 28487 00004FE2 C3                      	retn
 28488                                  
 28489                                  ;----------------------------------------------------------------------------
 28490                                  ;
 28491                                  ; Procedure Name : NameTrans
 28492                                  ;
 28493                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28494                                  ; allow spaces in pathnames
 28495                                  ;
 28496                                  ;   Inputs:	DS:SI points to start of path element
 28497                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28498                                  ;		ES = DOSGroup
 28499                                  ;		DS:SI advanced after name
 28500                                  ;   Registers modified: DI,AX,DX,CX
 28501                                  ;
 28502                                  ;----------------------------------------------------------------------------
 28503                                  
 28504                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28505                                  	; 20/05/2019 - Retro DOS v4.0
 28506                                  NameTrans:
 28507                                  ;hkn; SS override
 28508 00004FE3 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28509 00004FE9 16                      	push	ss
 28510 00004FEA 07                      	pop	es
 28511                                  
 28512                                  ;hkn; NAME1 is in DOSDATA
 28513 00004FEB BF[4B05]                	MOV	DI,NAME1
 28514 00004FEE 57                      	PUSH	DI
 28515 00004FEF B82020                  	MOV	AX,'  '
 28516 00004FF2 B90500                  	MOV	CX,5
 28517 00004FF5 AA                      	STOSB
 28518 00004FF6 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28519 00004FF8 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28520 00004FFA 88C2                    	MOV	DL,AL
 28521 00004FFC AA                      	STOSB
 28522 00004FFD 5F                      	POP	DI
 28523                                  
 28524 00004FFE E880FF                  	CALL	NORMSCAN
 28525                                  
 28526                                  ;hkn; SS override for NAME1
 28527 00005001 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28528 00005007 75D9                    	jnz	short scanb_retn
 28529 00005009 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28530 0000500F C3                      	retn
 28531                                  
 28532                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28533                                  ;============================================================================
 28534                                  
 28535                                  ; 20/05/2019 - Retro DOS v4.0
 28536                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28537                                  
 28538                                  ;If TableLook
 28539                                  
 28540                                  ;hkn; Table	SEGMENT
 28541                                  ;	PUBLIC	CharType
 28542                                  ;----------------------------------------------------------------------------
 28543                                  
 28544                                  ; Character type table for file name scanning
 28545                                  ; Table provides a mapping of characters to validity bits.
 28546                                  ; Four bits are provided for each character. Values 7Dh and above
 28547                                  ; have all bits set, so that part of the table is chopped off, and
 28548                                  ; the translation routine is responsible for screening these values.
 28549                                  ; The bit values are defined in DOSSYM.INC
 28550                                  
 28551                                  ;	      ; ^A and NUL
 28552                                  ;CharType:
 28553                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28554                                  ;	      ; ^C and ^B
 28555                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28556                                  ;	      ; ^E and ^D
 28557                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28558                                  ;	      ; ^G and ^F
 28559                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28560                                  ;	      ; TAB and BS
 28561                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28562                                  ;	      ; ^K and ^J
 28563                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28564                                  ;	      ; ^M and ^L
 28565                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28566                                  ;	      ; ^O and ^N
 28567                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28568                                  ;	      ; ^Q and ^P
 28569                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28570                                  ;	      ; ^S and ^R
 28571                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28572                                  ;	      ; ^U and ^T
 28573                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28574                                  ;	      ; ^W and ^V
 28575                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28576                                  ;	      ; ^Y and ^X
 28577                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28578                                  ;	      ; ESC and ^Z
 28579                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28580                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28582                                  ;	      ; ^_ and ^^
 28583                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28584                                  ;	      ; ! and SPACE
 28585                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28586                                  ;	      ; # and "
 28587                                  ;	 db   LOW (NOT FFCB+FCHK)
 28588                                  ;	      ; $ - )
 28589                                  ;	 db   3 dup (0FFh)
 28590                                  ;	      ; + and *
 28591                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28592                                  ;	      ; - and '
 28593                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28594                                  ;	      ; / and .
 28595                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28596                                  ;	      ; 0 - 9
 28597                                  ;	 db   5 dup (0FFh)
 28598                                  ;	      ; ; and :
 28599                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28600                                  ;	      ; = and <
 28601                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28602                                  ;	      ; ? and >
 28603                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28604                                  ;	      ; A - Z
 28605                                  ;	 db   13 dup (0FFh)
 28606                                  ;	      ; \ and [
 28607                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28608                                  ;	      ; ^ and ]
 28609                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28610                                  ;	      ; _ - {
 28611                                  ;	 db   15 dup (0FFh)
 28612                                  ;	      ; } and |
 28613                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28614                                  
 28615                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28616                                  ;					; character in the table
 28617                                  
 28618                                  ;FCHK	equ 1		; normal name char, no chks needed
 28619                                  ;FDELIM	equ 2		; is a delimiter
 28620                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28621                                  ;FFCB	equ 8		; is valid in an FCB
 28622                                  
 28623                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28624                                  ;----------------------------------------------------------------------------
 28625                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28626                                  
 28627                                  CharType: ; 63 bytes
 28628 00005010 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28629 00005018 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28630 00005020 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28631 00005028 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28632 00005030 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28633 00005038 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28634 00005040 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28635 00005048 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28636                                  
 28637                                  CharType_last equ ($ - CharType) * 2
 28638                                  
 28639                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28640                                  ;----------------------------------------------------------------------------
 28641                                  ;CharType:
 28642                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28643                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28644                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28645                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28646                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28647                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28648                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28649                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28650                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28651                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28652                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28653                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28654                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28655                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28656                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28657                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28658                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28659                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28660                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28661                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28662                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28663                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28664                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28665                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28666                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28667                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28668                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28669                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28670                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28671                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28672                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28673                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28674                                  
 28675                                  ;hkn; Table	ENDS
 28676                                  
 28677                                  ;ENDIF
 28678                                  
 28679                                  ; 20/05/2019 - Retro DOS v4.0
 28680                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28681                                  
 28682                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28683                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28684                                  
 28685                                  ;----------------------------------------------------------------------------
 28686                                  ;
 28687                                  ; Procedure Names : GetLet, UCase, GetLet3
 28688                                  ;
 28689                                  ; These routines take a character, convert it to upper case, and check
 28690                                  ; for delimiters.  Three different entry points:
 28691                                  ;	GetLet -  DS:[SI] = character to convert
 28692                                  ;	UCase  -  AL = character to convert
 28693                                  ;	GetLet3 - AL = character
 28694                                  ;		  [BX] = translation table to use
 28695                                  ;
 28696                                  ;	Exit (in all cases) : AL = upper case character
 28697                                  ;			      CY set if char is control char other than TAB
 28698                                  ;			      ZF set if char is a delimiter
 28699                                  ;	Uses : AX, flags
 28700                                  ;
 28701                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28702                                  ; inline version.  Return with carry set is only possible in the inline
 28703                                  ; version. The table lookup version is the one in use.
 28704                                  ;
 28705                                  ;----------------------------------------------------------------------------
 28706                                  
 28707                                  ; This entry point has character at [SI]
 28708                                  
 28709                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28710                                  GETLET:	
 28711 0000504F AC                      	LODSB
 28712                                  
 28713                                  ; This entry point has character in AL
 28714                                  
 28715                                  	;entry	UCase
 28716                                  UCase:	
 28717                                  	; 09/08/2018
 28718                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28719                                  _UCase:
 28720 00005050 53                      	PUSH	BX
 28721 00005051 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28722                                  
 28723                                  ; Convert the character in AL to upper case
 28724                                  
 28725                                  gl_0:
 28726 00005054 3C61                    	CMP	AL,"a"
 28727 00005056 7214                    	JB	short gl_2	; Already upper case, go check type
 28728 00005058 3C7A                    	CMP	AL,"z"
 28729 0000505A 7702                    	JA	short gl_1
 28730 0000505C 2C20                    	SUB	AL,20H		; Convert to upper case
 28731                                  
 28732                                  ; Map European character to upper case
 28733                                  
 28734                                  gl_1:
 28735 0000505E 3C80                    	CMP	AL,80H
 28736 00005060 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28737 00005062 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28738                                  
 28739                                  	; M048 - Start 
 28740                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28741                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28742                                  	; preserve it.
 28743                                  
 28744                                  	; 09/08/2018 - Retro DOS v3.0
 28745                                  	; MSDOS 3.3
 28746                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28747                                  	;CS	XLAT
 28748                                  
 28749                                  	; 20/05/2019 - Retro DOS v4.0
 28750                                  
 28751                                  	; MSDOS 6.0
 28752 00005064 1E                      	push	ds
 28753                                  	;getdseg <ds>
 28754 00005065 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28755 0000506A D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28756 0000506B 1F                      	pop	ds
 28757                                  
 28758                                  	; M048 - End
 28759                                  
 28760                                  ; Now check the type
 28761                                  
 28762                                  ;If TableLook
 28763                                  gl_2:
 28764                                  	; 20/05/2019 - Retro DOS v4.0
 28765 0000506C 50                      	PUSH	AX
 28766                                  
 28767                                  	; MSDOS 3.3
 28768                                  	;mov	bx,CharType
 28769                                  	;; 09/08/2018
 28770                                  	;;xlat	byte [cs:bx]
 28771                                  	;cs	xlat	
 28772                                  	
 28773                                  	; MSDOS 6.0
 28774 0000506D E81800                  	CALL	GetCharType	; returns type flags in AL
 28775                                  	
 28776                                  	;test	al,1	
 28777 00005070 A801                    	TEST	AL,FCHK 	; test for normal character
 28778 00005072 58                      	POP	AX
 28779 00005073 5B                      	POP	BX
 28780 00005074 C3                      	RETN
 28781                                  
 28782                                  ; This entry has character in AL and lookup table in BX
 28783                                  
 28784                                  	; MSDOS 6.0
 28785                                  ;	;entry GetLet3
 28786                                  GETLET3: ; 10/08/2018
 28787 00005075 53                      	PUSH	BX
 28788 00005076 EBDC                    	JMP	short gl_0
 28789                                  ;ELSE
 28790                                  ;
 28791                                  ;gl_2:
 28792                                  ;	POP	BX
 28793                                  ;	CMP	AL,"."
 28794                                  ;	retz
 28795                                  ;	CMP	AL,'"'
 28796                                  ;	retz
 28797                                  ;	CALL	PATHCHRCMP
 28798                                  ;	retz
 28799                                  ;	CMP	AL,"["
 28800                                  ;	retz
 28801                                  ;	CMP	AL,"]"
 28802                                  ;	retz
 28803                                  ;ENDIF
 28804                                  
 28805                                  ;---------------------------------------------------------------------
 28806                                  ;
 28807                                  ; DELIM - check if character is a delimiter
 28808                                  ;	Entry : AX = character to check
 28809                                  ;	Exit  : ZF set if character is not a delimiter
 28810                                  ;	Uses  : Flags
 28811                                  ;
 28812                                  ;--------------------------------------------------------------------
 28813                                  
 28814                                  	;entry	DELIM
 28815                                  DELIM:
 28816                                  ;IF TableLook
 28817                                  	; 20/05/2019 - Retro DOS v4.0
 28818 00005078 50                      	PUSH	AX
 28819                                  
 28820                                  	; MSDOS 3.3
 28821                                  	;push	bx
 28822                                  	;mov	bx,CharType
 28823                                  	;;09/08/2018
 28824                                  	;;xlat	byte [cs:bx]
 28825                                  	;cs	xlat
 28826                                  	;pop	bx
 28827                                  
 28828                                  	; MSDOS 6.0
 28829 00005079 E80C00                  	CALL	GetCharType
 28830                                  	
 28831                                  	;test	al,2
 28832 0000507C A802                    	TEST	AL,FDELIM
 28833 0000507E 58                      	POP	AX
 28834 0000507F C3                      	RETN
 28835                                  ;ELSE
 28836                                  ;	CMP	AL,":"
 28837                                  ;	retz
 28838                                  ;
 28839                                  ;	CMP	AL,"<"
 28840                                  ;	retz
 28841                                  ;	CMP	AL,"|"
 28842                                  ;	retz
 28843                                  ;	CMP	AL,">"
 28844                                  ;	retz
 28845                                  ;
 28846                                  ;	CMP	AL,"+"
 28847                                  ;	retz
 28848                                  ;	CMP	AL,"="
 28849                                  ;	retz
 28850                                  ;	CMP	AL,";"
 28851                                  ;	retz
 28852                                  ;	CMP	AL,","
 28853                                  ;	retz
 28854                                  ;ENDIF
 28855                                  
 28856                                  ;-------------------------------------------------------------------------
 28857                                  ;
 28858                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28859                                  ;	Entry : AL = character to check
 28860                                  ;	Exit  : ZF set if character is a space
 28861                                  ;	Uses  : flags
 28862                                  ;
 28863                                  ;-------------------------------------------------------------------------
 28864                                  
 28865                                  	;entry SPCHK
 28866                                  SPCHK:
 28867                                  ;IF TableLook
 28868                                  	; 20/05/2019 - Retro DOS v4.0
 28869 00005080 50                      	PUSH	AX
 28870                                  
 28871                                  	; MSDOS 3.3
 28872                                  	;push	bx
 28873                                  	;mov	bx,CharType
 28874                                  	;; 09/08/2018
 28875                                  	;;xlat	byte [cs:bx]
 28876                                  	;cs	xlat
 28877                                  	;pop	bx
 28878                                  
 28879                                  	; MSDOS 6.0
 28880 00005081 E80400                  	CALL	GetCharType
 28881                                  	
 28882                                  	;test	al,4
 28883 00005084 A804                    	TEST	AL,FSPCHK
 28884 00005086 58                      	POP	AX
 28885 00005087 C3                      	RETN
 28886                                  ;ELSE
 28887                                  ;	CMP	AL,9		; Filter out tabs too
 28888                                  ;	retz
 28889                                  ;; WARNING! " " MUST be the last compare
 28890                                  ;	CMP	AL," "
 28891                                  ;	return
 28892                                  ;ENDIF
 28893                                  
 28894                                  ;-------------------------------------------------------------------------
 28895                                  ;
 28896                                  ;  GetCharType - return flag bits indicating character type
 28897                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28898                                  ;	defined above at label CharType.
 28899                                  ;
 28900                                  ;	Entry : AL = character to return type flags for
 28901                                  ;	Exit  : AL = type flags
 28902                                  ;	Uses  : AL, flags
 28903                                  ;
 28904                                  ;-------------------------------------------------------------------------
 28905                                  
 28906                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28907                                  
 28908                                  	; 20/05/2019 - Retro DOS v4.0
 28909                                  	; MSDOS 6.0
 28910                                  GetCharType:
 28911                                  	;cmp	al,7Eh
 28912 00005088 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28913 0000508A 7316                    	jae	short gct_90		; return standard value
 28914                                  
 28915 0000508C 53                      	push	bx
 28916 0000508D BB[1050]                	mov	bx,CharType		; load lookup table
 28917 00005090 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28918                                  	;xlat	cs:[bx] 		; get flags
 28919 00005092 2ED7                    	cs	xlat	
 28920 00005094 5B                      	pop	bx
 28921                                  
 28922                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28923                                  ; we have to shift the flags down to the low nibble
 28924                                  
 28925 00005095 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28926                                  
 28927 00005097 D0E8                    	shr	al,1			; we want high nibble, shift it down
 28928 00005099 D0E8                    	shr	al,1
 28929 0000509B D0E8                    	shr	al,1
 28930 0000509D D0E8                    	shr	al,1
 28931                                  gct_80:
 28932 0000509F 240F                    	and	al,0Fh			; clear the unused nibble
 28933 000050A1 C3                      	retn
 28934                                  gct_90:
 28935 000050A2 B00F                    	mov	al,0Fh			; set all flags
 28936 000050A4 C3                      	retn
 28937                                  
 28938                                  ;----------------------------------------------------------------------------
 28939                                  ;
 28940                                  ; Procedure : PATHCHRCMP
 28941                                  ;
 28942                                  ;----------------------------------------------------------------------------
 28943                                  
 28944                                  PATHCHRCMP:
 28945 000050A5 3C2F                    	CMP	AL,'/'
 28946 000050A7 7606                    	JBE	short PathRet
 28947 000050A9 3C5C                    	CMP	AL,'\'
 28948 000050AB C3                      	retn
 28949                                  GotFor:
 28950 000050AC B05C                    	MOV	AL,'\'
 28951 000050AE C3                      	retn
 28952                                  PathRet:
 28953 000050AF 74FB                    	JZ	short GotFor
 28954 000050B1 C3                      	retn
 28955                                  
 28956                                  ;============================================================================
 28957                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28958                                  ;============================================================================
 28959                                  ; 30/07/2018 - Retro DOS v3.0
 28960                                  ; 29/04/2019 - Retro DOS v4.0
 28961                                  
 28962                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28963                                  
 28964                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28965                                  
 28966                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28967                                  ;	NAME	IBMCTRLC
 28968                                  
 28969                                  ;**	Low level routines for detecting special characters on CON input,
 28970                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28971                                  ;	process termination code, and the INT 0 divide overflow handler.
 28972                                  ;
 28973                                  ;	FATAL
 28974                                  ;	FATAL1
 28975                                  ;	reset_environment
 28976                                  ;	DSKSTATCHK
 28977                                  ;	SPOOLINT
 28978                                  ;	STATCHK
 28979                                  ;	CNTCHAND
 28980                                  ;	DIVOV
 28981                                  ;	CHARHARD
 28982                                  ;	HardErr
 28983                                  ;
 28984                                  ;	Revision history:
 28985                                  ;
 28986                                  ;	    AN000	version 4.0   Jan 1988
 28987                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28988                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28989                                  ;
 28990                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28991                                  ;	      flags register. In order to return to user normally DOS used to
 28992                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28993                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28994                                  ;
 28995                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28996                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28997                                  ;	      charhard.
 28998                                  
 28999                                  ; 29/04/2019 - Retro DOS v4.0
 29000                                  	; MSDOS 6.0
 29001                                  ;		public	LowInt23Addr		
 29002                                  LowInt23Addr: ;	LABEL	DWORD
 29003 000050B2 [CD10]0000              	DW	LowInt23, 0
 29004                                  
 29005                                  ;		public	LowInt24Addr
 29006                                  LowInt24Addr: ;	LABEL	DWORD
 29007 000050B6 [E110]0000              	DW	LowInt24, 0
 29008                                  
 29009                                  ;		public	LowInt28Addr
 29010                                  LowInt28Addr: ;	LABEL	DWORD
 29011 000050BA [F510]0000              	DW	LowInt28, 0
 29012                                  
 29013                                  ;Break	<Checks for ^C in CON I/O>
 29014                                  
 29015                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29016                                  ; 05/05/2019 - Retro DOS v4.0
 29017                                  
 29018                                  ;---------------------------------------------------------------------------
 29019                                  ;
 29020                                  ; Procedure Name : DSKSTATCHK
 29021                                  ;
 29022                                  ; Check for ^C if only one level in
 29023                                  ;
 29024                                  ;---------------------------------------------------------------------------
 29025                                  
 29026                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29027                                  
 29028                                  DSKSTATCHK:        
 29029                                  	;CMP	BYTE [INDOS],1
 29030 000050BE 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29031                                  	;retnz			; Do NOTHING
 29032                                  	; 16/12/2022
 29033 000050C4 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29034                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29035                                  	;jz	short _RET37 ; dskstatchk1
 29036                                  	;retn
 29037                                  ;_RET37:
 29038                                  ;dskstatchk1:
 29039 000050C6 51                      	PUSH    CX
 29040 000050C7 06                              PUSH    ES
 29041 000050C8 53                              PUSH    BX
 29042 000050C9 1E                              PUSH    DS
 29043 000050CA 56                              PUSH    SI
 29044                                          
 29045                                  	;PUSH	CS
 29046                                          ;POP	ES
 29047                                          ;PUSH	CS
 29048                                          ;POP	DS
 29049                                  
 29050 000050CB 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29051 000050CD 8EC3                    	MOV	ES,BX		; for deviocall2
 29052 000050CF 8EDB                    	MOV	DS,BX
 29053                                  
 29054                                  	; 16/12/2022
 29055                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29056                                  
 29057                                  	; 05/05/2019
 29058                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29059                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29060                                  	;mov	word [ss:DSKSTST],0
 29061                                  
 29062                                  	; 16/12/2022
 29063                                  	; 25/06/2019
 29064 000050D1 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29065 000050D6 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29066 000050DB C706[9503]0000          	mov	word [DSKSTST],0
 29067                                  
 29068 000050E1 BB[9203]                        MOV     BX,DSKSTCALL
 29069                                  
 29070                                  	;LDS	SI,[ss:BCON]
 29071                                          ; 25/062019
 29072 000050E4 C536[3200]              	lds	si,[BCON]
 29073                                  
 29074                                  ; 16/12/2022
 29075                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29076                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29077                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29078                                  ;	mov	word [ss:DSKSTST],0
 29079                                  ;	mov	bx,DSKSTCALL
 29080                                  ;	lds	si,[ss:BCON]
 29081                                  
 29082 000050E8 E890F5                  	CALL	DEVIOCALL2
 29083                                   	; 15/03/2018
 29084                                  	;;test	word [ss:DSKSTST],200h
 29085                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29086                                  	; 05/05/2019
 29087 000050EB 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29088 000050F1 7408                    	jz	short _GotCh		; No characters available
 29089                                  
 29090 000050F3 30C0                            XOR     AL,AL                   ; Set zero
 29091                                  RET36:
 29092 000050F5 5E                              POP     SI
 29093 000050F6 1F                              POP     DS
 29094 000050F7 5B                              POP     BX
 29095 000050F8 07                              POP     ES
 29096 000050F9 59                              POP     CX
 29097                                  	; 16/12/2022
 29098                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29099                                  _RET37:
 29100 000050FA C3                              RETN
 29101                                  
 29102                                  _GotCh:
 29103 000050FB 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29104                                  
 29105 000050FF 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29106 00005101 75F2                            JNZ     SHORT RET36
 29107 00005103 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29108 00005109 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29109 0000510F 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29110                                  	; 09/09/2018
 29111 00005114 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29112 0000511B 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29113 00005122 E856F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29114 00005125 5E                              POP     SI
 29115 00005126 1F                              POP     DS
 29116 00005127 5B                              POP     BX                      ; Clean stack
 29117 00005128 07                              POP     ES
 29118 00005129 59                              POP     CX
 29119 0000512A E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29120                                  
 29121                                  	; 05/05/2019
 29122                                  NOSTOP:
 29123                                  	; MSDOS 6.0
 29124 0000512D 3C10                    	CMP	AL,"P"-"@"
 29125 0000512F 7509                    	JNZ	short check_next
 29126                                  				    	; SS override
 29127 00005131 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29128 00005137 7405                    	JZ	short INCHKJ		; no
 29129                                  check_end:	; 24/09/2023
 29130 00005139 C3                      	retn
 29131                                  check_next:
 29132                                  	;IF	NOT TOGLPRN
 29133                                  	;CMP	AL,"N"-"@"
 29134                                  	;JZ	short INCHKJ
 29135                                  	;ENDIF
 29136                                  
 29137 0000513A 3C03                    	CMP	AL,"C"-"@"
 29138                                  	; 24/09/2023
 29139                                  	;JZ	short INCHKJ
 29140                                  ;check_end:
 29141                                  	;retn
 29142 0000513C 75FB                    	jnz	short check_end
 29143                                  
 29144                                  	; 24/09/2023
 29145                                  	; 08/09/2018
 29146                                  INCHKJ:	; 10/08/2018
 29147 0000513E E9A500                  	jmp	INCHK
 29148                                  
 29149                                  	; MSDOS 3.3
 29150                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29151                                          ;JZ	short INCHKJ
 29152                                  
 29153                                  	; 15/04/2018
 29154                                          ;;IF	NOT TOGLPRN
 29155                                          ;CMP	AL,"N"-"@"
 29156                                          ;JZ	SHORT INCHKJ
 29157                                          ;;ENDIF
 29158                                  	
 29159                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29160                                          ;JZ	short INCHKJ
 29161                                  	;RETN
 29162                                  
 29163                                  ;	; 08/09/2018
 29164                                  ;INCHKJ:; 10/08/2018
 29165                                  ;	JMP	INCHK
 29166                                  
 29167                                  ;----------------------------------------------------------------------------
 29168                                  ;
 29169                                  ; Procedure Name : SpoolInt
 29170                                  ;
 29171                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29172                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29173                                  ; the middle of an INT 24.
 29174                                  ;
 29175                                  ;----------------------------------------------------------------------------
 29176                                  
 29177                                  SPOOLINT:
 29178 00005141 9C                              PUSHF
 29179                                  	; 15/03/2018
 29180 00005142 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29181 00005148 7423                            JZ      SHORT POPFRET
 29182 0000514A 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29183 00005150 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29184                                  
 29185                                  	; 30/07/2018
 29186                                  
 29187                                  	; Note that we are going to allow an external program to issue system 
 29188                                  	; calls at this time. We MUST preserve IdleInt across this.
 29189                                  
 29190 00005152 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29191                                  
 29192                                  	; 05/05/2019 - Retro DOS v4.0
 29193                                   
 29194                                  	; MSDOS 6.0
 29195 00005157 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29196 0000515D 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29197 0000515F CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29198 00005161 EB05                    	jmp	short spool_ret_addr
 29199                                  
 29200                                  do_low_int28:
 29201                                  	;call	far [ss:LowInt28Addr]
 29202 00005163 2EFF1E[BA50]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29203                                  
 29204                                  spool_ret_addr:
 29205                                  	;INT	int_spooler		; INT 28h
 29206                                  
 29207 00005168 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29208                                  POPFRET:
 29209 0000516D 9D                              POPF
 29210                                  _RET18:  
 29211 0000516E C3                      	RETN
 29212                                  
 29213                                  ; 05/05/2019 - Retro DOS v4.0
 29214                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29215                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29216                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29217                                  
 29218                                  ;----------------------------------------------------------------------------
 29219                                  ;
 29220                                  ; Procedure Name : STATCHK
 29221                                  ;
 29222                                  ;----------------------------------------------------------------------------
 29223                                  
 29224                                  STATCHK:
 29225 0000516F E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29226                                                                          ; input redirection
 29227 00005172 53                              PUSH    BX
 29228 00005173 31DB                            XOR     BX,BX
 29229 00005175 E8E8E4                          CALL	GET_IO_SFT
 29230 00005178 5B                              POP     BX
 29231 00005179 72F3                            JC      SHORT _RET18
 29232                                  
 29233 0000517B B401                            MOV     AH,1
 29234 0000517D E826F3                          CALL	IOFUNC
 29235 00005180 74BF                            JZ      SHORT SPOOLINT
 29236 00005182 3C13                            CMP     AL,'S'-'@'
 29237 00005184 75A7                            JNZ     SHORT NOSTOP
 29238                                  
 29239                                  	; 05/05/2019
 29240                                  	; MSDOS 6.0			; SS override
 29241 00005186 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29242 0000518C 75AB                    	JNZ	short check_end		; AN000; yes
 29243                                  
 29244 0000518E 30E4                            XOR     AH,AH
 29245 00005190 E813F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29246 00005193 EB4A                            JMP     SHORT PAUSOSTRT
 29247                                  PRINTOFF:
 29248                                  PRINTON:
 29249 00005195 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29250                                  
 29251                                  	; 30/07/2018 - Retro DOS v3.0
 29252 0000519A 53                      	PUSH	BX
 29253 0000519B BB0400                  	MOV	BX,4
 29254 0000519E E8BFE4                  	call	GET_IO_SFT
 29255 000051A1 5B                      	POP	BX
 29256 000051A2 72CA                    	jc	short _RET18
 29257 000051A4 06                      	PUSH	ES
 29258 000051A5 57                      	PUSH	DI
 29259 000051A6 1E                      	PUSH	DS
 29260 000051A7 07                      	POP	ES
 29261 000051A8 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29262                                  	;test	word [es:di+5],800h
 29263                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29264                                  	; 05/05/2019
 29265 000051AA 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29266 000051AF 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29267                                  
 29268                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29269                                  					; See if allowed
 29270 000051B1 50                      	push	ax
 29271 000051B2 B82611                  	mov	ax,1126h
 29272 000051B5 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29273                                  			; Return: CF set on error, AX = error code
 29274                                  			; STACK unchanged
 29275 000051B7 58                      	pop	ax
 29276                                  
 29277 000051B8 730F                    	JNC	short NORM_PR 		; Echo is OK
 29278                                  
 29279                                  					; SS override
 29280 000051BA 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29281                                  
 29282                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29283                                  
 29284 000051C0 50                      	push    ax
 29285 000051C1 B82411                  	mov     ax,1124h
 29286 000051C4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29287                                  			; ES:DI -> SFT, SS = DOS CS
 29288 000051C6 58                      	pop     ax
 29289                                  
 29290 000051C7 EB10                    	JMP	SHORT RETP6
 29291                                  NORM_PR:
 29292 000051C9 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29293 000051CF 7505                    	JNZ	short PRNOPN
 29294 000051D1 E82BF4                  	call	DEV_CLOSE_SFT
 29295 000051D4 EB03                    	JMP	SHORT RETP6
 29296                                  PRNOPN:
 29297 000051D6 E81EF4                  	call	DEV_OPEN_SFT
 29298                                  RETP6:
 29299 000051D9 5F                      	POP	DI
 29300 000051DA 07                      	POP	ES
 29301                                  STATCHK_RETN:
 29302 000051DB C3                              RETN
 29303                                  PAUSOLP:
 29304 000051DC E862FF                          CALL    SPOOLINT
 29305                                  PAUSOSTRT:
 29306 000051DF B401                            MOV     AH,1
 29307 000051E1 E8C2F2                          CALL	IOFUNC
 29308 000051E4 74F6                            JZ      SHORT PAUSOLP
 29309                                  INCHK:
 29310 000051E6 53                              PUSH    BX
 29311 000051E7 31DB                            XOR     BX,BX
 29312 000051E9 E874E4                          CALL	GET_IO_SFT
 29313 000051EC 5B                              POP     BX
 29314 000051ED 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29315 000051EF 30E4                            XOR     AH,AH
 29316 000051F1 E8B2F2                          CALL	IOFUNC
 29317                                  	; 30/07/2018
 29318                                  	; MSDOS 3.3
 29319                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29320                                          ;JNZ	SHORT NOPRINT
 29321                                  
 29322                                  	;cmp	byte [SS:SCAN_FLAG],0
 29323                                  	;JZ	SHORT PRINTON	
 29324                                  	;mov	byte [ss:SCAN_FLAG],0
 29325                                  
 29326                                  	; 05/05/2019
 29327                                  	; MSDOS 6.0
 29328 000051F4 3C10                    	CMP	AL,"P"-"@"
 29329                                  	;;;;  7/14/86	ALT_Q key fix
 29330 000051F6 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29331                                  ;NOPRINT:	
 29332                                  	;IF	NOT TOGLPRN
 29333                                  	;CMP	AL,"N"-"@"
 29334                                  	;JZ	short PRINTOFF
 29335                                  	;ENDIF
 29336 000051F8 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29337                                  	;retnz
 29338 000051FA 75DF                    	jnz	short STATCHK_RETN
 29339                                  
 29340                                  	; !! NOTE: FALL THROUGH !!
 29341                                  
 29342                                  ;---------------------------------------------------------------------------
 29343                                  ;
 29344                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29345                                  ;
 29346                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29347                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29348                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29349                                  ; processing to continue; 2) the original interrupt return address to the code
 29350                                  ; that performed the function call in the first place. If the user CTRL-C
 29351                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29352                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29353                                  ; is simulated.
 29354                                  ;
 29355                                  ;---------------------------------------------------------------------------
 29356                                  
 29357                                  CNTCHAND:
 29358                                  	; MSDOS 6.0			; SS override
 29359                                  					; AN002; from RAWOUT
 29360                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29361                                  	;JNZ	short around_deadlock 	; AN002;
 29362                                  
 29363                                  	; 05/05/2019 - Retro DOS v4.0
 29364                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29365 000051FC 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29366 00005202 7508                    	JNZ	short around_deadlock 	; AN002;
 29367                                  
 29368 00005204 B003                            MOV     AL,3			; Display "^C"
 29369 00005206 E8EEC4                          CALL	BUFOUT
 29370 00005209 E88CC3                          CALL	CRLF
 29371                                  around_deadlock:
 29372 0000520C 16                              PUSH    SS
 29373 0000520D 1F                              POP     DS
 29374 0000520E 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29375 00005213 7403                            JZ      SHORT NOSWAP
 29376 00005215 E8B2E0                          CALL	SWAPBACK
 29377                                  NOSWAP:
 29378 00005218 FA                      	CLI				; Prepare to play with stack
 29379 00005219 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29380 0000521D 8B26[8405]              	MOV	SP,[USER_SP]
 29381 00005221 E82BB2                          CALL	restore_world       ; User registers now restored
 29382                                  
 29383                                  	; 30/07/2018 - Retro DOS v3.0 
 29384                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29385                                          ; 14/03/2018 - Retro DOS v2.0
 29386                                  	;MOV	BYTE [CS:INDOS],0	
 29387                                          ;MOV	BYTE [CS:ERRORMODE],0
 29388                                          ;MOV	[CS:ConC_Spsave],SP
 29389                                  	;clc	;30/07/2018
 29390                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29391                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29392                                  			; Return: return via RETF 2 with CF set
 29393                                  			; DOS will abort program with errorlevel 0
 29394                                  			; else
 29395                                  			; interrupted DOS call continues
 29396                                  
 29397                                  	; 05/05/2019 - Retro DOS v4.0
 29398                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29399                                  
 29400                                  	; CS was used to address these variables. We have to use DOSDATA
 29401                                  	
 29402 00005224 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29403                                  			; (pop es, after 'call restore_world')	
 29404 00005225 1E                      	push	ds
 29405                                  	;getdseg <ds>			; ds -> dosdata
 29406 00005226 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29407 0000522B C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29408 00005230 C606[2003]00            	mov	byte [ERRORMODE],0
 29409 00005235 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29410                                  	; User SP has changed because of push. Adjust for it
 29411 00005239 8306[3203]02            	add	word [ConC_Spsave],2
 29412                                  
 29413 0000523E 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29414 00005243 1F                       	pop	ds	; restore ds
 29415 00005244 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29416 00005246 F8                      	CLC				
 29417 00005247 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29418 00005249 EB06                    	jmp	short ctrlc_ret_addr
 29419                                  
 29420                                  	; 05/05/2019
 29421                                  do_low_int23:
 29422 0000524B F8                      	clc
 29423 0000524C 2EFF1E[B250]            	call	far [cs:LowInt23Addr]	
 29424                                  
 29425                                  	; 30/07/2018 
 29426                                  
 29427                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29428                                  
 29429                                  ; The user has returned to us. The circumstances we allow are:
 29430                                  ;
 29431                                  ;   IRET	We retry the operation by redispatching the system call
 29432                                  ;   CLC/RETF	POP the stack and retry
 29433                                  ;   ... 	Exit the current process with ^C exit
 29434                                  ;
 29435                                  ; User's may RETURN to us and leave interrupts on. 
 29436                                  ; Turn 'em off just to be sure
 29437                                  
 29438                                  ctrlc_ret_addr: ; 05/05/2019
 29439                                  
 29440 00005251 FA                      	CLI
 29441                                  
 29442                                  	; MSDOS 3.3 
 29443                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29444                                  	;PUSHF				; and the flags (maybe new call)
 29445                                  	;POP	AX
 29446                                  
 29447                                  	; 05/05/2019
 29448                                  	; MSDOS 6.0
 29449                                  
 29450                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29451                                  
 29452 00005252 50                      	push	ax
 29453 00005253 8CD8                    	mov	ax,ds
 29454                                  	;getdseg <ds>			; ds -> dosdata
 29455 00005255 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29456 0000525A A3[0A0D]                	mov	[TEMPSEG],ax
 29457 0000525D 58                      	pop	ax
 29458 0000525E A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29459 00005261 9C                      	pushf				; and the flags (maybe new call)
 29460 00005262 58                      	pop	ax
 29461                                  
 29462                                  ; See if the input stack is identical to the output stack
 29463                                  
 29464                                  	; MSDOS 3.3
 29465                                  	;CMP	SP,[CS:ConC_Spsave]
 29466                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29467                                  
 29468                                  	; MSDOS 6.0
 29469 00005263 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29470 00005267 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29471                                  
 29472                                  ; Repeat the operation by redispatching the system call.
 29473                                  
 29474                                  ctrlc_repeat:
 29475                                  	; MSDOS 3.3
 29476                                  	;MOV	AX,[CS:USER_IN_AX]
 29477                                  	; 05/05/2019
 29478                                  	; MSDOS 6.0
 29479 00005269 A1[3A03]                	mov	ax,[USER_IN_AX]
 29480 0000526C 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29481                                  	; MSDOS 3.3 & MSDOS 6.0 
 29482                                  	;transfer COMMAND
 29483                                  COMMANDJ:
 29484 00005270 E994B0                  	JMP	COMMAND
 29485                                  
 29486                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29487                                  ; RETF'd leaving some flags on the stack and examine the input
 29488                                  
 29489                                  ctrlc_try_new:
 29490 00005273 83C402                  	ADD	SP,2			; pop those flags
 29491                                  	;;test	ax,1
 29492                                  	;TEST	AX,f_Carry		; did he return with carry?
 29493 00005276 A801                    	test	al,f_Carry ; test al,1
 29494 00005278 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29495                                  
 29496                                  	; MSDOS 6.0
 29497 0000527A 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29498                                  
 29499                                  	; Well...  time to abort the user.  
 29500                                  	; Signal a ^C exit and use the EXIT system call..
 29501                                  
 29502                                  ctrlc_abort:
 29503                                  	; MSDOS 3.3
 29504                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29505                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29506                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29507                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29508                                  	;;JMP	SHORT COMMANDJ
 29509                                  	;JMP	COMMAND
 29510                                  
 29511                                  	; 05/05/2019 - Retro DOS v4.0
 29512                                  	; MSDOS 6.0
 29513 0000527E B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29514 00005281 1E                      	push	ds
 29515                                  	;getdseg <ds>			; ds -> dosdata
 29516 00005282 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29517 00005287 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29518 0000528C 1F                      	pop	ds
 29519                                  	;transfer COMMAND		; give up by faking $EXIT
 29520 0000528D EBE1                    	JMP	SHORT COMMANDJ
 29521                                  	;JMP	COMMAND
 29522                                  
 29523                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29524                                  ;----------------------------------------------------------------------------
 29525                                  ;
 29526                                  ; Procedure Name : DIVOV
 29527                                  ;
 29528                                  ; Default handler for division overflow trap
 29529                                  ;
 29530                                  ;----------------------------------------------------------------------------
 29531                                  
 29532                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29533                                  DIVOV: 
 29534                                  	; 05/05/2019 - Retro DOS v4.0
 29535                                  	; 30/07/2018
 29536                                  	; 07/07/2018 - Retro DOS v3.0
 29537 0000528F BE[A209]                	mov	si,DIVMES
 29538 00005292 2E8B1E[B509]            	mov	bx,[cs:DivMesLen]
 29539                                  	;mov	ax,cs
 29540                                  	;mov	ss,ax
 29541                                  	; 05/05/2019
 29542                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29543 00005297 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29544 0000529C BC[A007]                	mov     sp,AUXSTACK
 29545                                  	;call	RealDivOv ; MSDOS 3.3
 29546 0000529F E80200                  	call	_OUTMES ; MSDOS 6.0
 29547 000052A2 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29548                                  
 29549                                  ; 30/07/2018
 29550                                  
 29551                                  ; MSDOS 6.0
 29552                                  ;---------------------------------------------------------------------------
 29553                                  ;
 29554                                  ; Procedure Name : OutMes
 29555                                  ;
 29556                                  ;
 29557                                  ; OutMes: perform message output
 29558                                  ; Inputs:   SS:SI points to message
 29559                                  ;	    BX has message length
 29560                                  ; Outputs:  message to BCON
 29561                                  ;
 29562                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29563                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29564                                  ;NB. This procedure is called only from DIVOV. -SR
 29565                                  ;
 29566                                  ;---------------------------------------------------------------------------
 29567                                  
 29568                                  ;MSDOS 3.3
 29569                                  ;---------------------------------------------------------------------------
 29570                                  ; RealDivOv: perform actual divide overflow stuff.
 29571                                  ; Inputs:   none
 29572                                  ; Outputs:  message to BCON
 29573                                  ;---------------------------------------------------------------------------
 29574                                  
 29575                                  	; 05/05/2019 - Retro DOS v4.0
 29576                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29577                                  
 29578                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29579                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29580                                  
 29581                                  ;---------------------------------------------------------------------------
 29582                                  ;
 29583                                  ; Procedure Name : OutMes
 29584                                  ;
 29585                                  ; OutMes: perform message output
 29586                                  ; Inputs:   SS:SI points to message
 29587                                  ;	    BX has message length
 29588                                  ; Outputs:  message to BCON
 29589                                  ;
 29590                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29591                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29592                                  ;NB. This procedure is called only from DIVOV. -SR
 29593                                  ;
 29594                                  ;---------------------------------------------------------------------------
 29595                                  
 29596                                  	; 30/07/2018
 29597                                  	; MSDOS 6.0
 29598                                  _OUTMES:
 29599                                  	; MSDOS 3.3
 29600                                  ;RealDivOv:
 29601                                  	; 07/07/2018 - Retro DOS v3.0
 29602                                          ;Context ES
 29603 000052A4 16                      	push	ss ; 05/05/2019
 29604                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29605 000052A5 07                      	POP	ES
 29606                                          ;Context DS
 29607 000052A6 16                      	push	ss ; 05/05/2019	
 29608                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29609 000052A7 1F                      	POP	DS
 29610 000052A8 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29611 000052AD C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29612 000052B2 C706[9503]0000                  MOV     WORD [DSKSTST],0
 29613                                  	; BX = [DivMesLen] = 19
 29614 000052B8 891E[A403]                      MOV     [DSKSTCNT],BX
 29615 000052BC BB[9203]                        MOV     BX,DSKSTCALL
 29616 000052BF 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29617                                  	; 08/09/2018
 29618                                  	;mov	[DEVIOBUF_PTR],si
 29619                                  	; MSDOS 6.0
 29620                                  					; CS is used for string, fill in 
 29621                                  					; segment address 
 29622 000052C3 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29623                                  
 29624 000052C7 C536[3200]                      LDS     SI,[BCON]
 29625 000052CB E8ADF3                          CALL	DEVIOCALL2
 29626                                  
 29627                                  	;; 14/03/2018
 29628                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29629                                  	;; 08/09/2018
 29630                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29631                                          ;MOV	WORD [CS:DSKSTCNT],1
 29632                                          
 29633                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29634                                  
 29635                                  	; ES still points to DOSDATA. ES is
 29636                                  					; not destroyed by deviocall2. So use
 29637                                  					; ES override.
 29638                                  
 29639 000052CE 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29640 000052D5 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29641                                  
 29642 000052DC C3                      	RETN
 29643                                  
 29644                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29645                                  ;---------------------------------------------------------------------------
 29646                                  ;
 29647                                  ; Procedure Name : CHARHARD
 29648                                  ;
 29649                                  ;
 29650                                  ; Character device error handler
 29651                                  ; Same function as HARDERR
 29652                                  ;
 29653                                  ;---------------------------------------------------------------------------
 29654                                  
 29655                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29656                                  CHARHARD:
 29657                                  	; 05/05/2019 - Retro DOS v4.0
 29658                                  	; 30/07/2018
 29659                                  	; 08/07/2018 - Retro DOS v3.0
 29660                                  
 29661                                  	; MSDOS 6.0
 29662                                  		   			; M024 - start
 29663 000052DD 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29664                                  	;jne	short @f		; Y: allow fail
 29665 000052E3 750B                    	jne	short chard1
 29666                                  
 29667 000052E5 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29668                                  
 29669 000052E8 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29670 000052EE 7503                    	jnz	short ctrlp		; Y: 
 29671                                  ;@@:
 29672                                  chard1:					; M024 - end
 29673                                  	; MSDOS 6.0 & MSDOS 3.3
 29674                                  
 29675                                  ; Character device error handler
 29676                                  ; Same function as HARDERR
 29677                                  
 29678                                  	;or	ah,38h
 29679 000052F0 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29680                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29681 000052F3 368826[4B03]            	mov	[SS:ALLOWED],ah
 29682                                  
 29683                                  	; 15/03/2018
 29684 000052F8 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29685 000052FD 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29686 00005302 56                              PUSH    SI
 29687                                  	;and	di,0FFh
 29688 00005303 81E7FF00                        AND     DI,STECODE
 29689 00005307 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29690 00005309 E86400                          CALL    FATALC
 29691 0000530C 5E                              POP     SI
 29692                                  	;return
 29693 0000530D C3                              RETN
 29694                                  
 29695                                  ;---------------------------------------------------------------------------
 29696                                  ;
 29697                                  ; Procedure Name : HardErr
 29698                                  ;
 29699                                  ; Hard disk error handler. Entry conditions:
 29700                                  ;	DS:BX = Original disk transfer address
 29701                                  ;	DX = Original logical sector number
 29702                                  ;	CX = Number of sectors to go (first one gave the error)
 29703                                  ;	AX = Hardware error code
 29704                                  ;	DI = Original sector transfer count	
 29705                                  ;	ES:BP = Base of drive parameters
 29706                                  ;	[READOP] = 0 for read, 1 for write
 29707                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29708                                  ; Output:
 29709                                  ;	[FAILERR] will be set if user responded FAIL
 29710                                  ;
 29711                                  ;--------------------------------------------------------------------------
 29712                                  
 29713                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29714                                  HARDERR:
 29715                                  	; 05/05/2019 - Retro DOS v4.0
 29716                                  	; 30/07/2018
 29717                                  	; 08/07/2018 - Retro DOS v3.0
 29718 0000530E 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29719                                          ;and	di,0FFh
 29720 0000530F 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29721                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29722                                  	;cmp	di,0
 29723 00005313 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29724 00005316 750A                            JNZ     short NOSETWRPERR
 29725 00005318 50                              PUSH    AX
 29726                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29727                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29728                                          ;;MOV	AL,[ES:BP+0]
 29729                                  	; 15/12/2022
 29730 00005319 268A4600                	mov	al,[ES:BP]
 29731                                          	; 15/03/2018
 29732 0000531D 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29733 00005321 58                              POP     AX
 29734                                  NOSETWRPERR:
 29735 00005322 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29736 00005324 01C2                            ADD     DX,AX                   ; First sector number to retry
 29737 00005326 52                              PUSH    DX
 29738                                  	; 08/07/2018
 29739                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29740 00005327 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29741 0000532B 5A                              POP     DX
 29742 0000532C 01C3                            ADD     BX,AX                   ; First address for retry
 29743 0000532E 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29744                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29745 00005330 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29746 00005334 721A                            JB      SHORT ERRINT
 29747 00005336 FEC4                            INC     AH                      ; Flag for FAT
 29748                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29749                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29750 00005338 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29751 0000533C 7308                    	JAE	short TESTDIR 		; No
 29752                                  		 ; Err in FAT must force recomp of freespace
 29753                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29754                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29755 0000533E 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29756 00005344 EB0A                    	JMP	SHORT ERRINT
 29757                                  TESTDIR:
 29758 00005346 FEC4                            INC     AH
 29759                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29760 00005348 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29761 0000534C 7202                            JB      SHORT ERRINT
 29762 0000534E FEC4                            INC     AH                      ; Must be in data area
 29763                                  ERRINT:
 29764 00005350 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29765 00005352 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29766                                  
 29767                                  	; 15/08/2018
 29768                                  					; SS override for allowed and EXITHOLD
 29769 00005357 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29770                                  
 29771                                          ;entry   FATAL
 29772                                  FATAL:
 29773                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29774                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29775                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29776                                  	; 15/12/2022
 29777 0000535C 268A4600                	MOV	AL,[ES:BP]        
 29778                                  
 29779                                  	;entry   FATAL1
 29780                                  FATAL1:  
 29781                                  	; 15/03/2018      
 29782 00005360 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29783 00005365 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29784                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29785                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29786 0000536A 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29787 0000536E 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29788                                  
 29789                                  	; DI has the INT-24-style extended error. We now map the error code 
 29790                                  	; for this into the normalized get extended error set by using the 
 29791                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29792                                  	; the device returned codes and leave all others beyond the look up 
 29793                                  	; table alone.
 29794                                  
 29795                                  	; 08/07/2018 - Retro DOS v3.0
 29796                                  FATALC:
 29797 00005370 E89701                  	call	SET_I24_EXTENDED_ERROR
 29798                                  	;cmp	di,0Ch
 29799 00005373 83FF0C                  	CMP	DI,error_I24_gen_failure
 29800 00005376 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29801 00005378 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29802                                  					;  Only come via GetExtendedError
 29803                                  ;** ----------------------------------------------------------------
 29804                                  ;
 29805                                  ; Entry point used by REDIRector on Network I 24 errors.
 29806                                  ;
 29807                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29808                                  ;
 29809                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29810                                  ;     EXITHOLD set for restore of ES:BP.
 29811                                  ; ------------------------------------------------------------------
 29812                                  	;entry	NET_I24_ENTRY
 29813                                  NET_I24_ENTRY:
 29814                                  GOT_RIGHT_CODE:
 29815 0000537B 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29816 00005381 7404                            JZ	SHORT NoSetFail
 29817 00005383 B003                    	MOV	AL,3
 29818 00005385 EB6C                    	JMP	short FailRet
 29819                                  NoSetFail:
 29820 00005387 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29821 0000538C 16                              PUSH	SS
 29822 0000538D 07                              POP	ES
 29823                                      
 29824                                  	; Wango!!! We may need to free some user state info... In 
 29825                                  	; particular, we may have locked down a JFN for a user and he may 
 29826                                  	; NEVER return to us. Thus,we need to free it here and then 
 29827                                  	; reallocate it when we come back.
 29828                                  
 29829 0000538E 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29830 00005394 740C                    	JZ	short _NoFree
 29831 00005396 1E                      	push	ds
 29832 00005397 56                      	push	si
 29833 00005398 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29834 0000539D C604FF                  	MOV	BYTE [SI],0FFH
 29835 000053A0 5E                      	pop	si
 29836 000053A1 1F                      	pop	ds
 29837                                  
 29838                                  _NoFree:
 29839 000053A2 FA                      	CLI
 29840                                  					; Prepare to play with stack
 29841 000053A3 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29842 000053A8 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29843                                  
 29844                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29845                                  
 29846                                  	;; Extended Open hooks
 29847                                  					; AN000;IFS.I24 error disabled
 29848                                  	;test	byte [ss:EXTOPEN_ON],2
 29849 000053AD 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29850 000053B3 7404                    	JZ	short i24yes		; AN000;IFS.no
 29851                                  faili24:				; AN000;
 29852 000053B5 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29853 000053B7 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29854                                  i24yes: 				; AN000;
 29855                                  	;; Extended Open hooks
 29856                                  
 29857 000053B9 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29858 000053BE 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29859                                  
 29860                                  	;;int	24h	
 29861                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29862                                  					; must preserve ES
 29863                                  	; 05/05/2019
 29864 000053C3 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29865 000053C9 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29866 000053CB CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29867                                  					; must preserve ES
 29868 000053CD EB05                    	jmp	short criterr_ret_addr
 29869                                  
 29870                                  do_low_int24:
 29871                                  	; 05/05/2019
 29872                                  	; MSDOS 6.0
 29873 000053CF 2EFF1E[B650]            	call    far [cs:LowInt24Addr]
 29874                                  criterr_ret_addr:
 29875 000053D4 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29876 000053D9 268C16[8605]                    MOV     [ES:USER_SS],SS
 29877 000053DE 8CC5                            MOV     BP,ES
 29878 000053E0 8ED5                            MOV     SS,BP
 29879                                  passi24:
 29880 000053E2 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29881 000053E7 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29882 000053EC 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29883 000053F2 FB                              STI
 29884                                  FailRet:
 29885 000053F3 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29886                                  	
 29887                                  	; 08/07/2018
 29888                                  
 29889                                  	; Triage the user's reply.
 29890                                  
 29891 000053F8 3C01                    	CMP	AL,1
 29892 000053FA 723D                    	JB	short CheckIgnore	; 0 => ignore
 29893 000053FC 7445                    	JZ	short CheckRetry	; 1 => retry
 29894 000053FE 3C03                    	CMP	AL,3			; 3 => fail
 29895 00005400 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29896                                  
 29897                                  	; The reply was fail. See if we are allowed to fail.
 29898                                  
 29899                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29900                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29901                                  	;test	byte [ss:ALLOWED],8
 29902 00005402 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29903 00005408 7443                    	jz	short DoAbort	; No, do abort
 29904                                  DoFail:
 29905 0000540A B003                    	MOV	AL,3		; just in case...
 29906                                  				; AN000;EO. I24 error disabled
 29907                                  	; 05/05/2019
 29908                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29909 0000540C 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29910 00005412 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29911                                  	
 29912 00005414 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29913                                  CleanUp:
 29914 00005419 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29915 0000541F 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29916                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29917                                  	;jnz	short CleanUp2
 29918                                  	;retn
 29919                                  	; 17/12/2022
 29920 00005425 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29921                                  CleanUp2:
 29922 00005427 1E                      	push	ds
 29923 00005428 56                      	push	si
 29924 00005429 50                      	push	ax
 29925 0000542A 36A1[AA05]              	MOV	AX,[ss:SFN]
 29926 0000542E 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29927 00005433 8804                    	MOV	[SI],AL
 29928 00005435 58                      	pop	ax
 29929 00005436 5E                      	pop	si
 29930 00005437 1F                      	pop	ds
 29931                                  Cleanup_retn:
 29932 00005438 C3                      	retn
 29933                                  
 29934                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29935                                  
 29936                                  CheckIgnore:
 29937                                  	;test	byte [ss:ALLOWED],20h
 29938 00005439 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29939 0000543F 74C9                    	jz	short DoFail			 ; No, do fail
 29940 00005441 EBD6                    	jmp	short CleanUp
 29941                                  
 29942                                  	; The reply was RETRY. See if we are allowed to retry.
 29943                                  
 29944                                  CheckRetry:
 29945                                  	;test	byte [ss:ALLOWED],10h
 29946 00005443 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29947 00005449 74BF                    	jz	short DoFail			; No, do fail
 29948 0000544B EBCC                    	JMP	short CleanUp
 29949                                  
 29950                                  	; The reply was ABORT.
 29951                                  DoAbort:
 29952 0000544D 16                      	push	ss
 29953 0000544E 1F                      	pop	ds
 29954                                  
 29955 0000544F 803E[5703]00            	CMP	byte [CONSWAP],0
 29956 00005454 7403                    	JZ	short NOSWAP2
 29957 00005456 E871DE                  	call	SWAPBACK
 29958                                  NOSWAP2:
 29959                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29960                                  	; turn this abort into a fail.
 29961                                  
 29962                                  	;test	[fAborting],0FFh
 29963                                  	;jnz	short DoFail
 29964                                  
 29965 00005459 803E[5903]00            	cmp	byte [fAborting],0
 29966 0000545E 75AA                    	JNZ	short DoFail
 29967                                  
 29968                                  	; Set return code
 29969                                  
 29970 00005460 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29971 00005465 30C0                    	XOR	AL,AL
 29972                                  
 29973                                  	; we are truly aborting the process. Go restore information from 
 29974                                  	; the PDB as necessary.
 29975                                  
 29976 00005467 E9850D                  	jmp	exit_inner
 29977                                  
 29978                                  ;** --------------------------------------------------------------------------
 29979                                  ;
 29980                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29981                                  ; different, then an old-style return is performed. If they are the same,
 29982                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29983                                  ; the source of the terminate addresses.
 29984                                  ;
 29985                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29986                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29987                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29988                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29989                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29990                                  ; operation. In essence, we dis-allow the abort response.
 29991                                  ;
 29992                                  ; output:   none.
 29993                                  ; ----------------------------------------------------------------------------
 29994                                  
 29995                                  	;entry	reset_environment
 29996                                  	
 29997                                  reset_environment:
 29998                                  	; 30/07/2018 - Retro DOS v3.0
 29999                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30000                                  
 30001                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30002                                  
 30003 0000546A 1E                      	PUSH	DS			; save PDB of process
 30004                                  
 30005                                  	; There are no critical sections in force. Although we may enter 
 30006                                  	; here with critical sections locked down, they are no longer 
 30007                                  	; relevant. We may safely free all allocated resources.
 30008                                  
 30009 0000546B B482                    	MOV	AH,82h
 30010                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30011                                  	;int	2Ah 	
 30012 0000546D CD2A                    	INT	int_IBM
 30013                                  
 30014                                  					; SS override
 30015 0000546F 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30016                                  
 30017                                  					; DOS 4.00 doesn't need it
 30018                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30019                                  					; Allow REDIR to clear some stuff
 30020                                  					; On process exit.
 30021 00005475 B82211                  	mov     ax, 1122h
 30022 00005478 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30023                                  			; SS = DOS CS
 30024                                  	;mov	al,22h	
 30025 0000547A B022                    	MOV	AL,int_terminate
 30026 0000547C E81ABA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30027                                  
 30028 0000547F 59                      	POP	CX			; get ThisPDB
 30029 00005480 06                      	push	es
 30030 00005481 53                      	push	bx			; save return address
 30031                                  
 30032 00005482 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30033 00005487 8EDB                    	MOV	DS,BX
 30034 00005489 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30035                                  
 30036                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30037                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30038                                  	; is not Exit_keep_process
 30039                                  	
 30040 0000548C 39D8                    	CMP	AX,BX
 30041 0000548E 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30042 00005490 39CB                    	CMP	BX,CX
 30043 00005492 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30044 00005494 50                      	PUSH	AX			; save parent
 30045                                  
 30046                                  					; SS override
 30047                                  	;cmp	byte [SS:EXIT_TYPE],3
 30048 00005495 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30049 0000549B 7406                    	JZ	short reset_to_parent 	; keeping this process
 30050                                  
 30051                                  	; We are truly removing a process. Free all allocation blocks 
 30052                                  	; belonging to this PDB
 30053                                  
 30054                                  	;invoke	arena_free_process
 30055 0000549D E8870D                  	call	arena_free_process
 30056                                  
 30057                                  	; Kill off remainder of this process. Close file handles and signal 
 30058                                  	; to relevant network folks that this process is dead. Remember that 
 30059                                  	; CurrentPDB is STILL the current process!
 30060                                  
 30061                                  	;invoke	DOS_ABORT
 30062 000054A0 E82EDA                  	call	DOS_ABORT
 30063                                  
 30064                                  reset_to_parent:
 30065                                  					; SS override
 30066 000054A3 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30067                                  
 30068                                  reset_return:				; come here for normal return
 30069                                  	;Context DS			; DS is used to refer to DOSDATA  
 30070 000054A8 16                      	push	ss
 30071 000054A9 1F                      	pop	ds	
 30072                                  
 30073 000054AA B0FF                    	MOV	AL,-1
 30074                                  
 30075                                  	; make sure that everything is clean In this case ignore any errors, 
 30076                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30077                                  
 30078                                  	;EnterCrit critDisk
 30079 000054AC E863BE                  	call	ECritDisk
 30080                                  	;invoke	FLUSHBUF
 30081 000054AF E8A505                  	call	FLUSHBUF
 30082                                  	;LeaveCrit critDisk
 30083 000054B2 E878BE                  	call	LCritDisk
 30084                                  
 30085                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30086                                  
 30087 000054B5 E883F7                  	call	CHECK_VIRT_OPEN
 30088 000054B8 FA                      	CLI
 30089 000054B9 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30090 000054BE C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30091 000054C3 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30092 000054C8 8F06[8005]              	POP	WORD [EXITHOLD]
 30093 000054CC 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30094                                  
 30095                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30096                                  
 30097 000054D0 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30098 000054D4 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30099 000054D8 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30100                                  
 30101 000054DC E870AF                  	call	restore_world
 30102                                  
 30103                                  	; 05/05/2019
 30104 000054DF 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30105                                  
 30106                                  	; MSDOS 6.0
 30107 000054E0 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30108 000054E1 8CD8                    	mov	ax,ds			; and not on stack.
 30109                                  	;getdseg <ds>			; ds -> dosdata
 30110 000054E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30111 000054E8 A3[0A0D]                	mov	[TEMPSEG],ax
 30112 000054EB 58                      	pop	ax
 30113                                  					; set up ds to DOSDATA
 30114                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30115 000054EC A3[8405]                	mov	[USER_SP],ax
 30116                                  
 30117 000054EF 58                      	POP	AX			; suck off CS:IP of interrupt...
 30118 000054F0 58                      	POP	AX
 30119 000054F1 58                      	POP	AX
 30120                                  
 30121                                  ; M011 : BEGIN
 30122                                  
 30123                                  	; MSDOS 3.3
 30124                                  ;	MOV	AX,0F202h	; STI
 30125                                  
 30126                                  	; MSDOS 6.0
 30127 000054F2 9F                      	LAHF
 30128 000054F3 86E0                    	XCHG	AH,AL
 30129 000054F5 2402                    	AND	AL,2
 30130 000054F7 B4F2                    	MOV	AH,0F2h
 30131                                  
 30132                                  ; M011 : END
 30133                                  
 30134                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30135 000054F9 50                      	PUSH	AX
 30136                                   
 30137                                  	;PUSH	word [CS:EXITHOLD+2]
 30138                                  	;PUSH	word [CS:EXITHOLD]
 30139                                  	
 30140                                  	; MSDOS 6.0
 30141 000054FA FF36[8205]              	PUSH	word [EXITHOLD+2]
 30142 000054FE FF36[8005]              	PUSH	word [EXITHOLD]
 30143                                  
 30144                                  	;MOV	AX,[CS:USER_SP]
 30145                                  
 30146                                  	; MSDOS 6.0
 30147 00005502 A1[8405]                	MOV	AX,[USER_SP]
 30148 00005505 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30149                                  
 30150 00005509 CF                      	IRET			; Long return back to user terminate address
 30151                                  
 30152                                  ;---------------------------------------------------------------------------
 30153                                  ;
 30154                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30155                                  ;
 30156                                  ; This routine handles extended error codes.
 30157                                  ; Input : DI = error code from device
 30158                                  ; Output: All EXTERR fields are set
 30159                                  ;
 30160                                  ;--------------------------------------------------------------------------
 30161                                  
 30162                                  SET_I24_EXTENDED_ERROR:
 30163 0000550A 50                      	PUSH	AX
 30164                                  					; ErrMap24End is in DOSDATA
 30165 0000550B B8[BB0E]                	MOV	AX,ErrMap24End
 30166 0000550E 2D[AB0E]                	SUB	AX,ErrMap24
 30167                                  					; Change to dosdata to access 
 30168                                  					; ErrMap24 and EXTERR -SR
 30169                                  	; 05/05/2019 - Retro DOS v4.0
 30170                                  	
 30171                                  	; MSDOS 6.0
 30172 00005511 1E                      	push	ds
 30173                                  	;getdseg <ds>			; ds ->dosdata
 30174 00005512 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30175                                  
 30176                                  	; AX is the index of the first unavailable error. Do not translate 
 30177                                  	; if greater or equal to AX.
 30178                                  
 30179 00005517 39C7                    	CMP	DI,AX
 30180 00005519 89F8                    	MOV	AX,DI
 30181 0000551B 7306                    	JAE	short NoTrans
 30182                                  
 30183                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30184 0000551D 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30185 00005521 30E4                    	XOR	AH,AH
 30186                                  NoTrans:
 30187                                  	;MOV	[CS:EXTERR],AX
 30188 00005523 A3[2403]                	mov	[EXTERR],AX
 30189 00005526 1F                      	pop	ds
 30190                                  	;assume	ds:nothing
 30191 00005527 58                      	POP	AX
 30192                                  
 30193                                  	; Now Extended error is set correctly. Translate it to get correct 
 30194                                  	; error locus class and recommended action.
 30195                                  
 30196 00005528 56                      	PUSH	SI
 30197                                  					; ERR_TABLE_24 is in DOSCODE 
 30198 00005529 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30199 0000552C E84FB1                  	call	CAL_LK			; Set other extended error fields
 30200 0000552F 5E                      	POP	SI
 30201 00005530 C3                      	retn
 30202                                  
 30203                                  ;============================================================================
 30204                                  ; FAT.ASM, MSDOS 6.0, 1991
 30205                                  ;============================================================================
 30206                                  ; 30/07/2018 - Retro DOS v3.0
 30207                                  ; 20/05/2019 - Retro DOS v4.0
 30208                                  
 30209                                  ;	TITLE	FAT - FAT maintenance routines
 30210                                  ;	NAME	FAT
 30211                                  
 30212                                  ;**	FAT.ASM
 30213                                  ;----------------------------------------------------------------------------
 30214                                  ;	Low level local device routines for performing disk change sequence,
 30215                                  ;	setting cluster validity, and manipulating the FAT
 30216                                  ;
 30217                                  ;	IsEof
 30218                                  ;	UNPACK
 30219                                  ;	PACK
 30220                                  ;	MAPCLUSTER
 30221                                  ;	FATREAD_SFT
 30222                                  ;	FATREAD_CDS
 30223                                  ;	FAT_operation
 30224                                  ;
 30225                                  ;	Revision history:
 30226                                  ;
 30227                                  ;	  AN000  version Jan. 1988
 30228                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30229                                  ;
 30230                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30231                                  ;	       from CL0FATENTRY rather than disk.
 30232                                  
 30233                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30234                                  
 30235                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30236                                  ;----------------------------------------------------------------------------
 30237                                  ;
 30238                                  ; Procedure Name : IsEOF
 30239                                  ;
 30240                                  ; IsEOF - check the fat value in BX for eof.
 30241                                  ;
 30242                                  ;   Inputs:	ES:BP point to DPB
 30243                                  ;		BX has fat value
 30244                                  ;   Outputs:	JAE eof
 30245                                  ;   Registers modified: none
 30246                                  ;
 30247                                  ;---------------------------------------------------------------------------
 30248                                  
 30249                                  IsEOF:
 30250                                  	;cmp	word [es:bp+0Dh],0FF6h
 30251 00005531 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30252 00005537 730B                    	JAE	short EOF16			; yes, check for eof there
 30253                                  
 30254                                  ;J.K. 8/27/86
 30255                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30256                                  ;of any media that has "F0"(Other) as a MediaByte.
 30257                                  ;Hopely, this does not create any side effect for those who may use any value
 30258                                  ;other than "FF8-FFF" as an EOF for their own file.
 30259                                  
 30260 00005539 81FBF00F                	cmp	bx,0FF0h
 30261 0000553D 7404                    	je	short IsEOF_other
 30262                                  
 30263 0000553F 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30264                                  IsEOF_other:
 30265 00005543 C3                      	retn
 30266                                  EOF16:
 30267 00005544 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30268 00005547 C3                      	retn
 30269                                  
 30270                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30271                                  
 30272                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30273                                  ;---------------------------------------------------------------------------
 30274                                  ;
 30275                                  ; Procedur Name : UNPACK
 30276                                  ;
 30277                                  ; Inputs:
 30278                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30279                                  ;	ES:BP = Base of drive parameters
 30280                                  ; Outputs:
 30281                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30282                                  ;	Zero set means DI=0 (free cluster)
 30283                                  ;	Carry set means error (currently user FAILed to I 24)
 30284                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30285                                  ;
 30286                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30287                                  ;
 30288                                  ;----------------------------------------------------------------------------
 30289                                  	
 30290                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30291                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30292                                  
 30293                                  	; 20/05/2019 - Retro DOS v4.0
 30294                                  UNPACK:
 30295                                  	; MSDOS 6.0			; M014 - Start
 30296 00005548 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30297 0000554A 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30298 0000554C 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30299 00005550 09FF                    	or	di,di 			; return z if di=0
 30300 00005552 C3                      	retn				; done
 30301                                  up_cont:				; M014 - End
 30302                                  	; MSDOS 3.3 & MSDOS 6.0
 30303                                  	;cmp	bx,[es:bp+0Dh]
 30304 00005553 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30305 00005557 7726                    	JA	short HURTFAT
 30306 00005559 E8D600                  	CALL	MAPCLUSTER
 30307 0000555C 721E                    	jc	short _DoContext
 30308 0000555E 8B3D                    	MOV	DI,[DI]
 30309 00005560 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30310 00005562 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30311 00005566 81FEF60F                	CMP	SI,4096-10
 30312 0000556A 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30313 0000556C 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30314 0000556E EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30315                                  High12:
 30316 00005570 D1EF                    	SHR	DI,1
 30317 00005572 D1EF                    	SHR	DI,1
 30318 00005574 D1EF                    	SHR	DI,1
 30319 00005576 D1EF                    	SHR	DI,1
 30320                                  Unpack12:
 30321 00005578 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30322                                  _DoContext:
 30323 0000557C 16                      	PUSH	SS
 30324 0000557D 1F                      	POP	DS
 30325 0000557E C3                      	retn
 30326                                  HURTFAT:
 30327                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30328                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30329 0000557F 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30330 00005585 50                      	PUSH	AX
 30331 00005586 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30332                                  
 30333                                  ;hkn; SS override
 30334 00005588 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30335                                  ;
 30336                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30337                                  ;
 30338 0000558E BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30339 00005591 E8C8FD                  	call	FATAL
 30340 00005594 3C03                    	CMP	AL,3
 30341 00005596 F8                      	CLC
 30342 00005597 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30343 00005599 F9                      	STC				; User said FAIL
 30344                                  OKU_RET:
 30345 0000559A 58                      	POP	AX
 30346                                  hurtfat_retn:
 30347 0000559B C3                      	retn
 30348                                  
 30349                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30350                                  
 30351                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30352                                  ;----------------------------------------------------------------------------
 30353                                  ;
 30354                                  ; Procedure Name : PACK
 30355                                  ;
 30356                                  ; Inputs:
 30357                                  ;	BX = Cluster number
 30358                                  ;	DX = Data
 30359                                  ;	ES:BP = Pointer to drive DPB
 30360                                  ; Outputs:
 30361                                  ;	The data is stored in the FAT at the given cluster.
 30362                                  ;	SI,DX,DI all destroyed
 30363                                  ;	Carry set means error (currently user FAILed to I 24)
 30364                                  ;	No other registers affected
 30365                                  ;
 30366                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30367                                  ;
 30368                                  ;---------------------------------------------------------------------------
 30369                                  
 30370                                  	; 02/01/2024
 30371                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30372                                  	; 20/05/2019 - Retro DOS v4.0
 30373                                  PACK:
 30374                                  	; MSDOS 6.0			; M014 - start
 30375 0000559C 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30376 0000559E 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30377 000055A0 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30378 000055A4 C3                      	retn				; done
 30379                                  p_cont:					; M014 - end
 30380                                  	; MSDOS 3.3 & MSDOS 6.0
 30381 000055A5 E88A00                  	CALL	MAPCLUSTER
 30382 000055A8 72D2                    	JC	short _DoContext
 30383 000055AA 8B35                    	MOV	SI,[DI]
 30384 000055AC 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30385 000055AE 51                      	PUSH	CX			; move data to upper 12 bits
 30386 000055AF B104                    	MOV	CL,4
 30387 000055B1 D3E2                    	SHL	DX,CL
 30388 000055B3 59                      	POP	CX
 30389 000055B4 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30390 000055B7 EB14                    	JMP	SHORT PACKIN
 30391                                  ALIGNED:
 30392                                  	;cmp	word [es:bp+0Dh],0FF6h
 30393 000055B9 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30394 000055BF 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30395 000055C1 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30396 000055C5 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30397 000055C9 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30398                                  Pack16:
 30399 000055CB 31F6                    	XOR	SI,SI			; MZ no original data
 30400                                  PACKIN:
 30401 000055CD 09D6                    	OR	SI,DX
 30402 000055CF 8935                    	MOV	[DI],SI
 30403                                  
 30404                                  ;hkn; SS override
 30405 000055D1 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30406                                  	; MSDOS 6.0
 30407 000055D6 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30408                                  					;LB. if already dirty		  ;AN000;
 30409 000055DA 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30410                                  	; 10/06/2019
 30411 000055DC E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30412                                  	
 30413                                  	;or	byte [si+5],40h
 30414 000055DF 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30415                                  yesdirty11:				;LB.				;AN000;
 30416                                  ;hkn; SS override
 30417 000055E3 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30418                                  ;hkn; SS is DOSDATA
 30419 000055E9 16                      	push	ss
 30420 000055EA 1F                      	pop	ds
 30421 000055EB 74AE                    	jz	short hurtfat_retn	; Carry clear
 30422 000055ED 50                      	PUSH	AX
 30423 000055EE 53                      	PUSH	BX
 30424 000055EF 51                      	PUSH	CX
 30425 000055F0 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30426 000055F3 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30427                                  	;;add	si,16 ; MSDOS 3.3
 30428                                  	;add	si,20 ; MSDOS 6.0
 30429 000055F7 83C614                  	ADD	SI,BUFINSIZ
 30430 000055FA 8824                    	MOV	[SI],AH
 30431                                  ;hkn; SS is DOSDATA
 30432                                  	;Context DS
 30433 000055FC 16                      	push	ss
 30434 000055FD 1F                      	pop	ds
 30435                                  	
 30436 000055FE 50                      	PUSH	AX
 30437                                  	
 30438                                  	; MSDOS 6.0
 30439 000055FF 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30440 00005603 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30441                                  
 30442                                  	; MSDOS 3.3 & MSDOS 6.0
 30443 00005607 8B16[9005]              	MOV	DX,[CLUSSEC]
 30444                                  
 30445                                  	;MOV	SI,1	  ; *
 30446                                  	;XOR	AL,AL     ; *
 30447                                  	;call	GETBUFFRB ; *
 30448                                  	; 22/09/2023
 30449 0000560B E83E03                  	call	GETBUFFRA ; *
 30450                                  
 30451 0000560E 58                      	POP	AX
 30452 0000560F 721B                    	JC	short POPP_RET
 30453 00005611 C53E[E205]              	LDS	DI,[CURBUF]
 30454                                  	
 30455                                  	; MSDOS 6.0
 30456 00005615 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30457                                  					;LB. if already dirty		  ;AN000;
 30458 00005619 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30459 0000561B E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30460                                  	
 30461                                  	;or	byte [di+5],40h
 30462 0000561E 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30463                                  yesdirty12:
 30464                                  	;;add	di,16
 30465                                  	;add	di,20 ; MSDOS 6.0
 30466                                  	; 02/01/2024
 30467                                  	;ADD	DI,BUFINSIZ
 30468                                  	;DEC	DI
 30469 00005622 83C713                  	add	di,BUFINSIZ-1 ; 19
 30470                                  
 30471                                  	;add	di,[es:bp+2]
 30472 00005625 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30473 00005629 8805                    	MOV	[DI],AL
 30474 0000562B F8                      	CLC
 30475                                  POPP_RET:
 30476 0000562C 16                      	PUSH	SS
 30477 0000562D 1F                      	POP	DS
 30478 0000562E 59                      	POP	CX
 30479 0000562F 5B                      	POP	BX
 30480 00005630 58                      	POP	AX
 30481 00005631 C3                      	retn
 30482                                  
 30483                                  ; 31/07/2018 - Retro DOS v3.0
 30484                                  
 30485                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30486                                  ;---------------------------------------------------------------------------
 30487                                  ;
 30488                                  ; Procedure Name : MAPCLUSTER
 30489                                  ;
 30490                                  ; Inputs:
 30491                                  ;	ES:BP Points to DPB
 30492                                  ;	BX Is cluster number
 30493                                  ; Function:
 30494                                  ;	Get a pointer to the cluster
 30495                                  ; Outputs:
 30496                                  ;	DS:DI Points to contents of FAT for given cluster
 30497                                  ;	DS:SI Points to start of buffer
 30498                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30499                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30500                                  ;	Carry set if failed.
 30501                                  ; SI is destroyed.
 30502                                  ;
 30503                                  ;---------------------------------------------------------------------------
 30504                                  
 30505                                  	; 20/05/2019 - Retro DOS v4.0
 30506                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30507                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30508                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30509                                  
 30510                                  MAPCLUSTER:
 30511                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30512 00005632 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30513                                  	;SAVE	<AX,BX,CX,DX>
 30514 00005637 50                      	push	ax
 30515 00005638 53                      	push	bx
 30516 00005639 51                      	push	cx
 30517 0000563A 52                      	push	dx
 30518 0000563B 89D8                    	MOV	AX,BX			; AX = BX
 30519 0000563D 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30520 00005643 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30521 00005645 D1E8                    	SHR	AX,1			; AX = BX/2
 30522                                  Map16:	
 30523                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30524 00005647 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30525                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30526 00005649 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30527 0000564B 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30528 0000564D 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30529                                  
 30530                                  ;IF FastDiv
 30531                                  ;
 30532                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30533                                  ; case and apply a really fast algorithm to get the desired results
 30534                                  ;
 30535                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30536                                  ; Fast method takes 39+20*4=119
 30537                                  ;
 30538                                  ; This saves a bunch.
 30539                                  
 30540 00005651 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30541 00005655 7510                    	jne	short _DoDiv		; 4  for no jump
 30542 00005657 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30543 00005659 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30544 0000565D 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30545                                  	; MDOS 3.3
 30546                                  	;shr	al,1	
 30547                                  	; MDOS 6.0
 30548 0000565F D1EF                    	shr	di,1			; 2
 30549 00005661 D0D8                    	rcr	al,1			; 2
 30550                                  	; MDOS 3.3 (& MSDOS 6.0)
 30551 00005663 30E4                    	xor	ah,ah			; 3
 30552 00005665 EB04                    	jmp	short DivDone		; 16
 30553                                  _DoDiv:
 30554                                  ;ENDIF
 30555                                  	; MSDOS 3.3
 30556                                  	;xor	dx,dx
 30557                                  	; MSDOS 6.0
 30558 00005667 89FA                    	mov	dx,di			; 2
 30559                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30560 00005669 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30561                                  ;IF FastDiv
 30562                                  DivDone:
 30563                                  ;ENDIF
 30564                                  	;add	ax,[es:bp+6]
 30565 0000566B 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30566 0000566F 49                      	DEC	CX			; CX is sector size - 1
 30567                                  	;SAVE	<AX,DX,CX>
 30568 00005670 50                      	push	ax
 30569 00005671 52                      	push	dx
 30570 00005672 51                      	push	cx
 30571 00005673 89C2                    	MOV	DX,AX
 30572                                  
 30573                                  	; MSDOS 6.0
 30574                                  	; 22/09/2023
 30575                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 30576                                  	;
 30577                                  	; MDOS 3.3 (& MSDOS 6.0)
 30578                                  	;XOR	AL,AL	   ; *
 30579                                  	;MOV	SI,1	   ; *
 30580                                  	;;invoke GETBUFFRB ; *
 30581                                  	;call	GETBUFFRB  ; *
 30582                                  	; 22/09/2023
 30583 00005675 E8CE02                  	call	GETBUFFRC  ; *!
 30584                                  
 30585                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30586 00005678 59                      	pop	cx
 30587 00005679 58                      	pop	ax
 30588 0000567A 5A                      	pop	dx
 30589 0000567B 724C                    	JC	short MAP_POP
 30590                                  
 30591 0000567D C536[E205]              	LDS	SI,[CURBUF]
 30592                                  	;;lea	di,[si+16]
 30593                                  	;lea	di,[si+20] ; MSDOS 6.0
 30594 00005681 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30595 00005684 01C7                    	ADD	DI,AX
 30596 00005686 39C8                    	CMP	AX,CX
 30597 00005688 752C                    	JNZ	short MAPRET
 30598 0000568A 8A05                    	MOV	AL,[DI]
 30599                                  	;Context DS		 	;hkn; SS is DOSDATA
 30600 0000568C 16                      	push	ss
 30601 0000568D 1F                      	pop	ds	
 30602 0000568E FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30603 00005692 A2[8E05]                	MOV	[CLUSSAVE],AL
 30604 00005695 8916[9005]              	MOV	[CLUSSEC],DX
 30605                                  	; MSDOS 6.0
 30606 00005699 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 30607 0000569F 42                      	INC	DX
 30608                                  
 30609                                  	; 22/09/2023
 30610                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 30611                                  	;
 30612                                  	; MDOS 3.3 (& MSDOS 6.0)
 30613                                  	;XOR	AL,AL	   ; *
 30614                                  	;MOV	SI,1	   ; *
 30615                                  	;;invoke GETBUFFRB ; *
 30616                                  	;call	GETBUFFRB  ; *
 30617                                  	; 22/09/2023
 30618 000056A0 E8A302                  	call	GETBUFFRC  ; *!
 30619 000056A3 7224                    	JC	short MAP_POP
 30620                                  
 30621 000056A5 C536[E205]              	LDS	SI,[CURBUF]
 30622 000056A9 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30623 000056AC 8A05                    	MOV	AL,[DI]
 30624                                  	;Context DS			;hkn; SS is DOSDATA
 30625 000056AE 16                      	push	ss
 30626 000056AF 1F                      	pop	ds
 30627 000056B0 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30628                                  
 30629                                  ;hkn; CLUSSAVE is in DOSDATA
 30630 000056B3 BF[8E05]                	MOV	DI,CLUSSAVE
 30631                                  MAPRET:
 30632                                  	;RESTORE <DX,CX,BX>
 30633 000056B6 5A                      	pop	dx
 30634 000056B7 59                      	pop	cx
 30635 000056B8 5B                      	pop	bx
 30636 000056B9 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30637 000056BB 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30638 000056C1 7302                    	JAE	short MapSet		; MZ no, set flags
 30639 000056C3 89D8                    	MOV	AX,BX
 30640                                  MapSet:
 30641 000056C5 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30642                                  	;RESTORE <AX>
 30643 000056C7 58                      	pop	ax
 30644 000056C8 C3                      	retn
 30645                                  
 30646                                  MAP_POP:
 30647                                  	;RESTORE <DX,CX,BX,AX>
 30648 000056C9 5A                      	pop	dx
 30649 000056CA 59                      	pop	cx
 30650 000056CB 5B                      	pop	bx
 30651 000056CC 58                      	pop	ax
 30652                                  fatread_sft_retn: ; 17/12/2022
 30653 000056CD C3                      	retn
 30654                                  
 30655                                  ; 20/05/2019 - Retro DOS v4.0
 30656                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30657                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30658                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30659                                  
 30660                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30661                                  ;----------------------------------------------------------------------------
 30662                                  ;
 30663                                  ; Procedure Name : FATREAD_SFT
 30664                                  ;
 30665                                  ; Inputs:
 30666                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30667                                  ;		giving a NET SFT will produce system crashing results).
 30668                                  ;	DS DOSDATA
 30669                                  ; Function:
 30670                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30671                                  ;	if disk changed.
 30672                                  ;	In other respects, same as FATREAD_CDS.
 30673                                  ;	(note ES:DI destroyed!)
 30674                                  ; Outputs:
 30675                                  ;	Carry set if error (currently user FAILed to I 24)
 30676                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30677                                  ;	as far as invalidating curdir_ID is concerned.
 30678                                  ;	Since getting a true disk changed on this call is a screw up
 30679                                  ;	anyway, that's the way it goes.
 30680                                  ;
 30681                                  ;---------------------------------------------------------------------------
 30682                                  
 30683                                  FATREAD_SFT:
 30684 000056CE 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30685                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30686                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30687                                  	; 15/12/2022
 30688 000056D2 268A4600                	mov	AL,[ES:BP]
 30689 000056D6 A2[7605]                	MOV	[THISDRV],AL
 30690 000056D9 E856AF                  	call	GOTDPB			;Set THISDPB
 30691                                  	;CALL	FAT_GOT_DPB
 30692                                  	; 17/12/2022
 30693 000056DC EB78                    	jmp	FAT_GOT_DPB
 30694                                  ;fatread_sft_retn:
 30695                                  	;retn
 30696                                  
 30697                                  ;----------------------------------------------------------------------------
 30698                                  ;
 30699                                  ; Procedure Name : FATREAD_CDS
 30700                                  ;
 30701                                  ; Inputs:
 30702                                  ;	DS:DOSDATA
 30703                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30704                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30705                                  ; Function:
 30706                                  ;	If disk may have been changed, media is determined and buffers are
 30707                                  ;	flagged invalid. If not, no action is taken.
 30708                                  ; Outputs:
 30709                                  ;	ES:BP = Drive parameter block
 30710                                  ;	THISDPB = ES:BP
 30711                                  ;	THISDRV set
 30712                                  ;	Carry set if error (currently user FAILed to I 24)
 30713                                  ; DS preserved , all other registers destroyed
 30714                                  ;
 30715                                  ;---------------------------------------------------------------------------
 30716                                  
 30717                                  	; 20/05/2019 - Retro DOS v4.0
 30718                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30719                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30720                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30721                                  
 30722                                  FATREAD_CDS:
 30723 000056DE 06                      	PUSH	ES
 30724 000056DF 57                      	PUSH	DI
 30725                                  	;les	bp,[es:di+45h]
 30726 000056E0 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30727                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30728                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30729                                  	; 15/12/2022
 30730 000056E4 268A4600                	mov	AL,[ES:BP]
 30731 000056E8 A2[7605]                	MOV	[THISDRV],AL
 30732 000056EB E844AF                  	call	GOTDPB			;Set THISDPB
 30733 000056EE E86500                  	CALL	FAT_GOT_DPB
 30734 000056F1 5F                      	POP	DI			;Get back CDS pointer
 30735 000056F2 07                      	POP	ES
 30736 000056F3 72D8                    	jc	short fatread_sft_retn
 30737 000056F5 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30738                                  
 30739                                  ;	Media changed. We now need to find all CDS structures which use this
 30740                                  ;	DPB and invalidate their ID pointers.
 30741                                  
 30742                                  MED_CHANGE:
 30743 000056F7 31C0                    	XOR	AX,AX
 30744 000056F9 48                      	DEC	AX			; AX = -1
 30745 000056FA 1E                      	PUSH	DS
 30746 000056FB 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30747 000056FF 30ED                    	XOR	CH,CH			; CX is number of structures
 30748                                  	;lds	si,[es:di+45h]
 30749 00005701 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30750                                  
 30751                                  ;hkn; SS override
 30752                                  
 30753                                  ;	Find all CDSs with this DevPtr
 30754                                  ;
 30755                                  ;	(ax) = -1
 30756                                  ;	(ds:si) = DevPtr
 30757                                  
 30758 00005705 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30759                                  frcd20: 
 30760                                  	;;test	word [es:di+43h],8000h
 30761                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30762 0000570A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30763 0000570F 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30764                                  
 30765                                  	; MSDOS 3.3
 30766                                  	;push	es
 30767                                  	;push	di
 30768                                  	;les	di,[es:di+45h]
 30769                                  	;;les	di,[ES:DI+curdir.devptr]
 30770                                  	;call	POINTCOMP
 30771                                  	;pop	di
 30772                                  	;pop	es
 30773                                  	;jnz	short frcd25
 30774                                  
 30775                                  	; MSDOS 6.0
 30776 00005711 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30777 00005715 7512                    	jne	short frcd25		; no match
 30778 00005717 8CDB                    	mov	bx,ds
 30779 00005719 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30780 0000571D 750A                    	jne	short frcd25		; CDS not for this drive
 30781                                  
 30782                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30783                                  	;test	[es:di+49h],ax
 30784 0000571F 26854549                	test	[ES:DI+curdir.ID],AX
 30785 00005723 7404                    	JZ	short frcd25		; If root (0), leave root
 30786                                  	;mov	[es:di+49h],ax
 30787 00005725 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30788                                  frcd25:	
 30789                                  	;;add	di,81  ; MSDOS 3.3
 30790                                  	;add	di,88  ; MSDOS 6.0	 
 30791 00005729 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30792 0000572C E2DC                    	LOOP	frcd20
 30793 0000572E 1F                      	POP	DS
 30794                                  NO_CHANGE:
 30795 0000572F C42E[8A05]              	LES	BP,[THISDPB]
 30796 00005733 F8                      	CLC
 30797 00005734 C3                      	retn
 30798                                  
 30799                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30800                                  ;----------------------------------------------------------------------------
 30801                                  ;
 30802                                  ; Procedure Name : FAT_operation
 30803                                  ;
 30804                                  ;----------------------------------------------------------------------------
 30805                                  
 30806                                  	; 03/01/2024
 30807                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30808                                  
 30809                                  FAT_operation:
 30810                                  	; 31/07/2018 - Retro DOS v3.0
 30811                                  FATERR:
 30812                                  	;mov	word [es:bp+1Eh],-1
 30813                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30814 00005735 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30815                                  					; Err in FAT must force recomp of freespace
 30816                                  	;and	di,0FFh
 30817 0000573B 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30818                                  	;mov	byte [ALLOWED],18h
 30819 0000573F C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30820                                  	;mov	ah,1Ah
 30821 00005744 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30822 00005746 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30823 00005749 E814FC                  	call	FATAL1
 30824 0000574C C42E[8A05]              	LES	BP,[THISDPB]
 30825 00005750 3C03                    	CMP	AL,3
 30826 00005752 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30827 00005754 F9                      	STC				; User said FAIL
 30828 00005755 C3                      	retn
 30829                                  
 30830                                  FAT_GOT_DPB:
 30831                                  	;Context DS			;hkn; SS is DOSDATA
 30832 00005756 16                      	push	ss			
 30833 00005757 1F                      	pop	ds
 30834                                  	;mov	al,0Fh
 30835 00005758 B00F                    	MOV	AL,DMEDHL
 30836                                  	;mov	ah,[es:bp+1]
 30837 0000575A 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30838 0000575E A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30839 00005761 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30840 00005766 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30841                                  	;;mov	al,[es:bp+16h]
 30842                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30843 0000576C 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30844 00005770 A2[6703]                	MOV	[CALLMED],AL
 30845 00005773 06                      	PUSH	ES
 30846 00005774 1E                      	PUSH	DS
 30847                                  
 30848                                  ;hkn; DEVCALL is in DOSDATA
 30849 00005775 BB[5A03]                	MOV	BX,DEVCALL
 30850                                  	;;lds	si,[es:bp+12h]
 30851                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30852 00005778 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30853 0000577C 07                      	POP	ES			; ES:BX Points to call header
 30854 0000577D E8FBEE                  	call	DEVIOCALL2
 30855                                  	;Context DS		 	;hkn; SS is DOSDATA
 30856 00005780 16                      	push	ss
 30857 00005781 1F                      	pop	ds
 30858 00005782 07                      	POP	ES			; Restore ES:BP
 30859 00005783 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30860                                  	;test	di,8000h
 30861                                  	;jnz	short FATERR
 30862 00005787 09FF                    	or	di,di
 30863 00005789 78AA                    	js	short FATERR		; have error
 30864 0000578B 30E4                    	XOR	AH,AH
 30865                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30866                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30867 0000578D 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30868 00005791 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30869                                  ; See if we had changed volume id by creating one on the diskette
 30870 00005794 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30871 00005798 7508                    	jnz	short CHECK_BYT
 30872 0000579A C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30873 0000579F E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 30874                                  					; new volume label.
 30875                                  CHECK_BYT:
 30876 000057A2 0A26[6803]              	OR	AH,[CALLRBYT]
 30877                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30878                                  	;JMP	short NEWDSK
 30879                                  	; 17/12/2022
 30880 000057A6 7863                    	js	short NEWDSK
 30881                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30882                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30883                                  	;JMP	short NEWDSK
 30884                                  
 30885                                  CHECK_ZR:
 30886 000057A8 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30887                                  	; 24/09/2023
 30888                                  	; cf=0 (after 'or' instruction)
 30889                                  	;CLC
 30890 000057AA C3                      	retn				; If Media not changed (NZ)
 30891                                  
 30892                                  DISK_CHNG_ERR:
 30893 000057AB 06                      	PUSH	ES
 30894 000057AC 55                      	PUSH	BP
 30895                                  	;;les	bp,[es:bp+12h]
 30896                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30897 000057AD 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30898                                  	;;test	word [es:bp+4],800h
 30899                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30900 000057B1 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30901 000057B6 5D                      	POP	BP
 30902 000057B7 07                      	POP	ES
 30903 000057B8 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30904 000057BA 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30905 000057BB 57                      	PUSH	DI
 30906 000057BC 16                      	push	ss			;hkn; SS is DOSDATA
 30907 000057BD 1F                      	pop	ds
 30908                                  	;mov	byte [ALLOWED],18h
 30909 000057BE C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30910 000057C3 06                      	PUSH	ES
 30911 000057C4 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30912 000057C8 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30913 000057CC 07                      	POP	ES
 30914 000057CD 893E[2803]              	MOV	[EXTERRPT],DI
 30915                                  	;mov	ax,0Fh
 30916 000057D1 B80F00                  	MOV	AX,error_I24_wrong_disk
 30917 000057D4 C606[7505]01            	MOV	byte [READOP],1		; Write
 30918                                  	;invoke	HARDERR
 30919 000057D9 E832FB                  	call	HARDERR
 30920 000057DC 5F                      	POP	DI			; Get back buffer for ignore
 30921 000057DD 1F                      	POP	DS
 30922 000057DE 3C03                    	CMP	AL,3
 30923                                  FAIL_OPJ2:
 30924 000057E0 741C                    	JZ	short FAIL_OP
 30925 000057E2 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 30926                                  
 30927                                  CHKBUFFDIRT:
 30928                                  	; 20/05/2019 - Retro DOS v4.0
 30929                                  
 30930                                  	; MSDOS 3.3
 30931                                  	;lds	di,[BUFFHEAD]
 30932                                  
 30933                                  	; MSDOS 6.0
 30934 000057E5 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30935 000057EB 741E                    	je	short NEWDSK			; no, skip the check
 30936 000057ED E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 30937                                  nbuffer:
 30938                                  	;cmp	al,[di+4]
 30939 000057F0 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30940 000057F3 750D                    	jne	short lfnxt			; no, go for next buffer
 30941                                  	;test   byte [di+5],40h
 30942 000057F5 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30943 000057F9 7407                    	jz	short lfnxt			; no, go for next buffer
 30944                                  	;Context DS
 30945 000057FB 16                      	push	ss
 30946 000057FC 1F                      	pop	ds
 30947                                  	; 24/09/2023
 30948                                  	; cf=0 (after 'test' instruction)
 30949                                  	;clc
 30950 000057FD C3                      	retn
 30951                                  
 30952                                  FAIL_OP:					; This label & code is here
 30953                                  	;Context DS				;  for reachability
 30954 000057FE 16                      	push	ss
 30955 000057FF 1F                      	pop	ds
 30956 00005800 F9                      	STC
 30957 00005801 C3                      	retn
 30958                                  
 30959                                  lfnxt:
 30960                                  	; 15/08/2018 - Retro DOS v3.0
 30961                                  	; MSDOS 3.3
 30962                                  	;lds	di,[di]
 30963                                  
 30964                                  	; 20/05/2019 - Retro DOS v4.0
 30965 00005802 8B3D                    	mov	di,[di]
 30966                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30967                                  	
 30968                                  	; MSDOS 3.3
 30969                                  	;cmp	di,-1
 30970                                  	;jne	short nbuffer
 30971                                  	
 30972                                  	; MSDOS 6.0
 30973 00005804 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30974 00005809 75E5                    	jne	short nbuffer			; no, check this guy also
 30975                                  
 30976                                  ; If no dirty buffers, assume Media changed
 30977                                  NEWDSK:
 30978                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30979                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30980 0000580B 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30981                                  						;  recompute
 30982                                  	; MSDOS 3.3
 30983                                  	;call	SETVISIT
 30984                                  	; MSDOS 6.0
 30985 00005811 E8CD00                  	call	 GETCURHEAD
 30986                                  nxbuffer:
 30987                                  	; MSDOS 3.3
 30988                                  	;or 	byte [di+5],20h
 30989                                  	; MSDOS 3.3 & MSDOS 6.0
 30990                                  	;cmp	[di+4],al
 30991 00005814 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30992 00005817 7510                    	jne	short lfnxt2
 30993                                  	;test	byte [di+5],40h
 30994 00005819 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30995 0000581D 758C                    	jnz	short DISK_CHNG_ERR
 30996                                  	;mov	word [di+4],20FFh
 30997 0000581F C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30998 00005824 E8CC00                  	call	SCANPLACE
 30999                                  	; MSDOS 6.0
 31000 00005827 EB02                    	jmp	short skpbuff
 31001                                  lfnxt2:
 31002 00005829 8B3D                    	mov	di,[di]
 31003                                  	;mov	di,[di+BUFFINFO.buf_next]
 31004                                  skpbuff:
 31005                                  	; MSDOS 6.0
 31006 0000582B 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31007 00005830 75E2                    	jne	short nxbuffer
 31008                                  
 31009 00005832 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31010 00005838 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31011 0000583A 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31012 0000583F 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31013 00005841 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31014                                  ;lfnxt2:
 31015                                  	; MSDOS 3.3
 31016                                  	;call	SKIPVISIT
 31017                                  	;jnz	short nxbuffer
 31018                                  GOGETBPB:
 31019                                  	; MSDOS 3.3 & MSDOS 6.0
 31020                                  	;;lds	di,[es:bp+12h]
 31021                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31022 00005847 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31023                                  	; 20/05/2019
 31024                                  	;test	word [di+4],2000h
 31025                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31026 0000584B F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31027 0000584F 7510                    	JNZ	short GETFREEBUF
 31028                                  	;context DS	    		;hkn; SS is DOSDATA
 31029 00005851 16                      	push	ss
 31030 00005852 1F                      	pop	ds
 31031 00005853 BB0200                  	MOV	BX,2
 31032 00005856 E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31033                                  FAIL_OPJ:
 31034 00005859 72A3                    	JC	short FAIL_OP
 31035 0000585B C53E[E205]              	LDS	DI,[CURBUF]
 31036 0000585F EB13                    	JMP	SHORT GOTGETBUF
 31037                                  
 31038                                  GETFREEBUF:
 31039 00005861 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31040 00005862 55                      	PUSH	BP
 31041                                  	; MSDOS 3.3
 31042                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31043                                  	; MSDOS 6.0
 31044 00005863 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31045                                  ;hkn; SS override
 31046 00005865 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 31047 0000586A E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31048                                  	; MSDOS 3.3 & MSDOS 6.0
 31049 0000586D E84F02                  	call	BUFWRITE
 31050 00005870 5D                      	POP	BP
 31051 00005871 07                      	POP	ES
 31052                                  	;JC	short FAIL_OPJ
 31053 00005872 728A                    	jc	short FAIL_OP
 31054                                  GOTGETBUF:
 31055                                  	;;add	di,16
 31056                                  	;add	di,20 ; MSDOS 6.0
 31057 00005874 83C714                  	ADD	DI,BUFINSIZ
 31058                                  
 31059                                  ;hkn; SS override
 31060 00005877 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31061                                  	;Context DS			;hkn; SS is DOSDATA
 31062 0000587C 16                      	push	ss
 31063 0000587D 1F                      	pop	ds
 31064 0000587E 893E[6803]              	MOV	[CALLXAD],DI
 31065                                  	;mov	al,16h
 31066 00005882 B016                    	MOV	AL,DBPBHL
 31067                                  	;mov	ah,[es:bp+1]
 31068 00005884 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31069 00005888 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31070 0000588B C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31071 00005890 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31072                                  	;;mov	al,[es:bp+16h]
 31073                                  	;mov	al,[es:bp+17h]
 31074 00005896 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31075 0000589A A2[6703]                	MOV	[CALLMED],AL
 31076 0000589D 06                      	PUSH	ES ; **
 31077 0000589E 1E                      	PUSH	DS ; *
 31078                                  	;;
 31079                                  ; 03/01/2023
 31080                                  %if 0
 31081                                  	;;push	word [es:bp+14h]
 31082                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31083                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31084                                  	;;push	word [es:bp+12h]
 31085                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31086                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31087                                  
 31088                                  ;hkn; DEVCALL is in DOSDATA
 31089                                  	MOV	BX,DEVCALL
 31090                                  	POP	SI
 31091                                  	POP	DS			; DS:SI Points to device header
 31092                                  %endif
 31093                                  	; 03/01/2024
 31094 0000589F BB[5A03]                	mov	bx,DEVCALL
 31095                                  	;lds	si,[es:bp+13h]
 31096 000058A2 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31097                                  					; DS:SI Points to device header
 31098                                  	;;
 31099 000058A6 07                      	POP	ES ; *			; ES:BX Points to call header
 31100                                  	;invoke	DEVIOCALL2
 31101 000058A7 E8D1ED                  	call	DEVIOCALL2
 31102 000058AA 07                      	POP	ES ; **			; Restore ES:BP
 31103                                  	;Context DS
 31104 000058AB 16                      	push	ss		 	;hkn; SS is DOSDATA
 31105 000058AC 1F                      	pop	ds
 31106 000058AD 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31107                                  	; MSDOS 3.3
 31108                                  	;test	di,8000h
 31109                                  	;jnz	short FATERRJ
 31110                                  	; MSDOS 6.0
 31111 000058B1 09FF                    	or	di,di
 31112 000058B3 7829                    	js	short FATERRJ 		; have error
 31113                                  	;;mov	al,[es:bp+16h]
 31114                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31115 000058B5 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31116 000058B9 C536[6C03]              	LDS	SI,[CALLBPB]
 31117                                  	;;mov	word [es:bp+1Ch],0
 31118                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31119 000058BD 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31120                                  	;invoke	$SETDPB
 31121 000058C3 E80FB7                  	call	_$SETDPB
 31122                                  
 31123                                  ;hkn; SS override
 31124 000058C6 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31125                                  	;mov	al,[es:bp+8]
 31126 000058CB 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31127                                  
 31128                                  	; MSDOS 3.3
 31129                                  	;;mov	ah,[es:bp+0Fh]
 31130                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31131                                  	;;mov	[DI-8],ax
 31132                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31133                                  
 31134                                  	; MSDOS 6.0
 31135                                  	;mov	[di-0Ah],al
 31136 000058CF 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31137                                  						;>32mb		  ;AN000;
 31138                                  	;mov	ax,[es:bp+0Fh]
 31139 000058D2 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31140                                  	;mov	[di-9h],ax			  ;AC000;
 31141 000058D6 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31142                                  					;>32mb Correct buffer info ;AC000;
 31143                                  	;Context DS			;hkn; SS is DOSDATA
 31144 000058D9 16                      	push	ss
 31145 000058DA 1F                      	pop	ds
 31146 000058DB 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31147 000058DD C3                      	retn
 31148                                  
 31149                                  FATERRJ: 
 31150 000058DE E954FE                  	JMP	FATERR
 31151                                  
 31152                                  ;============================================================================
 31153                                  ; STDBUF.ASM
 31154                                  ;============================================================================
 31155                                  ; Retro DOS v2.0 - 12/03/2018
 31156                                  
 31157                                  ;
 31158                                  ; Standard buffer management for MSDOS
 31159                                  ;
 31160                                  
 31161                                  ;.xlist
 31162                                  ;.xcref
 31163                                  ;INCLUDE STDSW.ASM
 31164                                  ;.cref
 31165                                  ;.list
 31166                                  
 31167                                  ;TITLE	STDBUF - MSDOS buffer management
 31168                                  ;NAME	STDBUF
 31169                                  
 31170                                  ;INCLUDE BUF.ASM
 31171                                  
 31172                                  ;============================================================================
 31173                                  ; BUF.ASM
 31174                                  ;============================================================================
 31175                                  ; 31/07/2018 - Retro DOS v3.0
 31176                                  ; Retro DOS v2.0 - 12/03/2018
 31177                                  ;
 31178                                  ; buffer management for MSDOS
 31179                                  ;
 31180                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31181                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31182                                  ;
 31183                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31184                                  ;
 31185                                  ;SETVISIT:
 31186                                  ;	; 31/07/2018 - Retro DOS v3.0
 31187                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31188                                  ;; Inputs:
 31189                                  ;;      None
 31190                                  ;; Function:
 31191                                  ;;      Set up a scan of I/O buffers
 31192                                  ;; Outputs:
 31193                                  ;;      All visit flags = 0
 31194                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31195                                  ;;                    may cause a scan to stop in the middle leaving some
 31196                                  ;;                    visit flags set, and some not set.
 31197                                  ;;      DS:DI Points to [BUFFHEAD]
 31198                                  ;; No other registers altered
 31199                                  ;
 31200                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31201                                  ;	PUSH    AX
 31202                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31203                                  ;	;mov	al,0DFh
 31204                                  ;	mov	al,~buf_visit
 31205                                  ;SETLOOP:
 31206                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31207                                  ;	;and	[DI+5],al
 31208                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31209                                  ;       LDS     DI,[DI]
 31210                                  ;       CMP     DI,-1
 31211                                  ;       JNZ     SHORT SETLOOP
 31212                                  ;       POP     AX ; 09/09/2018
 31213                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31214                                  ;SVISIT_RETN:
 31215                                  ;       RETN
 31216                                  ;
 31217                                  ;SKIPVISIT:
 31218                                  ;	; 31/07/2018 - Retro DOS v3.0
 31219                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31220                                  ;
 31221                                  ;; Inputs:
 31222                                  ;;      DS:DI Points to a buffer
 31223                                  ;; Function:
 31224                                  ;;      Skip visited buffers
 31225                                  ;; Outputs:
 31226                                  ;;      DS:DI Points to next unvisited buffer
 31227                                  ;;      Zero is set if skip to LAST buffer
 31228                                  ;; No other registers altered
 31229                                  ;
 31230                                  ;       CMP     DI,-1
 31231                                  ;       ;retz
 31232                                  ;       JZ	SHORT SVISIT_RETN
 31233                                  ;
 31234                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31235                                  ;       ;;;retnz
 31236                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31237                                  ;
 31238                                  ;	;test	byte [di+5],20h
 31239                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31240                                  ;	JNZ	short SKIPLOOP
 31241                                  ;	
 31242                                  ;	push	ax
 31243                                  ;	or	al,1
 31244                                  ;	pop	ax
 31245                                  ;	retn	
 31246                                  ;
 31247                                  ;SKIPLOOP:
 31248                                  ;	LDS     DI,[DI]
 31249                                  ;       JMP     SHORT SKIPVISIT
 31250                                  
 31251                                  ;============================================================================
 31252                                  ; BUF.ASM, MSDOS 6.0, 1991
 31253                                  ;============================================================================
 31254                                  ; 31/07/2018 - Retro DOS v3.0
 31255                                  ; 04/05/2019 - Retro DOS v4.0
 31256                                  
 31257                                  ;	TITLE	BUF - MSDOS buffer management
 31258                                  ;	NAME	BUF
 31259                                  
 31260                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31261                                  ;
 31262                                  ;	GETCURHEAD
 31263                                  ;	ScanPlace
 31264                                  ;	PLACEBUF
 31265                                  ;	PLACEHEAD
 31266                                  ;	PointComp
 31267                                  ;	GETBUFFR
 31268                                  ;	GETBUFFRB
 31269                                  ;	FlushBuf
 31270                                  ;	BufWrite
 31271                                  ;	SET_RQ_SC_PARMS
 31272                                  ;
 31273                                  ;	Revision history:
 31274                                  ;
 31275                                  ;		AN000  version 4.00  Jan. 1988
 31276                                  ;		A004   PTM 3765 -- Disk reset failed
 31277                                  ;		M039 DB 10/17/90 - Disk write optimization
 31278                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31279                                  
 31280                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31281                                  ;----------------------------------------------------------------------------
 31282                                  ; Procedure Name : GetCurHead
 31283                                  ; Inputs:
 31284                                  ;	 No Inputs
 31285                                  ; Function:
 31286                                  ;	Returns the pointer to the first buffer in Queue
 31287                                  ;	and updates FIRST_BUFF_ADDR
 31288                                  ;       and invalidates LASTBUFFER (recency pointer)
 31289                                  ; Outputs:
 31290                                  ;	DS:DI = pointer to the first buffer in Queue
 31291                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31292                                  ;       LASTBUFFER = -1
 31293                                  ; No other registers altered
 31294                                  ;----------------------------------------------------------------------------
 31295                                  
 31296                                  ; 04/05/2019 - Retro DOS v4.0
 31297                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31298                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31299                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31300                                  
 31301                                  GETCURHEAD:
 31302 000058E1 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31303 000058E6 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31304 000058ED 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31305 000058F2 C3                      	retn
 31306                                  
 31307                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31308                                  ;----------------------------------------------------------------------------
 31309                                  ; Procedure Name : ScanPlace
 31310                                  ; Inputs:
 31311                                  ;	Same as PLACEBUF
 31312                                  ; Function:
 31313                                  ;	Save scan location and call PLACEBUF
 31314                                  ; Outputs:
 31315                                  ;	DS:DI Points to saved scan location
 31316                                  ; All registers, except DS:DI, preserved.
 31317                                  ;----------------------------------------------------------------------------
 31318                                  ;M039: Rewritten to preserve registers.
 31319                                  
 31320                                  ;SCANPLACE:
 31321                                  ;	; 31/07/2018 - Retro DOS v3.0
 31322                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31323                                  ;	push	es
 31324                                  ;	les	si,[di]
 31325                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31326                                  ;	call	PLACEBUF
 31327                                  ;	push	es
 31328                                  ;	pop	ds
 31329                                  ;	mov	di,si
 31330                                  ;	pop	es
 31331                                  ;scanplace_retn:
 31332                                  ;	retn	
 31333                                  	
 31334                                  	; MSDOS 6.0
 31335                                  SCANPLACE:
 31336 000058F3 FF35                    	push	word [di]
 31337                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31338 000058F5 E80200                  	call	PLACEBUF
 31339 000058F8 5F                      	pop	di
 31340 000058F9 C3                      	retn
 31341                                  
 31342                                  ;----------------------------------------------------------------------------
 31343                                  ; Procedure Name : PlaceBuf
 31344                                  ; Input:
 31345                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31346                                  ; Function:
 31347                                  ;	Remove buffer from queue and re-insert it in proper place.
 31348                                  ; NO registers altered
 31349                                  ;----------------------------------------------------------------------------
 31350                                  
 31351                                  ;procedure PLACEBUF,NEAR
 31352                                  
 31353                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31354                                  	; 20/05/2019 - Retro DOS v4.0
 31355                                  PLACEBUF:
 31356                                  	; 31/07/2018 - Retro DOS v3.0
 31357                                  
 31358                                  	; MSDOS 6.0
 31359 000058FA 50                      	push	AX			;Save only regs we modify	;AN000;
 31360 000058FB 53                      	push	BX							;AN000;
 31361                                  	; 23/09/2023
 31362                                  	;push	SI							;AN000;
 31363                                  	
 31364 000058FC 8B05                    	mov	ax,[di]
 31365                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31366 000058FE 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31367                                  	
 31368 00005903 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31369 00005905 7422                    	je	short nret			;Yes, special case	;AN000;
 31370 00005907 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31371 00005909 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31372 0000590B 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31373 0000590F EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31374                                  not_first:
 31375                                  	; 23/09/2023
 31376 00005911 56                      	push	si
 31377                                  	;mov	si,[di+2]
 31378 00005912 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31379 00005915 8904                    	mov	[si],ax
 31380                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31381 00005917 96                      	xchg	si,ax
 31382                                  	;mov	[si+2],ax
 31383 00005918 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31384                                  	
 31385 0000591B 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31386 0000591E 893C                    	mov	[si],di
 31387                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31388 00005920 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31389 00005923 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31390 00005926 891D                    	mov	[di],bx
 31391                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31392                                  	; 23/09/2023
 31393 00005928 5E                      	pop	si
 31394                                  nret:	
 31395                                  	; 23/09/2023							;AN000;
 31396                                  	;pop	SI							;AN000;
 31397 00005929 5B                      	pop	BX							;AN000;
 31398 0000592A 58                      	pop	AX							;AN000;
 31399                                  									;AN000;
 31400                                  	;cmp	byte [di+4],0FFh
 31401 0000592B 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31402 0000592F 7505                            jne	short pbx			; M039: -no, jump.
 31403 00005931 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31404                                  pbx:	
 31405 00005936 C3                      	retn								;AN000;
 31406                                  
 31407                                  	; 31/07/2018 - Retro DOS v3.0
 31408                                  
 31409                                  	; MSDOS 3.3
 31410                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31411                                  
 31412                                  ;PLACEBUF:
 31413                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31414                                  ;	
 31415                                  ;       CALL	save_world
 31416                                  ;       LES     CX,[DI]
 31417                                  ;       CMP     CX,-1           	; Buf is LAST?
 31418                                  ;       JZ      SHORT NRET		; Buffer already last
 31419                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31420                                  ;       PUSH    DS
 31421                                  ;       POP     ES              	; Buf is ES:DI
 31422                                  ;	; 15/03/2018
 31423                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31424                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31425                                  ;       JNZ     SHORT BUFLOOP
 31426                                  ;       MOV     [SS:BUFFHEAD],CX
 31427                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31428                                  ;       JMP     SHORT LOOKEND
 31429                                  ;BUFLOOP:
 31430                                  ;	; 31/07/2018
 31431                                  ;	mov	ax,ds
 31432                                  ;	mov	bx,si
 31433                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31434                                  ;       LDS     SI,[SI]
 31435                                  ;       CALL    POINTCOMP
 31436                                  ;       jnz	short BUFLOOP
 31437                                  ;	;
 31438                                  ;	mov	ds,ax
 31439                                  ;	mov	si,bx
 31440                                  ;	mov	[SI],cx
 31441                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31442                                  ;	mov	[SI+2],bp
 31443                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31444                                  ;LOOKEND:
 31445                                  ;	mov	ax,ds
 31446                                  ;	mov	bx,si
 31447                                  ;       LDS     SI,[SI]
 31448                                  ;       CMP     SI,-1
 31449                                  ;       jnz     short LOOKEND
 31450                                  ;GOTHEEND:
 31451                                  ;       mov	ds,ax
 31452                                  ;	mov	[BX],di
 31453                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31454                                  ;       MOV     WORD [ES:DI],-1
 31455                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31456                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31457                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31458                                  ;NRET:
 31459                                  ;       CALL	restore_world
 31460                                  ;	
 31461                                  ;	;cmp	byte [di+4],-1
 31462                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31463                                  ;	jnz     short scanplace_retn
 31464                                  ;	call    PLACEHEAD
 31465                                  ;	retn
 31466                                  
 31467                                  ;EndProc PLACEBUF
 31468                                  
 31469                                  ;M039 - Removed PLACEHEAD.
 31470                                  ;----------------------------------------------------------------------------
 31471                                  ; places buffer at head
 31472                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31473                                  ;	ONE IN THE LIST!!!!!!!
 31474                                  ; BUGBUG ---- this routine can be removed because it has only
 31475                                  ; BUGBUG ---- one instruction. This routine is called from
 31476                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31477                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31478                                  ; BUGBUG ---- But kept as it is for modularity
 31479                                  ;----------------------------------------------------------------------------
 31480                                  ;procedure   PLACEHEAD,NEAR
 31481                                  ;	mov	word ptr [BufferQueue], di
 31482                                  ;	ret
 31483                                  ;EndProc PLACEHEAD
 31484                                  ;M039
 31485                                  
 31486                                  ;----------------------------------------------------------------------------
 31487                                  ; Procedure Name : PLACEHEAD
 31488                                  ;
 31489                                  ; SAME AS PLACEBUF except places buffer at head
 31490                                  ;----------------------------------------------------------------------------
 31491                                  
 31492                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31493                                  	; 05/09/2018
 31494                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31495                                  ;PLACEHEAD:
 31496                                  ;	; 31/07/2018 - Retro DOS v3.0
 31497                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31498                                  ;
 31499                                  ;       CALL	save_world
 31500                                  ;       PUSH	DS
 31501                                  ;       POP	ES
 31502                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31503                                  ;       LDS     SI,[SS:BUFFHEAD]
 31504                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31505                                  ;	CALL    POINTCOMP
 31506                                  ;       JZ      SHORT GOTHEEND2
 31507                                  ;	MOV	[ES:DI],SI
 31508                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31509                                  ;       MOV	[ES:DI+2],DS
 31510                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31511                                  ;       MOV	[SS:BUFFHEAD],DI
 31512                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31513                                  ;LOOKEND2:
 31514                                  ;       mov	ax,ds
 31515                                  ;	mov	bx,si
 31516                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31517                                  ;       LDS     SI,[SI]
 31518                                  ;       CALL    POINTCOMP
 31519                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31520                                  ;       mov	ds,ax
 31521                                  ;	mov	word [bx],-1
 31522                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31523                                  ;	mov	word [bx+2],-1
 31524                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31525                                  ;GOTHEEND2:
 31526                                  ;      	call	restore_world
 31527                                  ;placehead_retn:
 31528                                  ;	retn
 31529                                  
 31530                                  ; 20/05/2019 - Retro DOS v4.0
 31531                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31532                                  
 31533                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31534                                  ;----------------------------------------------------------------------------
 31535                                  ;
 31536                                  ; Procedure Name : PointComp
 31537                                  ; Inputs:
 31538                                  ;         DS:SI & ES:DI
 31539                                  ; Function:
 31540                                  ;          Checks for ((SI==DI) && (ES==DS))
 31541                                  ;	   Assumes that pointers are normalized for the
 31542                                  ;	   same segment
 31543                                  ;
 31544                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31545                                  ; DO NOT USE FOR < or >
 31546                                  ; No Registers altered
 31547                                  ;
 31548                                  ;----------------------------------------------------------------------------
 31549                                  
 31550                                  POINTCOMP:
 31551                                  	; 31/07/2018 - Retro DOS v3.0
 31552                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31553 00005937 39FE                    	CMP	SI,DI
 31554 00005939 750A                    	jnz	short _ret_label	; return if nz
 31555                                  	;jnz	short placehead_retn 
 31556 0000593B 51                      	PUSH	CX
 31557 0000593C 52                      	PUSH	DX
 31558 0000593D 8CD9                    	MOV	CX,DS
 31559 0000593F 8CC2                    	MOV	DX,ES
 31560 00005941 39D1                    	CMP	CX,DX
 31561 00005943 5A                      	POP	DX
 31562 00005944 59                      	POP	CX
 31563                                  _ret_label:
 31564 00005945 C3                      	retn
 31565                                  
 31566                                  ; 01/08/2018 - Retro DOS v3.0
 31567                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31568                                  
 31569                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31570                                  
 31571                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31572                                  ;----------------------------------------------------------------------------
 31573                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31574                                  ;	It gets the specified local sector into one of the I/O buffers
 31575                                  ;	and shuffles the queue
 31576                                  ; 
 31577                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31578                                  ;		       ELSE no pre-read
 31579                                  ;		(DX) = Desired physical sector number	      (LOW)
 31580                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31581                                  ;		(ES:BP) = Pointer to drive parameters
 31582                                  ;		ALLOWED set in case of INT 24
 31583                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31584                                  ;		'C' clear if OK
 31585                                  ;		CURBUF Points to the Buffer for the sector
 31586                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31587                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31588                                  ;----------------------------------------------------------------------------
 31589                                  
 31590                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31591                                  ;----------------------------------------------------------------------------
 31592                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 31593                                  ;	It gets the specified sector into one of the I/O buffers
 31594                                  ;	and shuffles the queue. We need a special entry point so that
 31595                                  ;	we can read the alternate FAT sector if the first read fails, also
 31596                                  ;	so we can mark the buffer as a FAT sector.
 31597                                  ; 
 31598                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31599                                  ;		       ELSE no pre-read
 31600                                  ;		(DX) = Desired physical sector number	     (LOW)
 31601                                  ;		(SI) != 0
 31602                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31603                                  ;		(ES:BP) = Pointer to drive parameters
 31604                                  ;		ALLOWED set in case of INT 24
 31605                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31606                                  ;		'C' clear if OK
 31607                                  ;		CUR ddBUF Points to the Buffer for the sector
 31608                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31609                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31610                                  ;----------------------------------------------------------------------------
 31611                                  
 31612                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 31613                                  GETBUFFRC:
 31614 00005946 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 31615                                  GETBUFFRA:
 31616 0000594C 30C0                    	xor	al,al
 31617 0000594E BE0100                  	mov	si,1
 31618 00005951 EB09                    	jmp	short GETBUFFRB
 31619                                  
 31620                                  	; 22/09/2023
 31621                                  GETBUFFER:
 31622 00005953 30C0                    	xor	al,al
 31623                                  GETBUFFRD:
 31624                                  	;mov	byte [ALLOWED],18h
 31625 00005955 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31626                                  
 31627                                  	; 20/05/2019 - Retro DOS v4.0
 31628                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31629                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31630                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31631                                  GETBUFFR:
 31632 0000595A 31F6                    	XOR	SI,SI
 31633                                  
 31634                                  ;	This entry point is called for FAT buffering with SI != 0
 31635                                  
 31636                                  GETBUFFRB:
 31637 0000595C A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31638                                  	; 15/12/2022
 31639 0000595F 268A4600                	mov	al,[ES:BP]
 31640                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31641                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31642 00005963 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31643                                  	; MSDOS 6.0
 31644                                  ;hkn; SS override
 31645 00005967 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 31646                                  
 31647                                  ;	See if this is the buffer that was most recently returned.
 31648                                  ;	A big performance win if it is.
 31649                                  
 31650 0000596C 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31651 0000596F 7412                    	je	short getb5			; No
 31652                                  	;cmp	dx,[di+6]
 31653 00005971 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31654 00005974 750D                    	JNZ	short getb5			; Wrong sector
 31655                                  	
 31656                                  	; MSDOS 6.0
 31657                                  	;cmp	cx,[di+8]
 31658 00005976 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 31659 00005979 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 31660                                  	
 31661                                  	;cmp	al,[di+4]
 31662 0000597B 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31663                                  	;JZ	getb35				; Just asked for same buffer
 31664 0000597E 7503                    	jnz	short getb5
 31665                                  	;jmp	getb35
 31666                                  	; 17/12/2022
 31667                                  	; 28/07/2019
 31668 00005980 E9C700                  	jmp	getb35x
 31669                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31670                                  	;jmp	getb35
 31671                                  
 31672                                  ;	It's not the buffer most recently returned. See if it's in the
 31673                                  ;	cache.
 31674                                  ;
 31675                                  ;	(cx:dx) = sector #
 31676                                  ;	(al) = drive #
 31677                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31678                                  ;	??? list may be incomplete ???
 31679                                  
 31680                                  getb5:	
 31681                                  	; MSDOS 3.3
 31682                                  	;lds	di,[SS:BUFFHEAD]
 31683                                  	; MSDOS 6.0
 31684 00005983 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 31685                                  getb10:	
 31686                                  	;cmp	dx,[di+6]
 31687 00005986 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31688 00005989 750D                    	jne	short getb12			; wrong sector lo
 31689                                  	
 31690                                  	; MSDOS 6.0
 31691                                  	;cmp	cx,[di+8]
 31692 0000598B 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31693 0000598E 7508                    	jne	short getb12			; wrong sector hi
 31694                                  	
 31695                                  	;cmp	al,[di+4]
 31696 00005990 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31697                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31698 00005993 7503                    	jne	short getb12
 31699 00005995 E98C00                  	jmp	getb25
 31700                                  getb12:	
 31701                                  	; MSDOS 3.3
 31702                                  	;;mov	di,[DI]
 31703                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31704                                  	;
 31705                                  	; 15/08/2018
 31706                                  	;lds	di,[di]
 31707                                  
 31708                                  	;cmp	di,-1 ; 0FFFFh
 31709                                  	;jne	short getb10
 31710                                  	;lds	di,[SS:BUFFHEAD]
 31711                                  
 31712                                  	; MSDOS 6.0
 31713 00005998 8B3D                    	mov	di,[di]
 31714                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31715 0000599A 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31716 0000599F 75E5                    	jne	short getb10			; no, continue looking
 31717                                  
 31718                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31719                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31720                                  ;	new sector into it.
 31721                                  ;
 31722                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31723                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31724                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31725                                  ;	down a chain, but should be hashed.
 31726                                  ;
 31727                                  ;	(DS:DI) = first buffer in the queue
 31728                                  ;	(CX:DX) = sector # we want
 31729                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31730                                  
 31731                                  	; MSDOS 3.3 & MSDOS 6.0
 31732                                  ;hkn; SS override
 31733 000059A1 51                      	PUSH	CX  ; MSDOS 6.0
 31734 000059A2 56                      	push	si
 31735 000059A3 52                      	push	dx
 31736 000059A4 55                      	push	bp
 31737 000059A5 06                      	push	es
 31738 000059A6 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 31739 000059A9 07                      	pop	es
 31740 000059AA 5D                      	pop	bp
 31741 000059AB 5A                      	pop	dx
 31742 000059AC 5E                      	pop	si
 31743 000059AD 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31744                                  	;jc	short getbx			; if got hard error
 31745 000059B2 7303                    	jnc	short getb13
 31746 000059B4 E99D00                  	jmp	getbx
 31747                                  
 31748                                  getb13:
 31749                                  	; MSDOS 6.0
 31750 000059B7 E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31751                                  
 31752                                  ;	We're ready to read in the buffer, if need be. If the caller
 31753                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31754                                  
 31755 000059BA 30E4                    	XOR	AH,AH				; initial flags
 31756                                  ;hkn; SS override
 31757                                  	;test	byte [ss:PREREAD],0FFh
 31758                                  	;jnz	short getb20
 31759 000059BC 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31760 000059C1 7549                    	JNZ	short getb20			; no, we're done
 31761                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31762                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31763 000059C3 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31764                                  	;MOV	CX,1
 31765                                  	; 22/09/2023
 31766 000059C6 29C9                    	sub	cx,cx ; 0
 31767 000059C8 56                      	push	si
 31768 000059C9 57                      	push	di
 31769 000059CA 52                      	push	dx
 31770                                  	; MSDOS 6.0
 31771 000059CB 06                      	push	es ; ***
 31772                                  
 31773                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31774                                  ;	this point. -mrw 10/88
 31775                                  	
 31776                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31777                                  	; 22/09/2023
 31778 000059CC 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 31779 000059D1 7407                    	jz	short getb14
 31780 000059D3 1E                      	push	ds ; **
 31781 000059D4 53                      	push	bx ; *
 31782 000059D5 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31783                                  getb14:
 31784                                  ;M039: Eliminated redundant HMA code.
 31785                                  
 31786                                  	; 22/09/2023
 31787 000059DA 41                      	inc	cx ; cx = 1
 31788                                  
 31789                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31790 000059DB 09F6                    	OR	SI,SI			; FAT sector ?
 31791 000059DD 7407                    	JZ	short getb15		
 31792                                  
 31793 000059DF E80ADD                  	call	FATSECRD
 31794                                  	;mov	ah,2
 31795 000059E2 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31796                                  
 31797 000059E4 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31798                                  
 31799                                  getb15:
 31800 000059E6 E82FDD                  	call	DREAD			; Buffer is marked free if read barfs
 31801 000059E9 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31802                                  getb17:
 31803                                  	; 17/12/2022	
 31804                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31805                                  ;%if 0
 31806                                  	; MSDOS 6.0							  ;I001
 31807 000059EB 9C                      	pushf								  ;I001
 31808 000059EC 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31809 000059F2 7411                    	jz	short not_in_hma	; no				  ;I001
 31810                                  	;mov	cx,[es:bp+2]
 31811 000059F4 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31812 000059F8 D1E9                    	shr	cx,1							  ;I001
 31813 000059FA 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31814 000059FB 89DE                    	mov	si,bx							  ;I001
 31815 000059FD 5F                      	pop	di ; *							  ;I001
 31816 000059FE 07                      	pop	es ; **							  ;I001
 31817 000059FF FC                      	cld								  ;I001
 31818 00005A00 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31819 00005A01 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31820 00005A03 06                      	push	es							  ;I001
 31821 00005A04 1F                      	pop	ds							  ;I001
 31822                                  ;%endif
 31823                                  
 31824                                  ; 17/12/2022
 31825                                  %if 0
 31826                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31827                                  	; MSDOS 5.0
 31828                                  	pushf
 31829                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31830                                  	jz	short not_in_hma	; no
 31831                                  	popf
 31832                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31833                                  	shr	cx,1
 31834                                  	mov	si,bx
 31835                                  	pop	di ; *
 31836                                  	pop	es ; **
 31837                                  	cld
 31838                                  	rep	movsw
 31839                                  	push	es
 31840                                  	pop	ds
 31841                                  	jmp	short getb19 ; 27/11/2022
 31842                                  %endif
 31843                                  
 31844                                  not_in_hma:								  ;I001
 31845 00005A05 9D                      	popf							 	  ;I001
 31846                                  getb19:
 31847 00005A06 07                      	pop	es ; ***
 31848 00005A07 5A                      	pop	dx
 31849 00005A08 5F                      	pop	di
 31850 00005A09 5E                      	pop	si
 31851 00005A0A 7248                    	JC	short getbx
 31852                                  
 31853                                  ;	The buffer has the data setup in it (if we were to read)
 31854                                  ;	Setup the various buffer fields
 31855                                  ;
 31856                                  ;	(ds:di) = buffer address
 31857                                  ;	(es:bp) = DPB address
 31858                                  ;	(HIGH_SECTOR:DX) = sector #
 31859                                  ;	(ah) = BUF_FLAGS value
 31860                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31861                                  
 31862                                  ;hkn; SS override
 31863                                  getb20:	; MSDOS 6.0
 31864 00005A0C 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31865                                  	;mov	[di+8],cx
 31866 00005A11 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31867                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31868                                   	;mov	[di+6],dx
 31869 00005A14 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31870                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31871                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31872 00005A17 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31873                                  	;;mov	[di+0Ch],es
 31874                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31875 00005A1A 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31876                                  	; 15/12/2022
 31877 00005A1D 268A4600                	mov	al,[es:bp]
 31878                                  	;mov	al,[es:bp+0]
 31879                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31880                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31881                                  	;mov	[di+4],ax
 31882 00005A21 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31883                                  getb25:	
 31884                                  	; MSDOS 3.3
 31885                                  	;mov     ax,1
 31886                                  
 31887                                  	; MSDOS 6.0
 31888                                  	;mov	byte [di+0Ah],1
 31889 00005A24 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31890 00005A28 31C0                    	XOR	AX,AX
 31891                                  
 31892                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31893 00005A2A 09F6                    	OR	SI,SI				; FAT sector ?
 31894 00005A2C 740B                    	JZ	short getb30
 31895                                  
 31896                                  	;mov	al,[es:bp+8]
 31897 00005A2E 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31898                                  	
 31899                                  	; MSDOS 6.0
 31900 00005A32 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31901                                  	;mov	ax,[es:bp+0Fh]
 31902 00005A35 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31903                                  						;  sectors
 31904                                  	; MSDOS 3.3
 31905                                  	;;mov	ah,[es:bp+0Fh]
 31906                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31907                                  
 31908                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31909                                  ;		is set
 31910                                  
 31911                                  getb30:	
 31912                                  	; MSDOS 6.0
 31913                                  	;mov	[di+0Bh],ax
 31914 00005A39 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31915                                  
 31916                                  	; MSDOS 3.3
 31917                                  	;;mov	[di+8],ax ; 15/08/2018	
 31918                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31919                                  
 31920 00005A3C E8BBFE                  	CALL	PLACEBUF
 31921                                  
 31922                                  ;hkn; SS override for next 4
 31923                                  getb35: 
 31924                                  	; 17/12/2022
 31925                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31926                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31927                                  	;MOV	[SS:CURBUF+2],DS
 31928                                  	;MOV	[SS:LastBuffer+2],DS
 31929                                  	;MOV	[SS:CURBUF],DI
 31930                                  	;MOV	[SS:LastBuffer],DI
 31931                                  	;CLC
 31932                                  
 31933                                  	; 17/12/2022
 31934                                  	; 07/12/2022
 31935                                  	; Retro DOS v4.0
 31936 00005A3F 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31937 00005A44 36893E[1E00]            	mov	[ss:LastBuffer],di
 31938 00005A49 F8                      	clc
 31939                                  getb35x: ; 28/07/2019
 31940 00005A4A 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31941 00005A4F 36893E[E205]            	MOV	[ss:CURBUF],di
 31942                                  
 31943                                  ;	Return with 'C' set appropriately
 31944                                  ;	(dx) = caller's original value
 31945                                  
 31946                                  getbx:	
 31947 00005A54 16                      	push	ss
 31948 00005A55 1F                      	pop	ds
 31949                                  	;retn
 31950                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31951                                  getbuffrb_retn:
 31952                                  ;flushbuf_retn:	; 17/12/2022
 31953 00005A56 C3                      	retn
 31954                                  
 31955                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31956                                  ;----------------------------------------------------------------------------
 31957                                  ; Input:
 31958                                  ;	DS = DOSGROUP
 31959                                  ;	AL = Physical unit number local buffers only
 31960                                  ;	   = -1 for all units and all remote buffers
 31961                                  ; Function:
 31962                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31963                                  ;	Carry set if error (user FAILed to I 24)
 31964                                  ;	    Flush operation completed.
 31965                                  ; DS Preserved, all others destroyed (ES too)
 31966                                  ;----------------------------------------------------------------------------
 31967                                  
 31968                                  	; 20/05/2019 - Retro DOS v4.0
 31969                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31970                                  
 31971                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31972                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31973                                  FLUSHBUF:
 31974                                  	; MSDOS 3.3
 31975                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31976                                  	;lds	di,[BUFFHEAD]
 31977                                  
 31978                                  	; MSDOS 6.0
 31979 00005A57 E887FE                  	call	GETCURHEAD
 31980                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31981 00005A5A 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31982 00005A60 7508                    	jnz	short scan_buf_queue
 31983 00005A62 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31984 00005A68 7423                    	je	short end_scan
 31985                                  	
 31986                                  scan_buf_queue:
 31987 00005A6A E82900                  	call	CHECKFLUSH
 31988                                  	;push	ax  ; MSDOS 3.3
 31989                                  	; MSDOS 6.0
 31990                                  	;mov	ah,[di+4]
 31991 00005A6D 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31992 00005A70 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31993 00005A75 7408                    	je	short free_the_buf
 31994                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31995 00005A77 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31996 00005A7D 7405                    	jz	short dont_free_the_buf
 31997                                  	; MSDOS 3.3
 31998                                  	;;mov	al,[di+4]
 31999                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32000                                  	;cmp	[SS:WPERR],al					;hkn;
 32001                                  	; 15/08/2018
 32002                                  	;jne	short dont_free_the_buf	
 32003                                  free_the_buf:
 32004                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32005 00005A7F C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32006                                  dont_free_the_buf:
 32007                                  	;pop	ax  ; MSDOS 3.3 	   	
 32008                                  
 32009                                  	; MSDOS 3.3
 32010                                  	;mov	di,[DI]
 32011                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32012                                  	;
 32013                                  	; 15/08/2018
 32014                                  	;lds	di,[di]
 32015                                  	;
 32016                                  	;cmp	di,-1 ; 0FFFFh
 32017                                  	;jnz	short scan_buf_queue 
 32018                                  	
 32019                                  	; MSDOS 6.0
 32020 00005A84 8B3D                    	mov	di,[di]
 32021                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32022 00005A86 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32023 00005A8B 75DD                    	jne	short scan_buf_queue
 32024                                  
 32025                                  end_scan:
 32026 00005A8D 16                      	push	ss
 32027 00005A8E 1F                      	pop	ds
 32028                                  	; 01/08/2018 - Retro DOS v3.0
 32029                                  	;cmp	byte [FAILERR],0
 32030                                  	;jne	short bad_flush
 32031                                  	;retn
 32032                                  ;bad_flush:
 32033                                  	;stc
 32034                                  	;retn
 32035                                  
 32036                                  	; 17/12/2022
 32037                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32038                                  	; 01/08/2018 - Retro DOS v3.0
 32039 00005A8F 803E[4A03]01            	cmp	byte [FAILERR],1
 32040 00005A94 F5                      	cmc
 32041                                  flushbuf_retn:
 32042 00005A95 C3                      	retn
 32043                                  	
 32044                                  	; 17/12/2022
 32045                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32046                                  	;cmp	byte [FAILERR],0
 32047                                  	;jne	short bad_flush
 32048                                  	;retn
 32049                                  ;bad_flush:
 32050                                  	;stc
 32051                                  	;retn
 32052                                  
 32053                                  ;----------------------------------------------------------------------------
 32054                                  ;
 32055                                  ; Procedure Name : CHECKFLUSH
 32056                                  ;
 32057                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32058                                  ;	   DS:DI - pointer to buffer
 32059                                  ;
 32060                                  ; Function : Write out a buffer if it is dirty
 32061                                  ;
 32062                                  ; Carry set if problem (currently user FAILed to I 24)
 32063                                  ;
 32064                                  ;----------------------------------------------------------------------------
 32065                                  
 32066                                  CHECKFLUSH:
 32067                                  	; MSDOS 6.0
 32068 00005A96 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 32069                                  	;cmp	[di+4],ah
 32070 00005A98 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32071 00005A9B 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32072 00005A9D 38C4                    	CMP	AH,AL			; 
 32073 00005A9F 7406                    	JZ	short DOBUFFER		; do this buffer
 32074                                  	;cmp	al,[di+4]
 32075 00005AA1 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32076 00005AA4 F8                      	CLC
 32077 00005AA5 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32078                                  DOBUFFER:
 32079                                  	;test	byte [di+5],40h
 32080 00005AA7 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32081 00005AAB 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32082 00005AAD 50                      	PUSH	AX
 32083                                  	;push	word [di+4]
 32084 00005AAE FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32085 00005AB1 E80B00                  	CALL	BUFWRITE
 32086 00005AB4 58                      	POP	AX
 32087 00005AB5 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32088                                  	;and	ah,0BFh
 32089 00005AB7 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32090                                  	;mov	[di+4],ax
 32091 00005ABA 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32092                                  LEAVE_BUF:
 32093 00005ABD 58                      	POP	AX			; Search info
 32094                                  checkflush_retn:
 32095 00005ABE C3                      	retn
 32096                                  
 32097                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32098                                  ;----------------------------------------------------------------------------
 32099                                  ;
 32100                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32101                                  ;
 32102                                  ;	ENTRY	DS:DI Points to the buffer
 32103                                  ;
 32104                                  ;	EXIT	Buffer marked free
 32105                                  ;		Carry set if error (currently user FAILed to I 24)
 32106                                  ;
 32107                                  ;	USES	All buf DS:DI
 32108                                  ;		HIGH_SECTOR
 32109                                  ;----------------------------------------------------------------------------
 32110                                  
 32111                                  	; 20/05/2019 - Retro DOS v4.0
 32112                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32113                                  
 32114                                  
 32115                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32116                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32117                                  
 32118                                  BUFWRITE:
 32119                                  	; 10/09/2018
 32120                                  	; 01/08/2018 - Retro DOS v3.0
 32121                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32122 00005ABF B8FF00                  	MOV	AX,00FFH
 32123                                  	;xchg	ax,[di+4]
 32124 00005AC2 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32125 00005AC5 3CFF                    	CMP	AL,0FFH
 32126 00005AC7 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32127                                  	;test	ah,40h
 32128 00005AC9 F6C440                  	test	AH,buf_dirty
 32129 00005ACC 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32130                                  	; MSDOS 6.0
 32131 00005ACE E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32132                                  
 32133                                  ;hkn; SS override
 32134 00005AD1 363A06[2203]            	CMP	AL,[SS:WPERR]
 32135 00005AD6 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32136                                  
 32137                                  ;hkn; SS override
 32138                                  	; MSDOS 6.0
 32139 00005AD8 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32140                                  	
 32141                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32142                                  	;les	bp,[di+13] ; MSDOS 6.0
 32143 00005ADC C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32144                                  	;;lea	bx,[di+16]
 32145                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32146 00005ADF 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32147                                  	;mov	dx,[di+6]
 32148 00005AE2 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32149                                  	
 32150                                  	; MSDOS 6.0
 32151                                  	;mov	cx,[di+8]
 32152 00005AE5 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32153                                  
 32154                                  ;hkn; SS override
 32155 00005AE8 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32156 00005AED 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32157                                  	; MSDOS 3.3
 32158                                  	;; mov	cx,[DI+8]
 32159                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32160                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32161 00005AF0 30ED                    	XOR	CH,CH
 32162                                  	;;mov	ah,ch ; MSDOS 3.3
 32163                                  
 32164                                  ;hkn; SS override for ALLOWED
 32165                                  	;mov	byte [SS:ALLOWED],18h
 32166 00005AF2 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32167                                  	;test	byte [di+5],8
 32168                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32169                                  	;test	ah,8
 32170 00005AF8 F6C408                  	test	AH,buf_isDATA
 32171 00005AFB 7406                    	JZ	short NO_IGNORE
 32172                                  	;or	byte [SS:ALLOWED],20h
 32173 00005AFD 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32174                                  NO_IGNORE:
 32175                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32176                                  	; MSDOS 6.0
 32177                                  	;mov	ax,[di+11]
 32178 00005B03 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32179                                  
 32180 00005B06 57                      	PUSH	DI		; Save buffer pointer
 32181 00005B07 31FF                    	XOR	DI,DI		; Indicate failure
 32182                                  
 32183 00005B09 1E                      	push	ds ; *
 32184 00005B0A 53                      	push	bx ; **
 32185                                  WRTAGAIN:
 32186 00005B0B 57                      	push	di ; ***
 32187 00005B0C 51                      	push	cx ; ****
 32188 00005B0D 50                      	push	ax ; *****
 32189                                  	;MOV	CX,1
 32190                                  	; 17/12/2022
 32191                                  	; ch = 0
 32192 00005B0E B101                    	mov	cl,1 ; 24/07/2019
 32193                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32194                                  	;mov	cx,1
 32195 00005B10 53                      	push	bx ; ******
 32196 00005B11 52                      	push	dx ; *******
 32197 00005B12 1E                      	push	ds ; ********
 32198                                  
 32199                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32200                                  
 32201                                  	; MSDOS 6.0
 32202                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32203                                  	; 22/09/2023
 32204 00005B13 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32205 00005B18 7418                    	jz	short NBUFFINHMA
 32206 00005B1A 51                      	push	cx
 32207 00005B1B 06                      	push	es
 32208 00005B1C 89DE                    	mov	si,bx
 32209 00005B1E 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32210 00005B22 D1E9                    	shr	cx,1
 32211 00005B24 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32212 00005B29 89FB                    	mov	bx,di
 32213 00005B2B FC                      	cld
 32214 00005B2C F3A5                    	rep	movsw
 32215 00005B2E 06                      	push	es
 32216 00005B2F 1F                      	pop	ds
 32217 00005B30 07                      	pop	es
 32218 00005B31 59                      	pop	cx
 32219                                  NBUFFINHMA:
 32220 00005B32 E843DC                  	call	DWRITE		; Write out the dirty buffer
 32221 00005B35 1F                      	pop	ds ; ********
 32222 00005B36 5A                      	pop	dx ; *******
 32223 00005B37 5B                      	pop	bx ; ******
 32224 00005B38 58                      	pop	ax ; *****
 32225 00005B39 59                      	pop	cx ; ****
 32226 00005B3A 5F                      	pop	di ; ***
 32227 00005B3B 7201                    	JC	short NOSET
 32228 00005B3D 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32229                                  NOSET:				;	succeedes.
 32230 00005B3E 01C2                    	ADD	DX,AX
 32231 00005B40 E2C9                    	LOOP	WRTAGAIN
 32232 00005B42 5B                      	pop	bx ; **
 32233 00005B43 1F                      	pop	ds ; *
 32234                                  	;OR	DI,DI		; Clears carry
 32235                                  	;JNZ	short BWROK	; At least one write worked
 32236                                  	;STC			; DI never got INCed, all writes failed.
 32237                                  	; 22/09/2023
 32238 00005B44 83FF01                  	cmp	di,1
 32239                                  BWROK:	
 32240 00005B47 5F                      	POP	DI
 32241 00005B48 C3                      	retn
 32242                                  
 32243                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32244                                  ;----------------------------------------------------------------------------
 32245                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32246                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32247                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32248                                  ;	code and time
 32249                                  ;
 32250                                  ;	ENTRY	ES:BP = drive parameter block
 32251                                  ;
 32252                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32253                                  ;		[SC_DRIVE]= drive #
 32254                                  ;
 32255                                  ;	USES	Flags
 32256                                  ;----------------------------------------------------------------------------
 32257                                  
 32258                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32259                                  ; 04/05/2019 - Retro DOS v4.0
 32260                                  
 32261                                  SET_RQ_SC_PARMS:
 32262                                  ;hkn; SS override for all variables used in this procedure.
 32263 00005B49 50                      	push	ax
 32264                                  	;mov	ax,[es:bp+2]
 32265 00005B4A 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32266 00005B4E 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32267                                  	;;mov	al,[es:bp+0]
 32268                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32269                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32270                                  	; 15/12/2022
 32271 00005B52 268A4600                	mov	al,[ES:BP]
 32272 00005B56 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32273 00005B5A 58                      	pop	ax
 32274                                  srspx:	
 32275 00005B5B C3                      	retn					;LB. return
 32276                                  
 32277                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32278                                  ;----------------------------------------------------------------------------
 32279                                  ; Input:
 32280                                  ;	none
 32281                                  ; Function:
 32282                                  ;	increment dirty buffers count
 32283                                  ; Output:
 32284                                  ;	dirty buffers count is incremented
 32285                                  ;
 32286                                  ; All registers preserved
 32287                                  ;----------------------------------------------------------------------------
 32288                                  
 32289                                  INC_DIRTY_COUNT:
 32290                                  ;; BUGBUG  ---- remove this routine
 32291                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32292 00005B5C 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32293 00005B61 C3                      	retn
 32294                                  
 32295                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32296                                  ;----------------------------------------------------------------------------
 32297                                  ; Input:
 32298                                  ;	none
 32299                                  ; Function:
 32300                                  ;	decrement dirty buffers count
 32301                                  ; Output:
 32302                                  ;	dirty buffers count is decremented
 32303                                  ;
 32304                                  ; All registers preserved
 32305                                  ;----------------------------------------------------------------------------
 32306                                  
 32307                                  DEC_DIRTY_COUNT:
 32308 00005B62 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32309 00005B68 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32310 00005B6A 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32311                                  					; error condition to underflow here? ;hkn;
 32312                                  ddcx:	
 32313 00005B6F C3                      	retn
 32314                                  
 32315                                  ;============================================================================
 32316                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32317                                  ;============================================================================
 32318                                  ; 02/08/2018 - Retro DOS v3.0
 32319                                  ; 29/04/2019 - Retro DOS v4.0
 32320                                  
 32321                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32322                                  
 32323                                  ; Pseudo EXEC system call for DOS
 32324                                  
 32325                                  ;	TITLE	MSPROC - process maintenance
 32326                                  ;	NAME	MSPROC
 32327                                  
 32328                                  ; =========================================================================
 32329                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32330                                  ;	I/O specs are defined in DISPATCH.
 32331                                  ;
 32332                                  ;	$WAIT
 32333                                  ;	$EXEC
 32334                                  ;	$Keep_process
 32335                                  ;	Stay_resident
 32336                                  ;	$EXIT
 32337                                  ;	$ABORT
 32338                                  ;	abort_inner
 32339                                  ;
 32340                                  ;	Modification history:
 32341                                  ;
 32342                                  ;		Created: ARR 30 March 1983
 32343                                  ;		AN000	version 4.0 jan. 1988
 32344                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32345                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32346                                  ;
 32347                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32348                                  ;
 32349                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32350                                  ;		       dossym.inc. 7/30/90
 32351                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32352                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32353                                  ;		       stack is provided at the end of the program. Note that
 32354                                  ;		       only SP is changed.
 32355                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32356                                  ;
 32357                                  ;		M028 - 4b04 implementation
 32358                                  ;
 32359                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32360                                  ;			in memory block >= 64K, sp = 0. If memory block
 32361                                  ;			obtained is <64K, point sp at the end of the memory
 32362                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32363                                  ;			added for a stack segment which may be needed if it
 32364                                  ;			is loaded in low memory situations.
 32365                                  ;
 32366                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32367                                  ;
 32368                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32369                                  ;			a bad environment if it reached 32767 bytes. Changed
 32370                                  ;			to allow 32768 bytes of environment.
 32371                                  ;
 32372                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32373                                  ;		       COM file high. Also ensure that if the biggest block
 32374                                  ;		       into which we load the com file is less than 64K then
 32375                                  ;		       we provide atleast 256 bytes of stack to the user.
 32376                                  ;
 32377                                  ;		M050 - Made Lie table search CASE insensitive
 32378                                  ;
 32379                                  ;		M060 - Removed special version table from the kernal and
 32380                                  ;                      put it in a device drive which puts the address
 32381                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32382                                  ;		       as a DWORD.
 32383                                  ;
 32384                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32385                                  ;		       entry do not try to load low if there is no space in
 32386                                  ;		       UMBs.
 32387                                  ;
 32388                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32389                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32390                                  ;		       change return address to LeaveDos if AL=5.
 32391                                  ;
 32392                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32393                                  ;                      controls building a version of MSDOS.SYS that only
 32394                                  ;                      runs programs from a fixed list (defined in the
 32395                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32396                                  ;                      for details.  This feature is used to build a
 32397                                  ;                      "special" version of DOS that can be handed out to
 32398                                  ;                      OEM/ISV customers as part of a "service" disk.
 32399                                  ;
 32400                                  ; =========================================================================
 32401                                  
 32402                                  ;SAVEXIT  EQU  10
 32403                                  
 32404                                  ;BREAK	<$WAIT - return previous process error code>
 32405                                  ; =========================================================================
 32406                                  ;	$WAIT - Return previous process error code.
 32407                                  ;
 32408                                  ;	Assembler usage:
 32409                                  ;
 32410                                  ;	    MOV     AH, WaitProcess
 32411                                  ;	    INT     int_command
 32412                                  ;
 32413                                  ;	ENTRY	none
 32414                                  ;	EXIT	(ax) = exit code
 32415                                  ;	USES	all
 32416                                  ; =========================================================================
 32417                                  
 32418                                  	; 20/05/2019 - Retro DOS v4.0
 32419                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32420                                  
 32421                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32422                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32423                                  _$WAIT:
 32424                                  	; 02/08/2018 - Retro DOS v3.0
 32425                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32426                                  
 32427 00005B70 31C0                    	xor	AX,AX
 32428 00005B72 368706[3403]            	xchg	AX,[ss:exit_code]
 32429 00005B77 E9C1AA                  	jmp	SYS_RET_OK
 32430                                  
 32431                                  ; =========================================================================
 32432                                  ;BREAK <$exec - load/go a program>
 32433                                  ;	EXEC.ASM - EXEC System Call
 32434                                  ;
 32435                                  ;
 32436                                  ; Assembler usage:
 32437                                  ;	    lds     DX, Name
 32438                                  ;	    les     BX, Blk
 32439                                  ;	    mov     AH, Exec
 32440                                  ;	    mov     AL, FUNC
 32441                                  ;	    int     INT_COMMAND
 32442                                  ;
 32443                                  ;	AL  Function
 32444                                  ;	--  --------
 32445                                  ;	 0  Load and execute the program.
 32446                                  ;	 1  Load, create the program header but do not
 32447                                  ;	    begin execution.
 32448                                  ;	 3  Load overlay. No header created.
 32449                                  ;
 32450                                  ;	    AL = 0 -> load/execute program
 32451                                  ;
 32452                                  ;	    +---------------------------+
 32453                                  ;	    | WORD segment address of	|
 32454                                  ;	    | environment.		|
 32455                                  ;	    +---------------------------+
 32456                                  ;	    | DWORD pointer to ASCIZ	|
 32457                                  ;	    | command line at 80h	|
 32458                                  ;	    +---------------------------+
 32459                                  ;	    | DWORD pointer to default	|
 32460                                  ;	    | FCB to be passed at 5Ch	|
 32461                                  ;	    +---------------------------+
 32462                                  ;	    | DWORD pointer to default	|
 32463                                  ;	    | FCB to be passed at 6Ch	|
 32464                                  ;	    +---------------------------+
 32465                                  ;
 32466                                  ;	    AL = 1 -> load program
 32467                                  ;
 32468                                  ;	    +---------------------------+
 32469                                  ;	    | WORD segment address of	|
 32470                                  ;	    | environment.		|
 32471                                  ;	    +---------------------------+
 32472                                  ;	    | DWORD pointer to ASCIZ	|
 32473                                  ;	    | command line at 80h	|
 32474                                  ;	    +---------------------------+
 32475                                  ;	    | DWORD pointer to default	|
 32476                                  ;	    | FCB to be passed at 5Ch	|
 32477                                  ;	    +---------------------------+
 32478                                  ;	    | DWORD pointer to default	|
 32479                                  ;	    | FCB to be passed at 6Ch	|
 32480                                  ;	    +---------------------------+
 32481                                  ;	    | DWORD returned value of	|
 32482                                  ;	    | CS:IP			|
 32483                                  ;	    +---------------------------+
 32484                                  ;	    | DWORD returned value of	|
 32485                                  ;	    | SS:IP			|
 32486                                  ;	    +---------------------------+
 32487                                  ;
 32488                                  ;	    AL = 3 -> load overlay
 32489                                  ;
 32490                                  ;	    +---------------------------+
 32491                                  ;	    | WORD segment address where|
 32492                                  ;	    | file will be loaded.	|
 32493                                  ;	    +---------------------------+
 32494                                  ;	    | WORD relocation factor to |
 32495                                  ;	    | be applied to the image.	|
 32496                                  ;	    +---------------------------+
 32497                                  ;
 32498                                  ; Returns:
 32499                                  ;	    AX = error_invalid_function
 32500                                  ;	       = error_bad_format
 32501                                  ;	       = error_bad_environment
 32502                                  ;	       = error_not_enough_memory
 32503                                  ;	       = error_file_not_found
 32504                                  ; =========================================================================
 32505                                  ;
 32506                                  ;   Revision history:
 32507                                  ;
 32508                                  ;	 A000	version 4.00  Jan. 1988
 32509                                  ;
 32510                                  ; =========================================================================
 32511                                  
 32512                                  Exec_Internal_Buffer		EQU	OPENBUF
 32513                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32514                                  
 32515                                  ; =========================================================================
 32516                                  
 32517                                  ;IF1		; warning message on buffers
 32518                                  ;%out	Please make sure that the following are contiguous and of the
 32519                                  ;%out	following sizes:
 32520                                  ;%out
 32521                                  ;%out	OpenBuf     128
 32522                                  ;%out	RenBuf	    128
 32523                                  ;%out	SearchBuf    53
 32524                                  ;%out	DummyCDS    curdirLen
 32525                                  ;ENDIF
 32526                                  
 32527                                  ; =========================================================================
 32528                                  
 32529                                  ; =========================================================================
 32530                                  ;
 32531                                  ; =========================================================================
 32532                                  
 32533                                  	; 20/05/2019 - Retro DOS v4.0
 32534                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32535                                  
 32536                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32537                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32538                                  	
 32539                                  _$EXEC:
 32540                                  	; 02/08/2018 - Retro DOS v3.0
 32541                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32542                                  
 32543                                  EXEC001S:
 32544                                  	;LocalVar    Exec_Blk		,DWORD
 32545                                  	;LocalVar    Exec_Func		,BYTE
 32546                                  	;LocalVar    Exec_Load_High	,BYTE
 32547                                  	;LocalVar    Exec_FH		,WORD
 32548                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32549                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32550                                  	;LocalVar    Exec_Environ	,WORD
 32551                                  	;LocalVar    Exec_Size		,WORD
 32552                                  	;LocalVar    Exec_Load_Block	,WORD
 32553                                  	;LocalVar    Exec_DMA		,WORD
 32554                                  	;LocalVar    ExecNameLen 	,WORD
 32555                                  	;LocalVar    ExecName		,DWORD
 32556                                  	;
 32557                                  	;LocalVar    Exec_DMA_Save	,WORD
 32558                                  	;LocalVar    Exec_NoStack	,BYTE
 32559                                  
 32560                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32561                                  	;%define	Exec_Blk	dword [bp-4]
 32562                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32563                                  	%define		Exec_BlkL	word [bp-4]	
 32564                                  	%define		Exec_BlkH	word [bp-2]
 32565                                  	%define		Exec_Func	byte [bp-5]
 32566                                  	%define		Exec_Load_High	byte [bp-6]
 32567                                  	%define		Exec_FH		word [bp-8]
 32568                                  	%define		Exec_Rel_Fac	word [bp-10]
 32569                                  	%define		Exec_Res_Len_Para word [bp-12]
 32570                                  	%define		Exec_Environ	word [bp-14]
 32571                                  	%define		Exec_Size	word [bp-16]
 32572                                  	%define		Exec_Load_Block	word [bp-18]
 32573                                  	%define		Exec_DMA	word [bp-20]
 32574                                  	%define		ExecNameLen	word [bp-22]
 32575                                  	;%define	ExecName	dword [bp-26]
 32576                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32577                                  	%define		ExecNameL	word [bp-26]	
 32578                                  	%define		ExecNameH	word [bp-24]
 32579                                  	; MSDOS 6.0
 32580                                  	%define		Exec_DMA_Save	word [bp-28]
 32581                                  	%define		Exec_NoStack	byte [bp-29]
 32582                                  	
 32583                                  	; ==================================================================
 32584                                  	; validate function
 32585                                  	; ==================================================================
 32586                                  		      	
 32587                                  	; M068 - Start
 32588                                  	;
 32589                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32590                                  	; possibility that the count may not be decremented all the way to
 32591                                  	; 0. A typical case is if the program for which we intended to keep 
 32592                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32593                                  	; calls), exits pre-maturely due to error conditions.
 32594                                  
 32595                                  	; MSDOS 6.0
 32596 00005B7A 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32597                                  
 32598                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32599                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32600                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32601                                  
 32602 00005B80 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32603                                  	;jne	short @f
 32604 00005B82 7505                    	jne	short Exec_@f		; N: continue
 32605                                  					; Y: change ret addr. to LeaveDos.
 32606 00005B84 59                      	pop	cx			; Note CX is not input to ExecReady
 32607 00005B85 B9[0804]                	mov	cx,LeaveDOS
 32608 00005B88 51                      	push	cx
 32609                                  ;@@:
 32610                                  Exec_@f:
 32611                                  	; M068 - End
 32612                                  	
 32613                                  	;Enter
 32614                                  
 32615 00005B89 55                      	push	bp
 32616 00005B8A 89E5                    	mov	bp,sp
 32617                                  	;;sub	sp,26	; MSDOS 3.3
 32618                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32619                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32620                                  	; 17/12/2022
 32621                                  	; 20/05/2019
 32622 00005B8C 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32623                                  
 32624                                  	; MSDOS 6.0
 32625 00005B8F 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32626                                  					; M030
 32627 00005B91 7614                    	jna	short Exec_Check_2
 32628                                  
 32629                                  	; MSDOS 3.3
 32630                                  	;cmp	AL,3
 32631                                  	;jna	short Exec_Check_2
 32632                                  
 32633                                  Exec_Bad_Fun:
 32634 00005B93 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32635                                  					; Extended Error Locus	;smr;SS Override
 32636                                  	;mov	al,1
 32637 00005B99 B001                    	mov	al,error_invalid_function
 32638                                  
 32639                                  Exec_Ret_Err:
 32640                                  	;Leave
 32641 00005B9B 89EC                    	mov	sp,bp
 32642 00005B9D 5D                      	pop	bp
 32643                                  	;transfer SYS_RET_ERR
 32644 00005B9E E9A3AA                  	jmp	SYS_RET_ERR
 32645                                  
 32646                                  	; MSDOS 6.0
 32647                                  ExecReadyJ:
 32648 00005BA1 E8FD17                  	call	ExecReady		; M028
 32649 00005BA4 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32650                                  
 32651                                  Exec_Check_2:
 32652 00005BA7 3C02                    	cmp	AL,2			
 32653 00005BA9 74E8                    	je	short Exec_Bad_Fun
 32654                                  
 32655                                  	; MSDOS 6.0
 32656 00005BAB 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32657 00005BAD 74E4                    	je	short Exec_Bad_Fun
 32658                                  	
 32659 00005BAF 3C05                    	cmp	al,5			; M028 ; M030
 32660 00005BB1 74EE                    	je	short ExecReadyJ	; M028
 32661                                  
 32662                                  	;mov	[bp-4],bx
 32663 00005BB3 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32664                                  	;mov	[bp-2],es
 32665 00005BB6 8C46FE                  	mov	Exec_BlkH,ES
 32666                                  	;mov	[bp-5],al
 32667 00005BB9 8846FB                  	mov	Exec_Func,AL
 32668                                  	;mov	byte [bp-6],0
 32669 00005BBC C646FA00                	mov	Exec_Load_High,0
 32670                                  
 32671                                  	;mov	[bp-26],dx
 32672 00005BC0 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32673                                  	;mov	[bp-24],ds
 32674 00005BC3 8C5EE8                  	mov	ExecNameH,DS
 32675 00005BC6 89D6                    	mov	SI,DX			; move pointer to convenient place
 32676                                  	;invoke	DStrLen
 32677 00005BC8 E833B6                  	call	DStrLen
 32678                                  	;mov	[bp-22],cx
 32679 00005BCB 894EEA                  	mov	ExecNameLen,CX		; save length
 32680                                  
 32681                                  	; MSDOS 6.0
 32682 00005BCE 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32683 00005BD2 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32684                                  
 32685 00005BD6 30C0                    	xor	AL,AL			; open for reading
 32686 00005BD8 55                      	push	BP
 32687                                  
 32688                                  	; MSDOS 6.0
 32689                                  	;or	byte [ss:DOS_FLAG],1
 32690 00005BD9 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32691                                  					; the redir that this open call is
 32692                                  					; due to an exec.
 32693                                  
 32694                                  	;invoke	$OPEN			; is the file there?
 32695 00005BDF E80513                  	call	_$OPEN
 32696                                  
 32697                                  	; MSDOS 6.0
 32698 00005BE2 9C                      	pushf
 32699                                  	; 02/06/2019
 32700                                  	;and	byte [ss:DOS_FLAG],0FEh
 32701 00005BE3 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32702 00005BE9 9D                      	popf
 32703                                  
 32704 00005BEA 5D                      	pop	BP
 32705                                  
 32706                                  	; MSDOS 3.3 & MSDOS 6.0
 32707 00005BEB 72AE                    	jc	short Exec_Ret_Err
 32708                                  
 32709                                  	;mov	[bp-8],ax
 32710 00005BED 8946F8                  	mov	Exec_FH,AX
 32711 00005BF0 89C3                    	mov	BX,AX
 32712 00005BF2 30C0                    	xor	AL,AL
 32713                                  	;invoke	$Ioctl
 32714 00005BF4 E88BC6                  	call	_$IOCTL
 32715 00005BF7 7207                    	jc	short Exec_BombJ
 32716                                  
 32717                                  	;test	dl,80h
 32718 00005BF9 F6C280                  	test	DL,devid_ISDEV
 32719 00005BFC 740A                    	jz	short Exec_Check_Environ
 32720                                  
 32721                                  	;mov	al,2
 32722 00005BFE B002                    	mov	AL,error_file_not_found
 32723                                  Exec_BombJ:
 32724 00005C00 E9CA00                  	jmp	Exec_Bomb
 32725                                  
 32726                                  BadEnv:
 32727                                  	;mov	al,0Ah
 32728 00005C03 B00A                    	mov	AL,error_bad_environment
 32729 00005C05 E9C500                  	jmp	Exec_Bomb
 32730                                  
 32731                                  Exec_Check_Environ:
 32732                                  	;mov	word [bp-18],0
 32733 00005C08 C746EE0000              	mov	Exec_Load_Block,0
 32734                                  	;mov	word [bp-14],0
 32735 00005C0D C746F20000              	mov	Exec_Environ,0
 32736                                  					; overlays... no environment
 32737                                  	;test	byte [bp-5],2
 32738 00005C12 F646FB02                	test	Exec_Func,exec_func_overlay
 32739 00005C16 7552                    	jnz	short Exec_Read_Header
 32740                                  
 32741                                  	;lds	si,[bp-4]
 32742 00005C18 C576FC                  	lds	SI,Exec_Blk		; get block
 32743 00005C1B 8B04                    	mov	ax,[SI]
 32744                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32745 00005C1D 09C0                    	or	AX,AX
 32746 00005C1F 750C                    	jnz	short Exec_Scan_Env
 32747                                  
 32748 00005C21 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32749                                  	;mov	ax,[44]
 32750 00005C26 A12C00                  	mov	AX,[PDB.ENVIRON]
 32751                                  
 32752                                  ; MSDOS 6.0
 32753                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32754                                  ;
 32755                                  ; Exec_environ is being correctly initialized after the environment has been
 32756                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32757                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32758                                  ; parent's environment.
 32759                                  ;	mov	Exec_Environ,AX
 32760                                  ;
 32761                                  ;----------------------------------------------------------------------------
 32762                                  
 32763                                  	;mov	[bp-14],ax
 32764                                  	;mov	Exec_Environ,ax
 32765                                  
 32766 00005C29 09C0                    	or	AX,AX
 32767 00005C2B 743D                    	jz	short Exec_Read_Header
 32768                                  
 32769                                  Exec_Scan_Env:
 32770 00005C2D 8EC0                    	mov	ES,AX
 32771 00005C2F 31FF                    	xor	DI,DI
 32772                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32773 00005C31 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32774 00005C34 30C0                    	xor	AL,AL
 32775                                  
 32776                                  Exec_Get_Environ_Len:
 32777 00005C36 F2AE                    	repnz	scasb			; find that nul byte
 32778 00005C38 75C9                    	jnz	short BadEnv
 32779                                  
 32780 00005C3A 49                      	dec	CX			; Dec CX for the next nul byte test
 32781 00005C3B 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32782                                  
 32783 00005C3D AE                      	scasb				; is there another nul byte?
 32784 00005C3E 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32785                                  
 32786 00005C40 57                      	push	DI
 32787                                  	;lea	bx,[DI+11h]
 32788 00005C41 8D5D11                  	lea	BX,[DI+0Fh+2]
 32789                                  	;add	bx,[bp-22]
 32790 00005C44 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32791                                  					; remember argv[0] length
 32792                                  					; round up and remember argc
 32793 00005C47 B104                    	mov	CL,4
 32794 00005C49 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32795 00005C4B 06                      	push	ES
 32796                                  	;invoke	$Alloc			; can we get the space?
 32797 00005C4C E84406                  	call	_$ALLOC
 32798 00005C4F 1F                      	pop	DS
 32799 00005C50 59                      	pop	CX
 32800                                  
 32801                                  	;jnc	short Exec_Save_Environ
 32802                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32803                                  	; 17/12/2022
 32804 00005C51 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32805                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32806                                  	;jnc	short Exec_Save_Environ
 32807                                  	;jmp	SHORT Exec_No_Mem
 32808                                  
 32809                                  Exec_Save_Environ:
 32810 00005C53 8EC0                    	mov	ES,AX
 32811                                  	;mov	[bp-14],ax
 32812 00005C55 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32813 00005C58 31F6                    	xor	SI,SI
 32814 00005C5A 89F7                    	mov	DI,SI
 32815 00005C5C F3A4                    	rep	movsb			; copy the environment
 32816 00005C5E B80100                  	mov	AX,1
 32817 00005C61 AB                      	stosw
 32818                                  	;lds	si,[bp-26]
 32819 00005C62 C576E6                  	lds	SI,ExecName
 32820                                  	;mov	cx,[bp-22]
 32821 00005C65 8B4EEA                  	mov	CX,ExecNameLen
 32822 00005C68 F3A4                    	rep	movsb
 32823                                  
 32824                                  Exec_Read_Header:
 32825                                  	; We read in the program header into the above data area and
 32826                                  	; determine where in this memory the image will be located.
 32827                                  
 32828                                  	;Context DS
 32829 00005C6A 16                      	push	ss
 32830 00005C6B 1F                      	pop	ds
 32831                                  	;mov	cx,26
 32832 00005C6C B91A00                  	mov	CX,exec_header_len	; header size
 32833 00005C6F BA[C80F]                	mov	DX,exec_signature
 32834 00005C72 06                      	push	ES
 32835 00005C73 1E                      	push	DS
 32836 00005C74 E88304                  	call	ExecRead
 32837 00005C77 1F                      	pop	DS
 32838 00005C78 07                      	pop	ES
 32839 00005C79 7250                    	jc	short Exec_Bad_File
 32840                                  
 32841 00005C7B 09C0                    	or	AX,AX
 32842 00005C7D 744C                    	jz	short Exec_Bad_File
 32843                                  	;cmp	ax,26
 32844 00005C7F 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32845 00005C82 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32846                                  
 32847 00005C84 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32848 00005C8A 7504                    	jnz	short Exec_Check_Sig
 32849                                  
 32850                                  	;mov	byte [bp-6],0FFh
 32851 00005C8C C646FAFF                	mov	Exec_Load_High,-1
 32852                                  
 32853                                  Exec_Check_Sig:
 32854 00005C90 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32855                                  	;cmp	ax,5A4Dh ; 'MZ'
 32856 00005C93 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32857 00005C96 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32858                                  
 32859                                  	;cmp	ax,4D5Ah ; 'ZM'
 32860 00005C98 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32861 00005C9B 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32862                                  
 32863                                  Exec_Com_Filej:
 32864 00005C9D E9E901                  	jmp	Exec_Com_File
 32865                                  
 32866                                  	; We have the program header... determine memory requirements
 32867                                  
 32868                                  Exec_Save_Start:
 32869 00005CA0 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32870 00005CA3 B105                    	mov	CL,5			; convert to paragraphs
 32871 00005CA5 D3E0                    	shl	AX,CL
 32872 00005CA7 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32873                                  	;mov	[bp-12],ax
 32874 00005CAB 8946F4                  	mov	Exec_Res_Len_Para,AX
 32875                                  
 32876                                  		; Do we need to allocate memory?
 32877                                  		; Yes if function is not load-overlay
 32878                                  
 32879                                  	;test	byte [bp-5],2
 32880 00005CAE F646FB02                	test	Exec_Func,exec_func_overlay
 32881 00005CB2 7445                    	jz	short Exec_Allocate	; allocation of space
 32882                                  
 32883                                  		; get load address from block
 32884                                  
 32885                                  	;les	di,[bp-4]
 32886 00005CB4 C47EFC                  	les	DI,Exec_Blk
 32887 00005CB7 268B05                  	mov	ax,[es:di]
 32888                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32889                                  	;mov	[bp-20],ax
 32890 00005CBA 8946EC                  	mov	Exec_DMA,AX
 32891                                  
 32892                                  	; 17/12/2022
 32893                                  	;;mov	ax,[es:di+2]
 32894                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32895                                  	;;mov	[bp-10],ax
 32896                                  	;mov	Exec_Rel_Fac,AX
 32897                                  
 32898                                  	; 17/12/2022
 32899                                  	; 30/11/2022 (!most proper code!)
 32900                                  	;mov	dx,[es:di+2]
 32901 00005CBD 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32902                                  	;mov	[bp-10],dx
 32903 00005CC1 8956F6                  	mov	Exec_Rel_Fac,dx
 32904                                  	; ax = Exec_DMA
 32905 00005CC4 E9DE00                  	jmp	Exec_Find_Res
 32906                                  
 32907                                  ; 17/12/2022
 32908                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32909                                  ; 27/09/2023
 32910                                  %if 0
 32911                                  	; 02/06/2019 - Retro DOS v4.0
 32912                                  	;mov	ax,[bp-20]  ; *+*
 32913                                  	mov	AX,Exec_DMA ; *+*
 32914                                  	; 10/08/2018
 32915                                  	jmp	Exec_Find_Res		; M000
 32916                                  %endif
 32917                                  
 32918                                  Exec_No_Mem:
 32919                                  	;mov	al,8
 32920 00005CC7 B008                    	mov	AL,error_not_enough_memory
 32921 00005CC9 EB02                    	jmp	short Exec_Bomb
 32922                                  
 32923                                  Exec_Bad_File:
 32924                                  	;mov	al,0Bh
 32925 00005CCB B00B                    	mov	AL,error_bad_format
 32926                                  
 32927                                  Exec_Bomb:
 32928                                  	;mov	bx,[bp-8]
 32929 00005CCD 8B5EF8                  	mov	BX,Exec_FH
 32930 00005CD0 E84004                  	call	Exec_Dealloc
 32931                                  	;LeaveCrit CritMem
 32932 00005CD3 E857B6                  	call	LCritMEM
 32933                                  	;save	<AX,BP>
 32934 00005CD6 50                      	push	ax
 32935 00005CD7 55                      	push	bp
 32936                                  	;invoke	$CLOSE
 32937 00005CD8 E83D0A                  	call	_$CLOSE
 32938                                  	;restore <BP,AX>
 32939 00005CDB 5D                      	pop	bp
 32940 00005CDC 58                      	pop	ax
 32941 00005CDD E9BBFE                  	jmp	Exec_Ret_Err
 32942                                  
 32943                                  Exec_Chk_Mem: 
 32944                                  	
 32945                                  	; 24/09/2023
 32946                                  	; ds = DOSDATA
 32947                                  ; 17/12/2022
 32948                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32949                                  ;%if 0
 32950                                  	; MSDOS 6.0    			; M063 - Start
 32951                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32952                                  	; 10/06/2019
 32953 00005CE0 A0[0203]                	mov	al,[AllocMethod]
 32954                                  	;mov	bl,[ss:ALLOCMSAVE]
 32955 00005CE3 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32956                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32957 00005CE7 881E[0203]              	mov	[AllocMethod],bl
 32958                                  	
 32959 00005CEB F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32960 00005CEE 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32961                                  	;				; N: continue
 32962                                  	;
 32963 00005CF0 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32964 00005CF2 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32965                                  	; 02/06/2019
 32966                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32967 00005CF4 A1[8A00]                	mov	ax,[SAVE_AX]
 32968                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32969                                  					; M063 - End
 32970 00005CF7 EB2B                    	jmp	short Exec_Norm_Alloc1
 32971                                  ;%endif
 32972                                  
 32973                                  ; 17/12/2022
 32974                                  %if 0
 32975                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32976                                  	; MSDOS 6.0    			; M063 - Start
 32977                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32978                                  	mov	bl,[ss:ALLOCMSAVE]
 32979                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32980                                  
 32981                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32982                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32983                                  	;				; N: continue
 32984                                  	;
 32985                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32986                                  	jz	short Exec_No_Mem	; N: no memory 
 32987                                  
 32988                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32989                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32990                                  					; M063 - End
 32991                                  %endif
 32992                                  
 32993                                  Exec_Allocate:
 32994                                  	; 09/09/2018
 32995                                  
 32996                                  	; M005 - START
 32997                                  	; If there is no STACK segment for this exe file and if this
 32998                                  	; not an overlay and the resident size is less than 64K - 
 32999                                  	; 256 bytes we shall add 256 bytes to the programs 
 33000                                  	; resident memory requirement and set Exec_SP to this value.
 33001                                  	
 33002                                  	; 17/12/2022
 33003 00005CF9 29DB                    	sub	bx,bx ; 0	
 33004                                  
 33005                                  	; MSDOS 6.0
 33006                                  	;;mov	byte [bp-29],0
 33007                                  	;mov	Exec_NoStack,0
 33008                                  	; 17/12/2022
 33009 00005CFB 885EE3                  	mov	Exec_NoStack,bl ; 0
 33010 00005CFE 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33011                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33012 00005D02 7511                    	jne	short ea1		; Y: continue normal processing
 33013 00005D04 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33014                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33015 00005D08 750B                    	jne	short ea1		; Y: continue normal processing
 33016                                  
 33017                                  	;inc	byte [bp-29]
 33018 00005D0A FE46E3                  	inc	Exec_NoStack
 33019 00005D0D 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33020 00005D10 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33021                                  
 33022 00005D12 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33023                                  ea1:
 33024                                  	; M005 - END
 33025                                  
 33026                                  	; MSDOS 6.0			; M000 - start
 33027                                  	; 20/05/2019
 33028                                  	; (ds = ss = DOSDATA)
 33029 00005D15 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33030                                  					; Q: is the alloc strat high_first
 33031 00005D1A 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33032                                  					; Y: set high_only bit
 33033 00005D1C 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33034                                  					; M000 - end
 33035                                  Exec_Norm_Alloc:
 33036 00005D21 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33037                                  Exec_Norm_Alloc1:	; 02/06/2019
 33038                                  					; M000: attempt at allocating memory
 33039                                  	; MSDOS 3.3
 33040                                  	;push	ax			; M000
 33041                                  
 33042 00005D24 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33043 00005D27 1E                      	push	DS
 33044                                  	;invoke	$Alloc			; should have carry set and BX has max
 33045 00005D28 E86805                  	call	_$ALLOC
 33046 00005D2B 1F                      	pop	DS
 33047                                  
 33048                                  	; MSDOS 6.0
 33049 00005D2C A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33050                                  	; MSDOS 3.3
 33051                                  	;pop	ax			; M000
 33052                                  
 33053 00005D2F 83C010                  	add	AX,10h			; room for header
 33054 00005D32 83FB11                  	cmp	BX,11h			; enough room for a header
 33055                                  	; MSDOS 6.0
 33056 00005D35 72A9                    	jb	short Exec_Chk_Mem	; M000
 33057                                  	; MSDOS 3.3	
 33058                                  	;jb	short Exec_No_Mem
 33059                                  
 33060 00005D37 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33061                                  	; MSDOS 6.0
 33062 00005D39 77A5                    	ja	short Exec_Chk_Mem	; M000
 33063                                  	; MSDOS 3.3
 33064                                  	;ja	short Exec_No_Mem
 33065                                  
 33066                                  	;test	byte [bp-6],0FFh
 33067 00005D3B F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33068 00005D3F 7518                    	jnz	short Exec_BX_Max	; use max
 33069                                  
 33070                                  	; 09/09/2018
 33071                                  
 33072 00005D41 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33073                                  	; MSDOS 6.0
 33074 00005D45 7299                    	jc	short Exec_Chk_Mem		; M000
 33075                                  	; MSDOS 3.3
 33076                                  	;jc	short Exec_No_Mem
 33077                                  
 33078 00005D47 39D8                    	cmp	AX,BX			; enough space?
 33079                                  	; MSDOS 6.0
 33080 00005D49 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33081                                  	; MSDOS 3.3
 33082                                  	;ja	short Exec_No_Mem
 33083                                  
 33084 00005D4B 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33085 00005D4F 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33086 00005D53 7204                    	jc	short Exec_BX_Max
 33087                                  
 33088 00005D55 39D8                    	cmp	AX,BX
 33089 00005D57 7602                    	jbe	short Exec_Got_Block
 33090                                  
 33091                                  Exec_BX_Max:
 33092 00005D59 89D8                    	mov	AX,BX
 33093                                  
 33094                                  Exec_Got_Block:
 33095                                  	; 03/08/2018 - Retro DOS v3.0
 33096                                  
 33097 00005D5B 1E                      	push	DS
 33098 00005D5C 89C3                    	mov	BX,AX
 33099                                  	;mov	[bp-16],bx
 33100 00005D5E 895EF0                  	mov	Exec_Size,BX
 33101                                  	;invoke	$Alloc			; get the space
 33102 00005D61 E82F05                  	call	_$ALLOC
 33103 00005D64 1F                      	pop	DS
 33104                                  	; MSDOS 6.0
 33105                                  	;jc	short Exec_Chk_Mem	; M000
 33106                                  	; MSDOS 3.3
 33107                                  	;;jc	short Exec_No_Mem
 33108                                  	; 20/05/2019
 33109 00005D65 7303                    	jnc	short ea0
 33110 00005D67 E976FF                  	jmp	Exec_Chk_Mem
 33111                                  ea0:
 33112                                  	; MSDOS 6.0
 33113 00005D6A 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33114 00005D6E 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33115                                  
 33116                                  ;M029; Begin changes
 33117                                  ; This code does special handling for programs with no stack segment. If so,
 33118                                  ;check if the current block is larger than 64K. If so, we do not modify
 33119                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33120                                  ;case Exec_SS is not changed.
 33121                                  
 33122                                  	; MSDOS 6.0
 33123                                  	;cmp	byte [bp-29],0
 33124 00005D72 807EE300                	cmp	Exec_NoStack,0
 33125                                  	;je	@f
 33126 00005D76 7412                    	je	short ea2
 33127                                  
 33128 00005D78 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33129                                  	;jae	@f			; Y: Exec_SP = 0
 33130 00005D7C 730C                    	jae	short ea2
 33131                                  
 33132                                  ;Make Exec_SP point at the top of the memory block
 33133                                  
 33134 00005D7E B104                    	mov	cl,4
 33135 00005D80 D3E3                    	shl	bx,cl			; get byte offset
 33136 00005D82 81EB0001                	sub	bx,100h			; take care of PSP
 33137 00005D86 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33138                                  ea2:
 33139                                  ;@@:
 33140                                  ;M029; end changes
 33141                                  
 33142                                  	;mov	[bp-18],ax
 33143 00005D8A 8946EE                  	mov	Exec_Load_Block,AX
 33144 00005D8D 83C010                  	add	AX,10h
 33145                                  	;test	byte [bp-6],0FFh
 33146 00005D90 F646FAFF                	test	Exec_Load_High,-1
 33147 00005D94 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33148                                  
 33149                                  	;add	ax,[bp-16]
 33150 00005D96 0346F0                  	add	AX,Exec_Size		; go to end
 33151                                  	;sub	ax,[bp-12]
 33152 00005D99 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33153 00005D9C 83E810                  	sub	AX,10h			; drop off pdb
 33154                                  
 33155                                  Exec_Use_AX:
 33156                                  	;mov	[bp-10],ax
 33157 00005D9F 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33158                                  	;mov	[bp-20],ax
 33159 00005DA2 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33160                                  
 33161                                  	; Determine the location in the file of the beginning of
 33162                                  	; the resident
 33163                                  
 33164                                  ; 17/12/2022
 33165                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33166                                  ;%if 0
 33167                                  
 33168                                  Exec_Find_Res:
 33169                                  	; MSDOS 6.0
 33170                                  	;;mov	dx,[bp-20]
 33171                                  	;mov	DX,Exec_DMA ; *+*
 33172                                  	;;mov	[bp-28],dx
 33173                                  	;mov	Exec_DMA_Save,DX
 33174                                  
 33175                                  	; 17/12/2022
 33176                                  	; AX = Exec_DMA
 33177                                  
 33178                                  	; 02/06/2019 - Retro DOS v4.0
 33179                                  	;mov	[bp-28],ax ; *+*
 33180 00005DA5 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33181                                  
 33182                                  ;%endif
 33183                                  
 33184                                  ; 17/12/2022
 33185                                  %if 0
 33186                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33187                                  Exec_Find_Res:
 33188                                  	;mov	dx,[bp-20]
 33189                                  	mov	DX,Exec_DMA ; *+*
 33190                                  	;mov	[bp-28],dx
 33191                                  	mov	Exec_DMA_Save,DX
 33192                                  %endif
 33193                                  
 33194                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33195 00005DA8 8B16[D00F]              	mov	DX,[exec_par_dir]
 33196 00005DAC 52                      	push	DX
 33197 00005DAD B104                    	mov	CL,4
 33198 00005DAF D3E2                    	shl	DX,CL			; low word of location
 33199 00005DB1 58                      	pop	AX
 33200 00005DB2 B10C                    	mov	CL,12
 33201 00005DB4 D3E8                    	shr	AX,CL			; high word of location
 33202 00005DB6 89C1                    	mov	CX,AX			; CX <- high
 33203                                  
 33204                                  		; Read in the resident image (first, seek to it)
 33205                                  	;mov	bx,[bp-8]
 33206 00005DB8 8B5EF8                  	mov	BX,Exec_FH
 33207 00005DBB 1E                      	push	DS
 33208 00005DBC 30C0                    	xor	AL,AL
 33209                                  	;invoke	$Lseek			; Seek to resident
 33210 00005DBE E8D30A                  	call	_$LSEEK
 33211 00005DC1 1F                      	pop	DS
 33212 00005DC2 7303                    	jnc	short Exec_Big_Read
 33213                                  
 33214 00005DC4 E906FF                  	jmp	Exec_Bomb
 33215                                  
 33216                                  Exec_Big_Read:				; Read resident into memory
 33217                                  	;mov	bx,[bp-12]
 33218 00005DC7 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33219 00005DCA 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33220 00005DCE 7203                    	jb	short Exec_Read_OK
 33221                                  
 33222 00005DD0 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33223                                  
 33224                                  Exec_Read_OK:
 33225                                  	;sub	[bp-12],bx
 33226 00005DD3 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33227 00005DD6 53                      	push	BX
 33228 00005DD7 B104                    	mov	CL,4
 33229 00005DD9 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33230 00005DDB 89D9                    	mov	CX,BX			; Count in correct register
 33231 00005DDD 1E                      	push	DS
 33232                                  	;mov	ds,[bp-20]
 33233 00005DDE 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33234                                  
 33235 00005DE1 31D2                    	xor	DX,DX
 33236 00005DE3 51                      	push	CX			; Save our count
 33237 00005DE4 E81303                  	call	ExecRead
 33238 00005DE7 59                      	pop	CX			; Get old count to verify
 33239 00005DE8 1F                      	pop	DS
 33240 00005DE9 7248                    	jc	short Exec_Bad_FileJ
 33241                                  
 33242 00005DEB 39C1                    	cmp	CX,AX			; Did we read enough?
 33243 00005DED 5B                      	pop	BX			; Get paragraph count back
 33244 00005DEE 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33245                                  
 33246                                  	; The read did not match the request. If we are off by 512
 33247                                  	; bytes or more then the header lied and we have an error.
 33248                                  
 33249 00005DF0 29C1                    	sub	CX,AX
 33250 00005DF2 81F90002                	cmp	CX,512
 33251 00005DF6 733B                    	jae	short Exec_Bad_FileJ
 33252                                  
 33253                                  	; We've read in CX bytes... bump DTA location
 33254                                  
 33255                                  ExecCheckEnd:
 33256                                  	;add	[bp-20],bx
 33257 00005DF8 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33258                                  	;test	word [bp-12],0FFFFh
 33259 00005DFB F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33260 00005E00 75C5                    	jnz	short Exec_Big_Read
 33261                                  
 33262                                  	; The image has now been read in. We must perform relocation
 33263                                  	; to the current location.
 33264                                  
 33265                                  exec_do_reloc:
 33266                                  	;mov	cx,[bp-10]
 33267 00005E02 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33268 00005E05 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33269 00005E08 01C8                    	add	AX,CX			; and relocate him
 33270 00005E0A A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33271                                  
 33272 00005E0D A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33273 00005E10 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33274                                  
 33275 00005E13 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33276 00005E17 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33277 00005E1A 8CC0                    	mov	AX,ES			; rms;NSS
 33278 00005E1C 01C8                    	add	AX,CX			; relocated...
 33279 00005E1E A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33280                                  
 33281 00005E21 31C9                    	xor	CX,CX
 33282 00005E23 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33283                                  	;mov	bx,[bp-8]
 33284 00005E27 8B5EF8                  	mov	BX,Exec_FH
 33285 00005E2A 1E                      	push	DS
 33286 00005E2B 31C0                    	xor	AX,AX
 33287                                  	;invoke	$Lseek
 33288 00005E2D E8640A                  	call	_$LSEEK
 33289 00005E30 1F                      	pop	DS
 33290 00005E31 7303                    	jnc	short exec_get_entries
 33291                                  
 33292                                  Exec_Bad_FileJ:
 33293 00005E33 E995FE                  	jmp	Exec_Bad_File
 33294                                  
 33295                                  exec_get_entries:
 33296 00005E36 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33297                                  
 33298                                  exec_read_reloc:
 33299 00005E3A 52                      	push	DX
 33300                                  	;mov	dx,OPENBUF
 33301 00005E3B BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33302                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33303                                  	;mov	cx,396 ; MSDOS 6.0
 33304 00005E3E B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33305 00005E41 1E                      	push	DS
 33306 00005E42 E8B502                  	call	ExecRead
 33307 00005E45 07                      	pop	ES
 33308 00005E46 5A                      	pop	DX
 33309 00005E47 72EA                    	jc	short Exec_Bad_FileJ
 33310                                  
 33311                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33312                                  	;mov	cx,99 ;  MSDOS 6.0
 33313 00005E49 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33314                                  					; Pointer to byte location in header
 33315                                  	;mov	di,OPENBUF
 33316 00005E4C BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33317                                  	;mov	si,[bp-10]
 33318 00005E4F 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33319                                  
 33320                                  exec_reloc_one:
 33321 00005E52 09D2                    	or	DX,DX			; Any more entries?
 33322 00005E54 7416                    	jz	short Exec_Set_PDBJ
 33323                                  
 33324                                  exec_get_addr:
 33325 00005E56 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33326 00005E59 8CD8                    	mov	AX,DS			; Relocate address of item
 33327                                  
 33328                                  	; MSDOS 6.0
 33329                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33330                                  	;add	ax,[bp-28]
 33331 00005E5B 0346E4                  	add	AX,Exec_DMA_Save
 33332                                  
 33333 00005E5E 8ED8                    	mov	DS,AX
 33334 00005E60 0137                    	add	[BX],SI
 33335 00005E62 83C704                  	add	DI,4
 33336 00005E65 4A                      	dec	DX
 33337 00005E66 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33338                                  
 33339                                  	; We've exhausted a single buffer's worth. Read in the next
 33340                                  	; piece of the relocation table.
 33341                                  
 33342 00005E68 06                      	push	ES
 33343 00005E69 1F                      	pop	DS
 33344 00005E6A EBCE                    	jmp	short exec_read_reloc
 33345                                  
 33346                                  Exec_Set_PDBJ:
 33347                                  	; MSDOS 6.0
 33348                                  	
 33349                                  	; We now determine if this is a buggy exe packed file and if 
 33350                                  	; so we patch in the right code. Note that fixexepatch will
 33351                                  	; point to a ret if dos loads low. The load segment as 
 33352                                  	; determined above will be in exec_dma_save
 33353                                  	
 33354 00005E6C 06                      	push	es
 33355 00005E6D 50                      	push	ax			; M030
 33356 00005E6E 51                      	push	cx			; M030
 33357                                  	;mov	es,[bp-28]
 33358 00005E6F 8E46E4                  	mov	es,Exec_DMA_Save
 33359 00005E72 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33360 00005E76 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33361 00005E7B 36FF16[F811]            	call	word [ss:FixExePatch]
 33362                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33363                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33364                                  	;call	word [ss:Rational386PatchPtr]
 33365 00005E80 59                      	pop	cx			; M030
 33366 00005E81 58                      	pop	ax			; M030
 33367 00005E82 07                      	pop	es
 33368                                  
 33369 00005E83 E9DE00                  	jmp	Exec_Set_PDB
 33370                                  
 33371                                  Exec_No_Memj:
 33372 00005E86 E93EFE                  	jmp	Exec_No_Mem
 33373                                  
 33374                                  	; we have a .COM file. First, determine if we are merely
 33375                                  	; loading an overlay.
 33376                                  
 33377                                  Exec_Com_File:
 33378                                  	;test	byte [bp-5],2
 33379 00005E89 F646FB02                	test	Exec_Func,exec_func_overlay
 33380 00005E8D 742D                    	jz	short Exec_Alloc_Com_File
 33381                                  	;lds	si,[bp-4]
 33382 00005E8F C576FC                  	lds	SI,Exec_Blk		; get arg block
 33383 00005E92 AD                      	lodsw				; get load address
 33384                                  	;mov	[bp-20],ax
 33385 00005E93 8946EC                  	mov	Exec_DMA,AX
 33386 00005E96 B8FFFF                  	mov	AX,0FFFFh
 33387 00005E99 EB63                    	jmp	short Exec_Read_Block	; read it all!
 33388                                  
 33389                                  Exec_Chk_Com_Mem:			
 33390                                  	; MSDOS 6.0	     		; M063 - Start
 33391 00005E9B 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33392 00005E9F 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33393 00005EA4 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33394 00005EA9 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33395 00005EAC 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33396                                  					; N: continue
 33397                                  	
 33398 00005EAE A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33399 00005EB0 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33400                                  	
 33401                                  	;mov	ax,[bp-18]
 33402 00005EB2 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33403 00005EB5 31DB                    	xor	bx,bx			; M047: bx => free arena
 33404 00005EB7 E87502                  	call	ChangeOwner		; M047: free this block
 33405                                  	
 33406 00005EBA EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33407                                  					; M063 - End
 33408                                  	
 33409                                  	; We must allocate the max possible size block (ick!)
 33410                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33411                                  	; size of block.
 33412                                  
 33413                                  Exec_Alloc_Com_File:
 33414                                  	; MSDOS 6.0			; M000 -start
 33415 00005EBC 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33416                                  					; Q: is the alloc strat high_first
 33417 00005EC2 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33418                                  					; Y: set high_only bit
 33419 00005EC4 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33420                                  					; M000 - end
 33421                                  Exec_Norm_Com_Alloc:			; M000
 33422                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33423 00005ECA BBFFFF                  	mov	BX,0FFFFh
 33424                                  	;invoke	$Alloc			; largest piece available as error
 33425 00005ECD E8C303                  	call	_$ALLOC
 33426 00005ED0 09DB                    	or	BX,BX
 33427                                  	; MSDOS 6.0
 33428 00005ED2 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33429                                  	; MSDOS 3.3
 33430                                  	;jz	short Exec_No_Memj
 33431                                  
 33432                                  	;mov	[bp-16],bx
 33433 00005ED4 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33434 00005ED7 53                      	push	BX
 33435                                  	;invoke	$ALLOC			; largest piece available
 33436 00005ED8 E8B803                  	call	_$ALLOC
 33437 00005EDB 5B                      	pop	BX			; get size of block...
 33438                                  	;mov	[bp-18],ax
 33439 00005EDC 8946EE                  	mov	Exec_Load_Block,AX
 33440                                  
 33441 00005EDF 83C010                  	add	AX,10h			; increment for header
 33442                                  	;mov	[bp-20],ax
 33443 00005EE2 8946EC                  	mov	Exec_DMA,AX
 33444                                  
 33445 00005EE5 31C0                    	xor	AX,AX			; presume 64K read...
 33446 00005EE7 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33447 00005EEB 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33448                                  
 33449 00005EED 89D8                    	mov	AX,BX			; convert size to bytes
 33450 00005EEF B104                    	mov	CL,4
 33451 00005EF1 D3E0                    	shl	AX,CL
 33452                                  	; 17/12/2022
 33453                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33454                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33455                                  	; MSDOS 5.0
 33456                                  	;cmp	AX,100h   
 33457                                  	; 02/06/2019 - Retro DOS v4.0
 33458                                  	; MSDOS 6.0
 33459                                          ; 17/12/2022
 33460 00005EF3 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33461 00005EF6 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33462                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33463                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33464                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33465                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33466                                  
 33467                                  					; M047: size of the block is < 64K
 33468 00005EF8 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33469                                  
 33470                                  Exec_Read_Com:
 33471                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33472 00005EFB 2D0001                  	sub	AX,100h 		; remember size of psp
 33473                                  Exec_Read_Block:
 33474 00005EFE 50                      	push	AX			; save number to read
 33475                                  	;mov	bx,[bp-8]
 33476 00005EFF 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33477 00005F02 31C9                    	xor	CX,CX			; but seek to 0:0
 33478 00005F04 89CA                    	mov	DX,CX
 33479 00005F06 31C0                    	xor	AX,AX			; seek relative to beginning
 33480                                  	;invoke	$Lseek			; back to beginning of file
 33481 00005F08 E88909                  	call	_$LSEEK
 33482 00005F0B 59                      	pop	CX			; number to read
 33483                                  	;mov	ds,[bp-20]
 33484 00005F0C 8E5EEC                  	mov	DS,Exec_DMA
 33485 00005F0F 31D2                    	xor	DX,DX
 33486 00005F11 51                      	push	CX
 33487 00005F12 E8E501                  	call	ExecRead
 33488 00005F15 5E                      	pop	SI			; get number of bytes to read
 33489 00005F16 7303                    	jnc	short OkRead
 33490 00005F18 E9B0FD                  	jmp	Exec_Bad_File
 33491                                  
 33492                                  	; 10/09/2018
 33493                                  OkRead:
 33494 00005F1B 39F0                    	cmp	AX,SI			; did we read them all?
 33495                                  	; MSDOS 6.0
 33496                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33497                                  	; MSDOS 3.3
 33498                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33499 00005F1D 7503                    	jne	short OkRead2
 33500 00005F1F E979FF                  	jmp	Exec_Chk_Com_Mem
 33501                                  OkRead2:
 33502                                  	; MSDOS 6.0
 33503 00005F22 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33504 00005F27 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33505                                  
 33506                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33507                                  	;test	byte [bp-5],2
 33508 00005F2C F646FB02                	test	Exec_Func,exec_func_overlay
 33509 00005F30 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33510                                  
 33511                                  	;mov	ax,[bp-20]
 33512 00005F32 8B46EC                  	mov	AX,Exec_DMA
 33513 00005F35 83E810                  	sub	AX,10h
 33514 00005F38 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33515 00005F3C 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33516                                  
 33517                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33518                                  	; of 0 on stack.
 33519                                  
 33520 00005F43 81C6FE00                	add	SI,0FEh 		; make room for stack
 33521                                  
 33522                                  	; MSDOS 6.0
 33523 00005F47 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33524 00005F4A 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33525 00005F4C 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33526                                  
 33527                                  Exec_St_Ok:
 33528                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33529 00005F50 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33530 00005F55 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33531 00005F59 8ED8                    	mov	DS,AX
 33532 00005F5B C7040000                	mov	WORD [SI],0		; 0 for return
 33533                                  
 33534                                  	; MSDOS 6.0
 33535                                  
 33536                                  	; M068
 33537                                  	;
 33538                                  	; We now determine if this is a Copy Protected App. If so the 
 33539                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33540                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33541                                  
 33542 00005F5F 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33543                                  
 33544                                  Exec_Set_PDB:
 33545                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33546                                  	;mov	bx,[bp-8]
 33547 00005F64 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33548 00005F67 E8A901                  	call	Exec_Dealloc
 33549 00005F6A 55                      	push	BP
 33550                                  	;invoke	$Close			; release the jfn
 33551 00005F6B E8AA07                  	call	_$CLOSE
 33552 00005F6E 5D                      	pop	BP
 33553 00005F6F E89301                  	call	Exec_Alloc
 33554                                  	;test	byte [bp-5],2
 33555 00005F72 F646FB02                	test	Exec_Func,exec_func_overlay
 33556 00005F76 743A                    	jz	short Exec_Build_Header
 33557                                  
 33558                                  	; MSDOS 6.0
 33559 00005F78 E8C201                  	call	Scan_Execname
 33560 00005F7B E8D601                  	call	Scan_Special_Entries
 33561                                  ;SR;
 33562                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33563                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33564                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33565                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33566                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33567                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33568                                  ;issues the version check, it gets the lie version until the next overlay
 33569                                  ;call is issued.
 33570                                  
 33571 00005F7E 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33572 00005F84 7426                    	je	short norm_ovl		;yes, no special handling
 33573 00005F86 56                      	push	si
 33574 00005F87 06                      	push	es
 33575 00005F88 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33576                                  	 
 33577                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33578 00005F8D 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33579 00005F91 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33580                                  	
 33581 00005F93 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33582 00005F98 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33583 00005F9D 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33584                                  		;;; PDB.VERSION
 33585 00005FA2 EB06                    	jmp	short setver_done
 33586                                  sysinit_done:
 33587 00005FA4 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33588                                  setver_done:
 33589 00005FAA 07                      	pop	es
 33590 00005FAB 5E                      	pop	si
 33591                                  norm_ovl:
 33592                                  	;leave
 33593 00005FAC 89EC                    	mov	sp,bp		
 33594 00005FAE 5D                      	pop	bp
 33595                                  
 33596                                  	;transfer SYS_RET_OK		; overlay load -> done
 33597 00005FAF E989A6                  	jmp	SYS_RET_OK
 33598                                  
 33599                                  Exec_Build_Header:
 33600                                  	;mov	dx,[bp-18]
 33601 00005FB2 8B56EE                  	mov	DX,Exec_Load_Block
 33602                                  					; assign the space to the process
 33603                                  	;mov	si,1
 33604 00005FB5 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33605                                  	;mov	ax,[bp-14]
 33606 00005FB8 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33607 00005FBB 09C0                    	or	AX,AX
 33608 00005FBD 7405                    	jz	short No_Owner		; no environment
 33609                                  
 33610 00005FBF 48                      	dec	AX			; point to header
 33611 00005FC0 8ED8                    	mov	DS,AX
 33612 00005FC2 8914                    	mov	[SI],DX 		; assign ownership
 33613                                  No_Owner:
 33614                                  	;mov	ax,[bp-18]
 33615                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33616                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33617                                  	; 17/12/2022
 33618 00005FC4 89D0                    	mov	ax,dx ; 06/06/2019
 33619                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33620                                  	
 33621 00005FC6 48                      	dec	AX
 33622 00005FC7 8ED8                    	mov	DS,AX			; point to header
 33623 00005FC9 8914                    	mov	[SI],DX 		; assign ownership
 33624                                  
 33625                                  	; MSDOS 6.0
 33626 00005FCB 1E                      	push	DS			;AN000;MS. make ES=DS
 33627 00005FCC 07                      	pop	ES			;AN000;MS.
 33628                                  	;mov	di,8
 33629 00005FCD BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33630 00005FD0 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33631                                  					;	   ds:si->name, cx=name length
 33632 00005FD3 51                      	push	CX			;AN007;;MS. save for fake version
 33633 00005FD4 56                      	push	SI			;AN007;;MS. save for fake version
 33634                                  
 33635                                  MoveName:				;AN000;
 33636 00005FD5 AC                      	lodsb				;AN000;;MS. get char
 33637 00005FD6 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33638 00005FD8 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33639                                  					;AN000;
 33640 00005FDA AA                      	stosb				;AN000;;MS. move char
 33641                                  					; MSKK bug fix - limit length copied
 33642 00005FDB 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33643 00005FDE 7302                    	jae	short Mem_Done		; jump if so
 33644                                  	;
 33645 00005FE0 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33646                                  Mem_Done:				;AN000;
 33647 00005FE2 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33648                                  	;cmp	di,16
 33649 00005FE4 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33650 00005FE7 7301                    	jae	short Fill8		;AN000;MS.
 33651                                  	
 33652 00005FE9 AA                      	stosb				;AN000;MS.
 33653                                  	
 33654                                  Fill8:					;AN000;
 33655 00005FEA 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33656 00005FEB 59                      	pop	CX			;AN007;MS.
 33657                                  	
 33658 00005FEC E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33659                                  
 33660                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33661 00005FEF 52                      	push	DX
 33662                                  	;mov	si,[bp-16]
 33663 00005FF0 8B76F0                  	mov	SI,Exec_Size
 33664 00005FF3 01D6                    	add	SI,DX
 33665                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33666 00005FF5 E8A4B0                  	call	_$DUP_PDB
 33667 00005FF8 5A                      	pop	DX
 33668                                  
 33669                                  	;push	word [bp-14]
 33670 00005FF9 FF76F2                  	push	Exec_Environ
 33671                                  	;pop	WORD [ES:2Ch]
 33672 00005FFC 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33673                                  
 33674                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33675                                  					; version number in PSP
 33676 00006001 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33677 00006006 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33678                                  		; PDB.VERSION
 33679                                  
 33680                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33681                                  	;lds	si,[bp-4]
 33682 0000600B C576FC                  	lds	SI,Exec_Blk		; get the block
 33683 0000600E 1E                      	push	DS			; save its location
 33684 0000600F 56                      	push	SI
 33685                                  	;lds	si,[si+6]
 33686 00006010 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33687                                  
 33688                                  	; DS points to user space 5C FCB
 33689                                  
 33690 00006013 B90C00                  	mov	CX,12			; copy drive, name and ext
 33691 00006016 51                      	push	CX
 33692 00006017 BF5C00                  	mov	DI,5Ch
 33693 0000601A 8A1C                    	mov	BL,[SI]
 33694 0000601C F3A4                    	rep	movsb
 33695                                  
 33696                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33697                                  
 33698 0000601E 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33699 00006020 AB                      	stosw
 33700 00006021 AB                      	stosw
 33701                                  
 33702                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33703                                  
 33704 00006022 59                      	pop	CX
 33705 00006023 5E                      	pop	SI			; get block
 33706 00006024 1F                      	pop	DS
 33707 00006025 1E                      	push	DS			; save (again)
 33708 00006026 56                      	push	SI
 33709                                  	;lds	si,[si+0Ah]
 33710 00006027 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33711                                  
 33712                                  	; DS points to user space 6C FCB
 33713                                  
 33714 0000602A 8A3C                    	mov	BH,[SI] 		; do same as above
 33715 0000602C F3A4                    	rep	movsb
 33716 0000602E AB                      	stosw
 33717 0000602F AB                      	stosw
 33718 00006030 5E                      	pop	SI			; get block (last time)
 33719 00006031 1F                      	pop	DS
 33720                                  	;ld	si,[si+2]
 33721 00006032 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33722                                  
 33723                                  	; DS points to user space 80 command line
 33724                                  
 33725 00006035 80C980                  	or	CL,80h
 33726 00006038 89CF                    	mov	DI,CX
 33727 0000603A F3A4                    	rep	movsb			; Wham!
 33728                                  
 33729                                  	; Process BX into default AX (validity of drive specs on args).
 33730                                  	; We no longer care about DS:SI.
 33731                                  
 33732 0000603C FEC9                    	dec	CL			; get 0FFh in CL
 33733 0000603E 88F8                    	mov	AL,BH
 33734 00006040 30FF                    	xor	BH,BH
 33735                                  	;invoke	GetVisDrv
 33736 00006042 E8400A                  	call	GetVisDrv
 33737 00006045 7302                    	jnc	short Exec_BL
 33738                                  
 33739 00006047 88CF                    	mov	BH,CL
 33740                                  
 33741                                  Exec_BL:
 33742 00006049 88D8                    	mov	AL,BL
 33743 0000604B 30DB                    	xor	BL,BL
 33744                                  	;invoke	GetVisDrv
 33745 0000604D E8350A                  	call	GetVisDrv
 33746 00006050 7302                    	jnc	short Exec_Set_Return
 33747                                  
 33748 00006052 88CB                    	mov	BL,CL
 33749                                  
 33750                                  Exec_Set_Return:
 33751                                  	;invoke	Get_User_Stack			; get his return address
 33752 00006054 E82EA4                  	call	Get_User_Stack
 33753                                  
 33754                                  	;push	word [si+14h]
 33755 00006057 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33756                                  	;push	word [si+12h]
 33757 0000605A FF7412                  	push	word [SI+user_env.user_IP]
 33758                                  	;push	word [si+14h]
 33759 0000605D FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33760                                  	;push	word [si+12h]
 33761 00006060 FF7412                  	push	word [SI+user_env.user_IP]
 33762                                  	;pop	word [ES:0Ah]
 33763 00006063 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33764                                  	;pop	word [ES:0Ch]
 33765 00006068 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33766                                  
 33767 0000606D 31C0                    	xor	AX,AX
 33768 0000606F 8ED8                    	mov	DS,AX
 33769                                  					; save them where we can get them
 33770                                  					; later when the child exits.
 33771                                  	;pop	word [88h]
 33772 00006071 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33773                                  	;pop	word [90h]
 33774 00006075 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33775                                  
 33776 00006079 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33777 00006080 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33778 00006085 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33779                                  
 33780                                  	;test	byte [bp-5],1
 33781 0000608A F646FB01                	test	Exec_Func,exec_func_no_execute
 33782 0000608E 7427                    	jz	short exec_go
 33783                                  
 33784 00006090 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33785                                  	;les	di,[bp-4]
 33786 00006095 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33787                                  	;mov	[es:di+10h],ds
 33788 00006098 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33789                                  
 33790 0000609C 4E                      	dec	SI			; 'push' default AX
 33791 0000609D 4E                      	dec	SI
 33792 0000609E 891C                    	mov	[SI],BX 		; save default AX reg
 33793                                  	;mov	[es:di+0Eh], si
 33794 000060A0 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33795                                  
 33796 000060A4 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33797                                  	;mov	[es:di+14h],ds
 33798 000060A9 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33799                                  	;mov	[es:di+12h],ax
 33800 000060AD 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33801                                  	
 33802                                  	;leave
 33803 000060B1 89EC                    	mov	sp,bp
 33804 000060B3 5D                      	pop	bp	
 33805                                  
 33806                                  	;transfer SYS_RET_OK
 33807 000060B4 E984A5                  	jmp	SYS_RET_OK
 33808                                  
 33809                                  exec_go:
 33810 000060B7 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33811 000060BC 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33812 000060C1 8CC0                    	mov	AX,ES
 33813                                  
 33814                                  	; MSDOS 6.0
 33815 000060C3 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33816 000060C9 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33817                                  
 33818 000060CB 1E                      	push	ds			; Y: control must go to low mem stub
 33819                                  		
 33820 000060CC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33821                                  					;    control to user 
 33822 000060D1 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33823                                  					; M004: Set bit to signal int 21
 33824                                  					; ah = 25 & ah= 49. See dossym.inc 
 33825                                  					; under TAG M003 & M009 for 
 33826                                  					; explanation
 33827 000060D6 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33828                                  					; M068: going to be turned OFF.
 33829                                  	
 33830 000060DA 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33831 000060DC 1F                      	pop	ds
 33832                                  	
 33833 000060DD 50                      	push	ax			; ret far into the low mem stub
 33834 000060DE B8[FB10]                	mov	ax,disa20_xfer
 33835 000060E1 50                      	push	ax
 33836 000060E2 8CC0                    	mov	AX,ES			; restore ax
 33837 000060E4 CB                      	retf
 33838                                  
 33839                                  Xfer_To_User:
 33840                                  	; DS:SI points to entry point
 33841                                  	; AX:DI points to initial stack
 33842                                  	; DX has PDB pointer
 33843                                  	; BX has initial AX value
 33844                                  
 33845 000060E5 FA                      	cli
 33846                                  	; 15/08/2018
 33847 000060E6 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33848                                  
 33849 000060EC 8ED0                    	mov	SS,AX			; set up user's stack
 33850 000060EE 89FC                    	mov	SP,DI			; and SP
 33851 000060F0 FB                      	sti
 33852                                  
 33853 000060F1 1E                      	push	DS			; fake long call to entry
 33854 000060F2 56                      	push	SI
 33855 000060F3 8EC2                    	mov	ES,DX			; set up proper seg registers
 33856 000060F5 8EDA                    	mov	DS,DX
 33857 000060F7 89D8                    	mov	AX,BX			; set up proper AX
 33858                                  
 33859 000060F9 CB                      	retf
 33860                                  
 33861                                  ; 04/08/2018 - Retro DOS v3.0
 33862                                  
 33863                                  ;----------------------------------------------------------------------------
 33864                                  ;
 33865                                  ;----------------------------------------------------------------------------
 33866                                  
 33867                                  ExecRead:
 33868 000060FA E81600                  	CALL	Exec_Dealloc
 33869                                  	;mov	bx,[bp-8]
 33870 000060FD 8B5EF8                  	MOV	bx,Exec_FH
 33871                                  
 33872 00006100 55                      	PUSH	BP
 33873 00006101 E82507                  	call	_$READ
 33874 00006104 5D                      	POP	BP
 33875                                  
 33876                                  	;CALL	Exec_Alloc
 33877                                  	;retn
 33878                                  	; 18/12/2022
 33879                                  	;jmp	short Exec_Alloc
 33880                                  
 33881                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33882                                  
 33883                                  ;----------------------------------------------------------------------------
 33884                                  ;
 33885                                  ;----------------------------------------------------------------------------
 33886                                  
 33887                                  Exec_Alloc:
 33888 00006105 53                      	push	BX
 33889                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33890                                  	; 20/05/2019 - Retro DOS v4.0
 33891                                  	; MSDOS 6.0
 33892 00006106 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33893 0000610B E81000                  	call	ChangeOwners
 33894 0000610E E81CB2                  	call	LCritMEM
 33895 00006111 5B                      	pop	BX
 33896 00006112 C3                      	retn
 33897                                  
 33898                                  ;----------------------------------------------------------------------------
 33899                                  ;
 33900                                  ;----------------------------------------------------------------------------
 33901                                  
 33902                                  Exec_Dealloc:
 33903 00006113 53                      	push	BX
 33904                                  	;mov	bx,0
 33905 00006114 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33906 00006116 E8F9B1                  	call	ECritMEM
 33907 00006119 E80200                  	call	ChangeOwners
 33908 0000611C 5B                      	pop	BX
 33909 0000611D C3                      	retn
 33910                                  
 33911                                  ; 18/12/2022
 33912                                  %if 0
 33913                                  ;----------------------------------------------------------------------------
 33914                                  ;
 33915                                  ;----------------------------------------------------------------------------
 33916                                  
 33917                                  Exec_Alloc:
 33918                                  	push	BX
 33919                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33920                                  	; 20/05/2019 - Retro DOS v4.0
 33921                                  	; MSDOS 6.0
 33922                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33923                                  	call	ChangeOwners
 33924                                  	call	LCritMEM
 33925                                  	pop	BX
 33926                                  	retn
 33927                                  
 33928                                  %endif
 33929                                  
 33930                                  ;----------------------------------------------------------------------------
 33931                                  ;
 33932                                  ;----------------------------------------------------------------------------
 33933                                  
 33934                                  ChangeOwners:
 33935 0000611E 9C                      	pushf
 33936 0000611F 50                      	push	AX
 33937                                  	;mov	ax,[bp-14]
 33938 00006120 8B46F2                  	mov	AX,Exec_Environ
 33939 00006123 E80900                  	call	ChangeOwner
 33940                                  	;mov	ax,[bp-18]
 33941 00006126 8B46EE                  	mov	AX,Exec_Load_Block
 33942 00006129 E80300                  	call	ChangeOwner
 33943 0000612C 58                      	pop	AX
 33944 0000612D 9D                      	popf
 33945                                  chgown_retn:
 33946 0000612E C3                      	retn
 33947                                  
 33948                                  ;----------------------------------------------------------------------------
 33949                                  ;
 33950                                  ;----------------------------------------------------------------------------
 33951                                  
 33952                                  ChangeOwner:
 33953 0000612F 09C0                    	or	AX,AX			; is area allocated?
 33954 00006131 74FB                    	jz	short chgown_retn	; no, do nothing
 33955 00006133 48                      	dec	AX
 33956 00006134 1E                      	push	DS
 33957 00006135 8ED8                    	mov	DS,AX
 33958 00006137 891E0100                	mov	[ARENA.OWNER],BX
 33959 0000613B 1F                      	pop	DS
 33960 0000613C C3                      	retn
 33961                                  
 33962                                  ;----------------------------------------------------------------------------
 33963                                  ;
 33964                                  ;----------------------------------------------------------------------------
 33965                                  
 33966                                  ; 20/05/2019 - Retro DOS v4.0
 33967                                  
 33968                                  	; MSDOS 6.0
 33969                                  Scan_Execname:
 33970 0000613D C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33971                                  Scan_Execname1:				; M028
 33972                                  Save_Begin:				;
 33973 00006140 89F1                    	mov	CX,SI			; CX= starting addr
 33974                                  Scan0:					;
 33975 00006142 AC                      	lodsb				; get char
 33976                                  
 33977 00006143 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33978 00006145 74F9                    	jz	short Save_Begin	; yes, save si
 33979 00006147 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33980 00006149 74F5                    	jz	short Save_Begin	; yes, save si
 33981 0000614B 3C00                    	cmp	AL,0			; is end of name
 33982 0000614D 75F3                    	jnz	short Scan0		; no, continue scanning
 33983 0000614F 29CE                    	sub	SI,CX			; get name's length
 33984 00006151 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33985                                  
 33986 00006153 C3                      	retn
 33987                                  
 33988                                  ;----------------------------------------------------------------------------
 33989                                  ;
 33990                                  ;----------------------------------------------------------------------------
 33991                                  
 33992                                  ; 20/05/2019 - Retro DOS v4.0
 33993                                  
 33994                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33995                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33996                                  
 33997                                  	; MSDOS 6.0
 33998                                  
 33999                                  Scan_Special_Entries:
 34000                                  
 34001 00006154 49                      	dec	CX			; cx= name length
 34002                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34003                                  					;reset to current version
 34004                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34005                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34006                                  	;mov	word [ss:SPECIAL_VERSION],5
 34007                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34008                                  
 34009                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34010 00006155 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34011                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34012                                  				; 24/09/2023
 34013                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34014                                  ;***	call	Reset_Version
 34015                                  
 34016                                  ;M060	push	SS
 34017                                  ;M060	pop	ES
 34018                                  
 34019 0000615C 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34020 00006161 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34021 00006163 09F8                    	or	AX,DI			;M060; be sure the table exists
 34022 00006165 7427                    	jz	short End_List		;M060; If ZR then no table
 34023                                  
 34024                                  GetEntries:
 34025 00006167 268A05                  	mov	AL,[ES:DI]		; end of list
 34026 0000616A 08C0                    	or	AL,AL
 34027 0000616C 7420                    	jz	short End_List		; yes
 34028                                  
 34029 0000616E 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34030 00006173 38C8                    	cmp	AL,CL			; same length ?
 34031 00006175 751B                    	jnz	short SkipOne 		; no
 34032                                  
 34033 00006177 47                      	inc	DI			; es:di -> special name
 34034 00006178 51                      	push	CX			; save length and name addr
 34035 00006179 56                      	push	SI
 34036                                  
 34037                                  ; M050 - BEGIN
 34038                                  
 34039 0000617A 50                      	push	ax			; save len
 34040                                  sse_next_char:
 34041 0000617B AC                      	lodsb
 34042 0000617C E8D1EE                  	call	UCase
 34043 0000617F AE                      	scasb
 34044 00006180 750D                    	jne	short Not_Matched
 34045 00006182 E2F7                    	loop	sse_next_char
 34046                                  	
 34047                                  ;	repz	cmpsb			; same name ?
 34048                                  ;	jnz	short Not_Matched	; no
 34049                                  
 34050 00006184 58                      	pop	ax			; take len off the stack
 34051                                  
 34052                                  ; M050 - END
 34053                                  
 34054 00006185 268B05                  	mov	AX,[ES:DI]		; get special version
 34055 00006188 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34056                                  
 34057                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34058                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34059                                  
 34060 0000618C 5E                      	pop	SI
 34061 0000618D 59                      	pop	CX
 34062                                  	; 18/12/2022
 34063                                  	;jmp	SHORT End_List
 34064                                  
 34065                                  	; 18/12/2022
 34066                                  End_List:
 34067 0000618E C3                      	retn
 34068                                  
 34069                                  Not_Matched:
 34070 0000618F 58                      	pop	ax			; get len from stack ; M050
 34071 00006190 5E                      	pop	SI			; restore si,cx
 34072 00006191 59                      	pop	CX
 34073                                  
 34074                                  SkipOne:
 34075 00006192 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34076 00006197 30E4                    	xor	AH,AH			; position to next entry
 34077 00006199 01C7                    	add	DI,AX
 34078                                  
 34079 0000619B 83C703                  	add	DI,3			; DI -> next entry length
 34080                                  ;***	add	DI,4			; DI -> next entry length
 34081                                  
 34082 0000619E EBC7                    	jmp	short GetEntries
 34083                                  
 34084                                  	; 18/12/2022
 34085                                  ;End_List:
 34086                                  	;retn
 34087                                  
 34088                                  ; 04/08/2018 - Retro DOS v3.0
 34089                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34090                                  
 34091                                  ;----------------------------------------------------------------------------
 34092                                  ;SUBTTL Terminate and stay resident handler
 34093                                  ;
 34094                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34095                                  ;	    truncate the current block.
 34096                                  ;
 34097                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34098                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34099                                  ;	    and restoring the vectors.
 34100                                  ;
 34101                                  ;----------------------------------------------------------------------------
 34102                                  
 34103                                  	; 20/05/2019 - Retro DOS v4.0
 34104                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34105                                  
 34106                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34107                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34108                                  
 34109                                  _$KEEP_PROCESS:
 34110 000061A0 50                      	push	AX			; keep exit code around
 34111                                  	;mov	byte [SS:EXIT_TYPE],3
 34112 000061A1 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34113 000061A7 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34114 000061AC 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34115 000061AF 7303                    	jae	short Keep_Shrink	; info
 34116                                  
 34117 000061B1 BA0600                  	mov	DX,6h
 34118                                  
 34119                                  Keep_Shrink:
 34120 000061B4 89D3                    	mov	BX,DX
 34121 000061B6 53                      	push	BX
 34122 000061B7 06                      	push	ES
 34123 000061B8 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34124 000061BB 1F                      	pop	DS
 34125 000061BC 5B                      	pop	BX
 34126 000061BD 7207                    	jc	short Keep_Done		; failed on modification
 34127                                  
 34128 000061BF 8CD8                    	mov	AX,DS
 34129 000061C1 01D8                    	add	AX,BX
 34130                                  	;mov	[2],ax
 34131 000061C3 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34132                                  
 34133                                  Keep_Done:
 34134 000061C6 58                      	pop	AX
 34135 000061C7 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34136                                  
 34137                                  ;----------------------------------------------------------------------------
 34138                                  ;
 34139                                  ;----------------------------------------------------------------------------
 34140                                  
 34141                                  STAY_RESIDENT:
 34142                                  	;mov	ax,3100h
 34143 000061C9 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34144 000061CC 83C20F                  	add	DX,15
 34145 000061CF D1DA                    	rcr	DX,1
 34146 000061D1 B103                    	mov	CL,3
 34147 000061D3 D3EA                    	shr	DX,CL
 34148                                  
 34149 000061D5 E92FA1                  	jmp	COMMAND
 34150                                  
 34151                                  ;----------------------------------------------------------------------------
 34152                                  ;SUBTTL $EXIT - return to parent process
 34153                                  ;   Assembler usage:
 34154                                  ;	    MOV     AL, code
 34155                                  ;	    MOV     AH, Exit
 34156                                  ;	    INT     int_command
 34157                                  ;   Error return:
 34158                                  ;	    None.
 34159                                  ;
 34160                                  ;----------------------------------------------------------------------------
 34161                                  
 34162                                  	; 20/05/2019 - Retro DOS v4.0
 34163                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34164                                  
 34165                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34166                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34167                                  _$EXIT:
 34168                                  	; 04/08/2018 - Retro DOS v3.0
 34169                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34170 000061D8 30E4                    	xor	AH,AH
 34171 000061DA 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34172 000061DF 08E4                    	or	AH,AH
 34173                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34174 000061E1 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34175 000061E7 7406                    	jz	short exit_inner
 34176                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34177 000061E9 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34178                                  
 34179                                  	;entry	Exit_inner
 34180                                  exit_inner:
 34181 000061EF E893A2                  	call	Get_User_Stack		;PBUGBUG
 34182                                  
 34183 000061F2 36FF36[3003]            	push	word [ss:CurrentPDB]
 34184                                  	;pop	word [si+14h]
 34185 000061F7 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34186 000061FA EB08                    	jmp	short abort_inner
 34187                                  
 34188                                  ;BREAK <$ABORT -- Terminate a process>
 34189                                  ;----------------------------------------------------------------------------
 34190                                  ; Inputs:
 34191                                  ;	user_CS:00 must point to valid program header block
 34192                                  ; Function:
 34193                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34194                                  ;	to the terminate address
 34195                                  ; Returns:
 34196                                  ;	TO THE TERMINATE ADDRESS
 34197                                  ;----------------------------------------------------------------------------
 34198                                  
 34199                                  _$ABORT:
 34200 000061FC 30C0                    	xor	AL,AL
 34201                                  	;mov	byte [SS:EXIT_TYPE],0
 34202                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34203 000061FE 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34204                                  
 34205                                  	; abort_inner must have AL set as the exit code! The exit type
 34206                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34207                                  	; to be correct as the one that is terminating.
 34208                                  
 34209                                  abort_inner:
 34210 00006204 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34211 00006209 36A3[3403]              	mov	[SS:exit_code],AX
 34212 0000620D E875A2                  	call	Get_User_Stack
 34213                                  
 34214                                  	;mov	ds,[si+14h]
 34215 00006210 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34216 00006213 31C0                    	xor	AX,AX
 34217 00006215 8EC0                    	mov	ES,AX
 34218                                  	;mov	si,10
 34219 00006217 BE0A00                  	mov	SI,SAVEXIT
 34220                                  	;mov	di,88h
 34221 0000621A BF8800                  	mov	DI,addr_int_terminate
 34222 0000621D A5                      	movsw
 34223 0000621E A5                      	movsw
 34224 0000621F A5                      	movsw
 34225 00006220 A5                      	movsw
 34226 00006221 A5                      	movsw
 34227 00006222 A5                      	movsw
 34228 00006223 E944F2                  	jmp	reset_environment
 34229                                  
 34230                                  ;----------------------------------------------------------------------------
 34231                                  ;
 34232                                  ; fixexepatch will point to this is DOS loads low. 
 34233                                  ;
 34234                                  ;----------------------------------------------------------------------------
 34235                                  ; MSDOS 6.0
 34236                                  
 34237                                  ; 29/04/2019 - Retro DOS v4.0
 34238                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34239                                  
 34240                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34241                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34242                                  
 34243                                  RetExePatch: ; proc near
 34244                                  	
 34245 00006226 C3                      	retn
 34246                                  
 34247                                  ;============================================================================
 34248                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34249                                  ;============================================================================
 34250                                  ; 04/08/2018 - Retro DOS v3.0
 34251                                  ; 14/05/2019 - Retro DOS v4.0
 34252                                  
 34253                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34254                                  
 34255                                  ;**
 34256                                  ;	Microsoft Confidential
 34257                                  ;	Copyright (C) Microsoft Corporation 1991
 34258                                  ;	All Rights Reserved.
 34259                                  ;
 34260                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34261                                  ;	I/O specs are defined in DISPATCH.
 34262                                  ;
 34263                                  ;	$ALLOC
 34264                                  ;	$SETBLOCK
 34265                                  ;	$DEALLOC
 34266                                  ;	$AllocOper
 34267                                  ;	arena_free_process
 34268                                  ;	arena_next
 34269                                  ;	check_signature
 34270                                  ;	Coalesce
 34271                                  ;
 34272                                  ;	Modification history:
 34273                                  ;
 34274                                  ;	    Created: ARR 30 March 1983
 34275                                  ;
 34276                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34277                                  ;		      M003 - added support for link/unlink UMBs from
 34278                                  ;			     DOS arena chain. 7/18/90
 34279                                  ;		      M009 - Added error returns invalid function and 
 34280                                  ;			     arena trashed in set link state call.
 34281                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34282                                  ;			     if UMB_HEAD is initialized.
 34283                                  ;
 34284                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34285                                  ;			     support. Please see under M009 in 
 34286                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34287                                  ;
 34288                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34289                                  ;			     sure that umb_head arena is valid and also make
 34290                                  ;			     sure that the previous arena is pointing to 
 34291                                  ;			     umb_head.
 34292                                  ;
 34293                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34294                                  ;			     set allloc strategy.
 34295                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34296                                  ;			     bx in AllocSetStrat.
 34297                                  ;
 34298                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34299                                  ;			     a bit to indicate to dos dispatcher to turn
 34300                                  ;			     a20 off before iret. See M016.
 34301                                  ;
 34302                                  
 34303                                  ;	BREAK	<memory allocation utility routines>
 34304                                  
 34305                                  
 34306                                  ; 15/04/2018 - Retro DOS v2.0
 34307                                  ;----------------------------------------------------------------------------
 34308                                  ; xenix memory calls for MSDOS
 34309                                  ;
 34310                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34311                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34312                                  ;
 34313                                  ;INCLUDE DOSSEG.ASM
 34314                                  
 34315                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34316                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34317                                  
 34318                                  ;.xlist
 34319                                  ;.xcref
 34320                                  ;INCLUDE DOSSYM.ASM
 34321                                  ;INCLUDE DEVSYM.ASM
 34322                                  ;.cref
 34323                                  ;.list
 34324                                  
 34325                                  ;TITLE ALLOC.ASM - memory arena manager
 34326                                  ;NAME Alloc
 34327                                  
 34328                                  ;SUBTTL memory allocation utility routines
 34329                                  ;PAGE
 34330                                  ;
 34331                                  ; arena data
 34332                                  ;
 34333                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34334                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34335                                  ;       i_need  FirstArena,WORD         ; first free block found
 34336                                  ;       i_need  BestArena,WORD          ; best free block found
 34337                                  ;       i_need  LastArena,WORD          ; last free block found
 34338                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34339                                  
 34340                                  ;**	Arena_Free_Process
 34341                                  ;----------------------------------------------------------------------------
 34342                                  ;	Free all arena blocks allocated to a prOcess
 34343                                  ;
 34344                                  ;	ENTRY	(bx) = PID of process
 34345                                  ;	EXIT	none
 34346                                  ;	USES	????? BUGBUG
 34347                                  ;----------------------------------------------------------------------------
 34348                                  
 34349                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34350                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34351                                  
 34352                                  arena_free_process:
 34353                                  	; 14/05/2019 - Retro DOS v4.0
 34354                                  	; 04/08/2018 - Retro DOS v3.0
 34355 00006227 36A1[2400]                      MOV	AX,[SS:arena_head]
 34356                                  arena_free_process_start:
 34357 0000622B BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34358                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34359 0000622E E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34360                                  
 34361                                  arena_free_process_loop:
 34362                                          ;retc
 34363 00006231 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34364 00006233 06                      	PUSH    ES
 34365 00006234 1F                              POP     DS
 34366                                  	;cmp	[1],bx 
 34367 00006235 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34368 00006239 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34369                                  	;mov	[1],di
 34370 0000623B 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34371                                  
 34372                                  arena_free_next:
 34373                                  	;cmp	byte [di],5Ah ;'Z'
 34374 0000623F 803D5A                          CMP     BYTE [DI],arena_signature_end
 34375                                                                          ; end of road, Jack?
 34376                                          ;retz				; never come back no more
 34377                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34378                                  	; 14/05/2019
 34379                                  	; MSDOS 6.0
 34380 00006242 7405                    	jz	short arena_chk_umbs
 34381                                          
 34382 00006244 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34383 00006247 EBE8                            JMP     SHORT arena_free_process_loop
 34384                                  
 34385                                  	; MSDOS 6.0
 34386                                  arena_chk_umbs:				; M010 - Start
 34387                                  	; 20/05/2019
 34388 00006249 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34389 0000624D 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34390 00006250 741E                    	je	short ret_label		; N: we're done
 34391                                  	
 34392 00006252 8CDF                    	mov	di,ds			; di = last arena
 34393 00006254 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34394 00006256 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34395 00006258 EBD1                    	jmp	short arena_free_process_start
 34396                                  					; M010 - End
 34397                                  ;AFP_RETN:
 34398                                  ;	RETN
 34399                                  
 34400                                  ;	BREAK	<Arena Helper Routines>
 34401                                  
 34402                                  ;**	Arena_Next - Find Next item in Arena
 34403                                  ;----------------------------------------------------------------------------
 34404                                  ;	ENTRY	DS - pointer to block head
 34405                                  ;		(di) = 0
 34406                                  ;	EXIT	AX,ES - pointers to next head
 34407                                  ;		'C' set iff arena damaged
 34408                                  ;----------------------------------------------------------------------------
 34409                                  
 34410                                  arena_next:
 34411 0000625A 8CD8                            MOV     AX,DS                   ; AX <- current block
 34412 0000625C 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34413 00006260 40                              INC     AX                      ; remember that header!
 34414                                  
 34415                                  ;       fall into check_signature and return
 34416                                  ;
 34417                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34418                                  ;       RETN
 34419                                  
 34420                                  ;**	Check_Signature - Check Memory Block Signature
 34421                                  ;----------------------------------------------------------------------------
 34422                                  ;	ENTRY	(AX) = address of block header
 34423                                  ;		(di) = 0
 34424                                  ;	EXIT	 ES = AX
 34425                                  ;		'C' clear if signature good
 34426                                  ;		'C' set if signature bad
 34427                                  ;	USES	ES, Flags
 34428                                  ;----------------------------------------------------------------------------
 34429                                  
 34430                                  check_signature:        
 34431                                  
 34432 00006261 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34433                                  	;cmp	byte [es:di],4Dh ; 'M'
 34434 00006263 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34435                                                                          ; IF next signature = not_end THEN
 34436 00006267 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34437                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34438 00006269 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34439                                                                          ; IF next signature = end then
 34440 0000626D 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34441 0000626F F9                              STC                             ; set error
 34442                                  ret_label: ; MSDOS 6.0
 34443                                  AFP_RETN:
 34444                                   	; Retro DOS v2.0 - 05/03/2018
 34445                                  check_signature_ok:
 34446                                  COALESCE_RETN:
 34447 00006270 C3                      	RETN
 34448                                  
 34449                                  ;**	Coalesce - Combine free blocks ahead with current block
 34450                                  ;----------------------------------------------------------------------------
 34451                                  ;	Coalesce adds the block following the argument to the argument block,
 34452                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34453                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34454                                  ;	preceeding allocated block.
 34455                                  ;
 34456                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34457                                  ;		(di) = 0
 34458                                  ;	EXIT	'C' clear if OK
 34459                                  ;		  (ds) unchanged, this block updated
 34460                                  ;		  (ax) = address of next block, IFF not at end
 34461                                  ;		'C' set if arena trashed
 34462                                  ;	USES	(cx)
 34463                                  ;----------------------------------------------------------------------------
 34464                                          
 34465                                  Coalesce:
 34466                                  	;cmp	byte [di],5Ah ; 'Z'
 34467 00006271 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34468                                                                          ; IF current signature = END THEN
 34469                                          ;retz				;   GOTO ok
 34470 00006274 74FA                            jz	short COALESCE_RETN
 34471 00006276 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34472                                          ;retc				; IF no error THEN GOTO check
 34473 00006279 72F5                    	jc	short COALESCE_RETN
 34474                                  
 34475                                  coalesce_check:
 34476                                  	;cmp	[es:1],di
 34477 0000627B 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34478                                          ;retnz				; IF next block isnt free THEN return
 34479 00006280 75EE                            JNZ	SHORT COALESCE_RETN
 34480                                  	;mov	cx,[ES:3]
 34481 00006282 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34482 00006287 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34483                                          ;ADD	[3],CX
 34484 00006288 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34485 0000628C 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34486 0000628F 880D                            MOV     [DI],CL
 34487 00006291 EBDE                            JMP     SHORT Coalesce		; try again
 34488                                  
 34489                                  ; 04/08/2018 - Retro DOS v3.0
 34490                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34491                                  
 34492                                  ;	BREAK  <$Alloc - allocate space in memory>
 34493                                  
 34494                                  ; MSDOS 6.0
 34495                                  ;----------------------------------------------------------------------------
 34496                                  ;**	$Alloc - Allocate Memory Space
 34497                                  ;
 34498                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34499                                  ;	Alloc returns a pointer to a free block of memory that
 34500                                  ;	has the requested size in paragraphs.
 34501                                  ;
 34502                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34503                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34504                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34505                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34506                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34507                                  ;
 34508                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34509                                  ;	starts from arena_head.
 34510                                  ;
 34511                                  ;	Assembler usage:
 34512                                  ;           MOV     BX,size
 34513                                  ;           MOV     AH,Alloc
 34514                                  ;           INT     21h
 34515                                  ;
 34516                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34517                                  ;	so that we start searching the arena at it's first non-trivial free
 34518                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34519                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34520                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34521                                  ;	verify that this is true; if so, this can stay as is
 34522                                  ;
 34523                                  ;	ENTRY	(bx) = requested size, in bytes
 34524                                  ;		(DS) = (ES) = DOSGROUP
 34525                                  ;	EXIT	'C' clear if memory allocated
 34526                                  ;		  (ax:0) = address of requested memory
 34527                                  ;		'C' set if request failed
 34528                                  ;		  (AX) = error_not_enough_memory
 34529                                  ;		    (bx) = max size we could have allocated
 34530                                  ;		  (ax) = error_arena_trashed
 34531                                  ;	USES	All
 34532                                  ;----------------------------------------------------------------------------
 34533                                  
 34534                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34535                                  ;----------------------------------------------------------------------------
 34536                                  ;SUBTTL $Alloc - allocate space in memory
 34537                                  ;
 34538                                  ;   Assembler usage:
 34539                                  ;           MOV     BX,size
 34540                                  ;           MOV     AH,Alloc
 34541                                  ;           INT     21h
 34542                                  ;         AX:0 is pointer to allocated memory
 34543                                  ;         BX is max size if not enough memory
 34544                                  ;
 34545                                  ;   Description:
 34546                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34547                                  ;       memory that has the requested  size  in  paragraphs.
 34548                                  ;
 34549                                  ;   Error return:
 34550                                  ;           AX = error_not_enough_memory
 34551                                  ;              = error_arena_trashed
 34552                                  ;----------------------------------------------------------------------------
 34553                                  
 34554                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34555                                  
 34556                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34557                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34558                                  
 34559                                  _$ALLOC:
 34560                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34561                                  	; 14/05/2019 - Retro DOS v4.0
 34562                                  	; 04/08/2018 - Retro DOS v3.0
 34563                                  	;EnterCrit critMem
 34564 00006293 E87CB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34565                                  
 34566                                  ; 17/12/2022
 34567                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34568                                  ;%if 0
 34569                                  	; 14/05/2019
 34570 00006296 16                      	push	ss
 34571 00006297 1F                      	pop	ds
 34572                                  
 34573                                  	; MSDOS 6.0
 34574                                  	;mov	ax,[ss:arena_head]
 34575                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34576                                  
 34577 00006298 A1[2400]                	mov	ax,[arena_head]
 34578 0000629B A3[8E00]                	mov	[START_ARENA],ax			
 34579                                  	
 34580                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34581 0000629E F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34582                                  					; Q: should we start scanning from 
 34583                                  					;    UMB's
 34584 000062A3 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34585                                  		
 34586                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34587                                  	;cmp	word [UMB_HEAD],-1
 34588                                  	;je	short norm_alloc	; N: scan from arena_head
 34589                                  
 34590                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34591 000062A5 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34592 000062AA 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34593                                  	
 34594                                  	;mov	ax,[ss:UMB_HEAD]
 34595                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34596 000062AC A1[8C00]                	mov	ax,[UMB_HEAD]
 34597 000062AF A3[8E00]                	mov	[START_ARENA],ax
 34598                                  					; M000 - end
 34599                                  norm_alloc:
 34600 000062B2 31C0                            XOR     AX,AX
 34601 000062B4 89C7                            MOV     DI,AX
 34602                                  	; 15/03/2018
 34603                                          ;MOV	[SS:FirstArena],AX	; init the options
 34604                                          ;MOV	[SS:BestArena],AX
 34605                                          ;MOV	[SS:LastArena],AX
 34606                                  	; 14/05/2019
 34607 000062B6 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34608 000062B9 A3[4203]                        MOV	[BestArena],AX
 34609 000062BC A3[4403]                        MOV	[LastArena],AX
 34610 000062BF 50                              PUSH    AX                      ; alloc_max <- 0
 34611                                  	; 04/08/2018
 34612                                  start_scan:
 34613                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34614                                  	;MOV	AX,[arena_head]
 34615                                  
 34616                                  	; 14/05/2019	
 34617                                  	; MSDOS 6.0
 34618                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34619 000062C0 A1[8E00]                	mov	ax,[START_ARENA]
 34620                                  
 34621                                  	; 27/09/2023 (BugFix) (*) 
 34622                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34623                                  start_scan_x:
 34624                                  
 34625 000062C3 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34626 000062C6 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34627                                  
 34628                                  ;%endif
 34629                                  
 34630                                  ; 17/12/2022
 34631                                  %if 0
 34632                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34633                                  
 34634                                  	; MSDOS 6.0
 34635                                  	mov	ax,[ss:arena_head]
 34636                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34637                                  
 34638                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34639                                  					; Q: should we start scanning from 
 34640                                  					;    UMB's
 34641                                  	jz	short norm_alloc	; N: scan from arena_head
 34642                                  		
 34643                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34644                                  	;je	short norm_alloc	; N: scan from arena_head
 34645                                  
 34646                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34647                                  	jz	short norm_alloc	; N: scan from arena_head
 34648                                  	
 34649                                  	mov	ax,[ss:UMB_HEAD]
 34650                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34651                                  					; M000 - end
 34652                                  norm_alloc:
 34653                                          XOR     AX,AX
 34654                                          MOV     DI,AX
 34655                                  	; 15/03/2018
 34656                                  	MOV	[SS:FirstArena],AX	; init the options
 34657                                  	MOV	[SS:BestArena],AX
 34658                                  	MOV	[SS:LastArena],AX
 34659                                          PUSH    AX                      ; alloc_max <- 0
 34660                                  	; 04/08/2018
 34661                                  start_scan:
 34662                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34663                                  	; 14/05/2019	
 34664                                  	; MSDOS 6.0
 34665                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34666                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34667                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34668                                  %endif
 34669                                  
 34670                                  alloc_scan:
 34671 000062C8 06                              PUSH    ES
 34672 000062C9 1F                              POP     DS                      ; DS <- ES
 34673 000062CA 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34674 000062CE 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34675                                  
 34676                                  alloc_next:
 34677                                  	; MSDOS 6.0			; M000 - start 
 34678 000062D0 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34679 000062D6 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34680                                  	
 34681 000062D8 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34682                                  					; Q: is alloc strategy high_first
 34683 000062DE 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34684 000062E0 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34685 000062E4 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34686                                  					;    arena_head
 34687 000062E9 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34688 000062EB 8CD8                    	mov	ax,ds			; ax = current block
 34689 000062ED 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34690 000062F2 EB03                    	jmp	short alloc_chk_end
 34691                                  
 34692                                  norm_strat:
 34693                                  	;cmp	byte [di],5Ah ; 'Z'
 34694 000062F4 803D5A                          CMP     BYTE [DI],arena_signature_end
 34695                                                                          ; IF current block is last THEN
 34696                                  alloc_chk_end:
 34697 000062F7 740E                            JZ      SHORT alloc_end		;   GOTO end
 34698 000062F9 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34699 000062FC 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34700                                  
 34701                                  alloc_err:
 34702 000062FE 58                              POP     AX
 34703                                  
 34704                                  alloc_trashed:
 34705                                  	;LeaveCrit critMem
 34706 000062FF E82BB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34707                                          ;error	error_arena_trashed
 34708                                  	;mov	al,7
 34709 00006302 B007                    	MOV	AL,error_arena_trashed
 34710                                  alloc_errj:
 34711 00006304 E93DA3                  	JMP	SYS_RET_ERR
 34712                                  
 34713                                  alloc_end:
 34714                                  	; 18/05/2019
 34715 00006307 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34716 0000630D 7403                    	jz	short alloc_chk 
 34717 0000630F E98400                  	jmp	alloc_do_split
 34718                                  
 34719                                  alloc_chk:
 34720                                  	; MSDOS 6.0
 34721 00006312 36A1[2400]              	mov	ax,[ss:arena_head]
 34722 00006316 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34723 0000631B 740E                    	je	short alloc_fail	; Y: not enough memory
 34724                                  					; N:
 34725                                  					; Q: is the alloc strat HIGH_ONLY
 34726 0000631D 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34727 00006323 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34728                                  	
 34729 00006325 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34730                                  	; 27/09/2023 (*)
 34731 00006329 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34732                                  	;jmp	short start_scan
 34733                                  					; M000 - end
 34734                                  
 34735                                  alloc_fail:
 34736                                          ;invoke Get_User_Stack
 34737 0000632B E857A1                          CALL	Get_User_Stack
 34738 0000632E 5B                      	POP     BX
 34739                                          ;MOV	[SI].user_BX,BX
 34740                                  	;MOV	[SI+2],BX
 34741 0000632F 895C02                  	mov	[SI+user_env.user_BX],bx
 34742                                  	;LeaveCrit critMem
 34743 00006332 E8F8AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34744                                  	;error	error_not_enough_memory
 34745                                  	;mov	al,8
 34746 00006335 B008                    	MOV	AL,error_not_enough_memory
 34747                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34748 00006337 EBCB                    	jmp	short alloc_errj
 34749                                  	;JMP	SYS_RET_ERR
 34750                                  
 34751                                  alloc_free:
 34752 00006339 E835FF                          CALL    Coalesce		; add following free block to current
 34753 0000633C 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34754 0000633E 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34755 00006342 5A                              POP     DX                      ; check for max found size
 34756 00006343 39D1                            CMP     CX,DX
 34757 00006345 7602                            JNA     SHORT alloc_test
 34758 00006347 89CA                            MOV     DX,CX
 34759                                  
 34760                                  alloc_test:
 34761 00006349 52                              PUSH    DX
 34762 0000634A 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34763 0000634C 7782                    	JA      SHORT alloc_next	;   GOTO next
 34764                                  
 34765                                  	; 15/03/2018
 34766 0000634E 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34767 00006354 7505                    	JNZ	SHORT alloc_best
 34768 00006356 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34769                                  alloc_best:
 34770 0000635B 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34771 00006361 740E                            JZ      SHORT alloc_make_best	; initial best
 34772 00006363 06                              PUSH	ES
 34773 00006364 368E06[4203]                    MOV     ES,[SS:BestArena]
 34774 00006369 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34775 0000636E 07                              POP	ES
 34776 0000636F 7605                            JBE     SHORT alloc_last
 34777                                  alloc_make_best:
 34778 00006371 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34779                                  alloc_last:
 34780 00006376 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34781 0000637B E952FF                          JMP     alloc_next
 34782                                  ;
 34783                                  ; split the block high
 34784                                  ;
 34785                                  alloc_do_split_high:
 34786 0000637E 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34787 00006383 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34788 00006387 29D9                            SUB     CX,BX
 34789 00006389 8CDA                            MOV     DX,DS
 34790 0000638B 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34791 0000638D 01CA                            ADD     DX,CX                   ; point to next block
 34792 0000638F 8EC2                            MOV     ES,DX                   ; no decrement!
 34793 00006391 49                              DEC     CX
 34794 00006392 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34795 00006394 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34796                                  ;
 34797                                  ; we have scanned memory and have found all appropriate blocks
 34798                                  ; check for the type of allocation desired; first and best are identical
 34799                                  ; last must be split high
 34800                                  ;
 34801                                  alloc_do_split:
 34802                                  
 34803                                  ; 17/12/2022
 34804                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34805                                  ;%if 0
 34806                                  	; 14/05/2019
 34807                                  	; MSDOS 6.0			; M000 - start
 34808                                  	;xor	cx,cx
 34809 00006396 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34810                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34811 0000639B 80E13F                  	and	cl,3Fh
 34812                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34813 0000639E 80F901                  	cmp	cl,BEST_FIT
 34814 000063A1 77DB                    	ja	short alloc_do_split_high
 34815                                  ;%endif
 34816                                  
 34817                                  	; 17/12/2022
 34818                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34819                                  	; MSDOS 6.0 & MSDOS 5.0
 34820                                  	;xor	cx,cx
 34821                                  	;mov	cl,[ss:AllocMethod]
 34822                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34823                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34824                                  	;ja	short alloc_do_split_high
 34825                                  
 34826                                  	; 15/03/2018
 34827                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34828                                  	; 04/08/2018
 34829                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34830                                          ;JA	SHORT alloc_do_split_high
 34831                                          
 34832 000063A3 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34833 000063A8 7205                    	JB      SHORT alloc_get_size
 34834 000063AA 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34835                                  
 34836                                  alloc_get_size:
 34837 000063AF 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34838 000063B3 29D9                            SUB     CX,BX                   ; get room left over
 34839 000063B5 8CD8                            MOV     AX,DS
 34840 000063B7 89C2                            MOV     DX,AX                   ; save for owner setting
 34841 000063B9 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34842 000063BB 01D8                            ADD     AX,BX
 34843 000063BD 40                              INC     AX                      ; remember the header
 34844 000063BE 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34845 000063C0 49                              DEC     CX                      ; CX <- size of split block
 34846                                  alloc_set_sizes:
 34847 000063C1 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34848 000063C5 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34849                                  	;mov	bl,4Dh ; 'M'
 34850 000063CA B34D                            MOV     BL,arena_signature_normal
 34851 000063CC 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34852 000063CE 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34853 000063D1 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34854                                  
 34855                                  alloc_set_owner:
 34856 000063D6 8EDA                            MOV     DS,DX
 34857 000063D8 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34858 000063DC A30100                          MOV     [ARENA.OWNER],AX
 34859 000063DF 8CD8                            MOV     AX,DS
 34860 000063E1 40                              INC     AX
 34861 000063E2 5B                              POP     BX
 34862                                  	;LeaveCrit critMem
 34863 000063E3 E847AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34864                                  	
 34865                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34866                                  alloc_ok:
 34867                                          ;transfer SYS_RET_OK
 34868 000063E6 E952A2                  	JMP	SYS_RET_OK
 34869                                  
 34870                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34871                                  
 34872                                  ; MSDOS 6.0
 34873                                  ;----------------------------------------------------------------------------
 34874                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34875                                  ;
 34876                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34877                                  ;	any following free space onto this block; then we try to trim the
 34878                                  ;	block down to the size requested.
 34879                                  ;
 34880                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34881                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34882                                  ;	Thus the maximum-size-possible value that we return has already
 34883                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34884                                  ;
 34885                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34886                                  ;		finish it's work. For this reason we build the allocsf
 34887                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34888                                  ;		code.
 34889                                  ;
 34890                                  ;	ENTRY	(es) = segment of old block
 34891                                  ;		(bx) = newsize
 34892                                  ;		(ah) = SETBLOCK
 34893                                  ;
 34894                                  ;	EXIT	'C' clear if OK
 34895                                  ;		'C' set if error
 34896                                  ;		  (ax) = error_invalid_block
 34897                                  ;		       = error_arena_trashed
 34898                                  ;		       = error_not_enough_memory
 34899                                  ;		       = error_invalid_function
 34900                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34901                                  ;	USES	???? BUGBUG
 34902                                  ;----------------------------------------------------------------------------
 34903                                  
 34904                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34905                                  ;----------------------------------------------------------------------------
 34906                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34907                                  ;
 34908                                  ;   Assembler usage:
 34909                                  ;           MOV     ES,block
 34910                                  ;           MOV     BX,newsize
 34911                                  ;           MOV     AH,setblock
 34912                                  ;           INT     21h
 34913                                  ;         if setblock fails for growing, BX will have the maximum
 34914                                  ;         size possible
 34915                                  ;   Error return:
 34916                                  ;           AX = error_invalid_block
 34917                                  ;              = error_arena_trashed
 34918                                  ;              = error_not_enough_memory
 34919                                  ;              = error_invalid_function
 34920                                  ;----------------------------------------------------------------------------
 34921                                  
 34922                                  _$SETBLOCK:        
 34923                                  	; 04/08/2018 - Retro DOS v3.0
 34924                                  	;EnterCrit   critMem
 34925 000063E9 E826AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34926                                  
 34927 000063EC BF0000                  	MOV     DI,ARENA.SIGNATURE
 34928 000063EF 8CC0                            MOV     AX,ES
 34929 000063F1 48                              DEC     AX
 34930 000063F2 E86CFE                          CALL    check_signature
 34931 000063F5 7303                            JNC     SHORT setblock_grab
 34932                                  
 34933                                  setblock_bad:
 34934 000063F7 E905FF                          JMP     alloc_trashed
 34935                                  
 34936                                  setblock_grab:
 34937 000063FA 8ED8                            MOV     DS,AX
 34938 000063FC E872FE                          CALL    Coalesce
 34939 000063FF 72F6                            JC      SHORT setblock_bad
 34940 00006401 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34941 00006405 51                              PUSH    CX
 34942 00006406 39CB                            CMP     BX,CX
 34943 00006408 76A5                            JBE     SHORT alloc_get_size
 34944 0000640A E91EFF                          JMP     alloc_fail
 34945                                  
 34946                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34947                                  
 34948                                  ; MSDOS 6.0
 34949                                  ;----------------------------------------------------------------------------
 34950                                  ;**	$DEALLOC - Free Heap Memory
 34951                                  ;
 34952                                  ;	ENTRY	(es) = address of item
 34953                                  ;
 34954                                  ;	EXIT	'C' clear of OK
 34955                                  ;		'C' set if error
 34956                                  ;		  (AX) = error_invalid_block
 34957                                  ;	USES	???? BUGBUG
 34958                                  
 34959                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34960                                  ;----------------------------------------------------------------------------
 34961                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34962                                  ;
 34963                                  ;   Assembler usage:
 34964                                  ;           MOV     ES,block
 34965                                  ;           MOV     AH,dealloc
 34966                                  ;           INT     21h
 34967                                  ;
 34968                                  ;   Error return:
 34969                                  ;           AX = error_invalid_block
 34970                                  ;              = error_arena_trashed
 34971                                  ;---------------------------------------------------------------------------- 
 34972                                  
 34973                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34974                                  _$DEALLOC:
 34975                                  	; 14/05/2019 - Retro DOS v4.0    
 34976                                  	; 04/08/2018 - Retro DOS v3.0
 34977                                  	;EnterCrit   critMem
 34978 0000640D E802AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34979                                  
 34980                                  	; MSDOS 6.0			; M016, M068 - Start
 34981 00006410 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34982                                  					; Q: was the previous call an int 21
 34983                                  					;    exec call
 34984 00006416 740D                    	jz	short deallocate	; N: continue
 34985 00006418 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34986 0000641E 7505                    	jne	short deallocate	; N: continue
 34987                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34988                                  	; 25/09/2023
 34989 00006420 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 34990                                  deallocate:				; M016, M068 - End
 34991 00006425 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34992 00006428 8CC0                            MOV     AX,ES
 34993 0000642A 48                              DEC     AX
 34994 0000642B E833FE                          CALL    check_signature
 34995 0000642E 720A                            JC      SHORT dealloc_err
 34996 00006430 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34997                                  	;LeaveCrit critMem
 34998 00006435 E8F5AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34999                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35000                                          ;transfer SYS_RET_OK
 35001                                  dealloc_ok:
 35002 00006438 EBAC                    	jmp	short alloc_ok
 35003                                  	;JMP	SYS_RET_OK
 35004                                  
 35005                                  dealloc_err:
 35006                                  	;LeaveCrit critMem
 35007 0000643A E8F0AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35008                                          ;error	error_invalid_block
 35009                                  	;mov	al,9
 35010 0000643D B009                    	MOV	AL,error_invalid_block
 35011                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35012                                  dealloc_errj:
 35013                                  AllocOperErrj:	; 17/12/2022
 35014 0000643F E902A2                  	JMP	SYS_RET_ERR
 35015                                  
 35016                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35017                                  
 35018                                  ; MSDOS 6.0
 35019                                  ;----------------------------------------------------------------------------
 35020                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35021                                  ;
 35022                                  ;	Assembler usage:
 35023                                  ;           MOV     AH,AllocOper
 35024                                  ;           MOV     BX,method
 35025                                  ;           MOV     AL,func
 35026                                  ;           INT     21h
 35027                                  ;
 35028                                  ;	ENTRY	
 35029                                  ;		(al) = 0
 35030                                  ;		  Get allocation Strategy in (ax)
 35031                                  ;
 35032                                  ;		(al) = 1, (bx) = method = zw0000xy
 35033                                  ;		  Set allocation strategy.
 35034                                  ;		   w  = 1  => HIGH_ONLY
 35035                                  ;		   z  = 1  => HIGH_FIRST
 35036                                  ;		   xy = 00 => FIRST_FIT
 35037                                  ;		      = 01 => BEST_FIT
 35038                                  ;		      = 10 => LAST_FIT
 35039                                  ;
 35040                                  ;		(al) = 2
 35041                                  ;		  Get UMB link state in (al)
 35042                                  ;
 35043                                  ;		(al) = 3
 35044                                  ;		  Set UMB link state
 35045                                  ;		   (bx) = 0 => Unlink UMBs
 35046                                  ;		   (bx) = 1 => Link UMBs
 35047                                  ;
 35048                                  ;
 35049                                  ;	EXIT	'C' clear if OK
 35050                                  ;
 35051                                  ;		 if (al) = 0
 35052                                  ;		  (ax) = existing method
 35053                                  ;		 if (al) = 1
 35054                                  ;		  Sets allocation strategy
 35055                                  ;		 if (al) = 2
 35056                                  ;		  (al) = 0 => UMBs not linked
 35057                                  ;		  (al) = 1 => UMBs linked in
 35058                                  ;		 if (al) = 3
 35059                                  ;		  Links/Unlinks the UMBs into DOS chain
 35060                                  ;
 35061                                  ;		'C' set if error
 35062                                  ;		  AX = error_invalid_function
 35063                                  ;
 35064                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35065                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35066                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35067                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35068                                  ;		    arena' if an arena sig is damaged.
 35069                                  ;----------------------------------------------------------------------------
 35070                                  
 35071                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35072                                  ;----------------------------------------------------------------------------
 35073                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35074                                  ;
 35075                                  ;   Assembler usage:
 35076                                  ;           MOV     AH,AllocOper
 35077                                  ;           MOV     BX,method
 35078                                  ;           MOV     AL,func
 35079                                  ;           INT     21h
 35080                                  ;
 35081                                  ;   Error return:
 35082                                  ;           AX = error_invalid_function
 35083                                  ;----------------------------------------------------------------------------
 35084                                  
 35085                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35086                                  _$ALLOCOPER:
 35087                                  	; 14/05/2019 - Retro DOS v4.0
 35088                                  	; MSDOS 6.0
 35089 00006442 08C0                    	or	al,al ; 0
 35090 00006444 741E                    	jz	short AllocGetStrat
 35091                                  	; 17/12/2022
 35092                                  	;cmp	al,1
 35093                                  	;jz	short AllocSetStrat
 35094                                  
 35095                                  	; 01/12/2022
 35096                                  	;cmp	al, 2
 35097                                  	;jb	short AllocSetStrat
 35098                                  	;ja	short AllocSetLink
 35099                                  	;;jmp	short AllocGetLink
 35100                                  ;AllocGetLink:
 35101                                  	; MSDOS 6.0
 35102                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35103                                  	;and 	al,LINKSTATE		
 35104                                  	;;transfer SYS_RET_OK
 35105                                  	;jmp	SYS_RET_OK
 35106                                  
 35107 00006446 3C02                    	cmp	al,2
 35108                                  	; 17/12/2022
 35109 00006448 7223                    	jb	short AllocSetStrat ; al = 1
 35110 0000644A 7432                    	je	short AllocGetLink
 35111                                  
 35112                                  	;cmp	al,2
 35113                                  	;jz	short AllocGetLink
 35114 0000644C 3C03                    	cmp	al,3
 35115 0000644E 7436                    	jz	short AllocSetLink
 35116                                  
 35117                                  	; 15/04/2018
 35118                                  	;CMP	AL,1
 35119                                          ;JB	SHORT AllocOperGet
 35120                                          ;JZ	SHORT AllocOperSet
 35121                                  
 35122                                  AllocOperError:
 35123                                  	; 04/08/2018 - Retro DOS v3.0
 35124                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35125                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35126 00006450 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35127                                  	;error	error_invalid_function
 35128                                  	;mov	al,1
 35129 00006456 B001                    	MOV	AL,error_invalid_function
 35130                                  	; 17/12/2022
 35131                                  ;AllocOperErrj:
 35132                                  	;JMP	SYS_RET_ERR
 35133                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35134                                  	;jmp	short dealloc_errj
 35135                                  	; 17/12/2022
 35136 00006458 EBE5                    	jmp	short AllocOperErrj
 35137                                  
 35138                                  AllocArenaError:
 35139                                  	; MSDOS 6.0
 35140 0000645A 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35141                                  					; M009: Extended Error Locus
 35142                                  	;error	error_arena_trashed	; M009:
 35143                                  	;mov	al,7
 35144 00006460 B007                    	MOV	AL,error_arena_trashed
 35145                                  	;JMP	SYS_RET_ERR
 35146 00006462 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35147                                  
 35148                                  AllocGetStrat: 
 35149                                  	; MSDOS 6.0
 35150                                  AllocOperGet:
 35151 00006464 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35152 00006468 30E4                            XOR     AH,AH
 35153                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35154                                  	;transfer SYS_RET_OK
 35155                                  AllocOperOk:
 35156                                  	; 17/12/2022
 35157                                  	;jmp	short dealloc_ok
 35158 0000646A E9CEA1                  	JMP	SYS_RET_OK
 35159                                  
 35160                                  AllocSetStrat: 
 35161                                  	; 14/05/2019
 35162                                  	; MSDOS 6.0
 35163 0000646D 53                      	push	bx			; M000 - start
 35164                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35165                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35166                                  	; 17/12/2022
 35167 0000646E 80E33F                  	and	bl,3Fh
 35168 00006471 83FB02                  	cmp	bx,2			; BX must be 0-2
 35169                                  	;cmp	bl,2
 35170 00006474 5B                      	pop	bx			; M000 - end
 35171 00006475 77D9                    	ja	short AllocOperError
 35172                                  
 35173                                  AllocOperSet:
 35174 00006477 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35175                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35176                                  	;transfer SYS_RET_OK
 35177                                  AllocOperOkj:
 35178 0000647C EBEC                    	jmp	short AllocOperOk
 35179                                  	;JMP	SYS_RET_OK
 35180                                  
 35181                                  AllocGetLink:
 35182                                  	; MSDOS 6.0
 35183 0000647E 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35184                                  	;and	al,1
 35185 00006482 2401                    	and 	al,LINKSTATE		
 35186                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35187                                  	;transfer SYS_RET_OK
 35188                                  AllocOperOkj2:
 35189                                  	; 17/12/2022
 35190 00006484 EBE4                    	jmp	short AllocOperOk
 35191                                  	;jmp	short AllocOperOkj
 35192                                  	;;JMP	SYS_RET_OK
 35193                                  
 35194                                  AllocSetLink:
 35195                                  	; MSDOS 6.0			; M009 - start
 35196 00006486 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35197 0000648B 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35198 0000648E 74C0                    	je	short AllocOperError	; N: error
 35199                                  					; Y: continue
 35200                                  					; M009 - end
 35201 00006490 83FB01                  	cmp	bx,1			
 35202 00006493 7204                    	jb	short UnlinkUmbs
 35203 00006495 741C                    	jz	short LinkUmbs
 35204                                  	
 35205 00006497 EBB7                    	jmp	short AllocOperError
 35206                                  	
 35207                                  UnlinkUmbs:
 35208                                  	;test	byte [ss:UMBFLAG],1
 35209 00006499 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35210 0000649F 7410                    	jz	short unlinked		; Y: return 
 35211                                  	
 35212 000064A1 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35213 000064A4 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35214                                  	
 35215                                  					; make it last
 35216 000064A6 C60600005A              	mov	byte [0],arena_signature_end
 35217                                  	
 35218                                  	;and	byte [ss:UMBFLAG],0FEh
 35219 000064AB 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35220                                  	
 35221                                  unlinked:
 35222                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35223                                  	;transfer SYS_RET_OK
 35224                                  	; 17/12/2022
 35225 000064B1 EBB7                    	jmp	short AllocOperOk
 35226                                  	;jmp	short AllocOperOkj2
 35227                                  	;;JMP	SYS_RET_OK
 35228                                  
 35229                                  LinkUmbs:
 35230 000064B3 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35231 000064B9 7510                    	jnz	short linked		; Y: return
 35232                                  	
 35233 000064BB E80F00                  	call	GetLastArena		; get arena before umb_head
 35234 000064BE 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35235                                  	
 35236                                  					; make it normal. M061: ds points to
 35237                                  					; arena before umb_head
 35238 000064C0 C60600004D              	mov	byte [0],arena_signature_normal
 35239                                  	
 35240 000064C5 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35241                                  linked:
 35242                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35243                                  	;transfer SYS_RET_OK
 35244                                  	; 17/12/2022
 35245 000064CB EB9D                    	jmp	short AllocOperOk
 35246                                  	;jmp	short unlinked
 35247                                  	;;JMP	SYS_RET_OK
 35248                                  
 35249                                  ; MSDOS 6.0
 35250                                  ;--------------------------------------------------------------------------
 35251                                  ; Procedure Name : GetLastArena		-  M003
 35252                                  ;
 35253                                  ; Inputs	 : cx = umb_head
 35254                                  ;
 35255                                  ;
 35256                                  ; Outputs	 : If UMBs are linked
 35257                                  ;			ES = umb_head
 35258                                  ;			DS = arena before umb_head
 35259                                  ;		   else
 35260                                  ;			DS = last arena
 35261                                  ;			ES = next arena. will be umb_head if NC.
 35262                                  ;
 35263                                  ;		   CY if error
 35264                                  ;
 35265                                  ; Uses		 : DS, ES, DI, BX
 35266                                  ;--------------------------------------------------------------------------
 35267                                  
 35268                                  ; 14/05/2019 - Retro DOS v4.0
 35269                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35270                                  
 35271                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35272                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35273                                  	
 35274                                  GetLastArena:
 35275 000064CD 50                      	push	ax			; save ax
 35276                                  
 35277 000064CE 36A1[2400]              	mov	ax,[ss:arena_head]
 35278 000064D2 8EC0                    	mov	es,ax			; es = arena_head
 35279 000064D4 31FF                    	xor	di,di
 35280                                  
 35281 000064D6 26803D5A                	cmp     byte [es:di],arena_signature_end
 35282                                  					; Q: is this the last arena
 35283 000064DA 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35284                                  					
 35285                                  GLA_next:
 35286 000064DC 8ED8                    	mov	ds,ax
 35287 000064DE E879FD                  	call	arena_next		; ax, es -> next arena
 35288                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35289                                  	;jc	short GLA_err
 35290                                  	; 17/12/2022
 35291 000064E1 7228                    	jc	short GLA_err2
 35292                                  
 35293 000064E3 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35294 000064E9 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35295                                  					;    umb_head
 35296                                  					; N: terminating condition is 05Ah
 35297                                  
 35298 000064EB 26803D5A                	cmp     byte [es:di],arena_signature_end
 35299                                  					; Q: is this the last arena
 35300 000064EF EB02                    	jmp	short GLA_@f
 35301                                  GLA_chkumb:
 35302 000064F1 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35303                                  GLA_@f:
 35304 000064F3 75E7                    	jne	short GLA_next		; N: get next arena
 35305                                  
 35306                                  GLA_done:
 35307                                  					; M061 - Start
 35308 000064F5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35309 000064FB 750B                    	jnz	short GLA_ret		; Y: we're done
 35310                                  					; N: let us confirm that the next 
 35311                                  					;    arena is umb_head
 35312 000064FD 8ED8                    	mov	ds,ax
 35313 000064FF E858FD                  	call	arena_next		; ax, es -> next arena
 35314                                  	;jc	short GLA_err
 35315 00006502 7207                    	jc	short GLA_err2
 35316 00006504 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35317 00006506 7502                    	jne	short GLA_err		; N: error
 35318                                  					; M061 - End
 35319                                  GLA_ret:
 35320                                  	; 17/12/2022				
 35321                                  	;clc
 35322                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35323                                  	;clc
 35324 00006508 58                      	pop	ax			; M061
 35325 00006509 C3                      	retn				; M061
 35326                                  
 35327                                  GLA_err:
 35328 0000650A F9                      	stc				; M061
 35329                                  GLA_err2:
 35330 0000650B 58                      	pop	ax
 35331 0000650C C3                      	retn
 35332                                  
 35333                                  ;============================================================================
 35334                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35335                                  ;============================================================================
 35336                                  ; 04/08/2018 - Retro DOS v3.0
 35337                                  
 35338                                  ;	TITLE SRVCALL - Server DOS call
 35339                                  ;	NAME  SRVCALL
 35340                                  
 35341                                  ;**	SRVCALL.ASM - Server DOS call functions
 35342                                  ;
 35343                                  ;
 35344                                  ;	$ServerCall
 35345                                  ;
 35346                                  ;	Modification history:
 35347                                  ;
 35348                                  ;	    Created: ARR 08 August 1983
 35349                                  
 35350                                  ;AsmVars <Installed>
 35351                                  
 35352                                  ;include dpl.asm
 35353                                  
 35354                                  ;Installed = TRUE
 35355                                  
 35356                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35357                                  ; ---------------------------------------------------------------------------
 35358                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35359                                  
 35360                                  ;BREAK <ServerCall -- Server DOS call>
 35361                                  
 35362                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35363                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35364                                  
 35365                                  ;hkn; TABLE	SEGMENT
 35366                                  ;Public SRVC001S,SRVC001E
 35367                                  ;SRVC001S label byte
 35368                                  
 35369                                  SRVC001S:
 35370                                  
 35371 0000650D [1165]                  SERVERTAB:	dw	SERVER_DISP
 35372 0000650F [6365]                  SERVERLEAVE:	dw	SERVERRETURN
 35373 00006511 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35374 00006512 [CB65]                  		dw	SRV_CALL	; 0
 35375 00006514 [6465]                  		dw	COMMIT_ALL	; 1
 35376 00006516 [9A65]                  		dw	CLOSE_NAME	; 2
 35377 00006518 [A565]                  		dw	CLOSE_UID	; 3
 35378 0000651A [AC65]                  		dw	CLOSE_UID_PID	; 4
 35379 0000651C [B365]                  		dw	GET_LIST	; 5
 35380 0000651E [0C66]                  		dw	GET_DOS_DATA	; 6
 35381 00006520 [3066]                  		dw	SPOOL_OPER	; 7
 35382 00006522 [3066]                  		dw	SPOOL_OPER	; 8
 35383 00006524 [3066]                  		dw	SPOOL_OPER	; 9
 35384 00006526 [3C66]                  		dw	_$SetExtendedError  ; 10
 35385                                  
 35386                                  SERVER_DISP_END:  ;  LABEL BYTE
 35387                                  
 35388                                  ;SRVC001E label byte
 35389                                  
 35390                                  SRVC001E:
 35391                                  
 35392                                  ;hkn; TABLE	ENDS
 35393                                  
 35394                                  ;----------------------------------------------------------------------------
 35395                                  ;
 35396                                  ; Procedure Name : $ServerCall
 35397                                  ;
 35398                                  ; Inputs:
 35399                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35400                                  ; Function:
 35401                                  ;	AL=0	Server DOS call
 35402                                  ;	AL=1	Commit All files
 35403                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35404                                  ;	AL=3	Close all files for DPL_UID
 35405                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35406                                  ;	AL=5	Get open file list entry
 35407                                  ;		    IN: BX File Index
 35408                                  ;			CX User Index
 35409                                  ;		    OUT:ES:DI -> Name
 35410                                  ;			BX = UID
 35411                                  ;		    CX = # locked blocks held by this UID
 35412                                  ;	AL=6	Get DOS data area
 35413                                  ;		    OUT: DS:SI -> Start
 35414                                  ;			CX size in bytes of swap if indos
 35415                                  ;			DX size in bytes of swap always
 35416                                  ;	AL=7	Get truncate flag
 35417                                  ;	AL=8	Set truncate flag
 35418                                  ;	AL=9	Close all spool files
 35419                                  ;	AL=10	SetExtendedError
 35420                                  ;
 35421                                  ;----------------------------------------------------------------------------
 35422                                  
 35423                                  _$ServerCall:
 35424                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35425                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35426                                  	; 10/06/2019
 35427                                  	; 29/04/2019 - Retro DOS v4.0
 35428                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35429                                  
 35430                                  	; 05/08/2018 - Retro DOS v3.0
 35431                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35432 00006528 3C07                    	CMP	AL,7
 35433 0000652A 7204                    	JB	short SET_STUFF
 35434 0000652C 3C09                    	CMP	AL,9
 35435 0000652E 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35436                                  SET_STUFF:
 35437 00006530 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35438                                  	;mov	bx,[si+12h]
 35439 00006532 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35440                                  
 35441                                  	; MSDOS 6.0
 35442                                  ;SR;
 35443                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35444                                  ; of USER_ID
 35445                                  
 35446 00006535 36F606[3010]01          	test	byte [SS:IsWin386],1
 35447 0000653B 7505                    	jnz	short skip_win386
 35448                                  
 35449                                  ;hkn; SS override for user_id and proc_id
 35450                                  	; 15/08/2018
 35451 0000653D 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35452                                  
 35453                                  skip_win386:
 35454 00006542 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35455 00006545 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35456                                  NO_SET_ID:
 35457                                  	; 10/06/2019 - Retro DOS v4.0
 35458 0000654A 2EFF36[0F65]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35459 0000654F 2EFF36[0D65]            	PUSH	word [cS:SERVERTAB]	; push table address
 35460 00006554 50                      	PUSH	AX
 35461 00006555 E8CDAC                  	call	TableDispatch
 35462                                  
 35463                                  ;hkn; SS override
 35464                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35465 00006558 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35466                                  	;error	error_invalid_function
 35467                                  	;mov	al,1
 35468 0000655E B001                    	MOV	AL,error_invalid_function
 35469                                  servercall_error:
 35470 00006560 E9E1A0                  	JMP	SYS_RET_ERR
 35471                                  
 35472                                  SERVERRETURN:
 35473 00006563 C3                      	retn
 35474                                  
 35475                                  ; Commit - iterate through the open file list and make sure that the
 35476                                  ; directory entries are correctly updated.
 35477                                  
 35478                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35479                                  COMMIT_ALL:
 35480 00006564 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35481 00006566 16                      	push	ss
 35482 00006567 1F                      	pop	ds
 35483 00006568 E8A7AD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35484                                  CommitLoop:
 35485 0000656B 53                      	push	bx
 35486 0000656C E82401                  	call	SFFromSFN
 35487 0000656F 7222                    	JC	short CommitDone
 35488 00006571 26833D00                	cmp	word [es:di],0
 35489                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35490                                  					; if (ThisSFT->refcount != 0)
 35491 00006575 7418                    	JZ	short CommitNext
 35492                                  	;cmp	word [es:di],0FFFFh ; -1
 35493 00006577 26833DFF                	cmp	word [ES:DI],sf_busy
 35494                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35495                                  					; BUSY SFTs have god knows what
 35496 0000657B 7412                    	JZ	short CommitNext	;   in them.
 35497                                  	; 17/12/2022
 35498 0000657D 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35499                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35500 00006582 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35501                                  					;	doesn't deadlock
 35502 00006584 893E[9E05]              	MOV	[THISSFT],DI
 35503 00006588 8C06[A005]              	MOV	[THISSFT+2],ES
 35504 0000658C E8FCCA                  	call	DOS_COMMIT		;	DOSCommit ();
 35505                                  CommitNext:
 35506 0000658F 5B                      	pop	bx
 35507 00006590 43                      	INC	BX
 35508 00006591 EBD8                    	JMP	short CommitLoop
 35509                                  CommitDone:
 35510 00006593 E897AD                  	call	LCritSFT
 35511 00006596 5B                      	pop	bx
 35512                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35513                                  Commit_Ok:
 35514 00006597 E9A1A0                  	jmp	SYS_RET_OK
 35515                                  	
 35516                                  
 35517                                  CLOSE_NAME:
 35518                                  
 35519                                  ;if installed
 35520                                  
 35521                                  ;hkn; SS override
 35522                                  	;call	far [ss:MFTcloN]
 35523 0000659A 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35524                                  ;else
 35525                                  ;	Call	MFTcloN
 35526                                  ;endif
 35527                                  
 35528                                  CheckReturns:
 35529 0000659F 7202                    	JC	short func_err
 35530                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35531                                  	;transfer SYS_RET_OK
 35532                                  Commit_Okj:
 35533 000065A1 EBF4                    	jmp	short Commit_Ok
 35534                                  	;jmp	SYS_RET_OK
 35535                                  
 35536                                  func_err:
 35537                                  	;transfer SYS_RET_ERR
 35538                                  	;jmp	SYS_RET_ERR
 35539 000065A3 EBBB                    	jmp	short servercall_error
 35540                                  
 35541                                  CLOSE_UID:
 35542                                  
 35543                                  ;if installed
 35544                                  ;hkn; SS override
 35545                                  	;call	far [ss:MFTclU]
 35546 000065A5 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35547                                  ;else
 35548                                  ;	Call	MFTclU
 35549                                  ;endif
 35550 000065AA EBF3                    	JMP	short CheckReturns
 35551                                  
 35552                                  CLOSE_UID_PID:
 35553                                  
 35554                                  ;if installed
 35555                                  ;hkn; SS override
 35556                                  	;call	far [ss:MFTCloseP]
 35557 000065AC 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35558                                  ;else
 35559                                  ;	Call	MFTCloseP
 35560                                  ;endif
 35561 000065B1 EBEC                    	JMP	short CheckReturns
 35562                                  
 35563                                  GET_LIST:
 35564                                  
 35565                                  ;if installed
 35566                                  ;hkn; SS override
 35567                                  	;call	far [ss:MFT_get]
 35568 000065B3 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35569                                  ;else
 35570                                  ;	Call	MFT_get
 35571                                  ;endif
 35572 000065B8 72E9                    	JC	short func_err
 35573 000065BA E8C89E                  	call	Get_User_Stack
 35574                                  	;mov	[si+2],bx
 35575 000065BD 895C02                  	MOV	[SI+user_env.user_BX],BX
 35576                                  	;mov	[si+10],di
 35577 000065C0 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35578                                  	;mov	[si+16],es
 35579 000065C3 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35580                                  SetCXOK:
 35581                                  	;mov	[si+4],cx
 35582 000065C6 894C04                  	MOV	[SI+user_env.user_CX],CX
 35583                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35584                                  	;transfer SYS_RET_OK
 35585                                  Commit_Okj2:
 35586                                  	; 17/12/2022
 35587 000065C9 EBCC                    	jmp	short Commit_Ok
 35588                                  	;jmp	short Commit_Okj
 35589                                  	;;jmp	SYS_RET_OK
 35590                                  
 35591                                  SRV_CALL:
 35592 000065CB 58                      	POP	AX			; get rid of call to $srvcall
 35593 000065CC 1E                      	push	ds
 35594 000065CD 56                      	push	si
 35595 000065CE E8B49E                  	call	Get_User_Stack
 35596 000065D1 5F                      	pop	di
 35597 000065D2 07                      	pop	es
 35598                                  
 35599                                  ; DS:SI point to stack
 35600                                  ; ES:DI point to DPL
 35601                                  
 35602 000065D3 E82EAC                  	call	XCHGP
 35603                                  
 35604                                  ; DS:SI point to DPL
 35605                                  ; ES:DI point to stack
 35606                                  ;
 35607                                  ; We now copy the registers from DPL to save stack
 35608                                  
 35609 000065D6 56                      	push	si
 35610 000065D7 B90600                  	MOV	CX,6
 35611 000065DA F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35612 000065DC 47                      	INC	DI
 35613 000065DD 47                      	INC	DI			; Skip user_BP
 35614 000065DE A5                      	MOVSW				; DS
 35615 000065DF A5                      	MOVSW				; ES
 35616 000065E0 5E                      	pop	si			; DS:SI -> DPL
 35617 000065E1 8B04                    	mov	ax,[SI]
 35618                                  	;MOV	AX,[SI+DPL.AX]
 35619                                  	;mov	bx,[si+2]
 35620 000065E3 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35621                                  	;mov	cx,[si+4]
 35622 000065E6 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35623                                  	;mov	dx,[si+6]
 35624 000065E9 8B5406                  	MOV	DX,[SI+DPL.DX]
 35625                                  	;mov	di,[si+10]
 35626 000065EC 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35627                                  	;mov	es,[si+14]
 35628 000065EF 8E440E                  	MOV	ES,[SI+DPL.ES]
 35629                                  	;push	word [si+8]
 35630 000065F2 FF7408                  	PUSH	word [SI+DPL.SI]
 35631                                  	;mov	ds,[si+12]
 35632 000065F5 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35633 000065F8 5E                      	POP	SI
 35634                                  
 35635                                  ;hkn; SS override for next 3
 35636 000065F9 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35637 000065FE 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35638 00006603 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35639 00006609 E97B9D                  	jmp	REDISP
 35640                                  
 35641                                  GET_DOS_DATA:
 35642 0000660C 16                      	push	ss
 35643 0000660D 07                      	pop	es
 35644 0000660E BF[2003]                	MOV     DI,SWAP_START
 35645 00006611 B9[AC0A]                	MOV     CX,SWAP_END
 35646 00006614 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35647 00006617 29F9                    	SUB     CX,DI
 35648 00006619 29FA                    	SUB     DX,DI
 35649 0000661B D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35650 0000661D 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35651 00006620 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35652 00006622 E8609E                  	call	Get_User_Stack
 35653                                  	;mov	[si+14],es
 35654 00006625 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35655                                  	;mov	[si+8],di
 35656 00006628 897C08                  	MOV     [SI+user_env.user_SI],DI
 35657                                  	;mov	[si+6],dx
 35658 0000662B 895406                  	MOV     [SI+user_env.user_DX],DX
 35659 0000662E EB96                    	JMP	short SetCXOK
 35660                                  
 35661                                  SPOOL_OPER:
 35662                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35663                                  
 35664 00006630 50                      	push    ax
 35665 00006631 B82511                  	mov     ax,1125h
 35666 00006634 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35667                                  			; STACK: WORD subfunction
 35668                                  			; Return: CF set on error, AX = error code
 35669                                  			; STACK unchanged
 35670 00006636 5B                      	pop	bx
 35671                                  	; 17/12/2022
 35672                                  	;JC	short func_err2
 35673 00006637 7390                    	jnc	short Commit_Okj2
 35674                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35675                                  	;;jmp	SYS_RET_OK
 35676                                  	;jmp	short Commit_Okj2
 35677                                  	
 35678                                  func_err2:
 35679 00006639 E908A0                  	jmp	SYS_RET_ERR
 35680                                  
 35681                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35682                                  ;--------------------------------------------------------------------------
 35683                                  ;
 35684                                  ; Procedure Name : $SetExtendedError
 35685                                  ;
 35686                                  ; $SetExtendedError takes extended error information and loads it up for the
 35687                                  ; next extended error call. This is used by interrupt-level proccessors to
 35688                                  ; mask their actions.
 35689                                  ;
 35690                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35691                                  ;   Outputs: none
 35692                                  ;
 35693                                  ;---------------------------------------------------------------------------
 35694                                  
 35695                                  _$SetExtendedError:
 35696                                  
 35697                                  ;hkn; SS override for all variables used
 35698                                  
 35699 0000663C 8B04                    	mov	ax,[si]
 35700                                  	;MOV	AX,[SI+DPL.AX]
 35701 0000663E 36A3[2403]              	MOV	[SS:EXTERR],AX
 35702                                  	;mov	ax,[si+10]
 35703 00006642 8B440A                  	MOV	AX,[SI+DPL.DI]
 35704 00006645 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35705                                  	;mov	ax,[si+14]
 35706 00006649 8B440E                  	MOV	AX,[SI+DPL.ES]
 35707 0000664C 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35708                                  	;mov	ax,[si+2]
 35709 00006650 8B4402                  	MOV	AX,[SI+DPL.BX]
 35710 00006653 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35711                                  	;mov	ax,[si+4]
 35712 00006657 8B4404                  	MOV	AX,[SI+DPL.CX]
 35713 0000665A 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35714 0000665F C3                      	retn
 35715                                  
 35716                                  ;============================================================================
 35717                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35718                                  ;============================================================================
 35719                                  ; 05/08/2018 - Retro DOS v3.0
 35720                                  ; 05/05/2019 - Retro DOS v4.0
 35721                                  
 35722                                  ;**	Handle related utilities for MSDOS 2.X.
 35723                                  ;----------------------------------------------------------------------------
 35724                                  ;	pJFNFromHandle	written
 35725                                  ;	SFFromHandle	written
 35726                                  ;	SFFromSFN	written
 35727                                  ;	JFNFree 	written
 35728                                  ;	SFNFree 	written
 35729                                  ;
 35730                                  ;	Modification history:
 35731                                  ;
 35732                                  ;	    Created: MZ 1 April 1983
 35733                                  ;----------------------------------------------------------------------------
 35734                                  
 35735                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35736                                  
 35737                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35738                                  ;----------------------------------------------------------------------------
 35739                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35740                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35741                                  ;
 35742                                  ;	NOTE:
 35743                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35744                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35745                                  ;
 35746                                  ;	ENTRY	(bx) = handle
 35747                                  ;	EXIT	'C' clear if ok
 35748                                  ;		  (es:di) = address of JFN value
 35749                                  ;		'C' set if error
 35750                                  ;		  (ax) = error code
 35751                                  ;	USES	AX, DI, ES, Flags
 35752                                  ;----------------------------------------------------------------------------
 35753                                  
 35754                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35755                                  
 35756                                  pJFNFromHandle:
 35757                                  	; 05/05/2019 - Retro DOS v4.0
 35758                                  	;getdseg <es>			; es -> dosdata
 35759 00006660 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35760                                  	
 35761                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35762 00006665 268E06[3003]            	mov	es,[es:CurrentPDB]
 35763                                  
 35764                                  	;cmp	bx,[ES:32h]
 35765 0000666A 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35766 0000666F 7204                    	JB	short pjfn10		; no, get offset
 35767                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35768                                  	;mov	al,6
 35769 00006671 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35770                                  ReturnCarry:
 35771 00006673 F9                      	STC                             ; signal error
 35772 00006674 C3                      	retn				; go back
 35773                                  pjfn10: 
 35774                                  	;les	di,[es:34h]
 35775 00006675 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35776 0000667A 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35777                                  	;clc
 35778                                  pJFNFromHandle_error:
 35779 0000667C C3                      	retn
 35780                                  
 35781                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35782                                  ;----------------------------------------------------------------------------
 35783                                  ;
 35784                                  ; Procedure Name : SFFromHandle
 35785                                  ;
 35786                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35787                                  ;
 35788                                  ;   Input:      BX has handle
 35789                                  ;   Output:     Carry Set
 35790                                  ;                   AX has error code
 35791                                  ;               Carry Reset
 35792                                  ;                   ES:DI has pointer to SF entry
 35793                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35794                                  ; NOTE:
 35795                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35796                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35797                                  ;
 35798                                  ;----------------------------------------------------------------------------
 35799                                  
 35800                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35801                                  
 35802                                  SFFromHandle:
 35803 0000667D E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35804                                  	;retc				; return if error
 35805 00006680 72FA                    	jc	short pJFNFromHandle_error
 35806 00006682 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35807                                  	;JNZ	short GetSF		; nope, suck out SF
 35808                                  	;;mov	al,6
 35809                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35810                                  	;jmp	short ReturnCarry	; signal it
 35811                                  	; 17/12/2022
 35812                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35813 00006686 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35814                                  	;JNZ	short GetSF		; nope, suck out SF
 35815                                  	;;mov	al,6
 35816                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35817                                  	;jmp	short ReturnCarry	; signal it
 35818                                  GetSF:
 35819 00006688 53                      	push	bx			; save handle
 35820 00006689 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35821 0000668C 30FF                    	XOR     BH,BH                   ; ignore upper half
 35822 0000668E E80200                  	CALL    SFFromSFN               ; get real sf spot
 35823 00006691 5B                      	pop	bx			; restore
 35824 00006692 C3                      	retn                        	; say goodbye
 35825                                  
 35826                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35827                                  
 35828                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35829                                  ;----------------------------------------------------------------------------
 35830                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35831                                  ;	is more than just a simple index instruction because the SF table
 35832                                  ;	can be made up of multiple pieces chained together. We follow the
 35833                                  ;	chain to the right piece and then do the index operation.
 35834                                  ;
 35835                                  ;   NOTE:
 35836                                  ;	This routine is called from SFFromHandle which is called
 35837                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35838                                  ;
 35839                                  ;	ENTRY	BX has SF index
 35840                                  ;	EXIT	'C' clear if OK
 35841                                  ;		  ES:DI points to SF entry
 35842                                  ;		'C' set if index too large
 35843                                  ;	USES	BX, DI, ES
 35844                                  ;----------------------------------------------------------------------------
 35845                                  
 35846                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35847                                  
 35848                                  SFFromSFN:
 35849                                  	; 05/05/2019 - Retro DOS v4.0
 35850                                  	;getdseg <es>			; es -> dosdata
 35851 00006693 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35852                                  
 35853                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35854 00006698 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35855                                  sfsfn5:	
 35856                                  	;cmp	bx,[es:di+4]
 35857 0000669D 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35858 000066A1 720E                    	JB	short sfsfn7		; yes, go grab it
 35859                                  	;sub	bx,[es:di+4]
 35860 000066A3 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35861 000066A7 26C43D                  	les	di,[es:di] ; 14/08/2018
 35862                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35863 000066AA 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35864 000066AD 75EE                    	JNZ	short sfsfn5		; no, try again
 35865 000066AF F9                      	STC
 35866 000066B0 C3                      	retn				; return with error, not found
 35867                                  sfsfn7:
 35868 000066B1 50                      	push	ax
 35869                                  	;mov	ax,53 ; MSDOS 3.3
 35870                                  	;mov	ax,59 ; MSDOS 6.0
 35871                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35872                                  	
 35873                                  	; 17/12/2022
 35874 000066B2 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35875                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35876                                  	;mov	ax,SF_ENTRY.size ; 59
 35877                                  	
 35878 000066B4 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35879 000066B6 01C7                    	ADD	DI,AX			; add base of SF block
 35880 000066B8 58                      	pop	ax
 35881                                  	;add	di,6
 35882 000066B9 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35883 000066BC C3                      	retn				; return with 'C' clear
 35884                                  
 35885                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35886                                  
 35887                                  ;**	JFNFree - Find a Free JFN Slot
 35888                                  ;----------------------------------------------------------------------------
 35889                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35890                                  ;
 35891                                  ;	ENTRY	(ss) = DOSDATA
 35892                                  ;	EXIT	'C' clear if OK
 35893                                  ;		  (bx) = new handle
 35894                                  ;		  (es:di) = pointer to JFN slot
 35895                                  ;		'C' set if error
 35896                                  ;		  (al) = error code
 35897                                  ;	USES	bx, di, es, flags
 35898                                  ;----------------------------------------------------------------------------
 35899                                  
 35900                                  JFNFree:
 35901 000066BD 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35902                                  jfnf1:	
 35903 000066BF E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35904 000066C2 7209                    	JC	short jfnf5		; no more handles
 35905 000066C4 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35906 000066C8 7405                    	je	short jfnfx		; yes, carry is clear
 35907 000066CA 43                      	INC     BX                      ; no, next handle
 35908 000066CB EBF2                    	JMP	short jfnf1		; and try again
 35909                                  
 35910                                  	; Error. 'C' set
 35911                                  jfnf5:	
 35912                                  	;mov	al,4
 35913 000066CD B004                    	MOV	AL,error_too_many_open_files
 35914                                  jfnfx:	
 35915 000066CF C3                      	retn				; bye
 35916                                  
 35917                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35918                                  
 35919                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35920                                  ;----------------------------------------------------------------------------
 35921                                  ;	SFNFree scans through the sf table looking for a free entry
 35922                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35923                                  ;
 35924                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35925                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35926                                  ;	we can't just mark it busy because we may get blown out of our open
 35927                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35928                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35929                                  ;	an SFT with this value we look to see if it belongs to this user
 35930                                  ;	and process.  If it does belong to us then it must be an orphan
 35931                                  ;	and we reclaim it.
 35932                                  ;
 35933                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35934                                  ;		over and over, but we could at least set a high water mark...
 35935                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35936                                  ;		even though this is not a frequently called routine - jgl
 35937                                  ;
 35938                                  ;	ENTRY	(ss) = DOSDATA
 35939                                  ;	EXIT	'C' clear if no error
 35940                                  ;		  (bx) = SFN
 35941                                  ;		  (es:di) = pointer to SFT
 35942                                  ;		  es:[di].SFT_REF_COUNT = -1
 35943                                  ;		'C' set if error
 35944                                  ;		  (al) = error code
 35945                                  ;	USES	bx, di, es, Flags
 35946                                  ;----------------------------------------------------------------------------
 35947                                  
 35948                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35949                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35950                                  
 35951                                  SFNFree:
 35952                                  	; 12/08/2018
 35953                                  	; 05/08/2018 - Retro DOS v3.0
 35954                                  	;
 35955                                  	; MSDOS 6.0
 35956 000066D0 50                      	push	ax
 35957 000066D1 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35958                                  sfnf5:	
 35959 000066D3 53                      	push	bx
 35960 000066D4 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35961 000066D7 5B                      	pop	bx
 35962 000066D8 723A                    	jc	short sfnf95		; no more free SFNs
 35963 000066DA 26833D00                	cmp	word [ES:DI],0
 35964                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35965 000066DE 741D                    	je	short sfnf20			; yep, got one
 35966                                  	
 35967                                  	;cmp	word [es:di],0FFFFh ; -1
 35968 000066E0 26833DFF                	cmp	word [ES:DI],sf_busy
 35969                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35970 000066E4 7403                    	je	short sfnf10		; special busy mark
 35971                                  sfnf7:	
 35972 000066E6 43                      	inc	bx			; try the next one
 35973 000066E7 EBEA                    	jmp	short sfnf5
 35974                                  
 35975                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35976                                  ;	it was abandoned during a earlier call and we can use it.
 35977                                  ;
 35978                                  ;	(bx)	= SFN
 35979                                  ;	(es:di) = pointer to SFT
 35980                                  ;	(TOS)	= caller's (ax)
 35981                                  
 35982                                  sfnf10:	
 35983 000066E9 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35984                                  	;cmp	[es:di+2Fh],ax
 35985 000066ED 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35986 000066F1 75F3                    	jnz	short sfnf7		; not ours
 35987 000066F3 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35988                                  	;cmp	[es:di+31h],ax
 35989 000066F7 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35990 000066FB 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35991                                  
 35992                                  ;	We have an SFT to allocate
 35993                                  ;
 35994                                  ;	(bx)	= SFN
 35995                                  ;	(es:di) = pointer to SFT
 35996                                  ;	(TOS)	= caller's (ax)
 35997                                  
 35998                                  sfnf20:
 35999                                  	; cf = 0 ;; Retro DOS v3.0
 36000                                  
 36001                                  	;mov	word [es:di],0FFFFh
 36002 000066FD 26C705FFFF              	mov	word [ES:DI],sf_busy
 36003                                  					; make sure that this is allocated
 36004                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36005                                  
 36006 00006702 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36007                                  	;mov	[es:di+2Fh],ax
 36008 00006706 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36009 0000670A 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36010                                  	;mov	[es:di+31h],ax
 36011 0000670E 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36012                                  sfnf21: ;; Retro DOS v3.0
 36013                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36014                                  	;pop	ax
 36015                                  	;;clc
 36016                                  	;retn				; return with no error
 36017                                  	; 17/12/2022
 36018 00006712 58                      	pop	ax
 36019                                  	;clc
 36020 00006713 C3                      	retn
 36021                                  
 36022                                  ;**	Error - no more free SFNs
 36023                                  ;
 36024                                  ;	'C' set
 36025                                  ;	(TOS) = saved ax
 36026                                  
 36027                                  sfnf95: 
 36028 00006714 58                      	pop	ax
 36029                                  	;mov	al,4
 36030 00006715 B004                    	mov	al,error_too_many_open_files
 36031 00006717 C3                      	retn				; return with 'C' and error
 36032                                  
 36033                                  ;============================================================================
 36034                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36035                                  ;============================================================================
 36036                                  ; 13/07/2018 - Retro DOS v3.0
 36037                                  ; 20/05/2019 - Retro DOS v4.0
 36038                                  
 36039                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36040                                  
 36041                                  ;	BREAK <$Close - return a handle to the system>
 36042                                  ;----------------------------------------------------------------------------
 36043                                  ;
 36044                                  ;**	$Close - Close a file Handle
 36045                                  ;
 36046                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36047                                  ;		path
 36048                                  ;
 36049                                  ;	Assembler usage:
 36050                                  ;	    MOV     BX, handle
 36051                                  ;	    MOV     AH, Close
 36052                                  ;	    INT     int_command
 36053                                  ;
 36054                                  ;	ENTRY	(bx) = handle
 36055                                  ;	EXIT	<normal INT21 return convention>
 36056                                  ;	USES	all
 36057                                  ;
 36058                                  ;----------------------------------------------------------------------------
 36059                                  
 36060                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36061                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36062                                  
 36063                                  _$CLOSE:
 36064                                  ;	Grab the SFT pointer from the JFN.
 36065                                  
 36066 00006718 E85A02                  	call	CheckOwner		; get system file entry
 36067 0000671B 722B                    	jc	short CloseError	; error return
 36068 0000671D 16                      	push	ss
 36069 0000671E 1F                      	pop	ds			; For DOS_CLOSE
 36070 0000671F 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36071 00006723 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36072                                  
 36073                                  ; DS:SI point to JFN table entry.
 36074                                  ; ES:DI point to SFT
 36075                                  ;
 36076                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36077                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36078                                  ; If the file was not a net FCB, we free the JFN too.
 36079                                  
 36080                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36081 00006727 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36082 0000672B 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36083                                  	;mov	al,[ES:DI+2]
 36084 0000672D 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36085                                  	;and	al,0F0h
 36086 00006731 24F0                    	AND	AL,SHARING_MASK
 36087                                  	;cmp	al,70h
 36088 00006733 3C70                    	CMP	AL,SHARING_NET_FCB
 36089 00006735 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36090                                  
 36091                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36092                                  ; -1.
 36093                                  
 36094                                  FreeJFN:
 36095 00006737 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36096 0000673A 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36097                                  PostFree:
 36098                                  
 36099                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36100                                  
 36101 0000673E E8FCC7                  	call	DOS_CLOSE
 36102                                  
 36103                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36104                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36105                                  
 36106 00006741 7205                    	JC	short CloseError
 36107                                  	;mov	ah,3Eh
 36108 00006743 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36109                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36110                                  CloseOk:
 36111 00006745 E9F39E                  	jmp	SYS_RET_OK
 36112                                  CloseError:
 36113 00006748 E9F99E                  	jmp	SYS_RET_ERR
 36114                                  
 36115                                  ;	BREAK <$Commit - commit the file>
 36116                                  ;----------------------------------------------------------------------------
 36117                                  ;
 36118                                  ;**	$Commit - Commit a File
 36119                                  ;
 36120                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36121                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36122                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36123                                  ;	and fix this!! jgl
 36124                                  ;
 36125                                  ;	Assembler usage:
 36126                                  ;	    MOV     BX, handle
 36127                                  ;	    MOV     AH, Commit
 36128                                  ;	    INT     int_command
 36129                                  ;
 36130                                  ;	ENTRY	(bx) = handle
 36131                                  ;	EXIT	none
 36132                                  ;	USES	all
 36133                                  ;;----------------------------------------------------------------------------
 36134                                  
 36135                                  _$COMMIT:
 36136                                  ;	Grab the SFT pointer from the JFN.
 36137                                  
 36138 0000674B E82702                  	call	CheckOwner		; get system file entry
 36139 0000674E 7213                    	JC	short CommitError	; error return
 36140 00006750 16                      	push	ss
 36141 00006751 1F                      	pop	ds			; For DOS_COMMIT
 36142 00006752 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36143 00006756 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36144                                  
 36145                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36146                                  ;
 36147                                  ;	ES:DI point to SFT
 36148                                  
 36149 0000675A E82EC9                  	call	DOS_COMMIT
 36150 0000675D 7204                    	JC	short CommitError
 36151                                  	; 07/12/2022
 36152                                  	;jc	short CloseError
 36153                                  	;mov	ah,68h
 36154 0000675F B468                    	MOV	AH,COMMIT
 36155                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36156                                  	;jmp	SYS_RET_OK
 36157                                  CommitOk:
 36158 00006761 EBE2                    	jmp	short CloseOk	
 36159                                  
 36160                                  CommitError:
 36161                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36162                                  	;jmp	SYS_RET_ERR
 36163 00006763 EBE3                    	jmp	short CloseError
 36164                                  
 36165                                  ;	BREAK <$ExtHandle - extend handle count>
 36166                                  
 36167                                  ;**	$ExtHandle - Extend Handle Count
 36168                                  ;----------------------------------------------------------------------------
 36169                                  ;	Assembler usage:
 36170                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36171                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36172                                  ;	    INT     int_command 		 busy )
 36173                                  ;
 36174                                  ;	ENTRY	(bx) = new number of handles
 36175                                  ;	EXIT	'C' clear if OK
 36176                                  ;		'C' set iff err
 36177                                  ;		  (ax) = error code
 36178                                  ;			 AX = error_not_enough_memory
 36179                                  ;			      error_too_many_open_files
 36180                                  ;	USES	all
 36181                                  ;----------------------------------------------------------------------------
 36182                                  
 36183                                  _$ExtHandle:
 36184 00006765 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36185                                  	;cmp	bx,20
 36186 00006767 83FB14                  	CMP	BX,FILPERPROC
 36187 0000676A 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36188 0000676C BB1400                  	MOV	BX,FILPERPROC
 36189                                  exth2:	
 36190 0000676F 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36191                                  	;mov	cx,[ES:32h]
 36192 00006774 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36193 00006779 39CB                    	CMP	BX,CX			; the requested == current
 36194 0000677B 7455                    	JE	short ok_done 		; yes and exit
 36195 0000677D 7722                    	JA	short larger		; go allocate new table
 36196                                  
 36197                                  ;	We're going to shrink the # of handles available
 36198                                  
 36199 0000677F BD0100                  	MOV	BP,1			; shrink
 36200                                  	;mov	ds,[ES:36h]
 36201 00006782 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36202 00006787 89DE                    	MOV	SI,BX			;
 36203 00006789 29D9                    	SUB	CX,BX			; get difference
 36204                                  
 36205                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36206                                  chck_handles:
 36207 0000678B 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36208 0000678E 753D                    	JNZ	short too_many_files	; status
 36209 00006790 46                      	INC	SI
 36210 00006791 E2F8                    	LOOP	chck_handles
 36211 00006793 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36212 00006796 7709                    	JA	short larger		; no
 36213                                  
 36214 00006798 BD0200                  	MOV	BP,2			; psp
 36215                                  	;mov	di,24
 36216 0000679B BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36217 0000679E 53                      	PUSH	BX
 36218 0000679F EB1D                    	JMP	short movhandl
 36219                                  
 36220                                  larger:
 36221 000067A1 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36222 000067A4 747F                    	JZ	short invalid_func	; 10/08/2018
 36223 000067A6 F8                      	CLC
 36224 000067A7 53                      	PUSH	BX			; save requested number
 36225 000067A8 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36226 000067AB B104                    	MOV	CL,4
 36227                                  	;ror	bx,cl			; MSDOS 3.3
 36228 000067AD D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36229 000067AF 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36230                                  
 36231 000067B3 55                      	PUSH	BP
 36232 000067B4 E8DCFA                  	call	_$ALLOC			; allocate memory
 36233 000067B7 5D                      	POP	BP
 36234 000067B8 7266                    	JC	short no_memory		; not enough meory
 36235                                  
 36236 000067BA 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36237 000067BC 31FF                    	XOR	DI,DI
 36238                                  movhandl:
 36239 000067BE 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36240                                  
 36241 000067C3 F7C50300                	test	BP,3			; enlarge ?
 36242 000067C7 740C                    	JZ	short enlarge 		; yes
 36243 000067C9 59                      	POP	CX			; cx = the amount you shrink
 36244 000067CA 51                      	PUSH	CX
 36245 000067CB EB0C                    	JMP	short copy_hand
 36246                                  
 36247                                  ;	Done.  'C' clear
 36248                                  
 36249                                  ; 17/12/2022
 36250                                  ;ok_done:
 36251                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36252                                  ;	;jmp	short CommitOk
 36253                                  ;	; 17/12/2022
 36254                                  ;	jmp	SYS_RET_OK
 36255                                  
 36256                                  too_many_files:
 36257                                  	;mov	al,4
 36258 000067CD B004                    	MOV	AL,error_too_many_open_files
 36259                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36260                                  	;jmp	SYS_RET_ERR
 36261                                  CommitErrorj:
 36262                                  	;jmp	short CommitError
 36263                                  	; 17/12/2022
 36264 000067CF E9729E                  	jmp	SYS_RET_ERR
 36265                                  
 36266                                  ; 17/12/2022 
 36267                                  ok_done:
 36268                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36269                                  	;jmp	short CommitOk
 36270                                  	; 17/12/2022
 36271 000067D2 E9669E                  	jmp	SYS_RET_OK
 36272                                  
 36273                                  enlarge:
 36274                                  	;mov	cx,[32h]
 36275 000067D5 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36276                                  copy_hand:
 36277 000067D9 89CA                    	MOV	DX,CX
 36278                                  	;lds	si,[34h]
 36279 000067DB C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36280 000067DF F3A4                    	REP	MOVSB			; copy infomation to new table
 36281 000067E1 59                      	POP	CX			; get new number of handles
 36282 000067E2 51                      	PUSH	CX			; save it again
 36283 000067E3 29D1                    	SUB	CX,DX			; get the difference
 36284 000067E5 B0FF                    	MOV	AL,-1			; set availability to handles
 36285 000067E7 F3AA                    	REP	STOSB
 36286 000067E9 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36287                                  	;cmp	word [34h],0
 36288 000067EE 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36289 000067F3 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36290 000067F5 55                      	PUSH	BP
 36291 000067F6 1E                      	PUSH	DS			; save old table segment
 36292 000067F7 06                      	PUSH	ES			; save new table segment
 36293 000067F8 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36294 000067FC E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36295 000067FF 07                      	POP	ES			; restore new table segment
 36296 00006800 1F                      	POP	DS			; restore old table segment
 36297 00006801 5D                      	POP	BP
 36298                                  
 36299                                  update_info:
 36300 00006802 F7C50200                	test	BP,2			; psp?
 36301 00006806 7408                    	JZ	short non_psp 		; no
 36302                                  	;mov	word [34h],18h ; 24
 36303 00006808 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36304 0000680E EB06                    	JMP	short final
 36305                                  non_psp:
 36306                                  	;mov	word [34h],0
 36307 00006810 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36308                                  final:
 36309                                  	;mov	[36h],es	
 36310 00006816 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36311                                  	;pop	word [32h]
 36312 0000681A 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36313                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36314                                  	;jmp	SYS_RET_OK
 36315                                  ok_done_j:
 36316 0000681E EBB2                    	jmp	short ok_done
 36317                                  
 36318                                  no_memory:
 36319 00006820 5B                      	POP	BX			; clean stack
 36320                                  	;mov	al,8
 36321 00006821 B008                    	MOV	AL,error_not_enough_memory
 36322                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36323                                  	;jmp	SYS_RET_ERR
 36324                                  CommitErrorj2:
 36325 00006823 EBAA                    	jmp	short CommitErrorj
 36326                                  
 36327                                  invalid_func:
 36328                                  	;mov	al,1
 36329 00006825 B001                    	MOV	AL,error_invalid_function
 36330                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36331                                  	;jmp	SYS_RET_ERR
 36332                                  CommitErrorj3:
 36333                                  	;jmp	short CommitErrorj2
 36334                                  	; 17/12/2022
 36335 00006827 EBA6                    	jmp	short CommitErrorj
 36336                                  
 36337                                  ; 20/05/2019 - Retro DOS v4.0
 36338                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36339                                  
 36340                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36341                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36342                                  
 36343                                  ;	BREAK <$READ - Read from a file handle>
 36344                                  ;----------------------------------------------------------------------------
 36345                                  ;
 36346                                  ;**	$Read - Read from a File Handle
 36347                                  ;
 36348                                  ;   Assembler usage:
 36349                                  ;
 36350                                  ;	LDS	DX, buf
 36351                                  ;	MOV	CX, count
 36352                                  ;	MOV	BX, handle
 36353                                  ;	MOV	AH, Read
 36354                                  ;	INT	int_command
 36355                                  ;	  AX has number of bytes read
 36356                                  ;
 36357                                  ;	ENTRY	(bx) = file handle
 36358                                  ;		(cx) = byte count
 36359                                  ;		(ds:dx) = buffer address
 36360                                  ;	EXIT	Through system call return so that to user:
 36361                                  ;		  'C' clear if OK
 36362                                  ;		    (ax) = bytes read
 36363                                  ;		  'C' set if error
 36364                                  ;		    (ax) = error code
 36365                                  ;
 36366                                  ;----------------------------------------------------------------------------
 36367                                  
 36368                                  _$READ:
 36369 00006829 BE[E432]                	MOV	SI,DOS_READ
 36370                                  ReadDo:
 36371 0000682C E831FE                  	call	pJFNFromHandle
 36372 0000682F 7208                    	JC	short ReadError
 36373                                  
 36374 00006831 268A05                  	MOV	AL,[ES:DI]
 36375 00006834 E83E01                  	call	CheckOwner		; get the handle
 36376 00006837 7303                    	JNC	short ReadSetup		; no errors do the operation
 36377                                  
 36378                                  ;	Have an error. 'C' set
 36379                                  
 36380                                  ReadError:
 36381                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36382                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36383                                  	;jmp	short CommitErrorj3
 36384                                  	; 17/12/2022
 36385 00006839 E9089E                  	jmp	SYS_RET_ERR
 36386                                  
 36387                                  ReadSetup:
 36388 0000683C 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36389 00006841 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36390                                  	; 20/05/2019 - Retro DOS v4.0
 36391                                  	; MSDOS 6.0 
 36392                                  ;; Extended Open
 36393                                  	;test	byte [es:di+3],20h
 36394 00006846 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36395                                  						 ;AN000;;EO. need i24
 36396 0000684B 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36397 0000684D 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36398                                  					;AN000;;EO. set it off;smr;SS Override
 36399                                  needi24:				;AN000;
 36400                                  ;; Extended Open
 36401 00006853 36FF36[2C03]            	push	word [SS:DMAADD]
 36402 00006858 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36403                                  
 36404                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36405                                  
 36406                                  	; 26/07/2019
 36407                                  
 36408                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36409                                  	;
 36410                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36411                                  	; there is not another caller; it is better to put the code in this proc
 36412                                   	; here instead of calling it as a subroutine; but I have modified code
 36413                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36414                                  
 36415                                  	; MSDOS 6.0
 36416 0000685D E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36417                                  	
 36418                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36419                                  	; MSDOS 3.3
 36420                                  	;MOV	BX,DX			; copy offset
 36421                                  	;push	cx			; don't stomp on count
 36422                                  	;MOV	CL,4			; bits to shift bytes->para
 36423                                  	;SHR	BX,CL			; get number of paragraphs
 36424                                  	;pop	cx			; get count back
 36425                                  	;MOV	AX,DS			; get original segment
 36426                                  	;ADD	AX,BX			; get new segment
 36427                                  	;MOV	DS,AX			; in seg register
 36428                                  	;AND	DX,0Fh			; normalize offset
 36429                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36430                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36431                                  						;smr;SS Override
 36432                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36433                                  	
 36434 00006860 16                      	push	ss			; go for DOS addressability
 36435 00006861 1F                      	pop	ds
 36436                                  
 36437 00006862 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36438                                  
 36439 00006864 8F06[2E03]              	pop	word [DMAADD+2]
 36440 00006868 8F06[2C03]              	pop	word [DMAADD]
 36441                                  	;JNC	short READ_OK		;AN002;
 36442                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36443                                  	; 17/12/2022
 36444 0000686C 72CB                    	jc	short ReadError
 36445                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36446                                  	;jnc	short READ_OK		;AN002;
 36447                                  	;jmp	short ReadError
 36448                                  
 36449                                  READ_OK:
 36450 0000686E 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36451                                  Read_Okj:
 36452                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36453                                  	;;jmp	SYS_RET_OK		; successful return
 36454                                  	;jmp	short ok_done_j
 36455                                  	; 17/12/2022
 36456 00006870 E9C89D                  	jmp	SYS_RET_OK
 36457                                  
 36458                                  ; 13/07/2018 - Retro DOS v3.0
 36459                                  
 36460                                  ;----------------------------------------------------------------------------
 36461                                  
 36462                                  ;   Input: DS:DX points to user's buffer addr
 36463                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36464                                  ;   Output: [DMAADD] set
 36465                                  
 36466                                  ; 20/05/2019 - Retro DOS v4.0
 36467                                  ; 26/07/2019
 36468                                  ;	; MSDOS 6.0
 36469                                  ;Align_Buffer:
 36470                                  ;	MOV	BX,DX			; copy offset
 36471                                  ;	push	cx			; don't stomp on count
 36472                                  ;	MOV	CL,4			; bits to shift bytes->para
 36473                                  ;	SHR	BX,CL			; get number of paragraphs
 36474                                  ;	pop	cx			; get count back
 36475                                  ;	MOV	AX,DS			; get original segment
 36476                                  ;	ADD	AX,BX			; get new segment
 36477                                  ;	MOV	DS,AX			; in seg register
 36478                                  ;	AND	DX,0Fh			; normalize offset
 36479                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36480                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36481                                  ;						;smr;SS Override
 36482                                  ;	retn
 36483                                  
 36484                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36485                                  Align_Buffer:
 36486 00006873 89D3                    	MOV	BX,DX			; copy offset
 36487 00006875 51                      	push	cx			; don't stomp on count
 36488 00006876 B104                    	MOV	CL,4			; bits to shift bytes->para
 36489 00006878 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36490 0000687A 59                      	pop	cx			; get count back
 36491 0000687B 8CD8                    	MOV	AX,DS			; get original segment
 36492 0000687D 01D8                    	ADD	AX,BX			; get new segment
 36493 0000687F 8ED8                    	MOV	DS,AX			; in seg register
 36494 00006881 83E20F                  	AND	DX,0Fh			; normalize offset
 36495 00006884 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36496 00006889 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36497                                  						;smr;SS Override
 36498 0000688E C3                      	retn
 36499                                  
 36500                                  ; 20/05/2019 - Retro DOS v4.0
 36501                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36502                                  
 36503                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36504                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36505                                  
 36506                                  ;BREAK <$WRITE - write to a file handle>
 36507                                  ;----------------------------------------------------------------------------
 36508                                  ;
 36509                                  ;   Assembler usage:
 36510                                  ;	    LDS     DX, buf
 36511                                  ;	    MOV     CX, count
 36512                                  ;	    MOV     BX, handle
 36513                                  ;	    MOV     AH, Write
 36514                                  ;	    INT     int_command
 36515                                  ;	  AX has number of bytes written
 36516                                  ;   Errors:
 36517                                  ;	    AX = write_invalid_handle
 36518                                  ;	       = write_access_denied
 36519                                  ;
 36520                                  ;   Returns in register AX
 36521                                  ;
 36522                                  ;----------------------------------------------------------------------------
 36523                                  
 36524                                  _$WRITE:
 36525 0000688F BE[0D35]                	MOV	SI,DOS_WRITE
 36526 00006892 EB98                    	JMP	short ReadDo
 36527                                  
 36528                                  ;BREAK <$LSEEK - move r/w pointer>
 36529                                  ;----------------------------------------------------------------------------
 36530                                  ;
 36531                                  ;   Assembler usage:
 36532                                  ;	    MOV     DX, offsetlow
 36533                                  ;	    MOV     CX, offsethigh
 36534                                  ;	    MOV     BX, handle
 36535                                  ;	    MOV     AL, method
 36536                                  ;	    MOV     AH, LSeek
 36537                                  ;	    INT     int_command
 36538                                  ;	  DX:AX has the new location of the pointer
 36539                                  ;   Error returns:
 36540                                  ;	    AX = error_invalid_handle
 36541                                  ;	       = error_invalid_function
 36542                                  ;   Returns in registers DX:AX
 36543                                  ;
 36544                                  ;----------------------------------------------------------------------------
 36545                                  
 36546                                  ; 21/05/2019 - Retro DOS v4.0
 36547                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36548                                  
 36549                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36550                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36551                                  
 36552                                  _$LSEEK:
 36553 00006894 E8DE00                  	call	CheckOwner		; get system file entry
 36554                                  
 36555                                  	; 17/12/2022
 36556                                  ;LSeekError:
 36557                                  	;JNC	short CHKOWN_OK		;AN002;
 36558                                  	;JMP	short ReadError		;AN002; error return
 36559                                  	; 17/12/2022
 36560                                  	; 02/06/2019
 36561 00006897 72A0                    	jc	short ReadError
 36562                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36563                                  	;JNC	short CHKOWN_OK		;AN002;
 36564                                  	;JMP	short ReadError		;AN002; error return
 36565                                  
 36566                                  CHKOWN_OK:
 36567                                  					;AN002;
 36568 00006899 3C02                    	CMP	AL,2			; is the seek value correct?
 36569 0000689B 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36570                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36571 0000689D 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36572                                  					;smr;SS Override
 36573                                  	;mov	al,1
 36574 000068A3 B001                    	mov	al,error_invalid_function ; invalid method
 36575                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36576                                  LSeekError2:
 36577 000068A5 EB92                    	jmp	short ReadError
 36578                                  
 36579                                  LSeekDisp:
 36580 000068A7 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36581 000068A9 720A                    	JB	short LSeekStore	; just store CX:DX
 36582 000068AB 771B                    	JA	short LSeekEOF		; seek from end of file
 36583                                  	;add	dx,[es:di+21]
 36584 000068AD 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36585                                  	;adc	cx,[es:di+23]
 36586 000068B1 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36587                                  LSeekStore:
 36588 000068B5 89C8                    	MOV	AX,CX			; AX:DX
 36589 000068B7 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36590                                  LSeekSetpos:
 36591                                  	;mov	[es:di+21],ax
 36592 000068B8 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36593                                  	;mov	[es:di+23],dx
 36594 000068BC 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36595 000068C0 E8C29B                  	call	Get_User_Stack
 36596                                  	;mov	[si+6],dx
 36597 000068C3 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36598                                  	;jmp	SYS_RET_OK		; successful return
 36599                                  	; 25/06/2019
 36600                                  	;jmp	SYS_RET_OK_clc
 36601                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36602                                  	;jmp	SYS_RET_OK_clc
 36603                                  LSeekOk:
 36604 000068C6 EBA8                    	jmp     short Read_Okj
 36605                                  
 36606                                  LSeekEOF:
 36607                                  	;;test	word [es:di+5],8000h
 36608                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36609                                  	; 21/05/2019 - Retro DOS v4.0
 36610 000068C8 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36611 000068CD 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36612                                  LOCAL_LSeek:
 36613                                  	;add	dx,[es:di+17]
 36614 000068CF 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36615                                  	;adc	cx,[es:di+19]
 36616 000068D3 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36617 000068D7 EBDC                    	JMP	short LSeekStore	; go and set the position
 36618                                  
 36619                                  Check_LSeek_Mode:
 36620                                  	;;test	word [es:di+2],8000h
 36621                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36622                                  	; 21/05/2019
 36623 000068D9 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36624 000068DE 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36625                                  	;mov	ax,[es:di+2]
 36626 000068E0 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36627                                  	;and	ax, 0F0h
 36628 000068E4 25F000                  	AND	AX,SHARING_MASK
 36629                                  	;cmp	ax,40h
 36630 000068E7 83F840                  	CMP	AX,SHARING_DENY_NONE
 36631 000068EA 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36632                                  	;cmp	ax,30h
 36633 000068EC 83F830                  	CMP	AX,SHARING_DENY_READ
 36634 000068EF 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36635                                  NET_LSEEK:
 36636                                  ;	JMP	short LOCAL_LSeek
 36637                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36638                                  	;CallInstall Net_Lseek,MultNET,33
 36639                                  	;JNC	short LSeekSetPos
 36640                                  
 36641 000068F1 B82111                  	mov     ax,1121h
 36642 000068F4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36643                                  			; CX:DX = offset (in bytes) from end
 36644                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36645                                  			; SS = DOS CS
 36646                                  			; Return: CF set on error
 36647                                  			; CF clear if successful, DX:AX = new file position
 36648 000068F6 73C0                    	jnb     short LSeekSetpos
 36649                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36650                                  	;jmp	SYS_RET_ERR
 36651                                  ;LSeekError3:
 36652                                  	; 17/12/2022
 36653                                  LSeekError:
 36654                                  	;jmp	short LSeekError2
 36655                                  DupErr:	; 17/12/2022
 36656 000068F8 E9499D                  	jmp	SYS_RET_ERR
 36657                                  
 36658                                  ;BREAK <FileTimes - modify write times on a handle>
 36659                                  ;----------------------------------------------------------------------------
 36660                                  ;
 36661                                  ;   Assembler usage:
 36662                                  ;	    MOV AH, FileTimes (57H)
 36663                                  ;	    MOV AL, func
 36664                                  ;	    MOV BX, handle
 36665                                  ;	; if AL = 1 then then next two are mandatory
 36666                                  ;	    MOV CX, time
 36667                                  ;	    MOV DX, date
 36668                                  ;	    INT 21h
 36669                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36670                                  ;	; for the handle.
 36671                                  ;
 36672                                  ;	AL=02		 get extended attributes
 36673                                  ;	   BX=handle
 36674                                  ;	   CX=size of buffer (0, return max size )
 36675                                  ;	   DS:SI query list (si=-1, selects all EA)
 36676                                  ;	   ES:DI buffer to hold EA list
 36677                                  ;
 36678                                  ;	AL=03		 get EA name list
 36679                                  ;	   BX=handle
 36680                                  ;	   CX=size of buffer (0, return max size )
 36681                                  ;	   ES:DI buffer to hold name list
 36682                                  ;
 36683                                  ;	AL=04		 set extended attributes
 36684                                  ;	   BX=handle
 36685                                  ;	   ES:DI buffer of EA list
 36686                                  ;
 36687                                  ;
 36688                                  ;   Error returns:
 36689                                  ;	    AX = error_invalid_function
 36690                                  ;	       = error_invalid_handle
 36691                                  ;
 36692                                  ;----------------------------------------------------------------------------
 36693                                  
 36694                                  ; 21/05/2019 - Retro DOS v4.0
 36695                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36696                                  
 36697                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36698                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36699                                  
 36700                                  _$FILE_TIMES:
 36701                                  	; 13/07/2018 - Retro DOS v3.0
 36702                                  
 36703                                  	; MSDOS 3.3
 36704                                  	;cmp	al,2			; correct subfunction ?
 36705                                  	;jb	short ft1
 36706                                  
 36707                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36708                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36709                                  						;SS Overr
 36710                                  	;;mov	al,1
 36711                                  	;mov	al,error_invalid_function ; give bad return
 36712                                  	;jmp	SYS_RET_ERR
 36713                                  
 36714                                  	; MSDOS 6.0
 36715 000068FB 3C02                    	cmp	al,2			; correct subfunction ?
 36716 000068FD 7340                    	jae	short inval_func
 36717                                  ;ft1:
 36718 000068FF E87300                  	call	CheckOwner		; get sft
 36719                                  	; 17/12/2022
 36720 00006902 72F4                    	jc	short LSeekError	; bad handle
 36721                                  
 36722 00006904 08C0                    	or	al,al			; get time/date ?
 36723 00006906 7515                    	jnz	short ft_set_time
 36724                                  
 36725                                  ;------ here we get the time & date from the sft for the user
 36726                                  
 36727 00006908 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36728                                  	;mov	cx,[es:di+13]
 36729 00006909 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36730                                  	;mov	dx,[es:di+15]
 36731 0000690D 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36732 00006911 FB                      	sti
 36733 00006912 E8709B                  	call	Get_User_Stack
 36734                                  	;mov	[si+4],cx
 36735 00006915 894C04                  	mov	[si+user_env.user_CX],cx
 36736                                  	;mov	[si+6],dx
 36737 00006918 895406                  	mov	[si+user_env.user_DX],dx
 36738 0000691B EB1F                    	jmp	short ok_ret
 36739                                  
 36740                                  ;------ here we set the time in sft
 36741                                  
 36742                                  ft_set_time:
 36743 0000691D E8F2A9                  	call    ECritSFT
 36744                                  	;mov	[es:di+13],cx
 36745 00006920 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36746                                  	;mov	[es:di+15],dx
 36747 00006924 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36748                                  
 36749 00006928 31C0                    	xor	ax, ax
 36750 0000692A 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36751                                  
 36752                                  ;------ set the flags in SFT entry
 36753                                  	;and	word [es:di+5],0FFBFh
 36754                                  	; 18/12/2022
 36755                                  	;and	byte [es:di+5],0BFh
 36756 0000692F 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36757                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36758                                  							; mark file as dirty
 36759                                  	;or	word [es:di+5],4000h
 36760                                  	; 17/12/2022
 36761                                  	;or	byte [es:di+6],40h
 36762 00006934 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36763                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36764                                  							; ask close not to
 36765                                  							;   bother about date
 36766                                  							;   and time
 36767 00006939 E8F1A9                  	call	LCritSFT
 36768                                  ok_ret:
 36769                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36770                                  	; 17/12/2022
 36771 0000693C E9FC9C                  	jmp	SYS_RET_OK
 36772                                  	;jmp	short LSeekOk
 36773                                  
 36774                                  inval_func:
 36775                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36776 0000693F 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36777                                  						;SS Overr
 36778                                  	;mov	al,1
 36779 00006945 B001                    	mov	al,error_invalid_function ; give bad return
 36780                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36781                                  ft_error:
 36782                                  	;;jmp	SYS_RET_ERR
 36783                                  	;jmp	short LSeekError3
 36784                                  	; 17/12/2022
 36785 00006947 EBAF                    	jmp	short LSeekError
 36786                                  
 36787                                  ; 21/05/2019 - Retro DOS v4.0
 36788                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36789                                  
 36790                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36791                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36792                                  
 36793                                  ;BREAK <$DUP - duplicate a jfn>
 36794                                  ;----------------------------------------------------------------------------
 36795                                  ;
 36796                                  ;   Assembler usage:
 36797                                  ;	    MOV     BX, fh
 36798                                  ;	    MOV     AH, Dup
 36799                                  ;	    INT     int_command
 36800                                  ;	  AX has the returned handle
 36801                                  ;   Errors:
 36802                                  ;	    AX = dup_invalid_handle
 36803                                  ;	       = dup_too_many_open_files
 36804                                  ;
 36805                                  ;----------------------------------------------------------------------------
 36806                                  
 36807                                  _$DUP:
 36808 00006949 89D8                    	MOV	AX,BX			; save away old handle in AX
 36809 0000694B E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36810                                  DupErrorCheck:
 36811 0000694E 72A8                    	JC	short DupErr		; nope, bye
 36812 00006950 06                      	push	es
 36813 00006951 57                      	push	di			; save away SFT
 36814 00006952 5E                      	pop	si			; into convenient place DS:SI
 36815 00006953 1F                      	pop	ds
 36816 00006954 93                      	XCHG	AX,BX			; get back old handle
 36817 00006955 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36818 00006958 729E                    	JC	short DupErr		; errors go home
 36819 0000695A E8F1C0                  	call	DOS_Dup_Direct
 36820 0000695D E800FD                  	call	pJFNFromHandle		; get pointer
 36821 00006960 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36822 00006963 881C                    	MOV	[SI],BL			; stuff in new SFT
 36823                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36824                                  	;jmp	SYS_RET_OK		; and go home
 36825 00006965 EBD5                    	jmp	short ok_ret
 36826                                  
 36827                                  	; 17/12/2022
 36828                                  ;DupErr:
 36829                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36830                                  	;;jmp	SYS_RET_ERR
 36831                                  	;jmp	short ft_error
 36832                                  
 36833                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36834                                  ;----------------------------------------------------------------------------
 36835                                  ;
 36836                                  ;   Assembler usage:
 36837                                  ;	    MOV     BX, fh
 36838                                  ;	    MOV     CX, newfh
 36839                                  ;	    MOV     AH, Dup2
 36840                                  ;	    INT     int_command
 36841                                  ;   Error returns:
 36842                                  ;	    AX = error_invalid_handle
 36843                                  ;
 36844                                  ;----------------------------------------------------------------------------
 36845                                  
 36846                                  _$DUP2:
 36847 00006967 53                      	push	bx
 36848 00006968 51                      	push	cx			; save source
 36849 00006969 89CB                    	MOV	BX,CX			; get one to close
 36850 0000696B E8AAFD                  	call	_$CLOSE			; close destination handle
 36851 0000696E 5B                      	pop	bx
 36852 0000696F 58                      	pop	ax			; old in AX, new in BX
 36853 00006970 E8EDFC                  	call	pJFNFromHandle		; get pointer
 36854 00006973 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36855                                  
 36856                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36857                                  ;----------------------------------------------------------------------------
 36858                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36859                                  ;   process without the process knowing it (delete/rename of open files, for
 36860                                  ;   example), it is possible for the redirector to issue a call to a handle
 36861                                  ;   that it soes not rightfully own. We check here to make sure that the
 36862                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36863                                  ;   SFFromHandle to really make sure that the SFT is good.
 36864                                  ;
 36865                                  ;	ENTRY	BX has the handle
 36866                                  ;		User_ID is the current user
 36867                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36868                                  ;		Carry Set => AX has error code
 36869                                  ;	USES	none
 36870                                  ;----------------------------------------------------------------------------
 36871                                  
 36872                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36873                                  	; 21/05/2019 - Retro DOS v4.0
 36874                                  CheckOwner:
 36875                                  	; 13/07/2018 - Retro DOS v3.0
 36876                                  
 36877 00006975 E805FD                  	call	SFFromHandle
 36878 00006978 721B                    	jc	short co_ret_label	; retc
 36879                                  
 36880 0000697A 50                      	push	ax
 36881                                  
 36882                                  	; MSDOS 6.0
 36883                                  
 36884                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36885                                  ;SR; are shared across multiple VMs in win386.
 36886                                  
 36887 0000697B 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36888 00006981 7404                    	jz	short no_win386		;win386 is not present
 36889 00006983 31C0                    	xor	ax,ax			;set the zero flag
 36890 00006985 EB08                    	jmp	short _skip_win386	
 36891                                  
 36892                                  no_win386:
 36893 00006987 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36894                                  	;cmp	ax,[es:di+47]
 36895 0000698B 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36896                                  
 36897                                  _skip_win386:
 36898 0000698F 58                      	pop	ax
 36899                                  	
 36900                                  	; 17/12/2022
 36901 00006990 7403                    	jz	short co_ret_label
 36902                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36903                                  	;jnz	short CheckOwner_err
 36904                                  	;retn
 36905                                  	
 36906                                  CheckOwner_err:
 36907                                  	;mov	al,6
 36908 00006992 B006                    	mov	al,error_invalid_handle
 36909 00006994 F9                      	stc
 36910                                  
 36911                                  co_ret_label:
 36912 00006995 C3                      	retn
 36913                                  
 36914                                  ;============================================================================
 36915                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36916                                  ;============================================================================
 36917                                  ; Retro	DOS v3.0 - 11/07/2018
 36918                                  ; 21/05/2019 - Retro DOS v4.0
 36919                                  
 36920                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36921                                  ;	NAME	MACRO
 36922                                  
 36923                                  ;	Microsoft Confidential
 36924                                  ;	Copyright (C) Microsoft Corporation 1991
 36925                                  ;	All Rights Reserved.
 36926                                  
 36927                                  ;**	MACRO.ASM
 36928                                  ;
 36929                                  ;	$AssignOper
 36930                                  ;	FIND_DPB
 36931                                  ;	InitCDS
 36932                                  ;	$UserOper
 36933                                  ;	GetVisDrv
 36934                                  ;	GetThisDrv
 36935                                  ;	GetCDSFromDrv
 36936                                  ;
 36937                                  ;   Revision history:
 36938                                  ;
 36939                                  ;	Created: MZ 4 April 1983
 36940                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36941                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36942                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36943                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36944                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36945                                  ;				    aliasing.
 36946                                  ;
 36947                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36948                                  ;   each valid drive letter the text of the current directory on that drive.
 36949                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36950                                  ;   be at the root. A current directory is either the raw local directory
 36951                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36952                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36953                                  ;
 36954                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36955                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36956                                  ;   this and all * are expanded into ?'s.
 36957                                  ;
 36958                                  ;   The second part of name translation involves subtree aliasing. A list of
 36959                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36960                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36961                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36962                                  ;   replaced with the other subtree in the pair.
 36963                                  ;
 36964                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36965                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36966                                  ;   The output of the previous translation is examined to see if any of the
 36967                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36968                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36969                                  ;   'mount' one device under another.
 36970                                  ;
 36971                                  ;   The final form of name translation involves the mapping of a user's
 36972                                  ;   logical drive number into the internal physical drive. This is
 36973                                  ;   accomplished by converting the drive number into letter:CON, performing
 36974                                  ;   the above translation and then converting the character back into a drive
 36975                                  ;   number.
 36976                                  ;
 36977                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36978                                  ;   take a path and form the real text of the pathname with all . and ..
 36979                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36980                                  ;   TransPath.
 36981                                  ;
 36982                                  ;	A000	version 4.00  Jan. 1988
 36983                                  
 36984                                  ;Installed = TRUE
 36985                                  
 36986                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36987                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36988                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36989                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36990                                  ;					; current drive)
 36991                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36992                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36993                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36994                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36995                                  ;	I_need	MYNAME,16		; machine name
 36996                                  ;	I_need	MYNUM,WORD		; machine number
 36997                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36998                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36999                                  ;	I_need	DrvErr,BYTE		; drive error
 37000                                  
 37001                                  ;BREAK <$AssignOper -- Set up a Macro>
 37002                                  ;----------------------------------------------------------------------------
 37003                                  ; Inputs:
 37004                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37005                                  ;	AL = 01 set assign mode 		    (SetMode)
 37006                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37007                                  ;	AL = 03 Define Macro (attch start)
 37008                                  ;	    BL = Macro type
 37009                                  ;	       = 0 alias
 37010                                  ;	       = 1 file/device
 37011                                  ;	       = 2 drive
 37012                                  ;	       = 3 Char device -> network
 37013                                  ;	       = 4 File device -> network
 37014                                  ;	    DS:SI -> ASCIZ source name
 37015                                  ;	    ES:DI -> ASCIZ destination name
 37016                                  ;	AL = 04 Cancel Macro
 37017                                  ;	    DS:SI -> ASCIZ source name
 37018                                  ;	AL = 05 Modified get attach list entry
 37019                                  ;	AL = 06 Get ifsfunc item
 37020                                  ;	AL = 07 set in_use of a drive's CDS
 37021                                  ;	     DL = drive number, 0=default  0=A,,
 37022                                  ;	AL = 08 reset in_use of a drive's CDS
 37023                                  ;	     DL = drive number, 0=A, 1=B,,,
 37024                                  ; Function:
 37025                                  ;	Do macro stuff
 37026                                  ; Returns:
 37027                                  ;	Std Xenix style error return
 37028                                  ;----------------------------------------------------------------------------
 37029                                  
 37030                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37031                                  	; 21/05/2019 - Retro DOS v4.0
 37032                                  _$AssignOper:
 37033                                  	; MSDOS 6.0
 37034 00006996 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37035 00006998 7525                    	JNZ	short chk08		      ; no			;AN000;
 37036                                  srinuse:								;AN000;
 37037 0000699A 50                      	PUSH	AX			      ; save al 		;AN000;
 37038 0000699B 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37039 0000699D E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37040 000069A0 58                      	POP	AX			      ; 			;AN000;
 37041 000069A1 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37042                                  	;cmp	word [si+45h],0
 37043 000069A3 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37044 000069A7 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37045 000069A9 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37046 000069AB 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37047                                  	;or	word [si+43h],4000h
 37048                                  	; 17/12/2022
 37049                                  	;or	byte [si+44h],40h
 37050 000069AD 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37051                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37052 000069B1 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37053                                  resetdrv:
 37054                                  	;and	word [si+43h],0BFFFh									;AN000;
 37055                                  	; 18/12/2022
 37056 000069B3 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37057                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37058 000069B7 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37059                                  
 37060                                  	; 17/12/2022
 37061                                  baddrv: 								;AN000;
 37062 000069B9 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37063                                  
 37064                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37065                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37066                                  	; 17/12/2022
 37067                                  	; 21/05/2019
 37068                                  ASS_ERR:
 37069 000069BC E9859C                  	jmp	SYS_RET_ERR
 37070                                  
 37071                                  chk08:									;AN000;
 37072 000069BF 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37073 000069C1 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37074                                  
 37075                                    ;IF	NOT INSTALLED
 37076                                  	;transfer NET_ASSOPER
 37077                                    ;ELSE
 37078                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37079 000069C3 50                      	PUSH	AX
 37080                                  	;mov	ax,111Eh
 37081                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37082 000069C4 B81E11                  	mov	ax,(MultNET*256)+30
 37083 000069C7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37084                                  			; SS = DOS CS
 37085                                  			; STACK: WORD function to execute
 37086                                  			; Return: CF set on error, AX = error code
 37087                                  			; STACK unchanged
 37088 000069C9 5B                      	POP	BX			; Don't zap error code in AX
 37089 000069CA 72F0                    	JC	short ASS_ERR
 37090                                  okdone:
 37091 000069CC E96C9C                  	jmp	SYS_RET_OK
 37092                                  
 37093                                  	; 17/12/2022
 37094                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37095                                  ;ASS_ERR:
 37096                                  	;jmp	SYS_RET_ERR
 37097                                  
 37098                                    ;ENDIF
 37099                                  
 37100                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37101                                  ;----------------------------------------------------------------------------
 37102                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37103                                  ;
 37104                                  ;	ENTRY	AL has drive number A = 0
 37105                                  ;	EXIT	'C' set
 37106                                  ;		    No DPB for this drive number
 37107                                  ;		'C' clear
 37108                                  ;		    DS:SI points to DPB for drive
 37109                                  ;	USES	SI, DS, Flags
 37110                                  ;----------------------------------------------------------------------------
 37111                                  
 37112                                  	; 21/05/2019 - Retro DOS v4.0
 37113                                  FIND_DPB:
 37114 000069CF 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37115                                  fdpb5:	
 37116 000069D4 83FEFF                  	CMP	SI,-1
 37117 000069D7 7409                    	JZ	short fdpb10
 37118 000069D9 3A04                    	cmp	al,[si]
 37119                                  	;CMP	AL,[SI+DPB.DRIVE]
 37120 000069DB 7406                    	jz	short ret_label15	; Carry clear (retz)
 37121                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37122                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37123 000069DD C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37124 000069E0 EBF2                    	JMP	short fdpb5
 37125                                  fdpb10:	
 37126 000069E2 F9                      	STC
 37127                                  ret_label15:
 37128 000069E3 C3                      	retn
 37129                                  
 37130                                  ;	Break <InitCDS - set up an empty CDS>
 37131                                  ;----------------------------------------------------------------------------
 37132                                  ;**	InitCDS - Setup an Empty CDS
 37133                                  ;
 37134                                  ;	ENTRY	ThisCDS points to CDS
 37135                                  ;		AL has uppercase drive letter
 37136                                  ;	EXIT	ThisCDS is now empty
 37137                                  ;		(ES:DI) = CDS
 37138                                  ;		'C' set if no DPB associated with drive
 37139                                  ;	USES	AH,ES,DI, Flags
 37140                                  ;----------------------------------------------------------------------------
 37141                                  
 37142                                  ; 21/05/2019 - Retro DOS v4.0
 37143                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37144                                  
 37145                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37146                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37147                                  
 37148                                  InitCDS:
 37149                                  	; 19/08/2018
 37150                                  	; 05/08/2018 - Retro DOS v3.0
 37151                                  	; MSDOS 6.0
 37152 000069E4 50                      	push	ax			; save (AL) for caller
 37153 000069E5 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37154                                  	;mov	word [es:di+67],0
 37155 000069EA 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37156 000069F0 2C40                    	SUB	AL,"A"-1                ; A = 1
 37157 000069F2 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37158 000069F7 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37159 000069F9 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37160 000069FA 50                      	PUSH	AX			; save drive number for later
 37161 000069FB 0441                    	add	al,"A"
 37162 000069FD B43A                    	MOV	AH,':'
 37163 000069FF 268905                  	mov	[ES:DI],ax
 37164                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37165                                  	;mov	ax,"\"
 37166                                  	;mov	[es:di+2],ax
 37167                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37168 00006A02 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37169                                  	;or	word [es:di+67],4000h
 37170                                  	;or	byte [es:di+68],40h
 37171 00006A08 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37172 00006A0D 29C0                    	sub	ax,ax
 37173                                  	;MOV	[es:di+73],ax ; 0
 37174 00006A0F 26894549                	MOV	[ES:DI+curdir.ID],ax
 37175                                  	;mov	[es:di+75],ax ; 0
 37176 00006A13 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37177 00006A17 B002                    	mov	al,2
 37178                                  	;mov	[es:di+79],aX ; 2
 37179 00006A19 2689454F                	MOV	[ES:DI+curdir.end],ax
 37180 00006A1D 58                      	POP	AX			; (al) = drive number
 37181 00006A1E 1E                      	push	ds
 37182 00006A1F 56                      	push	si
 37183 00006A20 E8ACFF                  	call	FIND_DPB
 37184 00006A23 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37185                                  	;mov	[es:di+69],si
 37186 00006A25 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37187                                  	;mov	[es:di+71],ds
 37188 00006A29 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37189                                  icds5:	
 37190 00006A2D 5E                      	pop	si
 37191 00006A2E 1F                      	pop	ds
 37192                                  icdsx:	
 37193 00006A2F 58                      	pop	ax
 37194                                  RET45:
 37195 00006A30 C3                      	retn
 37196                                  
 37197                                  ;Break <$UserOper - get/set current user ID (for net)>
 37198                                  ;----------------------------------------------------------------------------
 37199                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37200                                  ;	maintain this string and do no verifications.
 37201                                  ;
 37202                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37203                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37204                                  ;		DS:DX is user string pointer (calls 1,2)
 37205                                  ;		ES:DI is user buffer (call 3)
 37206                                  ;		BX is assign index (calls 2,3,4,5)
 37207                                  ;		CX is user number (call 1)
 37208                                  ;		DX is flag word (call 4)
 37209                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37210                                  ;			and user CX is set to the user number
 37211                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37212                                  ;		If AL = 5 then DX is flag word
 37213                                  ;----------------------------------------------------------------------------
 37214                                  
 37215                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37216                                  	; 21/05/2019 - Retro DOS v4.0
 37217                                  _$UserOper:
 37218                                  	; 05/08/2018 - Retro DOS v3.0
 37219                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37220 00006A31 50                      	PUSH	AX
 37221 00006A32 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37222 00006A34 58                      	POP	AX
 37223 00006A35 7211                    	JB	short UserGet 		; return to user the string
 37224 00006A37 742E                    	JZ	short UserSet 		; set the current user
 37225 00006A39 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37226 00006A3B 763D                    	JBE	short UserPrint		; yep
 37227                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37228 00006A3D 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37229                                  					; Extended Error Locus
 37230                                  	;error	error_invalid_function	; not 0,1,2,3
 37231                                  	;mov	al,1
 37232 00006A43 B001                    	MOV	AL,error_invalid_function
 37233                                  useroper_error:
 37234                                  	; 17/12/2022
 37235                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37236 00006A45 E9FC9B                  	JMP	SYS_RET_ERR
 37237                                  	;jmp	short ASS_ERR
 37238                                  
 37239                                  UserGet:
 37240                                  ; Transfer MYNAME to DS:DX
 37241                                  ; Set Return CX to MYNUM
 37242 00006A48 1E                      	PUSH	DS			; switch registers
 37243 00006A49 07                      	POP	ES
 37244 00006A4A 89D7                    	MOV	DI,DX			; destination
 37245 00006A4C 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37246 00006A51 E8319A                  	call	Get_User_Stack
 37247                                  	;mov	[si+4],cx
 37248 00006A54 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37249 00006A57 16                      	push	ss			; point to DOSDATA
 37250 00006A58 1F                      	pop	ds
 37251 00006A59 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37252                                  UserMove:
 37253 00006A5C B90F00                  	MOV	CX,15
 37254 00006A5F F3A4                    	REP	MOVSB			; blam.
 37255 00006A61 31C0                    	XOR	AX,AX			; 16th byte is 0
 37256 00006A63 AA                      	STOSB
 37257                                  UserBye:
 37258 00006A64 E9D49B                  	jmp	SYS_RET_OK		; no errors here
 37259                                  
 37260                                  UserSet:
 37261                                  ; Transfer DS:DX to MYNAME
 37262                                  ; CX to MYNUM
 37263 00006A67 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37264 00006A6C 89D6                    	MOV	SI,DX			; user space has source
 37265 00006A6E 16                      	push	ss
 37266 00006A6F 07                      	pop	es
 37267 00006A70 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37268 00006A73 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37269 00006A78 EBE2                    	JMP	short UserMove
 37270                                  
 37271                                  UserPrint:
 37272                                  
 37273                                    ;IF NOT Installed
 37274                                    ;	transfer PRINTER_GETSET_STRING
 37275                                    ;ELSE
 37276 00006A7A 50                      	PUSH	AX
 37277                                  	;mov	ax,111Fh
 37278                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37279 00006A7B B81F11                  	mov	ax,(MultNET<<8)|31
 37280 00006A7E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37281                                  			; STACK: WORD function
 37282                                  			; Return: CF set on error, AX = error code
 37283                                  			; STACK unchanged
 37284 00006A80 5A                      	POP	DX			; Clean stack
 37285                                  	;JNC	short OKPA
 37286 00006A81 73E1                    	jnc	short UserBye ; 21/05/2019
 37287                                  	; 17/12/2022
 37288 00006A83 EBC0                    	jmp	short useroper_error
 37289                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37290                                  	;jnb     short OKPA
 37291                                  	;jmp     short useroper_error
 37292                                  
 37293                                  	; 17/12/2022
 37294                                  ;OKPA:
 37295                                  ;	jmp	short UserBye
 37296                                  
 37297                                    ;ENDIF
 37298                                  
 37299                                  
 37300                                  ;Break	<GetVisDrv - return visible drive>
 37301                                  ;----------------------------------------------------------------------------
 37302                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37303                                  ;
 37304                                  ;   Inputs:	AL has drive identifier (0=default)
 37305                                  ;   Outputs:	Carry Set - invalid drive/macro
 37306                                  ;		Carry Clear - AL has physical drive (0=A)
 37307                                  ;		    ThisCDS points to CDS
 37308                                  ;   Registers modified: AL
 37309                                  ;----------------------------------------------------------------------------
 37310                                  
 37311                                  	; 21/05/2019 - Retro DOS v4.0
 37312                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37313                                  
 37314                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37315                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37316                                  GetVisDrv:
 37317                                  	; 05/08/2018 - Retro DOS v3.0
 37318                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37319 00006A85 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37320 00006A88 72A6                    	jc	short RET45
 37321 00006A8A 1E                      	push	ds
 37322 00006A8B 56                      	push	si
 37323 00006A8C 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37324                                  	;test	word [si+67],2000h
 37325                                  	; 17/12/2022
 37326                                  	;test	byte [si+68],20h
 37327 00006A91 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37328                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37329 00006A95 5E                      	pop	si
 37330 00006A96 1F                      	pop	ds
 37331 00006A97 7497                    	jz	short RET45		; if not spliced, return OK
 37332                                  	; MSDOS 6.0
 37333                                  	;mov	byte [ss:DrvErr],0Fh
 37334 00006A99 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37335 00006A9F F9                      	STC				; signal error
 37336 00006AA0 C3                      	retn
 37337                                  
 37338                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37339                                  ;----------------------------------------------------------------------------
 37340                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37341                                  ;	macro pointer
 37342                                  ;
 37343                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37344                                  ;   Outputs:
 37345                                  ;		Carry Set - invalid drive/macro
 37346                                  ;		Carry Clear - AL has physical drive (0=A)
 37347                                  ;		   ThisCDS points to macro
 37348                                  ;   Registers modified: AL
 37349                                  ;----------------------------------------------------------------------------
 37350                                  
 37351                                  	; 21/05/2019 - Retro DOS v4.0
 37352                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37353                                  
 37354                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37355                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37356                                  GETTHISDRV:
 37357                                  	; 05/08/2018
 37358                                  	; 12/07/2018 - Retro DOS v3.0
 37359                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37360                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37361 00006AA1 08C0                    	OR	AL,AL			; are we using default drive?
 37362 00006AA3 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37363 00006AA5 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37364                                  	;INC	ax			; Counteract next instruction
 37365                                  	; 04/09/2018
 37366                                  	;inc	al
 37367                                  	; 07/12/2022
 37368 00006AA9 40                      	inc	ax
 37369                                  GTD10:	
 37370                                  	;DEC	AX
 37371                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37372 00006AAA 48                      	dec	ax			; 0 = A
 37373                                  	;dec	al
 37374 00006AAB 1E                      	PUSH	DS			; save world
 37375 00006AAC 56                      	PUSH	SI
 37376                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37377 00006AAD 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37378 00006AB3 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37379 00006AB9 7420                    	JZ	SHORT GTD20		; Logical
 37380 00006ABB 50                      	PUSH	AX
 37381 00006ABC 06                      	PUSH	ES
 37382 00006ABD 57                      	PUSH	DI
 37383 00006ABE 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37384                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37385 00006AC5 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37386 00006ACA 0441                    	ADD	AL,'A'
 37387 00006ACC E815FF                  	CALL	InitCDS			; InitCDS(c);
 37388                                  	;test	word [es:di+67],4000h
 37389                                  	; 17/12/2022
 37390                                  	;test	byte [es:di+68],40h
 37391 00006ACF 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37392                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37393 00006AD4 5F                      	POP	DI
 37394 00006AD5 07                      	POP	ES
 37395 00006AD6 58                      	POP	AX
 37396 00006AD7 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37397 00006AD9 EB18                    	JMP	SHORT GTDX		; carry clear
 37398                                  GTD20:
 37399 00006ADB E81800                  	CALL	GetCDSFromDrv
 37400 00006ADE 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37401                                  	;test	word [si+43h],4000h
 37402                                  	; 17/12/2022
 37403                                  	;test	byte [si+44h],40h
 37404 00006AE0 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37405                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37406 00006AE4 750D                    	JNZ	SHORT GTDX		; carry clear
 37407                                  GTD30:	
 37408                                  	; 21/05/2019
 37409                                  	; MSDOS 6.0
 37410 00006AE6 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37411 00006AE8 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37412                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37413 00006AEC 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37414 00006AF2 F9                      	STC
 37415                                  GTDX:	
 37416 00006AF3 5E                      	POP	SI			; restore world
 37417 00006AF4 1F                      	POP	DS
 37418 00006AF5 C3                      	RETN
 37419                                   
 37420                                  
 37421                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37422                                  ;----------------------------------------------------------------------------
 37423                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37424                                  ;	pointer, returning an error if the drive number is greater than the
 37425                                  ;	number of CDS's
 37426                                  ;
 37427                                  ;   Inputs:	AL is physical unit # A=0...
 37428                                  ;   Outputs:	Carry Set if Bad Drive
 37429                                  ;		Carry Clear
 37430                                  ;		    DS:SI -> CDS
 37431                                  ;		    [THISCDS] = DS:SI
 37432                                  ;   Registers modified: DS,SI
 37433                                  ;----------------------------------------------------------------------------
 37434                                  
 37435                                  	; 21/05/2019 - Retro DOS v4.0
 37436                                  GetCDSFromDrv:
 37437 00006AF6 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37438                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37439                                  	;STC				; signal error
 37440                                  	;RETN				; bye
 37441                                  	; 23/09/2023
 37442 00006AFB F5                      	cmc	; cf=1 <-> cf=0
 37443 00006AFC 7217                    	jc	short GetCDS_retn
 37444                                  GetCDS:
 37445                                  	; 23/09/2023
 37446                                  	;PUSH	BX
 37447 00006AFE 50                      	PUSH	AX
 37448 00006AFF 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37449                                  	;mov	bl,81 ; MSDOS 3.3
 37450                                  	;mov	bl,88 ; MSDOS 6.0 
 37451                                  	; 23/09/2023
 37452                                  	;MOV	BL,curdir.size		; size in convenient spot
 37453                                  	;MUL	BL			; get net offset
 37454 00006B04 B458                    	mov	ah,curdir.size
 37455 00006B06 F6E4                    	mul	ah
 37456 00006B08 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 37457 00006B0A 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37458 00006B0F 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37459 00006B14 58                      	POP	AX
 37460                                  	; 23/09/2023
 37461                                  	;POP	BX
 37462                                  	; (cf must be 0 here) ; *
 37463                                  	;CLC				; no error
 37464                                  GetCDS_retn:
 37465 00006B15 C3                      	RETN				; bye!
 37466                                  
 37467                                  ;============================================================================
 37468                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37469                                  ;============================================================================
 37470                                  ; Retro	DOS v3.0 - 12/07/2018
 37471                                  ; 22/05/2019 - Retro DOS v4.0
 37472                                  
 37473                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37474                                  ;----------------------------------------------------------------------------
 37475                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37476                                  ;       gritty substitution.
 37477                                  ;
 37478                                  ;   Inputs:     DS:DX - pointer to FCB
 37479                                  ;               ES:DI - point to destination
 37480                                  ;   Outputs:    Carry Set - invalid path in final map
 37481                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37482                                  ;                   Sattrib is set from possibly extended FCB
 37483                                  ;                   ExtFCB set if extended FCB found
 37484                                  ;   Registers modified: most
 37485                                  ;----------------------------------------------------------------------------
 37486                                  
 37487                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37488                                  TransFCB:
 37489                                  	; 22/05/2019 - Retro DOS v4.0
 37490                                  	; 12/07/2018 - Retro DOS v3.0
 37491                                  	;LocalVar FCBTmp,16
 37492                                  	;ENTER
 37493 00006B16 55                      	push	bp
 37494 00006B17 89E5                    	mov	bp,sp
 37495                                  	;sub	sp,15	; MSDOS 3.3
 37496 00006B19 83EC10                  	sub	sp,16	; MSDOS 6.0
 37497 00006B1C 16                      	push	ss
 37498 00006B1D 07                      	pop	es
 37499 00006B1E 06                      	push	es
 37500 00006B1F 57                      	push	di
 37501                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37502                                  	;LEA	DI,FCBTmp 
 37503 00006B20 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37504 00006B23 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37505 00006B29 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37506 00006B2F E837B1                  	call	GetExtended             ; get FCB, extended or not
 37507                                  	; 06/12/2022
 37508 00006B32 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37509 00006B34 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37510 00006B37 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37511 00006B3B 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37512                                  GetDrive:
 37513 00006B41 AC                      	lodsb				; get drive byte
 37514 00006B42 E85CFF                  	call	GETTHISDRV
 37515 00006B45 722A                    	jc	short BadPack
 37516 00006B47 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 37517                                  
 37518                                  ; Scan the source to see if there are any illegal chars
 37519                                  
 37520                                  	;mov	bx,CharType		; load lookup table
 37521 00006B4A B90B00                  	mov	cx,11
 37522 00006B4D 56                      	push	si			; back over name, ext
 37523                                  FCBScan:
 37524 00006B4E AC                      	lodsb				; get a byte
 37525                                  	
 37526                                  	; 09/08/2018
 37527                                  	;;xlat	byte [es:bx]
 37528                                  	;es	xlat
 37529                                  
 37530                                  	; 22/05/2019 - Retro DOS v4.0	
 37531 00006B4F E836E5                  	call	GetCharType		; get flags
 37532                                  
 37533                                  	;test	al,8	
 37534 00006B52 A808                    	test	al,FFCB
 37535 00006B54 741B                    	jz	short BadPack
 37536                                  NextCh: 
 37537 00006B56 E2F6                    	loop	FCBScan
 37538 00006B58 5E                      	pop	si
 37539 00006B59 89FB                    	mov	bx,di
 37540 00006B5B E864B5                  	call	PackName                ; crunch the path
 37541 00006B5E 5F                      	pop	di			; get original destination
 37542 00006B5F 07                      	pop	es
 37543 00006B60 16                      	push	ss			; get DS addressability
 37544 00006B61 1F                      	pop	ds
 37545                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37546                                  	;LEA	SI,FCBTmp		; point at new pathname
 37547 00006B62 8D76F0                  	lea	si,[bp-16]
 37548 00006B65 803F00                  	cmp	byte [bx],0
 37549 00006B68 7407                    	jz	short BadPack
 37550 00006B6A 55                      	push	bp
 37551 00006B6B E80E00                  	call	TransPathSet            ; convert the path
 37552 00006B6E 5D                      	pop	bp
 37553 00006B6F 7303                    	jnc	short FCBRet		; bye with transPath error code
 37554                                  BadPack:
 37555 00006B71 F9                      	STC
 37556                                  	;mov	al,3
 37557 00006B72 B003                    	MOV     AL,error_path_not_found
 37558                                  FCBRet: 
 37559                                  	;LEAVE
 37560 00006B74 89EC                    	mov	sp,bp
 37561 00006B76 5D                      	pop	bp
 37562                                  TransPath_retn:
 37563 00006B77 C3                      	retn
 37564                                  
 37565                                  ; 12/07/2018 - Retro DOS v3.0
 37566                                  
 37567                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37568                                  ;----------------------------------------------------------------------------
 37569                                  ;
 37570                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37571                                  ;       substitution, insertion of current directory and fixing . and ..
 37572                                  ;       entries. Perform splicing. Allow input string to match splice
 37573                                  ;       exactly.
 37574                                  ;
 37575                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37576                                  ;       matches splice.
 37577                                  ;
 37578                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37579                                  ;
 37580                                  ;   The following anomalous behaviour is required:
 37581                                  ;
 37582                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37583                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37584                                  ;       Raw net I/O sets ThisCDS => NULL.
 37585                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37586                                  ;
 37587                                  ;   Other behaviour:
 37588                                  ;
 37589                                  ;       ThisCDS set up.
 37590                                  ;       FatRead done on local CDS.
 37591                                  ;       ValidateCDS done on local CDS.
 37592                                  ;
 37593                                  ;   Brief flowchart:
 37594                                  ;
 37595                                  ;       if fSharing then
 37596                                  ;           set up DummyCDS (ThisCDS)
 37597                                  ;           canonicalize (sets cMeta)
 37598                                  ;           splice
 37599                                  ;           fatRead
 37600                                  ;           return
 37601                                  ;       if \\ or d:\\ lead then
 37602                                  ;           set up null CDS (ThisCDS)
 37603                                  ;           canonicalize (sets cMeta)
 37604                                  ;           return
 37605                                  ;       if device then
 37606                                  ;           set up dummyCDS (ThisCDS)
 37607                                  ;           canonicalize (sets cMeta)
 37608                                  ;           return
 37609                                  ;       if file then
 37610                                  ;           getCDS (sets (ThisCDS) from name)
 37611                                  ;           validateCDS (may reset current dir)
 37612                                  ;           Copy current dir
 37613                                  ;           canonicalize (set cMeta)
 37614                                  ;           splice
 37615                                  ;           generate correct CDS (ThisCDS)
 37616                                  ;           if local then
 37617                                  ;               fatread
 37618                                  ;           return
 37619                                  ;
 37620                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37621                                  ;               DI - point to buffer in DOSDATA
 37622                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37623                                  ;                   syntax, etc. or user FAILed to I 24.
 37624                                  ;               WFP_Start - points to beginning of buffer
 37625                                  ;               Curr_Dir_End - points to end of current dir in path
 37626                                  ;               DS - DOSDATA
 37627                                  ;   Registers modified: most
 37628                                  ;
 37629                                  ;----------------------------------------------------------------------------
 37630                                  
 37631                                  ; 22/05/2019
 37632                                  ; 13/05/2019 - Retro DOS v4.0
 37633                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37634                                  
 37635                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37636                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37637                                  
 37638                                  TransPath:
 37639 00006B78 30C0                    	XOR     AL,AL
 37640 00006B7A EB02                    	JMP     SHORT SetSplice
 37641                                  TransPathSet:
 37642 00006B7C B0FF                    	MOV     AL,-1
 37643                                  SetSplice:
 37644 00006B7E 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37645 00006B82 B0FF                    	MOV     AL,-1
 37646                                  TransPathNoSet:
 37647 00006B84 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37648 00006B88 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37649 00006B8E 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37650 00006B93 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37651 00006B9A 16                      	push	ss
 37652 00006B9B 07                      	pop	es
 37653                                  	;lea	bp,[di+134]
 37654 00006B9C 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37655                                  ;
 37656                                  ; if this is through the server dos call, fsharing is set. We set up a
 37657                                  ; dummy cds and let the operation go.
 37658                                  ;
 37659 00006BA0 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37660 00006BA6 7435                    	JZ	short CheckUNC		; skip to UNC check
 37661                                  ;
 37662                                  ; ES:DI point to buffer
 37663                                  ;
 37664 00006BA8 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37665 00006BAB E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37666 00006BAE 722A                    	jc	short NoPath
 37667 00006BB0 E80A03                  	CALL	TextFromDrive		; drop in new
 37668 00006BB3 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37669 00006BB6 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37670 00006BB9 72BC                    	jc	short TransPath_retn	; errors
 37671                                  ;
 37672                                  ; Perform splices for net guys.
 37673                                  ;
 37674 00006BBB 16                      	push	ss
 37675 00006BBC 1F                      	pop	ds
 37676 00006BBD 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37677 00006BC1 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37678 00006BC6 7403                    	JZ	short NoServerSplice
 37679 00006BC8 E83102                  	CALL    Splice
 37680                                  NoServerSplice:
 37681 00006BCB 16                      	push	ss
 37682 00006BCC 1F                      	pop	ds                      ; for FATREAD
 37683 00006BCD C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37684 00006BD1 E83EA7                  	call	ECritDisk
 37685 00006BD4 E807EB                  	call	FATREAD_CDS
 37686 00006BD7 E853A7                  	call	LCritDisk
 37687                                  NoPath:
 37688                                  	;mov	al,3
 37689 00006BDA B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37690 00006BDC C3                      	retn				; any errors are in Carry flag
 37691                                  
 37692                                  ; Let the network decide if the name is for a spooled device. It will map
 37693                                  ; the name if so.
 37694                                  
 37695                                  CheckUNC:
 37696 00006BDD 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37697                                  	;CallInstall NetSpoolCheck,MultNET,35
 37698 00006BE4 B82311                  	mov	ax,1123h
 37699 00006BE7 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37700                                  			; DS:SI -> ASCIZ filename to canonicalize
 37701                                  			; ES:DI -> 128-byte buffer for qualified name
 37702                                  			; Return: CF set if not resolved
 37703 00006BE9 7329                    	JNC	short UNCDone
 37704                                  
 37705                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37706                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37707                                  ; input, then the name has been changed to the remote spooler by the above net
 37708                                  ; call. Also, there may be a drive in front of the \\.
 37709                                  
 37710                                  NO_CHECK:
 37711 00006BEB E8B902                  	CALL    DriveFromText		; eat drive letter
 37712 00006BEE 50                      	PUSH    AX                      ; save it
 37713 00006BEF 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37714 00006BF1 E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 37715 00006BF4 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37716 00006BF6 E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 37717 00006BF9 751F                    	JNZ	short CheckDevice	; not a path char
 37718 00006BFB 38C4                    	CMP     AH,AL                   ; are they same?
 37719 00006BFD 751B                    	JNZ	short CheckDevice	; nope
 37720                                  
 37721                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37722                                  ; local machine root path
 37723                                  
 37724 00006BFF 58                      	POP     AX
 37725 00006C00 A5                      	MOVSW                           ; get the lead \\.
 37726                                  UNCCpy:
 37727 00006C01 AC                      	LODSB                           ; get a byte
 37728 00006C02 E84BE4                   	call	UCase                   ;AN000;; convert the char
 37729 00006C05 08C0                    	OR      AL,AL
 37730 00006C07 740E                    	JZ	short UNCTerm		; end of string. All done.
 37731 00006C09 E899E4                  	call    PATHCHRCMP              ; is it a path char?
 37732 00006C0C 89FB                    	MOV     BX,DI                   ; backup position
 37733 00006C0E AA                      	STOSB
 37734 00006C0F 75F0                    	JNZ	short UNCCpy		; no, go copy
 37735 00006C11 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37736                                  UNCDone:
 37737 00006C14 16                      	push	ss
 37738 00006C15 1F                      	pop	ds
 37739 00006C16 C3                       	retn				; return error code
 37740                                  UNCTerm:
 37741 00006C17 AA                      	STOSB                           ;AN000;
 37742 00006C18 EBFA                    	JMP	short UNCDone		;AN000;
 37743                                  
 37744                                  CheckDevice:
 37745                                  
 37746                                  ; Check DS:SI for device. First eat any path stuff
 37747                                  
 37748 00006C1A 58                      	POP     AX                      ; retrieve drive info
 37749 00006C1B 803C00                  	CMP     BYTE [SI],0		; check for null file
 37750 00006C1E 7504                    	JNZ	short CheckPath
 37751                                  	;mov	al,2 
 37752 00006C20 B002                    	MOV     AL,error_file_not_found ; bad file error
 37753 00006C22 F9                      	STC                             ; signal error on null input
 37754 00006C23 C3                      	RETN				; bye!
 37755                                  CheckPath:
 37756 00006C24 50                      	push	ax
 37757 00006C25 55                      	push	bp			; save drive number
 37758                                  
 37759                                  
 37760                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37761                                  %if 0
 37762                                  	; MSDOS 6.0
 37763                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37764                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37765                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37766                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37767                                  ;;;end up having a 5D in the opcode's displacement field. The
 37768                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37769                                  ;;;
 37770                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37771                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37772                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37773                                  ;;;
 37774                                  ;;;More info:
 37775                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37776                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37777                                  ;;;
 37778                                  	call	no5Dshere
 37779                                  start5Dhack:
 37780                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37781                                  backfrom5Dhack:
 37782                                  
 37783                                  %endif
 37784                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37785                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37786 00006C26 E8FED6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37787                                  
 37788 00006C29 5D                      	pop	bp
 37789 00006C2A 58                      	pop	ax			; get drive letter back
 37790 00006C2B 731C                    	JNC	short DoFile		; yes we have a file.
 37791                                  
 37792                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37793                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37794                                  ; call.
 37795                                  
 37796 00006C2D 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37797 00006C33 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37798 00006C36 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37799                                  
 37800                                  ; Now that we have noted that we have a device, we put it into a form that
 37801                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37802                                  ; string. We relax this to state that if the d:\ is present then the path
 37803                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37804                                  ; a device.
 37805                                  
 37806 00006C3C E87E02                  	CALL    TextFromDrive
 37807 00006C3F B02F                    	MOV     AL,'/'                  ; path sep.
 37808 00006C41 AA                      	STOSB
 37809 00006C42 E893A5                  	call	StrCpy			; move remainder of string
 37810                                  
 37811 00006C45 F8                      	CLC                             ; everything OK.
 37812 00006C46 16                      	push	ss
 37813 00006C47 1F                      	pop	ds                      ; remainder of OK stuff
 37814                                  DoFile_retn:
 37815 00006C48 C3                      	retn
 37816                                  
 37817                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37818                                  %if 0
 37819                                  
 37820                                  no5Dshere:
 37821                                  	; 10/08/2018
 37822                                  	jmp	CheckThisDevice		; snoop for device
 37823                                  %endif
 37824                                  
 37825                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37826                                  
 37827                                  ; We have a file. Get the raw CDS.
 37828                                  
 37829                                  DoFile:
 37830                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37831                                  
 37832 00006C49 E839FE                  	call	GetVisDrv               ; get proper CDS
 37833                                  	;mov	al,3 
 37834 00006C4C B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37835 00006C4E 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37836                                  
 37837                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37838                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37839                                  ; Use the one that we are going to use (ES:DI).
 37840                                  
 37841                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37842 00006C50 1E                      	push	ds
 37843 00006C51 56                      	push	si
 37844 00006C52 06                      	push	es
 37845 00006C53 57                      	push	di
 37846 00006C54 E814D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 37847                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37848 00006C57 5F                      	pop	di
 37849 00006C58 07                      	pop	es
 37850 00006C59 5E                      	pop	si
 37851 00006C5A 1F                      	pop	ds
 37852                                  	;mov	al,3
 37853 00006C5B B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37854                                  	;retc				; someone failed an operation
 37855 00006C5D 72E9                    	jc	short DoFile_retn
 37856                                  
 37857                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37858                                  ; current directory. Copy it in.
 37859                                  
 37860 00006C5F 1E                      	push	ds
 37861 00006C60 56                      	push	si
 37862 00006C61 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37863 00006C66 89FB                    	MOV     BX,DI                   ; point to destination
 37864                                  	;add	bx,[si+79] ; MSDOS 6.0
 37865 00006C68 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37866                                  	;lea	bp,[di+134]
 37867 00006C6B 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37868                                  					;AN000;
 37869 00006C6F E875A5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37870 00006C72 4F                      	DEC     DI                      ; point to NUL byte
 37871                                  
 37872                                  ; Make sure that there is a path char at end.
 37873                                  
 37874 00006C73 B05C                    	MOV     AL,'\'
 37875 00006C75 263845FF                	CMP     [ES:DI-1],AL
 37876 00006C79 7401                    	JZ	short GetOrig
 37877 00006C7B AA                      	STOSB
 37878                                  
 37879                                  ; Now get original string.
 37880                                  
 37881                                  GetOrig:
 37882 00006C7C 4F                      	DEC     DI                      ; point to path char
 37883 00006C7D 5E                      	pop	si
 37884 00006C7E 1F                      	pop	ds
 37885                                  
 37886                                  ; BX points to the end of the root part of the CDS (at where a path char
 37887                                  ; should be). Now, we decide whether we use this root or extend it with the
 37888                                  ; current directory. See if the input string begins with a leading 
 37890 00006C7F E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37891 00006C82 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37892 00006C84 08C0                    	OR      AL,AL                   ; end of string?
 37893 00006C86 7410                    	JZ	short DoCanon		; yes, skip.
 37894                                  ;
 37895                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37896                                  ; to this root. Make sure that there is a path char there and advance the
 37897                                  ; source string over all leading \'s.
 37898                                  ;
 37899 00006C88 89DF                    	MOV     DI,BX                   ; back up to root point.
 37900                                  SkipPath:
 37901 00006C8A AC                      	LODSB
 37902 00006C8B E817E4                  	call    PATHCHRCMP
 37903 00006C8E 74FA                    	JZ	short SkipPath
 37904 00006C90 4E                      	DEC     SI
 37905 00006C91 08C0                    	OR      AL,AL
 37906 00006C93 7403                    	JZ	short DoCanon
 37907                                  
 37908                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37909                                  ; for yucks.
 37910                                  
 37911                                  PathAssure:
 37912 00006C95 B05C                    	MOV     AL,'\'	; 5Ch
 37913 00006C97 AA                      	STOSB
 37914                                  
 37915                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37916                                  ; BP is the max extent to advance DI
 37917                                  ; BX is the backup limit for ..
 37918                                  
 37919                                  DoCanon:
 37920 00006C98 E85200                  	CALL    Canonicalize            ; wham.
 37921                                  	;retc				; badly formatted path.
 37922 00006C9B 72AB                    	jc	short DoFile_retn
 37923                                  
 37924                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37925                                  ; to wfp_start and do string substitution. BP is still the max position in
 37926                                  ; buffer.
 37927                                  
 37928 00006C9D 16                      	push	ss
 37929 00006C9E 1F                      	pop	ds
 37930 00006C9F 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37931 00006CA3 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37932 00006CA7 E81B02                  	CALL    PathPref                ; is there a prefix?
 37933 00006CAA 7514                    	JNZ	short DoSplice		; no, do splice
 37934                                  
 37935                                  ; We have a match. Check to see if we ended in a path char.
 37936                                  
 37937 00006CAC 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37938 00006CAF E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37939 00006CB2 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37940                                  Pathline:                               ; 2/13/KK
 37941 00006CB4 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37942 00006CB8 7406                    	JZ	short DoSplice
 37943 00006CBA 47                      	INC     DI                      ; point to after current path char
 37944 00006CBB 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37945                                  
 37946                                  ; Splice the result.
 37947                                  
 37948                                  DoSplice:
 37949 00006CC0 16                      	push	ss
 37950 00006CC1 1F                      	pop	ds			; back to DOSDATA
 37951 00006CC2 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37952 00006CC6 31C9                    	XOR     CX,CX
 37953 00006CC8 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37954 00006CCD 7403                    	JZ	short SkipSplice
 37955 00006CCF E82A01                  	CALL    Splice                  ; replaces in place.
 37956                                  SkipSplice:
 37957                                  
 37958                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37959                                  ; device.
 37960                                  
 37961 00006CD2 16                      	push	ss
 37962 00006CD3 1F                      	pop	ds
 37963 00006CD4 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37964                                  	;test	word [es:di+67],8000h
 37965                                  	; 17/12/2022
 37966                                  	;test	byte [es:di+68],80h
 37967 00006CD8 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37968                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37969 00006CDD 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37970 00006CDF E30B                    	JCXZ    Done
 37971 00006CE1 E82EA6                  	call	ECritDisk
 37972 00006CE4 E8F7E9                  	call	FATREAD_CDS
 37973 00006CE7 E843A6                  	call	LCritDisk
 37974                                  	;mov	al, 3
 37975 00006CEA B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37976                                  Done:   
 37977 00006CEC C3                      	retn                         ; any errors in carry flag.
 37978                                  
 37979                                  ; 13/07/2018
 37980                                  
 37981                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37982                                  ;----------------------------------------------------------------------------
 37983                                  ;   Canonicalize - copy path removing . and .. entries.
 37984                                  ;
 37985                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37986                                  ;               ES:DI - point to buffer
 37987                                  ;               BX - backup limit (offset from ES) points to slash
 37988                                  ;               BP - end of buffer
 37989                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37990                                  ;                   syntax, etc.
 37991                                  ;               Carry Clear -
 37992                                  ;                   DS:DI - advanced to end of string
 37993                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37994                                  ;   Registers modified: AX CX DX (in addition to those above)
 37995                                  ;----------------------------------------------------------------------------
 37996                                  
 37997                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37998                                  
 37999                                  Canonicalize:
 38000                                  
 38001                                  ; We copy all leading path separators.
 38002                                  
 38003 00006CED AC                      	LODSB                           ;   while (PathChr (*s))
 38004 00006CEE E8B4E3                  	call    PATHCHRCMP
 38005 00006CF1 7507                    	JNZ	short CanonDec
 38006 00006CF3 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38007 00006CF5 7319                    	JAE	short CanonBad		;           goto error;
 38008 00006CF7 AA                      	STOSB
 38009 00006CF8 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38010                                  CanonDec:
 38011 00006CFA 4E                      	DEC     SI
 38012                                  
 38013                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38014                                  ; component (no leading path separators) and ES:DI being the destination
 38015                                  ; buffer.
 38016                                  
 38017                                  CanonLoop:
 38018                                  
 38019                                  ; If we are at the end of the source string, then we need to check to see that
 38020                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38021                                  ; Otherwise, do nothing
 38022                                  
 38023 00006CFB 31C0                    	XOR     AX,AX
 38024 00006CFD 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38025 00006CFF 751A                    	JNZ	short DoComponent
 38026 00006D01 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38027 00006D06 7505                    	JNZ	short DoTerminate
 38028 00006D08 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38029 00006D0A AA                      	STOSB
 38030 00006D0B 88E0                    	MOV     AL,AH
 38031                                  DoTerminate:
 38032 00006D0D AA                      	STOSB                           ;           *d++ = 0;
 38033 00006D0E F8                      	CLC                             ;           return (0);
 38034 00006D0F C3                      	retn
 38035                                  
 38036                                  CanonBad:
 38037 00006D10 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38038                                  	;mov	al,3
 38039 00006D13 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38040 00006D15 7402                    	JZ	short PathEnc		; path character encountered in string
 38041                                  	;mov	al,2
 38042 00006D17 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38043                                  PathEnc:
 38044 00006D19 F9                      	STC
 38045                                  CanonBad_retn:
 38046 00006D1A C3                      	retn
 38047                                  
 38048                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38049                                  ; it to 8.3
 38050                                  
 38051                                  DoComponent:                            ;           }
 38052 00006D1B E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38053 00006D1E 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38054                                  
 38055                                  ; We special case the . and .. cases.  These will be backed up.
 38056                                  
 38057                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38058 00006D20 26833D2E                	CMP	WORD [ES:DI],002Eh
 38059 00006D24 7408                    	JZ	short Skip1
 38060                                  	;CMP	WORD PTR ES:[DI],'..'
 38061 00006D26 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38062 00006D2B 750A                    	JNZ	short CanonNormal
 38063 00006D2D 4F                      	DEC     DI                      ;           d--;
 38064                                  Skip1:  
 38065 00006D2E E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38066                                  	;mov	al,3
 38067 00006D31 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38068 00006D33 72E5                    	jc	short CanonBad_retn
 38069 00006D35 EB02                    	JMP     short CanonPath         ;           }
 38070                                  
 38071                                  ; We have a normal path. Advance destination pointer over it.
 38072                                  
 38073                                  CanonNormal:                            ;       else
 38074 00006D37 01CF                    	ADD     DI,CX                   ;           d += ct;
 38075                                  
 38076                                  ; We have successfully copied a component. We are now pointing at a path
 38077                                  ; sep char or are pointing at a nul or are pointing at something else.
 38078                                  ; If we point at something else, then we have an error.
 38079                                  
 38080                                  CanonPath:
 38081 00006D39 E81600                  	CALL    PathSep
 38082 00006D3C 75D2                    	JNZ	short CanonBad		; something else...
 38083                                  
 38084                                  ; Copy the first path char we see.
 38085                                  
 38086 00006D3E AC                      	LODSB                           ; get the char
 38087 00006D3F E863E3                  	call    PATHCHRCMP              ; is it path char?
 38088 00006D42 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38089 00006D44 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38090 00006D46 73C8                    	JAE	short CanonBad		; yep, error.
 38091 00006D48 AA                      	STOSB                           ; copy the one byte
 38092                                  
 38093                                  ; Skip all remaining path chars
 38094                                  
 38095                                  CanonPathLoop:
 38096 00006D49 AC                      	LODSB                           ; get next byte
 38097 00006D4A E858E3                  	call    PATHCHRCMP              ; path char again?
 38098 00006D4D 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38099 00006D4F 4E                      	DEC     SI                      ; back up
 38100 00006D50 EBA9                    	JMP	short  CanonLoop	; go copy component
 38101                                  
 38102                                  ;BREAK <PathSep - determine if char is a path separator>
 38103                                  ;----------------------------------------------------------------------------
 38104                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38105                                  ;   Inputs:     DS:SI - point to a char
 38106                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38107                                  ;               Zero set if AL is / \ or NUL
 38108                                  ;               Zero reset otherwise
 38109                                  ;   Registers modified: AL
 38110                                  ;----------------------------------------------------------------------------
 38111                                  
 38112                                  PathSep:
 38113 00006D52 8A04                    	MOV     AL,[SI]                 ; get the character
 38114                                  PathSepGotCh:				; already have character
 38115 00006D54 08C0                    	OR      AL,AL                   ; test for zero
 38116 00006D56 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38117                                  	;call	PATHCHRCMP              ; check for path character
 38118                                  	;retn				; and return HIS determination
 38119                                  	; 18/12/2022
 38120 00006D58 E94AE3                  	jmp	PATHCHRCMP
 38121                                  
 38122                                  
 38123                                  ;BREAK <SkipBack - move backwards to a path separator>
 38124                                  ;----------------------------------------------------------------------------
 38125                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38127                                  ;               BX has current directory back up limit (point to a / \)
 38128                                  ;   Outputs:    ES:DI backed up to point to a path char
 38129                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38130                                  ;               Carry set if illegal backup
 38131                                  ;               Carry Clear if ok
 38132                                  ;   Registers modified: DI,AL
 38133                                  ;----------------------------------------------------------------------------
 38134                                  
 38135                                  SkipBack:
 38136 00006D5B 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38137 00006D5D 720B                    	JB	short SkipBad		;       if (d < dlim)
 38138 00006D5F 4F                      	DEC     DI                      ;           goto err;
 38139 00006D60 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38140 00006D63 E83FE3                  	call    PATHCHRCMP              ;           break;
 38141 00006D66 75F3                    	JNZ	short SkipBack		;       }
 38142 00006D68 F8                      	CLC                             ;   return (0);
 38143 00006D69 C3                      	retn				;
 38144                                  SkipBad:                                ;err:
 38145                                  	;mov	al,3
 38146 00006D6A B003                    	MOV     AL,error_path_not_found ; bad path error
 38147 00006D6C F9                      	STC                             ;   return (-1);
 38148 00006D6D C3                      	retn				;
 38149                                  
 38150                                  ;Break <CopyComponent - copy out a file path component>
 38151                                  ;----------------------------------------------------------------------------
 38152                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38153                                  ;
 38154                                  ;   Inputs:     DS:SI - source path
 38155                                  ;               ES:DI - destination
 38156                                  ;               ES:BP - end of buffer
 38157                                  ;   Outputs:    Carry Set - too long
 38158                                  ;               Carry Clear - DS:SI moved past component
 38159                                  ;                   CX has length of destination
 38160                                  ;   Registers modified: AX,CX,DX
 38161                                  ;----------------------------------------------------------------------------
 38162                                  
 38163                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38164                                  
 38165                                  CopyComponent:
 38166                                  
 38167                                  %define CopyBP	 [BP]		; word
 38168                                  %define CopyD	 [BP+2]		; dword
 38169                                  %define CopyDoff [BP+2]		; word
 38170                                  %define CopyS	 [BP+6]		; dword
 38171                                  %define CopySoff [BP+6]		; word
 38172                                  %define CopyTemp [BP+10]	; byte
 38173                                  
 38174 00006D6E 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38175 00006D71 1E                      	push	ds
 38176 00006D72 56                      	push	si
 38177 00006D73 06                      	push	es
 38178 00006D74 57                      	push	di
 38179 00006D75 55                      	push	bp
 38180 00006D76 89E5                    	MOV     BP,SP
 38181 00006D78 B42E                    	MOV     AH,'.'
 38182 00006D7A AC                      	LODSB
 38183 00006D7B AA                      	STOSB
 38184 00006D7C 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38185 00006D7E 7518                    	JNZ	short NormalComp
 38186 00006D80 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38187 00006D83 740B                    	JZ	short NulTerm
 38188                                  TryTwoDot:
 38189 00006D85 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38190 00006D86 AA                      	STOSB
 38191 00006D87 38E0                    	CMP     AL,AH
 38192 00006D89 7557                    	JNZ	short CopyBad
 38193 00006D8B E8C4FF                  	CALL    PathSep
 38194 00006D8E 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38195                                  NulTerm:                                ;               return -1;
 38196 00006D90 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38197 00006D92 AA                      	STOSB
 38198 00006D93 897606                  	MOV     CopySoff,SI
 38199 00006D96 EB47                    	JMP     SHORT _GoodRet		;       }
 38200                                  NormalComp:                             ;   else {
 38201 00006D98 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38202 00006D9B E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38203 00006D9E 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38204 00006DA1 743F                    	JZ	short CopyBad		;           return (-1);
 38205 00006DA3 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38206 00006DA9 7510                    	JNZ	short DoPack
 38207 00006DAB 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38208 00006DAE 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38209 00006DB3 7F2D                    	JG	short CopyBad		;               return (-1);
 38210 00006DB5 7504                    	JNZ	short DoPack		;           else
 38211 00006DB7 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38212 00006DB9 742F                    	JZ	short CopyBadPath	;               return (-1);
 38213                                  DoPack:                                 ;           }
 38214 00006DBB 897606                  	MOV     CopySoff,SI ; [bp+6]
 38215 00006DBE 16                      	push	ss
 38216 00006DBF 1F                      	pop	ds
 38217 00006DC0 BE[4B05]                	MOV     SI,NAME1
 38218 00006DC3 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38219 00006DC6 57                      	push	di
 38220 00006DC7 E8F8B2                  	call	PackName                ;       PackName (Name1, temp);
 38221 00006DCA 5F                      	pop	di
 38222 00006DCB E822A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38223 00006DCE 49                      	DEC     CX
 38224 00006DCF 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38225                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38226                                  	;cmp	cx,[bp+0]
 38227                                  	; 15/12/2022
 38228                                  	;cmp	cx,[bp]
 38229 00006DD2 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38230 00006DD5 730B                    	JAE	short CopyBad		;           return (-1);
 38231 00006DD7 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38232 00006DD9 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38233 00006DDC E808A4                  	call	FStrCpy
 38234                                  _GoodRet:				;       }
 38235 00006DDF F8                      	CLC
 38236 00006DE0 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38237                                  CopyBad:
 38238 00006DE2 F9                      	STC
 38239 00006DE3 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38240                                  	;mov	al,2
 38241 00006DE6 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38242 00006DE8 7503                    	JNZ	short CopyEnd
 38243                                  CopyBadPath:
 38244 00006DEA F9                      	STC
 38245                                  	;mov	al,3
 38246 00006DEB B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38247                                  CopyEnd:
 38248 00006DED 5D                      	pop	bp
 38249 00006DEE 5F                      	pop	di
 38250 00006DEF 07                      	pop	es
 38251 00006DF0 5E                      	pop	si
 38252 00006DF1 1F                      	pop	ds
 38253 00006DF2 9F                      	LAHF
 38254 00006DF3 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38255 00006DF6 E8F7A3                  	call	StrLen
 38256 00006DF9 49                      	DEC     CX
 38257 00006DFA 9E                      	SAHF
 38258 00006DFB C3                      	retn
 38259                                  
 38260                                  ; 14/05/2019 - Retro DOS v4.0
 38261                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38262                                  
 38263                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38264                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38265                                  
 38266                                  ;Break <Splice - pseudo mount by string substitution>
 38267                                  ;----------------------------------------------------------------------------
 38268                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38269                                  ;       ThisCDS to point to physical drive CDS.
 38270                                  ;   Inputs:     DS:SI point to string
 38271                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38272                                  ;   Outputs:    DS:SI points to thisCDS
 38273                                  ;               ES:DI points to DPB
 38274                                  ;               String at DS:SI may be reduced in length by removing prefix
 38275                                  ;               and substituting drive letter.
 38276                                  ;               CX = 0 If no splice done
 38277                                  ;               CX <> 0 otherwise
 38278                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38279                                  ;                   left alone
 38280                                  ;               ThisDPB points to proper DPB
 38281                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38282                                  ;----------------------------------------------------------------------------
 38283                                  
 38284                                  Splice:
 38285 00006DFC 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38286 00006E02 7469                    	JZ	short AllDone
 38287 00006E04 36FF36[A205]            	push	word [SS:THISCDS]
 38288 00006E09 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38289 00006E0E 1E                      	push	ds
 38290 00006E0F 56                      	push	si
 38291 00006E10 5F                      	pop	di
 38292 00006E11 07                      	pop	es
 38293 00006E12 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38294                                  SpliceScan:
 38295 00006E14 E8DFFC                  	call	GetCDSFromDrv
 38296 00006E17 724A                    	JC	short SpliceDone
 38297 00006E19 FEC0                    	INC     AL
 38298                                  	; 17/12/2022
 38299                                  	;test	byte [si+68],20h
 38300 00006E1B F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38301                                  	;;test	word [si+67],2000h
 38302                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38303 00006E1F 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38304 00006E21 57                      	push	di
 38305 00006E22 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38306 00006E25 7403                    	JZ	short SpliceFound	;
 38307                                  SpliceSkip:
 38308 00006E27 5F                      	pop	di
 38309 00006E28 EBEA                    	JMP	short SpliceScan	;               continue;
 38310                                  SpliceFound:
 38311 00006E2A 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38312 00006E2E 7508                    	JNZ	short SpliceDo
 38313 00006E30 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38314 00006E36 75EF                    	JNZ	short SpliceSkip
 38315                                  SpliceDo:
 38316 00006E38 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38317 00006E3A 06                      	push	es
 38318 00006E3B 1F                      	pop	ds
 38319 00006E3C 5F                      	pop	di
 38320 00006E3D E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38321 00006E40 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38322 00006E44 09C0                    	OR      AX,AX
 38323 00006E46 7808                    	JS	short NoPoke
 38324 00006E48 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38325 00006E4A 29F0                    	SUB     AX,SI
 38326 00006E4C 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38327                                  NoPoke:
 38328 00006E50 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38329 00006E53 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38330 00006E55 B05C                    	MOV     AL,"\"
 38331 00006E57 AA                      	STOSB
 38332                                  SpliceCopy:                             ;               strcpy (src, p);
 38333 00006E58 E88CA3                  	call	FStrCpy
 38334 00006E5B 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38335 00006E5E 80C901                  	OR      CL,1                    ; signal splice done.
 38336 00006E61 EB0C                    	JMP     SHORT DoSet             ;               return;
 38337                                  SpliceDone:                             ;               }
 38338 00006E63 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38339 00006E68 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38340                                  AllDone:
 38341 00006E6D 31C9                    	XOR     CX,CX
 38342                                  DoSet:
 38343 00006E6F 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38344                                  	;les	di,[si+69]
 38345 00006E74 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38346 00006E77 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38347 00006E7C 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38348                                  Splice_retn:
 38349 00006E81 C3                      	retn
 38350                                  
 38351                                  ; 15/05/2019 - Retro DOS v4.0
 38352                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38353                                  
 38354                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38355                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38356                                  
 38357                                  ;Break <$NameTrans - partially process a name>
 38358                                  ;----------------------------------------------------------------------------
 38359                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38360                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38361                                  ;   to Transpath playing games with devices, we need to insure that the output
 38362                                  ;   has drive letter and : in it.
 38363                                  ;
 38364                                  ;   Inputs:     DS:SI - source string for translation
 38365                                  ;               ES:DI - pointer to buffer
 38366                                  ;   Outputs:
 38367                                  ;       Carry Clear
 38368                                  ;               Buffer at ES:DI is filled in with data
 38369                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38370                                  ;       Carry Set
 38371                                  ;               AX = error_path_not_found
 38372                                  ;   Registers modified: all
 38373                                  ;----------------------------------------------------------------------------
 38374                                  
 38375                                  _$NameTrans:
 38376 00006E82 1E                      	push	ds
 38377 00006E83 56                      	push	si
 38378 00006E84 06                      	push	es
 38379 00006E85 57                      	push	di
 38380 00006E86 51                      	push	cx ; MSDOS 6.0
 38381                                  	
 38382                                  	; MSDOS 6.0	
 38383                                  ; M027 - Start
 38384                                  ;
 38385                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38386                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38387                                  ; device if the old call set the volume attribute bit. Note that devname in
 38388                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38389                                  ; and restore CX.
 38390                                  
 38391                                  	;mov	ch,16h
 38392 00006E87 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38393 00006E89 E8B902                  	call	SetAttrib
 38394                                  
 38395                                  ; M027 - End
 38396                                  
 38397                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38398 00006E8C BF[BE03]                	MOV     DI,OPENBUF
 38399 00006E8F E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38400 00006E92 59                      	pop	cx ; MSDOS 6.0
 38401 00006E93 5F                      	pop     di
 38402 00006E94 07                      	pop	es
 38403 00006E95 5E                      	pop     si
 38404 00006E96 1F                      	pop     ds
 38405 00006E97 7303                    	JNC	short TransOK
 38406 00006E99 E9A897                  	jmp	SYS_RET_ERR
 38407                                  TransOK:
 38408 00006E9C BE[BE03]                	MOV     SI,OPENBUF
 38409 00006E9F 16                      	push	ss
 38410 00006EA0 1F                      	pop	ds
 38411                                  ;GotText:
 38412 00006EA1 E843A3                  	call	FStrCpy
 38413 00006EA4 E99497                  	jmp	SYS_RET_OK
 38414                                  
 38415                                  ;Break   <DriveFromText - return drive number from a text string>
 38416                                  ;----------------------------------------------------------------------------
 38417                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38418                                  ;   pointer.
 38419                                  ;
 38420                                  ;   Inputs:     DS:SI point to a text string
 38421                                  ;   Outputs:    AL has drive number
 38422                                  ;               DS:SI advanced
 38423                                  ;   Registers modified: AX,SI.
 38424                                  ;----------------------------------------------------------------------------
 38425                                  
 38426                                  DriveFromText:
 38427 00006EA7 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38428                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38429                                  	; 23/09/2023
 38430 00006EA9 3804                    	cmp	[si],al ; 0
 38431 00006EAB 74D4                    	jz	short Splice_retn
 38432 00006EAD 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38433 00006EB1 75CE                    	jnz	short Splice_retn
 38434 00006EB3 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38435 00006EB4 0C20                    	OR      AL,20h
 38436                                  	;sub	al,60h
 38437 00006EB6 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38438 00006EB8 75C7                    	jnz	short Splice_retn
 38439 00006EBA B0FF                    	MOV	AL,-1                   ; nuke AL...
 38440                                  	; 23/09/2023
 38441                                  	;dec	al ; -1
 38442 00006EBC C3                      	retn				;           }
 38443                                  
 38444                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38445                                  ;----------------------------------------------------------------------------
 38446                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38447                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38448                                  ;
 38449                                  ;   Inputs:     AL has 0-based drive number
 38450                                  ;   Outputs:    ES:DI advanced
 38451                                  ;   Registers modified: AX
 38452                                  ;----------------------------------------------------------------------------
 38453                                  
 38454                                  TextFromDrive:
 38455 00006EBD FEC0                    	INC     AL
 38456                                  TextFromDrive1:
 38457                                  	;add	al,40h
 38458 00006EBF 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38459 00006EC1 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38460 00006EC3 AB                      	STOSW
 38461                                  PathPref_retn:
 38462 00006EC4 C3                      	retn
 38463                                  
 38464                                  ;Break   <PathPref - see if one path is a prefix of another>
 38465                                  ;----------------------------------------------------------------------------
 38466                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38467                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38468                                  ;   prefix: A:\ and A:\FOO
 38469                                  ;
 38470                                  ;   Inputs:     DS:SI potential prefix
 38471                                  ;               ES:DI string
 38472                                  ;   Outputs:    Zero set => prefix found
 38473                                  ;                   DI/SI advanced past matching part
 38474                                  ;               Zero reset => no prefix, DS/SI garbage
 38475                                  ;   Registers modified: CX
 38476                                  ;----------------------------------------------------------------------------
 38477                                  
 38478                                  PathPref:
 38479 00006EC5 E836A3                  	call	DStrLen                 ; get length
 38480 00006EC8 49                      	DEC     CX                      ; do not include nul byte
 38481 00006EC9 F3A6                    	REPZ    CMPSB                   ; compare
 38482 00006ECB 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38483 00006ECD 50                      	push	ax			; save char register
 38484 00006ECE 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38485 00006ED1 E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38486 00006ED4 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38487                                  NotSep:                                 ; 2/13/KK
 38488 00006ED6 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38489 00006ED9 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38490                                  Prefix:
 38491 00006EDC 58                      	pop	ax			; get back original
 38492 00006EDD C3                      	retn
 38493                                  
 38494                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38495                                  ;----------------------------------------------------------------------------
 38496                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38497                                  ;     a path separator.
 38498                                  ;
 38499                                  ;     Input:    DS:SI target string (null terminated)
 38500                                  ;     Output:   Zero set => path separator encountered in string
 38501                                  ;               Zero clear => null encountered
 38502                                  ;     Registers modified: SI
 38503                                  ;----------------------------------------------------------------------------
 38504                                  
 38505                                  ScanPathChar:
 38506 00006EDE AC                      	LODSB                           ; fetch a character
 38507 00006EDF E872FE                  	call    PathSepGotCh
 38508 00006EE2 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38509                                  	;call	PATHCHRCMP              ; path separator?
 38510                                  	;retn
 38511                                  	; 18/12/2022
 38512 00006EE4 E9BEE1                  	jmp	PATHCHRCMP
 38513                                  
 38514                                  ;============================================================================
 38515                                  ; FILE.ASM, MSDOS 6.0, 1991
 38516                                  ;============================================================================
 38517                                  ; 14/07/2018 - Retro DOS v3.0
 38518                                  
 38519                                  ; 13/05/2019 - Retro DOS v4.0
 38520                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38521                                  
 38522                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38523                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38524                                  
 38525                                  ; MSDOS 2.11
 38526                                  ;BREAK <$Open - open a file handle>
 38527                                  ;----------------------------------------------------------------------------
 38528                                  ;   Assembler usage:
 38529                                  ;           LDS     DX, Name
 38530                                  ;           MOV     AH, Open
 38531                                  ;           MOV     AL, access
 38532                                  ;           INT     int_command
 38533                                  ;
 38534                                  ;       ACCESS          Function
 38535                                  ;       ------          --------
 38536                                  ;       open_for_read   file is opened for reading
 38537                                  ;       open_for_write  file is opened for writing
 38538                                  ;       open_for_both   file is opened for both reading and writing.
 38539                                  ;
 38540                                  ;   Error returns:
 38541                                  ;           AX = error_invalid_access
 38542                                  ;              = error_file_not_found
 38543                                  ;              = error_access_denied
 38544                                  ;              = error_too_many_open_files
 38545                                  ;----------------------------------------------------------------------------
 38546                                  
 38547                                  ; MSDOS 6.0
 38548                                  ;	BREAK <$Open - open a file from a path string>
 38549                                  ;----------------------------------------------------------------------------
 38550                                  ;
 38551                                  ;**	$OPen - Open a File
 38552                                  ;
 38553                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38554                                  ;	file and and returns a handle
 38555                                  ;
 38556                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38557                                  ;		(AL) = open mode
 38558                                  ;	EXIT	'C' clear if OK
 38559                                  ;		  (ax) = file handle
 38560                                  ;		'C' set if error
 38561                                  ;		  (ax) = error code
 38562                                  ;	USES	all
 38563                                  ;
 38564                                  ;----------------------------------------------------------------------------
 38565                                  
 38566                                  ; 13/05/2019 - Retro DOS v4.0
 38567                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38568                                  
 38569                                  _$OPEN:       
 38570 00006EE7 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38571                                  _$Open2:
 38572                                  	;mov	ch,16h
 38573 00006EE9 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38574 00006EEB E85702                  	call	SetAttrib
 38575 00006EEE B9[842B]                	mov	cx,DOS_OPEN
 38576                                  
 38577                                  	;xor	ah,ah  ; MSDOS 3.3
 38578                                  
 38579 00006EF1 50                      	push	ax
 38580                                  
 38581                                  ;*	General file open/create code. The $CREATE call and the various
 38582                                  ;	$OPEN calls all come here.
 38583                                  ;
 38584                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38585                                  ;	path names, etc., and then dispatch to our individual handlers.
 38586                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38587                                  ;
 38588                                  ;	(TOS) = create mode
 38589                                  ;	(CX) = address of routine to call to do actual function
 38590                                  ;	(DS:DX) = ASCIZ name
 38591                                  ;	SAttrib = Attribute mask
 38592                                  
 38593                                  ;	Get a free SFT and mark it "being allocated"
 38594                                  
 38595                                  AccessFile:
 38596 00006EF2 E81DA4                  	call	ECritSFT
 38597 00006EF5 E8D8F7                  	call	SFNFree			; get a free sfn
 38598 00006EF8 E832A4                  	call	LCritSFT
 38599 00006EFB 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38600 00006EFD 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38601 00006F02 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38602 00006F07 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38603                                  
 38604                                  ;	Find a free area in the user's JFN table.
 38605                                  
 38606 00006F0C E8AEF7                  	call	JFNFree			; get a free jfn
 38607 00006F0F 7303                    	jnc	short SaveJFN
 38608                                  OpenFailJ:
 38609 00006F11 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38610                                  
 38611                                  SaveJFN:
 38612 00006F14 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38613 00006F19 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38614 00006F1E 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38615                                  
 38616                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38617                                  ;	reusing the same JFN.
 38618                                  
 38619 00006F23 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38620 00006F28 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38621 00006F2B 89D6                    	MOV	SI,DX			; get name in appropriate place
 38622 00006F2D BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38623 00006F30 51                      	push	cx			; save routine to call
 38624 00006F31 E844FC                  	call	TransPath		; convert the path
 38625 00006F34 5B                      	pop	bx			; (bx) = routine to call
 38626                                  
 38627 00006F35 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38628 00006F3A 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38629 00006F3C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38630 00006F42 7404                    	JZ	short SetSearch
 38631                                  	;mov	al,2
 38632 00006F44 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38633                                  OpenCleanJ:
 38634 00006F46 EB50                    	JMP	short OpenClean
 38635                                  
 38636                                  SetSearch:
 38637 00006F48 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38638                                  
 38639                                  ;	We need to get the new inheritance bits.
 38640                                  
 38641 00006F49 31C9                    	xor	cx,cx
 38642                                  	; MSDOS 6.0
 38643                                  	;mov	[si+2],cx ; 0
 38644 00006F4B 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38645                                  	;mov    [si+51],cx ; 0
 38646 00006F4E 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38647                                  	;
 38648 00006F51 81FB[842B]              	CMP	BX,DOS_OPEN
 38649 00006F55 7509                    	JNZ	short _DoOper
 38650                                  	;test   al,80h
 38651 00006F57 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38652 00006F59 7405                    	JZ	short _DoOper ; 10/08/2018
 38653 00006F5B 247F                    	AND	AL,7Fh			; mask off inherit bit
 38654                                  	;mov	cx,1000h
 38655 00006F5D B90010                  	MOV	CX,sf_no_inherit
 38656                                  _DoOper:
 38657                                  	;; MSDOS 3.3
 38658                                  	;;mov	word [si+2], 0
 38659                                  	;;mov	word [si+33h], 0
 38660                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38661                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38662                                  
 38663                                  	; MSDOS 6.0
 38664                                  ;**	Check if this is an extended open. If so you must set the
 38665                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38666                                  ;	Set_EXT_mode in creat.asm
 38667                                  
 38668                                  	; MSDOS 6.0
 38669                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38670 00006F60 57                      	push	di
 38671 00006F61 06                      	push	es
 38672 00006F62 1E                      	push	ds
 38673 00006F63 07                      	pop	es
 38674 00006F64 56                      	push	si
 38675 00006F65 5F                      	pop	di			; (es:di) = SFT address
 38676 00006F66 E807BC                  	call	Set_EXT_mode
 38677                                  	;RESTORE <es, di>
 38678 00006F69 07                      	pop	es
 38679 00006F6A 5F                      	pop	di
 38680                                  
 38681                                  	;Context DS
 38682 00006F6B 16                      	push	ss
 38683 00006F6C 1F                      	pop	ds	
 38684                                  
 38685 00006F6D 51                      	push	cx
 38686 00006F6E FFD3                    	CALL	BX			; blam!
 38687 00006F70 59                      	pop	cx
 38688 00006F71 C536[9E05]              	LDS	SI,[THISSFT]
 38689 00006F75 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38690                                  	;jc	short OpenE ; MSDOS 3.3
 38691                                  
 38692                                  ;	The SFT was successfully opened. Remove busy mark.
 38693                                  
 38694                                  OpenOK:
 38695                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38696 00006F77 C7040100                	mov	word [SI],1
 38697                                  	;or	[SI+5],cx
 38698 00006F7B 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38699                                  
 38700                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38701                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38702                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38703                                  ;
 38704                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38705                                  ; sharer.
 38706                                  
 38707 00006F7E 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38708 00006F82 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38709                                  
 38710 00006F87 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38711                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38712                                  OpenOkj:
 38713 00006F8E E9AA96                  	jmp	SYS_RET_OK		; bye with no errors
 38714                                  
 38715                                  	; MSDOS 6.0
 38716                                  ;Extended Open hooks check
 38717                                  OpenE2:					;AN000;;EO.
 38718 00006F91 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38719 00006F94 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38720 00006F96 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38721                                  
 38722                                  ;	Extended Open hooks check
 38723                                  ;
 38724                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38725                                  
 38726                                  OpenClean:
 38727 00006F98 5B                      	pop	bx			; clean off stack
 38728                                  OpenE:
 38729                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38730 00006F99 C7040000                	mov	word [SI],0
 38731 00006F9D 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38732 00006FA2 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38733 00006FA5 EB02                    	JMP	SHORT OpenCritLeave
 38734                                  
 38735                                  OpenFail:
 38736 00006FA7 FB                      	STI
 38737 00006FA8 59                      	pop	cx			; Clean stack
 38738                                  OpenCritLeave:
 38739 00006FA9 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38740                                  
 38741                                  	; MSDOS 6.0
 38742                                  ; File Tagging DOS 4.00
 38743 00006FB0 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38744                                  					;AN000;;FT. code page mismatch
 38745 00006FB6 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38746 00006FB8 E99196                  	jmp	From_GetSet		;AN000;;FT. yes
 38747                                  NORERR: 				;AN000;
 38748                                  ; File Tagging DOS 4.00
 38749                                  
 38750 00006FBB E98696                  	jmp	SYS_RET_ERR		; no free, return error
 38751                                  
 38752                                  ; MSDOS 2.11
 38753                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38754                                  ;----------------------------------------------------------------------------
 38755                                  ;   Assembler usage:
 38756                                  ;           LDS     DX, name
 38757                                  ;           MOV     AH, Creat
 38758                                  ;           MOV     CX, access
 38759                                  ;           INT     21h
 38760                                  ;       ; AX now has the handle
 38761                                  ;
 38762                                  ;   Error returns:
 38763                                  ;           AX = error_access_denied
 38764                                  ;              = error_path_not_found
 38765                                  ;              = error_too_many_open_files
 38766                                  ;----------------------------------------------------------------------------
 38767                                  
 38768                                  ; MSDOS 6.0
 38769                                  ;	BREAK <$Creat - create a brand-new file>
 38770                                  ;----------------------------------------------------------------------------
 38771                                  ;
 38772                                  ;**	$Creat - Create a File
 38773                                  ;
 38774                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38775                                  ;	initial attributes contained in CX
 38776                                  ;
 38777                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38778                                  ;		(CX) = initial attributes
 38779                                  ;	EXIT	'C' set if error
 38780                                  ;		  (ax) = error code
 38781                                  ;		'C' clear if OK
 38782                                  ;		  (ax) = file handle
 38783                                  ;	USES	all
 38784                                  ;
 38785                                  ;----------------------------------------------------------------------------
 38786                                  
 38787                                  _$CREAT:
 38788 00006FBE 51                      	push	cx			; Save attributes on stack
 38789 00006FBF B9[5A2A]                	mov	CX,DOS_CREATE		; routine to call
 38790                                  AccessSet:
 38791                                  	;mov	byte [ss:SATTRIB],6
 38792 00006FC2 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38793                                  	; 10/08/2018
 38794 00006FC8 E927FF                  	JMP	AccessFile		; use good ol' open
 38795                                  
 38796                                  ; MSDOS 6.0 (MSDOS 3.3)
 38797                                  ;	BREAK <$CHMOD - change file attributes>
 38798                                  ;----------------------------------------------------------------------------
 38799                                  ;
 38800                                  ;**	$CHMOD - Change File Attributes
 38801                                  ;
 38802                                  ;   Assembler usage:
 38803                                  ;	    LDS     DX, name
 38804                                  ;	    MOV     CX, attributes
 38805                                  ;	    MOV     AL,func (0=get, 1=set)
 38806                                  ;	    INT     21h
 38807                                  ;   Error returns:
 38808                                  ;	    AX = error_path_not_found
 38809                                  ;	    AX = error_access_denied
 38810                                  ;
 38811                                  ;----------------------------------------------------------------------------
 38812                                  
 38813                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38814                                  _$CHMOD:
 38815                                  	; 05/08/2018 - Retro DOS v3.0
 38816                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38817 00006FCB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38818 00006FCE 50                      	push	ax
 38819 00006FCF 51                      	push	cx			; save function and attributes
 38820 00006FD0 89D6                    	MOV	SI,DX			; get things in appropriate places
 38821 00006FD2 E8A7FB                  	call	TransPathSet		; get correct path
 38822 00006FD5 59                      	pop	cx
 38823 00006FD6 58                      	pop	ax			; and get function and attrs back
 38824 00006FD7 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38825 00006FD9 16                      	push	ss			; set up for later possible calls
 38826 00006FDA 1F                      	pop	ds
 38827 00006FDB 803E[7A05]FF            	CMP	byte [CMETA],-1
 38828 00006FE0 754E                    	JNZ	short ChModErr
 38829                                  	;mov	byte [SATTRIB],16h
 38830 00006FE2 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38831 00006FE7 2C01                    	SUB	AL,1			; fast way to discriminate
 38832 00006FE9 720B                    	JB	short ChModGet		; 0 -> go get value
 38833 00006FEB 7417                    	JZ	short ChModSet		; 1 -> go set value
 38834                                  	;mov	byte [EXTERR_LOCUS],1
 38835 00006FED C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38836                                  	;mov	al,1
 38837 00006FF2 B001                    	mov	al,error_invalid_function ; bad value
 38838                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38839                                  chmod_errj:	
 38840                                  	;;jmp	SYS_RET_ERR
 38841                                  	;jmp	short ChModE	
 38842 00006FF4 EBC5                    	jmp	short NORERR	; 06/12/2022
 38843                                  ChModGet:
 38844 00006FF6 E84BB9                  	call	GET_FILE_INFO		; suck out the ol' info
 38845 00006FF9 7237                    	JC	short ChModE		; error codes are already set for ret
 38846 00006FFB E88794                  	call	Get_User_Stack		; point to user saved vaiables
 38847                                  	;mov	[SI+4],ax
 38848 00006FFE 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38849                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38850                                  OpenOkj2:
 38851                                  	; 17/12/2022
 38852                                  	;;jmp	SYS_RET_OK		; say sayonara
 38853                                  	;jmp	short OpenOkj
 38854                                  	; 25/06/2019
 38855 00007001 E93A96                  	jmp	SYS_RET_OK_clc
 38856                                  
 38857                                  ChModSet:
 38858 00007004 89C8                    	MOV	AX,CX			; get attrs in position
 38859 00007006 E899B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38860 00007009 7227                    	JC	short ChModE		; errors are set
 38861                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38862                                  	;jmp	SYS_RET_OK
 38863                                  OpenOkj3:
 38864                                  	;jmp	short OpenOkj2
 38865                                  	; 17/12/2022
 38866 0000700B E92D96                  	jmp	SYS_RET_OK
 38867                                  
 38868                                  ; 17/12/2022
 38869                                  %if 0
 38870                                  ChModErr:
 38871                                  NotFound:	; 17/12/2022
 38872                                  	;mov	al,3
 38873                                  	mov	al,error_path_not_found
 38874                                  ChModE:
 38875                                  UnlinkE:	; 17/12/2022
 38876                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38877                                  	;;jmp	SYS_RET_ERR
 38878                                  	;jmp	short chmod_errj
 38879                                  	; 17/12/2022
 38880                                  	jmp	short NORERR
 38881                                  %endif
 38882                                  
 38883                                  ; 22/05/2019 - Retro DOS v4.0
 38884                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38885                                  
 38886                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38887                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38888                                  
 38889                                  ;	BREAK <$UNLINK - delete a file entry>
 38890                                  ;----------------------------------------------------------------------------
 38891                                  ;
 38892                                  ;**	$UNLINK - Delete a File
 38893                                  ;
 38894                                  ;
 38895                                  ;	Assembler usage:
 38896                                  ;	    LDS     DX, name
 38897                                  ;	    IF VIA SERVER DOS CALL
 38898                                  ;	     MOV     CX,SEARCH_ATTRIB
 38899                                  ;	    MOV     AH, Unlink
 38900                                  ;	    INT     21h
 38901                                  ;
 38902                                  ;	ENTRY	(ds:dx) = path name
 38903                                  ;		(cx) = search_attribute, if via server_dos
 38904                                  ;	EXIT	'C' clear if no error
 38905                                  ;		'C' set if error
 38906                                  ;		  (ax) = error code
 38907                                  ;			= error_file_not_found
 38908                                  ;			= error_access_denied
 38909                                  ;
 38910                                  ;----------------------------------------------------------------------------
 38911                                  
 38912                                  _$UNLINK:
 38913 0000700E 51                      	push	cx			; Save possible CX input parm
 38914 0000700F 89D6                    	MOV	SI,DX			; Point at input string
 38915 00007011 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38916 00007014 E865FB                  	call	TransPathSet		; go get normalized path
 38917 00007017 59                      	pop	cx
 38918 00007018 7216                    	JC	short ChModErr		; badly formed path
 38919 0000701A 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38920 00007020 750E                    	JNZ	short NotFound
 38921 00007022 16                      	push	ss
 38922 00007023 1F                      	pop	ds
 38923                                  	;mov	ch,6
 38924 00007024 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38925 00007026 E81C01                  	call	SetAttrib
 38926 00007029 E808B5                  	call	DOS_DELETE		; remove that file
 38927                                  	;JC	short UnlinkE 		; error is there
 38928                                  	; 17/12/2022
 38929 0000702C 728D                    	jc	short NORERR
 38930                                  
 38931                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38932                                  UnlinkOk:
 38933                                  	;jmp	SYS_RET_OK		; okey doksy
 38934 0000702E EBDB                    	jmp	short OpenOkj3
 38935                                  
 38936                                  	; 17/12/2022
 38937                                  ChModErr:	; 17/12/2022
 38938                                  NotFound:
 38939                                  	;mov	al,3
 38940 00007030 B003                    	MOV	AL,error_path_not_found
 38941                                  ChModE:		; 17/12/2022
 38942                                  UnlinkE:
 38943                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38944                                  	;;jmp	SYS_RET_ERR		; bye
 38945                                  	;jmp	short ChModE
 38946                                  	; 17/12/2022
 38947 00007032 EB87                    	jmp	short NORERR
 38948                                  
 38949                                  ;BREAK <$RENAME - move directory entries around>
 38950                                  ;----------------------------------------------------------------------------
 38951                                  ;
 38952                                  ;   Assembler usage:
 38953                                  ;	    LDS     DX, source
 38954                                  ;	    LES     DI, dest
 38955                                  ;	    IF VIA SERVER DOS CALL
 38956                                  ;	      MOV   CX,SEARCH_ATTRIB
 38957                                  ;	    MOV     AH, Rename
 38958                                  ;	    INT     21h
 38959                                  ;
 38960                                  ;   Error returns:
 38961                                  ;	    AX = error_file_not_found
 38962                                  ;	       = error_not_same_device
 38963                                  ;	       = error_access_denied
 38964                                  ;
 38965                                  ;----------------------------------------------------------------------------
 38966                                  
 38967                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38968                                  _$RENAME:
 38969                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38970 00007034 51                      	push	cx
 38971 00007035 1E                      	push	ds
 38972 00007036 52                      	push	dx			; save source and possible CX arg
 38973 00007037 06                      	PUSH	ES
 38974 00007038 1F                      	POP	DS			; move dest to source
 38975 00007039 89FE                    	MOV	SI,DI			; save for offsets
 38976 0000703B BF[3E04]                	MOV	DI,RENBUF
 38977 0000703E E83BFB                  	call	TransPathSet		; munge the paths
 38978 00007041 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38979 00007046 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38980 0000704B 5E                      	pop	si
 38981 0000704C 1F                      	pop	ds
 38982 0000704D 59                      	pop	cx			; get back source and possible CX arg
 38983                                  epjc2:	
 38984 0000704E 72E0                    	JC	short ChModErr		; get old error
 38985 00007050 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38986 00007056 75D8                    	JNZ	short NotFound
 38987 00007058 51                      	push	cx			; Save possible CX arg
 38988 00007059 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38989 0000705C E81DFB                  	call	TransPathSet		; wham
 38990 0000705F 59                      	pop	cx
 38991 00007060 72EC                    	JC	short epjc2
 38992 00007062 16                      	push	ss
 38993 00007063 1F                      	pop	ds
 38994 00007064 803E[7A05]FF            	CMP	byte [CMETA],-1
 38995 00007069 72C5                    	JB	short NotFound
 38996                                  
 38997                                  	; MSDOS 6.0
 38998 0000706B FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38999 0000706F FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39000 00007073 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39001 00007076 16                      	PUSH	SS			   ;AN000;;MS.
 39002 00007077 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39003 00007078 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39004                                  rnloop: 				   ;AN000;
 39005 0000707A E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39006 0000707D 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39007 0000707F E834A1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39008 00007082 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39009 00007084 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39010 00007086 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39011                                  rnerr:					   ;AN000;
 39012 00007088 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39013                                  	;error	error_current_directory    ;AN000;;MS.
 39014 0000708B B010                    	mov	al,error_current_directory 
 39015                                  	;jmp	SYS_RET_ERR
 39016                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39017 0000708D EBA3                    	jmp	short UnlinkE
 39018                                  dorn:					   ;AN000;
 39019 0000708F 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39020 00007094 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39021                                  
 39022 00007099 16                      	push	ss
 39023 0000709A 1F                      	pop	ds
 39024                                  
 39025                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39026                                  	;mov	ch,16h
 39027 0000709B B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39028                                  					; rename appropriate files
 39029 0000709D E8A500                  	call	SetAttrib
 39030 000070A0 E86FB6                  	call	DOS_RENAME		; do the deed
 39031 000070A3 728D                    	JC	short UnlinkE 		; errors
 39032                                  
 39033                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39034                                  	;jmp	SYS_RET_OK
 39035 000070A5 EB87                    	jmp	short UnlinkOk
 39036                                  
 39037                                  
 39038                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39039                                  
 39040                                  ; 14/07/2018 - Retro DOS v3.0
 39041                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39042                                  
 39043                                  ;Break <$CreateNewFile - Create a new directory entry>
 39044                                  ;----------------------------------------------------------------------------
 39045                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39046                                  ;	was no previous directory entry, and fail if a directory entry with
 39047                                  ;	the same name existed previously.
 39048                                  ;
 39049                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39050                                  ;		CX contains default file attributes
 39051                                  ;   Outputs:	Carry Clear:
 39052                                  ;		    AX has file handle opened for read/write
 39053                                  ;		Carry Set:
 39054                                  ;		    AX has error code
 39055                                  ;   Registers modified: All
 39056                                  ;----------------------------------------------------------------------------
 39057                                  
 39058                                  _$CreateNewFile:
 39059 000070A7 51                      	push	cx			; Save attributes on stack
 39060 000070A8 B9[272B]                	MOV	CX,DOS_Create_New	; routine to call
 39061 000070AB E914FF                  	JMP	AccessSet		; use good ol' open
 39062                                  
 39063                                  ;**	BinToAscii - convert a number to a string.
 39064                                  ;----------------------------------------------------------------------------
 39065                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39066                                  ;	This routine is used to generate temp file names so we don't spend
 39067                                  ;	the time and code needed for a true hex number, we just use
 39068                                  ;	A thorugh O.
 39069                                  ;
 39070                                  ;	ENTRY	(ax) = value
 39071                                  ;		(es:di) = destination
 39072                                  ;	EXIT	(es:di) updated by 4
 39073                                  ;	USES	cx, di, flags
 39074                                  ;----------------------------------------------------------------------------
 39075                                  
 39076                                  ; MSDOS 3.3
 39077                                  ;BinToAscii:
 39078                                  ;	mov     cx,4
 39079                                  ;bta5:
 39080                                  ;	push    cx
 39081                                  ;	mov     cl,4
 39082                                  ;	rol     ax,cl
 39083                                  ;	push    ax
 39084                                  ;	and     al,0Fh
 39085                                  ;	add     al,'0'
 39086                                  ;	cmp     al,'9'
 39087                                  ;	jbe     short bta6
 39088                                  ;	add     al,7
 39089                                  ;bta6: 
 39090                                  ;	stosb
 39091                                  ;	pop     ax
 39092                                  ;	pop     cx
 39093                                  ;	loop    bta5
 39094                                  ;	retn
 39095                                  
 39096                                  ; MSDOS 6.0
 39097                                  BinToAscii:
 39098 000070AE B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39099                                  bta5:	
 39100 000070B1 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39101 000070B3 50                      	push	ax			; preserve remainder of digits
 39102 000070B4 240F                    	AND	AL,0Fh			; grab low nibble
 39103 000070B6 0441                    	ADD	AL,'A'			; turn into ascii
 39104 000070B8 AA                      	STOSB				; drop in the character
 39105 000070B9 58                      	pop	ax			; (ax) = shifted number
 39106 000070BA FECD                    	dec	ch
 39107 000070BC 75F3                    	jnz	short bta5		; process 4 digits
 39108 000070BE C3                      	retn
 39109                                  
 39110                                  ;Break	<$CreateTempFile - create a unique name>
 39111                                  ;----------------------------------------------------------------------------
 39112                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39113                                  ;	Method used is to get the current time, convert to a name and attempt
 39114                                  ;	a create new. Repeat until create new succeeds.
 39115                                  ;
 39116                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39117                                  ;		CX  contains default attributes
 39118                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39119                                  ;		AX has handle
 39120                                  ;   Registers modified: all
 39121                                  ;----------------------------------------------------------------------------
 39122                                  
 39123                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39124                                  
 39125                                  _$CreateTempFile:
 39126                                  	;Enter
 39127 000070BF 55                      	push	bp
 39128 000070C0 89E5                    	mov	bp,sp
 39129                                  
 39130                                  	;LocalVar  EndPtr,DWORD
 39131                                  	;LocalVar  FilPtr,DWORD
 39132                                  	;LocalVar  Attr,WORD
 39133                                  
 39134 000070C2 83EC0A                  	sub	sp,10
 39135                                  
 39136                                  	;test	cx,0FFD8h
 39137 000070C5 F7C1D8FF                	test	CX,~attr_changeable
 39138 000070C9 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39139                                  
 39140                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39141                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39142                                  ; below. The code loops on error_access_denied, but if one of the non
 39143                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39144                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39145                                  ; need to detect these cases before getting to the loop.
 39146                                  
 39147                                  	;mov	ax, 5
 39148 000070CB B80500                  	MOV	AX,error_access_denied
 39149 000070CE EB69                    	JMP	SHORT SETTMPERR
 39150                                  
 39151                                  OKatts:
 39152                                  	;MOV	attr,CX 		; save attribute
 39153 000070D0 894EF6                  	mov     [bp-10],cx
 39154                                  	;MOV	FilPtrL,DX		; pointer to file
 39155 000070D3 8956F8                  	mov	[bp-8],dx
 39156                                  	;MOV	FilPtrH,DS
 39157 000070D6 8C5EFA                  	mov	[bp-6],ds
 39158                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39159 000070D9 8C5EFE                  	mov	[bp-2],ds
 39160 000070DC 1E                      	PUSH	DS
 39161 000070DD 07                      	POP	ES			; destination for nul search
 39162 000070DE 89D7                    	MOV	DI,DX
 39163 000070E0 89F9                    	MOV	CX,DI
 39164 000070E2 F7D9                    	NEG	CX			; number of bytes remaining in segment
 39165                                  	; MSDOS 6.0
 39166 000070E4 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39167 000070E6 7501                    	JNZ	short okok		;AN000;MS. no
 39168                                  	;MOV	CX,-1			;AN000;MS.
 39169                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39170                                  	; 17/12/2022
 39171 000070E8 49                      	dec	cx  ; mov cx,-1
 39172                                  	;mov	cx,-1 ; 0FFFh
 39173                                  okok:					;AN000;
 39174 000070E9 31C0                    	XOR	AX,AX			;AN000;
 39175 000070EB F2AE                    	REPNZ	SCASB			;AN000;
 39176                                  					;AN000;
 39177 000070ED 4F                      	DEC	DI			; point back to the null
 39178 000070EE 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39179 000070F2 E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39180 000070F5 7403                    	JZ	short SETENDPTR		; Yes
 39181                                  STOREPTH:
 39182 000070F7 B05C                    	MOV	AL,'\'
 39183 000070F9 AA                      	STOSB				; Add a path separator (and INC DI)
 39184                                  SETENDPTR:
 39185                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39186 000070FA 8856FC                  	mov	[bp-4],dl
 39187                                  CreateLoop:
 39188 000070FD 16                      	push	ss			; let ReadTime see variables
 39189 000070FE 1F                      	pop	ds
 39190 000070FF 55                      	push	bp
 39191 00007100 E81C9A                  	call	READTIME		; go get time
 39192 00007103 5D                      	pop	bp
 39193                                  ;
 39194                                  ; Time is in CX:DX. Go drop it into the string.
 39195                                  ;
 39196                                  	;les	di,EndPtr		; point to the string
 39197 00007104 C47EFC                  	les	di,[BP-4]
 39198 00007107 89C8                    	mov	ax,cx
 39199 00007109 E8A2FF                  	call	BinToAscii		; store upper word
 39200 0000710C 89D0                    	mov	ax,dx
 39201 0000710E E89DFF                  	call	BinToAscii		; store lower word
 39202 00007111 30C0                    	xor	al,al
 39203 00007113 AA                      	STOSB				; nul terminate
 39204                                  	;LDS	DX,FilPtr		; get name
 39205 00007114 C556F8                  	lds	dx,[bp-8]
 39206                                  	;MOV	CX,Attr 		; get attr
 39207 00007117 8B4EF6                  	mov	cx,[bp-10]
 39208 0000711A 55                      	push	bp
 39209 0000711B E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39210 0000711E 5D                      	pop	bp
 39211 0000711F 7319                    	JNC	short CreateDone	; failed, go try again
 39212                                  
 39213                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39214                                  ; error and figure out what to do.
 39215                                  
 39216                                  	;; MSDOS 3.3			; M049 - start
 39217                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39218                                  ;;	cmp	al,error_file_exists
 39219                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39220                                  ;;	cmp	al,error_access_denied
 39221                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39222                                  
 39223                                  	; MSDOS 6.0
 39224                                  	;cmp	al,50h
 39225 00007121 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39226 00007123 74D8                    	JZ	short CreateLoop	; Y: try again
 39227                                  	;cmp	al,5
 39228 00007125 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39229 00007127 7510                    	JNZ	short SETTMPERR		; N: Error out
 39230                                  					; Y: Check to see if we got this due
 39231                                  					;    to the network drive. Note that
 39232                                  					;    the redir will set the exterr
 39233                                  					;    to error_cannot_make if this is 
 39234                                  					;    so. 
 39235 00007129 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39236                                  					; See if it's REALLY an att mismatch
 39237 0000712F 7408                    	je	short SETTMPERR		; no, network error, stop
 39238                                  ;M070
 39239                                  ; If the user failed on an I24, we do not want to try again
 39240                                  ;
 39241 00007131 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39242                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39243                                  
 39244                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39245                                  	; 17/12/2022
 39246 00007137 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39247                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39248                                  	;jz	short SETTMPERR
 39249                                  	;jmp	short CreateLoop
 39250                                  
 39251                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39252                                  					; M049 - end
 39253                                  SETTMPERR:
 39254 00007139 F9                      	STC
 39255                                  CreateDone:
 39256                                  	;Leave
 39257 0000713A 89EC                    	mov	sp,bp
 39258 0000713C 5D                      	pop	bp
 39259 0000713D 7203                    	JC	short CreateFail
 39260 0000713F E9F994                  	jmp	SYS_RET_OK		; success!
 39261                                  CreateFail:
 39262 00007142 E9FF94                  	jmp	SYS_RET_ERR
 39263                                  
 39264                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39265                                  ;   (CH) or to the value in CL if the current system call is through
 39266                                  ;   serverdoscall.
 39267                                  ;
 39268                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39269                                  ;		fSharing == TRUE => set sattrib to CL
 39270                                  ;   Outputs:	none
 39271                                  ;   Registers changed:	CX
 39272                                  
 39273                                  SetAttrib:
 39274 00007145 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39275 0000714B 7502                    	jnz	short Set
 39276 0000714D 88E9                    	mov	cl,ch
 39277                                  Set:
 39278 0000714F 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39279 00007154 C3                      	retn
 39280                                  
 39281                                  ; 14/07/2018 - Retro DOS v3.0
 39282                                  ; MSDOS 6.0
 39283                                  
 39284                                  ; 29/04/2019 - Retro DOS v4.0
 39285                                  
 39286                                  ;Break	<Extended_Open- Extended open the file>
 39287                                  ;----------------------------------------------------------------------------
 39288                                  ; Input: AL= 0 reserved  AH=6CH
 39289                                  ;	 BX= mode
 39290                                  ;	 CL= create attribute  CH=search attribute (from server)
 39291                                  ;	 DX= flag
 39292                                  ;	 DS:SI = file name
 39293                                  ;	 ES:DI = parm list
 39294                                  ;			   DD  SET EA list (-1) null
 39295                                  ;			   DW  n  parameters
 39296                                  ;			   DB  type (TTTTTTLL)
 39297                                  ;			   DW  IOMODE
 39298                                  ; Function: Extended Open
 39299                                  ; Output: carry clear
 39300                                  ;		     AX= handle
 39301                                  ;		     CX=1 file opened
 39302                                  ;			2 file created/opened
 39303                                  ;			3 file replaced/opened
 39304                                  ;	  carry set: AX has error code
 39305                                  ;----------------------------------------------------------------------------
 39306                                  
 39307                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39308                                  _$Extended_Open:			  ;AN000;
 39309                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39310 00007155 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39311 0000715A 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39312                                  	; 17/12/2022
 39313 00007161 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39314                                  	;;test	dx,0FE00h
 39315                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39316 00007164 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39317 00007166 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39318 00007168 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39319 0000716B 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39320                                  	;and	dl,0Fh
 39321 0000716D 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39322 00007170 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39323 00007173 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39324                                  	;and	ah,0F0h
 39325 00007175 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39326 00007178 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39327 0000717B 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39328                                  
 39329 0000717D 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39330 00007182 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39331 00007187 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39332 0000718C 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39333 00007191 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39334 00007196 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39335 0000719B 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39336 000071A0 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39337 000071A5 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39338 000071A7 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39339 000071A9 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39340                                  ext_inval2:				  ;AN000;;EO.
 39341                                  	;mov	al,1
 39342 000071AB B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39343                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39344                                  eo_err:
 39345                                  	;jmp	SYS_RET_ERR
 39346 000071AD EB93                    	jmp	short CreateFail
 39347                                  
 39348                                  ext_inval_parm:				  ;AN000;EO..
 39349 000071AF 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39350 000071B0 5E                      	POP	SI			  ;AN000;EO..
 39351                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39352                                  	;mov	al,13
 39353 000071B1 B00D                    	mov	al,error_invalid_data
 39354                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39355                                  	;;jmp	SYS_RET_ERR
 39356                                  	;jmp	short eo_err
 39357                                  	; 17/12/2022
 39358 000071B3 EB8D                    	jmp	short CreateFail
 39359                                  
 39360                                  	; 17/12/2022	
 39361                                  ;error_return:				  ;AN000;EO.
 39362                                  ;	retn				  ;AN000;EO.. return with error
 39363                                  
 39364                                  goopen2:				  ;AN000;
 39365                                  	; 17/12/2022
 39366                                  	;test	bh,20h				 
 39367 000071B5 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39368                                  	;;test	bx,2000h
 39369                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39370 000071B8 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39371                                  	;or	byte [SS:EXTOPEN_ON],2
 39372 000071BA 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39373                                  goopen:					  ;AN000;
 39374                                  	;or	byte [SS:EXTOPEN_ON],1 
 39375 000071C0 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39376                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39377                                  	; 18/12/2022
 39378 000071C6 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39379                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39380 000071CC 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39381 000071D2 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39382 000071D4 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39383 000071D7 723F                    	JC	short error_return	  ;AN000;;EO. error
 39384                                  
 39385 000071D9 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39386 000071DF 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39387                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39388 000071E1 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39389 000071E8 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39390                                  
 39391                                  	; 17/12/2022
 39392                                  ;ok_return2:
 39393                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39394                                  
 39395                                  chknext:
 39396                                  	; 17/12/2022
 39397 000071EA 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39398                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39399                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39400 000071F0 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39401 000071F2 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39402 000071F5 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39403 000071F7 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39404 000071FD 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39405 000071FF 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39406 00007206 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39407 0000720C 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39408 0000720E 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39409 00007215 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39410                                  error_return2:
 39411 00007217 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39412                                  error_return:	 ;17/12/2022
 39413 00007218 C3                      	retn				  ;AN000;;EO. return with error
 39414                                  
 39415                                  	; 17/12/2022
 39416                                  ok_return:
 39417                                  ok_return2:
 39418 00007219 E91F94                  	jmp	SYS_RET_OK
 39419                                  
 39420                                  exist_open:				  ;AN000;
 39421 0000721C 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39422 00007222 7402                    	jz	short noserver		  ;AN000;;EO. no
 39423 00007224 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39424                                  noserver:
 39425 00007226 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39426 00007229 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39427 0000722B 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39428 00007231 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39429                                  local_extopen:
 39430                                  	;cmp	ax,2
 39431 00007233 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39432 00007236 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39433                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39434                                  	; 17/12/2022
 39435 00007238 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39436                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39437                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39438                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39439                                  	; 17/12/2022
 39440 0000723E 745D                    	jz	short extexit ; 10/06/2019
 39441                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39442                                  	;jnz	short do_creat
 39443                                  	;jmp	short extexit
 39444                                  do_creat:
 39445 00007240 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39446 00007245 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39447 0000724A 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39448 0000724C E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39449 0000724F 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39450                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39451 00007251 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39452                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39453 00007258 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39454                                  
 39455                                  ext_ok:
 39456 0000725A 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39457 00007260 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39458                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39459 00007262 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39460                                  setXAttr:
 39461                                  	; 29/04/2019
 39462 00007269 50                      	push	ax
 39463 0000726A E81892                  	call	Get_User_Stack		  ;AN000;;EO.
 39464 0000726D 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39465                                  	;mov	[si+4],ax
 39466 00007271 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39467 00007274 58                      	pop	ax			  ;AN000;;EO.
 39468 00007275 8904                    	mov	[si],ax
 39469                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39470                                  	; 17/12/2022
 39471 00007277 EBA0                    	jmp	short ok_return
 39472                                  ;ok_return:				  ;AN000;
 39473                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39474                                  
 39475                                  extexit2:				  ;AN000; ERROR RECOVERY
 39476 00007279 5B                      	POP	BX			  ;AN000;EO. close the handle
 39477 0000727A 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39478                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39479 0000727B 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39480                                  					  ;AN000;EO. from create;smr;SS Override
 39481 00007281 750C                    	JNZ	short justopen		  ;AN000;EO.
 39482 00007283 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39483 00007288 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39484 0000728A E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39485 0000728D EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39486                                  
 39487                                  justopen:				  ;AN000;
 39488 0000728F E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39489                                  reserror:				  ;AN000;
 39490 00007292 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39491 00007293 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39492                                  
 39493                                  ext_file_unfound:			  ;AN000;
 39494                                  	;mov	ax,2
 39495 00007295 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39496 00007298 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39497                                  ext_inval:				  ;AN000;
 39498                                  	;mov	ax,1
 39499 0000729A B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39500                                  lockoperr:	; 17/12/2022
 39501                                  extexit:
 39502 0000729D E9A493                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39503                                  
 39504                                  ;============================================================================
 39505                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39506                                  ;============================================================================
 39507                                  ; 14/07/2018 - Retro DOS v3.0
 39508                                  ; 22/05/2019 - Retro DOS v4.0
 39509                                  
 39510                                  ;BREAK <$LockOper - Lock Calls>
 39511                                  ;----------------------------------------------------------------------------
 39512                                  ;
 39513                                  ;   Assembler usage:
 39514                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39515                                  ;	    MOV     CX, OffsetHigh
 39516                                  ;	    MOV     DX, OffsetLow
 39517                                  ;	    MOV     SI, LengthHigh
 39518                                  ;	    MOV     DI, LengthLow
 39519                                  ;	    MOV     AH, LockOper
 39520                                  ;	    MOV     AL, Request
 39521                                  ;	    INT     21h
 39522                                  ;
 39523                                  ;   Error returns:
 39524                                  ;	    AX = error_invalid_handle
 39525                                  ;	       = error_invalid_function
 39526                                  ;	       = error_lock_violation
 39527                                  ;
 39528                                  ;   Assembler usage:
 39529                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39530                                  ;
 39531                                  ;				    0? lock all
 39532                                  ;				    8? lock write
 39533                                  ;				    ?2 lock multiple
 39534                                  ;				    ?3 unlock multiple
 39535                                  ;				    ?4 lock/read
 39536                                  ;				    ?5 write/unlock
 39537                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39538                                  ;	    MOV     BX, Handle
 39539                                  ;	    MOV     CX, count or size
 39540                                  ;	    LDS     DX, buffer
 39541                                  ;	    INT     21h
 39542                                  ;
 39543                                  ;   Error returns:
 39544                                  ;	    AX = error_invalid_handle
 39545                                  ;	       = error_invalid_function
 39546                                  ;	       = error_lock_violation
 39547                                  ;
 39548                                  ;----------------------------------------------------------------------------
 39549                                  
 39550                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39551                                  _$LockOper:
 39552 000072A0 3C01                    	CMP	AL,1
 39553 000072A2 770B                    	JA	short lock_bad_func
 39554                                  
 39555 000072A4 57                      	PUSH	DI			       ; Save LengthLow
 39556 000072A5 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39557 000072A8 731D                    	JNC	short lock_do 		       ; have valid handle
 39558 000072AA 5F                      	POP	DI			       ; Clean stack
 39559                                  	;mov	al,6
 39560 000072AB B006                    	mov	al,error_invalid_handle
 39561                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39562                                  ;lockoperr:
 39563                                  	;jmp	SYS_RET_ERR
 39564                                  	; 17/12/2022
 39565 000072AD EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39566                                  
 39567                                  lock_bad_func:
 39568                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39569 000072AF 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39570                                  	;mov	al,1
 39571 000072B5 B001                    	mov	al,error_invalid_function
 39572                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39573                                  lockoperrj:
 39574                                  	;jmp	SYS_RET_ERR
 39575 000072B7 EBE4                    	jmp	short lockoperr
 39576                                  
 39577                                  	; 22/05/2019 - Retro DOS v4.0
 39578                                  
 39579                                  	; MSDOS 6.0 
 39580                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39581                                  ; Dead code deleted, MD, 23 Mar 90
 39582                                  
 39583                                  ;lock_do:
 39584                                  ;	; MSDOS 3.3
 39585                                  ;	or	al,al
 39586                                  ;	pop	ax
 39587                                  ;	jz	short DOS_Lock
 39588                                  ;DOS_Unlock:
 39589                                  ;	;test	word [es:di+5],8000h
 39590                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39591                                  ;	JZ	short LOCAL_UNLOCK
 39592                                  ;	push    ax
 39593                                  ;	mov     ax,110Bh
 39594                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39595                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39596                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39597                                  ;			; SFT DPB field -> DPB of drive containing file
 39598                                  ;			; Return: CF set error
 39599                                  ;	pop     bx
 39600                                  ;	jmp     short ValChk
 39601                                  ;
 39602                                  ;LOCAL_UNLOCK:
 39603                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39604                                  ;ValChk:
 39605                                  ;	JNC	short Lock_OK
 39606                                  ;lockerror:
 39607                                  ;	jmp	SYS_RET_ERR
 39608                                  ;Lock_OK:
 39609                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39610                                  ;	jmp	SYS_RET_OK
 39611                                  ;DOS_Lock:
 39612                                  ;	;test	word [es:di+5],8000h
 39613                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39614                                  ;	JZ	short LOCAL_LOCK
 39615                                  ;	;CallInstall NET_XLock,MultNET,10
 39616                                  ;	mov     ax, 110Ah
 39617                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39618                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39619                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39620                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39621                                  ;			; Return: CF set error
 39622                                  ;	JMP	short ValChk
 39623                                  ;
 39624                                  ;LOCAL_LOCK:
 39625                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39626                                  ;	JMP	short ValChk
 39627                                  
 39628                                  ; 17/12/2022
 39629                                  LOCAL_UNLOCK:
 39630                                  	; MSDOS 3.3
 39631                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39632                                  	; MSDOS 6.0
 39633 000072B9 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39634                                  ValChk:
 39635 000072BD 7302                    	JNC	short Lock_OK
 39636                                  lockerror:
 39637                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39638                                  	;;jmp	SYS_RET_ERR
 39639                                  	;jmp	short lockoperrj
 39640                                  	; 17/12/2022
 39641 000072BF EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39642                                  Lock_OK:
 39643                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39644                                  	; 10/06/2019
 39645 000072C1 A1[0C06]                	mov	ax,[TEMP_VAR]
 39646 000072C4 E97493                  	jmp	SYS_RET_OK
 39647                                  
 39648                                  	; 22/05/2019
 39649                                  lock_do:
 39650                                  	; MSDOS 6.0
 39651 000072C7 89C3                    	MOV	BX,AX				; save AX
 39652 000072C9 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39653                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39654                                  	;;mov	[bp+0],dx
 39655                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39656                                  	; 15/12/2022
 39657 000072CC 895600                  	mov	[bp],dx
 39658                                  	;mov	[bp+2],cx
 39659 000072CF 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39660 000072D2 59                      	POP	CX				; get low length
 39661                                  	;mov	[bp+4],cx
 39662 000072D3 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39663                                  	;mov	[bp+6],si
 39664 000072D6 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39665 000072D9 B90100                  	MOV	CX,1				; one range
 39666                                  
 39667                                  ;	PUSH	CS				;
 39668                                  ;	POP	DS				; DS:DX points to
 39669                                  
 39670 000072DC 16                      	push	ss
 39671 000072DD 1F                      	pop	ds
 39672                                  
 39673 000072DE 89EA                    	MOV	DX,BP				; Lock_Buffer
 39674                                  	;test	al,1
 39675 000072E0 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39676                                  	;JNZ	short DOS_Unlock		; yes
 39677                                  	;JMP	short DOS_Lock			; function 0
 39678                                  	; 17/12/2022
 39679                                  	; 10/06/2019
 39680 000072E2 740E                    	jz	short DOS_Lock
 39681                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39682                                  	;JNZ	short DOS_Unlock
 39683                                  	;JMP	short DOS_Lock
 39684                                  
 39685                                  DOS_Unlock:
 39686                                  	;;test	word [es:di+5],8000h
 39687                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39688 000072E4 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39689 000072E9 74CE                    	JZ	short LOCAL_UNLOCK
 39690                                  
 39691                                  lock_unlock: ; 22/05/2019
 39692                                  	
 39693                                  	;CallInstall Net_Xlock,MultNET,10
 39694                                  	
 39695                                  	; MSDOS 3.3
 39696                                  	;mov     ax,110Bh
 39697                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39698                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39699                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39700                                  			; SFT DPB field -> DPB of drive containing file
 39701                                  			; Return: CF set error
 39702                                  	; MSDOS 6.0
 39703 000072EB B80A11                  	mov     ax,110Ah
 39704 000072EE CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39705                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39706                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39707                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39708                                  			; Return: CF set error
 39709                                  
 39710 000072F0 EBCB                    	JMP	SHORT ValChk
 39711                                  
 39712                                  ; 17/12/2022
 39713                                  %if 0
 39714                                  LOCAL_UNLOCK:
 39715                                  	; MSDOS 3.3
 39716                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39717                                  	; MSDOS 6.0
 39718                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39719                                  ValChk:
 39720                                  	JNC	short Lock_OK
 39721                                  lockerror:
 39722                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39723                                  	;jmp	SYS_RET_ERR
 39724                                  	jmp	short lockoperrj
 39725                                  Lock_OK:
 39726                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39727                                  	; 10/06/2019
 39728                                  	mov	ax,[TEMP_VAR]
 39729                                  	jmp	SYS_RET_OK
 39730                                  %endif
 39731                                  
 39732                                  DOS_Lock:
 39733                                  	;;test	word [es:di+5],8000h
 39734                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39735 000072F2 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39736 000072F7 7407                    	JZ	short LOCAL_LOCK
 39737                                  
 39738                                  	;CallInstall NET_XLock,MultNET,10
 39739                                  
 39740 000072F9 B80A11                  	mov     ax,110Ah
 39741 000072FC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39742                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39743                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39744                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39745                                  			; Return: CF set error
 39746                                  
 39747 000072FE EBBD                    	JMP	short ValChk
 39748                                  
 39749                                  LOCAL_LOCK:
 39750                                  	; MSDOS 3.3
 39751                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39752                                  	; MSDOS 6.0
 39753 00007300 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39754                                  
 39755 00007304 EBB7                    	JMP	short ValChk
 39756                                  
 39757                                  ; 14/07/2018 - Retro DOS v3.0
 39758                                  ; LOCK_CHECK
 39759                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39760                                  
 39761                                  ;----------------------------------------------------------------------------
 39762                                  ; Inputs:
 39763                                  ;	Outputs of SETUP
 39764                                  ;	[USER_ID] Set
 39765                                  ;	[PROC_ID] Set
 39766                                  ; Function:
 39767                                  ;	Check for lock violations on local I/O
 39768                                  ;	Retries are attempted with sleeps in between
 39769                                  ; Outputs:
 39770                                  ;    Carry clear
 39771                                  ;	Operation is OK
 39772                                  ;    Carry set
 39773                                  ;	A lock violation detected
 39774                                  ; Outputs of SETUP preserved
 39775                                  ;----------------------------------------------------------------------------
 39776                                  
 39777                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39778                                  	; 22/05/2019 - Retro DOS v4.0
 39779                                  LOCK_CHECK:
 39780 00007306 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39781                                  LockRetry:
 39782 0000730A 53                      	push	bx		; save regs
 39783 0000730B 50                      	push	ax ; MSDOS 6.0
 39784                                  
 39785                                  	;MSDOS 3.3
 39786                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39787                                  	;MSDOS 6.0
 39788 0000730C FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39789                                  
 39790 00007310 58                      	pop	ax ; MSDOS 6.0
 39791 00007311 5B                      	pop	bx		; restrore regs
 39792 00007312 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39793                                  LockN:
 39794 00007314 E8F49E                  	call	Idle		; wait a while
 39795 00007317 4B                      	DEC	BX		; remember a retry
 39796 00007318 75F0                    	JNZ	short LockRetry	; more retries left...
 39797 0000731A F9                      	STC
 39798                                  lc_ret_label:
 39799 0000731B C3                      	retn
 39800                                  
 39801                                  ; 14/07/2018 - Retro DOS v3.0
 39802                                  ; LOCK_VIOLATION
 39803                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39804                                  
 39805                                  ;----------------------------------------------------------------------------
 39806                                  ; Inputs:
 39807                                  ;	[THISDPB] set
 39808                                  ;	[READOP] indicates whether error on read or write
 39809                                  ; Function:
 39810                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39811                                  ; Outputs:
 39812                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39813                                  ;	Carry clear if user wants a retry
 39814                                  ;
 39815                                  ; DS, ES, DI, CX preserved, others destroyed
 39816                                  ;----------------------------------------------------------------------------
 39817                                  
 39818                                  LOCK_VIOLATION:
 39819 0000731C 1E                      	PUSH	DS
 39820 0000731D 06                      	PUSH	ES
 39821 0000731E 57                      	PUSH	DI
 39822 0000731F 51                      	PUSH	CX
 39823                                  	;mov	ax,21h
 39824 00007320 B82100                  	MOV	AX,error_lock_violation
 39825                                  	;mov	byte [ALLOWED],18h
 39826 00007323 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39827 00007328 C42E[8A05]              	LES	BP,[THISDPB]
 39828 0000732C BF0100                  	MOV	DI,1		; Fake some registers
 39829 0000732F 89F9                    	MOV	CX,DI
 39830                                  	;mov	dx,[es:bp+11]
 39831 00007331 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39832 00007335 E8D6DF                  	call	HARDERR
 39833 00007338 59                      	POP	CX
 39834 00007339 5F                      	POP	DI
 39835 0000733A 07                      	POP	ES
 39836 0000733B 1F                      	POP	DS
 39837 0000733C 3C01                    	CMP	AL,1
 39838 0000733E 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39839 00007340 F9                      	STC
 39840 00007341 C3                      	retn
 39841                                  
 39842                                  ; 14/07/2018 - Retro DOS v3.0
 39843                                  
 39844                                  ;----------------------------------------------------------------------------
 39845                                  
 39846                                  ;	do a retz to return error
 39847                                  
 39848                                  	; 22/05/2019 - Retro DOS v4.0
 39849                                  CheckShare:
 39850                                  	; MSDOS 3.3
 39851                                  	;cmp	byte [cs:fShare],0
 39852                                  	;retn
 39853                                  
 39854                                  	; MSDOS 6.0
 39855 00007342 1E                      	push	ds			;smr;
 39856                                  	;getdseg <ds>			; ds -> dosdata
 39857 00007343 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39858 00007348 803E[0303]00            	cmp	byte [fShare],0
 39859 0000734D 1F                      	pop	ds			;smr;
 39860 0000734E C3                      	retn
 39861                                  	
 39862                                  ;============================================================================
 39863                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39864                                  ;============================================================================
 39865                                  ; 14/07/2018 - Retro DOS v3.0
 39866                                  ; 22/05/2019 - Retro DOS v4.0
 39867                                  
 39868                                  ; SHARE_CHECK
 39869                                  ;----------------------------------------------------------------------------
 39870                                  ; Inputs:
 39871                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39872                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39873                                  ;       [WFP_START] has full path of name
 39874                                  ;       [USER_ID] Set
 39875                                  ;       [PROC_ID] Set
 39876                                  ; Function:
 39877                                  ;       Check for sharing violations on local file/device access
 39878                                  ; Outputs:
 39879                                  ;    Carry clear
 39880                                  ;       Sharing approved
 39881                                  ;    Carry set
 39882                                  ;       A sharing violation detected
 39883                                  ;           AX is error code
 39884                                  ; USES    ALL but DS
 39885                                  ;----------------------------------------------------------------------------
 39886                                  
 39887                                  	; 22/05/2019 - Retro DOS v4.0
 39888                                  SHARE_CHECK:
 39889                                  	; 26/07/2019
 39890 0000734F FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39891                                  shchk_retn:
 39892 00007353 C3                      	retn
 39893                                  
 39894                                  ; SHARE_VIOLATION
 39895                                  ;----------------------------------------------------------------------------
 39896                                  ; Inputs:
 39897                                  ;       [THISDPB] Set
 39898                                  ;       AX has error code
 39899                                  ; Function:
 39900                                  ;       Handle Sharing errors
 39901                                  ; Outputs:
 39902                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39903                                  ;       Carry clear if user wants a retry
 39904                                  ;
 39905                                  ; DS, ES, DI preserved, others destroyed
 39906                                  ;----------------------------------------------------------------------------
 39907                                  
 39908                                  SHARE_VIOLATION:
 39909 00007354 1E                      	PUSH    DS
 39910 00007355 06                      	PUSH	ES
 39911 00007356 57                      	PUSH    DI
 39912 00007357 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39913                                  	;mov	byte [ALLOWED],18h
 39914 0000735C C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39915 00007361 C42E[8A05]              	LES     BP,[THISDPB]
 39916 00007365 BF0100                  	MOV     DI,1			; Fake some registers
 39917 00007368 89F9                    	MOV     CX,DI
 39918                                  	;mov	dx,[es:bp+17]
 39919 0000736A 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39920 0000736E E89DDF                  	call	HARDERR
 39921 00007371 5F                      	POP     DI
 39922 00007372 07                      	POP	ES
 39923 00007373 1F                      	POP     DS
 39924 00007374 3C01                    	CMP     AL,1
 39925 00007376 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39926 00007378 F9                      	STC
 39927 00007379 C3                      	retn
 39928                                  
 39929                                  ;----------------------------------------------------------------------------
 39930                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39931                                  ;       NOT perform a close, it merely asserts that the sharing information
 39932                                  ;       for the SFT/UID/PID may be safely released.
 39933                                  ;
 39934                                  ;   Inputs:     ES:DI points to an SFT
 39935                                  ;   Outputs:    None
 39936                                  ;   Registers modified: all except DS,ES,DI
 39937                                  ;----------------------------------------------------------------------------
 39938                                  
 39939                                  ShareEnd:
 39940                                  	; 26/07/2019
 39941 0000737A FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39942 0000737E C3                      	retn
 39943                                  
 39944                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39945                                  ;----------------------------------------------------------------------------
 39946                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39947                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39948                                  ;
 39949                                  ;   Inputs:     ThisSFT points to the SFT
 39950                                  ;               WFP_Start points to the WFP
 39951                                  ;   Outputs:    Carry clear => successful entry
 39952                                  ;               Carry set => failed system call
 39953                                  ;   Registers modified: all
 39954                                  ;----------------------------------------------------------------------------
 39955                                  
 39956                                  ShareEnter:
 39957 0000737F 51                      	push	cx
 39958                                  retry:
 39959 00007380 8B0E[1A00]              	mov     cx,[RetryCount]
 39960                                  attempt:
 39961 00007384 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39962 00007388 31C0                    	XOR     AX,AX
 39963                                   	;mov	[es:di+51],axfff
 39964 0000738A 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39965 0000738E 51                      	push	cx
 39966 0000738F E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39967 00007392 59                      	pop	cx
 39968 00007393 730A                    	jnc	short done		; success, let the user see this
 39969 00007395 E8739E                  	call	Idle                    ; wait a while
 39970 00007398 E2EA                    	loop    attempt                 ; go back for another attempt
 39971 0000739A E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39972 0000739D 73E1                    	jnc	short retry		; user said to retry, go do it
 39973                                  done:
 39974 0000739F 59                      	pop	cx
 39975 000073A0 C3                      	retn
 39976                                  
 39977                                  ;============================================================================
 39978                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39979                                  ;============================================================================
 39980                                  ; 29/04/2019 - Retro DOS 4.0
 39981                                  
 39982                                  ;** EXEPATCH.ASM 
 39983                                  ;----------------------------------------------------------------------------
 39984                                  ;	Contains the foll:
 39985                                  ;
 39986                                  ;		- code to find and overlay buggy unpack code
 39987                                  ;		- new code to be overlayed on buggy unpack code 
 39988                                  ;		- old code sequence to identify buggy unpack code
 39989                                  ;
 39990                                  ;	Revision history:
 39991                                  ;
 39992                                  ;		Created: 5/14/90
 39993                                  ;----------------------------------------------------------------------------
 39994                                  
 39995                                  ;----------------------------------------------------------------------------
 39996                                  ;
 39997                                  ; M020 : Fix for rational bug - for details see routine header
 39998                                  ; M028 : 4b04 implementation
 39999                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40000                                  ; M032 : set turnoff bit only if DOS in HMA.
 40001                                  ; M033 : if IP < 2 then not exepacked.
 40002                                  ; M046 : support for a 4th version of exepacked files.
 40003                                  ; M068 : support for copy protected apps.
 40004                                  ; M071 : use A20OFF_COUNT of 10.
 40005                                  ;
 40006                                  ;----------------------------------------------------------------------------
 40007                                  
 40008                                  PATCH1_COM_OFFSET	EQU	06CH
 40009                                  PATCH1_OFFSET		EQU	028H
 40010                                  PATCH1_CHKSUM		EQU	0EF4EH
 40011                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40012                                  
 40013                                  PATCH2_COM_OFFSET	EQU	076H
 40014                                  PATCH2_OFFSET		EQU	032H
 40015                                  
 40016                                  	; The strings that start at offset 076h have two possible 
 40017                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40018                                  
 40019                                  PATCH2_CHKSUM		EQU	78B2H
 40020                                  CHKSUM2_LEN		EQU	119H/2
 40021                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40022                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40023                                  
 40024                                  PATCH3_COM_OFFSET	EQU	074H
 40025                                  PATCH3_OFFSET		EQU	032H
 40026                                  PATCH3_CHKSUM		EQU	4EDEH
 40027                                  CHKSUM3_LEN		EQU	117H/2
 40028                                  
 40029                                  ;**	Data structure passed for ExecReady call
 40030                                  ;
 40031                                  ;struc ERStruc
 40032                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40033                                  ; .ER_Flags:	resw	1
 40034                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40035                                  ; .ER_PSP:	resw	1	; PSP of the program
 40036                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40037                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40038                                  ; .size:
 40039                                  ;endstruc
 40040                                  
 40041                                  ;DOSCODE SEGMENT
 40042                                  
 40043                                  	; 22/05/2019 - Retro DOS v4.0
 40044                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40045                                  
 40046                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40047                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40048                                  
 40049                                  ; M028 - BEGIN
 40050                                  
 40051                                  ;--------------------------------------------------------------------------
 40052                                  ;
 40053                                  ;	Procedure Name		: ExecReady
 40054                                  ;
 40055                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40056                                  ;
 40057                                  ;--------------------------------------------------------------------------
 40058                                  
 40059                                  ExecReady:
 40060 000073A1 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40061                                  	;;test	word [si+2],1
 40062                                  	; 17/12/2022
 40063 000073A3 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40064                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40065 000073A7 7413                    	jz	short er_setver		; only setver for .COM files
 40066                                  
 40067                                  	;mov	ax,[si+8]
 40068 000073A9 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40069 000073AC 83C010                  	add	ax,10h
 40070 000073AF 8EC0                    	mov	es,ax
 40071                                  
 40072                                  	;mov	cx,[si+10]
 40073 000073B1 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40074                                  	;mov	cx,[si+12]
 40075 000073B4 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40076                                  
 40077                                  	;call	[ss:FixExePatch]
 40078 000073B7 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 40079                                  	
 40080                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40081                                  	;call	[ss:Rational386PatchPtr]
 40082                                  
 40083                                  er_setver:
 40084                                  	;;test	word [si+2],2		; Q: is this an overlay
 40085                                  	; 17/12/2022
 40086 000073BC F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40087                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40088 000073C0 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40089                                  					; N: set up lie version first
 40090 000073C2 1E                      	push	ds
 40091 000073C3 56                      	push	si
 40092                                  	;lds	si,[si+4]
 40093 000073C4 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40094 000073C7 E876ED                  	call	Scan_Execname1
 40095 000073CA E887ED                  	call	Scan_Special_Entries
 40096 000073CD 5E                      	pop	si
 40097 000073CE 1F                      	pop	ds
 40098                                  	;mov	es,[si+8]
 40099 000073CF 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40100 000073D2 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40101 000073D6 26A34000                	mov	[es:PDB.Version],ax
 40102                                  
 40103                                  er_chkdoshi:
 40104 000073DA 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40105 000073E0 741F                    	je	short er_done		; M032: N: done
 40106                                  
 40107                                  					; M068 - Start
 40108                                  	;mov	ax,[si+8]
 40109 000073E2 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40110                                  
 40111                                  	;or	byte [ss:DOS_FLAG],4
 40112 000073E5 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40113                                  					; ah = 25 & ah= 49. See dossym.inc 
 40114                                  					; under TAG M003 & M009 for 
 40115                                  					; explanation
 40116                                  	;;test	word [si+2],1
 40117                                  	; 17/12/2022
 40118 000073EB F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40119                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40120 000073EF 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40121                                  					;    a20off_psp and ret
 40122 000073F1 1E                         	push	ds
 40123 000073F2 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40124 000073F4 E88E02                  	call	IsCopyProt		; check if copy protected
 40125 000073F7 1F                      	pop	ds
 40126                                  
 40127                                  er_setA20:
 40128                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40129                                  	; is non-zero at this point it indicates that the A20 is to be 
 40130                                  	; turned off for that many int 21 calls made by the app. In 
 40131                                  	; addition the A20 has to be turned off when we exit from this 
 40132                                  	; call. Hence the inc.
 40133                                  
 40134 000073F8 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40135 000073FD 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40136                                  					; turned OFF.
 40137                                  er_done:				; M068 - End
 40138 00007401 31C0                    	xor	ax,ax
 40139 00007403 C3                      	retn
 40140                                  
 40141                                  ; M028 - END
 40142                                  
 40143                                  
 40144                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40145                                  %if 0
 40146                                  
 40147                                  ;----------------------------------------------------------------------------
 40148                                  ;
 40149                                  ; procedure : Rational386Patch
 40150                                  ;
 40151                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40152                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40153                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40154                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40155                                  ;
 40156                                  ; This routine applies patches to the Rational DOS Extender to work around
 40157                                  ; most of the register trashing bugs.
 40158                                  ;
 40159                                  ; Note that there are additional register trashing bugs not fixed by these
 40160                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40161                                  ; may be modified on interrupts.
 40162                                  ;
 40163                                  ; There are two different Rational DOS Extender patchs in this module.
 40164                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40165                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40166                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40167                                  ; or not.
 40168                                  ;
 40169                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40170                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40171                                  ; running in the HMA.
 40172                                  ;
 40173                                  ; This patch detection and replacement is based on an example supplied by
 40174                                  ; Ben Williams at Rational.
 40175                                  ;
 40176                                  ;----------------------------------------------------------------------------
 40177                                  
 40178                                  ; 22/05/2019 - Retro DOS v4.0
 40179                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40180                                  
 40181                                  ;----------------------------------------------------------------------------
 40182                                  ;
 40183                                  ; INPUT : ES = segment where program got loaded
 40184                                  ;
 40185                                  ;----------------------------------------------------------------------------
 40186                                  
 40187                                  rpFind1:
 40188                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40189                                  
 40190                                  rpFind1Len equ	$ - rpFind1
 40191                                  
 40192                                  ;	cli
 40193                                  ;	in	al, 21h
 40194                                  ;	pusha
 40195                                  ;	xor	ax, ax
 40196                                  ;	out	43h, al
 40197                                  ;	mov	dx, ...
 40198                                  
 40199                                  rpFind1a:
 40200                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40201                                  
 40202                                  rpFind1aLen equ	$ - rpFind1a
 40203                                  
 40204                                  ;	mov	al, 0Eh
 40205                                  ;	out	37h, al
 40206                                  ;	xor	ax, ax
 40207                                  ;	out	0F2h, al
 40208                                  
 40209                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40210                                  
 40211                                  rpFind2:
 40212                                  	db	0Fh, 20h, 0C0h
 40213                                  
 40214                                  rpFind2Len equ	$ - rpFind2
 40215                                  
 40216                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40217                                  
 40218                                  rpFind3:
 40219                                  	db	0Fh, 22h, 0C0h, 0EAh
 40220                                  
 40221                                  rpFind3Len equ	$ - rpFind3
 40222                                  
 40223                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40224                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40225                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40226                                  
 40227                                  ; note, there is no rpRepl1 string
 40228                                  
 40229                                  rpRepl2:
 40230                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40231                                  
 40232                                  rpRepl2Len equ	$ - rpRepl2
 40233                                  
 40234                                  ;	push	eax
 40235                                  ;	push	cx
 40236                                  ;	mov	eax, cr0
 40237                                  
 40238                                  rpRepl3:
 40239                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40240                                  
 40241                                  rpRepl3Len equ	$ - rpRepl3
 40242                                  
 40243                                  ;	mov	ss, bx
 40244                                  ;	pop	cx
 40245                                  ;	pop	eax
 40246                                  
 40247                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40248                                  
 40249                                  rpFind4:
 40250                                  	db	93h, 58h, 8Bh, 0CCh
 40251                                  
 40252                                  rpFind4Len equ	$ - rpFind4
 40253                                  
 40254                                  ;	xchg	bx, ax
 40255                                  ;	pop	ax
 40256                                  ;	mov	cx, sp
 40257                                  
 40258                                  rpFind5:
 40259                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40260                                  
 40261                                  rpFind5Len equ	$ - rpFind5
 40262                                  
 40263                                  ;	mov	ax, DE0Ch
 40264                                  ;	int	67h
 40265                                  ;	mov	sp, cx
 40266                                  ;	jmp	bx
 40267                                  
 40268                                  rpRepl4:
 40269                                  	db	93h, 58h, 8Bh, 0CCh
 40270                                  	db	02Eh, 066h, 0A3h
 40271                                  
 40272                                  rpRepl4o1Len equ $ - rpRepl4
 40273                                  
 40274                                  	db	00h, 00h
 40275                                  	db	02Eh, 066h, 89h, 36h
 40276                                  
 40277                                  rpRepl4o2Len equ $ - rpRepl4
 40278                                  
 40279                                  	db	00h, 00h
 40280                                  
 40281                                  rpRepl4Len equ	$ - rpRepl4
 40282                                  
 40283                                  ;	xchg	bx, ax
 40284                                  ;	pop	ax
 40285                                  ;	mov	cx, sp
 40286                                  ;	mov	dword ptr cs:[xxxx], eax
 40287                                  ;	mov	dword ptr cs:[xxxx], esi
 40288                                  
 40289                                  rpRepl5:
 40290                                  	db	8Bh, 0E1h
 40291                                  	db	2Eh, 66h, 0A1h
 40292                                  
 40293                                  rpRepl5o1Len equ $ - rpRepl5
 40294                                  
 40295                                  	db	00h, 00h
 40296                                  	db	2Eh, 66h, 8Bh, 36h
 40297                                  
 40298                                  rpRepl5o2Len equ $ - rpRepl5
 40299                                  
 40300                                  	db	00h, 00h
 40301                                  	db	0FFh, 0E3h
 40302                                  
 40303                                  rpRepl5Len equ	$ - rpRepl5
 40304                                  
 40305                                  ;	mov	sp, cx
 40306                                  ;	mov	eax, dword ptr cs:[xxxx]
 40307                                  ;	mov	esi, dword ptr cs:[xxxx]
 40308                                  ;	jmp	bx
 40309                                  
 40310                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40311                                  
 40312                                  rpFind6:
 40313                                  	db	0FAh, 52h, 51h
 40314                                  
 40315                                  rpFind6Len equ	$ - rpFind6
 40316                                  
 40317                                  ;	cli
 40318                                  ;	push	dx
 40319                                  ;	push	cx
 40320                                  
 40321                                  rpFind7a:
 40322                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40323                                  
 40324                                  rpFind7aLen equ	$ - rpFind7a
 40325                                  
 40326                                  ;	mov	ax, 0DE0Ch
 40327                                  ;	call	fword ptr es:[xxxx]
 40328                                  
 40329                                  rpFind7b:
 40330                                  	db	59h, 5Ah, 5Bh
 40331                                  
 40332                                  rpFind7bLen equ	$ - rpFind7b
 40333                                  
 40334                                  ;	pop	cx
 40335                                  ;	pop	dx
 40336                                  ;	pop	bx
 40337                                  
 40338                                  rpRepl6 :
 40339                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40340                                  
 40341                                  rpRepl6Len equ	$ - rpRepl6
 40342                                  
 40343                                  ;	cli
 40344                                  ;	push	eax
 40345                                  ;	push	ebx
 40346                                  ;	push	ecx
 40347                                  ;	push	edx
 40348                                  
 40349                                  rpRepl7:
 40350                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40351                                  
 40352                                  rpRepl7Len equ	$ - rpRepl7
 40353                                  
 40354                                  ;	pop	edx
 40355                                  ;	pop	ecx
 40356                                  ;	pop	ebx
 40357                                  ;	pop	eax
 40358                                  ;	pop	bx
 40359                                  
 40360                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40361                                  
 40362                                  rpFind8:
 40363                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40364                                  
 40365                                  rpFind8Len equ	$ - rpFind8
 40366                                  
 40367                                  ;	pusha
 40368                                  ;	push	es
 40369                                  ;	push	ds
 40370                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40371                                  ;	mov	ds, ax
 40372                                  
 40373                                  rpFind9 :
 40374                                  	db	1Fh, 07h, 61h
 40375                                  
 40376                                  rpFind9Len equ	$ - rpFind9
 40377                                  
 40378                                  ;	pop	ds
 40379                                  ;	pop	es
 40380                                  ;	popa
 40381                                  
 40382                                  rpRepl8:
 40383                                   	db	66h, 60h, 06h, 1Eh
 40384                                  
 40385                                  rpRepl8Len equ	$ - rpRepl8
 40386                                  
 40387                                  ;	pushad
 40388                                  ;	push	es
 40389                                  ;	push	ds
 40390                                  
 40391                                  rpRepl9:
 40392                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40393                                  
 40394                                  rpRepl9Len equ	$ - rpRepl9
 40395                                  
 40396                                  ;	pop	ds
 40397                                  ;	pop	es
 40398                                  ;	popad
 40399                                  ;	retn			;no need to jmp back to main-line
 40400                                  
 40401                                  ;----------------------------------------------------------------------------
 40402                                  
 40403                                  struc SearchPair
 40404                                   .sp_off1: resw 1	; offset of 1st search string
 40405                                   .sp_len1: resw 1	; length of 1st search string
 40406                                   .sp_off2: resw 1	; 2nd string
 40407                                   .sp_len2: resw 1	; 2nd string
 40408                                   .sp_diff: resw 1	; max difference between offsets
 40409                                   .size:
 40410                                  endstruc
 40411                                  
 40412                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40413                                  
 40414                                  rpBug1Strs:
 40415                                  	dw	rpFind2
 40416                                  	dw	rpFind2Len ; 3
 40417                                  	dw	rpFind3
 40418                                  	dw	rpFind3Len ; 4
 40419                                  	dw	20h
 40420                                  
 40421                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40422                                  
 40423                                  rpBug2Strs:
 40424                                  	dw	rpFind4
 40425                                  	dw	rpFind4Len ; 4
 40426                                  	dw	rpFind5
 40427                                  	dw	rpFind5Len ; 9
 40428                                  	dw	80h
 40429                                  
 40430                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40431                                  
 40432                                  rpBug3Strs:
 40433                                  	dw	rpFind6
 40434                                  	dw	rpFind6Len ; 3
 40435                                  	dw	rpFind7a
 40436                                  	dw	rpFind7aLen ; 7
 40437                                  	dw	80h
 40438                                  
 40439                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40440                                  
 40441                                  rpBug4Strs:
 40442                                  	dw	rpFind8
 40443                                  	dw	4
 40444                                  	dw	rpFind9
 40445                                  	dw	rpFind9Len ; 3
 40446                                  	dw	80h
 40447                                  
 40448                                  ;----------------------------------------------------------------------------
 40449                                  
 40450                                  struc StackVars
 40451                                   .sv_wVersion:	resw 1		; Rational extender version #
 40452                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40453                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40454                                   .size:
 40455                                  endstruc
 40456                                  
 40457                                  ;----------------------------------------------------------------------------
 40458                                  
 40459                                  ; 22/05/2019 - Retro DOS v4.0
 40460                                  
 40461                                  Rational386Patch:
 40462                                  	; Do a few quick checks to see if this looks like a Rational
 40463                                  	; Extended application. Hopefully this will quickly weed out
 40464                                  	; most non Rational apps.
 40465                                  
 40466                                  	cmp	word [es:0],395		; version number goes here - versions
 40467                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40468                                  
 40469                                  	cmp	word [es:0Ch],20h	; always has this value here
 40470                                  	jne	short rp3QuickOut
 40471                                  
 40472                                  	push	ax
 40473                                  
 40474                                  	mov	ax,18h 			; extender has 18h at
 40475                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40476                                  	jne	short rp3QO_ax
 40477                                  	cmp	[es:28],ax
 40478                                  	jne	short rp3QO_ax
 40479                                  	cmp	[es:36],ax
 40480                                  	je	short rp3Maybe
 40481                                  rp3QO_ax:
 40482                                  	pop	ax
 40483                                  rp3QuickOut:
 40484                                  	retn
 40485                                  
 40486                                  ; It might be the rational extender, do more extensive checking
 40487                                  
 40488                                  rp3Maybe:
 40489                                  	cld
 40490                                  	push	bx			; note ax pushed above
 40491                                  	push	cx
 40492                                  	push	dx
 40493                                  	push	si
 40494                                  	push	di
 40495                                  	push	es
 40496                                  	push	ds			; we use all of them
 40497                                  	push	bp
 40498                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40499                                  	mov	bp,sp
 40500                                  
 40501                                  	push	cs
 40502                                  	pop	ds
 40503                                  
 40504                                  	mov	ax,[es:0]		; save version #
 40505                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40506                                  	mov	[bp],ax	
 40507                                  					; check that binary version # matches
 40508                                  	call	VerifyVersion		;   ascii string
 40509                                  	jne	short rp3Exit_j
 40510                                  
 40511                                  ; Looks like this is it, find where to put the patch code.  The
 40512                                  ; patch will be located on top of Rational code specific to 80286
 40513                                  ; processors, so these patchs MUST NOT be applied if running on
 40514                                  ; an 80286 system.
 40515                                  
 40516                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40517                                  
 40518                                  	mov	cx,4500h		; force search len to 4700h (searches
 40519                                  	;mov	[bp+2],cx
 40520                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40521                                  
 40522                                  	mov	es,[es:20h]		; es=code segment
 40523                                  
 40524                                  	mov	si,rpFind1		; string to find
 40525                                  	mov	dx,rpFind1Len ; 10	; length to match
 40526                                  	call	ScanCodeSeq		; look for code seq
 40527                                  	jz	short rpGotPatch
 40528                                  
 40529                                  ; According to Rational, some very old versions of the extender may not
 40530                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40531                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40532                                  
 40533                                  	mov	si,rpFind1a
 40534                                  	mov	dx,rpFind1aLen  ;8
 40535                                  	call	ScanCodeSeq
 40536                                  	jz	short rpGotPatch
 40537                                  
 40538                                  rp3Exit_j:
 40539                                  	jmp	rp3Exit
 40540                                  
 40541                                  ; Found the location to write patch code! DI = offset in code seg.
 40542                                  
 40543                                  rpGotPatch:
 40544                                  	;mov	[bp+4],di
 40545                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40546                                  
 40547                                  ;----------------------------------------------------------------------------
 40548                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40549                                  
 40550                                  	;cmp	word [bp+0],381
 40551                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40552                                  	cmp	word [bp],381
 40553                                  	jae	short rpBug2			;   < 3.81
 40554                                  
 40555                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40556                                  	call	FindBadCode
 40557                                  	jc	short rpBug2
 40558                                  
 40559                                  ; si = rpFind2 offset, di = rpFind3 offset
 40560                                  
 40561                                  	push	di
 40562                                  	mov	di,si				; rpFind2 offset
 40563                                  	mov	dx,rpFind2Len ; 3
 40564                                  
 40565                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40566                                  	jne	short rp_no_cx
 40567                                  
 40568                                  	dec	di				;   yes, gobble up push cx too
 40569                                  	inc	dx
 40570                                  rp_no_cx:
 40571                                  	mov	si,rpRepl2			; patch out find2 sequence
 40572                                  	mov	cx,rpRepl2Len  ; 6
 40573                                  	call	GenPatch
 40574                                  
 40575                                  	pop	di				; rpFind3 offset
 40576                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40577                                  	jne	short rp_no_cx2
 40578                                  
 40579                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40580                                  rp_no_cx2:
 40581                                  	;mov	ax,[bp+4]
 40582                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40583                                  	;mov	[es:di+4],ax
 40584                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40585                                  
 40586                                  	push	di				; save find3 offset
 40587                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40588                                  	mov	cx,rpRepl3Len ; 5
 40589                                  	call	CopyPatch
 40590                                  
 40591                                  	pop	bx				; find3 offset
 40592                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40593                                  	call	GenJump 			; jmp back from patch area
 40594                                  	;mov	[bp+4],di
 40595                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40596                                  						;   area pointer
 40597                                  
 40598                                  ;----------------------------------------------------------------------------
 40599                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40600                                  
 40601                                  rpBug2:
 40602                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40603                                  	call	FindBadCode
 40604                                  	jc	short rpBug3
 40605                                  
 40606                                  ; si = rpFind4 offset, di = rpFind5 offset
 40607                                  
 40608                                  	;push	word [bp+4]
 40609                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40610                                  						;   (where repl4 goes)
 40611                                  	push	di				; save find5 offset
 40612                                  
 40613                                  	mov	di,si
 40614                                  	mov	dx,rpFind4Len ; 4
 40615                                  	mov	si,rpRepl4
 40616                                  	mov	cx,rpRepl4Len ; 15
 40617                                  	call	GenPatch			; patch out find4 code
 40618                                  
 40619                                  	pop	di				; find5 offset
 40620                                  	add	di,5				; keep 5 bytes of find5 code
 40621                                  	;mov	bx,[bp+4]
 40622                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40623                                  	push	bx				; save repl5 location
 40624                                  	call	GenJump
 40625                                  
 40626                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40627                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40628                                  	call	CopyPatch			;   so no need to jmp back to
 40629                                  						;   main-line code
 40630                                  
 40631                                  ; patches have been made, now update the patch code to store/load dwords just
 40632                                  ; after the code in the patch area
 40633                                  
 40634                                  	pop	di				; repl5 location
 40635                                  	pop	si				; repl4 location
 40636                                  
 40637                                  	;mov	ax,[bp+4]
 40638                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40639                                  
 40640                                  	;mov	[es:si+7],ax
 40641                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40642                                  	;mov	[es:di+5],ax
 40643                                  	mov	[es:di+rpRepl5o1Len],ax
 40644                                  	add	ax,4
 40645                                  	;mov	[es:si+0Dh],ax
 40646                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40647                                  	;mov	[es:di+0Bh],ax
 40648                                  	mov	[es:di+rpRepl5o2Len],ax
 40649                                  
 40650                                  	;add	word [bp+4],8
 40651                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40652                                  						; patch area
 40653                                  
 40654                                  ;----------------------------------------------------------------------------
 40655                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40656                                  
 40657                                  rpBug3:
 40658                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40659                                  	call	FindBadCode
 40660                                  	jc	short rpBug4
 40661                                  
 40662                                  	;add	di,9
 40663                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40664                                  	push	si				;   code and locate find7b
 40665                                  	mov	si,rpFind7b			;   sequence
 40666                                  	mov	dx,rpFind7bLen ; 3
 40667                                  	call	ScanCodeSeq_di
 40668                                  	pop	si
 40669                                  	jnz	short rpBug4
 40670                                  
 40671                                  	push	di				; save find7b code offset
 40672                                  
 40673                                  	mov	di,si
 40674                                  	mov	dx,rpFind6Len ; 3
 40675                                  	mov	si,rpRepl6
 40676                                  	mov	cx,rpRepl6Len ; 9
 40677                                  	call	GenPatch			; patch out find6 code
 40678                                  
 40679                                  	pop	di
 40680                                  	mov	dx,rpFind7bLen ; 3
 40681                                  	mov	si,rpRepl7
 40682                                  	mov	cx,rpRepl7Len ; 9
 40683                                  	call	GenPatch			; patch out find7b code
 40684                                  
 40685                                  ;----------------------------------------------------------------------------
 40686                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40687                                  
 40688                                  rpBug4:
 40689                                  	;cmp	word [bp+0],360
 40690                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40691                                  	cmp	word [bp],360
 40692                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40693                                  
 40694                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40695                                  	call	FindBadCode
 40696                                  	jc	short rp3Exit
 40697                                  
 40698                                  	push	di				; save find9 code offset
 40699                                  
 40700                                  	mov	di,si
 40701                                  	mov	dx,3
 40702                                  	mov	si,rpRepl8
 40703                                  	mov	cx,rpRepl8Len ; 4
 40704                                  	call	GenPatch			; patch out find8 code
 40705                                  
 40706                                  	pop	di				; find9 offset
 40707                                  	;mov	bx,[bp+4]
 40708                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40709                                  	call	GenJump 			;   patch area
 40710                                  
 40711                                  	mov	si,rpRepl9			; copy replacement code to
 40712                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40713                                  	call	CopyPatch			;   so no jmp back to main-line
 40714                                  
 40715                                  rp3Exit:
 40716                                  	add	sp,StackVars.size
 40717                                  	pop	bp
 40718                                  	pop	ds
 40719                                  	pop	es
 40720                                  	pop	di
 40721                                  	pop	si
 40722                                  	pop	dx
 40723                                  	pop	cx
 40724                                  	pop	bx
 40725                                  	pop	ax
 40726                                  	retn
 40727                                  
 40728                                  ;----------------------------------------------------------------------------
 40729                                  ;
 40730                                  ; FindBadCode
 40731                                  ;
 40732                                  ; Searches Rational code segment looking for a pair of find strings (all
 40733                                  ; patches have at least two find strings).
 40734                                  ;
 40735                                  ; Entry:
 40736                                  ;	ES    = code segment to search
 40737                                  ;	DS:BX = search pair structure for this search
 40738                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40739                                  ;
 40740                                  ; Exit:
 40741                                  ;	CY flag clear if both strings found, and
 40742                                  ;	SI    = offset in ES of 1st string
 40743                                  ;	DI    = offset in ES of 2nd string
 40744                                  ;	CY set if either string not found, or strings too far apart
 40745                                  ;
 40746                                  ; Used:
 40747                                  ;	CX
 40748                                  ;
 40749                                  ;----------------------------------------------------------------------------
 40750                                  
 40751                                  ;struc SearchPair
 40752                                  ; .sp_off1: resw 1	; offset of 1st search string
 40753                                  ; .sp_len1: resw 1	; length of 1st search string
 40754                                  ; .sp_off2: resw 1	; 2nd string
 40755                                  ; .sp_len2: resw 1	; 2nd string
 40756                                  ; .sp_diff: resw 1	; max difference between offsets
 40757                                  ; .size:
 40758                                  ;endstruc
 40759                                  
 40760                                  FindBadCode:
 40761                                  	;mov	cx,[bp+2]
 40762                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40763                                  
 40764                                  	mov	si,[bx]	; mov si,[bx+0]
 40765                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40766                                  	
 40767                                  	;mov	dx,[bx+2]
 40768                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40769                                  	call	ScanCodeSeq
 40770                                  	jnz	short fbc_error		; done if 1st not found
 40771                                  
 40772                                  	push	di			; save 1st string offset
 40773                                  
 40774                                  	;mov	si,[bx+4]
 40775                                  	mov	si,[bx+SearchPair.sp_off2]
 40776                                  	;mov	dx,[bx+6]
 40777                                  	mov	dx,[bx+SearchPair.sp_len2]
 40778                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40779                                  
 40780                                  	pop	si			; restore 1st string offset
 40781                                  	jnz	short fbc_error
 40782                                  
 40783                                  	mov	ax,di			; sanity check that
 40784                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40785                                  	jc	short fbc_error
 40786                                  	;cmp	ax,[bx+8]
 40787                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40788                                  	ja	short fbc_error
 40789                                  
 40790                                  	clc
 40791                                  	retn
 40792                                  
 40793                                  fbc_error:
 40794                                  	stc
 40795                                  	retn
 40796                                  
 40797                                  ;----------------------------------------------------------------------------
 40798                                  ;
 40799                                  ; GenPatch
 40800                                  ;
 40801                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40802                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40803                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40804                                  ; code.
 40805                                  ;
 40806                                  ; Entry:
 40807                                  ;	ES:DI = start of buggy code to be patched
 40808                                  ;	DX    = length of buggy code to be patched
 40809                                  ;	DS:SI = replacement patch code
 40810                                  ;	CX    = length of replacement patch code
 40811                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40812                                  ;
 40813                                  ; Exit:
 40814                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40815                                  ;
 40816                                  ; Used:
 40817                                  ;	AX, BX, SI, Flags
 40818                                  ;
 40819                                  ;----------------------------------------------------------------------------
 40820                                  
 40821                                  GenPatch:
 40822                                  	push	di			;save offset of buggy code
 40823                                  
 40824                                  	;mov	bx,[bp+4]
 40825                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40826                                  					;jump from buggy code to patch area
 40827                                  	call	GenJump
 40828                                  
 40829                                  	call	CopyPatch		;copy replacement code to patch area
 40830                                  
 40831                                  	pop	bx			;offset of buggy code + buggy code
 40832                                  	add	bx,dx			;  length = return from patch offset
 40833                                  
 40834                                  	call	GenJump 		;jump from patch area back to main-
 40835                                  	;mov	[bp+4],di
 40836                                  	mov	[bp+StackVars.sv_pPatch],di
 40837                                  					;  line code, update patch pointer
 40838                                  	retn
 40839                                  
 40840                                  ;----------------------------------------------------------------------------
 40841                                  ;
 40842                                  ; CopyPatch
 40843                                  ;
 40844                                  ; Copies patch code to patch location.
 40845                                  ;
 40846                                  ; Entry:
 40847                                  ;	DS:SI = patch code to be copied
 40848                                  ;	ES    = segment of code to patch
 40849                                  ;	CX    = length of code to copy
 40850                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40851                                  ;
 40852                                  ; Exit:
 40853                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40854                                  ;
 40855                                  ; Used:
 40856                                  ;	SI, Flags
 40857                                  ;
 40858                                  ;----------------------------------------------------------------------------
 40859                                  
 40860                                  CopyPatch:
 40861                                  	push	cx
 40862                                  	;mov	di,[bp+4]
 40863                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40864                                  	cld
 40865                                  	rep movsb
 40866                                  	pop	cx
 40867                                  	;mov	[bp+4],di
 40868                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40869                                  	retn
 40870                                  
 40871                                  ;----------------------------------------------------------------------------
 40872                                  ;
 40873                                  ; GenJump
 40874                                  ;
 40875                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40876                                  ;
 40877                                  ; Entry:
 40878                                  ;	ES:DI = from location (where to put jmp instruction)
 40879                                  ;	BX    = to location (where to jump to)
 40880                                  ;
 40881                                  ; Exit:
 40882                                  ;	DI = byte after generated jump
 40883                                  ;
 40884                                  ; Used:
 40885                                  ;	AX
 40886                                  ;
 40887                                  ;----------------------------------------------------------------------------
 40888                                  
 40889                                  GenJump:
 40890                                  	mov	al,0E9h		; jmp rel16 opcode
 40891                                  	stosb
 40892                                  
 40893                                  	mov	ax,bx		; calc offset to 'to' location
 40894                                  	sub	ax,di
 40895                                  	sub	ax,2
 40896                                  
 40897                                  	stosw			; output offset
 40898                                  
 40899                                  	retn
 40900                                  
 40901                                  ;----------------------------------------------------------------------------
 40902                                  ;
 40903                                  ; ScanCodeSeq
 40904                                  ;
 40905                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40906                                  ;
 40907                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40908                                  ;
 40909                                  ;----------------------------------------------------------------------------
 40910                                  
 40911                                  ScanCodeSeq:
 40912                                  	mov	di,200h
 40913                                  ScanCodeSeq_di:
 40914                                  	push	cx
 40915                                  	sub	cx,dx
 40916                                  	inc	cx
 40917                                  scsagain:
 40918                                  	push	si
 40919                                  	push	di
 40920                                  	push	cx
 40921                                  	mov	cx,dx
 40922                                  	rep	cmpsb
 40923                                  	pop	cx
 40924                                  	pop	di
 40925                                  	pop	si
 40926                                  	je	short scsfound
 40927                                  	inc	di
 40928                                  	loop	scsagain
 40929                                  scsfound:
 40930                                  	pop	cx
 40931                                  vvexit:		; 18/12/2022
 40932                                  	retn
 40933                                  	
 40934                                  ;----------------------------------------------------------------------------
 40935                                  ;
 40936                                  ; VerifyVersion
 40937                                  ;
 40938                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40939                                  ; from ES:2A.
 40940                                  ;
 40941                                  ;       Entry: AX = binary version number 
 40942                                  ;       Exit : Z flag set if version numbers match
 40943                                  ;
 40944                                  ;----------------------------------------------------------------------------
 40945                                  
 40946                                  VerifyVersion:
 40947                                  	mov	si,[es:2Ah]		; offset of version number
 40948                                  					;  in ascii
 40949                                  	mov	bl,10
 40950                                  	add	si,3			; point to last digit
 40951                                  
 40952                                  	call	VVDigit
 40953                                  	jne	short vvexit
 40954                                  	call	VVDigit
 40955                                  	jne	short vvexit
 40956                                  	cmp	byte [es:si],'.'
 40957                                  	jne	short vvexit
 40958                                  	dec	si
 40959                                  	;call	VVDigit
 40960                                  	; 18/12/2022
 40961                                  	;jmp	short VVDigit
 40962                                  ;vvexit:
 40963                                  	;retn
 40964                                  VVDigit:
 40965                                  	div	bl
 40966                                  	add	ah,'0'
 40967                                  	dec	si
 40968                                  	cmp	[es:si+1],ah
 40969                                  	mov	ah,0			; do not xor or sub we need Z
 40970                                  	retn
 40971                                  
 40972                                  %endif
 40973                                  
 40974                                  ;-----------------------------------------------------------------------
 40975                                  
 40976                                  ; 23/05/2019 - Retro DOS v4.0
 40977                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40978                                  
 40979                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40980                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40981                                  
 40982                                  exepatch_start:	 ; label byte
 40983                                  
 40984                                  	; The following is the code that'll be layed over the buggy unpack
 40985                                  	; code.
 40986                                  str1:
 40987 00007404 06                      	db  06h	  		;push	es		 
 40988 00007405 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40989                                  
 40990                                  first_stop equ	$-str1
 40991                                  			
 40992 00007407 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40993                                  
 40994                                  first:  ; label	byte
 40995                                  
 40996 00007409 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40997 0000740B 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40998 0000740D BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40999 00007410 57                      	db  57h	    		;push	di
 41000 00007411 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41001 00007414 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41002 00007416 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41003 00007418 47                      	db  47h	    		;inc	di			
 41004 00007419 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41005 0000741B 5F                      	db  5Fh	    		;pop	di
 41006 0000741C 58                      	db  58h	    		;pop	ax
 41007                                  
 41008                                  second_stop equ	$-first
 41009                                  
 41010 0000741D 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41011                                  
 41012                                  second: ; label	byte
 41013                                  
 41014 0000741F 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41015                                  		    		;NextRec:				
 41016 00007421 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41017                                  		    		;norm_agn:				
 41018 00007424 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41019 00007426 F7D0                    	db  0F7h,0D0h		;not	ax		
 41020 00007428 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41021 0000742A 7413                    	db  74h,13h		;jz	short SI_ok			
 41022 0000742C 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41023 0000742E 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41024 00007431 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41025 00007433 7308                    	db  73h,08h		;jnc	short SItoDS			
 41026 00007435 F7DA                    	db  0F7h,0DAh		;neg	dx			
 41027 00007437 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41028 00007439 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41029 0000743B 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41030                                  				;SItoDS: 				
 41031 0000743D 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41032                                  				;SI_ok:					
 41033 0000743F 87F7                    	db  87h,0F7h		;xchg	si,di			
 41034 00007441 1E                      	db  1Eh			;push	ds			
 41035 00007442 06                      	db  06h			;push	es			
 41036 00007443 1F                      	db  1Fh			;pop	ds			
 41037 00007444 07                      	db  07h			;pop	es			
 41038 00007445 FECD                    	db  0FEh,0CDh		;dec	ch			
 41039 00007447 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41040 00007449 AC                      	db  0ACh		;lodsb			
 41041 0000744A 92                      	db  92h			;xchg	dx,ax
 41042 0000744B 4E                      	db  4Eh			;dec	si
 41043 0000744C AD                      	db  0ADh		;lodsw			
 41044 0000744D 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41045 0000744F 46                      	db  46h			;inc	si		
 41046 00007450 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41047 00007452 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41048 00007454 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41049 00007456 7505                    	db  75h,05h		;jne	short TryEnum
 41050 00007458 AC                      	db  0ACh		;lodsb				
 41051 00007459 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41052                                  
 41053                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41054 0000745B EB06                    	db  0EBh,06h		;jmp	short TryNext
 41055                                  
 41056                                  				;TryEnum:
 41057 0000745D 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41058 0000745F 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41059 00007461 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41060                                  				;TryNext:
 41061                                  
 41062 00007463 92                      	db  92h			;xchg	dx,ax
 41063                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41064                                  
 41065 00007464 A801                    	db  0A8h,01h		;test	al,1			
 41066 00007466 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41067 00007468 9090                    	db  90h,90h		;nop,nop
 41068                                  	
 41069                                  last_stop equ $-second
 41070                                  size_str1 equ $-str1
 41071                                  
 41072                                  	; The following is the code that we need to look for in the exe
 41073                                  	; file.
 41074                                  
 41075                                  scan_patch1: ; label byte
 41076                                  
 41077 0000746A 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41078 0000746C 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41079 0000746E 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41080 00007470 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41081 00007472 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41082 00007474 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41083 00007477 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41084 0000747A B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41085 0000747C F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41086 0000747E 47                      	db  47h			;inc	di			
 41087 0000747F 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41088 00007481 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41089 00007483 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41090 00007485 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41091 00007487 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41092                                  				;NextRec:
 41093 0000748A B104                    	db  0B1h,04h		;mov	cl,4
 41094 0000748C 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41095 0000748E F7D0                    	db  0F7h,0D0h		;not	ax		
 41096 00007490 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41097 00007492 7409                    	db  74h,09h		;jz	short SI_ok
 41098 00007494 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41099 00007496 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41100 00007498 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41101 0000749A 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41102                                  	       			;SI_ok:
 41103 0000749D 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41104 0000749F F7D0                    	db  0F7h,0D0h		;not	ax
 41105 000074A1 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41106 000074A3 7409                    	db  74h,09h		;jz	short DI_ok
 41107 000074A5 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41108 000074A7 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41109 000074A9 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41110 000074AB 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41111                                  				;DI_ok:
 41112                                  
 41113                                  size_scan_patch1 equ $-scan_patch1
 41114                                  
 41115                                  scan_patch2: ; label byte
 41116                                  			
 41117 000074AE 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41118 000074B0 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41119 000074B2 48                      	db  48h			;dec	ax
 41120 000074B3 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41121 000074B5 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41122 000074B7 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41123 000074BA B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41124 000074BD B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41125 000074BF F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41126 000074C1 47                      	db  47h			;inc	di			
 41127 000074C2 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41128 000074C4 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41129 000074C6 48                      	db  48h			;dec	ax
 41130 000074C7 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41131 000074C9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41132                                  				;NextRec:
 41133 000074CC B104                    	db  0B1h,04h		;mov	cl,4
 41134 000074CE 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41135 000074D0 F7D0                    	db  0F7h,0D0h		;not	ax		
 41136 000074D2 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41137 000074D4 740A                    	db  74h,0Ah		;jz	short SI_ok
 41138 000074D6 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41139 000074D8 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41140 000074DA 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41141 000074DC 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41142                                  				;or	si,0FFF0H
 41143                                  				;SI_ok:
 41144 000074E0 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41145 000074E2 F7D0                    	db  0F7h,0D0h		;not	ax
 41146 000074E4 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41147 000074E6 740A                    	db  74h,0Ah		;jz	short DI_ok
 41148 000074E8 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41149 000074EA 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41150 000074EC 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41151 000074EE 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41152                                  				;or	di,0FFF0H
 41153                                  				;DI_ok:
 41154                                  
 41155                                  size_scan_patch2 equ $-scan_patch2
 41156                                  
 41157                                  scan_patch3: ; label byte
 41158                                  
 41159 000074F2 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41160 000074F4 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41161 000074F6 48                      	db  48h			;dec	ax
 41162 000074F7 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41163 000074F9 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41164 000074FB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41165 000074FE B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41166 00007501 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41167 00007503 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41168 00007505 47                      	db  47h			;inc	di			
 41169 00007506 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41170 00007508 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41171 0000750A 48                      	db  48h			;dec	ax
 41172 0000750B 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41173 0000750D BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41174                                  				;NextRec:
 41175 00007510 B104                    	db  0B1h,04h		;mov	cl,4
 41176 00007512 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41177 00007514 F7D0                    	db  0F7h,0D0h		;not	ax		
 41178 00007516 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41179 00007518 7409                    	db  74h,09h		;jz	short SI_ok
 41180 0000751A 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41181 0000751C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41182 0000751E 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41183 00007520 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41184                                  				;SI_ok:
 41185 00007523 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41186 00007525 F7D0                    	db  0F7h,0D0h		;not	ax
 41187 00007527 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41188 00007529 7409                    	db  74h,09h		;jz	short DI_ok
 41189 0000752B 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41190 0000752D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41191 0000752F 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41192 00007531 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41193                                  				;DI_ok:
 41194                                  
 41195                                  size_scan_patch3 equ $-scan_patch3
 41196                                  
 41197                                  scan_com: ; label byte
 41198                                  
 41199 00007534 AC                      	db  0ACh		;lodsb			
 41200 00007535 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41201 00007537 4E                      	db  4Eh			;dec	si
 41202 00007538 AD                      	db  0ADh		;lodsw			
 41203 00007539 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41204 0000753B 46                      	db  46h			;inc	si		
 41205 0000753C 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41206 0000753E 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41207 00007540 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41208 00007542 7506                    	db  75h,06h		;jne	short TryEnum
 41209 00007544 AC                      	db  0ACh		;lodsb				
 41210 00007545 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41211 00007547 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41212                                  				;TryEnum:
 41213 0000754A 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41214 0000754C 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41215 0000754E F3A4                    	db  0F3h,0A4h		;rep movsb			
 41216                                  				;TryNext:
 41217 00007550 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41218 00007552 A801                    	db  0A8h,01h		;test	al,1			
 41219                                  ;	db  74h,0BAh		;jz	short NextRec			
 41220                                  
 41221                                  size_scan_com	equ	$-scan_com
 41222                                  
 41223                                  ;-----------------------------------------------------------------------
 41224                                  
 41225                                  ; 23/05/2019 - Retro DOS v4.0
 41226                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41227                                  
 41228                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41229                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41230                                  
 41231                                  ExePatch:
 41232                                  	; 28/12/2022 - Retro DOS v4.1
 41233                                  	;call	ExePackPatch
 41234                                  	;;call	word [ss:RationalPatchPtr]
 41235                                  	;retn
 41236                                  	; 28/12/2022
 41237                                  	;jmp	short ExePackPatch
 41238                                  
 41239                                  ;-----------------------------------------------------------------------
 41240                                  ;
 41241                                  ; Procedure Name 	: ExePackPatch
 41242                                  ;
 41243                                  ; Inputs	 	: DS 			-> DOSDATA
 41244                                  ;			  ES:0 			-> read in image
 41245                                  ;			  ax:cx = start cs:ip of program
 41246                                  ; Output		:		
 41247                                  ;
 41248                                  ;	1. If ES <= 0fffh
 41249                                  ;	   2. if exepack signature ('RB') found
 41250                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41251                                  ;	       	 4. if rest of the code & checksum compares
 41252                                  ;	  	    5. overlay buggy code with code in 
 41253                                  ;		       doscode:str1.
 41254                                  ;		 6. endif
 41255                                  ;	      7. endif
 41256                                  ;	   8. endif
 41257                                  ;	9. endif
 41258                                  ;
 41259                                  ;
 41260                                  ; Uses			: NONE
 41261                                  ;
 41262                                  ;-----------------------------------------------------------------------
 41263                                  		
 41264                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41265                                  	; 23/05/2019 - Retro DOS v4.0	
 41266                                  ExePackPatch:
 41267 00007554 53                      	push	bx
 41268 00007555 8CC3                    	mov	bx,es			; bx has load segment
 41269 00007557 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41270 0000755B 7602                    	jbe	short ep_cont		; N: 
 41271 0000755D 5B                      	pop	bx			; Y: no need to patch
 41272 0000755E C3                      	retn
 41273                                  ep_cont:
 41274 0000755F 1E                      	push	ds
 41275 00007560 06                      	push	es
 41276 00007561 50                      	push	ax
 41277 00007562 51                      	push	cx
 41278 00007563 56                      	push	si
 41279 00007564 57                      	push	di
 41280                                  	
 41281                                  		; M033 - start
 41282                                  		; exepacked programs have an IP of 12h (>=2)
 41283                                  
 41284 00007565 83E902                  	sub	cx,2			; Q: is IP >=2 
 41285 00007568 7303                    	jnb	short epp_1		; N: exit
 41286 0000756A E9C500                  	jmp	ep_notpacked
 41287                                  					; ax:cx now points to location of
 41288                                  					; 'RB' if this is an exepacked file.
 41289                                  		; M033 - end
 41290                                  epp_1:
 41291 0000756D 89CF                    	mov	di,cx
 41292 0000756F 8EC0                    	mov	es,ax
 41293 00007571 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41294                                  					; unpack_offset
 41295                                  
 41296 00007576 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41297                                  	;ljne	ep_notpacked
 41298 0000757B 7403                    	je	short epp_2
 41299 0000757D E9B200                  	jmp	ep_notpacked
 41300                                  epp_2:
 41301 00007580 0E                      	push	cs
 41302 00007581 1F                      	pop	ds			; set ds to cs
 41303                                  
 41304                                  	;add	di,6Ch
 41305 00007582 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41306                                  					;          file where we hope to find
 41307                                  					;	   scan string. 
 41308                                  
 41309 00007585 E8B200                  	call	chk_common_str		; check for match
 41310                                  
 41311 00007588 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41312                                  					; N: check at patch2_offset
 41313                                  					; Y: check for rest of patch string
 41314 0000758A BE[6A74]                	mov	si,scan_patch1
 41315                                  					; ds:si -> scan string 
 41316 0000758D 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41317                                  
 41318                                  	;add	di,28h
 41319                                  	; 07/12/2022
 41320 00007592 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41321                                  					;          file where we hope to find
 41322                                  					;	   scan string. 
 41323                                  	;mov	cx,68
 41324 00007595 B94400                  	mov	cx,size_scan_patch1
 41325                                  	;mov	bx,142
 41326 00007598 BB8E00                  	mov	bx,CHKSUM1_LEN
 41327                                  	;mov	ax,0EF4Eh
 41328 0000759B B84EEF                  	mov	ax,PATCH1_CHKSUM
 41329 0000759E E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41330 000075A1 7208                    	jc	short ep_done1		; Q: did we pass the test
 41331                                  					; N: exit
 41332                                  					; Y: overlay code with new 
 41333 000075A3 BE[0474]                	mov	si,str1
 41334                                  	;mov	cx,102
 41335 000075A6 B96600                  	mov	cx,size_str1
 41336                                  	
 41337 000075A9 F3A4                    	rep	movsb
 41338                                  ep_done1:
 41339 000075AB E98400                  	jmp	ep_done
 41340                                  
 41341                                  ep_chkpatch2:
 41342                                  	;mov	di,76h
 41343 000075AE BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41344                                  					; in another version of unpack
 41345 000075B1 E88600                  	call	chk_common_str		; check for match
 41346                                  
 41347 000075B4 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41348                                  					; N: check for patch3_offset
 41349                                  					; Y: check for rest of patch string
 41350                                  
 41351 000075B6 BE[AE74]                	mov	si,scan_patch2
 41352                                  					; ds:si -> scan string 
 41353                                  	;mov	di,32h
 41354 000075B9 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41355                                  					;          file where we hope to find
 41356                                  	;mov	cx,68			;	   scan string. 
 41357 000075BC B94400                  	mov	cx,size_scan_patch2
 41358                                  	;mov	bx,140
 41359 000075BF BB8C00                  	mov	bx,CHKSUM2_LEN
 41360                                  	;mov	ax,78B2h
 41361 000075C2 B8B278                  	mov	ax,PATCH2_CHKSUM
 41362 000075C5 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41363                                  
 41364                                  					; M046 - Start
 41365                                  					; Q: did we pass the test
 41366 000075C8 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41367                                  					; N: try with a different chksum
 41368                                  
 41369                                  
 41370 000075CA BE[AE74]                	mov	si,scan_patch2
 41371                                  					; ds:si -> scan string 
 41372                                  	;mov	cx,68
 41373 000075CD B94400                  	mov	cx,size_scan_patch2
 41374                                  	;mov	bx,129
 41375 000075D0 BB8100                  	mov	bx,CHKSUM2A_LEN
 41376                                  	;mov	ax,1C47h
 41377 000075D3 B8471C                  	mov	ax,PATCH2A_CHKSUM
 41378 000075D6 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41379                                  					; Q: did we pass the test
 41380 000075D9 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41381                                  					; Y: overlay code with new 
 41382                                  						
 41383                                  ep_patchcode2:			       	; M046 - End
 41384 000075DB BE[0474]                	mov	si,str1
 41385                                  	;mov	cx,3
 41386 000075DE B90300                  	mov	cx,first_stop
 41387 000075E1 F3A4                    	rep	movsb
 41388 000075E3 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41389 000075E6 AB                      	stosw
 41390 000075E7 83C602                  	add	si,2
 41391                                  	;mov	cx,20
 41392 000075EA B91400                  	mov	cx,second_stop
 41393 000075ED F3A4                    	rep	movsb
 41394 000075EF AB                      	stosw				; put in dec ax and nop
 41395 000075F0 83C602                  	add	si,2
 41396                                  	;mov	cx,75
 41397 000075F3 B94B00                  	mov	cx,last_stop
 41398 000075F6 F3A4                    	rep	movsb
 41399 000075F8 EB38                    	jmp	short ep_done
 41400                                  
 41401                                  ep_chkpatch3:
 41402                                  	;mov	di,74h
 41403 000075FA BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41404                                  					; in another version of unpack
 41405 000075FD E83A00                  	call	chk_common_str		; check for match
 41406                                  
 41407 00007600 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41408                                  					; N: exit
 41409                                  					; Y: check for rest of patch string
 41410 00007602 BE[F274]                	mov	si,scan_patch3
 41411                                  					; ds:si -> scan string 
 41412                                  	;mov	di,32h
 41413 00007605 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41414                                  					;          file where we hope to find
 41415                                  					;	   scan string. 
 41416                                  	;mov	cx,66
 41417 00007608 B94200                  	mov	cx,size_scan_patch3
 41418                                  	;mov	bx,139
 41419 0000760B BB8B00                  	mov	bx,CHKSUM3_LEN
 41420                                  	;mov	ax,4EDEh
 41421 0000760E B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41422 00007611 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41423 00007614 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41424                                  					; N: exit
 41425                                  					; Y: overlay code with new 
 41426 00007616 BE[0474]                	mov	si,str1
 41427                                  	;mv	cx,3
 41428 00007619 B90300                  	mov	cx,first_stop
 41429 0000761C F3A4                    	rep	movsb
 41430 0000761E B048                    	mov	al,48h			; al = opcode for dec ax
 41431 00007620 AA                      	stosb
 41432 00007621 83C602                  	add	si,2
 41433                                  	;mov	cx,20
 41434 00007624 B91400                  	mov	cx,second_stop
 41435 00007627 F3A4                    	rep	movsb
 41436 00007629 AA                      	stosb				; put in dec ax
 41437 0000762A 83C602                  	add	si,2
 41438                                  	;mov	cx,75
 41439 0000762D B94B00                  	mov	cx,last_stop
 41440 00007630 F3A4                    	rep	movsb
 41441                                  
 41442                                  ep_notpacked:
 41443                                  	;stc
 41444                                  ep_done:
 41445 00007632 5F                      	pop	di
 41446 00007633 5E                      	pop	si
 41447 00007634 59                      	pop	cx
 41448 00007635 58                      	pop	ax
 41449 00007636 07                      	pop	es
 41450 00007637 1F                      	pop	ds
 41451 00007638 5B                      	pop	bx
 41452 00007639 C3                      	retn
 41453                                  
 41454                                  ;-------------------------------------------------------------------------
 41455                                  ;
 41456                                  ; 	Procedure Name	: chk_common_str
 41457                                  ;
 41458                                  ;	Input		: DS = DOSCODE
 41459                                  ;			; ES:DI points to string in packed file
 41460                                  ;
 41461                                  ;	Output		; Z if match else NZ
 41462                                  ;
 41463                                  ;-------------------------------------------------------------------------
 41464                                  
 41465                                  	; 23/05/2019 - Retro DOS v4.0
 41466                                  chk_common_str:
 41467 0000763A BE[3475]                	mov	si,scan_com
 41468                                  					; ds:si -> scan string 
 41469                                  	;mov	cx,32
 41470 0000763D B92000                  	mov	cx,size_scan_com
 41471                                  
 41472 00007640 F3A6                    	repe	cmpsb	       
 41473                                  
 41474                                  					; M046 - start
 41475                                  	; a fourth possible version of these exepacked programs have a 
 41476                                  	; 056h instead of 06Bh. See scan_com above
 41477                                  	;
 41478                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41479                                  	;
 41480                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41481                                  	; we shall try to match the rest of the string
 41482                                  	;
 41483                                  
 41484 00007642 7409                    	jz	short ccs_done
 41485 00007644 26807DFF56              	cmp	byte [es:di-1],56h
 41486 00007649 7502                    	jnz	short ccs_done
 41487                                  
 41488 0000764B F3A6                    	repe	cmpsb	    
 41489                                  ccs_done:				; M046 - end
 41490 0000764D C3                      	retn
 41491                                  
 41492                                  ;-------------------------------------------------------------------------
 41493                                  ;
 41494                                  ;	Procedure Name	: chk_patchsum
 41495                                  ;
 41496                                  ;	Input		: DS:SI -> string we're looking for
 41497                                  ;			: ES:DI -> offset in packed file
 41498                                  ;			: CX 	= scan length
 41499                                  ;			: BX	= length of check sum
 41500                                  ;			: AX 	= value of check sum
 41501                                  ;
 41502                                  ;	Output		: if patch & check sum compare
 41503                                  ;				NC
 41504                                  ;			  else
 41505                                  ;				CY
 41506                                  ;
 41507                                  ;	Uses		: AX, BX, CX, SI
 41508                                  ;
 41509                                  ;-------------------------------------------------------------------------
 41510                                  
 41511                                  	; 23/05/2019 - Retro DOS v4.0
 41512                                  chk_patchsum:
 41513 0000764E 57                      	push	di
 41514                                  
 41515 0000764F F3A6                    	repe	cmpsb			   
 41516                                  
 41517 00007651 7518                    	jnz	short cp_fail		; Q: does the patch match
 41518                                  					; N: exit
 41519                                  					; Y:	
 41520                                  
 41521                                  		; we do a check sum starting from the location of the 
 41522                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41523                                  		; unpacking code.
 41524                                  
 41525 00007653 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41526 00007658 89D9                    	mov	cx,bx			; cx = length of check sum
 41527                                  
 41528 0000765A 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41529 0000765C 31C0                    	xor	ax,ax
 41530                                  ep_chksum:
 41531 0000765E 260305                  	add	ax,[es:di]
 41532 00007661 83C702                  	add	di,2
 41533 00007664 E2F8                    	loop	ep_chksum
 41534                                  
 41535 00007666 5F                      	pop	di			; restore di
 41536                                  
 41537 00007667 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41538                                  	;jne	short cp_fail		; N: exit
 41539                                  					; Y: 
 41540                                  	; 25/09/2023
 41541                                  	;clc	
 41542                                  	;retn
 41543 00007669 74E2                    	je	short ccs_done ; cf=0
 41544                                  	
 41545                                  cp_fail:
 41546 0000766B F9                      	stc
 41547 0000766C C3                      	retn
 41548                                  
 41549                                  ; 28/12/2022 - Retro DOS v4.1
 41550                                  %if 0
 41551                                  ;--------------------------------------------------------------------------- 
 41552                                  
 41553                                  
 41554                                  ; M020 : BEGIN
 41555                                  ;
 41556                                  ;---------------------------------------------------------------------------
 41557                                  ;
 41558                                  ; procedure : RationalPatch
 41559                                  ;
 41560                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41561                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41562                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41563                                  ;
 41564                                  ; THE BUG is in the following code sequence:
 41565                                  ;
 41566                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41567                                  ;90		even				; word align
 41568                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41569                                  ;e8 xx xx	call	set_A20			; enable A20
 41570                                  ;
 41571                                  ; This patch routine replaces the mov & the loop with a far call into a
 41572                                  ; routine in DOS data segment which is in low memory (because A20 line
 41573                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41574                                  ; a mov & loop.
 41575                                  ;
 41576                                  ; Identification of Buggy Rational EXE
 41577                                  ; ====================================
 41578                                  ;
 41579                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41580                                  ;
 41581                                  ; OFFSET				Contains
 41582                                  ; ------				--------
 41583                                  ; 0000h			100 times Version number in binary
 41584                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41585                                  ;
 41586                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41587                                  ;
 41588                                  ; 002ah			offset where version number is stored in ASCII
 41589                                  ;				e.g. '3.48A'
 41590                                  ;
 41591                                  ; 0030h			offset of copyright string. Copyright strings either
 41592                                  ;			start with "DOS/16M Copyright...." or
 41593                                  ;			"Copyright.....". The string contains
 41594                                  ;			"Rational Systems, Inc."
 41595                                  ;
 41596                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41597                                  ;				from the program image
 41598                                  ; 0016h			word : size of buggy code segment
 41599                                  ;
 41600                                  ;	Buggy code is definite to start after offset 200h in its segment
 41601                                  ;
 41602                                  ;----------------------------------------------------------------------------
 41603                                  
 41604                                  ; 23/05/2019 - Retro DOS v4.0
 41605                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41606                                  
 41607                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41608                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41609                                  
 41610                                  RScanPattern1:
 41611                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41612                                  
 41613                                  RLen1 equ $ - RScanPattern1
 41614                                  
 41615                                  RScanPattern2:
 41616                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41617                                  
 41618                                  RLen2 equ $ - RScanPattern2
 41619                                  
 41620                                  RScanPattern3:
 41621                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41622                                  
 41623                                  RLen3 equ $ - RScanPattern2
 41624                                  
 41625                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41626                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41627                                  
 41628                                  ;----------------------------------------------------------------------------
 41629                                  ;
 41630                                  ; INPUT : ES = segment where program got loaded
 41631                                  ;
 41632                                  ;----------------------------------------------------------------------------
 41633                                  
 41634                                  RationalPatch:
 41635                                  	cld
 41636                                  	push	ax
 41637                                  	push	bx
 41638                                  	push	cx
 41639                                  	push	dx
 41640                                  	push	si
 41641                                  	push	di
 41642                                  	push	es
 41643                                  	push	ds			; we use all of them
 41644                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41645                                  	push	cs
 41646                                  	pop	ds
 41647                                  	
 41648                                  	mov	si,RScanPattern1
 41649                                  	;mov	cx,10
 41650                                  	mov	cx,RLen1
 41651                                  	rep	cmpsb			; do we have the pattern ?
 41652                                  	jne	short rpexit
 41653                                  	mov	ax,[es:0]
 41654                                  	cmp	ax,348			; is it a buggy version ?
 41655                                  	jb	short rpexit
 41656                                  	cmp	ax,383			; is it a buggy version
 41657                                  	ja	short rpexit
 41658                                  
 41659                                  	call	VerifyVersion
 41660                                  	jne	short rpexit
 41661                                  
 41662                                  	mov	cx,[es:16h]		; Length of buggy code seg
 41663                                  	sub	cx,200h			; Length we search (we start
 41664                                  					;  at offset 200h)
 41665                                  	mov	es,[es:20h]		; es=buggy code segment
 41666                                  	mov	si,RScanPattern2
 41667                                  	;mov	dx,8	
 41668                                  	mov	dx,RLen2
 41669                                  	call	ScanCodeSeq		; look for code seq with nop
 41670                                  	jz	short rpfound
 41671                                  
 41672                                  	mov	si,RScanPattern3
 41673                                  	;mov	dx,15
 41674                                  	mov	dx,RLen3
 41675                                  	call	ScanCodeSeq		; look for code seq w/o nop
 41676                                  	jnz	short rpexit
 41677                                  
 41678                                  rpfound:
 41679                                  	
 41680                                  ;	we set up a far call into DOS data
 41681                                  ;	dx has the length of the code seq we were searching for
 41682                                  
 41683                                  	mov	al,9Ah			; far call opcode
 41684                                  	stosb
 41685                                  	mov	ax,RatBugCode
 41686                                  	stosw
 41687                                  	mov	ax,ss
 41688                                  	stosw
 41689                                  	mov	cx,dx
 41690                                  	sub	cx,6			; filler (with NOPs)
 41691                                  	mov	al,90h
 41692                                  	rep	stosb
 41693                                  rpexit:
 41694                                  	pop	ds
 41695                                  	pop	es
 41696                                  	pop	di
 41697                                  	pop	si
 41698                                  	pop	dx
 41699                                  	pop	cx
 41700                                  	pop	bx
 41701                                  	pop	ax
 41702                                  	retn
 41703                                  
 41704                                  ; M020 END
 41705                                  
 41706                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41707                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41708                                  
 41709                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41710                                  
 41711                                  ;----------------------------------------------------------------------------
 41712                                  ;
 41713                                  ; ScanCodeSeq
 41714                                  ;
 41715                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41716                                  ;
 41717                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41718                                  ;
 41719                                  ;----------------------------------------------------------------------------
 41720                                  
 41721                                  ScanCodeSeq:
 41722                                  	; 17/12/2022
 41723                                  	mov	di,200h
 41724                                  ;ScanCodeSeq_di:
 41725                                  	push	cx
 41726                                  	sub	cx,dx
 41727                                  	inc	cx
 41728                                  	; 17/12/2022
 41729                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41730                                  	;mov	di,200h
 41731                                  scsagain:
 41732                                  	push	si
 41733                                  	push	di
 41734                                  	push	cx
 41735                                  	mov	cx,dx
 41736                                  	rep	cmpsb
 41737                                  	pop	cx
 41738                                  	pop	di
 41739                                  	pop	si
 41740                                  	je	short scsfound
 41741                                  	inc	di
 41742                                  	loop	scsagain
 41743                                  scsfound:
 41744                                  	pop	cx
 41745                                  vvexit:		; 18/12/2022
 41746                                  	retn
 41747                                  
 41748                                  
 41749                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41750                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41751                                  
 41752                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41753                                  
 41754                                  ;----------------------------------------------------------------------------
 41755                                  ;
 41756                                  ; VerifyVersion
 41757                                  ;
 41758                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41759                                  ; from ES:2A.
 41760                                  ;
 41761                                  ;       Entry: AX = binary version number 
 41762                                  ;       Exit : Z flag set if version numbers match
 41763                                  ;
 41764                                  ;----------------------------------------------------------------------------
 41765                                  
 41766                                  VerifyVersion:
 41767                                  	mov	si,[es:2Ah]		; offset of version number
 41768                                  					;  in ascii
 41769                                  	mov	bl,10
 41770                                  	add	si,3			; point to last digit
 41771                                  
 41772                                  	call	VVDigit
 41773                                  	jne	short vvexit
 41774                                  	call	VVDigit
 41775                                  	jne	short vvexit
 41776                                  	cmp	byte [es:si],'.' ; 2Eh
 41777                                  	jne	short vvexit
 41778                                  	dec	si
 41779                                  	;call	VVDigit
 41780                                  	; 18/12/2022
 41781                                  	;jmp	short VVDigit
 41782                                  ;vvexit:
 41783                                  	;retn
 41784                                  VVDigit:
 41785                                  	div	bl
 41786                                  	add	ah,'0' ; 30h
 41787                                  	dec	si
 41788                                  	cmp	[es:si+1],ah
 41789                                  	mov	ah,0			; do not xor or sub we need Z
 41790                                  	retn
 41791                                  
 41792                                  ;--------------------------------------------------------------------------- 
 41793                                  %endif	; 28/12/2022
 41794                                  
 41795                                  ;---------------------------------------------------------------------------
 41796                                  ;
 41797                                  ;	M068
 41798                                  ;
 41799                                  ; 	Procedure Name	: IsCopyProt
 41800                                  ;
 41801                                  ;	Inputs		: DS:100 -> start of com file just read in
 41802                                  ;
 41803                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41804                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41805                                  ;			  copy protect scheme that relies on the A20 line
 41806                                  ;			  being turned off for it's scheme to work.
 41807                                  ;
 41808                                  ;			  Note: The int 21 function dispatcher will turn 
 41809                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41810                                  ;				and dec the A20OFF_COUNT before	iretting 
 41811                                  ;				to the user. 
 41812                                  ;
 41813                                  ;	Uses		: ES, DI, SI, CX
 41814                                  ;
 41815                                  ;---------------------------------------------------------------------------
 41816                                  
 41817                                  ; 23/05/2019 - Retro DOS v4.0
 41818                                  
 41819                                  CPStartOffset	EQU	0175h
 41820                                  CPID1Offset	EQU	011Bh
 41821                                  CPID2Offset	EQU	0173h
 41822                                  CPID3Offset	EQU	0146h
 41823                                  CPID4Offset	EQU	0124h
 41824                                  ID1		EQU	05343h
 41825                                  ID2		EQU	05044h
 41826                                  ID3		EQU	0F413h
 41827                                  ID4		EQU	08000h
 41828                                  
 41829                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41830                                  
 41831                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41832                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41833                                  
 41834                                  CPScanPattern:
 41835 0000766D 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41836 00007671 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41837 00007675 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41838 0000767B 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41839 0000767F B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41840 00007682 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41841                                  
 41842                                  CPSPlen	EQU $ - CPScanPattern
 41843                                  
 41844                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41845                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41846                                  
 41847                                  IsCopyProt:
 41848 00007685 813E1B014353            	cmp	word [CPID1Offset],ID1
 41849 0000768B 752D                    	jne	short CP_done
 41850                                  
 41851 0000768D 813E73014450            	cmp	word [CPID2Offset],ID2
 41852 00007693 7525                    	jne	short CP_done
 41853                                  
 41854 00007695 813E460113F4            	cmp	word [CPID3Offset],ID3
 41855 0000769B 751D                    	jne	short CP_done
 41856                                  
 41857 0000769D 813E24010080            	cmp	word [CPID4Offset],ID4
 41858 000076A3 7515                    	jne	short CP_done
 41859                                  
 41860 000076A5 0E                      	push	cs
 41861 000076A6 07                      	pop	es
 41862 000076A7 BF[6D76]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41863                                  
 41864 000076AA BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41865                                  					; of pattern
 41866                                  
 41867 000076AD B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41868 000076B0 F3A6                    	repe	cmpsb
 41869 000076B2 7506                    	jnz	short CP_done
 41870                                  
 41871 000076B4 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41872                                  CP_done:
 41873 000076BA C3                      	retn
 41874                                  	
 41875                                  ;DOSCODE ENDS
 41876                                  
 41877                                  	;END
 41878                                  
 41879                                  ;----------------------------------------------------------------------------
 41880                                  
 41881                                  ;align 2 ; 05/09/2018 (Error!)
 41882                                  
 41883                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41884                                  ;align 16 ; 08/09/2018 (OK.)
 41885 000076BB 90                      align 2
 41886                                  
 41887                                  ; 06/08/2018 - Retro DOS v3.0
 41888                                  ;============================================================================
 41889                                  ; MSINIT.ASM
 41890                                  ;============================================================================
 41891                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41892                                  ;
 41893                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41894                                  ;
 41895                                  	; 15/07/2018 - Retro DOS v3.0
 41896                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41897                                  
 41898                                  ; temp iret instruction
 41899                                  
 41900                                  
 41901                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41902                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41903                                  
 41904                                  initiret: ; MSDOS 6.0
 41905                                  SYSBUF:
 41906                                  ;IRETT: ; 06/05/2019
 41907 000076BC CF                      	iret
 41908                                  
 41909                                  ; 22/04/2019 - Retro DOS v4.0
 41910                                  
 41911                                  ; pointer to the BIOS data segment that will be available just to the
 41912                                  ; initialization code
 41913                                  
 41914 000076BD 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41915                                  
 41916                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41917                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41918                                  
 41919                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41920                                  
 41921                                  ParaRound:
 41922 000076BF 83C00F                  	add	ax, 15
 41923 000076C2 D1D8                    	rcr	ax, 1
 41924 000076C4 D1E8                    	shr	ax, 1
 41925 000076C6 D1E8                    	shr	ax, 1
 41926 000076C8 D1E8                    	shr	ax, 1
 41927 000076CA C3                      	retn
 41928                                  
 41929                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41930                                  
 41931                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41932                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41933                                  	
 41934                                  	; 30/05/2019
 41935                                  	; 22/04/2019 - Retro DOS v4.0
 41936                                  	; 07/07/2018 - Retro DOS v3.0
 41937                                  	; Retro DOS v2.0 - 03/03/2018
 41938                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41939                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41940                                  DOSINIT:
 41941                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41942                                  	;
 41943                                  	; Far call from SYSINIT
 41944                                  	; DX = Memory size in paragraphs
 41945                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41946                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41947                                  	;
 41948                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41949                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41950                                  
 41951 000076CB FA                              CLI
 41952 000076CC FC                              CLD
 41953                                  
 41954                                  	; 03/11/2022
 41955                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41956                                  	
 41957                                  	; 17/12/2022
 41958                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41959                                  	;push	dx ; =*=		; save parameters from BIOS
 41960                                  	
 41961 000076CD 56                      	push	si
 41962 000076CE 1E                      	push	ds
 41963 000076CF 57                      	push	di			;save di (ptr to BiosComBlock)
 41964                                  
 41965 000076D0 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41966                                  
 41967                                  ; First, move the DOS data segment to its final location in low memory
 41968                                  
 41969                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41970                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41971 000076D2 B8[4C7B]                	mov	ax,MEMSTRT		; get offset of end of init code
 41972                                  
 41973                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41974                                  	;and	ax,~15	; 0FFF0h	; boundary
 41975                                  
 41976                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41977                                  					; code segment
 41978                                  
 41979                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41980 000076D5 83C00F                  	add	ax,15			; round to nearest paragraph
 41981 000076D8 83E0F0                  	and	ax,~15			; boundary
 41982                                  
 41983 000076DB 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41984                                  					; code segment
 41985                                  	; 05/12/2022
 41986                                  	; 30/04/2019 - Retro DOS v4.0
 41987                                  	;xor	si,si
 41988                                  	
 41989 000076DD 8CC8                    	mov	ax,cs
 41990 000076DF 8ED8                    	mov	ds,ax			; ds = current code segment
 41991                                  					; DS:SI now points to dosdata
 41992                                  
 41993                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41994                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41995                                  					;  BData segment. Cannot use
 41996                                  					;  getdseg macro here!!!
 41997                                  	; 17/12/2022
 41998 000076E1 8E06[BD76]              	mov	es,[InitBioDataSeg]
 41999                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42000                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42001                                  
 42002                                  	;mov	es,[es:3]
 42003 000076E5 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42004                                  
 42005 000076EA 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42006                                  
 42007                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42008                                  	;mov	cx,4976  ; 25/05/2019
 42009                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42010                                  	;mov	cx,4962
 42011                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42012 000076EC B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42013 000076EF F3A4                    	rep	movsb			; move data to final location
 42014                                  	
 42015 000076F1 5F                      	pop	di			; restore ptr to BiosComBlock
 42016 000076F2 1F                      	pop	ds			; restore parms from BIOS
 42017 000076F3 5E                      	pop	si
 42018                                  	; 17/12/2022
 42019                                  	;pop	dx ; 30/05/2019	
 42020                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42021                                  	;pop	dx ; =*=		
 42022                                  
 42023 000076F4 06                      	push	es
 42024 000076F5 1E                      	push	ds
 42025 000076F6 07                      	pop	es			; es:si -> device chain
 42026 000076F7 1F                      	pop	ds			; ds points to dosdata
 42027                                  
 42028                                  ;SR;
 42029                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42030                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42031                                  ;lie table handling for device drivers. This can be expanded later on to
 42032                                  ;establish a communication block from the BIOS to the DOS.
 42033                                  
 42034                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42035                                  	;mov	[1042h],bx
 42036 000076F8 893E[4010]              	mov	[BiosDataPtr],di
 42037 000076FC 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42038                                  
 42039 00007700 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42040                                  
 42041                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42042                                  
 42043 00007705 2E8C1E[B450]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42044 0000770A 2E8C1E[B850]            	mov	[cs:LowInt24Addr+2],ds
 42045 0000770F 2E8C1E[BC50]            	mov	[cs:LowInt28Addr+2],ds
 42046                                  
 42047                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42048                                  	;mov	[584h],sp
 42049                                  	;mov	[586h],ss
 42050 00007714 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42051 00007718 8926[8405]              	mov	[USER_SP],sp
 42052 0000771C 8C16[8605]              	mov	[USER_SS],ss
 42053                                  
 42054 00007720 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42055 00007722 8ED0                    	mov	ss,ax
 42056                                  
 42057                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42058                                  	;mov	sp,offset dosdata:dskstack
 42059 00007724 BC[2009]                	mov	sp,DSKSTACK
 42060                                  
 42061                                  ;M023
 42062                                  ; Init patch ptrs to default values
 42063                                  
 42064                                  	;mov	word [1212h],RetExePatch
 42065                                  	;mov	word [1214h],RetExePatch
 42066                                  	;mov	word [61h],RetExePatch
 42067 00007727 C706[F811][2662]        	mov	word [FixExePatch],RetExePatch	; M023
 42068                                  	; 28/12/2022 - Retro DOS v4.1
 42069                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42070 0000772D C706[6100][2662]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42071                                  
 42072                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42073                                  %if 0	
 42074                                  
 42075                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42076                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42077                                  ; running in the HMA.
 42078                                  
 42079                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42080                                  	cmp	al,2		;   386 or later?
 42081                                  	mov	ax,Rational386Patch
 42082                                  	jae	short di_set_patch
 42083                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42084                                  di_set_patch:
 42085                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42086                                  
 42087                                  %endif
 42088                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42089                                  
 42090 00007733 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42091                                  
 42092                                  	; ax now holds segment of DOS code
 42093 00007735 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42094                                  
 42095 00007738 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42096 0000773C 8936[4800]              	mov	word [NULDEV],si
 42097                                  ;SR;
 42098                                  ; There are some locations in the Win386 instance data structures
 42099                                  ; which need to be set up with the DOS data segment. First, initialize
 42100                                  ; the segment part of the instance table pointer in the SIS.
 42101                                  
 42102                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42103 00007740 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42104                                  
 42105                                  ; Now initialize the segment part of the pointer to the data in each
 42106                                  ; instance table entry.
 42107                                  
 42108 00007744 56                      	push	si		; preserve pointer to device chain
 42109                                  	; 18/12/2022
 42110                                  	; cx = 0
 42111 00007745 B107                    	mov	cl,7
 42112                                  	;mov	cx,7		; There are 7 entries in the instance table
 42113                                  				; M019
 42114                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42115 00007747 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42116                                  Instance_init_loop:
 42117 0000774A 8C1C                    	mov	[si],ds		; set offset in instance entry
 42118                                  	;add	si,6
 42119 0000774C 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42120 0000774F E2F9                    	loop	Instance_init_loop
 42121                                  
 42122                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42123                                  
 42124                                  	; 18/12/2022
 42125 00007751 B105                    	mov	cl,5
 42126                                  	;mov	cx,5		; There are five entries in the instance table
 42127                                  
 42128                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42129                                  	;mov	si,11EDh	; point si to segment field
 42130 00007753 BE[D311]                	mov	si,OldInstanceJunk+6
 42131                                  OldInstance_init_loop:
 42132 00007756 8C1C                    	mov	[si],ds		; set offset in instance entry
 42133 00007758 83C606                  	add	si,6		; move on to next entry
 42134 0000775B E2F9                    	loop	OldInstance_init_loop
 42135 0000775D 5E                      	pop	si		; restore pointer to device chain
 42136                                  
 42137                                  ; End of WIN386 2.xx compatibility bullshit
 42138                                  
 42139                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42140                                  %if 0	
 42141                                     	; 30/04/2019
 42142                                  	;push	es
 42143                                  	;pop	ds
 42144                                  			; ds:si points to console device
 42145                                  
 42146                                  	; 24/04/2019 - Retro DOS v4.0
 42147                                  
 42148                                  	; 15/07/2018
 42149                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42150                                  	; (Set INT 2Ah handler address to an 'IRET')
 42151                                  
 42152                                  	; need crit vector inited to use deviocall
 42153                                  	;push	ds			; preserve segment of device chain
 42154                                  	push	es ; 30/04/2019
 42155                                  
 42156                                  %endif
 42157                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42158 0000775E 06                      	push	es
 42159                                  	; 17/12/2022
 42160                                  	;pop	ds
 42161                                  	;push	ds
 42162                                  
 42163 0000775F 31C0                    	xor	ax,ax
 42164 00007761 8ED8                    	mov	ds,ax			; point DS to int vector table
 42165 00007763 B8[BC76]                	mov	ax,initiret
 42166                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42167 00007766 A3A800                  	mov	[addr_int_ibm],ax
 42168 00007769 8CC8                    	mov	ax,cs
 42169                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42170 0000776B A3AA00                  	mov	[addr_int_ibm+2],ax
 42171 0000776E 1F                      	pop	ds			; restore segment of device chain
 42172                                  
 42173 0000776F E81C02                  	call	CHARINIT  		; initialize console driver
 42174 00007772 56                      	push	si			; save pointer to header
 42175                                  
 42176 00007773 16                      	push	ss			; move pointer to dos data...
 42177 00007774 07                      	pop	es			; ...into ES
 42178                                  
 42179                                  	;initialize sft for file 0 (CON)
 42180                                  
 42181                                          ; 07/07/2018 - Retro DOS v3.0
 42182                                  	; 24/04/2019 - Retro DOS v4.0
 42183                                  	;mov	di,SFTABL+6 
 42184 00007775 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42185 00007778 B80300                          MOV     AX,3
 42186 0000777B AB                              STOSW           	; Refcount
 42187 0000777C FEC8                            DEC     AL
 42188 0000777E AB                              STOSW           	; Access rd/wr, compatibility
 42189 0000777F 30C0                            XOR     AL,AL
 42190 00007781 AA                              STOSB           	; attribute
 42191                                  	;mov	al,0C3h
 42192 00007782 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42193 00007784 AB                      	STOSW			; flags
 42194 00007785 89F0                            mov	ax,si
 42195 00007787 AB                              stosw			; device pointer in devptr	
 42196 00007788 8CD8                            mov	ax,ds
 42197 0000778A AB                      	stosw
 42198 0000778B 31C0                    	xor	ax,ax	; 0
 42199 0000778D AB                      	stosw			; firclus
 42200 0000778E AB                      	stosw			; time
 42201 0000778F AB                      	stosw			; date
 42202 00007790 48                      	dec	ax	; -1
 42203 00007791 AB                      	stosw			; size
 42204 00007792 AB                      	stosw
 42205 00007793 40                      	inc	ax	; 0
 42206 00007794 AB                      	stosw			; position
 42207 00007795 AB                      	stosw
 42208                                  	;add	di,7
 42209 00007796 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42210                                  				; point at name
 42211                                  	;add	si,10
 42212 00007799 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42213                                  				; point to name
 42214 0000779C B90400                  	mov	cx,4
 42215 0000779F F3A5                    	rep	movsw		; name
 42216 000077A1 B103                    	mov	cl,3
 42217 000077A3 B020                    	mov	al," "
 42218 000077A5 F3AA                    	rep	stosb		; extension
 42219                                  
 42220 000077A7 5E                      	pop	si		; get back pointer to header
 42221                                  
 42222                                  				; mark device as CON I/O
 42223                                  	; 15/07/2018
 42224                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42225 000077A8 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42226                                  	; 12/03/2018
 42227                                  	;mov	[ss:32h],si
 42228 000077AC 368936[3200]            	MOV     [SS:BCON],SI
 42229                                  	;mov	[ss:34h],ds
 42230 000077B1 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42231                                  
 42232                                  	; initialize each device until the clock device is found
 42233                                  
 42234                                  CHAR_INIT_LOOP:
 42235 000077B6 C534                            LDS     SI,[SI]			; AUX device
 42236 000077B8 E8D301                  	call	CHARINIT 
 42237                                         	;15/07/2018
 42238                                  	;test	byte [SI+4],8
 42239 000077BB F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42240 000077BF 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42241                                  	; 12/03/2018
 42242                                  	;mov	[ss:2Eh],si
 42243 000077C1 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42244                                  	;mov	[ss:30h],ds
 42245 000077C6 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42246                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42247                                  
 42248                                  	;mov	bp,4970			; bp = pointer to free mem
 42249                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42250                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42251                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42252 000077CB BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42253                                  
 42254 000077CE 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42255 000077D3 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42256                                  PERDRV:
 42257                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42258 000077D8 C534                            LDS	SI,[SI]			; Next device
 42259 000077DA 83FEFF                          CMP	SI,-1	; 0FFFFh
 42260 000077DD 7479                    	JZ	SHORT CONTINIT
 42261                                  
 42262 000077DF E8AC01                          call	CHARINIT
 42263                                  
 42264                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42265                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42266                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42267                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42268                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42269                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42270                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42271                                  
 42272                                          ; 15/07/2018
 42273                                  	;test	word [SI+4],8000h		; DEVTYP
 42274                                          ; 17/12/2022
 42275                                  	;test	byte [SI+5],80h
 42276 000077E2 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42277                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42278 000077E6 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42279                                  
 42280 000077E8 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42281 000077ED 30ED                    	XOR     CH,CH
 42282                                          ; 07/07/2018
 42283                                  	;MOV	[SI+10],CL		; Number of units in name field
 42284 000077EF 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42285 000077F2 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42286 000077F7 30F6                    	XOR     DH,DH
 42287 000077F9 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42288 000077FE 1E                      	PUSH    DS
 42289 000077FF 56                              PUSH    SI
 42290 00007800 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42291                                  
 42292                                  PERUNIT:
 42293 00007805 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42294 00007807 43                              INC     BX
 42295 00007808 43                              INC     BX                      ; On to next BPB
 42296                                  	; 15/12/2022
 42297                                  	; 07/07/2018
 42298                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42299 00007809 26885600                	MOV     [ES:BP],DL
 42300                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42301                                  	;;mov	[ES:BP+0],DL
 42302                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42303                                  
 42304                                  	;MOV	[ES:BP+1],DH
 42305 0000780D 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42306 00007811 53                              PUSH    BX
 42307 00007812 51                              PUSH    CX
 42308 00007813 52                              PUSH    DX
 42309                                  
 42310                                          ;invoke	$SETDPB
 42311 00007814 E8BE97                          CALL	_$SETDPB		; build DPB!
 42312                                  
 42313                                  	; 07/07/2018
 42314                                  	;MOV	AX,[ES:BP+2]
 42315 00007817 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42316                                          ; 12/03/2018
 42317 0000781B 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42318 00007820 7604                    	JBE     SHORT NOTMAX		; N:
 42319 00007822 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42320                                  NOTMAX:					
 42321                                  	; set the next dpb field in the currently built bpb
 42322                                  	; and mark as never accessed
 42323                                          
 42324                                  	; 24/04/2019
 42325 00007826 89E8                    	mov	ax,bp			; get pointer to DPB
 42326                                  	;add	ax,33
 42327 00007828 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42328                                  					; set seg & offset of next DPB
 42329                                  	;mov	[es:bp+25],ax
 42330 0000782B 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42331                                  	;mov	[es:bp+27],es
 42332 0000782F 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42333                                  					; mark as never accessed
 42334                                  	;mov	byte [es:bp+24],0FFh
 42335 00007833 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42336                                  
 42337 00007838 5A                      	POP     DX
 42338 00007839 59                              POP     CX
 42339 0000783A 5B                              POP     BX
 42340 0000783B 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42341 0000783D 5E                              POP     SI
 42342 0000783E 1F                              POP     DS
 42343                                  					; ds:si -> device header
 42344                                  					; store it in the corresponding dpb
 42345                                  	; 07/07/2018
 42346                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42347 0000783F 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42348                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42349 00007843 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42350                                  
 42351 00007847 1E                              PUSH    DS			; save pointer to device header
 42352 00007848 56                              PUSH    SI
 42353 00007849 FEC6                            INC     DH			; inc unit #
 42354 0000784B FEC2                            INC     DL			; inc drive #
 42355 0000784D 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42356                                          ;add	bp,33 ; 24/04/2019
 42357 0000784F 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42358 00007852 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42359                                          
 42360 00007854 5E                      	POP     SI			; restore pointer to device header
 42361 00007855 1F                              POP     DS
 42362 00007856 EB80                    	JMP	PERDRV			; process all drivers in chain
 42363                                  
 42364                                  CONTINIT:
 42365                                  	; 24/04/2019
 42366                                  	;sub	bp,33			; set link in last DPB to -1
 42367 00007858 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42368                                  					; set last link offset & segment
 42369                                  	;mov	word [bp+25],0FFFFh
 42370 0000785B C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42371                                  	;mov	word [bp+27],0FFFFh
 42372 00007860 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42373                                  	;add	bp,33
 42374 00007865 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42375                                  					; the DPB chain is done.  
 42376 00007868 16                      	push	ss
 42377 00007869 1F                      	pop	ds
 42378                                  
 42379 0000786A 89E8                    	mov	ax,bp
 42380 0000786C E850FE                  	call	ParaRound		; round up to segment
 42381                                  
 42382 0000786F 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42383 00007871 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42384                                  
 42385 00007873 BB0F00                  	mov	bx,0Fh
 42386                                  	
 42387                                  	; 24/05/2019
 42388                                  	;mov	cx,[ENDMEM]
 42389                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42390                                  	; 17/12/2022
 42391                                  	;mov	cx,[ENDMEM] 
 42392                                  					; set seg inpacketto dosdata					
 42393 00007876 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42394                                  
 42395                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42396                                  ; Also patch in the segment of the pointers in the dosdata area.
 42397                                  ;
 42398                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42399                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42400                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42401                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42402                                  
 42403 0000787A 52                      	push	dx			; preserve first free segment
 42404                                  
 42405 0000787B A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42406 0000787E 8EC0                    	mov	es,ax			; es = segment of DOS
 42407 00007880 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42408                                  
 42409 00007886 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42410 00007889 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42411                                  					; other tables with seg in ES.
 42412                                  	; 17/12/2022
 42413                                  	; cx = 0
 42414 0000788C 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42415                                  
 42416 00007890 5A                      	pop	dx			; restore first free segment
 42417                                  
 42418                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42419                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42420                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42421                                  ; low_mem_stub by seg_reinit.
 42422                                  
 42423                                  	;xor	ax,ax ; 0
 42424                                  	;mov	ds,ax
 42425                                  	;mov	es,ax
 42426                                  	; 17/12/2022
 42427                                  	; cx = 0
 42428                                  	;xor	cx,cx ; 0
 42429 00007891 8ED9                    	mov	ds,cx
 42430 00007893 8EC1                    	mov	es,cx
 42431                                  
 42432                                  	; set the segment of int 24 vector that was 
 42433                                  	; left out by patch_vec_segments above.
 42434                                  
 42435                                  	; 17/12/2022
 42436                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42437                                  ;%if 0
 42438                                  	; 24/05/2019
 42439                                  	;;mov	di,90h
 42440                                  	;;mov	di,4*int_fatal_abort
 42441                                  	;mov	di,addr_int_fatal_abort
 42442 00007895 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42443                                  
 42444 00007898 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42445                                  	;mov	[di+2],ax  ; int 24h segment
 42446 0000789C 8905                    	mov	[di],ax ; 24/05/2019
 42447                                  
 42448                                  	;;mov	di,82h
 42449                                  	;mov	di,INTBASE+2
 42450                                  
 42451                                  ;%endif
 42452                                  	; 17/12/2022
 42453                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42454                                  	;;mov	di,90h
 42455                                  	;;mov	di,4*int_fatal_abort
 42456                                  	;mov	di,addr_int_fatal_abort
 42457                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42458                                  	;mov	[di+2],ax  ; int 24h segment
 42459                                  	;;mov	di,82h
 42460                                  	;mov	di,INTBASE+2
 42461                                  
 42462                                  	; set default divide trap offset
 42463                                  
 42464                                  	;mov	word ptr ds:[0],offset doscode:divov
 42465 0000789E C7060000[8F52]          	mov	word [0],DIVOV	
 42466                                  
 42467                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42468                                  
 42469                                  	;mov	di,80h
 42470 000078A4 BF8000                  	mov	di,INTBASE
 42471                                  	;mov	ax,offset doscode:irett
 42472 000078A7 B8[E102]                	mov	ax,IRETT
 42473                                  
 42474                                  	; 17/12/2022
 42475                                  	; cx = 0
 42476 000078AA B109                    	mov	cl,9
 42477                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42478                                  					;   sets offsets for ints 20h-28h
 42479                                  iset1:
 42480 000078AC AB                      	stosw
 42481                                  	;add	di,2
 42482                                  	; 20/06/2023
 42483 000078AD 47                      	inc	di
 42484 000078AE 47                      	inc	di
 42485 000078AF E2FB                    	loop	iset1
 42486                                  
 42487 000078B1 83C704                  	add	di,4			; skip vector 29h
 42488                                  
 42489                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42490                                  ;					;   sets offsets for ints 2ah-2fh
 42491                                  ;iset2:
 42492                                  ;	stosw
 42493                                  ;	add	di,2
 42494                                  ;	loop	iset2
 42495                                  
 42496                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42497                                  ; patch_vec_segments above. So skip it.
 42498                                  
 42499                                  ;	add	di,8			; skip vector 30h & 31h 
 42500                                  
 42501                                  	;;;
 42502                                  	; 06/05/2019 - Retro DOS v4.0
 42503                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42504                                  	; 17/12/2022
 42505 000078B4 B105                    	mov	cl,5 ; 28/06/2019
 42506                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42507                                  	;mov	cx,6
 42508                                  iset2:
 42509 000078B6 AB                      	stosw
 42510                                  	;add	di,2
 42511                                  	; 20/09/2023
 42512 000078B7 47                      	inc	di
 42513 000078B8 47                      	inc	di	
 42514 000078B9 E2FB                    	loop	iset2
 42515                                  
 42516                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42517                                  	; 17/12/2022
 42518 000078BB 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42519                                  	;add	di,8
 42520                                  	;;;
 42521                                  
 42522                                  	; 17/12/2022
 42523 000078BE B10E                    	mov	cl,14
 42524                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42525                                  					;   sets offsets for ints 32h-3fh
 42526                                  iset3:
 42527 000078C0 AB                      	stosw
 42528                                  	;add	di,2
 42529                                  	; 20/09/2023
 42530 000078C1 47                      	inc	di
 42531 000078C2 47                      	inc	di
 42532 000078C3 E2FB                    	loop	iset3
 42533                                  
 42534                                  ;if installed
 42535                                  	; set the offset of int2f handler
 42536                                  	;mov	word [0BCh],INT2F
 42537 000078C5 C706BC00[0707]          	mov	word [02Fh*4],INT2F
 42538                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42539 000078CB 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42540                                  	;mov	[0BEh],ax
 42541 000078CF A3BE00                  	mov	[(02Fh*4)+2],ax
 42542                                  ;endif
 42543                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42544                                  	; long jump will be patched in by seg_reinit
 42545                                  
 42546                                  	;mov	byte [C0h],0EAh
 42547 000078D2 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42548                                  	;mov	byte [C1h],CALL_ENTRY
 42549 000078D7 C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42550                                  
 42551 000078DD C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42552 000078E3 C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42553 000078E9 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42554 000078EF 89168A00                	mov	word [addr_int_terminate+2],dx	
 42555 000078F3 C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42556 000078F9 C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42557 000078FF C7069C00[C961]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42558                                  
 42559 00007905 16                      	push	ss
 42560 00007906 1F                      	pop	ds
 42561                                  	
 42562                                  	; 24/05/2019
 42563                                  	;push	ss
 42564                                  	;pop	es
 42565                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42566                                  	; 17/12/2022
 42567                                  	;push	ss
 42568                                  	;pop	es
 42569                                  
 42570 00007907 52                      	push	dx			; remember address of arena
 42571                                  
 42572 00007908 42                      	inc	dx			; leave room for arena header
 42573                                  	;mov	[330h],dx
 42574 00007909 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42575                                  
 42576 0000790D 31FF                    	xor	di,di			; point es:di at end of memory
 42577 0000790F 8EC2                    	mov	es,dx			; ...where psp will be
 42578 00007911 31C0                    	xor	ax,ax
 42579                                  	;mov	cx,80h			; psp is 128 words
 42580                                  	; 17/12/2022
 42581 00007913 B180                    	mov	cl,128 ; 28/06/2019
 42582                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42583                                  	;mov	cx,128
 42584                                  
 42585 00007915 F3AB                    	rep	stosw			; zero out psp area
 42586 00007917 A1[4603]                        mov     ax,[ENDMEM]
 42587                                  	
 42588                                  	; 17/12/2022
 42589                                  	; cx = 0
 42590 0000791A E80698                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42591                                  
 42592                                  	; ds, es now point to PSP
 42593                                  
 42594 0000791D 16                      	push	ss
 42595 0000791E 1F                      	pop	ds
 42596                                  
 42597                                  	;mov	di,24
 42598 0000791F BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42599 00007922 31C0                    	xor	ax,ax
 42600 00007924 AB                      	stosw
 42601 00007925 AA                      	stosb				; 0,1 and 2 are con device
 42602 00007926 B0FF                    	mov	al,0FFh
 42603                                  	;mov	cx,FILPERPROC-3 ; 17
 42604                                  	; 17/12/2022
 42605                                  	; cx = 4
 42606 00007928 B111                    	mov	cl,FILPERPROC-3 ; 17
 42607 0000792A F3AA                    	rep	stosb			; rest are unused
 42608                                  
 42609 0000792C 16                      	push	ss
 42610 0000792D 07                      	pop	es
 42611                                  					; must be set to print messages
 42612 0000792E 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42613                                  
 42614                                  ; after this point the char device functions for con will work for
 42615                                  ; printing messages
 42616                                  
 42617                                  	; 24/04/2019 - Retro DOS v4.0
 42618                                  
 42619                                  ; 12/05/2019
 42620                                  ;
 42621                                  ;write_version_msg:
 42622                                  ;
 42623                                  ;	;if	(not ibm)
 42624                                  ;	;mov	si,offset doscode:header
 42625                                  ;	mov	si,HEADER
 42626                                  ;outmes:
 42627                                  ;	;lods	cs:byte ptr [si]
 42628                                  ;	cs
 42629                                  ;	lodsb
 42630                                  ;	cmp	al,"$"
 42631                                  ;	je	short outdone
 42632                                  ;	call	OUTT
 42633                                  ;	jmp	short outmes
 42634                                  ;outdone:
 42635                                  ;	push	ss			; out stomps on segments
 42636                                  ;	pop	ds
 42637                                  ;	push	ss
 42638                                  ;	pop	es
 42639                                  ;	;endif
 42640                                  
 42641                                  	; at this point es is dosdata
 42642                                  
 42643                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42644                                  	; in sysinittable (ms_data.asm)
 42645                                  
 42646                                  	;mov	si,0D28h
 42647 00007932 BE[280D]                	mov	si,SysInitTable
 42648                                  
 42649                                  	; 17/12/2022
 42650                                  	; ds = es = ss
 42651                                  
 42652                                  	; 17/12/2022
 42653                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42654                                  ;%if 0
 42655                                  	;;mov	[es:si+6],es
 42656                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42657                                  	;;mov	[es:si+2],es
 42658                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42659                                  	
 42660 00007935 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42661 00007938 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42662                                  
 42663                                  	; buffhead -> dosdata:hashinitvar 
 42664                                  
 42665                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42666 0000793B 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42667                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42668                                  	;mov	si,6Dh
 42669 0000793F BE[6D00]                	mov	si,HASHINITVAR
 42670                                  	;mov	[es:BUFFHEAD],si
 42671 00007942 8936[3800]              	mov	[BUFFHEAD],si
 42672                                  
 42673 00007946 5A                              pop     dx                      ; restore address of arena
 42674                                  
 42675                                  	;mov	[032Ch+2],dx
 42676 00007947 8916[2E03]                      mov     [DMAADD+2],dx
 42677                                  
 42678                                  	;mov	[es:arena_head],dx
 42679 0000794B 8916[2400]              	mov	[arena_head],dx
 42680                                  
 42681                                  ;%endif
 42682                                  
 42683                                  ; 17/12/2022
 42684                                  %if 0
 42685                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42686                                  	;;;
 42687                                  	;mov	[es:si+6],es
 42688                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42689                                  	;mov	[es:si+2],es
 42690                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42691                                  
 42692                                  	; buffhead -> dosdata:hashinitvar 
 42693                                  
 42694                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42695                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42696                                  	;mov	si,6Dh
 42697                                  	mov	si,HASHINITVAR
 42698                                  	mov	[es:BUFFHEAD],si
 42699                                  
 42700                                          pop     dx                      ; restore address of arena
 42701                                  
 42702                                  	;mov	[032Ch+2],dx
 42703                                          mov     [DMAADD+2],dx
 42704                                  
 42705                                  	mov	[es:arena_head],dx
 42706                                  	;;;
 42707                                  %endif
 42708                                  
 42709 0000794F 8EDA                            mov     ds,dx
 42710                                  
 42711                                  	;mov	byte [0],'Z'
 42712 00007951 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42713                                          ;mov	word [1],0
 42714 00007956 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42715                                  
 42716 0000795C 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42717 00007960 29D0                    	sub	ax,dx
 42718 00007962 48                              dec     ax
 42719 00007963 A30300                          mov     [ARENA.SIZE],ax
 42720                                  
 42721                                  	; point to sft 0
 42722                                  
 42723                                  	;mov	di,offset dosdata:sftabl + sftable
 42724                                  	;mov	di,SFTABL+6
 42725 00007966 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42726 00007969 B80300                          mov     ax,3
 42727 0000796C AB                              stosw           		; adjust refcount
 42728                                  
 42729                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42730                                  
 42731                                          ;mov	di,offset dosdata:sysinittable
 42732                                  	;mov	di,0D28h
 42733 0000796D BF[280D]                	mov	di,SysInitTable	
 42734                                  
 42735 00007970 42                      	inc	dx			; advance dx from arena to psp
 42736 00007971 8EDA                    	mov	ds,dx			; point ds to psp
 42737                                  
 42738                                  					; pass the address os seg_reinit 
 42739                                  					; in dx
 42740 00007973 BA[E179]                	mov	dx,seg_reinit
 42741 00007976 B9[0474]                	mov	cx,exepatch_start
 42742 00007979 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42743                                  
 42744 0000797D B8[BC76]                	mov	ax,SYSBUF
 42745 00007980 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42746                                  	
 42747 00007983 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42748 00007988 368E16[8605]                    mov     ss,[ss:USER_SS]
 42749                                  
 42750 0000798D CB                              retf
 42751                                  
 42752                                  ;
 42753                                  ; END OF DOSINIT
 42754                                  ;
 42755                                  ;--------------------------------------------------------------------------
 42756                                  
 42757                                  CHARINIT:
 42758                                  	; 24/04/2019 - Retro DOS v4.0
 42759                                  	; 07/07/2018 - Retro DOS v3.0
 42760                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42761 0000798E 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42762                                  	;mov	byte [ss:035Bh],0
 42763 00007994 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42764                                  	;mov	byte [ss:035Ch],0
 42765 0000799A 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42766                                  	;mov	word [ss:035BD],0
 42767 000079A0 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42768 000079A7 06                              PUSH	ES
 42769 000079A8 53                              PUSH	BX
 42770 000079A9 50                              PUSH	AX
 42771 000079AA BB[5A03]                        MOV	BX,DEVCALL
 42772                                          ;PUSH	CS
 42773 000079AD 16                      	PUSH	SS ; 30/04/2019
 42774 000079AE 07                              POP	ES
 42775 000079AF E8C9CC                          CALL	DEVIOCALL2	
 42776 000079B2 58                      	POP	AX
 42777 000079B3 5B                              POP	BX
 42778 000079B4 07                              POP	ES
 42779 000079B5 C3                              RETN
 42780                                  
 42781                                  ; 25/04/2019 - Retro DOS v4.0
 42782                                  
 42783                                  ;-----------------------------------------------------------------------------
 42784                                  ;
 42785                                  ;	check_XMM: routine to check presence of XMM driver
 42786                                  ;
 42787                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42788                                  ;
 42789                                  ;	USED:	none
 42790                                  ;
 42791                                  ;-----------------------------------------------------------------------------
 42792                                  
 42793                                  check_XMM: ; proc near
 42794                                  ;
 42795                                  ; determine whether or not an XMM driver is installed
 42796                                  ;
 42797 000079B6 50                      	push	ax
 42798                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42799 000079B7 B80043                  	mov	ax,4300h
 42800 000079BA CD2F                    	int	2Fh
 42801                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42802                                  		; Return: AL = 80h XMS driver installed
 42803                                  		; AL <> 80h no driver
 42804 000079BC 3C80                    	cmp	al,80h			; Q: installed
 42805 000079BE 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42806                                  ;
 42807                                  ; get the XMM control functions entry point, save it, we
 42808                                  ; need to call it later.
 42809                                  ;
 42810 000079C0 53                      	push	bx
 42811 000079C1 52                      	push	dx
 42812 000079C2 1E                      	push	ds
 42813 000079C3 06                      	push	es
 42814                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42815 000079C4 B81043                  	mov	ax,4310h
 42816 000079C7 CD2F                    	int	2Fh
 42817                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42818                                  		; Return: ES:BX -> driver entry point
 42819                                  
 42820 000079C9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42821                                  
 42822 000079CE 891E[4911]              	mov	[XMMcontrol],bx
 42823 000079D2 8C06[4B11]              	mov	[XMMcontrol+2],es
 42824                                  cXMMexit:
 42825 000079D6 F8                      	clc
 42826 000079D7 07                      	pop	es
 42827 000079D8 1F                      	pop	ds
 42828 000079D9 5A                      	pop	dx
 42829 000079DA 5B                      	pop	bx
 42830 000079DB 58                      	pop	ax
 42831 000079DC C3                      	retn				; done
 42832                                  ;
 42833                                  ; set carry if XMM driver not present
 42834                                  ;
 42835                                  cXMM_no_driver:
 42836 000079DD F9                      	stc
 42837 000079DE 58                      	pop	ax
 42838 000079DF C3                      	retn
 42839                                  
 42840                                  ;-----------------------------------------------------------------------------
 42841                                  ;
 42842                                  ; Procedure Name : seg_reinit
 42843                                  ;
 42844                                  ; Inputs	 : ES has final dos code location
 42845                                  ;		   AX = 0 / 1
 42846                                  ;
 42847                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42848                                  ;		   if AX =0
 42849                                  ;		      if first entry
 42850                                  ;			 patch segment & offset of vectors with stub
 42851                                  ;			 and stub with segment in ES
 42852                                  ;		      else
 42853                                  ;			 patch stub with segment in ES
 42854                                  ;
 42855                                  ;		   else if AX = 1
 42856                                  ;			patch segment of vectors with segment in ES	
 42857                                  ;
 42858                                  ; NOTE		 : This routine can be called at most twice!
 42859                                  ;
 42860                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42861                                  ;-----------------------------------------------------------------------------
 42862                                  
 42863 000079E0 00                      num_entry: db	0		; keeps track of the # of times this routine
 42864                                  				; has been called. (0 or 1)
 42865                                  
 42866                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42867                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42868                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42869                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42870                                  
 42871                                  seg_reinit:	; proc	far
 42872 000079E1 1E                      	push	ds
 42873                                  
 42874 000079E2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42875                                  
 42876 000079E7 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 42877                                  					; other tables with seg in ES.
 42878                                  	; 17/12/2022
 42879                                  	; cx = 0
 42880 000079EA 39C8                    	cmp	ax,cx ; 0
 42881                                  	;cmp	ax,0
 42882 000079EC 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42883                                  
 42884                                  	; 17/12/2022
 42885 000079EE 2E380E[E079]            	cmp	[cs:num_entry],cl ; 0
 42886                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42887 000079F3 7508                    	jne	short second_entry	; N: just patch the stub with 
 42888                                  					;    segment in ES
 42889                                  					; Y: patch the vectors with stub 
 42890 000079F5 8CD8                    	mov	ax,ds
 42891 000079F7 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 42892 000079FA E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 42893                                  					; with those in the stub.
 42894                                  	; 17/12/2022
 42895                                  	; cx = 0
 42896                                  second_entry:
 42897 000079FD 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42898                                  
 42899                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42900                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42901 000079FF BF[4810]                	mov	di,DOSINTTABLE
 42902                                  	; 17/12/2022
 42903                                  	; cx = 0
 42904                                  	;mov	cx,9
 42905 00007A02 B109                    	mov	cl,9
 42906 00007A04 1E                      	push	ds			
 42907 00007A05 07                      	pop	es			; es:di -> DOSINTTABLE
 42908                                  
 42909                                  dosinttabloop:
 42910                                  	;add	di,2
 42911                                  	; 19/09/2023
 42912 00007A06 47                      	inc	di
 42913 00007A07 47                      	inc	di
 42914 00007A08 AB                      	stosw
 42915 00007A09 E2FB                    	loop	dosinttabloop	
 42916                                  
 42917                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42918                                  ; use the HMA, so we don't want to check CS
 42919                                  
 42920                                  ;ifndef ROMDOS
 42921 00007A0B 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42922 00007A0E 7220                    	jb	short sr_done		; N: done
 42923                                  ;endif
 42924 00007A10 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 42925 00007A13 721B                    	jc	short sr_done		; failed to set up XMS do not do
 42926                                  					; A20 toggling in the stub.
 42927                                  	; 17/12/2022
 42928                                  	; cx = 0
 42929 00007A15 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 42930                                  ; M021-
 42931                                  	;mov	byte [1211h],1
 42932 00007A18 C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42933                                  				
 42934                                  					; set pointer to the routine that 
 42935                                  					; patches buggy exepacked code.
 42936                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42937 00007A1D C706[F811][5475]        	mov	word [FixExePatch],ExePatch
 42938                                  					; M068: set pointer to the routine 
 42939                                  					; M068: that detects copy protected
 42940                                  					; M068: apps
 42941                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42942 00007A23 C706[6100][8576]        	mov	word [ChkCopyProt],IsCopyProt
 42943                                  
 42944                                  ; 28/12/2022 - Retro DOS v4.1
 42945                                  %if 0
 42946                                  ;----------------------------------------------------------------------------
 42947                                  
 42948                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42949                                  
 42950                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42951                                  ;
 42952                                  ;; M020 - begin
 42953                                  ;
 42954                                  ;	call	WhatCPUType
 42955                                  ;	cmp	al,1
 42956                                  ;	jne	short sr_done 		; we need Rational Patch only
 42957                                  ;					;  on 286 systems
 42958                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42959                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42960                                  ;
 42961                                  ;; M020 - end
 42962                                  ;
 42963                                  ;	jmp	short sr_done
 42964                                  ;
 42965                                  ;patch_vec_seg:				; patch vectors with segment in es
 42966                                  ;	mov	ax,es
 42967                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42968                                  ;					; NOTE we don't have to patch the 
 42969                                  ;					; offsets as they have been already
 42970                                  ;					; set to the doscode offsets at
 42971                                  ;					; DOSINIT.
 42972                                  ;sr_done:
 42973                                  ;	mov	byte [cs:num_entry],1
 42974                                  ;	pop	ds
 42975                                  ;	retf	; ! far return !
 42976                                  
 42977                                  ;----------------------------------------------------------------------------
 42978                                  ;
 42979                                  ; Procedure Name : WhatCPUType
 42980                                  ;
 42981                                  ; Inputs	 : none
 42982                                  ;
 42983                                  ; Outputs	 : AL = 0 if CPU <  286
 42984                                  ;		      = 1 if CPU == 286
 42985                                  ;		      = 2 if CPU >= 386
 42986                                  ;
 42987                                  ; Regs. Mod.	 : AX
 42988                                  ;
 42989                                  ;----------------------------------------------------------------------------
 42990                                  
 42991                                  WhatCPUType:
 42992                                  	; 25/04/2019 - Retro DOS v4.0
 42993                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42994                                  
 42995                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42996                                  
 42997                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42998                                  ; 	it is called from both CODE and SYSINITSEG.
 42999                                  ;
 43000                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43001                                  ;  Returns: AX = 0 if 8086 or 8088
 43002                                  ;              = 1 if 80286
 43003                                  ;              = 2 if 80386
 43004                                  
 43005                                  	; 04/11/2022
 43006                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43007                                  
 43008                                  Get_CPU_Type:	;macro
 43009                                  	pushf
 43010                                  	push	bx			; preserve bx
 43011                                  	xor	bx,bx			; init bx to zero
 43012                                  
 43013                                  	xor	ax,ax			; 0000 into AX
 43014                                  	push	ax			; put it on the stack...
 43015                                  	popf				; ...then shove it into the flags
 43016                                  	pushf				; get it back out of the flags...
 43017                                  	pop	ax			; ...and into ax
 43018                                  	and	ax,0F000h		; mask off high four bits
 43019                                  	cmp	ax,0F000h		; was it all 1's?
 43020                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43021                                  
 43022                                  	mov	ax,0F000h		; now try to set the high four bits..
 43023                                  	push	ax
 43024                                  	popf
 43025                                  	pushf
 43026                                  	pop	ax			; ...and see what happens
 43027                                  	and	ax,0F000h		; any high bits set ?
 43028                                  	jz	short cpu_286		; nay; it's an 80286
 43029                                  
 43030                                  cpu_386:				; bx starts as zero
 43031                                  	inc	bx			; inc twice if 386
 43032                                  cpu_286:				; just inc once if 286
 43033                                  	inc	bx
 43034                                  cpu_8086:				; don't inc at all if 086
 43035                                  	mov	ax,bx			; put CPU type value in ax
 43036                                  	pop	bx			; restore original bx
 43037                                  	popf
 43038                                  	
 43039                                  	;endm
 43040                                  
 43041                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43042                                  	;retn
 43043                                  
 43044                                  	; 04/11/2022
 43045                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43046                                  	cmp	al,1
 43047                                  	jne	short sr_done 		; we need Rational Patch only
 43048                                  					;  on 286 systems
 43049                                  	mov	word [RationalPatchPtr],RationalPatch
 43050                                  
 43051                                  ;----------------------------------------------------------------------------
 43052                                  %endif	; 28/12/2022
 43053                                  
 43054 00007A29 EB05                    	jmp	short sr_done
 43055                                  
 43056                                  patch_vec_seg:				; patch vectors with segment in es
 43057 00007A2B 8CC0                    	mov	ax,es
 43058 00007A2D E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43059                                  					; NOTE we don't have to patch the 
 43060                                  					; offsets as they have been already
 43061                                  					; set to the doscode offsets at
 43062                                  					; DOSINIT.
 43063                                  sr_done:
 43064 00007A30 2EC606[E079]01          	mov	byte [cs:num_entry],1
 43065 00007A36 1F                      	pop	ds
 43066 00007A37 CB                      	retf	; ! far return !
 43067                                  
 43068                                  ;----------------------------------------------------------------------------
 43069                                  ;
 43070                                  ; Procedure Name : patch_vec_segments
 43071                                  ;
 43072                                  ; Inputs	 : ax -> has segment address to patch in
 43073                                  ;		   ds -> DOSDATA
 43074                                  ;
 43075                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43076                                  ;			
 43077                                  ;			0,20-28,3a-3f
 43078                                  ;
 43079                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43080                                  ;
 43081                                  ;----------------------------------------------------------------------------
 43082                                  
 43083                                  patch_vec_segments:
 43084                                  
 43085 00007A38 06                      	push	es
 43086                                  
 43087 00007A39 31C9                    	xor	cx,cx ; 0
 43088 00007A3B 8EC1                    	mov	es,cx
 43089                                  
 43090                                  	;mov	di,82h
 43091 00007A3D BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43092                                  
 43093 00007A40 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43094                                  
 43095                                  					; set vectors 20 & 21
 43096                                  	; 04/11/2022
 43097                                  	;mov	cx,2
 43098                                  	; 17/12/2022
 43099                                  	;mov	cl,2
 43100                                  ps_set1:
 43101 00007A44 AB                      	stosw	
 43102                                  	;add	di,2
 43103                                  	; 17/12/2022
 43104 00007A45 47                      	inc	di
 43105 00007A46 47                      	inc	di
 43106                                  	;loop	ps_set1
 43107                                  
 43108                                  	; 17/12/2022
 43109 00007A47 AB                      	stosw	; int 21h segment
 43110                                  	;inc	di
 43111                                  	;inc	di
 43112                                  
 43113                                  	;add	di,4			; skip int 22h vector
 43114 00007A48 83C706                  	add	di,6 ; *
 43115                                  
 43116 00007A4B AB                      	stosw				; set int 23h
 43117 00007A4C 83C706                  	add	di,6			; skip int 24h
 43118                                  
 43119                                  					; set vectors 25-28 and 2a-3f 
 43120                                  	; 04/11/2022
 43121                                  	;mov	cx,4			; set 4 segments
 43122                                  	; 17/12/2022
 43123 00007A4F B104                    	mov	cl,4
 43124                                  ps_set2:
 43125 00007A51 AB                      	stosw				
 43126                                  	;add	di,2
 43127                                  	; 17/12/2022
 43128 00007A52 47                      	inc	di
 43129 00007A53 47                      	inc	di
 43130 00007A54 E2FB                    	loop	ps_set2
 43131                                  
 43132 00007A56 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43133                                  					;   already be set.
 43134                                  	; 04/11/2022
 43135                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43136                                  	; 17/12/2022
 43137 00007A59 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43138                                  ps_set3:
 43139 00007A5B AB                      	stosw
 43140                                  	;add	di,2
 43141                                  	; 17/12/2022
 43142 00007A5C 47                      	inc	di
 43143 00007A5D 47                      	inc	di
 43144 00007A5E E2FB                    	loop	ps_set3
 43145                                  
 43146                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43147                                  ; below. So skip it.
 43148                                  
 43149 00007A60 83C708                  	add	di,8			; skip vector 30h & 31h 
 43150                                  	
 43151                                  	; 04/11/2022
 43152                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43153                                  	; 17/12/2022
 43154 00007A63 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43155                                  ps_set4:
 43156 00007A65 AB                      	stosw
 43157                                  	;add	di,2
 43158                                  	; 17/12/2022
 43159 00007A66 47                      	inc	di
 43160 00007A67 47                      	inc	di
 43161 00007A68 E2FB                    	loop	ps_set4
 43162                                  
 43163                                  ; set offset of int2f
 43164                                  
 43165                                  ;if installed
 43166                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43167                                  ;endif
 43168                                  	;mov	[es:0C3h],ax
 43169 00007A6A 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43170                                  	; 17/12/2022
 43171                                  	; cx = 0
 43172 00007A6E 07                      	pop	es
 43173 00007A6F C3                      	retn
 43174                                  
 43175                                  ;---------------------------------------------------------------------------
 43176                                  ;
 43177                                  ; Procedure Name : patch_misc_segments
 43178                                  ;
 43179                                  ; Inputs	 : es = segment to patch in
 43180                                  ;		   ds = dosdata
 43181                                  ;
 43182                                  ; outputs	 : patches in the sharer and other tables in the dos
 43183                                  ;		   with right dos code segment in es
 43184                                  ;
 43185                                  ; Regs Mod	 : DI,SI,CX
 43186                                  ;
 43187                                  ;---------------------------------------------------------------------------
 43188                                  
 43189                                  patch_misc_segments:
 43190                                  
 43191 00007A70 53                      	push	bx
 43192 00007A71 06                      	push	es
 43193 00007A72 50                      	push	ax
 43194                                  
 43195 00007A73 8CC0                    	mov	ax,es			; ax - > DOS segment
 43196                                  	
 43197 00007A75 1E                      	push	ds
 43198 00007A76 07                      	pop	es			; es -> DOSDATA
 43199                                  	
 43200                                  ; initialize the jump table for the sharer...
 43201                                  
 43202                                  	;mov	di,offset dosdata:jshare
 43203                                  	;mov	di,90h
 43204 00007A77 BF[9000]                	mov	di,JShare
 43205                                  	;mov	bx,[0AAAh]
 43206 00007A7A 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43207                                  					; table was patched during the first
 43208                                  					; call to this routine
 43209 00007A7E B90F00                  	mov	cx,15
 43210                                  jumptabloop:
 43211                                  	;add	di,2			; skip offset
 43212                                  	; 17/12/2022
 43213 00007A81 47                      	inc	di
 43214 00007A82 47                      	inc	di
 43215 00007A83 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43216 00007A86 7405                    	je	short share_patch	; Y: patch in sharer table
 43217                                  					; N: 
 43218 00007A88 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43219 00007A8B 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43220                                  share_patch:
 43221 00007A8D AB                      	stosw				; drop in segment
 43222                                  no_share_patch:
 43223 00007A8E E2F1                    	loop	jumptabloop
 43224                                  					; BUGBUG patching the country info 
 43225                                  					; with dosdata can be done inline
 43226                                  					; in dosinit.
 43227                                  					; for dos 3.3 country info
 43228                                  					; table address
 43229                                  
 43230                                  	;mov	si,offset dosdata:country_cdpg
 43231                                  	;mov	si,122Ah   
 43232 00007A90 BE[0512]                	mov	si,COUNTRY_CDPG
 43233                                  					; initialize double word
 43234                                  					; pointers with dosdata in ds
 43235                                  	;mov	[si+4Fh],ds
 43236                                  	;mov	[si+54h],ds
 43237                                  	;mov	[si+59h],ds
 43238                                  	;mov	[si+5Eh],ds
 43239                                  	;mov	[si+80h],ds
 43240                                  	;mov	[si+63h],ds
 43241 00007A93 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43242 00007A96 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43243 00007A99 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43244 00007A9C 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43245 00007A9F 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43246 00007AA3 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43247                                  
 43248                                  					; fastopen routines are in doscode
 43249                                  					; so patch with doscode seg in ax
 43250                                  
 43251                                  	;mov	si,offset dosdata:fastopentable
 43252                                  	;mov	si,0D30h
 43253 00007AA6 BE[300D]                	mov	si,FastOpenTable
 43254                                  
 43255                                  	; 17/12/2022
 43256                                  	; bx = [TEMP_DOSLOC]
 43257 00007AA9 83FBFF                  	cmp	bx,-1
 43258                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43259 00007AAC 7405                    	je	short fast_patch	; Y: patch segment
 43260                                  	;mov	cx,[TEMP_DOSLOC]
 43261                                  					; Q: has fastopen patched in it's
 43262                                  					;    segment
 43263                                  	; 17/12/2022
 43264 00007AAE 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43265                                  	;;cmp	cx,[si+4]
 43266                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43267 00007AB1 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43268                                  
 43269                                  fast_patch:
 43270                                  	;mov	[si+4],ax
 43271 00007AB3 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43272                                  no_fast_patch:
 43273                                  	; 17/12/2022
 43274                                  	; cx = 0
 43275 00007AB6 58                      	pop	ax
 43276 00007AB7 07                      	pop	es
 43277 00007AB8 5B                      	pop	bx
 43278                                  
 43279 00007AB9 C3                      	retn
 43280                                  
 43281                                  ;--------------------------------------------------------------------------
 43282                                  ;
 43283                                  ; Procedure Name : patch_offset
 43284                                  ; 
 43285                                  ; Inputs	 : NONE
 43286                                  ;
 43287                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43288                                  ;		   0,20-28,3a-3f, and 30,31
 43289                                  ;
 43290                                  ;
 43291                                  ; Regs. Mod	 : AX,DI,CX
 43292                                  ;--------------------------------------------------------------------------
 43293                                  
 43294                                  patch_offset:
 43295 00007ABA 06                      	push	es		; preserve es
 43296                                  
 43297 00007ABB 31C0                    	xor	ax,ax
 43298 00007ABD 8EC0                    	mov	es,ax
 43299                                  				; set default divide trap address
 43300                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43301                                  	;mov	word [es:0],108Ah
 43302 00007ABF 26C7060000[7010]        	mov	word [es:0],ldivov
 43303                                  
 43304                                  	;mov	di,80h
 43305 00007AC6 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43306                                  	;mov	ax,offset dosdata:lirett
 43307                                  	;mov	ax,10DAh
 43308 00007AC9 B8[C010]                	mov	ax,lirett
 43309                                  				; set vectors 20 & 21 to point to iret.
 43310                                  	; 17/12/2022
 43311                                  	; cx = 0
 43312                                  
 43313                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43314                                  po_iset1:
 43315 00007ACC AB                      	stosw	; int 20h offset
 43316                                  	;add	di,2 ; *
 43317                                  	;loop	po_iset1
 43318                                  	; 17/12/2022
 43319 00007ACD 47                      	inc	di
 43320 00007ACE 47                      	inc	di
 43321 00007ACF AB                      	stosw	; int 21h offset
 43322                                  
 43323                                  	;add	di,4		; skip vector 22h
 43324                                  	; 17/12/2022
 43325 00007AD0 83C706                  	add	di,6 ; *	
 43326                                  
 43327 00007AD3 AB                      	stosw			; set offset of 23h
 43328                                  	;add	di,6		; skip 24h
 43329                                  	; 19/09/2023
 43330 00007AD4 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43331                                  
 43332                                  				; set vectors 25-28 and 2a-3f to iret.
 43333                                  	; 04/11/2022
 43334                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43335                                  	; 19/09/2023
 43336                                  	; 17/12/2022
 43337                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43338                                  po_iset2:
 43339 00007AD7 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43340                                  	;add	di,2
 43341                                  	; 19/09/2023
 43342                                  	; 17/12/2022
 43343                                  	;inc	di
 43344                                  	;inc	di
 43345                                  	; 19/09/2023
 43346                                  	;loop	po_iset2
 43347                                  
 43348                                  	;add	di,4		; skip vector 29h
 43349                                  	; 19/09/2023
 43350 00007AD8 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43351                                  
 43352                                  	; 04/11/2022
 43353                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43354                                  	; 17/12/2022
 43355                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43356 00007ADB B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43357                                  po_iset3:
 43358 00007ADD AB                      	stosw
 43359                                  	;add	di,2
 43360                                  	; 17/12/2022
 43361 00007ADE 47                      	inc	di
 43362 00007ADF 47                      	inc	di
 43363 00007AE0 E2FB                    	loop	po_iset3
 43364                                  
 43365                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43366                                  ; below. So skip it.
 43367                                  
 43368                                  	;add	di,8		; skip vector 30h & 31h 
 43369                                  	; 17/12/2022
 43370 00007AE2 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43371                                  
 43372                                  	; 04/11/2022
 43373                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43374                                  				;   sets offsets for ints 32h-3fh
 43375                                  	; 17/12/2022
 43376 00007AE5 B10E                    	mov	cl,14 ; 26/06/2019
 43377                                  po_iset4:
 43378 00007AE7 AB                      	stosw
 43379                                  	;add	di,2
 43380                                  	; 17/12/2022
 43381 00007AE8 47                      	inc	di
 43382 00007AE9 47                      	inc	di
 43383 00007AEA E2FB                    	loop	po_iset4
 43384                                  
 43385                                  ;if installed
 43386                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43387                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43388 00007AEC 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43389                                  ;endif
 43390                                  
 43391                                  ; set up entry point call at vectors 30-31h
 43392                                  	;mov	byte [es:0C0h],0EAh
 43393 00007AF3 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43394                                  	;mov	word [es:0C1h],10D0h
 43395                                  
 43396 00007AF9 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43397                                  
 43398                                  							; 19/09/2023
 43399                                  	;mov	word [es:80h],1094h
 43400 00007B00 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43401                                  	;mov	word [es:84h],109Eh
 43402 00007B07 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43403                                  	;mov	word [es:94h],10A8h
 43404 00007B0E 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43405                                  	;mov	word [es:98h],10B2h
 43406 00007B15 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43407                                  	;mov	word [es:9Ch],10BCh
 43408 00007B1C 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43409                                  
 43410                                  	; 17/12/2022
 43411                                  	; CX = 0
 43412 00007B23 07                      	pop	es		; restore es
 43413 00007B24 C3                      	retn
 43414                                  
 43415                                  ;--------------------------------------------------------------------------
 43416                                  ;
 43417                                  ; 	Procedure Name	:	patch_in_nops
 43418                                  ;
 43419                                  ; 	Entry		: 	ES -> DOSDATA
 43420                                  ;
 43421                                  ;	Regs Mod	: 	cx, di
 43422                                  ;
 43423                                  ;	Description:
 43424                                  ;		This routine patches in 2 nops at the offsets specified in 
 43425                                  ;	patch_table. This basically enables the low mem stub to start 
 43426                                  ;	making XMS calls.
 43427                                  ;
 43428                                  ;--------------------------------------------------------------------------
 43429                                  
 43430                                  	; 04/11/2022
 43431                                  	; (MSDOS 5.0 MSDOS.SYS)
 43432                                  	; DOSCODE:0BC50h
 43433                                  
 43434                                  patch_table:	; label	byte
 43435                                  	;dw	offset dosdata:i0patch
 43436                                  	;dw	offset dosdata:i20patch
 43437                                  	;dw	offset dosdata:i21patch
 43438                                  	;dw	offset dosdata:i25patch
 43439                                  	;dw	offset dosdata:i26patch
 43440                                  	;dw	offset dosdata:i27patch
 43441                                  	;dw	offset dosdata:i2fpatch
 43442                                  	;dw	offset dosdata:cpmpatch
 43443 00007B25 [7010]                  	dw	i0patch
 43444 00007B27 [7A10]                  	dw	i20patch
 43445 00007B29 [8410]                  	dw	i21patch
 43446 00007B2B [8E10]                  	dw	i25patch
 43447 00007B2D [9810]                  	dw	i26patch
 43448 00007B2F [A210]                  	dw	i27patch
 43449 00007B31 [AC10]                  	dw	i2fpatch
 43450 00007B33 [B610]                  	dw	cpmpatch
 43451                                  
 43452                                  patch_table_size equ ($-patch_table)/2
 43453                                  
 43454                                  patch_in_nops:
 43455 00007B35 50                      	push	ax
 43456 00007B36 56                      	push	si
 43457 00007B37 BE[257B]                	mov	si,patch_table
 43458 00007B3A B89090                  	mov	ax,9090h ; nop, nop
 43459                                  	; 17/12/2022
 43460                                  	; cx = 0
 43461                                  	;mov	cx,8
 43462                                  	;mov	cx,patch_table_size ; 8
 43463 00007B3D B108                    	mov	cl,patch_table_size ; 8
 43464                                  pin_loop:
 43465 00007B3F 2E8B3C                  	mov	di,[cs:si]
 43466 00007B42 AB                      	stosw
 43467                                  	;add	si,2
 43468                                  	; 17/12/2022
 43469 00007B43 46                      	inc	si
 43470 00007B44 46                      	inc	si
 43471 00007B45 E2F8                    	loop	pin_loop
 43472 00007B47 5E                      	pop	si
 43473 00007B48 58                      	pop	ax
 43474 00007B49 C3                      	retn
 43475                                  
 43476                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43477                                  ; ---------------------------------------------------------------------------
 43478                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43479                                  ; ---------------------------------------------------------------------------
 43480                                  
 43481                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43482                                  DOSCODE_END:
 43483                                  	;times	9 db 0	; db 9 dup(0)
 43484                                  	; 18/12/2022
 43485 00007B4A 0000                    	dw	0  ;	times 2 db 0
 43486                                  
 43487                                  ;align 16
 43488                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43489                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43490                                  
 43491                                  ; ---------------------------------------------------------------------------
 43492                                  
 43493                                  
 43494                                  ;memstrt label word
 43495                                  ; ---------------------------------------------------------------------------
 43496                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43497                                  ; ---------------------------------------------------------------------------
 43498                                  
 43499                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43500                                  
 43501                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43502                                  ; the dos initialization segment
 43503                                  
 43504                                  ;ifndef ROMDOS
 43505                                  
 43506                                  ;doscode ends
 43507                                  
 43508                                  ;else
 43509                                  
 43510                                  ;;dosinitseg ends
 43511                                  
 43512                                  ;endif ; ROMDOS
 43513                                  
 43514                                  ;============================================================================
 43515                                  
 43516                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43517                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43518                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43519                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43520                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43521                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43522                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43523                                  
 43524                                  ;; burasý doscode sonu
 43525                                  
 43526                                  ;============================================================================
 43527                                  ; DOSDATA
 43528                                  ;============================================================================
 43529                                  ; 29/04/2019 - Retro DOS 4.0
 43530                                  
 43531                                  ;[BITS 16]
 43532                                  
 43533                                  ;[ORG 0]
 43534                                  
 43535                                  ; 25/04/2019 - Retro DOS v4.0
 43536                                  
 43537                                  ;============================================================================
 43538                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43539                                  ;============================================================================
 43540                                  
 43541                                  ;align 16
 43542                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43543                                  	; (4970 bytes for MSDOS 6.21)
 43544                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43545                                  
 43546                                  ;============================================================================
 43547                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43548                                  ;============================================================================
 43549                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43550                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43551                                  ; 16/07/2018 - Retro DOS 3.0	
 43552                                  
 43553                                  ;Break <Initialized data and data used at DOS initialization>
 43554                                  ;----------------------------------------------------------------------------
 43555                                  
 43556                                  ; We need to identify the parts of the data area that are relevant to tasks
 43557                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43558                                  ; data will be gathered with the system code. The process data under 2.x will
 43559                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43560                                  ;
 43561                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43562                                  ; describing that data item.
 43563                                  
 43564                                  ;DOSDATA SEGMENT
 43565                                  
 43566                                  ; 04/11/2022
 43567                                  ;[ORG 0]
 43568                                  
 43569                                  ; ----------------------------------------------------------------------------
 43570                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43571                                  ; ----------------------------------------------------------------------------
 43572                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43573                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43574                                  ; ----------------------------------------------------------------------------
 43575                                  
 43576                                  ; 04/11/2022
 43577                                  
 43578                                  ;DOSDATA:0000h
 43579                                  
 43580 00007B4C 90<rep 4h>              align 16
 43581                                  
 43582                                  ; ----------------------------------------------------------------------------
 43583                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43584                                  ; ----------------------------------------------------------------------------
 43585                                  
 43586                                  segment .data  vstart=0 ; 06/12/2022
 43587                                  								
 43588                                  ; ============================================================================
 43589                                  
 43590                                  ; 06/12/2022
 43591                                  ;DOSDATASTART equ $
 43592                                  DOSDATASTART:
 43593                                  
 43594                                  
 43595                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43596                                  
 43597                                  	;; 03/11/2022
 43598                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43599                                  
 43600                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43601                                  	;db	4 dup (?)	
 43602 00000000 00<rep 4h>              	times	4 db 0
 43603                                  
 43604                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43605                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43606                                  	;dw	0
 43607                                  
 43608                                  	;EVEN
 43609                                  
 43610                                  ;align 2
 43611                                  
 43612                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43613                                  ; area compatability. This location must be incremented EACH TIME the data
 43614                                  ; area here gets mucked with.
 43615                                  ;
 43616                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43617                                  
 43618                                  MSCT001S:	; LABEL BYTE
 43619                                  	
 43620                                  DataVersion:	
 43621 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43622                                  
 43623                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43624                                  ;hkn; been removed to DOSCODE above
 43625                                  
 43626                                  ;M044
 43627                                  ; First part of save area for saving last para of Window memory
 43628                                  
 43629                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43630 00000006 00<rep 8h>              	times	8 db 0
 43631                                  
 43632                                  	; MSDOS 6.21 DOSDATA:000Eh
 43633                                  MYNUM:			; Offset 000Eh
 43634 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43635                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43636 00000010 0000                    	dw	0
 43637                                  OpenLRU:
 43638 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43639                                  OEM_HANDLER: 		
 43640 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43641                                  
 43642                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43643                                  ;;			way that we leave DOS???? - jgl
 43644                                  
 43645                                  LeaveAddr:
 43646 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43647                                  RetryCount:		
 43648 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43649                                  RetryLoop:
 43650 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43651                                  LastBuffer:
 43652 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43653                                  CONTPOS:
 43654 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43655                                  arena_head:
 43656 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43657                                  
 43658                                  ;; 16/07/2018
 43659                                  ;;***************************************************************************
 43660                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43661                                  ;;***************************************************************************
 43662                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43663                                  ;;
 43664                                  ;;	AH = 52h
 43665                                  ;;
 43666                                  ;;	on return:
 43667                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43668                                  ;;		Known "invars" fields follow (varies with DOS version):
 43669                                  ;;
 43670                                  ;;	Offset Size		 Description
 43671                                  ;;
 43672                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43673                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43674                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43675                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43676                                  ;;		      0 indicates no unread input (DOS 3.x)
 43677                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43678                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43679                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43680                                  ;;	  08   dword  pointer to $CLOCK device driver
 43681                                  ;;	  0C   dword  pointer to CON device driver
 43682                                  ;;	  10   byte   number of logical drives in system
 43683                                  ;;	  11   word   maximum bytes/block of any block device
 43684                                  ;;	  13   dword  pointer to DOS cache buffer header
 43685                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43686                                  ;;		      point to the next device in device chain
 43687                                  ;;
 43688                                  ;;***************************************************************************
 43689                                  
 43690                                  ; The following block of data is used by SYSINIT. 
 43691                                  ; Do not change the order or size of this block
 43692                                  
 43693                                  ;SYSINITVAR:
 43694                                  ;----------------------------------------------------------------------------
 43695                                  SYSINITVARS:
 43696                                  DPBHEAD:
 43697 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43698                                  SFT_ADDR:
 43699 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43700                                  BCLOCK:
 43701 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43702                                  BCON:
 43703 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43704                                  MAXSEC:
 43705 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43706                                  BUFFHEAD:
 43707 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43708                                  CDSADDR:
 43709 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43710                                  SFTFCB:
 43711 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43712                                  KEEPCOUNT:
 43713 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43714                                  NUMIO:
 43715 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43716                                  CDSCOUNT:
 43717 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43718                                  
 43719                                  ; A fake header for the NUL device
 43720                                  NULDEV:
 43721 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43722                                  	;dw	8004h
 43723 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43724 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43725 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43726 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43727                                  SPLICES:
 43728 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43729                                  
 43730                                  Special_Entries:
 43731 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43732                                  UU_IFS_DOS_CALL:
 43733 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43734                                  ; 
 43735                                  ; UU_IFS_HEADER:
 43736                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43737                                  
 43738                                  ChkCopyProt:
 43739 00000061 0000                    	dw	0	; M068
 43740                                  A20OFF_PSP:
 43741 00000063 0000                    	dw	0	; M068
 43742                                  BUFFERS_PARM1:
 43743 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43744                                  BUFFERS_PARM2:
 43745 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43746                                  BOOTDRIVE:
 43747 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43748                                  DDMOVE:
 43749 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43750                                  EXT_MEM_SIZE:
 43751 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43752                                  
 43753                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43754                                  ;
 43755                                  ; Replaced by next two declarations
 43756                                  ;
 43757                                  ;UU_BUF_HASH_PTR:
 43758                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43759                                  ;UU_BUF_HASH_COUNT:
 43760                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43761                                  
 43762                                  BufferQueue:
 43763 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43764                                  DirtyBufferCount:
 43765 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43766                                  			; BUGBUG ---- change to byte
 43767                                  SC_CACHE_PTR:
 43768 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43769                                  SC_CACHE_COUNT:
 43770 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43771                                  BuffInHMA:
 43772 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43773                                  LoMemBuff:
 43774 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43775                                  			;  in Low mem when buffs are in HMA
 43776                                  ;
 43777                                  ; All variables which have UU_ as prefix can be reused for other
 43778                                  ; purposes and can be renamed. All these variables were used for
 43779                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43780                                  ; manager ---- MOHANS
 43781                                  ;
 43782                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43783                                  UU_BUF_EMS_FIRST_PAGE:	
 43784 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43785                                  
 43786                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43787                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43788                                  ;	dw	0			
 43789                                  
 43790                                  CL0FATENTRY:
 43791 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43792                                  			; is used in pack/unpack rts.
 43793                                  			; in fat.asm if cluster 0 is specified.
 43794                                  			; SR;
 43795                                  IoStatFail:
 43796 00000083 00                      	db	0	; IoStatFail has been added to 
 43797                                  			; record a fail on an I24 
 43798                                  			; issued from IOFUNC on a status call. 
 43799                                  
 43800                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43801                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43802                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43803                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43804                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43805                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43806                                  ;
 43807                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43808                                  						; state of the 	buffers page.
 43809                                  						; This one byte is retained to 
 43810                                  						; keep the size of this data 
 43811                                  						; block the same.;
 43812                                  ALLOCMSAVE:
 43813 00000084 00                      	db	0	; M063: temp var. used to 
 43814                                  			; M063: save alloc method in
 43815                                  			; M063: msproc.asm
 43816                                  A20OFF_COUNT:
 43817 00000085 00                      	db	0	; M068: indiactes the # of 
 43818                                  			; M068: int 21 calls for 
 43819                                  			; M068: which A20 is off
 43820                                  DOS_FLAG:
 43821 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43822                                  			; definitions
 43823                                  UNPACK_OFFSET:
 43824 00000087 0000                    	dw	0	; saves pointer to the start
 43825                                  			; of unpack code in exepatch.
 43826                                  			; asm.
 43827                                  UMBFLAG:
 43828 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43829                                  			; M003: link state of the UMBs
 43830                                  			; M003: whether linked or not 
 43831                                  			; M003: to the DOS arena chain
 43832                                  SAVE_AX:
 43833 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43834                                  			; M000: in msproc.asm
 43835                                  UMB_HEAD:
 43836 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43837                                  			; M000: the first umb arena by 
 43838                                  			; M000: BIOS sysinit.
 43839                                  START_ARENA:
 43840 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43841                                  			; M000: from which DOS will 
 43842                                  			; M000: start its scan for alloc.
 43843                                  
 43844                                  ; End of SYSINITVar block
 43845                                  ;----------------------------------------------------------------------------
 43846                                  
 43847                                  ; 25/04/2019 - Retro DOS v4.0
 43848                                  
 43849                                  ; 16/07/2018
 43850                                  ; MSDOS 3.3 (& MDOS 6.0)
 43851                                  
 43852                                  ;
 43853                                  ; Sharer jump table
 43854                                  ;
 43855                                  
 43856                                  ;PUBLIC	JShare
 43857                                  	;EVEN
 43858                                  
 43859                                  ;JShare	LABEL	DWORD
 43860                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43861                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43862                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43863                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43864                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43865                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43866                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43867                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43868                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43869                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43870                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43871                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43872                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43873                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43874                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43875                                  
 43876                                  align 2
 43877                                  
 43878                                  JShare:
 43879 00000090 [0107]0000              		DW	BadCall,0
 43880 00000094 [0507]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43881 00000098 [0507]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43882 0000009C [0107]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43883 000000A0 [0107]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43884 000000A4 [0107]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43885 000000A8 [0107]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43886 000000AC [0107]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43887 000000B0 [0507]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43888 000000B4 [0107]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43889 000000B8 [0107]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43890 000000BC [0107]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43891 000000C0 [0507]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43892 000000C4 [0107]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43893 000000C8 [0107]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43894                                  
 43895                                  
 43896                                  ;============================================================================
 43897                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43898                                  ;============================================================================
 43899                                  ; 25/04/2019 - Retro DOS 4.0 
 43900                                  ; 16/07/2018 - Retro DOS 3.0	
 43901                                  
 43902                                  ;Break <Initialized data and data used at DOS initialization>
 43903                                  ;----------------------------------------------------------------------------
 43904                                  
 43905                                  ; We need to identify the parts of the data area that are relevant to tasks
 43906                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43907                                  ; data will be gathered with the system code.  The process data under 2.x will
 43908                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43909                                  ;
 43910                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43911                                  ; describing that data item.
 43912                                  
 43913                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43914                                  
 43915                                  ;
 43916                                  ; Table of routines for assignable devices
 43917                                  ;
 43918                                  ; MSDOS allows assignment if the following standard devices:
 43919                                  ;   stdin  (usually CON input)
 43920                                  ;   stdout (usually CON output)
 43921                                  ;   auxin  (usually AUX input)
 43922                                  ;   auxout (usually AUX output)
 43923                                  ;   stdlpt (usually PRN output)
 43924                                  ;
 43925                                  ; SPECIAL NOTE:
 43926                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43927                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43928                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43929                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43930                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43931                                  ;   as EOF).
 43932                                  
 43933                                  ; Default SFTs for boot up
 43934                                  
 43935                                  		;PUBLIC	SFTABL
 43936                                  
 43937                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43938 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43939 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43940 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43941                                  		;times 295 db 0 ; MSDOS 6.0
 43942 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43943                                  
 43944                                  ; the next two variables relate to the position of the logical stdout/stdin
 43945                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43946                                  ; console.
 43947                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43948 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43949 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43950                                  					;	   of buffered input call
 43951 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43952 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43953                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43954 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43955 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43956 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43957                                  switch_character:
 43958 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43959 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43960 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43961 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43962 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43963                                  
 43964                                  ; The following table is a list of addresses that the sharer patches to be
 43965                                  ; PUSH AX to enable the critical sections
 43966                                  
 43967                                  		; DOSDATA:0315h (MSDOS 6.21)
 43968                                  
 43969                                  ;PUBLIC	CritPatch
 43970                                  
 43971                                  CritPatch:	; LABEL WORD
 43972                                  
 43973                                  ;IRP sect,<critDisk,critDevice>
 43974                                  
 43975                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43976                                  ;
 43977                                  ;SR; Change code patch address to a variable in data segment
 43978                                  ;
 43979                                  ;       dw OFFSET DOSDATA: redir_patch
 43980                                  ;       dw OFFSET DOSDATA: redir_patch
 43981                                  ;
 43982                                  ;;hkn	Short_Addr  E&sect
 43983                                  ;;hkn	Short_Addr  L&sect
 43984                                  ;
 43985                                  ;ELSE
 43986                                  ;	DW	0
 43987                                  ;	DW	0
 43988                                  ;ENDIF
 43989                                  ;ENDM
 43990                                  ;	DW	0
 43991                                  
 43992                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43993                                   
 43994 00000315 [0C0D]                  	dw 	redir_patch
 43995 00000317 [0C0D]                  	dw 	redir_patch			
 43996 00000319 [0C0D]                  	dw	redir_patch
 43997 0000031B [0C0D]                  	dw 	redir_patch
 43998                                  
 43999 0000031D 0000                    	dw	0
 44000                                  
 44001                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44002                                  ; Also, IBM server 1.0 requires this also.
 44003                                  
 44004                                  	;EVEN			; Force swap area to start on word boundry
 44005 0000031F 90                      align 2
 44006                                  	;PUBLIC	SWAP_START
 44007                                  SWAP_START:	; LABEL BYTE
 44008 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44009 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44010 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44011 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44012 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44013                                  
 44014                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44015 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44016 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44017                                  ; end warning
 44018                                   
 44019 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44020                                  
 44021 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44022 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44023 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44024 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44025 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44026 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44027                                  ;				; F.C. 2/17/86
 44028 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44029 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44030                                  ;align 2
 44031                                  SWAP_ALWAYS:	; 05/08/2018
 44032 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44033                                  				;   extended error type stuff.
 44034                                  				;   NOTE: does not have Correct value on
 44035                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44036                                  				;   GetExtendedError system calls)
 44037 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44038 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44039 00000340 0000                    FirstArena:	dw 0		; first free block found
 44040 00000342 0000                    BestArena:	dw 0		; best free block found
 44041 00000344 0000                    LastArena:	dw 0		; last free block found
 44042 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44043 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44044 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44045 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44046 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44047 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44048 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44049                                  
 44050                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44051                                  	;EVEN
 44052 0000034F 90                      align 2
 44053                                  		; DOSDATA:0350h (MSDOS 6.21)
 44054 00000350 00                      DAY:		db 0		; Day of month
 44055 00000351 00                      MONTH:		db 0		; Month of year
 44056 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44057 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44058 00000356 00                      WEEKDAY:	db 0		; Day of week
 44059                                  ; end warning
 44060                                  
 44061 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44062 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44063 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44064                                  
 44065                                  ; Combination of all device call parameters
 44066                                  	;PUBLIC	DEVCALL 	;
 44067                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44068                                  DEVCALL: ; 08/08/2018
 44069 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44070 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44071 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44072 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44073 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44074                                  
 44075                                  	;PUBLIC	CALLUNIT
 44076                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44077                                  CALLFLSH: ; LABEL   WORD	;
 44078 00000367 00                      CALLMED:	db 0		; media byte
 44079                                  CALLBR:	  ; LABEL   DWORD	;
 44080                                  	;PUBLIC	CALLXAD 	;
 44081                                  CALLXAD:  ; LABEL   DWORD	;
 44082 00000368 00                      CALLRBYT:	db 0		;
 44083                                  	;PUBLIC	CALLVIDM	;
 44084                                  CALLVIDM: ; LABEL   DWORD	;
 44085 00000369 00<rep 3h>              	times 3 db 0	;
 44086                                  	;PUBLIC CallBPB		;
 44087                                  CALLBPB:  ; LABEL   DWORD	;
 44088                                  CALLSCNT:			;
 44089 0000036C 0000                    		dw 0		;
 44090                                  	;PUBLIC	CALLSSEC	;
 44091                                  CALLSSEC: ; LABEL   WORD	;
 44092 0000036E 0000                    		dw 0		;
 44093 00000370 00000000                CALLVIDRW:	dd 0		;
 44094                                  ;MSDOS 6.0
 44095 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44096 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44097                                  
 44098                                  ; Same as above for I/O calls	;
 44099                                  				;
 44100                                  	;PUBLIC	IOCall		;
 44101                                  ;IOCALL	SRHEAD	<>		;
 44102                                  IOCALL:	; 07/08/2018
 44103 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44104 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44105 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44106 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44107 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44108                                  IOFLSH:	  ; LABEL   WORD	;
 44109                                          ;PUBLIC  IORCHR		;
 44110                                  IORCHR:	  ; LABEL   BYTE	;
 44111 00000389 00                      IOMED:		db 0		;
 44112 0000038A 00000000                IOXAD:		dd 0		;
 44113 0000038E 0000                    IOSCNT:		dw 0		;	
 44114 00000390 0000                    IOSSEC:		dw 0		;
 44115                                  
 44116                                  ; Call struct for DSKSTATCHK	;
 44117 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44118 00000393 00                      		db 0
 44119 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44120 00000395 0000                    DSKSTST:	dw 0		;
 44121 00000397 00<rep 8h>              	times 8	db 0		;
 44122 0000039F 00                      DSKCHRET:	db 0		;
 44123                                  
 44124                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44125                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44126                                  ;hkn   short_addr  DEVIOBUF	;
 44127                                  	
 44128 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44129 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44130 000003A4 0100                    DSKSTCNT:	dw 1		;
 44131 000003A6 0000                    		dw 0		;
 44132                                  
 44133 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44134                                  
 44135                                  ;MSDOS 6.0
 44136                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44137 000003A9 00000000                		dd 0		;MS. position
 44138 000003AD 00000000                		dd 0		;MS. length
 44139                                  
 44140                                  ;hkn; the foll. was moved from dosmes.asm.
 44141                                  
 44142                                  	;EVEN
 44143 000003B1 90                      align 2				; needed to maintain offsets
 44144                                  
 44145                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44146                                  USERNUM:
 44147 000003B2 0000                     		dw 0		; 24 bit user number
 44148 000003B4 00                      		db 0
 44149                                  ;IF IBM
 44150                                  ;IF IBMCOPYRIGHT
 44151                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44152                                  ;ELSE
 44153                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44154                                  ;ENDIF
 44155                                  ;ELSE
 44156 000003B5 FF                      OEMNUM:		DB 0FFh
 44157                                  ;ENDIF
 44158                                  
 44159                                  ;============================================================================
 44160                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44161                                  ;============================================================================
 44162                                  ; 25/04/2019 - Retro DOS 4.0
 44163                                  
 44164                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44165                                  ; ----------------------------------------------------------
 44166                                  ; This data section which was named as uninitialized data
 44167                                  ; (as overlayed by initialization code) but follows 
 44168                                  ; initialized data section from DOSDATA:03B6h address
 44169                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44170                                  ; and there is not overlaying..)
 44171                                  ; **********************************************************
 44172                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44173                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44174                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44175                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44176                                  ; TIMEBUF is at offset 03B6h.
 44177                                  ; **********************************************************	
 44178                                  
 44179                                  ;Break <Uninitialized data overlayed by initialization code>
 44180                                  ;----------------------------------------------------------------------------
 44181                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44182                                  ; Init code overlaps with data area below
 44183                                  
 44184                                  ; 	ORG     0
 44185                                  
 44186                                  MSDAT001S:	; label byte
 44187                                  
 44188                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44189                                  TIMEBUF: ;	times 6 db 0
 44190 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44191 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44192                                  
 44193                                  ; The following areas are used as temp buffer in EXEC system call
 44194                                  
 44195                                  ; DOSDATA:03BEh
 44196                                  OPENBUF: ;times 64  dw	0
 44197 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44198                                  RENBUF:	
 44199 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44200                                  
 44201                                  ; Buffer for search calls
 44202                                  SEARCHBUF:	
 44203 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44204                                  DUMMYCDS:  ;times 88 db 0
 44205 000004F3 00<rep 58h>             	times	curdirLen db 0
 44206                                  
 44207                                  ; End of contiguous buffer
 44208                                   
 44209                                  ; Temporary directory entry for use by many routines. Device directory
 44210                                  ; entries (bogus) are built here.
 44211                                  
 44212                                  ; DOSDATA:054Bh
 44213                                  
 44214                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44215                                  
 44216                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44217                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44218                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44219                                  
 44220                                  NAME1:	
 44221 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44222                                  NAME2:
 44223 00000557 00<rep Dh>              	times	13 db	0 		;
 44224                                  DESTSTART:
 44225 00000564 0000                    	dw	0			;
 44226                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44227                                  	;times	5  db	0
 44228 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44229                                  
 44230                                  ; End Temporary directory entry.
 44231                                  
 44232 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44233                                  EXTFCB:	
 44234 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44235                                  SATTRIB:
 44236 0000056D 00                      	db	0		; Storage for search attributes
 44237                                  OPEN_ACCESS:
 44238 0000056E 00                      	db	0		; access of open system call
 44239                                  FOUNDDEL:
 44240 0000056F 00                      	db	0		; true => file was deleted
 44241                                  FOUND_DEV:
 44242 00000570 00                      	db	0		; true => search found a device
 44243                                  FSPLICE:
 44244 00000571 00                      	db	0		; true => do a splice in transpath
 44245                                  FSHARING:
 44246 00000572 00                      	db	0		; TRUE => no redirection
 44247                                  SECCLUSPOS:
 44248 00000573 00                      	db	0		; Position of first sector within cluster
 44249 00000574 00                      TRANS:	db	0		;
 44250 00000575 00                      READOP:	db	0		;
 44251                                  THISDRV:
 44252 00000576 00                      	db	0		;
 44253                                  CLUSFAC:
 44254 00000577 00                      	db	0		;
 44255                                  CLUSSPLIT:
 44256 00000578 00                      	db	0		;
 44257                                  INSMODE:
 44258 00000579 00                      	db	0		; true => insert mode in buffered read
 44259 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44260 0000057B 00                      VOLID:	db	0		;
 44261                                  EXIT_TYPE:
 44262 0000057C 00                      	db	0		; type of exit...
 44263                                   
 44264                                  	;EVEN
 44265                                  
 44266 0000057D 90                      align 2
 44267                                  
 44268                                  ; DOSDATA:057Eh
 44269                                  
 44270                                  ; WARNING - the following two items are accessed as a word
 44271                                  
 44272                                  CREATING:
 44273 0000057E 00                      	db	0		; true => creating a file
 44274 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44275                                  				; = DIRFREE iff BUGBUG
 44276                                  EXITHOLD:
 44277 00000580 00000000                	dd	0		; Temp location for proc terminate
 44278                                  USER_SP:
 44279 00000584 0000                    	dw	0		; User SP for system call
 44280                                  USER_SS:
 44281 00000586 0000                    	dw	0		; User SS for system call
 44282                                  CONTSTK:
 44283 00000588 0000                    	dw	0		;
 44284                                  THISDPB:
 44285 0000058A 00000000                	dd	0		;
 44286                                  CLUSSAVE:
 44287 0000058E 0000                    	dw	0		;
 44288                                  CLUSSEC:
 44289 00000590 00000000                	dd	0		;>32mb			AC0000
 44290                                  PREREAD:
 44291 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44292 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44293                                  FATBYTE:
 44294 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44295                                  ; DOSDATA:059Ah
 44296 0000059A 00000000                DEVPT:	dd	0		;
 44297                                  THISSFT:
 44298 0000059E 00000000                	dd	0		; Address of user SFT
 44299                                  THISCDS:
 44300 000005A2 00000000                	dd	0		; Address of current CDS
 44301                                  THISFCB:
 44302 000005A6 00000000                	dd	0		; Address of user FCB
 44303 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44304 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44305 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44306                                  WFP_START:
 44307 000005B2 0000                    	dw	0		;
 44308                                  REN_WFP:
 44309 000005B4 0000                    	dw	0		;
 44310                                  CURR_DIR_END:
 44311 000005B6 0000                    	dw	0		;
 44312                                  NEXTADD:
 44313 000005B8 0000                    	dw	0		;
 44314                                  LASTPOS:
 44315 000005BA 0000                    	dw	0		;
 44316                                  CLUSNUM:
 44317 000005BC 0000                    	dw	0		;
 44318 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44319                                  DIRSTART:
 44320 000005C2 0000                    	dw	0		;
 44321 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44322 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44323                                                                  ; sectors
 44324                                  BYTSECPOS:
 44325 000005CC 0000                    	dw	0		; Position of first byte within sector
 44326                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44327 000005CE 0000<rep 2h>                    times	2 dw 0
 44328                                  BYTCNT1:
 44329 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44330                                  BYTCNT2:
 44331 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44332 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44333                                  ; DOSDATA:05D8h
 44334                                  ENTFREE:
 44335 000005D8 0000                    	dw	0		;
 44336                                  ENTLAST:
 44337 000005DA 0000                    	dw	0		;
 44338                                  NXTCLUSNUM:
 44339 000005DC 0000                    	dw	0		;
 44340                                  GROWCNT:
 44341 000005DE 00000000                	dd	0		;
 44342 000005E2 00000000                CURBUF:	dd	0		;
 44343 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44344 000005EA 0000                    SAVEBX:	dw	0		;
 44345 000005EC 0000                    SAVEDS:	dw	0		;
 44346                                  RESTORE_TMP:
 44347 000005EE 0000                    	dw	0		; return address for restore world
 44348 000005F0 0000                    NSS:	dw	0
 44349 000005F2 0000                    NSP:	dw	0
 44350                                  ; DOSDATA:05F4h
 44351                                  EXTOPEN_FLAG:
 44352 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44353                                  EXTOPEN_ON:
 44354 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44355                                  EXTOPEN_IO_MODE:
 44356 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44357                                  SAVE_DI:
 44358 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44359                                  SAVE_ES:
 44360 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44361                                  SAVE_DX:
 44362 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44363                                  SAVE_CX:
 44364 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44365                                  SAVE_BX:
 44366 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44367                                  SAVE_SI:
 44368 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44369                                  SAVE_DS:
 44370 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44371                                  
 44372                                  ; DOSDATA:0607h
 44373                                  
 44374                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44375                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44376                                  ; the high 16, the low 16 are still in the register.
 44377                                  
 44378                                  HIGH_SECTOR:	
 44379 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44380                                  ;OffsetMagicPatch:
 44381                                  ;	dw	MagicPatch ;scottq 8/6/92
 44382                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44383 00000609 0000                    	dw	0
 44384                                  				;see dos\mpatch.asm
 44385                                  DISK_FULL:
 44386 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44387                                  TEMP_VAR:
 44388 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44389                                  TEMP_VAR2:
 44390 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44391 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44392                                  DOS34_FLAG:
 44393 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44394                                  NO_FILTER_PATH:
 44395 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44396                                  NO_FILTER_DPATH:
 44397 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44398                                  ; M008
 44399                                  AbsRdWr_SS:
 44400 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44401                                  AbsRdWr_SP:
 44402 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44403                                  
 44404                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44405                                  ; M008
 44406                                   
 44407                                   
 44408                                  ; make those pushes fast!!!
 44409                                  
 44410                                  ;EVEN
 44411                                  
 44412 0000061F 90                      align 2
 44413                                  
 44414                                  StackSize   equ 180h  ; 384	; gross but effective
 44415                                  
 44416                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44417                                  ;				; made up their minds about
 44418                                   
 44419                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44420                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44421                                  
 44422                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44423                                   
 44424 00000620 00<rep 180h>                    times	StackSize db	0	;
 44425                                  AUXSTACK:			; LABEL   BYTE
 44426                                   
 44427 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44428                                  DSKSTACK:			; LABEL   BYTE
 44429                                   
 44430 00000920 00<rep 180h>                    times	StackSize db	0	;
 44431                                  IOSTACK:			; LABEL   BYTE
 44432                                  
 44433                                  ; DOSDATA:0AA0h 
 44434                                   
 44435                                  ; patch space for Boca folks.
 44436                                  ; Say What????!!! This does NOT go into the swappable area!
 44437                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44438                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44439                                   
 44440                                  IBMPATCH: ; label byte
 44441                                  PRINTER_FLAG:
 44442 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44443                                  VOLCHNG_FLAG:
 44444 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44445                                  VIRTUAL_OPEN:
 44446 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44447                                   
 44448                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44449                                  
 44450                                  FSeek_drive:
 44451 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44452                                  FSeek_firclus:
 44453 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44454                                  FSeek_logclus:
 44455 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44456                                  FSeek_logsave:
 44457 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44458                                  
 44459                                  ; DOSDATA:0AAAh
 44460                                  
 44461                                  TEMP_DOSLOC:
 44462 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44463                                  				;at SYSINIT time.
 44464                                  SWAP_END:  ; LABEL   BYTE
 44465                                   
 44466                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44467                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44468                                  ; to include this byte.
 44469                                   
 44470 00000AAC 00                      	db	0
 44471                                  
 44472                                  ; DOSDATA:0AADh
 44473                                   
 44474                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44475                                  
 44476                                  ;DOSDATA    ENDS
 44477                                  
 44478                                  ;============================================================================
 44479                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44480                                  ;============================================================================
 44481                                  ; 27/04/2019 - Retro DOS 4.0
 44482                                  ; 16/07/2018 - Retro DOS 3.0
 44483                                  
 44484                                  ;DOSDATA Segment
 44485                                  
 44486                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44487                                  
 44488                                  ;
 44489                                  ; upper case table
 44490                                  ; ---------------------------------------------------------------------------
 44491                                  UCASE_TAB:	; label   byte
 44492 00000AAD 8000                    	dw	128
 44493 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44494 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44495 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44496 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44497 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44498 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44499 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44500 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44501 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44502 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44503 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44504 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44505 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44506 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44507 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44508 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44509                                  ;
 44510                                  ; file upper case table
 44511                                  ; ---------------------------------------------------------------------------
 44512                                  FILE_UCASE_TAB:	; label  byte
 44513 00000B2F 8000                    	dw	128
 44514 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44515 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44516 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44517 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44518 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44519 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44520 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44521 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44522 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44523 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44524 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44525 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44526 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44527 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44528 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44529 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44530                                  ;
 44531                                  ; file char list
 44532                                  ; ---------------------------------------------------------------------------
 44533                                  FILE_CHAR_TAB:	; label  byte
 44534 00000BB1 1600                    	dw	22				; length
 44535 00000BB3 0100FF                  	db	1,0,255 			; include all
 44536 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44537 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44537 00000BC2 7C3C3E2B3D3B2C     
 44538                                  	;db	24 dup (?)			; reserved
 44539 00000BC9 00<rep 18h>             	times	24 db 0
 44540                                  
 44541                                  ;
 44542                                  ; collate table
 44543                                  ; ---------------------------------------------------------------------------
 44544                                  COLLATE_TAB:	; label   byte
 44545 00000BE1 0001                    	dw	256
 44546 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44547 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44548 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44549 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44550 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44551 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44552 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44553 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44554 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44555 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44556 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44557 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44558 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44559 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44560 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44561 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44562 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44563 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44564 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44565 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44566 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44567 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44568 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44569 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44570 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44571 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44572 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44573 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44574 00000CC3 E053                    	db	224,"S"
 44575 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44576 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44577 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44578 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44579                                  
 44580                                  ; ------------------------------------------------<MSKK01>----------------------
 44581                                  
 44582                                  ; DOSDATA:0CE3h
 44583                                  
 44584                                  ; 29/04/2019
 44585                                  
 44586                                  ; dbcs is not supported in DOS 3.3
 44587                                  ;		   DBCS_TAB	    CC_DBCS <>
 44588                                  ;
 44589                                  ; DBCS for DOS 4.00			   2/12/KK
 44590                                  
 44591                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44592                                  ; ------------------------------------------------<MSKK01>----------------------
 44593                                  ;ifdef	DBCS
 44594                                  ; ifdef	  JAPAN
 44595                                  ;		dw	6		; <MSKK01>
 44596                                  ;		db	081h,09fh	; <MSKK01>
 44597                                  ;		db	0e0h,0fch	; <MSKK01>
 44598                                  ;		db	0,0		; <MSKK01>
 44599                                  ;
 44600                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44601                                  ; endif
 44602                                  ; ifdef	  TAIWAN
 44603                                  ;		dw	4		; <TAIWAN>
 44604                                  ;		db	081h,0FEh	; <TAIWAN>
 44605                                  ;		db	0,0		; <TAIWAN>
 44606                                  ;
 44607                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44608                                  ; endif
 44609                                  ; ifdef   KOREA                         ; Keyl
 44610                                  ;               dw      4               ; <KOREA>
 44611                                  ;               db      0A1h,0FEh       ; <KOREA>
 44612                                  ;               db      0,0             ; <KOREA>
 44613                                  ;
 44614                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44615                                  ;  endif
 44616                                  ;else
 44617 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44618                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44619 00000CE5 00<rep 10h>             		times	16 db 0
 44620                                  
 44621                                  ;		dw	6		;  2/12/KK
 44622                                  ;		db	081h,09Fh	;  2/12/KK
 44623                                  ;		db	0E0h,0FCh	;  2/12/KK
 44624                                  ;		db	0,0		;  2/12/KK
 44625                                  ;
 44626                                  ;endif
 44627                                  ; ------------------------------------------------<MSKK01>----------------------
 44628                                  
 44629                                  ; DOSDATA:0CF5h
 44630                                  
 44631                                  ; ---------------------------------------------------------------------------
 44632                                  ;
 44633                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44634                                  ;     ENTRY: AL = Character to map
 44635                                  ;     EXIT:  AL = The converted character
 44636                                  ; Alters no registers except AL and flags.
 44637                                  ; The routine should do nothing to chars below 80H.
 44638                                  ; ---------------------------------------------------------------------------
 44639                                  ; Example:
 44640                                  
 44641                                  MAP_CASE:
 44642                                  ;Procedure MAP_CASE,FAR
 44643                                  
 44644 00000CF5 3C80                    	CMP	AL,80h
 44645 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44646 00000CF9 CB                      	RETF
 44647                                  Map1:
 44648 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44649 00000CFC 1E                      	PUSH	DS
 44650 00000CFD 53                      	PUSH	BX
 44651 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44652                                  FINISH:
 44653 00000D01 0E                      	PUSH	CS		;Move to DS
 44654 00000D02 1F                      	POP	DS
 44655 00000D03 D7                      	XLAT			;Get upper case character
 44656 00000D04 5B                      	POP	BX
 44657 00000D05 1F                      	POP	DS
 44658                                  L_RET:	
 44659 00000D06 CB                      	RETF
 44660                                  
 44661                                  ;EndProc MAP_CASE
 44662                                  
 44663                                  ; ---------------------------------------------------------------------------
 44664                                  
 44665                                  ; The variables for ECS version are moved here for the same data alignments
 44666                                  ; as IBM-DOS and MS-DOS.
 44667                                  
 44668                                  InterChar:
 44669 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44670                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44671                                  DUMMY:	; LABEL   WORD
 44672                                  InterCon:  
 44673 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44674                                  SaveCurFlg:
 44675 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44676                                  
 44677                                  ; ---------------------------------------------------------------------------
 44678                                  
 44679 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44680                                  redir_patch:
 44681 00000D0C 00                      	  db	0
 44682                                  
 44683                                  ; DOSDATA:0D0Dh
 44684                                  
 44685                                  Mark1:	; label byte
 44686                                  
 44687                                  ;IF2
 44688                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44689                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44690                                  ;	ENDIF
 44691                                  ;ENDIF
 44692                                  
 44693 00000D0D 00<rep 5h>              	  times 5 db 0
 44694                                  
 44695                                  ;############################################################################
 44696                                  ;
 44697                                  ; ** HACK FOR DOS 4.0 REDIR **
 44698                                  ; 
 44699                                  ; The redir requires the following:
 44700                                  ;
 44701                                  ;	MSVERS	offset D12H
 44702                                  ;	YRTAB	offset D14H
 44703                                  ; 	MONTAB	offset D1CH
 44704                                  ;
 44705                                  ; WARNING! WARNING!
 44706                                  ; 
 44707                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44708                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44709                                  ;
 44710                                  ; CURRENTLY MARK1 = 0D0DH
 44711                                  ;
 44712                                  ;############################################################################
 44713                                  
 44714                                  	;ORG	0D12h
 44715                                  
 44716                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44717                                  
 44718                                  	;db	6
 44719                                  	;db	20
 44720                                  
 44721                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44722                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44723 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44724 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44725                                  
 44726                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44727                                  ;
 44728                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44729                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44730                                  
 44731                                  ; Days in year
 44732                                  
 44733                                  YRTAB:   
 44734 00000D14 C8A6                    	DB	200,166			; Leap year
 44735 00000D16 C8A5                    	DB	200,165
 44736 00000D18 C8A5                    	DB	200,165
 44737 00000D1A C8A5                    	DB	200,165
 44738                                  
 44739                                  ; Days of each month
 44740                                  
 44741                                  MONTAB:        
 44742 00000D1C 1F                      	DB      31                      ; January
 44743                                  february:
 44744 00000D1D 1C                      	DB	28 			; February--reset each 
 44745                                  					; time year changes
 44746 00000D1E 1F                              DB      31                      ; March
 44747 00000D1F 1E                              DB      30                      ; April
 44748 00000D20 1F                              DB      31                      ; May
 44749 00000D21 1E                              DB      30                      ; June
 44750 00000D22 1F                              DB      31                      ; July
 44751 00000D23 1F                              DB      31                      ; August
 44752 00000D24 1E                              DB      30                      ; September
 44753 00000D25 1F                              DB      31                      ; October
 44754 00000D26 1E                              DB      30                      ; November
 44755 00000D27 1F                              DB      31                      ; December
 44756                                  
 44757                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44758                                  
 44759                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44760                                  
 44761                                  SysInitTable:
 44762                                  	;dw	SYSINITVAR
 44763 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44764 00000D2A 0000                            dw      0		; segment
 44765 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44766 00000D2E 0000                            dw      0		; segment of pointer
 44767                                  
 44768                                  ; DOS 3.3 F.C. 6/12/86
 44769                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44770                                  
 44771                                  FastTable:				; a better name
 44772                                  FastOpenTable:
 44773 00000D30 0200                    	dw      2                       ; number of entries
 44774 00000D32 [A912]                  	dw      FastRet			; pointer to ret instr.
 44775 00000D34 0000                    	dw      0                       ; and will be modified by
 44776 00000D36 [A912]                  	dw      FastRet			; FASTxxx when loaded in
 44777 00000D38 0000                    	dw      0                       
 44778                                  
 44779                                  ; DOS 3.3 F.C. 6/12/86
 44780                                  
 44781                                  FastFlg:				; flags
 44782                                  FastOpenFlg:
 44783 00000D3A 00                      	db	0			; don't change the foll: order  
 44784                                  
 44785                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44786                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44787                                  ; or filled by FastOPen when calling FastOpen Lookup
 44788                                  
 44789                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44790                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44791                                  	;times	11 db 0
 44792 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44793                                  
 44794                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44795                                  ; when calling FastOpen Lookup
 44796                                  
 44797                                  Dir_Info_Buff:	; label  byte
 44798                                  	;db   	SIZE dir_entry dup (0)
 44799                                  	;times	32 db 0
 44800 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44801                                  
 44802                                  Next_Element_Start:
 44803 00000D66 0000                    	dw	0			; save next element start offset
 44804                                  Del_ExtCluster:
 44805 00000D68 0000                    	dw	0			; for dos_delete                       
 44806                                  
 44807                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44808                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44809                                  ; not to destroy the INT 21 stack saved for the user.
 44810                                  
 44811                                  USER_SP_2F:	; LABEL  WORD
 44812 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44813                                  
 44814                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44815                                  DOS_TEMP:	; label  word		; temporary word
 44816                                  FAKE_STACK_2F:  
 44817                                  	; dw  14 dup (0)		; 12 register temporary storage
 44818 00000D6C 0000<rep Eh>            	times 14 dw 0
 44819                                  
 44820                                  Hash_Temp: 	;label  word		; temporary word             
 44821                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44822 00000D88 0000<rep 4h>            	times 4 dw 0
 44823                                              	
 44824                                  SCAN_FLAG:	
 44825 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44826                                  DATE_FLAG:
 44827 00000D91 0000                    	dw     0                	; flag to update the date
 44828                                  
 44829                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44830 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44831                                  
 44832                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44833 00000D95 00000000                	dd     0               		; for extended error                   
 44834 00000D99 00000000                	dd     0			; for parser                           
 44835 00000D9D 00000000                	dd     0			; for critical errror                  
 44836 00000DA1 00000000                	dd     0			; for IFS                              
 44837 00000DA5 00000000                	dd     0			; for code reduction                   
 44838                                  
 44839                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44840 00000DA9 FFFFFFFF                	dd     -1                                                        
 44841                                  SC_SECTOR_SIZE:
 44842 00000DAD 0000                    	dw	0			; sector size for SC                 
 44843                                  SC_DRIVE:
 44844 00000DAF 00                      	db	0			; drive # for secondary cache        
 44845                                  CurSC_DRIVE:
 44846 00000DB0 FF                      	db	-1			; current SC drive                   
 44847                                  CurSC_SECTOR:
 44848 00000DB1 00000000                	dd	0			; current SC starting sector         
 44849                                  SC_STATUS:
 44850 00000DB5 0000                    	dw	0			; SC status word                     
 44851                                  SC_FLAG:
 44852 00000DB7 00                      	db	0			; SC flag                            
 44853                                  AbsDskErr:
 44854 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44855                                                                                            
 44856                                  NO_NAME_ID:	; label byte                                                           
 44857 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44857 00000DC3 2020               
 44858                                  
 44859                                  ;hkn; moved from TABLE segment in kstrin.asm
 44860                                  
 44861                                  KISTR001S:	; label	byte		; 2/17/KK
 44862 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44863                                  KISTR001E:	; label	byte		; 2/17/KK
 44864                                  
 44865                                  ; the nul device driver used to be part of the code. However, since the 
 44866                                  ; header is in the data, and the entry points are only given as an offset,
 44867                                  ; the strategy and interrupt entry points must also be in the data now.
 44868                                  
 44869                                  ; DOSDATA:0DC6h
 44870                                  
 44871                                  SNULDEV:
 44872                                  ;procedure snuldev,far
 44873                                  	;or	word [es:bx+3],100h
 44874                                  	; 17/12/2022
 44875                                  	;or	byte [es:bx+4],01h
 44876                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44877                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44878 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44879                                  INULDEV:
 44880 00000DCC CB                      	retf				; must not be a return!
 44881                                  ;endproc snuldev
 44882                                  
 44883                                  ;M044
 44884                                  ; Second part of save area for saving last para of Windows memory
 44885                                  
 44886                                  WinoldPatch2:
 44887                                  	;db	8 dup (?)	; M044
 44888 00000DCD 00<rep 8h>              	times	8 db 0	
 44889                                  UmbSave2:
 44890                                  	;db	5 dup (?)	; M062
 44891 00000DD5 00<rep 5h>              	times	5 db 0
 44892                                  UmbSaveFlag:
 44893 00000DDA 00                      	db	0		; M062
 44894                                  
 44895                                  ; DOSDATA:0DDBh
 44896                                  
 44897                                  Mark2:	; label byte
 44898                                  
 44899                                  ;IF2
 44900                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44901                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44902                                  ;	ENDIF
 44903                                  ;ENDIF
 44904                                  
 44905                                  ;############################################################################
 44906                                  ;
 44907                                  ; ** HACK FOR DOS 4.0 REDIR **
 44908                                  ; 
 44909                                  ; The redir requires the following:
 44910                                  ;
 44911                                  ;	ERR_TABLE_21	offset DDBH
 44912                                  ;	ERR_TABLE_24	offset E5BH
 44913                                  ; 	ErrMap24	offset EABH
 44914                                  ;
 44915                                  ; WARNING! WARNING!
 44916                                  ;
 44917                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44918                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44919                                  ;
 44920                                  ; CURRENTLY MARK2 = 0DD0H
 44921                                  ;
 44922                                  ;############################################################################
 44923                                  
 44924                                  	;ORG	0DDBh
 44925                                  
 44926                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44927                                  
 44928                                  ; ---------------------------------------------------------------------------
 44929                                  ;
 44930                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44931                                  ; errors. Each entry is 4 bytes long:
 44932                                  ;
 44933                                  ;       Err#,Class,Action,Locus
 44934                                  ;
 44935                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44936                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44937                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44938                                  ;
 44939                                  ; ---------------------------------------------------------------------------
 44940                                  
 44941                                  ;ErrTab  Macro   err,class,action,locus
 44942                                  ;ifidn <locus>,<0FFh>
 44943                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44944                                  ;ELSE
 44945                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44946                                  ;ENDIF
 44947                                  ;ENDM
 44948                                  
 44949                                  ERR_TABLE_21: ; LABEL   BYTE
 44950 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44951 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44952 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44953 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44954 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44955 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44956 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44957 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44958 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44959 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44960 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44961 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44962 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44963 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44964 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44965 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44966 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44967 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44968 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44969 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44970 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44971 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44972 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44973 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44974 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44975 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44976 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44977 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44978                                      ; MSDOS 6.0
 44979 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44980 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44981 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44982 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44983                                  
 44984                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44985                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44986                                  ;		db 2,8,3,2
 44987                                  ;		db 3,8,3,2
 44988                                  ;		db 4,1,4,1
 44989                                  ;		db 5,3,3,0FFh
 44990                                  ;		db 6,7,4,1
 44991                                  ;		db 7,7,5,5
 44992                                  ;		db 8,1,4,5
 44993                                  ;		db 9,7,4,5
 44994                                  ;		db 0Ah,7,4,5
 44995                                  ;		db 0Bh,9,3,1
 44996                                  ;		db 0Ch,7,4,1
 44997                                  ;		db 0Dh,9,4,1
 44998                                  ;		db 0Fh,8,3,2
 44999                                  ;		db 10h,3,3,2
 45000                                  ;		db 11h,0Dh,3,2
 45001                                  ;		db 12h,8,3,2
 45002                                  ;		db 50h,0Ch,3,2
 45003                                  ;		db 20h,0Ah,2,2
 45004                                  ;		db 21h,0Ah,2,2
 45005                                  ;		db 54h,1,4,0FFh
 45006                                  ;		db 56h,3,3,1
 45007                                  ;		db 52h,1,4,2
 45008                                  ;		db 32h,9,3,3
 45009                                  ;		db 55h,0Ch,3,3
 45010                                  ;		db 57h,9,3,1
 45011                                  ;		db 53h,0Dh,4,1
 45012                                  ;		db 24h,1,4,5
 45013                                  ; MSDOS 6.0 (MSDOS 6.21)
 45014                                  ;		db 26h,1,4,1
 45015                                  ;		db 27h,1,4,1
 45016                                  ;		db 5Ah,0Dh,4,2
 45017                                  ; MSDOS 6.0 & MSDOS 3.3
 45018                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45019                                  
 45020                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45021                                  
 45022                                  ; ---------------------------------------------------------------------------
 45023                                  ;
 45024                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45025                                  ; errors. Each entry is 4 bytes long:
 45026                                  ;
 45027                                  ;       Err#,Class,Action,Locus
 45028                                  ;
 45029                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45030                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45031                                  ; THE END.
 45032                                  ;
 45033                                  ; ---------------------------------------------------------------------------
 45034                                  
 45035                                  ERR_TABLE_24: ; LABEL   BYTE
 45036 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45037 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45038 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45039 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45040 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45041 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45042 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45043 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45044 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45045 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45046 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45047 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45048 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45049 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45050 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45051 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45052 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45053 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45054 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45055 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45056                                  
 45057                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45058                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45059                                  ;		db 14h,4,5,1
 45060                                  ;		db 15h,5,7,0FFh
 45061                                  ;		db 16h,4,5,1
 45062                                  ;		db 17h,0Bh,4,2
 45063                                  ;		db 18h,4,5,1
 45064                                  ;		db 19h,5,1,2
 45065                                  ;		db 1Ah,0Bh,7,2
 45066                                  ;		db 1Bh,0Bh,4,2
 45067                                  ;		db 1Ch,2,7,4
 45068                                  ;		db 1Dh,5,4,0FFh
 45069                                  ;		db 1Eh,5,4,0FFh
 45070                                  ;		db 1Fh,0Dh,4,0FFh
 45071                                  ;		db 20h,0Ah,2,2
 45072                                  ;		db 21h,0Ah,2,2
 45073                                  ;		db 22h,0Bh,7,2
 45074                                  ;		db 32h,9,3,3
 45075                                  ;		db 23h,7,4,1
 45076                                  ;		db 24h,1,4,5
 45077                                  ;		db 0FFh,0Dh,5,0FFh
 45078                                  
 45079                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45080                                  
 45081                                  ; ---------------------------------------------------------------------------
 45082                                  ;
 45083                                  ; We need to map old int 24 errors and device driver errors into the new set
 45084                                  ; of errors. The following table is indexed by the new errors
 45085                                  ;
 45086                                  ; ---------------------------------------------------------------------------
 45087                                  
 45088                                  ;Public  ErrMap24
 45089                                  ErrMap24: ; Label   BYTE
 45090 00000EAB 13                          DB  error_write_protect	; 0
 45091 00000EAC 14                          DB  error_bad_unit		; 1
 45092 00000EAD 15                          DB  error_not_ready		; 2
 45093 00000EAE 16                          DB  error_bad_command	; 3
 45094 00000EAF 17                          DB  error_CRC		; 4
 45095 00000EB0 18                          DB  error_bad_length	; 5
 45096 00000EB1 19                          DB  error_seek		; 6
 45097 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45098 00000EB3 1B                          DB  error_sector_not_found	; 8
 45099 00000EB4 1C                          DB  error_out_of_paper	; 9
 45100 00000EB5 1D                          DB  error_write_fault	; A
 45101 00000EB6 1E                          DB  error_read_fault	; B
 45102 00000EB7 1F                          DB  error_gen_failure	; C
 45103 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45104 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45105 00000EBA 22                          DB  error_wrong_disk	; F
 45106                                  
 45107                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45108                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45109                                  	
 45110                                  ErrMap24End: ; LABEL   BYTE
 45111                                  
 45112                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45113                                  
 45114                                  ; ---------------------------------------------------------------------------
 45115                                  
 45116                                  ; 27/04/2019 - Retro DOS v4.0
 45117                                  
 45118                                  FIRST_BUFF_ADDR:
 45119 00000EBB 0000                    	dw	0			; first buffer address               
 45120                                  SPECIAL_VERSION:
 45121 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45122                                  FAKE_COUNT:
 45123 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45124                                  OLD_FIRSTCLUS:
 45125 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45126                                  
 45127                                  ; ---------------------------------------------------------------------------
 45128                                  
 45129                                  ;smr; moved from TABLE segment in exec.asm
 45130                                  
 45131 00000FC0 0000                    exec_init_SP: dw 0
 45132 00000FC2 0000                    exec_init_SS: dw 0
 45133 00000FC4 0000                    exec_init_IP: dw 0
 45134 00000FC6 0000                    exec_init_CS: dw 0
 45135                                  
 45136                                  exec_signature:
 45137 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45138                                  exec_len_mod_512:
 45139 00000FCA 0000                    	dw	0	; low 9 bits of length
 45140                                  exec_pages:
 45141 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45142                                  exec_rle_count:
 45143 00000FCE 0000                    	dw	0	; count of reloc entries
 45144                                  exec_par_dir:
 45145 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45146                                  exec_min_BSS:
 45147 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45148                                  exec_max_BSS:
 45149 00000FD4 0000                    	dw	0	; max number of para of BSS
 45150                                  exec_SS:
 45151 00000FD6 0000                    	dw	0	; stack of image
 45152                                  exec_SP:
 45153 00000FD8 0000                    	dw	0	; SP of image
 45154                                  exec_chksum:
 45155 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45156                                  exec_IP:
 45157 00000FDC 0000                    	dw	0	; IP of entry
 45158                                  exec_CS:
 45159 00000FDE 0000                    	dw	0	; CS of entry
 45160                                  exec_rle_table:
 45161 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45162                                  
 45163                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45164                                  
 45165                                  ;smr; eom
 45166                                  
 45167                                  ; ---------------------------------------------------------------------------
 45168                                  
 45169                                  ;SR;
 45170                                  ; WIN386 instance table for DOS
 45171                                  
 45172                                  Win386_Info:
 45173 00000FE2 0300                    	db	3, 0
 45174 00000FE4 000000000000000000-     	dd	0, 0, 0
 45174 00000FED 000000             
 45175 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45176                                  
 45177                                  Instance_Table:
 45178 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45179 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45180 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45181 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45182 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45183 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45184 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45185 0000101E 00000000                	dw	0, 0
 45186                                  
 45187                                  ; M001; SR;
 45188                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45189                                  ; M001; some DOS variables. Note that the only really important variable in 
 45190                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45191                                  ; M001; which does not need to be done in DOS 5.0. 
 45192                                  
 45193                                  ; 29/12/2022
 45194                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45195                                  
 45196                                  Win386_DOSVars:
 45197 00001022 05                      	db	5	;Major version 5 ; M001
 45198 00001023 00                      	db	0	;Minor version 0 ; M001
 45199 00001024 [EC05]                  	dw	SAVEDS	; M001
 45200 00001026 [EA05]                  	dw	SAVEBX	; M001
 45201 00001028 [2103]                  	dw	INDOS	; M001
 45202 0000102A [3E03]                  	dw	USER_ID	; M001
 45203 0000102C [1503]                  	dw	CritPatch ; M001
 45204 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45205                                  
 45206                                  ;SR;
 45207                                  ; Flag to indicate whether WIN386 is running or not
 45208                                  
 45209 00001030 00                      IsWin386: db	0
 45210                                  
 45211                                  ;M018
 45212                                  ; This variable contains the path to the VxD device needed for Win386
 45213                                  
 45214 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45214 0000103A 2E33383600         
 45215                                  
 45216                                  ;End WIN386 support
 45217                                  
 45218                                  ; ---------------------------------------------------------------------------
 45219                                  
 45220                                  ;SR;
 45221                                  ; These variables have been added for the special lie support for device
 45222                                  ;drivers.
 45223                                  ;
 45224                                  
 45225                                  DriverLoad:	
 45226 0000103F 01                      	db	1	;initialized to do special handling
 45227                                  BiosDataPtr:
 45228 00001040 00000000                	dd	0
 45229                                  
 45230                                  ; 29/12/2022 - Retro DOS v4.1
 45231                                  %if 0
 45232                                  
 45233                                  ; 27/04/2019 - Retro DOS v4.0
 45234                                  ; 04/11/2022
 45235                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45236                                  
 45237                                  ;------------------------------------------------------------------------
 45238                                  ; Patch for Sidekick
 45239                                  ;
 45240                                  ; A documented method for finding the offset of the Errormode flag in the 
 45241                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45242                                  ; for the following sequence of instructions.
 45243                                  ;
 45244                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45245                                  ;
 45246                                  ; The Offset of Errormode flag is 0320h
 45247                                  ;
 45248                                  ;------------------------------------------------------------------------
 45249                                  
 45250                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45251                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45252                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45253                                  	db	0CDh, 028h			 ; int  28h
 45254                                  
 45255                                  ;--------------------------------------------------------------------------
 45256                                  ; Patch for PortOfEntry - M036
 45257                                  ;
 45258                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45259                                  ; the offset of Errormode flag. The following patch is to support them in 
 45260                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45261                                  ;
 45262                                  ;---------------------------------------------------------------------------
 45263                                  
 45264                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45265                                  	db	075h, 037h			 ; jnz	NearLabel
 45266                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45267                                  
 45268                                  %endif ; 29/12/2022
 45269                                  
 45270                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45271                                  
 45272                                  ;--------------------------------------------------------------------------
 45273                                  
 45274                                  ;*** New FCB Implementation
 45275                                  ; This variable is used as a cache in the new FCB implementation to remember
 45276                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45277                                  
 45278 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45279                                  
 45280                                  ;DOSDATA ENDS
 45281                                  
 45282                                  ;============================================================================
 45283                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45284                                  ;============================================================================
 45285                                  ; 27/04/2019 - Retro DOS 4.0
 45286                                  
 45287                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45288                                  
 45289                                  ;---------------------------------------------------------------------------
 45290                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45291                                  ;----------------------------------------------------------------------------
 45292                                  	
 45293                                  	;db	90h
 45294                                  
 45295                                  	;EVEN
 45296                                  align 2
 45297                                  
 45298                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45299                                  
 45300                                  DOSINTTABLE:	; LABEL	DWORD
 45301                                  
 45302                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45303                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45304                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45305                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45306                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45307                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45308                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45309                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45310                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45311                                  	
 45312 00001048 [8F52]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45313 0000104C [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45314 00001050 [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45315 00001054 [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45316 00001058 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45317 0000105C [C961]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45318 00001060 [0707]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45319 00001064 [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45320 00001068 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45321                                  
 45322 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45323 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45324                                  
 45325                                  ;-------------------------------------------------------------------------
 45326                                  ;
 45327                                  ; LOW MEM STUB:
 45328                                  ;
 45329                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45330                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45331                                  ; DOS load in HIMEM. Each entry point does this.
 45332                                  ;
 45333                                  ; 	1. if jmp to 8 has been patched out
 45334                                  ;	   2. if A20 OFF
 45335                                  ;	      3. Enable A20
 45336                                  ;	   4. else 
 45337                                  ;	      5. just go to dos entry
 45338                                  ;	   6. endif
 45339                                  ;	7. else
 45340                                  ;	   8. just go to dos entry
 45341                                  ;	9. endif
 45342                                  ;
 45343                                  ;--------------------------------------------------------------------------
 45344                                  
 45345                                  ; 27/04/2019 - Retro DOS v4.0
 45346                                  
 45347                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45348                                  
 45349                                  ;--------------------------------------------------------------------------
 45350                                  ;
 45351                                  ; DIVIDE BY 0 handler
 45352                                  ;
 45353                                  ;--------------------------------------------------------------------------
 45354                                  
 45355                                  ldivov:
 45356                                  	; The following jump, skipping the XMS calls will be patched to 
 45357                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45358                                  	; needed because the stub is installed even before the XMS driver
 45359                                  	; is loaded if the user specifies dos=high in the config.sys
 45360                                  i0patch:
 45361 00001070 EB03                    	jmp	short divov_cont	
 45362                                  
 45363 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45364                                  divov_cont:
 45365 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45366                                  
 45367                                  ;------------------------------------------------------------------------
 45368                                  ;
 45369                                  ; INT 20 Handler
 45370                                  ;
 45371                                  ; Here we do not have to set up the stack to return here as the abort call
 45372                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45373                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45374                                  ; will be restored then.
 45375                                  ;
 45376                                  ;-------------------------------------------------------------------------
 45377                                  
 45378                                  lquit:
 45379                                  	; The following jump, skipping the XMS calls will be patched to 
 45380                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45381                                  	; needed because the stub is installed even before the XMS driver
 45382                                  	; is loaded if the user specifies dos=high in the config.sys
 45383                                  i20patch:
 45384 0000107A EB03                    	jmp	short quit_cont	
 45385                                  
 45386 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45387                                  quit_cont:
 45388 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45389                                  
 45390                                  ;--------------------------------------------------------------------------
 45391                                  ;
 45392                                  ; INT 21 Handler
 45393                                  ;
 45394                                  ;--------------------------------------------------------------------------
 45395                                  
 45396                                  lcommand:
 45397                                  	; The following jump, skipping the XMS calls will be patched to 
 45398                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45399                                  	; needed because the stub is installed even before the XMS driver
 45400                                  	; is loaded if the user specifies dos=high in the config.sys
 45401                                  i21patch:
 45402 00001084 EB03                    	jmp	short command_cont	
 45403                                  
 45404 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45405                                  command_cont:
 45406 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45407                                  
 45408                                  ;------------------------------------------------------------------------
 45409                                  ;
 45410                                  ; INT 25 
 45411                                  ;
 45412                                  ;----------------------------------------------------------------------------
 45413                                  
 45414                                  labsdrd:
 45415                                  	; The following jump, skipping the XMS calls will be patched to 
 45416                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45417                                  	; needed because the stub is installed even before the XMS driver
 45418                                  	; is loaded if the user specifies dos=high in the config.sys
 45419                                  i25patch:
 45420 0000108E EB03                    	jmp	short absdrd_cont	
 45421                                  
 45422 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45423                                  absdrd_cont:
 45424 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45425                                  
 45426                                  ;-------------------------------------------------------------------------
 45427                                  ;
 45428                                  ; INT 26
 45429                                  ;
 45430                                  ;-----------------------------------------------------------------------
 45431                                  
 45432                                  labsdwrt:
 45433                                  	; The following jump, skipping the XMS calls will be patched to 
 45434                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45435                                  	; needed because the stub is installed even before the XMS driver
 45436                                  	; is loaded if the user specifies dos=high in the config.sys
 45437                                  i26patch:
 45438 00001098 EB03                    	jmp	short absdwrt_cont	
 45439                                  
 45440 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45441                                  absdwrt_cont:
 45442 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45443                                  
 45444                                  ;------------------------------------------------------------------------
 45445                                  ;
 45446                                  ; INT 27
 45447                                  ;
 45448                                  ;-----------------------------------------------------------------------
 45449                                  
 45450                                  lstay_resident:
 45451                                  	; The following jump, skipping the XMS calls will be patched to 
 45452                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45453                                  	; needed because the stub is installed even before the XMS driver
 45454                                  	; is loaded if the user specifies dos=high in the config.sys
 45455                                  i27patch:
 45456 000010A2 EB03                    	jmp	short sr_cont	
 45457                                  
 45458 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45459                                  sr_cont:
 45460 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45461                                  
 45462                                  ;-----------------------------------------------------------------------------
 45463                                  ;
 45464                                  ; INT 2f
 45465                                  ;
 45466                                  ;-------------------------------------------------------------------------
 45467                                  
 45468                                  lint2f:
 45469                                  	; The following jump, skipping the XMS calls will be patched to 
 45470                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45471                                  	; needed because the stub is installed even before the XMS driver
 45472                                  	; is loaded if the user specifies dos=high in the config.sys
 45473                                  i2fpatch:
 45474 000010AC EB03                    	jmp	short int2f_cont	
 45475                                  
 45476 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45477                                  int2f_cont:
 45478 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45479                                  
 45480                                  ;-----------------------------------------------------------------------------
 45481                                  ;
 45482                                  ; CPM entry
 45483                                  ;
 45484                                  ;------------------------------------------------------------------------
 45485                                  
 45486                                  lcall_entry:
 45487                                  	; The following jump, skipping the XMS calls will be patched to 
 45488                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45489                                  	; needed because the stub is installed even before the XMS driver
 45490                                  	; is loaded if the user specifies dos=high in the config.sys
 45491                                  cpmpatch:
 45492 000010B6 EB03                    	jmp	short callentry_cont	
 45493                                  
 45494 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45495                                  callentry_cont:
 45496 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45497                                  
 45498                                  ;--------------------------------------------------------------------------
 45499                                  
 45500                                  lirett:
 45501 000010C0 CF                      	iret
 45502                                  
 45503                                  ;---------------------------------------------------------------------------
 45504                                  ;
 45505                                  ; LowIntXX:
 45506                                  ;
 45507                                  ; Interrupts from DOS that pass control to a user program must be done from
 45508                                  ; low memory, as the user program may change the state of the A20 line or
 45509                                  ; they may require that the A20 line be OFF. The following piece of code is
 45510                                  ; far call'd from the following places in DOS:
 45511                                  ;
 45512                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45513                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45514                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45515                                  ;
 45516                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45517                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45518                                  ; before doing the ints and then do a far junp back into DOS.
 45519                                  ;
 45520                                  ;---------------------------------------------------------------------------
 45521                                  
 45522 000010C1 00000000                DosRetAddr23:	dd	0
 45523 000010C5 00000000                DosRetAddr24:	dd	0
 45524 000010C9 00000000                DosRetAddr28:	dd	0
 45525                                  
 45526                                  	; Execute int 23h from low memory
 45527                                  LowInt23:
 45528                                  					; save the return address that is on
 45529                                  					; the stack
 45530 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45531 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45532                                  
 45533 000010D7 CD23                    	int	23h			; ctrl C
 45534                                  					; turn on A20 it has been turned OFF
 45535                                  					; by int 28/23/24 handler.
 45536                                  
 45537 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45538                                  
 45539 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45540                                  
 45541                                  
 45542                                  	; Execute int 24h from low memory
 45543                                  LowInt24:
 45544                                  					; save the return address that is on
 45545                                  					; the stack
 45546 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45547 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45548                                  
 45549 000010EB CD24                    	int	24h			; crit error
 45550                                  					; turn on A20 it has been turned OFF
 45551                                  					; by int 28/23/24 handler.
 45552                                  
 45553 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45554                                  
 45555 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45556                                  
 45557                                  
 45558                                   
 45559                                  	; Execute int 28h from low memory
 45560                                  LowInt28:
 45561 000010F5 CD28                    	int	28h			; idle int
 45562                                  					; turn on A20 it has been turned OFF
 45563                                  					; by int 28/23/24 handler.
 45564                                  
 45565 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45566                                  
 45567 000010FA CB                      	retf
 45568                                  
 45569                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45570                                  
 45571                                  ;-------------------------------------------------------------------------
 45572                                  ;
 45573                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45574                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45575                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45576                                  ; This is so because exepac'd programs rely on address wrap.
 45577                                  ;
 45578                                  ;------------------------------------------------------------------------- 
 45579                                  
 45580                                  disa20_xfer:
 45581 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45582                                  
 45583                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45584                                  
 45585                                  	; DS:SI points to entry point
 45586                                  	; AX:DI points to initial stack
 45587                                  	; DX has PDB pointer
 45588                                  	; BX has initial AX value
 45589                                  
 45590 000010FE FA                      	cli
 45591 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45592                                  
 45593 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45594 00001107 89FC                    	mov	SP,DI			; and SP
 45595 00001109 FB                      	sti
 45596                                  
 45597 0000110A 1E                      	push	DS			; fake long call to entry
 45598 0000110B 56                      	push	SI
 45599 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45600 0000110E 8EDA                    	mov	DS,DX
 45601 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45602 00001112 CB                      	retf
 45603                                  
 45604                                  ;-------------------------------------------------------------------------
 45605                                  ;
 45606                                  ; M003:
 45607                                  ;
 45608                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45609                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45610                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45611                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45612                                  ; more info.	
 45613                                  ;
 45614                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45615                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45616                                  ; stack to avoid additional stack overhead for the user.
 45617                                  ;
 45618                                  ; -------------------------------------------------------------------------
 45619                                  
 45620                                  disa20_iret:
 45621 00001113 E82700                  	call	XMMDisableA20
 45622 00001116 FE0E[2103]              	dec	byte [INDOS]
 45623 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45624 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 45625 00001122 89E5                    	mov	BP,SP
 45626                                  	;mov	[BP+user_env.user_AX],AL
 45627 00001124 884600                  	mov	[bp],al
 45628 00001127 A1[F205]                	mov	AX,[NSP]
 45629 0000112A A3[8405]                	mov	[USER_SP],AX
 45630 0000112D A1[F005]                	mov	AX,[NSS]
 45631 00001130 A3[8605]                	mov	[USER_SS],AX
 45632                                  
 45633 00001133 58                      	pop	AX			; restore user regs
 45634 00001134 5B                      	pop	BX
 45635 00001135 59                      	pop	CX
 45636 00001136 5A                      	pop	DX
 45637 00001137 5E                      	pop	SI
 45638 00001138 5F                      	pop	DI
 45639 00001139 5D                      	pop	BP
 45640 0000113A 1F                      	pop	DS
 45641 0000113B 07                      	pop	ES
 45642 0000113C CF                      	iret
 45643                                  
 45644                                  ;**************************************************************************
 45645                                  ;***	XMMDisableA20 - switch 20th address line			      
 45646                                  ;									      
 45647                                  ;	This routine is used to disable the 20th address line in 	      
 45648                                  ;	the system using XMM calls.					      
 45649                                  ;									      
 45650                                  ;	ENTRY	none		;ds = _DATA				      
 45651                                  ;	EXIT	A20 line disabled					      
 45652                                  ;	USES	NOTHING					      
 45653                                  ;									      
 45654                                  ;**************************************************************************
 45655                                  
 45656                                  XMMDisableA20:
 45657 0000113D 53                      	push	bx
 45658 0000113E 50                      	push	ax
 45659                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45660 0000113F B406                    	mov	ah,6
 45661 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45662 00001146 58                      	pop	ax
 45663 00001147 5B                      	pop	bx
 45664 00001148 C3                      	retn
 45665                                  
 45666                                  ; The entry point in the BIOS XMS driver is defined here.
 45667                                  
 45668                                  XMMcontrol:
 45669 00001149 00000000                	dd	0
 45670                                  
 45671                                  ;--------------------------------------------------------------------------
 45672                                  ;
 45673                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45674                                  ;									      
 45675                                  ;	This routine is used to query the A20 state in		 	      
 45676                                  ;	the system using XMM calls.					      
 45677                                  ;									      
 45678                                  ;	ENTRY: none		
 45679                                  ;
 45680                                  ;	EXIT : A20 will be ON
 45681                                  ;		
 45682                                  ; 	USES : NONE								      
 45683                                  ;									      
 45684                                  ;--------------------------------------------------------------------------
 45685                                  
 45686                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45687 0000114D 8000                    	dw	00080h
 45688 0000114F 0000                    	dw	00000h
 45689                                  
 45690                                  HighMemory:	; label dword
 45691 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 45692 00001153 FFFF                    	dw	0FFFFh
 45693                                  
 45694                                  EnsureA20ON:
 45695 00001155 9C                      	pushf
 45696 00001156 1E                      	push    ds
 45697 00001157 06                      	push	es
 45698 00001158 51                      	push	cx
 45699 00001159 56                      	push	si
 45700 0000115A 57                      	push	di
 45701                                  
 45702 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45703 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45704 00001165 B90400                  	mov	cx,4
 45705 00001168 FC                      	cld
 45706 00001169 F3A7                    	repe    cmpsw
 45707                                  
 45708 0000116B 7407                    	jz	short EA20_OFF
 45709                                  EA20_RET:
 45710 0000116D 5F                      	pop	di
 45711 0000116E 5E                      	pop	si
 45712 0000116F 59                      	pop	cx
 45713 00001170 07                      	pop	es
 45714 00001171 1F                      	pop	ds
 45715 00001172 9D                      	popf
 45716 00001173 C3                      	retn
 45717                                  
 45718                                  EA20_OFF:
 45719                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45720                                  	; NOTE: ints are disabled at this point.
 45721                                  
 45722 00001174 53                      	push	bx
 45723 00001175 50                      	push	ax
 45724                                  
 45725 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 45726 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 45727 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 45728 00001181 8CC8                    	mov	ax,cs
 45729 00001183 8ED0                    	mov	ss,ax
 45730 00001185 BC[A007]                	mov	sp,AUXSTACK
 45731                                  					; ss:sp -> DOSDATA:AuxStack
 45732                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45733 00001188 B405                    	mov	ah,5
 45734 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45735 0000118F 09C0                    	or	ax,ax
 45736 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45737                                  
 45738 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 45739 00001197 8ED0                    	mov	ss,ax
 45740 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 45741                                  
 45742 0000119E 58                      	pop	ax
 45743 0000119F 5B                      	pop	bx
 45744                                  
 45745 000011A0 EBCB                    	jmp	short EA20_RET
 45746                                  
 45747                                  XMMerror:				; M006 - Start
 45748 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 45749 000011A4 CD10                    	int	10h
 45750 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 45751 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 45752 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 45753 000011AC B002                    	mov	al,02h			; 80 X 25 text
 45754 000011AE CD10                    	int	10h
 45755                                  XMMcont:
 45756 000011B0 B405                    	mov	ah,05h			; set display page
 45757 000011B2 30C0                    	xor	al,al			; page 0
 45758 000011B4 CD10                    	int	10h
 45759                                  	
 45760 000011B6 BE[9312]                	mov	si,XMMERRMSG
 45761 000011B9 0E                      	push	cs
 45762 000011BA 1F                      	pop	ds
 45763 000011BB FC                      	cld				; clear direction flag
 45764                                  XMMprnt:
 45765 000011BC AC                      	lodsb
 45766 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45767 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 45768 000011C1 B40E                    	mov	ah,0Eh
 45769 000011C3 BB0700                  	mov	bx,7
 45770 000011C6 CD10                    	int	10h
 45771 000011C8 EBF2                    	jmp	short XMMprnt
 45772                                  
 45773                                  XMMStall:
 45774 000011CA FB                      	sti				; allow the user to warm boot
 45775 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 45776                                  
 45777                                  ;---------------------------------------------------------------------------
 45778                                  
 45779                                  ; 27/04/2019 - Retro DOS v4.0
 45780                                  
 45781                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45782                                  ALTAH	equ 0Ch
 45783                                  
 45784                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45785                                  ;table was different for this. Segments will be patched in at init time.
 45786                                  
 45787                                  OldInstanceJunk:
 45788 000011CD 7000                    	dw	70h	;segment of BIOS
 45789 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 45790 000011D1 0600                    	dw	6	;5 instance items
 45791                                  
 45792                                  	;dw	0,offset dosdata:contpos, 2
 45793                                  	;dw	0,offset dosdata:bcon, 4
 45794                                  	;dw	0,offset dosdata:carpos,106h
 45795                                  	;dw	0,offset dosdata:charco, 1
 45796                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45797                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45798                                  
 45799 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 45800 000011D9 0000[3200]0400          	dw	0,BCON,4
 45801 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 45802 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 45803 000011EB 0000[C00F]2200          	dw	0,exec_init_SP,34
 45804 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45805                                  
 45806                                  ;---------------------------------------------------------------------------
 45807                                  
 45808                                  ; M021-
 45809                                  ;
 45810                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45811                                  ; 	takes control of the HMA. When running, this word is a reliable
 45812                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45813                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45814                                  
 45815                                  DosHasHMA:
 45816 000011F7 00                      	db	0
 45817                                  FixExePatch:
 45818 000011F8 0000                    	dw	0		; M012
 45819                                  ; 28/12/2022 - Retro DOS v4.1
 45820                                  ;RationalPatchPtr:
 45821                                  ;	dw	0		; M012
 45822                                  
 45823                                  ; End M021
 45824                                  
 45825                                  ;---------------------------------------------------------------------------
 45826                                  
 45827                                  ; 28/12/2022 - Retro DOS v4.1
 45828                                  %if 0
 45829                                  ; M020 Begin
 45830                                  
 45831                                  RatBugCode:	; proc	far
 45832                                  	push	cx
 45833                                  	mov	cx,[10h]
 45834                                  rbc_loop:
 45835                                  	;loop	$
 45836                                  	loop	rbc_loop
 45837                                  	pop	cx
 45838                                  	retf
 45839                                  		
 45840                                  ; M020 End
 45841                                  %endif
 45842                                  
 45843                                  ;---------------------------------------------------------------------------
 45844                                  	
 45845                                  UmbSave1:
 45846                                  	;db	11 dup (?)	; M023
 45847 000011FA 00<rep Bh>              	times	11 db 0	
 45848                                  
 45849                                  ; DOSDATA:122Ah
 45850                                  
 45851                                  Mark3:	; label byte
 45852                                  
 45853                                  ;IF2
 45854                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45855                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45856                                  ;	ENDIF
 45857                                  ;ENDIF
 45858                                  
 45859                                  ;############################################################################
 45860                                  ;
 45861                                  ; ** HACK FOR DOS 4.0 REDIR **
 45862                                  ;
 45863                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45864                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45865                                  ; COUNTRY_CDPG if it can. 
 45866                                  ;
 45867                                  ; MARK3 SHOULD NOT BE > 122AH 
 45868                                  ;
 45869                                  ; As of 9/6/90, this area is FULL!
 45870                                  ;
 45871                                  ;############################################################################
 45872                                   
 45873                                  	;ORG	0122Ah
 45874                                  
 45875                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45876                                  
 45877                                  ; The following table is used for DOS 3.3
 45878                                  ;DOS country and code page information is defined here for DOS 3.3.
 45879                                  ;The initial value for ccDosCountry is 1 (USA).
 45880                                  ;The initial value for ccDosCodepage is 850.
 45881                                  
 45882                                  ; country and code page information
 45883                                  ; ---------------------------------------------------------------------------
 45884                                  COUNTRY_CDPG:	; label  byte
 45885 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45886 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45886 00001216 53595300           
 45887                                  	;db   51 dup (?)
 45888 0000121A 00<rep 33h>             	times 51 db 0
 45889                                  ; ------------------------------------------------<MSKK01>-------------------
 45890                                  ;ifdef	DBCS
 45891                                  ;  ifdef JAPAN
 45892                                  ;	dw   932			; system code page id (JAPAN)
 45893                                  ;  endif
 45894                                  ;  ifdef TAIWAN
 45895                                  ;	dw   938			; system code page id (TAIWAN)
 45896                                  ;  endif
 45897                                  ;  ifdef KOREA
 45898                                  ;	dw   934			; system code page id (KOREA IBM)
 45899                                  ;  endif
 45900                                  ;else
 45901 0000124D B501                    	dw   437			; system code page id
 45902                                  ;endif
 45903                                  ; ------------------------------------------------<MSKK01>-------------------
 45904 0000124F 0600                    	dw   6				; number of entries
 45905 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 45906 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45907 00001254 0000                    	dw   0				; segment of poiter
 45908 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45909 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45910 00001259 0000                    	dw   0				; segment of poiter
 45911 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 45912 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45913 0000125E 0000                    	dw   0				; segment of poiter
 45914 00001260 06                      	db   SetCollate	; 6		; collate type
 45915 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45916 00001263 0000                    	dw   0				; segment of poiter
 45917 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45918 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45919 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45920 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 45921 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45922                                  ; ------------------------------------------------<MSKK01>-------------------
 45923                                  ;ifdef	DBCS
 45924                                  ;	...... 
 45925                                  ;else
 45926 0000126D 0100                    	dw   1				; USA country id
 45927 0000126F B501                    	dw   437			; USA system code page id
 45928 00001271 0000                    	dw   0 				; date format
 45929 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 45930 00001278 2C00                    	db   ',',0			; thousand separator
 45931 0000127A 2E00                    	db   '.',0			; decimal separator
 45932 0000127C 2D00                    	db   '-',0			; date separator
 45933 0000127E 3A00                    	db   ':',0			; time separator
 45934 00001280 00                      	db   0				; currency format flag
 45935 00001281 02                      	db   2				; # of digits in currency
 45936 00001282 00                      	db   0 				; time format
 45937 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45938 00001285 0000                    	dw   0				; segment of entry point
 45939 00001287 2C00                    	db   ',',0			; data list separator
 45940 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45940 00001292 00                 
 45941                                  ;endif
 45942                                  ; ------------------------------------------------<MSKK01>-------------------
 45943                                  
 45944                                  ; 27/04/2019 - Retro DOS v4.0
 45945                                  
 45946                                  ;include msdos.cl2			; XMMERRMSG
 45947                                  
 45948                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45949                                  
 45950                                  XMMERRMSG:
 45951 00001293 0D0A                    	db	0Dh,0Ah
 45952 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45952 0000129E 617265204572726F72-
 45952 000012A7 0D0A24             
 45953                                  
 45954                                  ; DOSDATA ends
 45955                                  
 45956                                  ; 05/11/2022
 45957                                  ;----------------------------------------------------------------------------
 45958                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45959                                  ;----------------------------------------------------------------------------
 45960                                  
 45961                                  ; 28/12/2022 - Retro DOS v4.1
 45962                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 45963                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 45964                                  ;----------------------------------------------------------------------------
 45965                                  %if 0
 45966                                  ;----------------------------------------------------------------------------
 45967                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45968                                  
 45969                                  ;============================================================================
 45970                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45971                                  ;============================================================================
 45972                                  ; 27/04/2019 - Retro DOS 4.0
 45973                                  
 45974                                  ;DOSDATA Segment
 45975                                  
 45976                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45977                                  
 45978                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45979                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45980                                  
 45981                                  ; first and second DOS patches
 45982                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45983                                  ;
 45984                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45985                                  ;	DVRDLP:
 45986                                  ;	DVWRTLP:
 45987                                  ;
 45988                                  ;
 45989                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45990                                  ;	lds	si,si+7 				  ; sf_devptr
 45991                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45992                                  
 45993                                  DOSP1_ID:	db	036h,0C5h,036h
 45994                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45995                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45996                                  
 45997                                  		db	90h, 90h
 45998                                  
 45999                                  DOSP12_ID:	db	036h,0C5h,036h
 46000                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46001                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46002                                  
 46003                                  ; DOSDATA:12E3h
 46004                                  
 46005                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46006                                  ;
 46007                                  ; Code in disk.asm, 1 location
 46008                                  ;	GETBUF:
 46009                                  ;
 46010                                  ; 051h	push	cx	<- begin special int28 mode
 46011                                  ;	push	es
 46012                                  ;	push	di
 46013                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46014                                  ;	call	????	; $STD_CON_STRING_INPUT
 46015                                  ;	pop	di
 46016                                  ;	pop	es
 46017                                  ; 059h	pop	cx	<- end special int28 mode
 46018                                  
 46019                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46020                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46021                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46022                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46023                                  DOSP4_ID:	db	059h			; pop cx
 46024                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46025                                  	
 46026                                  ; DOSDATA:12EFh
 46027                                  
 46028                                  ; Fifth DOS patch - System call 40h (Write) to console
 46029                                  ;
 46030                                  ; Code in disk.asm, 1 location
 46031                                  ;
 46032                                  ;		push	cx
 46033                                  ;      WRCONLP: lodsb
 46034                                  ;		cmp	al,1Ah
 46035                                  ;		jz	????
 46036                                  ;		call	????	<- "simulate" int28 event
 46037                                  ;		loop	WRCONLP
 46038                                  ;      CONEOF:	pop	ax
 46039                                  
 46040                                  DOSP5_ID:	db	051h			; push cx
 46041                                  		db	0ACh,03Ch,01Ah,074h,005h
 46042                                  		db	0E8h			; call
 46043                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46044                                  
 46045                                  ; DOSDATA:12F6h
 46046                                  
 46047                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46048                                  ;
 46049                                  ; Code in disp.asm, 1 location
 46050                                  ;
 46051                                  ;
 46052                                  ;	mov [SaveDS],ds
 46053                                  ;	mov [SaveBX],bx
 46054                                  ;	mov bx,cs
 46055                                  ;	mov ds,bx
 46056                                  ;	inc [indos]
 46057                                  ;	xor ax,ax
 46058                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46059                                  
 46060                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46061                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46062                                  		db	02Eh,089h,01Eh
 46063                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46064                                  		db	08Ch,0CBh		; mov bx,cs
 46065                                  		db	08Eh,0DBh		; mov ds,bx
 46066                                  		db	0FEh,006h
 46067                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46068                                  		db	033h,0C0h		; xor ax,ax
 46069                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46070                                  
 46071                                  ; DOSDATA:130Ah
 46072                                  
 46073                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46074                                  ;
 46075                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46076                                  ;
 46077                                  ;
 46078                                  ;
 46079                                  ;	push	ax
 46080                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46081                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46082                                  ;	pop	ax
 46083                                  ;	jz	????
 46084                                  
 46085                                  DOSP8_ID:	db	050h			; push ax
 46086                                  		db	036h,0A1h
 46087                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46088                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46089                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46090                                  		db	02Fh,058h		; pop  ax
 46091                                  
 46092                                  ; DOSDATA:1314h
 46093                                  
 46094                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46095                                  ;
 46096                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46097                                  ;   a yeild when a character is not ready to be read.
 46098                                  ;
 46099                                  ; Code in disk.asm, 3 locations
 46100                                  ;
 46101                                  ;   DVRDRAW:
 46102                                  ;	    PUSH    ES
 46103                                  ;	    POP     DS
 46104                                  ;   ReadRawRetry:				<- Patch 10
 46105                                  ;	    MOV     BX,DI
 46106                                  ;	    XOR     AX,AX			<- Reenter #2
 46107                                  ;	    MOV     DX,AX
 46108                                  ;	    call    SETREAD
 46109                                  ;	    PUSH    DS				<- Reenter #1
 46110                                  ;	    LDS     SI,[THISSFT]
 46111                                  ;	    call    DEVIOCALL
 46112                                  ;	    MOV     DX,DI
 46113                                  ;	    MOV     AH,86H
 46114                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46115                                  ;	    TEST    DI,STERR
 46116                                  ;	    JZ	    CRDROK
 46117                                  ;	    call    CHARHARD
 46118                                  ;	    MOV     DI,DX
 46119                                  ;	    OR	    AL,AL
 46120                                  ;	    JZ	    CRDROK
 46121                                  ;	    CMP     AL,3
 46122                                  ;	    JZ	    CRDFERR
 46123                                  ;	    POP     DS
 46124                                  ;	    JMP     ReadRawRetry
 46125                                  ;
 46126                                  ;   CRDFERR:
 46127                                  ;	    POP     DI				<- Patch 11
 46128                                  ;   DEVIOFERR:
 46129                                  ;	    LES     DI,[THISSFT]
 46130                                  ;	    jmp     SET_ACC_ERR_DS
 46131                                  ;
 46132                                  ;   CRDROK:
 46133                                  ;	    POP     DI				<- Patch 12
 46134                                  ;	    MOV     DI,DX
 46135                                  ;	    ADD     DI,[CALLSCNT]
 46136                                  ;	    JMP     SHORT ENDRDDEVJ3
 46137                                  
 46138                                  DOSP10_ID:		db	006H,01FH
 46139                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46140                                  DOSP10_LOC:		db	08BH,0DFH
 46141                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46142                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46143                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46144                                  			db	0DFH,00EH
 46145                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46146                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46147                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46148                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46149                                  			db	009H,003H
 46150                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46151                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46152                                  			db	01FH,0EBH,0CFH
 46153                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46154                                  			db	05FH
 46155                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46156                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46157                                  
 46158                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46159                                  			db	05FH,08BH,0FAH
 46160                                  ; DOSDATA:1353h
 46161                                  
 46162                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46163                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46164                                  ;
 46165                                  ;	    Sets focus to current VM so user can see fatal message.
 46166                                  ;
 46167                                  ;
 46168                                  ;	l0: lodsb		<- Setfocus here
 46169                                  ;	    cmp al, '$'
 46170                                  ;	    je l1
 46171                                  ;	    mov bl, 7
 46172                                  ;	    mov ah, 0Eh
 46173                                  ;	    int 10h
 46174                                  ;	    jmp l0
 46175                                  ;	l1: jmp $
 46176                                  
 46177                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46178                                  		db	03Ch,024h		;     cmp al, '$'
 46179                                  		db	074h,008h		;     je l1
 46180                                  		db	0B3h,007h		;     mov bl, 7
 46181                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46182                                  		db	0CDh,010h		;     int 10h
 46183                                  		db	0EBh,0F3h		;     jmp l0
 46184                                  		db	0EBh,0FEh		; l1: jmp $
 46185                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46186                                  
 46187                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46188                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46189                                  
 46190                                  ; 06/12/2022
 46191                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46192                                  
 46193                                  ; DOSDATA ends
 46194                                  
 46195                                  ;============================================================================
 46196                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46197                                  ;============================================================================
 46198                                  ; 27/04/2019 - Retro DOS 4.0
 46199                                  
 46200                                  ;mpatch.asm -- holds data patch location for callouts 
 46201                                  ; -- allocate cluster in rom.asm
 46202                                  ;
 46203                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46204                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46205                                  ; cluster allocation, however it can be expanded to be used by other
 46206                                  ; patches. This is important since we have an easy-access pointer to
 46207                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46208                                  ; only patch out a far call/retf, so any space after that could be
 46209                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46210                                  ; to call out here.
 46211                                  ;
 46212                                  ; Currently, we allocate only the minimum space required for the 6
 46213                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46214                                  ; to reserve space here if your new data will be position dependent
 46215                                  ; and would prohibit growing of this table.
 46216                                  ;       
 46217                                  ;history	-	created 8-7-92 by scottq
 46218                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46219                                  ;
 46220                                  ;Exported Functions
 46221                                  ;==================
 46222                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46223                                  
 46224                                  ; DosData Segment
 46225                                  
 46226                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46227                                  
 46228                                  ; ---------------------------------------------------------------------------
 46229                                  
 46230                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46231                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46232                                  ; greater). Added to this file because it needed to be somewhere and is
 46233                                  ; 'patch' related.
 46234                                  
 46235                                  Rational386PatchPtr:
 46236                                  	dw	0	; points to patch routine or RET instr.
 46237                                  ; ---------------------------------------------------------------------------
 46238                                  
 46239                                  MagicPatch:
 46240                                  ;MagicPatch proc far
 46241                                          retf            ;default is to just return to allocate
 46242                                          nop             ;however, this code will be patched
 46243                                          nop             ;by magicdrv.sys to
 46244                                          nop             ; call far ?:?     
 46245                                          nop             ; retf or perhaps just jmp far
 46246                                          nop             ;retf/nop take one byte, so we need six instructions
 46247                                                          ;for 6 byte patch
 46248                                  ;MagicPatch endp
 46249                                  
 46250                                  ; ---------------------------------------------------------------------------
 46251                                  
 46252                                  ;DosData Ends
 46253                                  
 46254                                  ; DOSDATA:136Ah
 46255                                  
 46256                                  ;----------------------------------------------------------------------------
 46257                                  
 46258                                  ;DOSDATALAST SEGMENT
 46259                                  
 46260                                  ; 29/04/2019 - Retro DOS v4.0
 46261                                  
 46262                                  ;----------------------------------------------------------------------------
 46263                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46264                                  
 46265                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 46266                                  
 46267                                  ;align 16
 46268                                  
 46269                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46270                                  
 46271                                  ;----------------------------------------------------------------------------
 46272                                  
 46273                                  %endif	; 05/11/2022
 46274                                  
 46275                                  ; 05/12/2022
 46276                                  ;MSDAT001E:	; label byte
 46277                                  
 46278                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46279                                  DOSDATAEND equ $
 46280                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46281                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46282                                  
 46283                                  ;DOSDATALAST ENDS
 46284                                  
 46285                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46286                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46287                                  ;============================================================================
 46288                                  ;	END
 46289                                  ;============================================================================
 46290                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46291                                  ; -----------------------------
 46292                                  ; MAY 2019, ISTANBUL - TURKIYE.
