     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 12/04/2024 - Retro DOS v4.1 ((Previous: 25/03/2024))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if console input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5 are the block device number for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E92C75                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [C660]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [3816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [4116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [F316]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [0E17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [1417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [8215]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [AE15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [5C13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [B513]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [C113]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [2817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [3217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [800F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [670E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [011E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [D117]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [F01E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [361F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [7717]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [581C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [5C1C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [E01E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [3D18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5106]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [620E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [570E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [0F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [110F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5106]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5106]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [500F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5106]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [601C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [641C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [8917]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [5F17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [880E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [8D10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [541C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [501C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [040F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [5D0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [7A0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [990A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [AA0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [480C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [440E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [1F0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [6A60]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [520F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [3A0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [790E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [210E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [B50E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [4F0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [BC21]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [0821]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [4321]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [6E6E]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [9A6D]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [DC65]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [E566]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [4267]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [BE6E]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [4767]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [7B6E]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [1D22]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [FC67]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [1A68]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [A420]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [5C61]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [D662]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [B262]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [505A]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [A260]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [465A]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [EE1F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [4220]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [460F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [B50F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [430C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [7C10]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [E46E]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [AE67]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [0B63]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [C90E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [6A6F]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [526F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [1C71]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [EF63]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [E468]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [4968]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [356D]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5106]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [E90E]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [D20C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [CF0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [2766]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [0F66]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [7F11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [0F66]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5106]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [0470]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [0E07]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3309]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [AA2E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [AA0E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [2D09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [8A4F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [4316]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [5C52]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [D357]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [9F2F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [9859]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [C971]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [F62B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [E02B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [E50A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [EB11]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [CC57]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [EB11]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [B811]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [D011]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [354F]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [1058]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [6F59]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [5865]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [A969]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [5469]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [5A6D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [860B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [150C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [7C0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [9611]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [9768]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [2565]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [356D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7806]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [D840]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [EB11]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [DE11]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [8D12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [DC65]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [9312]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [E566]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [4F12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [D012]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [BF12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [ED12]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [F112]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5106]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[1112]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8B44B                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E82F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E81355                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8920D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8A40D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E82D31                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E86033                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E80B0D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E88C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E81A0D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E8EA35                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E8C230                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL,1		; No increment; need carry flag
  4981 00000600 7210                    	JC	SHORT SKIPGET
  4982 00000602 E84F63                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 730B                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985                                  	
  4986                                  	; 23/03/2024 - Retro DOS v4.1
  4987                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4988                                  	;CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4989                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4990                                  	;STC				;DCR.			;AN000;
  4991 00000607 B400                    	mov	ah,0	
  4992                                  
  4993 00000609 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4994 0000060C C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4995                                  SKIPGET:
  4996 00000612 58                      	POP	AX
  4997 00000613 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4998                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4999                                  	;jnc	short getbp_t
  5000                                  	;retn
  5001                                  getbp_t:
  5002 00000615 C42E[A205]              	LES	BP,[THISCDS]
  5003                                  	; 15/12/2022
  5004 00000619 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5005                                  	; 07/12/2022
  5006                                  	;TEST	WORD [ES:BP+43H],8000H
  5007                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5008 0000061E 7408                    	JZ	SHORT GETBP_CDS
  5009 00000620 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5010 00000626 F9                      	STC
  5011                                  GETBP_RETN:
  5012 00000627 C3                      	RETN
  5013                                  
  5014                                  GETBP_CDS:
  5015                                  	;LES	BP,[ES:BP+45H]
  5016 00000628 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5017                                  GOTDPB:
  5018                                  	; Load THISDPB from ES:BP
  5019 0000062C 892E[8A05]              	MOV	[THISDPB],BP
  5020 00000630 8C06[8C05]              	MOV	[THISDPB+2],ES
  5021 00000634 C3                      	RETN
  5022                                  
  5023                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5024                                  
  5025                                  ;----------------------------------------------------------------------------
  5026                                  ;
  5027                                  ; Procedure Name : SYS_RETURN
  5028                                  ;
  5029                                  ; These are the general system call exit mechanisms. All internal system
  5030                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5031                                  ; is to set the user's flags and set his AX register for return.
  5032                                  ;
  5033                                  ;----------------------------------------------------------------------------
  5034                                  
  5035                                          ;procedure   SYS_RETURN,NEAR
  5036                                  SYS_RETURN:        
  5037                                          ;entry	SYS_RET_OK
  5038                                  SYS_RET_OK:   
  5039 00000635 E84DFE                  	call    Get_User_Stack
  5040                                  		; turn off user's carry flag
  5041                                  SYS_RET_OK_clc: ; 25/06/2019 
  5042                                          ;;and	word [SI+16h],0FFFEh 
  5043                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5044                                          ; 25/06/2019
  5045 00000638 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5046 0000063C EB10                    	JMP     SHORT DO_RET
  5047                                  
  5048                                          ;entry   SYS_RET_ERR
  5049                                  SYS_RET_ERR:        
  5050 0000063E 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5051 00000640 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5052 00000643 E81A00                  	CALL	ErrorMap
  5053                                  
  5054                                  	;entry	From_GetSet
  5055                                  From_GetSet:
  5056 00000646 E83CFE                          call    Get_User_Stack
  5057                                  		 ; signal carry to user
  5058                                  	;;or	word [SI+16h],1
  5059                                  	;OR	word [SI+user_env.user_F],f_Carry
  5060                                  	; 25/06/2019
  5061 00000649 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5062 0000064D F9                      	STC			; also, signal internal error
  5063                                  DO_RET:
  5064                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5065 0000064E 8904                    	MOV	[SI],AX
  5066 00000650 C3                      	RETN
  5067                                  
  5068                                  	;entry	FCB_RET_OK
  5069                                  FCB_RET_OK:
  5070                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5071                                  NO_OP:
  5072 00000651 30C0                    	XOR	AL,AL
  5073 00000653 C3                      	retn
  5074                                  
  5075                                  	;entry	FCB_RET_ERR
  5076                                  FCB_RET_ERR:
  5077 00000654 30E4                    	XOR	AH,AH
  5078 00000656 36A3[2403]              	mov	[ss:EXTERR],AX
  5079 0000065A E80300                  	CALL	ErrorMap
  5080 0000065D B0FF                    	MOV	AL,-1
  5081 0000065F C3                      	retn
  5082                                  
  5083                                  	;entry	ErrorMap
  5084                                  ErrorMap:
  5085 00000660 56                      	PUSH	SI
  5086                                  				; ERR_TABLE_21 is now in DOSDATA
  5087 00000661 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5088                                  				; SS override for FAILERR and EXTERR
  5089 00000664 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5090 0000066A 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5091                                  		 ; Ooops, this is the REAL reason
  5092                                  	;mov	word [SS:EXTERR],53h
  5093 0000066C 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5094                                  EXTENDED_NORMAL:
  5095 00000673 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5096 00000676 5E                      	POP	SI
  5097 00000677 C3                      	retn
  5098                                  
  5099                                  	;EndProc SYS_RETURN
  5100                                  
  5101                                  ;---------------------------------------------------------------------------
  5102                                  ;
  5103                                  ; Procedure Name : CAL_LK
  5104                                  ;
  5105                                  ; Inputs:
  5106                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5107                                  ;		(DS NEED not be DOSDATA)
  5108                                  ;	[EXTERR] is set with error
  5109                                  ; Function:
  5110                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5111                                  ; Outputs:
  5112                                  ;	[EXTERR_CLASS] set
  5113                                  ;	[EXTERR_ACTION] set
  5114                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5115                                  ; Destroys SI, FLAGS
  5116                                  ;
  5117                                  ;---------------------------------------------------------------------------
  5118                                  
  5119                                  	;procedure CAL_LK,NEAR
  5120                                  CAL_LK:
  5121 00000678 1E                      	PUSH	DS
  5122 00000679 50                      	PUSH	AX
  5123 0000067A 53                      	PUSH	BX
  5124                                  
  5125                                  ;M048	Context DS		; DS:SI -> Table
  5126                                  ;
  5127                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5128                                  ; is DOSDATA
  5129                                  
  5130                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5131                                  	; 15/05/2019 - Retro DOS v4.0
  5132 0000067B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5133                                  
  5134                                  	; 18/07/2018
  5135                                  	;push	ss
  5136                                  	;pop	ds
  5137                                  
  5138 00000680 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5139                                  TABLK1:
  5140 00000684 AC                      	LODSB
  5141                                  
  5142 00000685 3CFF                    	CMP	AL,0FFH
  5143 00000687 7409                    	JZ	short GOT_VALS	; End of table
  5144 00000689 38D8                    	CMP	AL,BL
  5145 0000068B 7405                    	JZ	short GOT_VALS	; Got entry
  5146 0000068D 83C603                  	ADD	SI,3		; Next table entry
  5147                                  	; 15/08/2018
  5148 00000690 EBF2                    	JMP	short TABLK1
  5149                                  
  5150                                  GOT_VALS:
  5151 00000692 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5152                                  
  5153 00000693 80FCFF                  	CMP	AH,0FFH
  5154 00000696 7404                    	JZ	short NO_SET_ACT
  5155 00000698 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5156                                  NO_SET_ACT:
  5157 0000069C 3CFF                    	CMP	AL,0FFH
  5158 0000069E 7403                    	JZ	short NO_SET_CLS
  5159 000006A0 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5160                                  NO_SET_CLS:
  5161 000006A3 AC                      	LODSB			; Get LOCUS
  5162                                  
  5163 000006A4 3CFF                    	CMP	AL,0FFH
  5164 000006A6 7403                    	JZ	short NO_SET_LOC
  5165 000006A8 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5166                                  NO_SET_LOC:
  5167 000006AB 5B                      	POP	BX
  5168 000006AC 58                      	POP	AX
  5169 000006AD 1F                      	POP	DS
  5170 000006AE C3                      	retn
  5171                                  
  5172                                  	;EndProc CAL_LK
  5173                                  
  5174                                  ;---------------------------------------------------------------------------
  5175                                  ;
  5176                                  ; Procedure Name : ETAB_LK
  5177                                  ;
  5178                                  ; Inputs:
  5179                                  ;	AX is error code
  5180                                  ;	[USER_IN_AX] has AH value of system call involved
  5181                                  ; Function:
  5182                                  ;	Make sure error code is appropriate to this call.
  5183                                  ; Outputs:
  5184                                  ;	AX MAY be mapped error code
  5185                                  ;	[EXTERR] = Input AX
  5186                                  ; Destroys ONLY AX and FLAGS
  5187                                  ;
  5188                                  ;---------------------------------------------------------------------------
  5189                                  
  5190                                  	;procedure ETAB_LK,NEAR
  5191                                  
  5192                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5193 000006AF 1E                      	PUSH	DS
  5194 000006B0 56                      	PUSH	SI
  5195 000006B1 51                      	PUSH	CX
  5196 000006B2 53                      	PUSH	BX
  5197                                  
  5198                                  	;Context DS			; SS is DOSDATA
  5199                                  
  5200 000006B3 16                      	push	ss
  5201 000006B4 1F                      	pop	ds
  5202                                  
  5203 000006B5 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5204                                  
  5205                                  					; I21_MAP_E_TAB is now in DOSCODE
  5206 000006B8 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5207 000006BB 88C7                    	MOV	BH,AL			; Real code to BH
  5208 000006BD 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5209                                  TABLK2:
  5210                                  	; 15/05/2019 - Retro DOS v4.0
  5211 000006C1 2E                      	cs
  5212 000006C2 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5213                                  	
  5214                                  	; 18/07/2018 - Retro DOS v3.0
  5215                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5216                                  
  5217 000006C3 3CFF                    	CMP	AL,0FFH 		; End of table?
  5218 000006C5 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5219 000006C7 38D8                    	CMP	AL,BL			; Found call?
  5220 000006C9 740C                    	JZ	short GOT_CALL		; Yes
  5221 000006CB 86E0                    	XCHG	AH,AL			; Count to AL
  5222 000006CD 30E4                    	XOR	AH,AH			; Make word for add
  5223 000006CF 01C6                    	ADD	SI,AX			; Next table entry
  5224 000006D1 EBEE                    	JMP	short TABLK2
  5225                                  
  5226                                  NOT_IN_TABLE:
  5227 000006D3 88F8                    	MOV	AL,BH			; Restore original code
  5228 000006D5 EB0C                    	JMP	SHORT NO_MAP
  5229                                  
  5230                                  GOT_CALL:
  5231 000006D7 88E1                    	MOV	CL,AH
  5232 000006D9 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5233                                  CHECK_CODE:
  5234                                  	; 15/05/2019 - Retro DOS v4.0
  5235 000006DB 2E                      	cs
  5236 000006DC AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5237                                  
  5238                                  	; 18/07/2018
  5239                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5240                                  
  5241 000006DD 38F8                    	CMP	AL,BH			; Code OK?
  5242 000006DF 7402                    	JZ	short NO_MAP		; Yes
  5243 000006E1 E2F8                    	LOOP	CHECK_CODE
  5244                                  NO_MAP:
  5245 000006E3 30E4                    	XOR	AH,AH			; AX is now valid code
  5246 000006E5 5B                      	POP	BX
  5247 000006E6 59                      	POP	CX
  5248 000006E7 5E                      	POP	SI
  5249 000006E8 1F                      	POP	DS
  5250 000006E9 C3                      	retn
  5251                                  
  5252                                  	;EndProc ETAB_LK
  5253                                  
  5254                                  ; 18/07/2018 - Retro DOS v3.0
  5255                                  ;---------------------------------------------------------------------------
  5256                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5257                                  
  5258                                  ;IF installed ; (*)
  5259                                  
  5260                                  ;---------------------------------------------------------------------------
  5261                                  ;
  5262                                  ; Procedure Name : SetBad
  5263                                  ;
  5264                                  ; SetBad sets up info for bad functions
  5265                                  ;
  5266                                  ;---------------------------------------------------------------------------
  5267                                  
  5268                                  SetBad:
  5269                                  	;mov	ax,1
  5270 000006EA B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5271                                  
  5272                                  	; MSDOS 3.3
  5273                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5274                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5275                                  
  5276                                  ;	set up ds to point to DOSDATA
  5277                                  
  5278                                  	; 15/05/2019 - Retro DOS v4.0
  5279                                  	; MSDOS 6.0
  5280 000006ED 1E                      	push	ds
  5281                                  
  5282                                  	;getdseg <ds>
  5283 000006EE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5284                                  
  5285 000006F3 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5286                                  
  5287 000006F8 1F                      	pop	ds	  	;hkn; restore ds
  5288                                  
  5289 000006F9 F9                      	STC
  5290 000006FA C3                      	retn
  5291                                  
  5292                                  ;--------------------------------------------------------------------------
  5293                                  ;
  5294                                  ; Procedure Name : BadCall
  5295                                  ;
  5296                                  ; BadCall is the initial routine for bad function calls
  5297                                  ;
  5298                                  ;--------------------------------------------------------------------------
  5299                                  
  5300                                  BadCall:
  5301 000006FB E8ECFF                  	call	SetBad
  5302 000006FE CB                      	retf
  5303                                  
  5304                                  ;--------------------------------------------------------------------------
  5305                                  ;
  5306                                  ; OKCall always sets carry to off.
  5307                                  ;
  5308                                  ;-----------------------------------------------------------------------
  5309                                  
  5310                                  OKCall:
  5311 000006FF F8                      	CLC
  5312 00000700 CB                      	retf
  5313                                  
  5314                                  ;---------------------------------------------------------------------------
  5315                                  ;
  5316                                  ; Procedure Name : INT2F
  5317                                  ;
  5318                                  ; INT 2F handler works as follows:
  5319                                  ;   PUSH    AX
  5320                                  ;   MOV     AX,multiplex:function
  5321                                  ;   INT     2F
  5322                                  ;   POP     ...
  5323                                  ; The handler itself needs to make the AX available for the various routines.
  5324                                  ;
  5325                                  ;----------------------------------------------------------------------------
  5326                                  
  5327                                  ; 15/05/2019 - Retro DOS v4.0
  5328                                  
  5329                                  ;KERNEL_SEGMENT equ 70h
  5330                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5331                                  DOSBIODATASEG equ 70h
  5332                                  
  5333                                  ; retrodos4.s - offset in BIOSDATA
  5334                                  bios_i2f equ 5
  5335                                  
  5336                                  ;PUBLIC	Int2F
  5337                                  ;INT2F	PROC	FAR
  5338                                  
  5339                                  ; 15/05/2019
  5340                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5341                                  
  5342                                  ; 04/11/2022
  5343                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5344                                  
  5345                                  	; 05/01/2024	
  5346                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5347                                  	; 18/07/2018 - Retro DOS v3.0
  5348                                  INT2F:
  5349                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5350                                  INT2FNT:
  5351                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5352 00000701 FB                      	STI
  5353                                  	;cmp	ah,11h
  5354 00000702 80FC11                  	CMP	AH,MultNET
  5355 00000705 750A                    	JNZ	short INT2FSHR
  5356                                  TestInstall:
  5357 00000707 08C0                    	OR	AL,AL
  5358 00000709 7403                    	JZ	short Leave2F
  5359                                  BadFunc:
  5360 0000070B E8DCFF                  	CALL	SetBad
  5361                                  
  5362                                  	;entry	Leave2F
  5363                                  Leave2F:
  5364 0000070E CA0200                  	RETF	2			; long return + clear flags off stack
  5365                                  
  5366                                  INT2FSHR:
  5367                                  	;cmp	ah,10h
  5368 00000711 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5369 00000714 74F1                    	JZ	short TestInstall	; yes, check for installation
  5370                                  INT2FNLS:
  5371                                  	;cmp	ah,14h
  5372 00000716 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5373 00000719 74EC                    	JZ	short TestInstall	; yes check for installation
  5374                                  INT2FDOS:
  5375                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5376                                  
  5377                                  	; 18/07/2018
  5378                                  	; MSDOS 3.3
  5379                                  	;;cmp	ah,12h	
  5380                                  	;CMP	AH,MultDOS
  5381                                  	;jz	short DispatchDOS
  5382                                  	;iret
  5383                                  
  5384                                  	; 15/05/2019
  5385                                  	; MSDOS 6.0
  5386                                  	;cmp	ah,12h	; 07/12/2022
  5387 0000071B 80FC12                  	CMP	AH,MultDOS
  5388 0000071E 7503                    	JNZ	short check_win		;check if win386 broadcast
  5389 00000720 E9F201                  	jmp	DispatchDOS
  5390                                  
  5391                                  	; .... win386 .... 
  5392                                  
  5393                                  check_win:
  5394                                  	;cmp	ah,16h
  5395 00000723 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5396 00000726 7408                    	je	short Win386_Msg
  5397                                  
  5398                                  	; M044
  5399                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5400                                  	; of Windows. If so, do special action of going and saving last para
  5401                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5402                                  	; bug
  5403                                  
  5404 00000728 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5405                                  	;jne	short next_i2f		; no, chain on
  5406                                  	; 15/12/2022
  5407                                  	;jmp	winold_swap		; yes, do desired action
  5408 0000072B 7442                    	je	short winold_swap
  5409 0000072D E90501                  	jmp	next_i2f
  5410                                  
  5411                                  	; 15/12/2022
  5412                                  ;next_i2f:
  5413                                  ;	;;;jmp	bios_i2f
  5414                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5415                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5416                                  ;	; 04/11/2022
  5417                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5418                                  
  5419                                  ;	IRET				; This assume that we are at the head
  5420                                  					; of the list
  5421                                  ;INT2F	ENDP
  5422                                  
  5423                                  ; 15/05/2019 - Retro DOS v4.0
  5424                                  
  5425                                  ; We have received a message from Win386. There are three possible
  5426                                  ; messages we could get from Win386:
  5427                                  ;
  5428                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5429                                  ;		  to the Win386 startup info structure.
  5430                                  ; Exit		- for this, we clear the IsWin386 flag.
  5431                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5432                                  ;		  has already been handled. this is indicated by setting
  5433                                  ;		  CX to a non-zero value.
  5434                                  
  5435                                  Win386_Msg:
  5436 00000730 1E                      	push	ds
  5437                                  
  5438                                  	;getdseg <DS>			; ds is DOSDATA
  5439 00000731 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5440                                  
  5441                                  	; For WIN386 2.xx instance data
  5442                                  
  5443 00000736 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5444 00000738 7503                    	jne	short Win386_Msg_exit
  5445 0000073A E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5446                                  Win386_Msg_exit:
  5447 0000073D 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5448 0000073F 7503                    	jne	short Win386_Msg_devcall
  5449 00000741 E92C01                  	jmp	Win386_Leaving
  5450                                  Win386_Msg_devcall:
  5451 00000744 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5452 00000746 7503                    	jne	short Win386_Msg_init
  5453 00000748 E96001                  	jmp	Win386_Query
  5454                                  Win386_Msg_init:
  5455 0000074B 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5456 0000074D 7403                    	je	short Win386_Starting
  5457 0000074F E9E200                  	jmp	win_nexti2f		; no, return
  5458                                  Win386_Starting:
  5459                                  	; 17/12/2022
  5460 00000752 F6C201                  	test	dl,1
  5461                                  	;test	dx,1			; is this really win386?
  5462 00000755 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5463 00000757 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5464                                  Win386_vchk:
  5465                                  	; M018 -- start of block changes
  5466                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5467                                  	; than 030Ah, we skip the VxD presence check
  5468                                  
  5469                                  ;M067 -- Begin changes
  5470                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5471                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5472                                  ;So, we null out the VxD ptr before the check.
  5473                                  
  5474                                  	;mov	word [Win386_Info+6],0
  5475 0000075A C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5476                                  	;mov	word [Win386_Info+8],0
  5477 00000760 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5478                                  
  5479                                  ;M067 -- End changes
  5480                                  
  5481                                  ;ifdef JAPAN
  5482                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5483                                  ;else
  5484 00000766 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5485                                  ;endif
  5486                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5487 0000076A 724E                    	jb	short Win386_vxd
  5488 0000076C E9DD00                  	jmp	noVxD31
  5489                                  
  5490                                  	; 15/12/2022
  5491                                  winold_swap:
  5492 0000076F 1E                      	push	ds
  5493 00000770 06                      	push	es
  5494 00000771 56                      	push	si
  5495 00000772 57                      	push	di
  5496 00000773 51                      	push	cx
  5497                                  
  5498                                  	;getdseg <ds>			;ds = DOSDATA
  5499 00000774 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5500                                  
  5501 00000779 3C01                    	cmp	al,1			;swap Windows out call
  5502 0000077B 751B                    	jne	short swapin		;no, check if Swap in call
  5503 0000077D E88801                  	call	getwinlast
  5504 00000780 1E                      	push	ds
  5505 00000781 07                      	pop	es
  5506 00000782 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5507 00000784 31F6                    	xor	si,si
  5508 00000786 BF[0600]                	mov	di,WinoldPatch1
  5509 00000789 B90800                  	mov	cx,8
  5510 0000078C FC                      	cld
  5511 0000078D 51                      	push	cx
  5512 0000078E F3A4                    	rep	movsb			;save first 8 bytes
  5513 00000790 59                      	pop	cx
  5514 00000791 BF[CD0D]                	mov	di,WinoldPatch2
  5515 00000794 F3A4                    	rep	movsb			;save next 8 bytes
  5516 00000796 EB1B                    	jmp	short winold_done
  5517                                  swapin:
  5518 00000798 3C02                    	cmp	al,2			;swap Windows in call?
  5519 0000079A 7517                    	jne	short winold_done	;no, something else, pass it on
  5520 0000079C E86901                  	call	getwinlast
  5521 0000079F 8EC6                    	mov	es,si
  5522 000007A1 31FF                    	xor	di,di
  5523 000007A3 BE[0600]                	mov	si,WinoldPatch1
  5524 000007A6 B90800                  	mov	cx,8
  5525 000007A9 FC                      	cld
  5526 000007AA 51                      	push	cx
  5527 000007AB F3A4                    	rep	movsb			;restore first 8 bytes
  5528 000007AD 59                      	pop	cx
  5529 000007AE BE[CD0D]                	mov	si,WinoldPatch2
  5530 000007B1 F3A4                    	rep	movsb			;restore next 8 bytes
  5531                                  winold_done:
  5532 000007B3 59                      	pop	cx
  5533 000007B4 5F                      	pop	di
  5534 000007B5 5E                      	pop	si
  5535 000007B6 07                      	pop	es
  5536 000007B7 1F                      	pop	ds
  5537 000007B8 EB7B                    	jmp	short next_i2f		;chain on
  5538                                  	; 15/12/2022
  5539                                  	;jmp	next_i2f	
  5540                                  
  5541                                  Win386_vxd:
  5542 000007BA 50                      	push	ax
  5543 000007BB 53                      	push	bx
  5544 000007BC 51                      	push	cx
  5545 000007BD 52                      	push	dx
  5546 000007BE 56                      	push	si
  5547 000007BF 57                      	push	di			; save regs !!dont change order!!
  5548                                  
  5549 000007C0 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5550 000007C4 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5551 000007C7 741F                    	je	short Vxd31		; N: continue
  5552                                  					; Y: save arena associated with 
  5553                                  					;    umb_head
  5554                                  
  5555 000007C9 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5556                                  					; umb_arena
  5557 000007CE 1E                      	push	ds
  5558 000007CF 06                      	push	es
  5559                                  
  5560                                  	;mov	ax,ds
  5561                                  	;mov	es,ax			; es - > dosdata
  5562                                  	; 05/01/2024
  5563 000007D0 1E                      	push	ds
  5564 000007D1 07                      	pop	es
  5565                                  
  5566 000007D2 8EDB                    	mov	ds,bx
  5567 000007D4 31F6                    	xor	si,si			; ds:si -> umb_head
  5568                                  
  5569 000007D6 FC                      	cld
  5570                                  
  5571 000007D7 BF[1F12]                	mov	di,UmbSave1
  5572 000007DA B90B00                  	mov	cx,11
  5573 000007DD F3A4                    	rep	movsb
  5574                                  
  5575 000007DF BF[D50D]                	mov	di,UmbSave2
  5576                                  	;mov	cx,5
  5577                                  	; 18/12/2022
  5578 000007E2 B105                    	mov	cl,5
  5579 000007E4 F3A4                    	rep	movsb	
  5580                                  
  5581 000007E6 07                      	pop	es
  5582 000007E7 1F                      	pop	ds			; M062 - End
  5583                                  
  5584                                  Vxd31:
  5585                                  	;test	byte [DOS_FLAG],2
  5586 000007E8 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5587 000007ED 7408                    	jz	short Dont_Supress		; M066
  5588 000007EF 5F                      	pop	di				; M066
  5589 000007F0 5E                      	pop	si				; M066
  5590 000007F1 5A                      	pop	dx				; M066
  5591 000007F2 59                      	pop	cx				; M066
  5592 000007F3 5B                      	pop	bx				; M066
  5593 000007F4 58                      	pop	ax				; M066
  5594 000007F5 EB55                    	jmp	short noVxD31			; M066
  5595                                  
  5596                                  	; We check here if the VxD is available in the root of the boot drive. 
  5597                                  	; We do an extended open to suppress any error messages
  5598                                  	
  5599                                  Dont_Supress:
  5600 000007F7 A0[6900]                	mov	al,[BOOTDRIVE]
  5601 000007FA 0440                    	add	al,'A' - 1		; get drive letter
  5602 000007FC A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5603                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5604                                  	;mov	al,0			; no extended attributes
  5605                                  	; 18/12/2022
  5606 000007FF B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5607 00000802 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5608                                  					; no inherit, suppress crit err
  5609 00000805 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5610 00000808 BA0100                  	mov	dx,1			; fail if file does not exist
  5611 0000080B BE[3110]                	mov	si,VxDpath	
  5612                                  					; path of VxD file
  5613 0000080E BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5614                                  
  5615 00000811 CD21                    	int	21h			; do extended open
  5616                                  
  5617 00000813 5F                      	pop	di
  5618 00000814 5E                      	pop	si
  5619 00000815 5A                      	pop	dx
  5620 00000816 59                      	pop	cx
  5621                                  
  5622 00000817 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5623                                  
  5624                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5625                                  	; to indicate error to Windows after displaying message to user that 
  5626                                  	; VxD needs to be present to run Windows in enhanced mode.
  5627                                  
  5628 00000819 52                      	push	dx
  5629 0000081A 1E                      	push	ds
  5630 0000081B 56                      	push	si
  5631 0000081C BE[B109]                	mov	si,NoVxDErrMsg
  5632 0000081F 0E                      	push	cs
  5633 00000820 1F                      	pop	ds
  5634 00000821 B96300                  	mov	cx,VxDMesLen ; 99	;
  5635 00000824 B402                    	mov	ah,2			; write char to console
  5636 00000826 FC                      	cld
  5637                                  vxdlp:
  5638 00000827 AC                      	lodsb
  5639 00000828 86D0                    	xchg	dl,al			; get char in dl
  5640 0000082A CD21                    	int	21h
  5641 0000082C E2F9                    	loop	vxdlp
  5642                                  
  5643 0000082E 5E                      	pop	si
  5644 0000082F 1F                      	pop	ds
  5645 00000830 5A                      	pop	dx
  5646 00000831 5B                      	pop	bx
  5647 00000832 58                      	pop	ax			;all registers restored
  5648 00000833 41                      	inc	cx			;cx != 0 to indicate error
  5649                                  	; 15/12/22022
  5650                                  	;jmp	win_nexti2f		;chain on
  5651                                  	;jmp	short win_nexti2f
  5652                                  
  5653                                  	; 15/12/2022
  5654                                  win_nexti2f:
  5655 00000834 1F                      	pop	ds
  5656                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5657                                  	; 15/12/2022
  5658                                  next_i2f:
  5659                                  	;;;jmp	bios_i2f
  5660                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5661                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5662                                  	; 04/11/2022
  5663 00000835 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5664                                  
  5665                                  VxDthere:
  5666 0000083A 89C3                    	mov	bx,ax
  5667 0000083C B43E                    	mov	ah,CLOSE ; 3Eh
  5668 0000083E CD21                    	int	21h			;close the file
  5669                                  
  5670                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5671                                  
  5672                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5673                                  	;mov	bx,Win386_Info
  5674                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5675                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5676                                  	; 15/12/2022
  5677 00000840 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5678 00000846 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5679                                  
  5680 0000084A 5B                      	pop	bx
  5681 0000084B 58                      	pop	ax
  5682                                  noVxD31:
  5683                                  	; M018; End of block changes
  5684                                  
  5685 0000084C 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5686 00000851 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5687                                  
  5688                                  	; M002;
  5689                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5690                                  
  5691 00000856 52                      	push	dx			; M002
  5692 00000857 89DA                    	mov	dx,bx			; M002
  5693                                  					; point ES:BX to Win386_Info ; M002
  5694 00000859 BB[E20F]                	mov	bx,Win386_Info 
  5695 0000085C 895702                  	mov	[bx+2],dx		; M002
  5696 0000085F 8C4704                  	mov	[bx+4],es		; M002
  5697 00000862 5A                      	pop	dx			; M002
  5698 00000863 1E                      	push	ds			; M002
  5699 00000864 07                      	pop	es			; M002
  5700                                  	;jmp	win_nexti2f		; M002
  5701                                  	; 15/12/2022
  5702 00000865 EBCD                    	jmp	short win_nexti2f
  5703                                  
  5704                                  	; 15/12/2022
  5705                                  	; Code to return Win386 2.xx instance table
  5706                                  OldWin386Init:
  5707 00000867 58                      	pop	ax			; discard ds pushed on stack
  5708 00000868 BE[E711]                	mov	si,OldInstanceJunk 
  5709                                  					; ds:si = instance table
  5710 0000086B B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5711                                  	;jmp	next_i2f
  5712                                  	; 15/12/2022
  5713 0000086E EBC5                    	jmp	short next_i2f
  5714                                  
  5715                                  Win386_Leaving:
  5716                                  	; 15/12/2022
  5717 00000870 F6C201                  	test 	dl,1
  5718                                  	;test	dx,1			; is this really win386?
  5719                                  	;jz	short Win386_Leaving_c
  5720                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5721                                  	; 15/12/2022
  5722 00000873 75BF                    	jnz	short win_nexti2f	
  5723                                  
  5724                                  Win386_Leaving_c:
  5725                                  					; M062 - Start
  5726 00000875 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5727                                  					;    up.
  5728 0000087A 7523                    	jne	short noumb		; N: not saved 
  5729 0000087C C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5730                                  					;    previously saved umb_head
  5731                                  	; 05/01/2024
  5732                                  	;push	ax ; (not necessary)
  5733 00000881 06                      	push	es
  5734 00000882 51                      	push	cx
  5735 00000883 56                      	push	si
  5736 00000884 57                      	push	di
  5737                                  
  5738                                  	;mov	ax,[UMB_HEAD]
  5739                                  	;mov	es,ax
  5740                                  	; 05/01/2024
  5741 00000885 8E06[8C00]              	mov	es,[UMB_HEAD]
  5742 00000889 31FF                    	xor	di,di			; es:di -> umb_head
  5743                                  
  5744 0000088B FC                      	cld
  5745                                  
  5746 0000088C BE[1F12]                	mov	si,UmbSave1
  5747 0000088F B90B00                  	mov	cx,11
  5748 00000892 F3A4                    	rep	movsb
  5749 00000894 BE[D50D]                	mov	si,UmbSave2
  5750                                  	;mov	cx,5
  5751                                  	; 18/12/2022
  5752 00000897 B105                    	mov	cl,5
  5753 00000899 F3A4                    	rep	movsb
  5754                                  
  5755 0000089B 5F                      	pop	di
  5756 0000089C 5E                      	pop	si
  5757 0000089D 59                      	pop	cx
  5758 0000089E 07                      	pop	es
  5759                                  	; 05/01/2024
  5760                                  	;pop	ax
  5761                                  noumb:					; M062 - End
  5762 0000089F 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5763 000008A4 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5764 000008A9 EB89                    	jmp	short win_nexti2f
  5765                                  
  5766                                  ;	; 15/12/2022
  5767                                  ;	; Code to return Win386 2.xx instance table
  5768                                  ;OldWin386Init:
  5769                                  ;	pop	ax			; discard ds pushed on stack
  5770                                  ;	mov	si,OldInstanceJunk 
  5771                                  ;					; ds:si = instance table
  5772                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5773                                  ;	;jmp	next_i2f
  5774                                  ;	; 15/12/2022
  5775                                  ;	jmp	short _next_i2f
  5776                                  
  5777                                  Win386_Query:
  5778 000008AB 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5779 000008AE 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5780 000008B0 09C9                    	or	cx,cx			; is it an instance query?
  5781 000008B2 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5782 000008B4 41                      	inc	cx			; indicate that data is instanced
  5783                                  ;
  5784                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5785                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5786                                  ; M001;  
  5787                                  ; M001; OFFSETS STRUC
  5788                                  ; M001; 	Major_version	db	?
  5789                                  ; M001; 	Minor_version	db	?
  5790                                  ; M001; 	SaveDS		dw	?
  5791                                  ; M001; 	SaveBX		dw	?
  5792                                  ; M001; 	Indos		dw	?
  5793                                  ; M001; 	User_id		dw	?
  5794                                  ; M001; 	CritPatch	dw	?
  5795                                  ; M001; OFFSETS	ENDS
  5796                                  ; M001; 
  5797                                  ; M001; User_Id is the only variable really important for proper functioning  
  5798                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5799                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5800                                  ; M001; pass this table because Win386 depends on this table to get the 
  5801                                  ; M001; User_Id offset.
  5802                                  ; M001; 
  5803 000008B5 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5804 000008B8 1E                      	push	ds			; M001
  5805 000008B9 07                      	pop	es			; es:bx points at offset table ; M001
  5806 000008BA EB40                    	jmp	short PopIret		; M001
  5807                                  
  5808                                  ; 15/12/2022
  5809                                  ;	; Code to return Win386 2.xx instance table
  5810                                  ;OldWin386Init:
  5811                                  ;	pop	ax			; discard ds pushed on stack
  5812                                  ;	mov	si,OldInstanceJunk 
  5813                                  ;					; ds:si = instance table
  5814                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5815                                  ;	;jmp	next_i2f
  5816                                  ;	; 15/12/2022
  5817                                  ;	jmp	short _next_i2f
  5818                                  
  5819                                  dosmgr_func:
  5820 000008BC 49                      	dec	cx
  5821 000008BD 7435                    	jz	short win386_patch	; call to patch DOS
  5822 000008BF 49                      	dec	cx
  5823 000008C0 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5824 000008C2 49                      	dec	cx
  5825 000008C3 7439                    	jz	short win386_size	; get size of DOS data structures
  5826 000008C5 49                      	dec	cx
  5827 000008C6 7428                    	jz	short win386_inst	; instance more data
  5828                                  	;dec	cx
  5829                                  	;jnz	short PopIret		; no functions above this
  5830                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5831 000008C8 E232                    	loop	PopIret
  5832                                  
  5833                                  	; Get DOS device driver size -- es:di points at device driver header
  5834                                  	; In DOS 4.x, the para before the device header contains an arena 
  5835                                  	; header for the driver.
  5836                                  
  5837 000008CA 8CC0                    	mov	ax,es			; ax = device header segment
  5838                                  
  5839                                  	; We check to see if we have a memory arena for this device driver. 
  5840                                  	; The way to do this would be to look at the previous para to see if
  5841                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5842                                  	; in the arena is the same as the device header segment. These two 
  5843                                  	; checks together should take care of all cases
  5844                                  
  5845 000008CC 48                      	dec	ax			; get arena header
  5846 000008CD 06                      	push	es
  5847 000008CE 8EC0                    	mov	es,ax			; arena header for device driver
  5848                                  
  5849 000008D0 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5850 000008D4 7517                    	jnz	short cantsize		; no, cant size this driver
  5851 000008D6 40                      	inc	ax			; get back device header segment
  5852 000008D7 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5853 000008DB 7510                    	jnz	short cantsize		; no, not a proper arena
  5854                                  
  5855 000008DD 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5856 000008E1 07                      	pop	es
  5857                                  
  5858                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5859                                  	; Speed is not critical and so we choose the shortest method 
  5860                                  	; -- use "mul"
  5861                                  
  5862 000008E2 BB1000                  	mov	bx,16
  5863 000008E5 F7E3                    	mul	bx
  5864 000008E7 89C1                    	mov	cx,ax
  5865 000008E9 89D3                    	mov	bx,dx
  5866 000008EB EB09                    	jmp	short win386_done	; return with device driver size
  5867                                  cantsize:
  5868 000008ED 07                      	pop	es
  5869 000008EE 31C0                    	xor	ax,ax
  5870                                  win386_inst:	; 05/01/2024
  5871 000008F0 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5872 000008F2 EB08                    	jmp	short PopIret		; return
  5873                                  
  5874                                  win386_patch:
  5875                                  	; dx contains bits marking the patches to be applied. We return 
  5876                                  	; the field with all bits set to indicate that all patches have been
  5877                                  	; done
  5878                                  
  5879 000008F4 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5880                                   	;jmp	short win386_done	; done, return
  5881                                  	; 15/12/2022
  5882                                  	; 15/12/2022
  5883                                  win386_done:
  5884 000008F6 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5885 000008F9 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5886                                  PopIret:
  5887 000008FC 1F                      	pop	ds
  5888 000008FD CF                      	iret	
  5889                                  
  5890                                  win386_size:
  5891                                  	; Return the size of DOS data structures -- currently only CDS size
  5892                                  
  5893                                  	; 17/12/2022
  5894 000008FE F6C201                  	test	dl,1
  5895                                  	;test	dx,1			; check for CDS size bit
  5896 00000901 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5897                                  
  5898 00000903 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5899 00000906 EBEE                    	jmp	short win386_done	; return with the size
  5900                                  
  5901                                  ; 05/01/2024
  5902                                  %if 0
  5903                                  win386_inst:
  5904                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5905                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5906                                  	; this by returning a status of not previously instanced. The basic
  5907                                  	; structure of these things have not changed and so the current
  5908                                  	; DOSMGR code should be able to work it out
  5909                                  
  5910                                  	xor	dx,dx			; make sure dx has a not done value
  5911                                  	jmp	short PopIret		; skip done indication
  5912                                  %endif
  5913                                  
  5914                                  	; 15/12/2022
  5915                                  ;win386_done:
  5916                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5917                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5918                                  ;PopIret:
  5919                                  ;	pop	ds
  5920                                  ;	iret				; return back up the chain
  5921                                  
  5922                                  	; 15/12/2022
  5923                                  ;win_nexti2f:
  5924                                  	;pop	ds
  5925                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5926                                  
  5927                                  ;End WIN386 support
  5928                                  
  5929                                  ; 15/05/2019
  5930                                  
  5931                                  ;M044; Start of changes
  5932                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5933                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5934                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5935                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5936                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5937                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5938                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5939                                  ; last para of the Windows memory block and then restore this para on the
  5940                                  ; Windows swapin callout. 
  5941                                  
  5942                                  getwinlast:
  5943                                  	; 07/12/2022
  5944 00000908 8B36[3003]              	mov	si,[CurrentPDB]
  5945 0000090C 4E                      	dec	si
  5946 0000090D 8EC6                    	mov	es,si
  5947 0000090F 2603360300              	add	si,[es:3]
  5948 00000914 C3                      	retn
  5949                                  
  5950                                  ; 15/12/2022
  5951                                  %if 0
  5952                                  winold_swap:
  5953                                  	push	ds
  5954                                  	push	es
  5955                                  	push	si
  5956                                  	push	di
  5957                                  	push	cx
  5958                                  
  5959                                  	;getdseg <ds>			;ds = DOSDATA
  5960                                  	mov	ds,[cs:DosDSeg]
  5961                                  
  5962                                  	cmp	al,1			;swap Windows out call
  5963                                  	jne	short swapin		;no, check if Swap in call
  5964                                  	call	getwinlast
  5965                                  	push	ds
  5966                                  	pop	es
  5967                                  	mov	ds,si			;ds = memory arena of Windows
  5968                                  	xor	si,si
  5969                                  	mov	di,WinoldPatch1
  5970                                  	mov	cx,8
  5971                                  	cld
  5972                                  	push	cx
  5973                                  	rep	movsb			;save first 8 bytes
  5974                                  	pop	cx
  5975                                  	mov	di,WinoldPatch2
  5976                                  	rep	movsb			;save next 8 bytes
  5977                                  	jmp	short winold_done
  5978                                  swapin:
  5979                                  	cmp	al,2			;swap Windows in call?
  5980                                  	jne	short winold_done	;no, something else, pass it on
  5981                                  	call	getwinlast
  5982                                  	mov	es,si
  5983                                  	xor	di,di
  5984                                  	mov	si,WinoldPatch1
  5985                                  	mov	cx,8
  5986                                  	cld
  5987                                  	push	cx
  5988                                  	rep	movsb			;restore first 8 bytes
  5989                                  	pop	cx
  5990                                  	mov	si,WinoldPatch2
  5991                                  	rep	movsb			;restore next 8 bytes
  5992                                  winold_done:
  5993                                  	pop	cx
  5994                                  	pop	di
  5995                                  	pop	si
  5996                                  	pop	es
  5997                                  	pop	ds
  5998                                  	jmp	next_i2f		;chain on
  5999                                  
  6000                                  %endif
  6001                                  
  6002                                  ;M044; End of changes
  6003                                  
  6004                                  ; 15/05/2019
  6005                                  
  6006                                  DispatchDOS:
  6007 00000915 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6008 0000091A 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6009 0000091F 50                      	PUSH	AX			; push index
  6010 00000920 55                      	PUSH	BP
  6011 00000921 89E5                    	MOV	BP,SP
  6012                                  		; stack looks like:
  6013                                  		;   0	BP
  6014                                  		;   2	DISPATCH
  6015                                  		;   4	TABLE
  6016                                  		;   6	RETURN
  6017                                  		;   8	LONG-RETURN
  6018                                  		;   C	FLAGS
  6019                                  		;   E	AX
  6020                                  	
  6021 00000923 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6022 00000926 5D                      	POP	BP
  6023 00000927 E8DB08                  	call	TableDispatch
  6024 0000092A E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6025                                  
  6026                                  INT2F_etcetera:
  6027                                  	;entry	DosGetGroup
  6028                                  DosGetGroup:
  6029                                  	; MSDOS 3.3
  6030                                  	;push	cs
  6031                                  	;pop	ds
  6032                                  	;retn
  6033                                  
  6034                                  	; MSDOS 6.0
  6035                                  ;SR; Cannot use CS now
  6036                                  ;
  6037                                  ;	PUSH	CS
  6038                                  ;	POP	DS
  6039                                  
  6040                                  	; 04/11/2022
  6041                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6042                                  
  6043                                  	;getdseg <ds>
  6044 0000092D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6045 00000932 C3                      	retn
  6046                                  
  6047                                  	;entry	DOSInstall
  6048                                  DOSInstall:
  6049 00000933 B0FF                    	MOV	AL,0FFh
  6050 00000935 C3                      	retn
  6051                                  
  6052                                  ;ENDIF ; (*)
  6053                                  
  6054                                  
  6055                                  ; 15/05/2019 - Retro DOS v4.0
  6056                                  
  6057                                  ;------------------------------------------------------------------------
  6058                                  ;
  6059                                  ; Procedure Name : RW32_CONVERT
  6060                                  ;
  6061                                  ;Input: same as ABSDRD and ABSDWRT
  6062                                  ;	 ES:BP -> DPB
  6063                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6064                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6065                                  ;	 carry clear, parms ok
  6066                                  ;
  6067                                  ;------------------------------------------------------------------------
  6068                                  
  6069                                  	; 06/01/2024
  6070                                  RW32_CONVERT:
  6071 00000936 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6072 00000939 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6073 0000093B 49                      	dec	cx ; *
  6074 0000093C 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6075 0000093D 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6076 0000093E 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6077 00000942 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6078 00000946 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6079 00000949 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6080                                  	;INC	DL			;>32mb			;AN000;
  6081                                  	; 17/12/2022
  6082 0000094B 42                      	inc	dx
  6083 0000094C 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6084 0000094E F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6085 00000950 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6086                                  letold:
  6087 00000952 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6088 00000953 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6089 00000954 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6090                                  
  6091 00000956 1E                      	push	ds
  6092                                  	;getdseg <ds>
  6093 00000957 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6094 0000095C C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6095 00000962 1F                      	pop	ds
  6096                                  
  6097 00000963 F9                      	STC				;>32mb			;AN000;
  6098 00000964 C3                      	retn				;>32mb			;AN000;
  6099                                  
  6100                                  new32format:
  6101                                  	;mov	dx,[bx+2]
  6102 00000965 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6103                                  
  6104 00000968 1E                      	push	ds			; set up ds to DOSDATA
  6105                                  	;getdseg <ds>
  6106 00000969 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6107 0000096E 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6108 00000972 1F                      	pop	ds
  6109                                  
  6110 00000973 8B17                    	mov	dx,[bx]
  6111                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6112                                  	;mov	cx,[bx+4]
  6113 00000975 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6114                                  	;lds	bx,[bx+6]
  6115 00000978 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6116                                  old_style:				;>32mb			;AN000;
  6117                                  	; 06/01/2024
  6118                                  	; cf=0
  6119                                  	;CLC				;>32mb			;AN000;
  6120 0000097B C3                      	retn				;>32mb			;AN000;
  6121                                  
  6122                                  ;------------------------------------------------------------------------
  6123                                  ;
  6124                                  ; Procedure Name : Fastxxx_Purge
  6125                                  ;
  6126                                  ; Input: None
  6127                                  ; Functions: Purge Fastopen/ Cache Buffers
  6128                                  ; Output: None
  6129                                  ;
  6130                                  ;------------------------------------------------------------------------
  6131                                  
  6132                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6133                                  
  6134                                  Fastxxx_Purge:
  6135 0000097C 50                      	PUSH	AX			; save regs.	;AN000;
  6136 0000097D 56                      	PUSH	SI						;AN000;
  6137 0000097E 52                      	PUSH	DX						;AN000;
  6138                                  topen:
  6139 0000097F 1E                      	push	ds			; set up ds to DOSDATA
  6140                                  	;getdseg <ds>
  6141 00000980 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6142                                  
  6143 00000985 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6144                                  					; fastopen installed ?	;AN000;
  6145 0000098A 1F                      	pop	ds
  6146 0000098B 740B                    	JZ	short nofast		; no			;AN000;
  6147 0000098D B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6148                                  dofast:
  6149 0000098F B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6150                                  	;;mov	dl,[es:bp+0]
  6151                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6152                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6153                                  	; 15/12/2022
  6154 00000991 268A5600                	mov	dl,[es:bp]
  6155                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6156 00000995 E8F01C                  	call	Fast_Dispatch
  6157                                  nofast:
  6158 00000998 5A                      	POP	DX						;AN000;
  6159 00000999 5E                      	POP	SI			; restore regs		;AN000;
  6160 0000099A 58                      	POP	AX			 			;AN000;
  6161 0000099B C3                      	retn				; exit
  6162                                  
  6163                                  ;============================================================================
  6164                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6165                                  ;============================================================================
  6166                                  ; 29/04/2019 - Retro DOS v4.0
  6167                                  
  6168                                  ;include dossym.inc
  6169                                  ;include dosmac.inc
  6170                                  ;include doscntry.inc
  6171                                  
  6172                                  ; DOSCODE Segment
  6173                                  
  6174                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6175                                  ; ---------------------------------------------------------------------------
  6176                                  ;include divmes.inc
  6177                                  
  6178                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6179                                  ; -------------------------------------
  6180                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6181                                  
  6182                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6183                                  	;PUBLIC	DIVMES
  6184                                  
  6185 0000099C 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6185 000009A5 6F766572666C6F770D-
  6185 000009AE 0A                 
  6186                                  
  6187                                  	;PUBLIC	DivMesLen
  6188                                  DivMesLen:
  6189 000009AF 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6190                                  
  6191                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6192                                  ; -------------------------------------
  6193                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6194                                  
  6195                                  ; (MSDOS 6.0)
  6196                                  ; VxD not found error message
  6197                                  
  6198                                  NoVxDErrMsg:
  6199 000009B1 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6199 000009BA 686176652074686520-
  6199 000009C3 66696C652057494E41-
  6199 000009CC 32302E33383620696E-
  6199 000009D5 2074686520726F6F74-
  6199 000009DE 206F6620796F757220-
  6199 000009E7 626F6F742064726976-
  6199 000009F0 65                 
  6200 000009F1 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6200 000009FA 57696E646F77732069-
  6200 00000A03 6E20456E68616E6365-
  6200 00000A0C 64204D6F64650D0A   
  6201                                  
  6202                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6203                                  
  6204                                  ; 13/05/2019 - Retro DOS v4.0
  6205                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6206                                  
  6207                                  ;include yesno.asm  (MNSDOS 6.0)
  6208                                  ; -------------------------------------
  6209                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6210                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6211                                  
  6212                                  ; This is for country Yes and No
  6213                                  
  6214 00000A14 59                      NLS_YES:	db 'Y'
  6215 00000A15 4E                      NLS_NO:		db 'N'
  6216 00000A16 79                      NLS_yes2:	db 'y'
  6217 00000A17 6E                      NLS_no2:	db 'n'
  6218                                  
  6219                                  ; ---------------------------------------------------------------------------
  6220                                  
  6221                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6222                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6223                                  
  6224                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6225                                  
  6226                                  ; The following two tables implement the current buffered input editing
  6227                                  ; routines. The tables are pairwise associated in reverse order for ease
  6228                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6229                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6230                                  
  6231                                  	;PUBLIC	CANCHAR
  6232                                  CANCHAR:
  6233 00000A18 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6234                                  	
  6235                                  	;PUBLIC	ESCCHAR
  6236                                  ESCCHAR:
  6237 00000A19 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6238                                  	
  6239                                  	;IF	NOT Rainbow
  6240                                  
  6241                                  ESCTAB:	; LABEL BYTE
  6242                                  
  6243                                  	;IF	IBM
  6244 00000A1A 40                      	DB	64		; Ctrl-Z - F6
  6245 00000A1B 4D                      	DB	77		; Copy one char - -->
  6246 00000A1C 3B                      	DB	59		; Copy one char - F1
  6247 00000A1D 53                      	DB	83		; Skip one char - DEL
  6248 00000A1E 3C                      	DB	60		; Copy to char - F2
  6249 00000A1F 3E                      	DB	62		; Skip to char - F4
  6250 00000A20 3D                      	DB	61		; Copy line - F3
  6251 00000A21 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6252 00000A22 3F                      	DB	63		; Reedit line (new template) - F5
  6253 00000A23 4B                      	DB	75		; Backspace - <--
  6254 00000A24 52                      	DB	82		; Enter insert mode - INS (toggle)
  6255 00000A25 52                      	DB	82		; Exit insert mode - INS (toggle)
  6256 00000A26 41                      	DB	65		; Escape character - F7
  6257 00000A27 41                      	DB	65		; End of table
  6258                                  	;ENDIF
  6259                                  
  6260                                  ESCEND: ; LABEL BYTE
  6261                                  
  6262                                  ESCTABLEN EQU ESCEND-ESCTAB
  6263                                  
  6264                                  ESCFUNC: ; LABEL WORD
  6265                                  	
  6266 00000A28 [FA13]                  	short_addr  GETCH	; Ignore the escape sequence
  6267 00000A2A [7714]                  	short_addr  TWOESC
  6268 00000A2C [6C15]                  	short_addr  EXITINS
  6269 00000A2E [6C15]                  	short_addr  ENTERINS
  6270 00000A30 [7214]                  	short_addr  BACKSP
  6271 00000A32 [5815]                  	short_addr  REEDIT
  6272 00000A34 [5F14]                  	short_addr  KILNEW
  6273 00000A36 [EE14]                  	short_addr  COPYLIN
  6274 00000A38 [2015]                  	short_addr  SKIPSTR
  6275 00000A3A [F414]                  	short_addr  COPYSTR
  6276 00000A3C [1715]                  	short_addr  SKIPONE
  6277 00000A3E [F914]                  	short_addr  COPYONE
  6278 00000A40 [F914]                  	short_addr  COPYONE
  6279 00000A42 [7315]                  	short_addr  CTRLZ
  6280                                  
  6281                                  	;ENDIF
  6282                                  
  6283                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6284                                  ; ---------------------------------------------------------------------------
  6285                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6286                                  
  6287                                  ; OEMFunction key is expected to process a single function
  6288                                  ;   key input from a device and dispatch to the proper
  6289                                  ;   routines leaving all registers UNTOUCHED.
  6290                                  ;
  6291                                  ; Inputs:   CS, SS are DOSGROUP
  6292                                  ; Outputs:  None. This function is expected to JMP to onw of
  6293                                  ;           the following labels:
  6294                                  ;
  6295                                  ;           GetCh       - ignore the sequence
  6296                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6297                                  ;           ExitIns     - toggle insert mode
  6298                                  ;           EnterIns    - toggle insert mode
  6299                                  ;           BackSp      - move backwards one space
  6300                                  ;           ReEdit      - reedit the line with a new template
  6301                                  ;           KilNew      - discard the current line and start from scratch
  6302                                  ;           CopyLin     - copy the rest of the template into the line
  6303                                  ;           SkipStr     - read the next character and skip to it in the template
  6304                                  ;           CopyStr     - read next char and copy from template to line until char
  6305                                  ;           SkipOne     - advance position in template one character
  6306                                  ;           CopyOne     - copy next character in template into line
  6307                                  ;           CtrlZ       - place a ^Z into the template
  6308                                  ; Registers that are allowed to be modified by this function are:
  6309                                  ;           AX, CX, BP
  6310                                  
  6311                                  ; 13/05/2019 - Retro DOS v4.0
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6314                                  
  6315                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6316                                  ; -------------------------------------
  6317                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6318                                  
  6319                                  OEMFunctionKey:
  6320 00000A44 E81509                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6321 00000A47 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6322 00000A49 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6323 00000A4A BF[1A0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6324 00000A4D 06                      	push	es
  6325 00000A4E 0E                      	push	cs
  6326 00000A4F 07                      	pop	es
  6327 00000A50 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6328 00000A52 07                      	pop	es
  6329 00000A53 5F                      	POP     DI                      ; restore DI
  6330 00000A54 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6331 00000A56 89CD                    	MOV     BP,CX                   ; move to indexable register
  6332                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6333 00000A58 2EFFA6[280A]            	JMP	word [CS:BP+ESCFUNC]
  6334                                  
  6335                                  ;DOSCODE ENDS
  6336                                  	
  6337                                  ;============================================================================
  6338                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6339                                  ;============================================================================
  6340                                  ; Retro DOS v3.0 - 18/07/2018
  6341                                  
  6342                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6343                                  ;----------------------------------------------------------------------------
  6344                                  ; Retro DOS v2.0 - 13/03/2018
  6345                                  
  6346                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6347                                  
  6348                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6349                                  
  6350                                  ;**	$GET_DATE - Get Current Date
  6351                                  ;----------------------------------------
  6352                                  ;	ENTRY	none
  6353                                  ;	EXIT	(cx:dx) = current date
  6354                                  ;	USES	all
  6355                                  
  6356                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6357                                  
  6358                                  _$GET_DATE:	;System call 42
  6359                                  
  6360 00000A5D 16                      	PUSH	SS
  6361 00000A5E 1F                      	POP	DS
  6362 00000A5F E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6363 00000A62 A1[5203]                	MOV	AX,[YEAR]
  6364                                  
  6365                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6366                                  
  6367 00000A65 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6368 00000A69 E819FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6369                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6370 00000A6C 895C06                  	MOV	[SI+user_env.user_DX],BX
  6371 00000A6F 05BC07                  	ADD	AX,1980		;Put bias back
  6372                                  	;MOV	[SI+4],AX	;CX=year
  6373 00000A72 894404                  	MOV	[SI+user_env.user_CX],AX
  6374 00000A75 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6375                                  RET20:	; 05/11/2022
  6376                                  RET24:	; 18/12/2022
  6377 00000A79 C3                      	RETN
  6378                                  
  6379                                  ;**	$SET_DATE - Set Current Date
  6380                                  ;----------------------------------------
  6381                                  ;	ENTRY	(cx:dx) = current date
  6382                                  ;	EXIT	(al) = -1 iff bad date
  6383                                  ;		(al) = 0 if ok
  6384                                  ;	USES	all
  6385                                  
  6386                                  _$SET_DATE:	;System call 43
  6387                                  
  6388 00000A7A B0FF                    	MOV	AL,-1		;Be ready to flag error
  6389 00000A7C 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6390                                  	;JC	SHORT RET24	;Error if not big enough
  6391                                  	; 05/11/2022
  6392 00000A80 72F7                    	jc	short RET20
  6393 00000A82 83F977                  	CMP	CX,119		;Year must be less than 2100
  6394 00000A85 77F2                    	JA	SHORT RET24
  6395 00000A87 08F6                    	OR	DH,DH
  6396                                  	;JZ	SHORT RET24
  6397                                   	; 05/11/2022
  6398 00000A89 74EE                    	jz	short RET20
  6399 00000A8B 08D2                    	OR	DL,DL
  6400                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6401                                  	; 05/11/2022
  6402 00000A8D 74EA                    	jz	short RET20
  6403 00000A8F 80FE0C                  	CMP	DH,12		;Check against max. month
  6404 00000A92 77E5                    	JA	SHORT RET24
  6405 00000A94 16                      	PUSH	SS
  6406 00000A95 1F                      	POP	DS
  6407                                  	;CALL	DODATE
  6408                                  	; 18/12/2022
  6409 00000A96 E90301                  	jmp	DODATE
  6410                                  ;RET24:  
  6411                                  	;RETN
  6412                                  
  6413                                  ;**	$GET_TIME - Get Current Time
  6414                                  ;----------------------------------------
  6415                                  ;	ENTRY	none
  6416                                  ;	EXIT	(cx:dx) = current time
  6417                                  ;	USES	all
  6418                                  
  6419                                  _$GET_TIME:			;System call 44
  6420                                  
  6421 00000A99 16                      	PUSH	SS
  6422 00000A9A 1F                      	POP	DS
  6423 00000A9B E87100                  	CALL	READTIME
  6424 00000A9E E8E4F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6425                                  	;MOV	[SI+6],DX
  6426 00000AA1 895406                  	MOV	[SI+user_env.user_DX],DX
  6427                                  	;MOV	[SI+4],CX
  6428 00000AA4 894C04                  	MOV	[SI+user_env.user_CX],CX
  6429                                  set_time_ok:	; 06/01/2024
  6430 00000AA7 30C0                    	XOR	AL,AL
  6431                                  RET26:  
  6432 00000AA9 C3                      	RETN
  6433                                  
  6434                                  ;**	$SET_TIME - Set Current Time
  6435                                  ;----------------------------------------
  6436                                  ;	ENTRY	(cx:dx) = time
  6437                                  ;	EXIT	(al) = 0 if 0k
  6438                                  ;		(al) = -1 if invalid
  6439                                  ;	USES	ALL
  6440                                  
  6441                                  _$SET_TIME:			;System call 45
  6442                                  
  6443 00000AAA B0FF                    	MOV	AL,-1		;Flag in case of error
  6444 00000AAC 80FD18                  	CMP	CH,24		;Check hours
  6445 00000AAF 73F8                    	JAE	SHORT RET26
  6446 00000AB1 80F93C                  	CMP	CL,60		;Check minutes
  6447 00000AB4 73F3                    	JAE	SHORT RET26
  6448 00000AB6 80FE3C                  	CMP	DH,60		;Check seconds
  6449 00000AB9 73EE                    	JAE	SHORT RET26
  6450 00000ABB 80FA64                  	CMP	DL,100		;Check 1/100's
  6451 00000ABE 73E9                    	JAE	SHORT RET26
  6452 00000AC0 51                      	PUSH	CX
  6453 00000AC1 52                      	PUSH	DX
  6454 00000AC2 16                      	PUSH	SS
  6455 00000AC3 1F                      	POP	DS
  6456                                  
  6457                                  ; 07/02/2024
  6458                                  %if 0
  6459                                  	MOV	BX,TIMEBUF
  6460                                  	MOV	CX,6
  6461                                  	; 06/02/2024 ; *
  6462                                  	;;XOR	DX,DX
  6463                                  	;;MOV	AX,DX
  6464                                  	;xor	ax,ax
  6465                                  	;cwd	; 06/01/2024
  6466                                  	PUSH	BX
  6467                                  	;CALL	SETREAD
  6468                                  	; 06/02/2024 ; *
  6469                                  	call	SETREAD_X
  6470                                  %else
  6471 00000AC4 E8183B                  	call	SETREAD_XT
  6472                                  %endif
  6473                                  
  6474 00000AC7 1E                      	PUSH	DS
  6475 00000AC8 C536[2E00]              	LDS	SI,[BCLOCK]
  6476 00000ACC E8993A                  	CALL	DEVIOCALL2	;Get correct day count
  6477 00000ACF 1F                      	POP	DS
  6478 00000AD0 5B                      	POP	BX
  6479 00000AD1 E8483B                  	CALL	SETWRITE
  6480 00000AD4 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6481 00000AD8 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6482 00000ADC C536[2E00]              	LDS	SI,[BCLOCK]
  6483 00000AE0 E8853A                  	CALL	DEVIOCALL2	;Set the time
  6484                                  	; 06/01/2024
  6485                                  	;XOR	AL,AL
  6486                                  	;RETN
  6487 00000AE3 EBC2                    	jmp	short set_time_ok
  6488                                  
  6489                                  ; 11/07/2018 - Retro DOS v3.0
  6490                                  ; Retro DOS v2.0 - 14/03/2018
  6491                                  
  6492                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6493                                  
  6494                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6495                                  ;----------------------------------------------------------
  6496                                  ; Date16 returns the current date in AX, current time in DX
  6497                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6498                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6499                                  
  6500                                  DATE16:
  6501                                  	
  6502                                  ;M048	Context DS
  6503                                  ;
  6504                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6505                                  ; is DOSDATA
  6506                                  
  6507                                  	;push	ss
  6508                                  	;pop	ds
  6509                                  
  6510                                  	;getdseg <ds>		; M048
  6511                                  
  6512                                  	; 13/05/2019 - Retro DOS v4.0
  6513 00000AE5 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6514                                  
  6515 00000AEA 51                      	PUSH	CX
  6516 00000AEB 06                      	PUSH	ES
  6517 00000AEC E82000                  	CALL	READTIME
  6518 00000AEF 07                      	POP	ES
  6519 00000AF0 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6520 00000AF2 D0E1                    	SHL	CL,1
  6521 00000AF4 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6522 00000AF6 D1E1                    	SHL	CX,1
  6523 00000AF8 D1E1                    	SHL	CX,1
  6524 00000AFA D0EE                    	SHR	DH,1		;Count every two seconds
  6525 00000AFC 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6526 00000AFE 89CA                    	MOV	DX,CX
  6527                                  
  6528                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6529                                  
  6530 00000B00 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6531 00000B03 B104                    	MOV	CL,4
  6532 00000B05 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6533 00000B07 D1E0                    	SHL	AX,1
  6534 00000B09 59                      	POP	CX
  6535 00000B0A 0A06[5003]              	OR	AL,[DAY]
  6536                                  RET21:
  6537 00000B0E C3                      	RETN
  6538                                  
  6539                                  ;----------------------------------------------------------
  6540                                  
  6541                                  READTIME:
  6542                                  
  6543                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6544                                  ;Uses AX, CX, DX.
  6545                                  
  6546 00000B0F C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6547 00000B15 56                      	PUSH	SI
  6548 00000B16 53                      	PUSH	BX
  6549                                  
  6550 00000B17 BB[B603]                	MOV	BX,TIMEBUF
  6551                                  ; 07/02/2024
  6552                                  %if 0
  6553                                  	MOV	CX,6
  6554                                  	; 06/02/2024
  6555                                  	;;XOR	DX,DX
  6556                                  	;;MOV	AX,DX
  6557                                  	;; 06/01/2024
  6558                                  	;xor	ax,ax
  6559                                  	;cwd
  6560                                  	;CALL	SETREAD
  6561                                  	; 06/02/2024
  6562                                  	call	SETREAD_X
  6563                                  %else
  6564 00000B1A E8C63A                  	call	SETREAD_XTC
  6565                                  %endif
  6566 00000B1D 1E                      	PUSH	DS
  6567 00000B1E C536[2E00]              	LDS	SI,[BCLOCK]
  6568 00000B22 E8433A                  	CALL	DEVIOCALL2	;Get correct date and time
  6569 00000B25 1F                      	POP	DS
  6570 00000B26 5B                      	POP	BX
  6571 00000B27 5E                      	POP	SI
  6572 00000B28 A1[B603]                	MOV	AX,[TIMEBUF]
  6573 00000B2B 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6574 00000B2F 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6575 00000B33 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6576                                  	;JZ	SHORT RET22
  6577 00000B37 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6578                                  	;cmp	ax,43830
  6579 00000B39 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6580 00000B3C 733D                    	JAE	SHORT RET22	;Ignore if too large
  6581 00000B3E A3[5403]                	MOV	[DAYCNT],AX
  6582 00000B41 56                      	PUSH	SI
  6583 00000B42 51                      	PUSH	CX
  6584 00000B43 52                      	PUSH	DX		;Save time
  6585 00000B44 31D2                    	XOR	DX,DX
  6586                                  	;mov	cx,1461
  6587 00000B46 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6588 00000B49 F7F1                    	DIV	CX		;Compute number of 4-year units
  6589 00000B4B D1E0                    	SHL	AX,1
  6590 00000B4D D1E0                    	SHL	AX,1
  6591 00000B4F D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6592 00000B51 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6593                                  
  6594 00000B53 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6595                                  
  6596 00000B56 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6597 00000B59 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6598 00000B5B 7304                    	JNC	SHORT SK	;Extra half-year?
  6599 00000B5D 81C2C800                	ADD	DX,200
  6600                                  SK:
  6601 00000B61 E82200                  	CALL	SETYEAR
  6602 00000B64 B101                    	MOV	CL,1		;At least at first month in year
  6603                                  
  6604 00000B66 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6605                                  	
  6606 00000B69 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6607 00000B6C 880E[5103]              	MOV	[MONTH],CL
  6608 00000B70 42                      	INC	DX		;Remainder is day of month (start with one)
  6609 00000B71 8816[5003]              	MOV	[DAY],DL
  6610 00000B75 E88A00                  	CALL	WKDAY		;Set day of week
  6611 00000B78 5A                      	POP	DX
  6612 00000B79 59                      	POP	CX
  6613 00000B7A 5E                      	POP	SI
  6614                                  RET22:  
  6615 00000B7B C3                      	RETN
  6616                                  
  6617                                  ;----------------------------------------------------------
  6618                                  
  6619                                  DSLIDE:
  6620                                  	;MOV	AH,0
  6621                                  	; 06/01/2024
  6622                                  	; (AH = 0)
  6623                                  DSLIDE1:
  6624 00000B7C AC                      	LODSB			;Get count of days
  6625 00000B7D 39C2                    	CMP	DX,AX		;See if it will fit
  6626                                  	;JB	SHORT RET23	;If not, done
  6627 00000B7F 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6628 00000B81 29C2                    	SUB	DX,AX
  6629 00000B83 41                      	INC	CX		;Count one more month/year
  6630 00000B84 EBF6                    	JMP	SHORT DSLIDE1
  6631                                  
  6632                                  ;----------------------------------------------------------
  6633                                  
  6634                                  SETYEAR:
  6635                                  
  6636                                  ;Set year with value in CX. Adjust length of February for this year.
  6637                                  
  6638                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6639                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6640                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6641                                  ;	preserve DS as CHKYR is also called as a routine.
  6642                                  
  6643                                  	; MSDOS 6.0 (18/07/2018) ; *
  6644                                  
  6645                                  	;GETDSEG DS
  6646                                  
  6647                                  	;PUSH	CS  ; *
  6648                                  	;POP	DS  ; *
  6649                                  
  6650                                  	; 13/05/2019 - Retro DOS v4.0
  6651 00000B86 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6652                                  
  6653                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6654                                  	; 05/11/2022 
  6655                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6656                                  
  6657 00000B8B 880E[5203]              	MOV	[YEAR],CL
  6658                                  CHKYR:
  6659 00000B8F F6C103                  	TEST	CL,3		;Check for leap year
  6660 00000B92 B01C                    	MOV	AL,28
  6661 00000B94 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6662 00000B96 FEC0                    	INC	AL		;Add leap day
  6663                                  SAVFEB:
  6664 00000B98 A2[1D0D]                	mov	[february],al
  6665                                  	;MOV	[MONTAB+1],AL	;Store for February
  6666                                  RET23:  
  6667 00000B9B C3                      	RETN
  6668                                  
  6669                                  ;----------------------------------------------------------
  6670                                  
  6671                                  DODATE:
  6672 00000B9C E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6673 00000B9F 88F0                    	MOV	AL,DH
  6674                                  
  6675 00000BA1 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6676                                  
  6677 00000BA4 D7                      	XLAT			;Look up days in month
  6678 00000BA5 38D0                    	CMP	AL,DL
  6679 00000BA7 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6680                                  	;JB	SHORT RET25	;Error if too many days
  6681 00000BA9 72F0                    	jb	short RET23 ; 18/07/2018
  6682 00000BAB E8D8FF                  	CALL	SETYEAR
  6683                                  ;
  6684                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6685                                  ;
  6686 00000BAE 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6687 00000BB2 D1E9                    	SHR	CX,1
  6688 00000BB4 D1E9                    	SHR	CX,1
  6689                                  	;mov	ax,1461
  6690 00000BB6 B8B505                  	MOV	AX,FOURYEARS
  6691 00000BB9 89D3                    	MOV	BX,DX
  6692 00000BBB F7E1                    	MUL	CX
  6693 00000BBD 8A0E[5203]              	MOV	CL,[YEAR]
  6694 00000BC1 80E103                  	AND	CL,3
  6695                                  
  6696 00000BC4 BE[140D]                	MOV	SI,YRTAB
  6697                                  
  6698 00000BC7 89C2                    	MOV	DX,AX
  6699 00000BC9 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6700 00000BCB E84700                  	CALL	DSUM		;Add up the days in each year
  6701 00000BCE 88F9                    	MOV	CL,BH		;Month of year
  6702                                  
  6703 00000BD0 BE[1C0D]                	MOV	SI,MONTAB
  6704                                  
  6705 00000BD3 49                      	DEC	CX		;Account for months starting with one
  6706 00000BD4 E83E00                  	CALL	DSUM		;Add up days in each month
  6707 00000BD7 88D9                    	MOV	CL,BL		;Day of month
  6708 00000BD9 49                      	DEC	CX		;Account for days starting with one
  6709 00000BDA 01CA                    	ADD	DX,CX		;Add in to day total
  6710 00000BDC 92                      	XCHG	AX,DX		;Get day count in AX
  6711 00000BDD A3[5403]                	MOV	[DAYCNT],AX
  6712 00000BE0 56                      	PUSH	SI
  6713 00000BE1 53                      	PUSH	BX
  6714 00000BE2 50                      	PUSH	AX
  6715                                  
  6716                                  ; 07/02/2024
  6717                                  %if 0
  6718                                  	MOV	BX,TIMEBUF
  6719                                  	MOV	CX,6
  6720                                  	; 06/02/2024 ; *
  6721                                  	;;XOR	DX,DX
  6722                                  	;;MOV	AX,DX
  6723                                  	;; 06/01/2024
  6724                                  	;xor	ax,ax
  6725                                  	;cwd
  6726                                  	PUSH	BX
  6727                                  	;CALL	SETREAD
  6728                                  	; 06/02/2024 ; *
  6729                                  	call	SETREAD_X
  6730                                  %else
  6731 00000BE3 E8F939                  	call	SETREAD_XT
  6732                                  %endif
  6733                                  
  6734 00000BE6 1E                      	PUSH	DS
  6735 00000BE7 C536[2E00]              	LDS	SI,[BCLOCK]
  6736 00000BEB E87A39                  	CALL	DEVIOCALL2	;Get correct date and time
  6737 00000BEE 1F                      	POP	DS
  6738 00000BEF 5B                      	POP	BX
  6739 00000BF0 E8293A                  	CALL	SETWRITE
  6740 00000BF3 8F06[B603]              	POP	WORD [TIMEBUF]
  6741 00000BF7 1E                      	PUSH	DS
  6742 00000BF8 C536[2E00]              	LDS	SI,[BCLOCK]
  6743 00000BFC E86939                  	CALL	DEVIOCALL2	;Set the date
  6744 00000BFF 1F                      	POP	DS
  6745 00000C00 5B                      	POP	BX
  6746 00000C01 5E                      	POP	SI
  6747                                  WKDAY:
  6748 00000C02 A1[5403]                	MOV	AX,[DAYCNT]
  6749 00000C05 31D2                    	XOR	DX,DX
  6750 00000C07 B90700                  	MOV	CX,7
  6751 00000C0A 40                      	INC	AX
  6752 00000C0B 40                      	INC	AX		;First day was Tuesday
  6753 00000C0C F7F1                    	DIV	CX		;Compute day of week
  6754 00000C0E 8816[5603]              	MOV	[WEEKDAY],DL
  6755 00000C12 30C0                    	XOR	AL,AL		;Flag OK
  6756                                  RET25:
  6757 00000C14 C3                      	RETN
  6758                                  
  6759                                  ;----------------------------------------------------------
  6760                                  
  6761                                  ;**	DSUM - Compute the sum of a string of bytes
  6762                                  ;
  6763                                  ;	ENTRY	(cx) = byte count
  6764                                  ;		(ds:si) = byte address
  6765                                  ;		(dx) = sum register, initialized by caller
  6766                                  ;	EXIT	(dx) updated
  6767                                  ;	USES	ax, cx, dx, si, flags
  6768                                  
  6769                                  DSUM:
  6770 00000C15 B400                    	MOV	AH,0
  6771 00000C17 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6772                                  	;JCXZ	RET25 ; 18/07/2018
  6773                                  DSUM1:
  6774 00000C19 AC                      	LODSB
  6775 00000C1A 01C2                    	ADD	DX,AX
  6776 00000C1C E2FB                    	LOOP	DSUM1
  6777                                  DSUM9:
  6778 00000C1E C3                      	RETN
  6779                                  
  6780                                  ;============================================================================
  6781                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6782                                  ;============================================================================
  6783                                  ; 29/04/2019 - Retro DOS v4.0
  6784                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6785                                  
  6786                                  ; 12/03/2018 - Retro DOS v2.0 
  6787                                  
  6788                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6789                                  ;NAME	GETSET
  6790                                  
  6791                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6792                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6793                                  
  6794                                  ;USERNUM:
  6795                                  ;	DW	0			; 24 bit user number
  6796                                  ;       DB      0
  6797                                  ;;	IF      IBM
  6798                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6799                                  ;;	ELSE
  6800                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6801                                  ;;	ENDIF
  6802                                  
  6803                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6804                                  ;; 08/07/2018 - Retro DOS v3.0
  6805                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6806                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6807                                  
  6808                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6809                                  ;----------------------------------------------------------------------------
  6810                                  
  6811                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6812                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6813                                  
  6814                                  _$GET_VERSION:
  6815                                  
  6816                                  ; Inputs:
  6817                                  ;       None
  6818                                  ; Function:
  6819                                  ;       Return MS-DOS version number
  6820                                  ; Outputs:
  6821                                  ;       OEM number in BH
  6822                                  ;       User number in BL:CX (24 bits)
  6823                                  ;       Version number as AL.AH in binary
  6824                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6825                                  
  6826                                  ; MSDOS 6.0
  6827                                  ;
  6828                                  ;	Fake_Count is used to lie about the version numbers to support
  6829                                  ;	old binarys. See ms_table.asm for more info.
  6830                                  ;
  6831                                  ;		if input al = 00
  6832                                  ;		  (bh) = OEM number			
  6833                                  ;		else if input al = 01
  6834                                  ;		  (bh) = version flags
  6835                                  ;		 
  6836                                  ;		       	 bits 0-2 = DOS internal revision
  6837                                  ;		       	 bits 3-7 = DOS type flags
  6838                                  ;		              bit 3    = DOS is in ROM
  6839                                  ;		              bit 4    = DOS in in HMA
  6840                                  ;		              bits 5-7 = reserved
  6841                                  ;               M007 change - only bit 3 is now valid. Other bits
  6842                                  ;               are 0 when AL = 1
  6843                                  
  6844                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6845 00000C1F 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6846 00000C24 8CDB                    	mov	bx, ds
  6847                                  
  6848                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6849                                  	;--------------------------------------
  6850                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6851                                  
  6852 00000C26 16                              PUSH    SS
  6853 00000C27 1F                              POP     DS
  6854                                          
  6855                                  	; 06/01/2024
  6856                                  	;MOV	BX,[USERNUM+2]
  6857                                          ;MOV	CX,[USERNUM]
  6858                                  
  6859                                  	; 13/05/2019 - Retro DOS v4.0
  6860                                  
  6861                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6862                                  	;DOS flags
  6863                                  
  6864 00000C28 3C01                    	cmp	AL,1
  6865 00000C2A 7502                    	jne	short Norm_Vers
  6866                                  
  6867                                  ;ifdef ROMDOS
  6868                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6869                                  ;				(DOSINROM = 8)
  6870                                  ;else
  6871 00000C2C 30FF                            xor     bh,bh		; Otherwise return 0
  6872                                  ;endif				;M007 end
  6873                                  
  6874                                  Norm_Vers:
  6875                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6876                                  
  6877                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6878                                  	; 13/05/2019 - Retro DOS v4.0
  6879 00000C2E 1E                      	push	ds		; Get the version number from the
  6880 00000C2F 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6881                                  	;mov	ax,[40h]
  6882 00000C33 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6883                                  	; 07/12/2022
  6884 00000C36 1F                      	pop	ds
  6885 00000C37 E84BF8                  	call	Get_User_Stack
  6886                                  				; Put values for return registers
  6887                                  				; in the proper place on the user's	 
  6888                                  				; stack addressed by DS:SI
  6889                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6890                                  gdrvfspc_ret:
  6891                                          ;MOV	[SI+user_env.user_AX],AX
  6892 00000C3A 8904                            MOV	[SI],AX
  6893                                          ;MOV	[SI+4],CX
  6894 00000C3C 894C04                  	mov	[SI+user_env.user_CX],CX
  6895                                  set_user_bx:
  6896                                  	;MOV	[SI+2],BX
  6897 00000C3F 895C02                  	mov	[SI+user_env.user_BX],BX
  6898                                  
  6899 00000C42 C3                      	RETN
  6900                                  
  6901                                  ; 18/07/2018 - Retro DOS v3.0
  6902                                  
  6903                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6904                                  ;----------------------------------------------------------------------------
  6905                                  
  6906                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6907                                  ;
  6908                                  ;	ENTRY	none
  6909                                  ;	EXIT	(al) = value of VERIFY flag
  6910                                  ;	USES	all
  6911                                  
  6912                                  
  6913                                  _$GET_VERIFY_ON_WRITE:
  6914                                  
  6915                                  ;hkn; SS override
  6916 00000C43 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6917 00000C47 C3                      	retn
  6918                                  
  6919                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6920                                  ;
  6921                                  ;	ENTRY	(al) = value of VERIFY flag
  6922                                  ;	EXIT	none
  6923                                  ;	USES	all
  6924                                  
  6925                                  _$SET_VERIFY_ON_WRITE:
  6926                                  
  6927 00000C48 2401                    	AND	AL,1
  6928                                  ;hkn; SS override
  6929 00000C4A 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6930                                  RET27:	; 18/07/2018
  6931 00000C4E C3                      	retn
  6932                                  
  6933                                  ; 19/07/2018 - Retro DOS v3.0
  6934                                  
  6935                                  ;BREAK <$International - return country-dependent information>
  6936                                  ;----------------------------------------------------------------------------
  6937                                  ;
  6938                                  ; Procedure Name : $INTERNATIONAL
  6939                                  ;
  6940                                  ; Inputs:
  6941                                  ;	MOV	AH,International
  6942                                  ;	MOV	AL,country	(al = 0 => current country)
  6943                                  ;      [MOV	BX,country]
  6944                                  ;	LDS	DX,block
  6945                                  ;	INT	21
  6946                                  ; Function:
  6947                                  ;	give users an idea of what country the application is running
  6948                                  ; Outputs:
  6949                                  ;	IF DX != -1 on input (get country)
  6950                                  ;	  AL = 0 means return current country table.
  6951                                  ;	  0<AL<0FFH means return country table for country AL
  6952                                  ;	  AL = 0FF means return country table for country BX
  6953                                  ;	  No Carry:
  6954                                  ;	     Register BX will contain the 16-bit country code.
  6955                                  ;	     Register AL will contain the low 8 bits of the country code.
  6956                                  ;	     The block pointed to by DS:DX is filled in with the information
  6957                                  ;	     for the particular country.
  6958                                  ;		BYTE  Size of this table excluding this byte and the next
  6959                                  ;		BYTE  Country code represented by this table
  6960                                  ;			A sequence of n bytes, where n is the number specified
  6961                                  ;			by the first byte above and is not > internat_block_max,
  6962                                  ;			in the correct order for being returned by the
  6963                                  ;			INTERNATIONAL call as follows:
  6964                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6965                                  ;		5 BYTE	Currency symbol null terminated
  6966                                  ;		2 BYTE	thousands separator null terminated
  6967                                  ;		2 BYTE	Decimal point null terminated
  6968                                  ;		2 BYTE	Date separator null terminated
  6969                                  ;		2 BYTE	Time separator null terminated
  6970                                  ;		1 BYTE	Bit field.  Currency format.
  6971                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6972                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6973                                  ;		1 BYTE	No. of significant decimal digits in currency
  6974                                  ;		1 BYTE	Bit field.  Time format.
  6975                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6976                                  ;		DWORD	Call address of case conversion routine
  6977                                  ;		2 BYTE	Data list separator null terminated.
  6978                                  ;	  Carry:
  6979                                  ;	     Register AX has the error code.
  6980                                  ;	IF DX = -1 on input (set current country)
  6981                                  ;	  AL = 0 is an error
  6982                                  ;	  0<AL<0FFH means set current country to country AL
  6983                                  ;	  AL = 0FF means set current country to country BX
  6984                                  ;	  No Carry:
  6985                                  ;	    Current country SET
  6986                                  ;	    Register AL will contain the low 8 bits of the country code.
  6987                                  ;	  Carry:
  6988                                  ;	     Register AX has the error code.
  6989                                  ;-----------------------------------------------------------------------------
  6990                                  
  6991                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6992                                  
  6993                                  ; 13/05/2019 - Retro DOS v4.0
  6994                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6995                                  
  6996                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6997                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6998                                  
  6999                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7000                                  	 
  7001 00000C4F 3CFF                    	CMP	AL,0FFH
  7002 00000C51 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7003 00000C53 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7004 00000C55 30FF                    	XOR	BH,BH
  7005                                  BX_HAS_CODE:
  7006 00000C57 1E                      	PUSH	DS
  7007 00000C58 07                      	POP	ES
  7008 00000C59 52                      	PUSH	DX
  7009 00000C5A 5F                      	POP	DI			; User buffer to ES:DI
  7010                                  
  7011                                  ;hkn; SS is DOSDATA
  7012                                  ;	context DS
  7013                                  
  7014 00000C5B 16                      	push	ss
  7015 00000C5C 1F                      	pop	ds
  7016                                  
  7017 00000C5D 83FFFF                  	CMP	DI,-1
  7018 00000C60 745D                    	JZ	short international_set
  7019 00000C62 09DB                    	OR	BX,BX
  7020 00000C64 7505                    	JNZ	short international_find
  7021                                  
  7022                                  ;hkn; country_cdpg is in DOSDATA segment.
  7023 00000C66 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7024                                  
  7025 00000C69 EB39                    	JMP	SHORT international_copy
  7026                                  
  7027                                  international_find:
  7028                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7029                                  	; 06/01/2024
  7030 00000C6B 31ED                    	xor	bp,bp ; 0
  7031 00000C6D E80A00                  	CALL	international_get
  7032 00000C70 7255                    	JC	short errtn
  7033                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7034                                  	; 06/01/2024
  7035 00000C72 09DB                    	or	bx,bx
  7036 00000C74 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7037 00000C76 89D3                    	MOV	BX,DX			 ; put country back
  7038 00000C78 EB3A                    	JMP	SHORT international_ok3
  7039                                  
  7040                                  international_get:
  7041 00000C7A BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7042                                  
  7043                                  ;hkn; country_cdpg is in DOSDATA segment.
  7044                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7045                                  
  7046                                  	; MSDOS 3.3
  7047                                  	;;cmp	bx,[SI+63h]
  7048                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7049                                  	;jz	short RET27
  7050                                  
  7051                                  	; 13/05/2019 - Retro DOS v4.0
  7052                                  
  7053                                  	; MSDOS 6.0
  7054                                  	;cmp	bx,[ss:si+68h]
  7055 00000C7D 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7056 00000C81 74CB                    	jz	short RET27			; return if equal
  7057                                  
  7058 00000C83 89DA                    	MOV	DX,BX
  7059 00000C85 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7060                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7061 00000C87 B80014                  	mov	ax,1400h
  7062 00000C8A CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7063                                  			; Return: AL = 00h not installed, OK to install
  7064                                  			; 01h not installed, not OK
  7065                                  			; FFh installed
  7066 00000C8C 3CFF                    	CMP	AL,0FFH
  7067 00000C8E 7510                    	JNZ	short interr		; not in memory
  7068                                  	
  7069                                  	; 06/01/2024
  7070 00000C90 B80314                  	mov	ax,1403h		; set country info
  7071                                  
  7072                                  	;cmp	bp,0
  7073 00000C93 09ED                    	or	bp,bp			; GetCntry ?
  7074 00000C95 7501                    	JNZ	short stcdpg
  7075                                  	
  7076                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7077                                  	;mov	ax,1404h
  7078 00000C97 40                      	inc	ax	; AX = 1404h ; get country info
  7079                                  
  7080                                  	; 06/01/2024
  7081                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7082                                  	;		; BX = code page, DX = country code,
  7083                                  	;		; DS:SI -> internal code page structure
  7084                                  	;		; ES:DI -> user buffer
  7085                                  	;		; Return: AL = status
  7086                                  	;
  7087                                  	;JMP	short chkok
  7088                                  	
  7089                                  	;nop
  7090                                  
  7091                                  stcdpg:
  7092                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7093                                  	; 06/01/2024
  7094                                  	;mov     ax,1403h
  7095                                  gscdpg:
  7096 00000C98 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7097                                  			; DS:SI -> internal code page structure
  7098                                  			; BX = code page, DX = country code
  7099                                  			; Return: AL = status
  7100                                  chkok:
  7101 00000C9A 08C0                    	or	al,al			; success ?
  7102                                  	;retz				; yes
  7103 00000C9C 74B0                    	jz	short RET27
  7104                                  
  7105                                  setcarry:
  7106 00000C9E F9                      	STC				; set carry
  7107 00000C9F C3                      	retn
  7108                                  interr:
  7109 00000CA0 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7110 00000CA2 EBFA                    	JMP	short setcarry
  7111                                  
  7112                                  international_copy:
  7113                                  
  7114                                  ;hkn; country_cdpg is in DOSDATA segment.
  7115                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7116                                  
  7117                                  	; MSDOS 3.3
  7118                                  	;;mov	bx,[SI+63h]
  7119                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7120                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7121                                  
  7122                                  	; 13/05/2019 - Retro DOS v4.0
  7123                                  
  7124                                  	; MSDOS 6.0
  7125                                  	;mov	bx,[ss:si+68h]
  7126 00000CA4 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7127 00000CA8 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7128                                  
  7129                                  	;mov	cx,24
  7130 00000CAB B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7131                                  
  7132                                  	; MSDOS 6.0
  7133                                  
  7134                                  ;hkn;	must set up DS to SS so that international info can be copied
  7135                                  	
  7136 00000CAE 1E                      	push	ds
  7137                                  
  7138 00000CAF 16                      	push	ss			; cs -> ss
  7139 00000CB0 1F                      	pop	ds
  7140                                  
  7141 00000CB1 F3A4                    	REP	MOVSB			; copy country info
  7142                                  
  7143                                  	; MSDOS 6.0
  7144                                  
  7145 00000CB3 1F                      	pop	ds	;hkn;	restore ds
  7146                                  
  7147                                  international_ok3:
  7148 00000CB4 E8CEF7                  	call	Get_User_Stack
  7149                                  ;ASSUME	DS:NOTHING
  7150                                  	;MOV	[SI+2],BX
  7151 00000CB7 895C02                  	MOV	[SI+user_env.user_BX],BX
  7152                                  international_ok:
  7153 00000CBA 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7154                                  ;SYS_RET_OK_jmp:
  7155                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7156                                  nono:	; 15/12/2022
  7157                                  SYS_RET_OK_jmp:
  7158 00000CBC E976F9                  	jmp	SYS_RET_OK
  7159                                  
  7160                                  international_set:
  7161                                  
  7162                                  ;hkn; ASSUME	DS:DOSGROUP
  7163                                  ;ASSUME	DS:DOSDATA
  7164                                  
  7165 00000CBF BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7166 00000CC2 E8B5FF                  	CALL	international_get
  7167 00000CC5 73F3                    	JNC	short international_ok
  7168                                  errtn:
  7169 00000CC7 3CFF                    	CMP	AL,0FFH
  7170 00000CC9 7403                    	JZ	short errtn2
  7171                                  errtn1:
  7172 00000CCB E970F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7173                                  errtn2:
  7174                                  	;error	error_invalid_function	; NLSFUNC not existent
  7175                                  
  7176                                  	;mov	al,1
  7177 00000CCE B001                    	mov	al,error_invalid_function 
  7178 00000CD0 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7179                                  ;errtn3:
  7180                                  ;	jmp	SYS_RET_ERR
  7181                                  
  7182                                  ;EndProc $INTERNATIONAL
  7183                                  
  7184                                  ; 19/07/2018
  7185                                  
  7186                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7187                                  
  7188                                  ;----------------------------------------------------------------------------
  7189                                  ;
  7190                                  ; Procedure Name : $GetExtCntry
  7191                                  ;
  7192                                  ; Inputs:
  7193                                  ;	if AL >= 20H
  7194                                  ;	  AL= 20H    capitalize single char, DL= char
  7195                                  ;	      21H    capitalize string, CX= string length
  7196                                  ;	      22H    capitalize ASCIIZ string
  7197                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7198                                  ;	      80H bit 0 = use normal upper case table
  7199                                  ;		      1 = use file upper case table
  7200                                  ;	   DS:DX points to string
  7201                                  ;
  7202                                  ;	else
  7203                                  ;
  7204                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7205                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7206                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7207                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7208                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7209                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7210                                  ;	INT	21
  7211                                  ; Function:
  7212                                  ;	give users extended country dependent information
  7213                                  ;	or capitalize chars
  7214                                  ; Outputs:
  7215                                  ;	  No Carry:
  7216                                  ;	     extended country info is succesfully returned
  7217                                  ;	  Carry:
  7218                                  ;	     Register AX has the error code.
  7219                                  ;	     AX=0, NO	 for YES/NO CHECK
  7220                                  ;		1, YES
  7221                                  ;----------------------------------------------------------------------------
  7222                                  
  7223                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7224                                  
  7225                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7226                                  
  7227                                  	; MSDOS 6.0
  7228                                  _$GetExtCntry:
  7229 00000CD2 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7230 00000CD4 7269                    	JB	short notcap
  7231                                  capcap: 				;
  7232 00000CD6 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7233 00000CD8 7505                    	JNZ	short fileupper		; file upper case
  7234                                  
  7235                                  ;hkn; UCASE_TAB in DOSDATA
  7236 00000CDA BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7237 00000CDD EB05                    	JMP	SHORT capit
  7238                                  
  7239                                  fileupper:
  7240                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7241                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7242                                  	; AL >= 80h
  7243 00000CDF 247F                    	and	al,7Fh
  7244                                  
  7245                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7246 00000CE1 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7247                                  capit:					;
  7248 00000CE4 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7249 00000CE6 750D                    	JNZ	short chkyes		; no
  7250 00000CE8 88D0                    	MOV	AL,DL			; set up AL
  7251 00000CEA E86D42                  	call	GETLET3 		; upper case it
  7252 00000CED E895F7                  	call	Get_User_Stack		; get user stack
  7253                                  	;mov	[si+6],al
  7254 00000CF0 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7255 00000CF3 EBC7                    	JMP	SHORT nono		; done
  7256                                  chkyes: 				;
  7257 00000CF5 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7258 00000CF7 7522                    	JNZ	short capstring		; no
  7259                                  
  7260 00000CF9 31C0                    	XOR	AX,AX			; presume NO
  7261                                  		      
  7262                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7263                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7264                                  
  7265                                  	; 06/08/2018 - Retro DOS v3.0
  7266                                  	; 13/05/2019 - Retro DOS v4.0
  7267                                  	;cmp	dl,'Y'
  7268 00000CFB 2E3A16[140A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7269 00000D00 7416                    	JZ	short yesyes		; yes
  7270                                  	;cmp	dl,'y'
  7271 00000D02 2E3A16[160A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7272 00000D07 740F                    	JZ	short yesyes		; yes
  7273                                  	;cmp	dl,'N'
  7274 00000D09 2E3A16[150A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7275 00000D0E 74AC                    	JZ	short nono		; no
  7276                                  	;cmp	dl,'n'
  7277 00000D10 2E3A16[170A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7278 00000D15 74A5                    	JZ	short nono		; no
  7279                                  ;dbcs_char:				;
  7280 00000D17 40                      	INC	AX			; not YES or NO
  7281                                  yesyes: 				;
  7282 00000D18 40                      	INC	AX			; return 1
  7283                                  	; 15/12/2022
  7284                                  ;nono:	
  7285 00000D19 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7286                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7287                                  	;jmp	SYS_RET_OK		; done
  7288                                  
  7289                                  capstring:				;
  7290 00000D1B 89D6                    	MOV	SI,DX			; si=dx
  7291 00000D1D 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7292 00000D1F 750D                    	JNZ	short capascii		; no
  7293                                  	;OR	CX,CX			; check count 0
  7294                                  	;JZ	short nono		; yes finished
  7295                                  	; 06/01/2024
  7296 00000D21 E399                    	jcxz	nono
  7297                                  concap: 				;
  7298 00000D23 AC                      	LODSB				; get char
  7299 00000D24 E83342                  	call	GETLET3 		; upper case it
  7300 00000D27 8844FF                  	MOV	byte [SI-1],AL		; store back
  7301                                  ;next99: 				;
  7302 00000D2A E2F7                    	LOOP	concap			; continue
  7303 00000D2C EB8E                    	JMP	short nono		; done
  7304                                  capascii:				;
  7305 00000D2E 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7306 00000D30 7545                    	JNZ	short capinval		; no
  7307                                  concap2:				;
  7308 00000D32 AC                      	LODSB				; get char
  7309 00000D33 08C0                    	or	al,al			; end of string ?
  7310 00000D35 7485                    	JZ	short nono		; yes
  7311 00000D37 E82042                  	call	GETLET3 		; upper case it
  7312 00000D3A 8844FF                  	MOV	[SI-1],AL		; store back
  7313 00000D3D EBF3                    	JMP	short concap2 		; continue
  7314                                  
  7315                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7316                                  
  7317                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7318                                  ; _$GetExtCntry:
  7319                                  
  7320                                  notcap:
  7321 00000D3F 83F905                  	CMP	CX,5			; minimum size is 5
  7322 00000D42 7277                    	jb	short sizeerror
  7323                                  
  7324                                  GEC_CONT:
  7325                                  ;hkn; SS is DOSDATA
  7326                                  	;context DS
  7327                                  
  7328 00000D44 16                      	push	ss
  7329                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7330 00000D45 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7331                                  	
  7332                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7333 00000D46 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7334                                  
  7335 00000D49 83FAFF                  	CMP	DX,-1			; active country ?
  7336 00000D4C 7503                    	JNZ	short GETCDPG 		; no
  7337                                  
  7338                                  ;hkn; use DS override to accesss country_cdpg fields
  7339                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7340                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7341 00000D4E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7342                                  					; get active country id;smr;use DS
  7343                                  GETCDPG:
  7344 00000D51 83FBFF                  	CMP	BX,-1			; active code page?
  7345 00000D54 7503                    	JNZ	short CHKAGAIN		; no, check again
  7346                                  
  7347                                  ;hkn; use DS override to accesss country_cdpg fields
  7348                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7349                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7350 00000D56 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7351                                  					; get active code page id;smr;Use DS
  7352                                  CHKAGAIN:
  7353                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7354 00000D59 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7355                                  					; same as active country id?;smr;use DS
  7356 00000D5C 7550                    	JNZ	short CHKNLS		; no
  7357                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7358 00000D5E 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7359                                  					; same as active code pg id?;smr;use DS
  7360 00000D61 754B                    	JNZ	short CHKNLS		; no
  7361                                  CHKTYPE:
  7362                                  	;mov	bx,[si+48h]
  7363 00000D63 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7364                                  					; bx = sys code page id;smr;use DS
  7365 00000D66 51                      	PUSH	CX			; save cx
  7366                                  	;mov	cx,[si+4Ah]
  7367 00000D67 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7368                                  	;mov	si,COUNTRY_CDPG+76
  7369 00000D6A BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7370                                  NXTENTRY:
  7371 00000D6D 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7372 00000D6F 740B                    	JZ	short FOUNDIT
  7373 00000D71 83C605                  	ADD	SI,5			; next entry
  7374 00000D74 E2F7                    	LOOP	NXTENTRY
  7375 00000D76 59                      	POP	CX
  7376                                  capinval:
  7377                                  	;error	error_invalid_function	; info type not found
  7378                                  	;mov	al,1
  7379 00000D77 B001                    	mov	al,error_invalid_function
  7380                                  ;SYS_RET_ERR_jmp:
  7381                                  	;jmp	SYS_RET_ERR
  7382                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7383                                  SYS_RET_ERR_jmp:
  7384 00000D79 E9C2F8                  	jmp	SYS_RET_ERR	
  7385                                  
  7386                                  FOUNDIT:
  7387 00000D7C A4                      	MOVSB				; move info id byte
  7388 00000D7D 59                      	POP	CX			; restore char count
  7389                                  	;cmp	al,1
  7390 00000D7E 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7391 00000D80 7415                    	JZ	short setsize
  7392 00000D82 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7393 00000D85 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7394                                  OK_RETN:
  7395 00000D88 F3A4                    	REP	MOVSB			; copy info
  7396 00000D8A 89C1                    	MOV	CX,AX			; CX = actual length returned
  7397 00000D8C 89D8                    	MOV	AX,BX			; return sys code page in ax
  7398                                  GETDONE:
  7399 00000D8E E8F4F6                  	call	Get_User_Stack		; return actual length to user's CX
  7400                                  	;mov	[si+4],cx 
  7401 00000D91 894C04                  	MOV	[SI+user_env.user_CX],CX
  7402                                  	;jmp	SYS_RET_OK
  7403                                  	; 15/12/2022
  7404                                  	; 25/06/2019
  7405 00000D94 E9A1F8                  	jmp	SYS_RET_OK_clc
  7406                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7407                                  	; 15/12/2022
  7408                                  ;nono_jmp:
  7409                                  	;jmp	short nono
  7410                                  setsize:
  7411 00000D97 83E903                  	SUB	CX,3			; size after length field
  7412 00000D9A 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7413 00000D9C 7302                    	JAE	short setsize2		; no
  7414 00000D9E 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7415                                  setsize2:
  7416 00000DA0 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7417                                  	;ADD	DI,2			; update index
  7418                                  	;ADD	SI,2
  7419                                  	; 06/01/2024
  7420 00000DA3 47                      	inc	di
  7421 00000DA4 47                      	inc	di
  7422 00000DA5 46                      	inc	si
  7423 00000DA6 46                      	inc	si
  7424 00000DA7 89C8                    	MOV	AX,CX
  7425 00000DA9 83C003                  	ADD	AX,3			; AX has the actual length
  7426 00000DAC EBDA                    	JMP	short OK_RETN 		; go move it
  7427                                  CHKNLS:
  7428 00000DAE 30E4                    	XOR	AH,AH
  7429                                  	;PUSH	AX			; save info type
  7430                                  	;POP	BP			; bp = info type
  7431                                  	; 06/01/2024
  7432 00000DB0 89C5                    	mov	bp,ax
  7433                                  	
  7434                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7435 00000DB2 B80014                  	mov     ax,1400h
  7436 00000DB5 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7437                                  			; Return: AL = 00h not installed, OK to install
  7438                                  			; 01h not installed, not OK
  7439                                  			; FFh installed
  7440 00000DB7 3CFF                    	CMP	AL,0FFH
  7441 00000DB9 7404                    	JZ	short NLSNXT		; in memory
  7442                                  
  7443                                  sizeerror:
  7444                                  	;error	error_invalid_function
  7445                                  	;mov	al,1
  7446 00000DBB B001                    	mov	al,error_invalid_function
  7447                                  	;jmp	SYS_RET_ERR
  7448                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7449                                  sys_ret_err_jmp2:
  7450 00000DBD EBBA                    	jmp	short SYS_RET_ERR_jmp
  7451                                  
  7452                                  NLSNXT: 
  7453                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7454 00000DBF B80214                  	mov     ax,1402h
  7455 00000DC2 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7456                                  			; BP = subfunction, BX = code page
  7457                                  			; DX = country code, DS:SI -> internal code page structure
  7458                                  			; ES:DI -> user buffer, CX = size of user buffer
  7459                                  			; Return: AL = status
  7460                                  			; 00h successful
  7461                                  			; else DOS error code
  7462                                  
  7463 00000DC4 3C00                    	CMP	AL,0			; success ?
  7464 00000DC6 7505                    	JNZ	short NLSERROR
  7465                                  	;mov	ax,[si+48h] ; 13/05/2019
  7466 00000DC8 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7467                                  			; ax = sys code page id;smr;use ds;
  7468                                  			;BUGBUG;check whether DS is OK after the above calls
  7469 00000DCB EBC1                    	JMP	short GETDONE
  7470                                  seterr:
  7471                                  	; 15/12/2022
  7472                                  NLSERROR:
  7473                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7474                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7475                                  	;jmp	short sys_ret_err_jmp2
  7476                                  	; 15/12/2022
  7477 00000DCD EBAA                    	jmp	short SYS_RET_ERR_jmp
  7478                                  
  7479                                  ;EndProc $GetExtCntry
  7480                                  
  7481                                  ; 13/05/2019 - Retro DOS v4.0
  7482                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7483                                  
  7484                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7485                                  ;----------------------------------------------------------------------------
  7486                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7487                                  ;
  7488                                  ;   System call format:
  7489                                  ;
  7490                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7491                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7492                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7493                                  ;	INT	21
  7494                                  ;
  7495                                  ;	ENTRY	(al) = n
  7496                                  ;		(bx) = code page
  7497                                  ;	EXIT	'C' clear
  7498                                  ;		  global code page is set	(set global code page)
  7499                                  ;		  (BX) = active code page id	(get global code page)
  7500                                  ;		  (DX) = system code page id	(get global code page)
  7501                                  ;		'C' set
  7502                                  ;		  (AX) = error code
  7503                                  
  7504                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7505                                  
  7506                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7507                                  	; DOSCODE:4BC9h
  7508                                  
  7509                                  _$GetSetCdPg:
  7510                                  
  7511                                  ;hkn; SS is DOSDATA
  7512                                  	;context DS
  7513                                  
  7514 00000DCF 16                      	push	ss
  7515 00000DD0 1F                      	pop	ds
  7516                                  
  7517                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7518 00000DD1 BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7519                                  
  7520 00000DD4 3C01                    	CMP	AL,1		       ; get global code page
  7521 00000DD6 7512                    	JNZ	short setglpg 	       ; set global code page
  7522                                  	
  7523                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7524                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7525 00000DD8 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7526                                  					; get active code page id;smr;use ds
  7527                                  	;mov	dx,[si+48h]
  7528 00000DDB 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7529                                  				  	; get sys code page id;smr;use ds
  7530 00000DDE E8A4F6                  	call	Get_User_Stack
  7531                                  ;ASSUME DS:NOTHING
  7532                                  	;;mov	[si+2],bx
  7533                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7534                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7535 00000DE1 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7536                                  	;mov	[si+6],dx
  7537 00000DE4 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7538                                  OK_RETURN:
  7539                                  	; 15/12/2022
  7540                                  	;transfer SYS_RET_OK
  7541 00000DE7 E94BF8                  	jmp	SYS_RET_OK
  7542                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7543                                  	;jmp	short nono_jmp
  7544                                  
  7545                                  ;hkn; ASSUME DS:DOSGROUP
  7546                                  ;ASSUME	DS:DOSDATA
  7547                                  
  7548                                  setglpg:
  7549 00000DEA 3C02                    	CMP	AL,2
  7550 00000DEC 752F                    	JNZ	short nomem
  7551                                  	
  7552                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7553                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7554 00000DEE 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7555                                  	
  7556                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7557 00000DF1 B80014                  	mov     ax,1400h
  7558 00000DF4 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7559                                  			; Return: AL = 00h not installed, OK to install
  7560                                  			; 01h not installed, not OK
  7561                                  			; FFh installed
  7562 00000DF6 3CFF                    	CMP	AL,0FFH
  7563 00000DF8 7523                    	JNZ	short nomem		; not in memory
  7564                                  
  7565                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7566 00000DFA B80114                  	mov     ax,1401h
  7567 00000DFD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7568                                  			; DS:SI -> internal code page structure
  7569                                  			; BX = new code page, DX = country code???
  7570                                  			; Return: AL = status
  7571                                  			; 00h successful
  7572                                  			; else DOS error code
  7573                                  	;cmp	al,0
  7574 00000DFF 08C0                    	or	al,al			; success ?
  7575 00000E01 74E4                    	JZ	short OK_RETURN		; yes
  7576                                  
  7577 00000E03 3C41                    	CMP	AL,65			; set device code page failed
  7578 00000E05 75C6                    	JNZ	short seterr
  7579                                  	;MOV	AX,65
  7580                                  	; 06/01/2024
  7581 00000E07 98                      	cbw
  7582 00000E08 A3[2403]                	MOV	[EXTERR],AX
  7583                                  	;mov	byte [EXTERR_ACTION],6
  7584                                  	;mov	byte [EXTERR_CLASS],5
  7585                                  	;mov	byte [EXTERR_LOCUS],4
  7586 00000E0B C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7587 00000E10 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7588 00000E15 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7589                                  	;transfer From_GetSet
  7590 00000E1A E929F8                  	jmp	From_GetSet
  7591                                  
  7592                                  	; 15/12/2022
  7593                                  ;seterr:
  7594                                  	;;;transfer SYS_RET_ERR
  7595                                  	;;jmp	SYS_RET_ERR
  7596                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7597                                  	;jmp	short NLSERROR
  7598                                  
  7599                                  nomem:
  7600                                  	;error	error_invalid_function	; function not defined
  7601                                  	;mov	al,1
  7602 00000E1D B001                    	mov	al,error_invalid_function
  7603 00000E1F EBAC                    	jmp	short seterr
  7604                                  
  7605                                  ;EndProc $GetSetCdPg
  7606                                  
  7607                                  ; 09/01/2024
  7608                                  ; 13/05/2019 - Retro DOS v4.0
  7609                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7610                                  
  7611                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7612                                  ;----------------------------------------------------------------------------
  7613                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7614                                  ;
  7615                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7616                                  ;		drive.
  7617                                  ;
  7618                                  ;	This call returns the same info in the same registers (except for the
  7619                                  ;	FAT pointer) as the old FAT pointer calls
  7620                                  ;
  7621                                  ;	ENTRY	DL = Drive number
  7622                                  ;	EXIT	AX = Sectors per allocation unit
  7623                                  ;		   = -1 if bad drive specified
  7624                                  ;		On User Stack
  7625                                  ;		    BX = Number of free allocation units
  7626                                  ;		    DX = Total Number of allocation units on disk
  7627                                  ;		    CX = Sector size
  7628                                  
  7629                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7630                                  
  7631                                  _$GET_DRIVE_FREESPACE:
  7632                                  
  7633                                  ;hkn; SS is DOSDATA
  7634                                  	;context DS
  7635 00000E21 16                      	push	ss
  7636 00000E22 1F                      	pop	ds
  7637                                  
  7638 00000E23 88D0                    	MOV	AL,DL
  7639                                  	;invoke	GetThisDrv		; Get drive
  7640 00000E25 E82C5B                  	call	GETTHISDRV
  7641                                  SET_AX_RET:
  7642 00000E28 7212                    	JC	short BADFDRV
  7643                                  	;invoke	DISK_INFO
  7644 00000E2A E82F1E                  	call	DISK_INFO
  7645 00000E2D 87D3                    	XCHG	DX,BX
  7646                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7647                                  	; 06/01/2024
  7648 00000E2F 720B                    	jc	short BADFDRV
  7649 00000E31 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7650                                  DoSt:
  7651 00000E33 E84FF6                  	call	Get_User_Stack
  7652                                  ;ASSUME	DS:NOTHING
  7653                                  	;mov	[si+6],dx
  7654                                  	;;mov	[si+4],cx
  7655                                  	;;mov	[si+2],bx
  7656                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7657 00000E36 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7658                                  	;MOV	[SI+user_env.user_CX],CX
  7659                                  	;MOV	[SI+user_env.user_BX],BX
  7660                                  	;;MOV	[SI+user_env.user_AX],AX
  7661                                  	;mov	[si],ax
  7662                                  	;;return
  7663                                  	;retn
  7664                                  	; 09/01/2024
  7665 00000E39 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7666                                  
  7667                                  BADFDRV:
  7668                                  	; MSDOS 3.3
  7669                                  	;;mov	al,0Fh
  7670                                  	;mov	al,error_invalid_drive	; Assume error
  7671                                  
  7672                                  	; 13/05/2019 - Retro DOS v4.0
  7673                                  
  7674                                  	; MSDOS 6.0 & MSDOS 3.3
  7675                                  	;invoke	FCB_RET_ERR
  7676 00000E3C E815F8                  	call	FCB_RET_ERR
  7677                                  	
  7678 00000E3F B8FFFF                  	MOV	AX,-1
  7679 00000E42 EBEF                    	JMP	short DoSt
  7680                                  
  7681                                  ;EndProc $GET_DRIVE_FREESPACE
  7682                                  
  7683                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7684                                  ;----------------------------------------------------------------------------
  7685                                  ;**	$Get_DMA - Get Disk Transfer Address
  7686                                  ;
  7687                                  ;	ENTRY	none
  7688                                  ;	EXIT	ES:BX is current transfer address
  7689                                  ;	USES	all
  7690                                  
  7691                                  	; 09/01/2024
  7692                                  _$GET_DMA:
  7693 00000E44 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7694 00000E49 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7695 00000E4E E834F6                  	call	Get_User_Stack
  7696                                  	;mov	[si+2],bx
  7697                                  	;mov	[si+10h],cx
  7698                                  	; 09/01/2024
  7699                                  	;MOV	[SI+user_env.user_BX],BX
  7700 00000E51 894C10                  	MOV	[SI+user_env.user_ES],CX
  7701                                  	;retn
  7702                                  	; 09/01/2024
  7703 00000E54 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7704                                  
  7705                                  ;**	$Set_DMA - Set Disk Transfer Address
  7706                                  ;----------------------------------------------------------------------------
  7707                                  ;	ENTRY	DS:DX is current transfer address
  7708                                  ;	EXIT	none
  7709                                  ;	USES	all
  7710                                  
  7711                                  _$SET_DMA:
  7712 00000E57 368916[2C03]            	MOV	[SS:DMAADD],DX
  7713 00000E5C 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7714 00000E61 C3                      	retn
  7715                                  
  7716                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7717                                  ;------------------------------------------------------------------------------
  7718                                  
  7719                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7720                                  ;-----------------------------------------------------
  7721                                  ;	ENTRY	none
  7722                                  ;	EXIT	(AL) = drive number
  7723                                  ;	USES	all
  7724                                  
  7725                                  _$GET_DEFAULT_DRIVE:
  7726 00000E62 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7727 00000E66 C3                      	retn
  7728                                  
  7729                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7730                                  ;-----------------------------------------------------
  7731                                  ;	ENTRY	(DL) = Drive number for new default drive
  7732                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7733                                  
  7734                                  _$SET_DEFAULT_DRIVE:
  7735 00000E67 88D0                    	MOV	AL,DL
  7736 00000E69 FEC0                    	INC	AL			; A=1, B=2...
  7737 00000E6B E8CA5A                  	call	GetVisDrv		; see if visible drive
  7738 00000E6E 7204                    	JC	short SETRET		; errors do not set
  7739 00000E70 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7740                                  
  7741                                  SETRET:
  7742 00000E74 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7743 00000E78 C3                      	retn
  7744                                  
  7745                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7746                                  ;----------------------------------------------------------------------------
  7747                                  
  7748                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7749                                  ;---------------------------------------------------
  7750                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7751                                  ;	contents of an interrupt vector.
  7752                                  ;
  7753                                  ;	ENTRY	(AL) = interrupt number
  7754                                  ;	EXIT	(ES:BX) = current interrupt vector
  7755                                  
  7756                                  _$GET_INTERRUPT_VECTOR:
  7757 00000E79 E82E00                  	CALL	RECSET
  7758 00000E7C 26C41F                  	LES	BX,[ES:BX]
  7759 00000E7F E803F6                  	call	Get_User_Stack
  7760                                  set_user_es_bx:
  7761                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7762                                  	;;mov	[si+2],bx
  7763                                  	;mov	[si+10h],es
  7764                                  	;MOV	[SI+user_env.user_BX],BX
  7765 00000E82 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7766                                  	;retn
  7767 00000E85 E9B7FD                  	jmp	set_user_bx
  7768                                  
  7769                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7770                                  ;---------------------------------------------------
  7771                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7772                                  ;	contents of an interrupt vector.
  7773                                  ;
  7774                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7775                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7776                                  ;	for explanation.
  7777                                  ;
  7778                                  ;	ENTRY	(AL) = interrupt number
  7779                                  ;		(ds:dx) = desired new vector value
  7780                                  ;	EXIT	none
  7781                                  ;	USES	all
  7782                                  
  7783                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7784                                  ; 13/05/2019 - Retro DOS v4.0
  7785                                  
  7786                                  _$SET_INTERRUPT_VECTOR:
  7787 00000E88 E81F00                  	CALL	RECSET
  7788 00000E8B FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7789 00000E8C 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7790 00000E8F 268C5F02                	MOV	[ES:BX+2],DS
  7791 00000E93 FB                      	STI
  7792                                  					; M004, M068 - Start
  7793                                  	; MSDOS 6.0
  7794 00000E94 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7795                                  					; Q: was the previous call an int 21h
  7796                                  					;    exec call
  7797                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7798                                  	;jnz	short siv_1		; Y: go set count
  7799                                  	;retn				; N: return
  7800                                  	; 15/12/2022
  7801 00000E9A 740D                    	jz	short siv_2
  7802                                  siv_1:	
  7803 00000E9C 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7804 00000EA2 7505                    	jnz	short siv_2		 ; N: done
  7805                                  	; 20/09/2023
  7806 00000EA4 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7807                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7808                                  					 ; dispatcher to turn A20 Off before
  7809                                  					 ; returning to user.
  7810                                  siv_2:
  7811                                  	; 07/12/2022
  7812 00000EA9 C3                      	retn				; M004, M068 - End
  7813                                  	
  7814                                  RECSET:
  7815 00000EAA 31DB                    	XOR	BX,BX
  7816 00000EAC 8EC3                    	MOV	ES,BX
  7817 00000EAE 88C3                    	MOV	BL,AL
  7818 00000EB0 D1E3                    	SHL	BX,1
  7819 00000EB2 D1E3                    	SHL	BX,1
  7820 00000EB4 C3                      	retn
  7821                                  
  7822                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7823                                  ;-------------------------------------------------------------------------------------
  7824                                  
  7825                                  ;**	$Char_Oper - Manipulate Switch Character
  7826                                  ;
  7827                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7828                                  ;
  7829                                  ;	ENTRY	AL = function:
  7830                                  ;		    0 - read switch char
  7831                                  ;		    1 - set switch char (char in DL)
  7832                                  ;		    2 - read device availability
  7833                                  ;			Always returns available
  7834                                  ;		    3 - set device availability
  7835                                  ;			No longer supported (NOP)
  7836                                  ;	EXIT	(al) = 0xff iff error
  7837                                  ;		(al) != 0xff if ok
  7838                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7839                                  ;	USES	AL, DL
  7840                                  ;
  7841                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7842                                  ;		The character / is always returned for subfunction 0,
  7843                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7844                                  
  7845                                  ; 13/05/2019 - Retro DOS v4.0
  7846                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7847                                  
  7848                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7849                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7850                                  
  7851                                  _$CHAR_OPER:
  7852                                  	; MSDOS 6.0
  7853 00000EB5 08C0                    	or	al,al				; get switch?
  7854 00000EB7 B22F                    	mov	dl,'/'				; assume yes
  7855 00000EB9 7407                    	jz	short chop_1			; jump if yes
  7856 00000EBB 3C02                    	cmp	al,2				; check device availability?
  7857 00000EBD B2FF                    	mov	dl,-1				; assume yes
  7858 00000EBF 7401                    	jz	short chop_1			; jump if yes
  7859 00000EC1 C3                      	retn					; otherwise just quit
  7860                                  
  7861                                  ; subfunctions requiring return of value to user come here. DL holds
  7862                                  ; value to return
  7863                                  
  7864                                  chop_1:
  7865 00000EC2 E8C0F5                  	call	Get_User_Stack
  7866 00000EC5 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7867 00000EC8 C3                      	retn
  7868                                  
  7869                                  	; MSDOS 3.3
  7870                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7871                                  	;push	ss
  7872                                  	;pop	ds
  7873                                  	;cmp	al,1
  7874                                  	;jb	short chop_1
  7875                                  	;jz	short chop_2
  7876                                  	;cmp	al,3
  7877                                  	;jb	short chop_3
  7878                                  	;jz	short chop_5
  7879                                  	;mov	al,0FFh
  7880                                  	;retn
  7881                                  ;chop_1:
  7882                                  	;mov	dl,[chSwitch]
  7883                                  	;jmp	short chop_4
  7884                                  ;chop_2:
  7885                                  	;mov	[chSwitch],dl
  7886                                  	;retn
  7887                                  ;chop_3:
  7888                                  	;mov	dl, FFh
  7889                                  ;chop_4:
  7890                                  	;call	Get_User_Stack
  7891                                  	;mov	[si+6],dx
  7892                                  ;chop_5:
  7893                                  	;retn
  7894                                  
  7895                                  ;**	$GetExtendedError - Return Extended error code
  7896                                  ;----------------------------------------------------------------------------
  7897                                  ;	This function reads up the extended error info from the static
  7898                                  ;	variables where it was stored.
  7899                                  ;
  7900                                  ;	ENTRY	none
  7901                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7902                                  ;		BL = recommended action
  7903                                  ;		BH = class of error
  7904                                  ;		CH = locus of error
  7905                                  ;		ES:DI = may be pointer
  7906                                  ;	USES	ALL
  7907                                  
  7908                                  	; 09/01/2024
  7909                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7910                                  
  7911                                  _$GetExtendedError:
  7912 00000EC9 16                      	push	ss
  7913 00000ECA 1F                      	pop	ds
  7914 00000ECB A1[2403]                	MOV	AX,[EXTERR]
  7915 00000ECE C43E[2803]              	LES	DI,[EXTERRPT]
  7916 00000ED2 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7917 00000ED6 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7918 00000EDA E8A8F5                  	call	Get_User_Stack
  7919                                  	;mov	[si+0Ah],di
  7920 00000EDD 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7921                                  
  7922                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7923                                  	;;mov	[si+10h],es
  7924                                  	;MOV	[SI+user_env.user_ES],ES
  7925                                  	;;mov	[si+2],bx
  7926                                  	;MOV	[SI+user_env.user_BX],BX
  7927 00000EE0 E89FFF                  	call	set_user_es_bx
  7928                                  
  7929                                  	;mov	[si+4],cx
  7930 00000EE3 894C04                  	MOV	[SI+user_env.user_CX],CX
  7931                                  jmp_SYS_RET_OK:
  7932                                  	; 15/12/2022
  7933                                  	;jmp	SYS_RET_OK
  7934                                  	; 25/06/2019
  7935 00000EE6 E94FF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7936                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7937                                  ;jmp_SYS_RET_OK:
  7938                                  	;jmp	SYS_RET_OK
  7939                                  
  7940                                  ; --------------------------------------------------------------------------
  7941                                  ; 09/01/2024
  7942                                  %if 0
  7943                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7944                                  	; DOSCODE:4CF3h
  7945                                  ;patch_or_unknown:
  7946                                  ;get_code_page:
  7947                                  	push    si
  7948                                  	mov     si, COUNTRY_CDPG
  7949                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7950                                  	mov     ax, [ss:si+6Ah]
  7951                                  	pop     si
  7952                                  	retn
  7953                                  %endif
  7954                                  ; --------------------------------------------------------------------------
  7955                                  
  7956                                  ; 29/04/2019 - Retro DOS v4.0
  7957                                  
  7958                                  ;BREAK	<ECS_call - Extended Code System support function>
  7959                                  ;---------------------------------------------------------------------------
  7960                                  ; Inputs:
  7961                                  ;	AL = 0	get lead byte table
  7962                                  ;		on return DS:SI has the table location
  7963                                  ;
  7964                                  ;	AL = 1	set / reset interim console flag
  7965                                  ;		DL = flag (00H or 01H)
  7966                                  ;		no return
  7967                                  ;
  7968                                  ;	AL = 2	get interim console flag
  7969                                  ;		on return DL = current flag value
  7970                                  ;
  7971                                  ;	AL = OTHER then error, and returns with:
  7972                                  ;		AX = error_invalid_function
  7973                                  ;
  7974                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7975                                  ;	 SS:SP WILL BE PRESERVED!
  7976                                  ;---------------------------------------------------------------------------
  7977                                  
  7978                                  _$ECS_Call:
  7979 00000EE9 08C0                    	or	al,al			; AL = 0 (get table)?
  7980                                  	;jnz	short _okok
  7981                                  	; 15/12/2022
  7982 00000EEB 7403                    	jz	short get_lbt
  7983                                  ;_okok:
  7984 00000EED E945F7                  	jmp	SYS_RET_OK
  7985                                  get_lbt:
  7986 00000EF0 E892F5                  	call	Get_User_Stack		; *
  7987                                  
  7988                                  ;hkn; dbcs_table moved low to dosdata
  7989                                  	;mov	word [si+8],DBCS_TAB+2
  7990 00000EF3 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7991                                  
  7992 00000EF8 06                      	push	es
  7993                                  	;getdseg <es>			; es = DOSDATA
  7994 00000EF9 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7995                                  	;mov	[si+14],es
  7996 00000EFE 8C440E                  	mov	[SI+user_env.user_DS],es
  7997 00000F01 07                      	pop	es
  7998                                  
  7999                                  	; 15/12/2022
  8000 00000F02 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8001                                  ;_okok:
  8002                                  	; 15/12/2022	
  8003                                  	;;transfer SYS_RET_OK
  8004                                  	;jmp	short jmp_SYS_RET_OK
  8005                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8006                                  	;;jmp	SYS_RET_OK
  8007                                  	;jmp	short jmp_SYS_RET_OK
  8008                                  
  8009                                  ;============================================================================
  8010                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8011                                  ;============================================================================
  8012                                  ; 19/07/2018 - Retro DOS v3.0
  8013                                  ; 15/05/2019 - Retro DOS v4.0
  8014                                  
  8015                                  ; System calls for parsing command lines
  8016                                  ;
  8017                                  ;   $PARSE_FILE_DESCRIPTOR
  8018                                  ;
  8019                                  ;   Modification history:
  8020                                  ;
  8021                                  ;       Created: ARR 30 March 1983
  8022                                  ;               EE PathParse 10 Sept 1983
  8023                                  ;
  8024                                  
  8025                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8026                                  ;---------------------------------------------------------------------------
  8027                                  ; Inputs:
  8028                                  ;       DS:SI Points to a command line
  8029                                  ;       ES:DI Points to an empty FCB
  8030                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8031                                  ;                   = 0 Parse stops if separator encountered
  8032                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8033                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8034                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8035                                  ;                   = 0  "       "      "       - put blanks in FCB
  8036                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8037                                  ;                   = 0  "       "      "        - put blanks in FCB
  8038                                  ; Function:
  8039                                  ;       Parse command line into FCB
  8040                                  ; Returns:
  8041                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8042                                  ;       DS:SI points to first character after filename
  8043                                  ;---------------------------------------------------------------------------
  8044                                  
  8045                                  _$PARSE_FILE_DESCRIPTOR:
  8046 00000F04 E8FB3E                  	call	MAKEFCB
  8047 00000F07 56                      	PUSH    SI
  8048 00000F08 E87AF5                  	call	Get_User_Stack
  8049                                  	;pop	word [si+8]
  8050 00000F0B 8F4408                  	POP     word [SI+user_env.user_SI]
  8051 00000F0E C3                      	retn
  8052                                  
  8053                                  ;============================================================================
  8054                                  ; MISC.ASM, MSDOS 6.0, 1991
  8055                                  ;============================================================================
  8056                                  ; 19/07/2018 - Retro DOS v3.0
  8057                                  
  8058                                  ; 29/04/2019 - Retro DOS v4.0
  8059                                  
  8060                                  ;ENTRYPOINTSEG	EQU	0CH
  8061                                  ;MAXDIF		EQU	0FFFH
  8062                                  ;SAVEXIT 	EQU	10
  8063                                  ;WRAPOFFSET	EQU	0FEF0h
  8064                                  
  8065                                  ;
  8066                                  ;----------------------------------------------------------------------------
  8067                                  ;
  8068                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8069                                  ;
  8070                                  ;	Return Stuff sort of like old get fat call
  8071                                  ;
  8072                                  ;	ENTRY	none
  8073                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8074                                  ;			GOD help anyone who tries to do ANYTHING except
  8075                                  ;			READ this ONE byte.
  8076                                  ;		DX = Total Number of allocation units on disk
  8077                                  ;		CX = Sector size
  8078                                  ;		AL = Sectors per allocation unit
  8079                                  ;		   = -1 if bad drive specified
  8080                                  ;	USES	all
  8081                                  ;
  8082                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8083                                  ;
  8084                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8085                                  ;
  8086                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8087                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8088                                  ;			GOD help anyone who tries to do ANYTHING except
  8089                                  ;			READ this ONE byte.
  8090                                  ;		DX = Total Number of allocation units on disk
  8091                                  ;		CX = Sector size
  8092                                  ;		AL = Sectors per allocation unit
  8093                                  ;		   = -1 if bad drive specified
  8094                                  ;	USES	all
  8095                                  ;
  8096                                  ;----------------------------------------------------------------------------
  8097                                  ;
  8098                                  
  8099                                  _$SLEAZEFUNC:
  8100                                  	; 10/01/2024
  8101                                  	; 15/05/2019 - Retro DOS v4.0
  8102 00000F0F B200                    	MOV	DL,0
  8103                                  _$SLEAZEFUNCDL:
  8104 00000F11 16                      	push	ss
  8105 00000F12 1F                      	pop	ds
  8106                                  	
  8107 00000F13 88D0                    	MOV	AL,DL
  8108 00000F15 E83C5A                  	call	GETTHISDRV		; Get CDS structure
  8109                                  SET_AL_RET:
  8110                                  	; MSDOS 3.3
  8111                                  	;;mov	al, 0Fh
  8112                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8113                                  	
  8114                                  	; MSDOS 6.0 & MSDOS 3.3
  8115 00000F18 721D                    	JC	short BADSLDRIVE
  8116                                  
  8117 00000F1A E83F1D                  	call	DISK_INFO
  8118                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8119 00000F1D 7218                    	jc	short BADSLDRIVE
  8120 00000F1F 8826[9805]              	MOV	[FATBYTE],AH
  8121                                  
  8122                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8123                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8124                                  ; CALL AGAIN
  8125                                  
  8126                                  	; 10/01/2024
  8127                                  	;MOV	DI,FATBYTE
  8128 00000F23 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8129 00000F25 E85DF5                  	call	Get_User_Stack
  8130                                  	;mov	[si+4],cx
  8131                                  	;mov	[si+6],bx
  8132                                  	;mov	[si+2],di
  8133 00000F28 894C04                  	MOV	[SI+user_env.user_CX],CX
  8134 00000F2B 895C06                  	MOV	[SI+user_env.user_DX],BX
  8135                                  	;MOV	[SI+user_env.user_BX],DI
  8136                                  	; 10/01/2024
  8137 00000F2E C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8138                                  	
  8139                                  	;mov	[si+0Eh],ss
  8140 00000F33 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8141                                  
  8142 00000F36 C3                      	retn
  8143                                  
  8144                                  BADSLDRIVE:
  8145 00000F37 E91AF7                  	jmp	FCB_RET_ERR
  8146                                  
  8147                                  ;
  8148                                  ;----------------------------------------------------------------------------
  8149                                  ;
  8150                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8151                                  ;
  8152                                  ;	Returns location of DOS status for interrupt routines
  8153                                  ;
  8154                                  ;	ENTRY	none
  8155                                  ;	EXIT	(es:bx) = flag location
  8156                                  ;	USES	all
  8157                                  ;
  8158                                  ;----------------------------------------------------------------------------
  8159                                  ;
  8160                                  
  8161                                  _$GET_INDOS_FLAG:
  8162 00000F3A E848F5                          CALL	Get_User_Stack
  8163                                          ;MOV	WORD [SI+2],INDOS
  8164 00000F3D C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8165                                  getin_segm:	; 13/01/2024
  8166                                  	;MOV	[SI+10H],SS
  8167 00000F42 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8168 00000F45 C3                      	RETN 
  8169                                  ;
  8170                                  ;----------------------------------------------------------------------------
  8171                                  ;
  8172                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8173                                  ;
  8174                                  ;	Return a pointer to interesting DOS variables This call is version
  8175                                  ;	dependent and is subject to change without notice in future versions.
  8176                                  ;	Use at risk.
  8177                                  ;
  8178                                  ;	ENTRY	none
  8179                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8180                                  ;	uses	ALL
  8181                                  ;
  8182                                  ;----------------------------------------------------------------------------
  8183                                  ;
  8184                                  
  8185                                  	; 13/01/2024
  8186                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8187                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8188                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8189                                  
  8190                                  _$GET_IN_VARS:
  8191 00000F46 E83CF5                  	CALL	Get_User_Stack
  8192                                  	;MOV	WORD [SI+2],SYSINITVAR
  8193                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8194 00000F49 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8195                                  	; 13/01/2024
  8196                                  	;;MOV	[SI+10H],SS
  8197                                  	;MOV	[SI+user_env.user_ES],SS
  8198                                  	;RETN
  8199 00000F4E EBF2                    	jmp	short getin_segm
  8200                                  
  8201                                  ;
  8202                                  ;----------------------------------------------------------------------------
  8203                                  ;
  8204                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8205                                  ;
  8206                                  ;	Return pointer to drive parameter table for default drive
  8207                                  ;
  8208                                  ;	ENTRY	none
  8209                                  ;	EXIT	(ds:bx) = DPB address
  8210                                  ;	USES	all
  8211                                  ;
  8212                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8213                                  ;
  8214                                  ;	Return pointer to a specified drive parameter table
  8215                                  ;
  8216                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8217                                  ;	EXIT	(al) = 0 iff ok
  8218                                  ;		  (ds:bx) = DPB address
  8219                                  ;		(al) = -1 if bad drive
  8220                                  ;	USES	all
  8221                                  ;
  8222                                  ;----------------------------------------------------------------------------
  8223                                  ;
  8224                                  
  8225                                  ; 15/05/2019 - Retro DOS v4.0
  8226                                  
  8227                                  _$GET_DEFAULT_DPB:
  8228 00000F50 B200                    	MOV	DL,0
  8229                                  _$GET_DPB:
  8230 00000F52 16                      	push	ss
  8231 00000F53 1F                      	pop	ds
  8232                                  
  8233 00000F54 88D0                    	MOV	AL,DL
  8234 00000F56 E8FB59                  	call	GETTHISDRV		; Get CDS structure
  8235 00000F59 7222                    	JC	short ISNODRV 		; no valid drive
  8236 00000F5B C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8237                                  	;;test	word [es:di+43h],8000h
  8238                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8239                                  	;test	byte [es:di+44h],80h
  8240 00000F5F 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8241 00000F64 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8242 00000F66 E88903                  	call	ECritDisk
  8243 00000F69 E85146                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8244 00000F6C E89E03                  	call	LCritDisk
  8245 00000F6F 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8246                                  					;   have.
  8247 00000F71 E811F5                  	call	Get_User_Stack
  8248                                  	;mov	[si+2],bp
  8249 00000F74 896C02                  	MOV	[SI+user_env.user_BX],BP
  8250                                  	;mov	[si+0Eh],es
  8251 00000F77 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8252 00000F7A 30C0                    	XOR	AL,AL
  8253 00000F7C C3                      	retn
  8254                                  ISNODRV:
  8255 00000F7D B0FF                    	MOV	AL,-1
  8256 00000F7F C3                      	retn
  8257                                  
  8258                                  ;
  8259                                  ;----------------------------------------------------------------------------
  8260                                  ;
  8261                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8262                                  ;
  8263                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8264                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8265                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8266                                  ;
  8267                                  ;	ENTRY	none
  8268                                  ;	EXIT	none
  8269                                  ;	USES	all
  8270                                  ;
  8271                                  ;----------------------------------------------------------------------------
  8272                                  ;
  8273                                  
  8274                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8275                                  	; DOSCODE:4D94h
  8276                                  _$DISK_RESET:
  8277                                  	; 15/05/2019 - Retro DOS v4.0
  8278 00000F80 B0FF                    	mov	al,0FFh	; -1
  8279 00000F82 16                      	push	ss
  8280 00000F83 1F                      	pop	ds
  8281                                  	; 06/11/2022
  8282                                  	;MOV	AL,-1
  8283 00000F84 E86B03                  	call	ECritDisk
  8284                                  	; MSDOS 6.0
  8285                                  	;;or	word [DOS34_FLAG],4
  8286                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8287 00000F87 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8288 00000F8C E8A149                  	call	FLUSHBUF
  8289                                  	; MSDOS 6.0
  8290                                  	;and	word [DOS34_FLAG],0FFFBh
  8291                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8292                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8293                                  	; 15/12/2022
  8294 00000F8F 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8295 00000F94 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8296                                  ;
  8297                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8298                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8299                                  ; let's do it.
  8300                                  ;
  8301                                  ; Invalidate 'last-buffer' used
  8302                                  ;
  8303 00000F9A BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8304 00000F9D 891E[2000]              	MOV	[LastBuffer+2],BX
  8305 00000FA1 891E[1E00]              	MOV	[LastBuffer],BX
  8306                                  
  8307                                  	; MSDOS 3.3 
  8308                                  	; IBMDOS.COM, Offset 1C66h
  8309                                  	;;;;
  8310                                  	;lds	si,[BUFFHEAD]
  8311                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8312                                  				; .buf_flags, AH = 0, reset/clear
  8313                                  ;DRST_1:
  8314                                  	;;mov	[si+4],ax
  8315                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8316                                  	;lds	si,[SI]
  8317                                  	;cmp	si,bx ; -1
  8318                                  	;je	short DRST_2
  8319                                  	;;mov	[si+4],ax
  8320                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8321                                  	;lds	si,[SI]
  8322                                  	;cmp	si,bx
  8323                                  	;jne	short DRST_1
  8324                                  	;;;;
  8325                                  ;DRST_2:
  8326 00000FA5 E86503                  	call	LCritDisk
  8327 00000FA8 B8FFFF                  	MOV	AX,-1
  8328                                  	; 07/12/2022
  8329                                  	;mov	ax,0FFFFh
  8330                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8331 00000FAB 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8332 00000FAC B82011                  	mov     ax,1120h
  8333 00000FAF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8334                                  			; DS = DOS CS
  8335                                  			; Return: CF clear (successful)
  8336 00000FB1 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8337                                  	
  8338 00000FB2 C3                      	retn
  8339                                  
  8340                                  	; 19/07/2018 - Retro DOS v3.0
  8341                                  
  8342                                  ;
  8343                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8344                                  ;
  8345                                  ;----------------------------------------------------------------------------
  8346                                  ;
  8347                                  ;**	$SetDPB - Create a DPB
  8348                                  ;
  8349                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8350                                  ;
  8351                                  ;	ENTRY	ES:BP Points to DPB
  8352                                  ;		DS:SI Points to BPB
  8353                                  ;	EXIT	DPB setup
  8354                                  ;	USES	ALL but BP, DS, ES
  8355                                  ;
  8356                                  ;----------------------------------------------------------------------------
  8357                                  ;
  8358                                  
  8359                                  ; 10/05/2019 - Retro DOS v4.0
  8360                                  
  8361                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8362                                  
  8363                                  ; MSDOS 6.0
  8364 00000FB3 0300                    word3:	dw	3			; M008 -- word value for divides
  8365                                  
  8366                                  ; 13/01/2024
  8367                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8368                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8369                                  
  8370                                  ;procedure   $SETDPB,NEAR
  8371                                  
  8372                                  _$SETDPB:
  8373 00000FB5 89EF                    	MOV	DI,BP
  8374                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8375                                  	; 13/01/2024
  8376 00000FB7 47                      	inc	di
  8377 00000FB8 47                      	inc	di
  8378 00000FB9 AD                      	LODSW
  8379 00000FBA AB                      	STOSW				; dpb_sector_size
  8380                                  	; MSDOS 6.0
  8381                                  	;cmp	byte [si+3],0
  8382 00000FBB 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8383 00000FBF 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8384                                  	;mov	byte [es:di+4],0
  8385 00000FC1 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8386                                  	; 13/01/2024
  8387 00000FC6 89C3                    	mov	bx,ax
  8388 00000FC8 EB70                    	JMP	short setend			     ; NO		;AN000;
  8389                                  
  8390                                  yesfat: ; 10/08/2018
  8391 00000FCA 89C2                    	MOV	DX,AX
  8392 00000FCC AC                      	LODSB
  8393                                  	;DEC	AL
  8394                                  	; 17/12/2022
  8395 00000FCD 48                      	dec	ax
  8396 00000FCE AA                      	STOSB				; dpb_cluster_mask
  8397                                  	;INC	AL
  8398 00000FCF 40                      	inc	ax
  8399 00000FD0 30E4                    	XOR	AH,AH
  8400                                  LOG2LOOP:
  8401 00000FD2 A801                    	test	AL,1
  8402 00000FD4 7506                    	JNZ	short SAVLOG
  8403 00000FD6 FEC4                    	INC	AH
  8404 00000FD8 D0E8                    	SHR	AL,1
  8405 00000FDA EBF6                    	JMP	SHORT LOG2LOOP
  8406                                  SAVLOG:
  8407 00000FDC 88E0                    	MOV	AL,AH
  8408 00000FDE AA                      	STOSB				; dpb_cluster_shift
  8409 00000FDF 88C3                    	MOV	BL,AL
  8410 00000FE1 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8411 00000FE2 AC                      	LODSB
  8412 00000FE3 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8413                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8414                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8415 00000FE4 88C7                    	MOV	BH,AL
  8416 00000FE6 AD                      	LODSW
  8417 00000FE7 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8418 00000FE8 B105                    	MOV	CL,5
  8419 00000FEA D3EA                    	SHR	DX,CL			; Directory entries per sector
  8420 00000FEC 48                      	DEC	AX
  8421 00000FED 01D0                    	ADD	AX,DX			; Cause Round Up
  8422 00000FEF 89D1                    	MOV	CX,DX
  8423 00000FF1 31D2                    	XOR	DX,DX
  8424 00000FF3 F7F1                    	DIV	CX
  8425 00000FF5 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8426 00000FF7 47                      	INC	DI
  8427 00000FF8 47                      	INC	DI			; Skip dpb_first_sector
  8428 00000FF9 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8429 00000FFA AC                      	LODSB
  8430                                  	;mov	[es:bp+17h],al
  8431 00000FFB 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8432 00000FFF AD                      	LODSW				; Number of sectors in a FAT
  8433                                  	
  8434                                  	;;;
  8435                                  	;MSDOS 3.3
  8436                                  	;
  8437                                  	;STOSB		; DPB.FAT_SIZE
  8438                                  	;MUL	BH
  8439                                  	
  8440                                  	;MSDOS 6.0
  8441                                  	;
  8442 00001000 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8443 00001001 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8444 00001003 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8445 00001005 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8446                                  	;;;
  8447                                  	
  8448                                  	;add	ax,[es:bp+6]
  8449 00001007 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8450 0000100B AB                      	STOSW				; dpb_dir_sector
  8451 0000100C 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8452                                  	;mov	[es:bp+0Bh],ax
  8453 0000100E 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8454                                  	
  8455                                  	; MSDOS 6.0
  8456 00001012 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8457                                  	;;cmp	word [es:bp+0Dh],0
  8458                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8459                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8460                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8461                                  	; 15/12/2022
  8462                                  	; 28/07/2019
  8463 00001014 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8464 00001018 09DB                    	or	bx,bx
  8465 0000101A 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8466                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8467                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8468                                  	
  8469                                  
  8470 0000101C 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8471                                  	;mov	bx,[si+8]
  8472 0000101E 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8473                                  	;mov	dx,[si+10]
  8474 00001021 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8475 00001024 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8476 00001026 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8477 00001029 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8478 0000102B 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8479                                  rott:					;AN000;;F.C. >32mb
  8480 0000102D F8                      	CLC				;AN000;;F.C. >32mb
  8481 0000102E D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8482 00001030 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8483 00001032 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8484                                  norot:					;AN000;
  8485                                  	; 15/12/2022
  8486                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8487 00001034 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8488                                  normal_dpb:
  8489                                  	;;sub	ax,[es:bp+0Dh]
  8490                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8491                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8492                                  	; 15/12/2022
  8493                                  	; bx = [es:bp+DSKSIZ]
  8494                                  	;sub	ax,bx ; 28/07/2019
  8495                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8496                                  	; 15/12/2022
  8497 00001036 29C3                    	sub	bx,ax
  8498                                  	;NEG	AX			; Sectors in data area
  8499                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8500                                  	; 15/12/2022
  8501                                  	; CL = cluster shift
  8502                                  	; BX = number of data sectors 
  8503                                  	;SHR	AX,CL			; Div by sectors/cluster
  8504 00001038 D3EB                    	shr	bx,cl 
  8505                                  setend:
  8506                                  ;	M008 - CAS
  8507                                  ;
  8508                                  	; 15/12/2022
  8509 0000103A 43                      	inc	bx
  8510                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8511                                  ;
  8512                                  ;	There has been a bug in our fatsize calculation for so long
  8513                                  ;	  that we can't correct it now without causing some user to
  8514                                  ;	  experience data loss. There are even cases where allowing
  8515                                  ;	  the number of clusters to exceed the fats is the optimal
  8516                                  ;	  case -- where adding 2 more fat sectors would make the
  8517                                  ;	  data field smaller so that there's nothing to use the extra
  8518                                  ;	  fat sectors for.
  8519                                  ;
  8520                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8521                                  ;	  still report that there was a cluster left when the disk was
  8522                                  ;	  actually full. Very graceful failure for a corrupt system
  8523                                  ;	  configuration. There may be worse cases that were never
  8524                                  ;	  properly traced back to this bug. The problem cases only
  8525                                  ;	  occurred when partition sizes were very near FAT sector
  8526                                  ;	  rounding boundaries, which were rare cases.
  8527                                  ;
  8528                                  ;	Also, it's possible that some third-party partition program might
  8529                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8530                                  ;	  scheme. In this hypothetical case, the number of allocation
  8531                                  ;	  clusters which don't actually have FAT entries to represent
  8532                                  ;	  them might be larger and might create a more catastrophic
  8533                                  ;	  failure. So we'll provide the safeguard of limiting the
  8534                                  ;	  max_cluster to the amount that will fit in the FATs.
  8535                                  ;
  8536                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8537                                  
  8538                                  ;	make sure the number of fat sectors is actually enough to
  8539                                  ;	  hold that many clusters. otherwise, back the number of
  8540                                  ;	  clusters down
  8541                                  
  8542                                  	; 15/12/2022
  8543                                  	; bx = number of clusters
  8544                                  
  8545                                  	; 19/07/2018 - Retro DOS v3.0
  8546                                  	; MSDOS 6.0
  8547                                  	; 15/12/2022
  8548                                  	;mov	bx,ax			; remember calculated # clusters
  8549                                  
  8550                                  	; 01/08/2018 (MSDOS 3.3)
  8551                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8552                                  	;xor	ah,ah 
  8553                                  
  8554                                  	; 10/05/2019 - Retro DOS v4.0
  8555                                  	;mov	ax,[ES:BP+0Fh]
  8556 0000103B 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8557                                  
  8558                                  	;mul	word [es:bp+2]	
  8559 0000103F 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8560 00001043 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8561 00001047 720D                    	jb	short setend_fat12
  8562 00001049 D1EA                    	shr	dx,1
  8563                                  
  8564                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8565                                  	; 15/12/2022
  8566                                  ;cs3 7/2/92
  8567 0000104B 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8568                                  					; than enough for the maximum FAT,
  8569                                  					; so go ahead and use the calculated
  8570                                  					; number of clusters.
  8571                                  ;cs3 7/2/92
  8572                                  
  8573 0000104D D1D8                    	rcr	ax,1			; find number of entries
  8574 0000104F 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8575                                  ;					;  into 12-bit fatland?
  8576 00001052 7215                    	jb	short setend_faterr	; then go ahead and let the
  8577                                  ;					;  inconsistency pass through
  8578                                  ;					;  rather than lose data by
  8579                                  ;					;  correcting the fat type
  8580 00001054 EB0E                    	jmp	short setend_fat16
  8581                                  
  8582                                  setend_fat12:
  8583 00001056 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8584 00001058 11D2                    	adc	dx,dx
  8585                                  
  8586                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8587                                  ;cs3 7/2/92
  8588                                  	; 15/12/2022
  8589 0000105A 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8590 0000105D 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8591                                  					; here. Check for it and use
  8592                                  					; the calculated size in this case.
  8593                                  ;cs3 7/2/92
  8594                                  
  8595 0000105F 2EF736[B30F]            	div	word [cs:word3]
  8596                                  
  8597                                  setend_fat16:
  8598 00001064 48                      	dec	ax			; limit at 1
  8599 00001065 39D8                    	cmp	ax,bx			; is fat big enough?
  8600 00001067 7602                    	jbe	short setend_fat	; use max value that'll fit
  8601                                  
  8602                                  setend_faterr:
  8603 00001069 89D8                    	mov	ax,bx			; use calculated value
  8604                                  
  8605                                  setend_fat:
  8606                                  
  8607                                  ;	now ax = maximum legal cluster
  8608                                  
  8609                                  ;	end M008
  8610                                  
  8611                                  	;mov	[es:bp+0Dh], ax
  8612 0000106B 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8613                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8614                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8615 0000106F 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8616                                  					; Init so first ALLOC starts at
  8617                                  					; begining of FAT
  8618                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8619                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8620 00001075 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8621                                  
  8622 0000107B C3                      	retn
  8623                                  
  8624                                  ;EndProc $SETDPB
  8625                                  
  8626                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8627                                  
  8628                                  ;
  8629                                  ;----------------------------------------------------------------------------
  8630                                  ;
  8631                                  ;**	$Dup_PDB
  8632                                  ;
  8633                                  ; Inputs:   DX is new segment address of process
  8634                                  ;	    SI is end of new allocation block
  8635                                  ;
  8636                                  ;----------------------------------------------------------------------------
  8637                                  ;
  8638                                  
  8639                                  _$DUP_PDB:
  8640                                  
  8641                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8642                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8643                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8644                                  
  8645                                  	; MSDOS 3.3
  8646                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8647                                  	;MOV	DS,[CS:CurrentPDB]
  8648                                  
  8649                                  	; 15/05/2019 - Retro DOS v4.0
  8650                                  	; MSDOS 6.0
  8651 0000107C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8652 00001081 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8653 00001086 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8654                                  
  8655 0000108A 56                      	PUSH	SI
  8656 0000108B EB0A                    	JMP	SHORT CreateCopy
  8657                                  
  8658                                  ;
  8659                                  ;----------------------------------------------------------------------------
  8660                                  ;
  8661                                  ; Inputs:
  8662                                  ;	DX = Segment number of new base
  8663                                  ; Function:
  8664                                  ;	Set up program base and copy term and ^C from int area
  8665                                  ; Returns:
  8666                                  ;	None
  8667                                  ; Called at DOS init
  8668                                  ;
  8669                                  ;----------------------------------------------------------------------------
  8670                                  ;
  8671                                  
  8672                                  ; 15/05/2019 - Retro DOS v4.0
  8673                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8674                                  
  8675                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8676                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8677                                  
  8678                                  _$CREATE_PROCESS_DATA_BLOCK:
  8679                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8680 0000108D E8F5F3                  	CALL	Get_User_Stack
  8681                                  	;mov	ds,[si+14h]
  8682 00001090 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8683                                  	;push	word [2]
  8684 00001093 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8685                                  CreateCopy:
  8686 00001097 8EC2                    	MOV	ES,DX
  8687                                  
  8688 00001099 31F6                    	XOR	SI,SI			; copy entire PDB
  8689 0000109B 89F7                    	MOV	DI,SI
  8690 0000109D B98000                  	MOV	CX,128
  8691 000010A0 F3A5                    	REP	MOVSW
  8692                                  
  8693                                  ; DOS 3.3 7/9/86
  8694                                  	;mov	cx,20
  8695                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8696                                  	; 15/12/2022
  8697 000010A2 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8698                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8699                                  	;mov	cx,FILPERPROC
  8700                                  
  8701                                  	;mov	di,18h
  8702 000010A4 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8703                                  	;;PUSH	DS ; * 15/05/2019
  8704                                  	;;lds	si,[34h]
  8705                                  	;LDS	SI,[PDB.JFN_Pointer]
  8706                                  	;REP	MOVSB
  8707                                  	;;POP	DS ; * 15/05/2019
  8708                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8709                                  	; 05/12/2022
  8710                                  	; (push ds then pop ds is not needed here!)
  8711                                  	;push	ds
  8712                                  	;lds	si,[34h]
  8713 000010A7 C5363400                	lds	si,[PDB.JFN_Pointer]
  8714 000010AB F3A4                    	rep	movsb
  8715                                  	;pop	ds
  8716                                  
  8717                                  ; DOS 3.3 7/9/86
  8718                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8719                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8720                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8721                                  
  8722 000010AD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8723                                  
  8724                                  	;;test	byte [cs:CreatePDB],0FFh
  8725                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8726                                  	; 17/12/2022
  8727 000010B2 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8728                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8729 000010B6 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8730                                  
  8731                                  ; Here we set up for a new process...
  8732                                  
  8733                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8734                                  	;POP	DS
  8735                                  
  8736                                  	; MSDOS 6.0
  8737                                  	;;getdseg <ds>			; ds -> dosdata
  8738                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8739                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8740                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8741                                  	; 15/12/2022
  8742                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8743                                  
  8744 000010B8 31DB                    	XOR	BX,BX			; dup all jfns
  8745                                  	;mov	cx,20
  8746                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8747                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8748                                  	; 15/12/2022
  8749 000010BA B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8750                                  
  8751                                  Create_dup_jfn:
  8752 000010BC 06                      	PUSH	ES ;**			; save new PDB
  8753 000010BD E88254                  	call	SFFromHandle		; get sf pointer
  8754 000010C0 B0FF                    	MOV	AL,-1			; unassigned JFN
  8755 000010C2 7224                    	JC	short CreateStash	; file was not really open
  8756                                  	;;test	word [es:di+5],1000h
  8757                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8758                                  	; 15/05/2019
  8759                                  	;test	byte [es:di+6],10h
  8760 000010C4 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8761 000010C9 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8762                                  
  8763                                  ; We do not inherit network file handles.
  8764                                  
  8765                                  	;mov	ah,[es:di+2]
  8766 000010CB 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8767                                  	;and	ah,0F0h
  8768 000010CF 80E4F0                  	AND	AH,SHARING_MASK
  8769                                  	;cmp	ah,70h
  8770 000010D2 80FC70                  	CMP	AH,SHARING_NET_FCB
  8771 000010D5 7411                    	jz	short CreateStash
  8772                                  
  8773                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8774                                  ; duplication operation.
  8775                                  
  8776 000010D7 893E[9E05]              	MOV	[THISSFT],DI
  8777 000010DB 8C06[A005]              	MOV	[THISSFT+2],ES
  8778 000010DF E8D618                  	call	DOS_DUP 		; signal duplication
  8779                                  
  8780                                  ; get the old sfn for copy
  8781                                  
  8782 000010E2 E84054                  	call	pJFNFromHandle		; ES:DI is jfn
  8783 000010E5 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8784                                  
  8785                                  ; Take AL (old sfn or -1) and stash it into the new position
  8786                                  
  8787                                  CreateStash:
  8788 000010E8 07                      	POP	ES ;**
  8789                                  	;mov	[es:bx+18h],al
  8790 000010E9 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8791 000010ED 43                      	INC	BX			; next jfn...
  8792 000010EE E2CC                    	LOOP	Create_dup_jfn
  8793                                  
  8794 000010F0 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8795                                  	; 06/11/2022
  8796                                  	;mov	[es:16h],bx
  8797 000010F4 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8798 000010F9 8C06[3003]              	MOV	[CurrentPDB],ES
  8799                                  	;MOV	DS,BX ; 28/07/2019
  8800                                  	; 07/12/2022
  8801                                  	;mov	ds,[cs:DosDSeg]
  8802                                  	; 15/12/2022
  8803                                  	; ds = [cs:DosDSeg]
  8804 000010FD C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8805                                  	;mov	ds,bx
  8806                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8807                                  	; 15/12/2022
  8808                                  	;mov	ds,bx
  8809                                  
  8810                                  ; end of new process create
  8811                                  
  8812                                  Create_PDB_cont:
  8813                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8814                                  
  8815                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8816                                  
  8817                                  	;; 28/07/2019
  8818                                  	;;push	ds
  8819                                  	;;mov	ds,[cs:DosDSeg]
  8820                                  	;mov	byte [CreatePDB],0
  8821                                  	;;pop	ds
  8822                                  
  8823                                  ; 05/12/2022
  8824                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8825                                  ;	; (push-pop ds is nonsense here! 
  8826                                  ;	;  but i am using same code with original MSDOS.SYS
  8827                                  ;	;  for address compatibility.)
  8828                                  ;	push	ds
  8829                                  ;	; ds = [cs:DosDSeg] !
  8830                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8831                                  ;	mov	byte [CreatePDB],0
  8832                                  ;	pop	ds
  8833                                  
  8834 00001102 58                      	POP	AX ;*
  8835                                  
  8836                                  	;entry	SETMEM
  8837                                  
  8838                                  	; 17/12/2022
  8839                                  	; cx = 0
  8840                                  
  8841                                  ;---------------------------------------------------------------------------
  8842                                  ; Inputs:
  8843                                  ;	AX = Size of memory in paragraphs
  8844                                  ;	DX = Segment
  8845                                  ; Function:
  8846                                  ;	Completely prepares a program base at the
  8847                                  ;	specified segment.
  8848                                  ; Called at DOS init
  8849                                  ; Outputs:
  8850                                  ;	DS = DX
  8851                                  ;	ES = DX
  8852                                  ;	[0] has INT int_abort
  8853                                  ;	[2] = First unavailable segment
  8854                                  ;	[5] to [9] form a long call to the entry point
  8855                                  ;	[10] to [13] have exit address (from int_terminate)
  8856                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8857                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8858                                  ; DX,BP unchanged. All other registers destroyed.
  8859                                  ;---------------------------------------------------------------------------
  8860                                  
  8861                                  SETMEM:
  8862                                  	;XOR	CX,CX
  8863                                  	; 17/12/2022
  8864                                  	; cx = 0
  8865 00001103 8ED9                    	MOV	DS,CX
  8866 00001105 8EC2                    	MOV	ES,DX
  8867                                  	;mov	si,88h
  8868 00001107 BE8800                  	MOV	SI,addr_int_terminate
  8869                                  	;mov	di,10 ; 0Ah
  8870 0000110A BF0A00                  	MOV	DI,SAVEXIT
  8871                                  	;MOV	CX,6
  8872                                  	; 15/12/2022
  8873 0000110D B106                    	mov	cl,6
  8874 0000110F F3A5                    	REP	MOVSW
  8875 00001111 26A30200                	MOV	[ES:2],AX
  8876 00001115 29D0                    	SUB	AX,DX
  8877 00001117 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8878 0000111A 7603                    	JBE	short HAVDIF
  8879 0000111C B8FF0F                  	MOV	AX,MAXDIF
  8880                                  HAVDIF:
  8881 0000111F 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8882 00001122 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8883 00001125 29C3                    	SUB	BX,AX
  8884 00001127 B104                    	MOV	CL,4
  8885 00001129 D3E0                    	SHL	AX,CL
  8886 0000112B 8EDA                    	MOV	DS,DX
  8887                                  
  8888                                  	; (MSDOS 6.0 note)
  8889                                  	;
  8890                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8891                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8892                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8893                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8894                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8895                                  	; making this equvalence valid for this particular case. If however
  8896                                  	; there is less than 64K remaining the address in BX:AX will not 
  8897                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8898                                  	; into the PSP.
  8899                                  	;
  8900                                  	; Therefore for the case where there is less than 64K remaining in 
  8901                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8902                                  	; requirements will not work. Call 5, however will continue to work
  8903                                  	; for all cases.
  8904                                  	;
  8905                                  
  8906                                  	;mov	[6],ax
  8907                                  	;mov	[8],bx
  8908                                  
  8909 0000112D A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8910 00001130 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8911                                  
  8912                                  	; 06/05/2019 - Retro DOS v4.0
  8913 00001134 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8914                                  					;    memory left
  8915 00001137 740C                    	je	short addr_ok		; Y: the above calculated address is
  8916                                  					;    OK
  8917                                  					; N: 
  8918                                  
  8919 00001139 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8920 0000113F C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8921                                  addr_ok:
  8922                                  	;mov	word [0],20CDh
  8923 00001145 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8924                                  	;mov	byte [5],9Ah
  8925 0000114B C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8926                                  	;mov	word [50h],21CDh
  8927 00001150 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8928                                  	;mov	byte [52h],0CBh
  8929 00001156 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8930                                  	;mov	word [34h],18h
  8931 0000115B C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8932                                  	;mov	word [36h],ds
  8933 00001161 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8934                                  	;mov	word [32h],20
  8935 00001165 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8936                                  ;
  8937                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8938                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8939                                  ; particular SFT.  We perform this by requiring that the server link together
  8940                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8941                                  ; initialize this pointer.
  8942                                  ;
  8943                                   	;mov	word [38h],-1
  8944 0000116B C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8945                                  	;mov	word [3Ah],-1
  8946 00001171 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8947                                  
  8948                                  	; 06/05/2019
  8949                                  	; Set the real version number in the PSP - 5.00
  8950                                  
  8951                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8952                                  	; 07/12/2022
  8953 00001177 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8954                                  
  8955 0000117E C3                      	retn
  8956                                  
  8957                                  ; 29/04/2019 - Retro DOS v4.0
  8958                                  
  8959                                  ;BREAK <$GSetMediaID -- get set media ID>
  8960                                  
  8961                                  ;---------------------------------------------------------------------------
  8962                                  ; Inputs:
  8963                                  ;	BL= drive number as defined in IOCTL
  8964                                  ;	AL= 0 get media ID
  8965                                  ;	    1 set media ID
  8966                                  ;	DS:DX= buffer containing information
  8967                                  ;		DW  0  info level (set on input)
  8968                                  ;		DD  ?  serial #
  8969                                  ;		DB  11 dup(?)  volume id
  8970                                  ;		DB   8 dup(?)  file system type
  8971                                  ; Function:
  8972                                  ;	Get or set media ID
  8973                                  ; Returns:
  8974                                  ;	carry clear, DS:DX is filled
  8975                                  ;	carry set, error
  8976                                  ;---------------------------------------------------------------------------
  8977                                  
  8978                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8979                                  _$GSetMediaID:
  8980                                  	; RAWIO - GET_MEDIA_ID
  8981 0000117F B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8982 00001182 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8983 00001184 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8984                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8985                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8986                                  	; 15/12/2022
  8987 00001186 FEC8                    	dec	al
  8988 00001188 7507                    	jnz	short errorfunc ; al > 1
  8989                                  	; RAWIO - SET_MEDIA_ID
  8990                                  	;mov	cx,0846h	      ;AN001;MS.;
  8991                                  	; 15/12/2022
  8992 0000118A B146                    	mov	cl,46h	; cx = 0846h 
  8993                                  doioctl:			      ;AN000;
  8994 0000118C B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8995                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8996                                  	;call	_$IOCTL
  8997                                  	;retn			      ;AN000;MS.;
  8998                                  	; 15/12/2022
  8999 0000118E E98C10                  	jmp	_$IOCTL
  9000                                  errorfunc:			      ;AN000;
  9001                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9002                                  	;mov	al,1
  9003 00001191 B001                    	mov	al,error_invalid_function
  9004 00001193 E9A8F4                  	jmp	SYS_RET_ERR
  9005                                  
  9006                                  ; 16/05/2019 - Retro DOS v4.0
  9007                                  
  9008                                  ;============================================================================
  9009                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9010                                  ;============================================================================
  9011                                  ; 20/07/2018 - Retro DOS v3.0
  9012                                  ; 29/04/2019 - Retro DOS v4.0
  9013                                  
  9014                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9015                                  ;----------------------------------------------------------------------------
  9016                                  ;
  9017                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9018                                  ;	     Strings of different lengths don't match.
  9019                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9020                                  ;   Outputs: Z if strings same, NZ if different
  9021                                  ;   Registers modified: NONE
  9022                                  ;----------------------------------------------------------------------------
  9023                                  
  9024                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9025                                  StrCmp:
  9026 00001196 56                      	push	si
  9027 00001197 57                      	push	di
  9028 00001198 50                      	push	ax
  9029                                  Cmplp:
  9030 00001199 AC                      	LODSB
  9031 0000119A E8983D                  	call	UCase			; convert to upper case
  9032 0000119D E8EA3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9033 000011A0 88C4                    	MOV	AH,AL
  9034 000011A2 268A05                  	MOV	AL,[ES:DI]
  9035 000011A5 47                      	INC	DI
  9036 000011A6 E88C3D                  	call	UCase			; convert to upper case
  9037 000011A9 E8DE3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9038 000011AC 38C4                    	CMP	AH,AL
  9039 000011AE 7504                    	JNZ	short PopRet		; Strings dif
  9040                                  
  9041 000011B0 08C0                    	OR	AL,AL
  9042 000011B2 75E5                    	JNZ	short Cmplp		; More string
  9043                                  PopRet:
  9044 000011B4 58                      	pop	ax
  9045 000011B5 5F                      	pop	di
  9046 000011B6 5E                      	pop	si
  9047 000011B7 C3                      	retn
  9048                                  
  9049                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9050                                  ;----------------------------------------------------------------------------
  9051                                  ;
  9052                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9053                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9054                                  ;	characters.
  9055                                  ;
  9056                                  ;   Inputs:	DS:SI - pointer to source string
  9057                                  ;		ES:DI - pointer to destination string
  9058                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9059                                  ;		DS:SI point byte after nul byte at end of source string
  9060                                  ;   Registers modified: SI,DI
  9061                                  ;----------------------------------------------------------------------------
  9062                                  
  9063                                  StrCpy:
  9064 000011B8 50                      	push	ax
  9065                                  CPYLoop:
  9066 000011B9 AC                      	LODSB
  9067 000011BA E8783D                  	call	UCase			; convert to upper case
  9068 000011BD E8CA3D                  	call	PATHCHRCMP		; convert / to \ ;
  9069 000011C0 AA                      	STOSB
  9070                                  
  9071 000011C1 08C0                    	OR	AL,AL
  9072 000011C3 75F4                    	JNZ	short CPYLoop
  9073 000011C5 58                      	pop	ax
  9074 000011C6 C3                      	retn
  9075                                  
  9076                                  ;----------------------------------------------------------------------------
  9077                                  ; Procedure Name : FStrCpy
  9078                                  ;----------------------------------------------------------------------------
  9079                                  
  9080                                  FStrCpy:
  9081 000011C7 50                      	push	ax
  9082                                  FCPYLoop:
  9083 000011C8 AC                      	LODSB
  9084 000011C9 AA                      	STOSB
  9085 000011CA 08C0                    	OR	AL,AL
  9086 000011CC 75FA                    	JNZ	short FCPYLoop
  9087 000011CE 58                      	pop	ax
  9088 000011CF C3                      	retn
  9089                                  
  9090                                  ; 20/07/2018 - Retro DOS v3.0
  9091                                  ;----------------------------------------------------------------------------
  9092                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9093                                  ;----------------------------------------------------------------------------
  9094                                  ;
  9095                                  ;UCase:	
  9096                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9097                                  ;	retn
  9098                                  
  9099                                  ;Break <StrLen - compute length of string ES:DI>
  9100                                  ;----------------------------------------------------------------------------
  9101                                  ;**	StrLen - Compute Length of String
  9102                                  ;
  9103                                  ;	StrLen computes the length of a string, including the trailing 00
  9104                                  ;
  9105                                  ;	ENTRY	(es:di) = address of string
  9106                                  ;	EXIT	(cx) = size of string
  9107                                  ;	USES	cx, flags
  9108                                  ;----------------------------------------------------------------------------
  9109                                  
  9110                                  StrLen:
  9111 000011D0 57                      	push	di
  9112 000011D1 50                      	push	ax
  9113                                  	;MOV	CX,-1
  9114 000011D2 B9FFFF                  	mov	cx,65535
  9115 000011D5 30C0                    	XOR	AL,AL
  9116 000011D7 F2AE                    	REPNE	SCASB
  9117 000011D9 F7D1                    	NOT	CX
  9118 000011DB 58                      	pop	ax
  9119 000011DC 5F                      	pop	di
  9120 000011DD C3                      	retn
  9121                                  
  9122                                  ;----------------------------------------------------------------------------
  9123                                  ;**	DStrLen - Compute Length of String
  9124                                  ;
  9125                                  ;	ENTRY	(ds:si) = address of string
  9126                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9127                                  ;	USES	cx, flags
  9128                                  ;----------------------------------------------------------------------------
  9129                                  
  9130                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9131 000011DE E80300                  	CALL	XCHGP
  9132 000011E1 E8ECFF                  	CALL	StrLen
  9133                                  	;CALL	XCHGP
  9134                                  	;retn
  9135                                  	; 18/12/2022
  9136                                  	;jmp	short XCHGP
  9137                                  
  9138                                  ;----------------------------------------------------------------------------
  9139                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9140                                  ;
  9141                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9142                                  ;
  9143                                  ;	ENTRY	none
  9144                                  ;	EXIT	pairs exchanged
  9145                                  ;	USES	SI, DI, DS, ES
  9146                                  ;----------------------------------------------------------------------------
  9147                                  
  9148                                  XCHGP:
  9149 000011E4 1E                      	push	ds
  9150 000011E5 06                      	push	es
  9151 000011E6 1F                      	pop	ds
  9152 000011E7 07                      	pop	es
  9153 000011E8 87F7                    	XCHG	SI,DI
  9154                                  xchgp_retn:
  9155 000011EA C3                      	retn
  9156                                  
  9157                                  ;Break	<Idle - wait for a specified amount of time>
  9158                                  ;----------------------------------------------------------------------------
  9159                                  ;
  9160                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9161                                  ;   	   we spin until RetryLoop is exhausted.
  9162                                  ;
  9163                                  ;   Inputs:	RetryLoop is the number of times we spin
  9164                                  ;   Outputs:	Wait
  9165                                  ;   Registers modified: none
  9166                                  ;----------------------------------------------------------------------------
  9167                                  
  9168                                  Idle:
  9169                                  	;test	byte [SS:FSHARING],0FFh
  9170 000011EB 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9171                                  	;retnz
  9172 000011F1 75F7                    	jnz	short xchgp_retn
  9173                                  	;SAVE	<CX>
  9174 000011F3 51                      	push	cx
  9175 000011F4 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9176 000011F9 E308                    	JCXZ	Idle3
  9177                                  Idle1:	
  9178 000011FB 51                      	PUSH	CX
  9179 000011FC 31C9                    	XOR	CX,CX
  9180                                  Idle2:	
  9181 000011FE E2FE                    	LOOP	Idle2
  9182 00001200 59                      	POP	CX
  9183 00001201 E2F8                    	LOOP	Idle1
  9184                                  Idle3:	
  9185                                  	;RESTORE <CX>
  9186 00001203 59                      	pop	cx
  9187 00001204 C3                      	retn
  9188                                  
  9189                                  ;Break	<TableDispatch - dispatch to a table>
  9190                                  ;----------------------------------------------------------------------------
  9191                                  ;
  9192                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9193                                  ;   routine. Preserve all input registers to the routine.
  9194                                  ;
  9195                                  ;   Inputs:	Push	return address
  9196                                  ;		Push	Table address
  9197                                  ;		Push	index (byte)
  9198                                  ;   Outputs:	appropriate routine gets jumped to.
  9199                                  ;		return indicates invalid index
  9200                                  ;   Registers modified: none.
  9201                                  ;----------------------------------------------------------------------------
  9202                                  
  9203                                  struc TFrame	 ; TableFrame
  9204 00000000 ????                    .OldBP:	 resw 1  ; 0
  9205 00000002 ????                    .OldRet: resw 1  ; 2
  9206 00000004 ??                      .Index:	 resb 1  ; 4
  9207 00000005 ??                      .Pad:	 resb 1  ; 5  
  9208 00000006 ????                    .Tab:	 resw 1  ; 6
  9209 00000008 ????                    .NewRet: resw 1  ; 8
  9210                                  endstruc
  9211                                  
  9212                                  TableDispatch:
  9213 00001205 55                      	PUSH	BP
  9214 00001206 89E5                    	MOV	BP,SP
  9215 00001208 53                      	PUSH	BX			; save BX
  9216                                  	;mov	bx,[bp+6]
  9217 00001209 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9218 0000120C 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9219                                  	;cmp	[bp+4],bl
  9220 0000120F 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9221 00001212 7317                    	JAE	short TableError	; yes
  9222                                  	;mov	bl,[bp+4]
  9223 00001214 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9224 00001217 30FF                    	XOR	BH,BH			; convert to word
  9225 00001219 D1E3                    	SHL	BX,1			; convert to word pointer
  9226 0000121B 43                      	INC	BX			; point past first length byte
  9227                                  	; 17/08/2018
  9228                                  	;add	bx,[bp+6]
  9229 0000121C 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9230 0000121F 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9231                                  	;mov	[bp+6],bx
  9232 00001222 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9233 00001225 5B                      	POP	BX			; restore BX
  9234 00001226 5D                      	POP	BP			; restore BP
  9235 00001227 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9236 0000122A C3                      	retn				; do operation
  9237                                  TableError:
  9238 0000122B 5B                      	POP	BX			; restore BX
  9239 0000122C 5D                      	POP	BP			; restore BP
  9240 0000122D C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9241                                  
  9242                                  ;Break	<TestNet - determine if a CDS is for the network>
  9243                                  ;----------------------------------------------------------------------------
  9244                                  ;
  9245                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9246                                  ;	network CDS. This will handle NULL cds also.
  9247                                  ;
  9248                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9249                                  ;   Outputs:	ES:DI = ThisCDS
  9250                                  ;		carry Set => network
  9251                                  ;		carry Clear => local
  9252                                  ;   Registers modified: none.
  9253                                  ;----------------------------------------------------------------------------
  9254                                  
  9255                                  TestNet:
  9256                                  	;LES	DI,[CS:THISCDS]
  9257                                  
  9258                                  	; 16/05/2019 - Retro DOS v4.0
  9259 00001230 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9260 00001235 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9261 0000123A 83FFFF                  	CMP	DI,-1
  9262 0000123D 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9263                                  	;;test	word [es:di+43h],8000h
  9264                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9265                                  	;test	byte [es:di+44h],80h
  9266 0000123F 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9267 00001244 7501                    	JNZ	short CMCRet		; jump has carry clear
  9268 00001246 C3                      	retn				; carry is clear
  9269                                  CMCRet: 
  9270 00001247 F5                      	CMC
  9271 00001248 C3                      	retn
  9272                                  
  9273                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9274                                  ;----------------------------------------------------------------------------
  9275                                  ;
  9276                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9277                                  ;	network file.
  9278                                  ;
  9279                                  ;   Inputs:	ES:DI point to SFT
  9280                                  ;   Outputs:	Zero set if not network sft
  9281                                  ;		zero reset otherwise
  9282                                  ;		Carry CLEAR!!!
  9283                                  ;   Registers modified: none.
  9284                                  ;----------------------------------------------------------------------------
  9285                                  
  9286                                  IsSFTNet:
  9287                                  	;;test	word [es:di+5],8000h
  9288                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9289                                  	; 16/05/2019 
  9290                                  	;test	byte [es:di+6],80h
  9291 00001249 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9292 0000124E C3                      	retn
  9293                                  
  9294                                  ;Break	<FastInit - Initialize FastTable entries >
  9295                                  ;----------------------------------------------------------------------------
  9296                                  ;   DOS 4.00   2/9/87
  9297                                  ;   FastInit  - initialize the FASTXXX routine entry
  9298                                  ;		  in the FastTable
  9299                                  ;
  9300                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9301                                  ;		DS:SI = address of FASTXXX routine entry
  9302                                  ;		   SI = -1 for query only
  9303                                  ;   Outputs:	Carry flag clear, if success
  9304                                  ;		Carry flag set,   if failure
  9305                                  ;
  9306                                  ;
  9307                                  ;----------------------------------------------------------------------------
  9308                                  
  9309                                  ;Procedure FastInit,NEAR
  9310                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9311                                  
  9312                                  ;	; MSDOS 3.3
  9313                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9314                                  ;FastInit:
  9315                                  ;	mov	di,FastTable ; FastOpenTable
  9316                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9317                                  ;	mov	bx,cs			; get DOS segment
  9318                                  ;	cmp	ax,bx			; first time installed ?	
  9319                                  ;	je	short ok_install	; yes
  9320                                  ;	stc				; set carry
  9321                                  ;	retn				; (cf=1 means) already installed !
  9322                                  ;
  9323                                  ;ok_install:
  9324                                  ;	mov	bx,FastTable ; FastOpenTable
  9325                                  ;	mov	cx,ds
  9326                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9327                                  ;	mov	[cs:bx+4],cx
  9328                                  ;	mov	[cs:bx+2],si
  9329                                  ;	retn
  9330                                  
  9331                                  ; 16/05/2019 - Retro DOS v4.0
  9332                                  
  9333                                  FastInit:
  9334                                  	; MSDOS 6.0
  9335                                  	;hkn; set up es to dosdataseg.
  9336 0000124F 06                      	push	es
  9337                                  	;getdseg <es>			; es -> dosdata
  9338 00001250 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9339                                  
  9340                                  	;hkn; FastTable is in DOSDATA
  9341 00001255 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9342 00001258 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9343 00001259 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9344 0000125B D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9345 0000125D D1E3                    	SHL	BX,1			;AN000;FO.
  9346 0000125F 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9347 00001261 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9348                                  fcheck: 				;AN000;
  9349 00001265 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9350 00001267 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9351 00001269 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9352 0000126B 09C0                    	OR	AX,AX			;AN000;FO.;
  9353                                  	;JZ	short ok_install	;AN000;FO.;
  9354                                  	;STC				;AN000;FO.;; already installed !
  9355                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9356                                  	; 14/01/2024
  9357 0000126D F9                      	stc
  9358 0000126E 7517                    	jnz	short FSret
  9359                                  ok_install:				;AN000;
  9360 00001270 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9361 00001273 7412                    	JZ	short FSret		;AN000;FO.; yes
  9362 00001275 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9363 00001277 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9364 0000127B 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9365                                  
  9366                                  ;hkn; FastFlg moved to DOSDATA
  9367 0000127E BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9368 00001281 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9369                                  	;or	byte [es:di],80h
  9370 00001283 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9371                                  FSret:					;AN000;
  9372 00001287 07                      	pop	es
  9373 00001288 C3                      	retn				;AN000;FO.
  9374                                  
  9375                                  ;EndProc FastInit
  9376                                  
  9377                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9378                                  ;----------------------------------------------------------------------------
  9379                                  ;   DOS 3.3   6/10/86
  9380                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9381                                  ;
  9382                                  ;   Inputs:	None
  9383                                  ;   Outputs:	AX = -1 and carry flag set
  9384                                  ;
  9385                                  ;   Registers modified: none.
  9386                                  ;----------------------------------------------------------------------------
  9387                                  
  9388                                  FastRet:
  9389                                  	;mov	ax,-1
  9390                                  	;stc
  9391                                  	;retf
  9392 00001289 F9                      	STC
  9393 0000128A 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9394 0000128C CB                      	RETF
  9395                                  
  9396                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9397                                  ;----------------------------------------------------------------------------
  9398                                  ;   DOS 3.3   6/10/86
  9399                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9400                                  ;
  9401                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9402                                  ;   Outputs:	same output as $OPEN
  9403                                  ;
  9404                                  ;----------------------------------------------------------------------------
  9405                                  
  9406                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9407                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9408                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9409                                  
  9410                                  NLS_OPEN:
  9411                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9412                                  ;	MOV	BYTE [CPSWFLAG],0
  9413                                  ;	PUSH	BX		 ; save current state
  9414                                  
  9415 0000128D 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9416 0000128F E8085B                  	call	_$OPEN
  9417                                  
  9418                                  ;	POP	BX		 ; restore current state
  9419                                  ;	MOV	[CPSWFLAG],BL
  9420                                  	
  9421 00001292 C3                      	RETN
  9422                                  
  9423                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9424                                  ;----------------------------------------------------------------------------
  9425                                  ;   DOS 3.3   6/10/86
  9426                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9427                                  ;
  9428                                  ;   Inputs:	BP = open mode
  9429                                  ;   Outputs:	same output as $LSEEK
  9430                                  ;
  9431                                  ;----------------------------------------------------------------------------
  9432                                  
  9433                                  ; 16/05/2019 - Retro DOS v4.0
  9434                                  
  9435                                  NLS_LSEEK:
  9436 00001293 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9437 00001298 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9438 0000129D E81000                  	CALL	Fake_User_Stack
  9439 000012A0 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9440 000012A2 E8A254                  	call	_$LSEEK
  9441 000012A5 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9442 000012AA 368F06[8405]            	POP	word [SS:USER_SP]
  9443 000012AF C3                      	RETN
  9444                                  
  9445                                  ;Break	<Fake_User_Stack - save user stack>
  9446                                  ;----------------------------------------------------------------------------
  9447                                  ;   DOS 3.3   6/10/86
  9448                                  ;   Fake_User_Stack - save user stack pointer
  9449                                  ;
  9450                                  ;----------------------------------------------------------------------------
  9451                                  
  9452                                  Fake_User_Stack:
  9453 000012B0 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9454 000012B4 36A3[8405]              	MOV	[SS:USER_SP],AX
  9455 000012B8 8CD0                    	MOV	AX,SS
  9456 000012BA 36A3[8605]              	MOV	[SS:USER_SS],AX
  9457 000012BE C3                      	RETN
  9458                                  
  9459                                  ;Break	<GetDevList - get device header list pointer>
  9460                                  ;----------------------------------------------------------------------------
  9461                                  ;   DOS 3.3   7/25/86
  9462                                  ;   GetDevList - get device header list pointer
  9463                                  ;
  9464                                  ;   Output: AX:BX points to the device header list
  9465                                  ;----------------------------------------------------------------------------
  9466                                  
  9467                                  GetDevList:
  9468                                  	; 16/05/2019 - Retro DOS v4.0
  9469 000012BF BE[280D]                	MOV	SI,SysInitTable
  9470 000012C2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9471 000012C7 C534                    	LDS	SI,[SI]
  9472                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9473 000012C9 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9474                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9475 000012CC 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9476 000012CF C3                      	RETN
  9477                                  
  9478                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9479                                  ;----------------------------------------------------------------------------
  9480                                  ;   DOS 3.3   7/25/86
  9481                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9482                                  ;
  9483                                  ;   Inputs:	BP = function code 0CH
  9484                                  ;   Outputs:	same output as generic $IOCTL
  9485                                  ;
  9486                                  ;----------------------------------------------------------------------------
  9487                                  
  9488                                  NLS_IOCTL:
  9489                                  	; 16/05/2019 - Retro DOS v4.0
  9490 000012D0 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9491 000012D5 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9492 000012DA E8D3FF                  	CALL	Fake_User_Stack
  9493 000012DD 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9494 000012DF E83B0F                  	call	_$IOCTL
  9495 000012E2 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9496 000012E7 368F06[8405]            	POP	word [SS:USER_SP]
  9497 000012EC C3                      	RETN
  9498                                  
  9499                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9500                                  ;----------------------------------------------------------------------------
  9501                                  ;   DOS 3.3   7/25/86
  9502                                  ;   NLS_GETEXT	-
  9503                                  ;
  9504                                  ;   Inputs:	none
  9505                                  ;   Outputs:	AX = extended error
  9506                                  ;
  9507                                  ;----------------------------------------------------------------------------
  9508                                  
  9509                                  NLS_GETEXT:
  9510                                  	; 16/05/2019 - Retro DOS v4.0
  9511 000012ED 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9512                                  	; 23/09/2023
  9513                                  MSG_RETRIEVAL:
  9514 000012F1 C3                      	RETN
  9515                                  
  9516                                  ; 29/04/2019 - Retro DOS v4.0
  9517                                  
  9518                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9519                                  
  9520                                  ;----------------------------------------------------------------------------
  9521                                  ;   DOS 4.00
  9522                                  ;
  9523                                  ;   Inputs:	DL=0 get extended error message addr
  9524                                  ;		  =1 set extended error message addr
  9525                                  ;		  =2 get parser error message addr
  9526                                  ;		  =3 set parser error message addr
  9527                                  ;		  =4 get critical error message addr
  9528                                  ;		  =5 set critical error message addr
  9529                                  ;		  =6 get file system error message addr
  9530                                  ;		  =7 set file system error message addr
  9531                                  ;		  =8 get address for code reduction
  9532                                  ;		  =9 set address for code reduction
  9533                                  ;   Function:	get/set message address
  9534                                  ;   Outputs:	ES:DI points to addr when get
  9535                                  ;----------------------------------------------------------------------------
  9536                                  
  9537                                  ;Procedure MSG_RETRIEVAL,NEAR
  9538                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9539                                  
  9540                                  ; 23/09/2023
  9541                                  ;MSG_RETRIEVAL:
  9542                                  
  9543                                  ;;	NOTE:  This function lives in command.com resident code now.
  9544                                  ;;	If the int 2F ever gets this far, we'll return registers
  9545                                  ;;	unchanged, which produces the same result as before, if
  9546                                  ;;	command.com wasn't present (and therefore no messages available).
  9547                                  ;;
  9548                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9549                                  ;;	No_Op zeroes AL.
  9550                                  ;;
  9551                                  ;;;hkn; set up ds to point to DOSDATA
  9552                                  ;;	push	ds
  9553                                  ;;	getdseg	<ds>			; ds -> dosdata
  9554                                  ;;
  9555                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9556                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9557                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9558                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9559                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9560                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9561                                  ;;	DEC	AL		    ;AN000;;MS.
  9562                                  ;;toget:				    ;AN000;
  9563                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9564                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9565                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9566                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9567                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9568                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9569                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9570                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9571                                  ;;getget: 				     ;AN000;
  9572                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9573                                  ;;MSGret: 				     ;AN000;
  9574                                  ;;	POP	SI			     ;AN000;;MS.
  9575                                  ;;	POP	AX			     ;AN000;;MS.
  9576                                  ;;
  9577                                  ;;	pop	ds
  9578                                  
  9579                                  ;	return				     ;AN000;;MS. exit
  9580                                  
  9581                                  ; 23/09/2023
  9582                                  ;	retn	; 29/04/2019
  9583                                  
  9584                                  ;============================================================================
  9585                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9586                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9587                                  ;============================================================================
  9588                                  ; 20/07/2018 - Retro DOS v3.0
  9589                                  
  9590                                  ;	; MSDOS 3.3
  9591                                  ;	; 08/08/2018 - Retro DOS v3.0
  9592                                  ;ECritMEM:
  9593                                  ;ECritSFT:
  9594                                  ;	;
  9595                                  ;ECritDisk:
  9596                                  ;	retn
  9597                                  ;	;push	ax
  9598                                  ;	
  9599                                  ;	mov	ax,8001h
  9600                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9601                                  ;			; AL = critical section number (00h-0Fh)
  9602                                  ;	pop	ax
  9603                                  ;	retn
  9604                                  ;
  9605                                  ;	; MSDOS 3.3
  9606                                  ;	; 08/08/2018 - Retro DOS v3.0
  9607                                  ;LCritMEM:
  9608                                  ;LCritSFT:
  9609                                  ;	;
  9610                                  ;LCritDisk:
  9611                                  ;	retn
  9612                                  ;	;push	ax
  9613                                  ;	
  9614                                  ;	mov	ax,8101h
  9615                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9616                                  ;			; AL = critical section number (00h-0Fh)
  9617                                  ;	pop	ax
  9618                                  ;	retn
  9619                                  ;
  9620                                  ;ECritDevice:
  9621                                  ;	retn
  9622                                  ;	;push	ax
  9623                                  ;	
  9624                                  ;	mov	ax,8002h
  9625                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9626                                  ;			; AL = critical section number (00h-0Fh)
  9627                                  ;	pop	ax
  9628                                  ;	retn
  9629                                  ;
  9630                                  ;LCritDevice:
  9631                                  ;	retn
  9632                                  ;	;push	ax
  9633                                  ;	
  9634                                  ;	mov	ax,8102h
  9635                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9636                                  ;			; AL = critical section number (00h-0Fh)
  9637                                  ;	pop	ax
  9638                                  ;	retn
  9639                                  
  9640                                  ;============================================================================
  9641                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9642                                  ;============================================================================
  9643                                  ; 12/05/2019 - Retro DOS v4.0
  9644                                  
  9645                                  ; Critical Section Routines
  9646                                  
  9647                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9648                                  
  9649                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9650                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9651                                  
  9652                                  ; ---------------------------------------------------------------------------
  9653                                  ; Each handler must leave everything untouched; including flags!
  9654                                  ;
  9655                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9656                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9657                                  ; ---------------------------------------------------------------------------
  9658                                  
  9659                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9660                                  ; ---------------------------------------------------------------------------
  9661                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9662                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9663                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9664                                  ; ---------------------------------------------------------------------------
  9665                                  
  9666                                  ;%macro POPFF 0
  9667                                  ;	jmp	$+3
  9668                                  ;	iret
  9669                                  ;	push	cs
  9670                                  ;	call	$-2
  9671                                  ;%endmacro
  9672                                  
  9673                                  ; ---------------------------
  9674                                  
  9675                                  ;Procedure  ECritDisk,NEAR
  9676                                  	;public  ECritMEM
  9677                                  	;public  ECritSFT
  9678                                  ECritMEM:
  9679                                  ECritSFT:
  9680                                  ;
  9681                                  ECritDisk:
  9682                                  
  9683                                  ;SR; Check if critical section is to be entered
  9684                                  
  9685 000012F2 9C                      	pushf
  9686 000012F3 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9687 000012F9 740D                    	jz	short ECritDisk_2
  9688                                  
  9689                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9690                                  ;	;popff  ; * (macro)
  9691                                  ;	jmp	short ECritDisk_1 ; *
  9692                                  ;
  9693                                  ;ECritDisk_iret: ; *
  9694                                  ;	iret ; *
  9695                                  
  9696                                  	; 16/12/2022
  9697                                  	; 13/11/2022
  9698                                  	;jmp	short ECritDisk_1
  9699                                  	; 06/11/2022
  9700                                  ;ECritDisk_iret:
  9701                                  ;	iret	
  9702                                  
  9703                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9704                                  ECritDisk_1:
  9705 000012FB 0E                      	push	cs ; *
  9706 000012FC E80800                  	call	ECritDisk_iret ; *		
  9707                                  	
  9708                                  ECritDisk_0:
  9709 000012FF 50                      	PUSH    AX
  9710                                  	;MOV	AX,8000h+critDisk
  9711                                  	;INT	int_IBM
  9712 00001300 B80180                  	mov	ax,8001h
  9713 00001303 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9714                                  			; AL = critical section number (00h-0Fh)
  9715 00001305 58                      	POP     AX
  9716 00001306 C3                      	retn
  9717                                  
  9718                                  	; 16/12/2022
  9719                                  	; 13/11/2022
  9720                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9721                                  LCritDisk_iret: 
  9722 00001307 CF                      	iret
  9723                                  
  9724                                  ECritDisk_2:
  9725                                  	;;popff ; *
  9726                                  	;;retn
  9727                                  ;	jmp	short ECritDisk_3 ; *
  9728                                  ;ECritDisk_iret2: ; *
  9729                                  ;	iret
  9730                                  	
  9731                                  	; 16/12/2022
  9732                                  	; 13/11/2022
  9733                                  	;jmp	short ECritDisk_3
  9734                                  ;ECritDisk_iret2:
  9735                                  	;iret
  9736                                  
  9737                                  ECritDisk_3:
  9738 00001308 0E                      	push    cs ; *
  9739                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9740                                  	;call	ECritDisk_iret2 ; *
  9741                                  	;retn
  9742                                  	; 16/12/2022
  9743 00001309 E8FBFF                  	call	ECritDisk_iret
  9744 0000130C C3                      	retn
  9745                                  
  9746                                  ;EndProc ECritDisk
  9747                                  
  9748                                  ; ---------------------------
  9749                                  
  9750                                  ;Procedure   LCritDisk,NEAR
  9751                                  	;public  LCritMEM
  9752                                  	;public  LCritSFT
  9753                                  LCritMEM:
  9754                                  LCritSFT:
  9755                                  ;
  9756                                  LCritDisk:
  9757                                  
  9758                                  ;SR; Check if critical section is to be entered
  9759                                  
  9760 0000130D 9C                      	pushf
  9761 0000130E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9762 00001314 740C                    	jz	short LCritDisk_2
  9763                                  	;popff  ; * (macro)
  9764                                  ;	jmp	short LCritDisk_1 ; *
  9765                                  ;
  9766                                  ;LCritDisk_iret: ; *
  9767                                  ;	iret ; *
  9768                                  
  9769                                  	; 16/12/2022
  9770                                  	; 13/11/2022
  9771                                  	;jmp	short LCritDisk_1
  9772                                  ;LCritDisk_iret:
  9773                                  	;iret
  9774                                  
  9775                                  LCritDisk_1:
  9776 00001316 0E                      	push	cs ; *
  9777 00001317 E8EDFF                  	call	LCritDisk_iret ; *		
  9778                                  	
  9779                                  LCritDisk_0:
  9780 0000131A 50                      	PUSH	AX
  9781                                  	;MOV	AX,8100h+critDisk
  9782                                  	;INT	int_IBM
  9783 0000131B B80181                  	mov	ax,8101h
  9784 0000131E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9785                                  			; AL = critical section number (00h-0Fh)
  9786 00001320 58                      	POP	AX
  9787 00001321 C3                      	retn
  9788                                  
  9789                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9790                                  ;	iret
  9791                                  
  9792                                  LCritDisk_2:
  9793                                  	;;popff ; *
  9794                                  	;;retn
  9795                                  ;	jmp	short LCritDisk_3 ; *
  9796                                  ;LCritDisk_iret2: ; *
  9797                                  ;	iret
  9798                                  
  9799                                  	; 16/12/2022
  9800                                  	; 13/11/2022
  9801                                  	;jmp	short LCritDisk_3
  9802                                  ;LCritDisk_iret2:
  9803                                  	;iret
  9804                                  
  9805                                  LCritDisk_3:
  9806 00001322 0E                      	push    cs ; *
  9807                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9808                                  	;call	LCritDisk_iret2 ; *
  9809                                  	;retn
  9810                                  	; 16/12/2022
  9811 00001323 E8E1FF                  	call	LCritDisk_iret
  9812 00001326 C3                      	retn
  9813                                  
  9814                                  ;EndProc LCritDisk
  9815                                  
  9816                                  ; ---------------------------
  9817                                  
  9818                                  ;Procedure   ECritDevice,NEAR
  9819                                  
  9820                                  ECritDevice:
  9821                                  
  9822                                  ;SR; Check if critical section is to be entered
  9823                                  
  9824 00001327 9C                      	pushf
  9825 00001328 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9826 0000132E 740D                    	jz	short ECritDevice_2
  9827                                  	;popff  ; * (macro)
  9828                                  ;	jmp	short ECritDevice_1 ; *
  9829                                  ;
  9830                                  ;ECritDevice_iret: ; *
  9831                                  ;	iret ; *
  9832                                  
  9833                                  	; 16/12/2022	
  9834                                  	; 13/11/2022
  9835                                  	;jmp	short ECritDevice_1
  9836                                  ;ECritDevice_iret:
  9837                                  	;iret
  9838                                  
  9839                                  ECritDevice_1:
  9840 00001330 0E                      	push	cs ; *
  9841 00001331 E80800                  	call	ECritDevice_iret ; *		
  9842                                  	
  9843                                  ECritDevice_0:
  9844 00001334 50                      	PUSH	AX
  9845                                  	;MOV	AX,8000h+critDevice
  9846                                  	;INT	int_IBM
  9847 00001335 B80280                  	mov	ax,8002h
  9848 00001338 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9849                                  			; AL = critical section number (00h-0Fh)
  9850 0000133A 58                      	POP     AX
  9851 0000133B C3                      	retn
  9852                                  
  9853                                  	; 16/12/2022
  9854                                  	; 06/12/2022
  9855                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9856                                  LCritDevice_iret: 
  9857 0000133C CF                      	iret
  9858                                  
  9859                                  ECritDevice_2:
  9860                                  	;;popff ; *
  9861                                  	;;retn
  9862                                  ;	jmp	short ECritDevice_3 ; *
  9863                                  ;ECritDevice_iret2: ; *
  9864                                  ;	iret
  9865                                  
  9866                                  	; 16/12/2022
  9867                                  	; 13/11/2022
  9868                                  	;jmp	short ECritDevice_3
  9869                                  ;ECritDevice_iret2:
  9870                                  	;iret
  9871                                  
  9872                                  ECritDevice_3:
  9873 0000133D 0E                      	push    cs ; *
  9874                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9875                                  	;call	ECritDevice_iret2 ; *
  9876                                  	;retn
  9877                                  	; 16/12/2022
  9878 0000133E E8FBFF                  	call	ECritDevice_iret
  9879 00001341 C3                      	retn
  9880                                  
  9881                                  ;EndProc ECritDevice
  9882                                  
  9883                                  ; ---------------------------
  9884                                  
  9885                                  ;Procedure   LCritDevice,NEAR
  9886                                  
  9887                                  LCritDevice:
  9888                                  
  9889                                  ;SR; Check if critical section is to be entered
  9890                                  
  9891 00001342 9C                      	pushf
  9892 00001343 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9893 00001349 740C                    	jz	short LCritDevice_2
  9894                                  	;popff  ; * (macro)
  9895                                  ;	jmp	short LCritDevice_1 ; *
  9896                                  ;
  9897                                  ;LCritDevice_iret: ; *
  9898                                  ;	iret ; *
  9899                                  
  9900                                  	; 16/12/2022
  9901                                  	; 13/11/2022
  9902                                  	;jmp	short LCritDevice_1
  9903                                  ;LCritDevice_iret:
  9904                                  	;iret
  9905                                  
  9906                                  LCritDevice_1:
  9907 0000134B 0E                      	push	cs ; *
  9908 0000134C E8EDFF                  	call	LCritDevice_iret ; *		
  9909                                  	
  9910                                  LCritDevice_0:
  9911 0000134F 50                      	PUSH	AX
  9912                                  	;MOV	AX,8100h+critDevice
  9913                                  	;INT	int_IBM
  9914 00001350 B80281                  	mov	ax,8102h
  9915 00001353 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9916                                  			; AL = critical section number (00h-0Fh)
  9917 00001355 58                      	POP     AX
  9918 00001356 C3                      	retn
  9919                                  
  9920                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9921                                  ;	iret
  9922                                  
  9923                                  LCritDevice_2:
  9924                                  	;;popff ; *
  9925                                  	;;retn
  9926                                  ;	jmp	short LCritDevice_3 ; *
  9927                                  ;LCritDevice_iret2: ; *
  9928                                  ;	iret
  9929                                  
  9930                                  	; 16/12/2022
  9931                                  	; 13/11/2022
  9932                                  	;jmp	short LCritDevice_3
  9933                                  ;LCritDevice_iret2:
  9934                                  	;iret
  9935                                  
  9936                                  LCritDevice_3:
  9937 00001357 0E                      	push    cs ; *
  9938                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9939                                  	;call	LCritDevice_iret2 ; *
  9940                                  	;retn
  9941                                  	; 16/12/2022
  9942 00001358 E8E1FF                  	call	LCritDevice_iret
  9943 0000135B C3                      	retn
  9944                                  
  9945                                  ;EndProc LCritDevice
  9946                                  
  9947                                  ;============================================================================
  9948                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9949                                  ;============================================================================
  9950                                  ; 20/07/2018 - Retro DOS v3.0
  9951                                  
  9952                                  ;============================================================================
  9953                                  ; STDIO.ASM - (MSDOS 2.0)
  9954                                  ;============================================================================
  9955                                  
  9956                                  ;
  9957                                  ; Standard device IO for MSDOS (first 12 function calls)
  9958                                  ;
  9959                                  
  9960                                  ;.xlist
  9961                                  ;.xcref
  9962                                  ;INCLUDE STDSW.ASM
  9963                                  ;INCLUDE DOSSEG.ASM
  9964                                  ;.cref
  9965                                  ;.list
  9966                                  
  9967                                  ;TITLE   STDIO - device IO for MSDOS
  9968                                  ;NAME    STDIO
  9969                                  
  9970                                  ;INCLUDE IO.ASM
  9971                                  
  9972                                  ; ---------------------------------------------------------------------------
  9973                                  ;
  9974                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9975                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9976                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9977                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9978                                  ;			    to restore MSDOS 2.0 device IO source code 
  9979                                  ;
  9980                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9981                                  	
  9982                                  ;============================================================================
  9983                                  ; STDIO.ASM - (MSDOS 2.0)
  9984                                  ;============================================================================
  9985                                  
  9986                                  ;
  9987                                  ; Standard device IO for MSDOS (first 12 function calls)
  9988                                  ;
  9989                                  
  9990                                  ;.xlist
  9991                                  ;.xcref
  9992                                  ;INCLUDE STDSW.ASM
  9993                                  ;INCLUDE DOSSEG.ASM
  9994                                  ;.cref
  9995                                  ;.list
  9996                                  
  9997                                  ;TITLE   STDIO - device IO for MSDOS
  9998                                  ;NAME    STDIO
  9999                                  
 10000                                  ;INCLUDE IO.ASM
 10001                                  
 10002                                  ; ---------------------------------------------------------------------------
 10003                                  ;
 10004                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10005                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10006                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10007                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10008                                  ;			    to restore MSDOS 2.0 device IO source code 
 10009                                  ;
 10010                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10011                                  ;
 10012                                  ;============================================================================
 10013                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10014                                  ;============================================================================
 10015                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10016                                  
 10017                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10018                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10019                                  
 10020                                  ;============================================================================
 10021                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10022                                  ;============================================================================
 10023                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10024                                  
 10025                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10026                                  
 10027                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10028                                  ;
 10029                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10030                                  ;	NAME	IBMCPMIO
 10031                                  
 10032                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10033                                  ;
 10034                                  ;	$Std_Con_Input_No_Echo
 10035                                  ;	$Std_Con_String_Output
 10036                                  ;	$Std_Con_String_Input
 10037                                  ;	$RawConIO
 10038                                  ;	$RawConInput
 10039                                  ;	RAWOUT
 10040                                  ;	RAWOUT2
 10041                                  ;
 10042                                  
 10043                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10044                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10045                                  ; references to be SS or CS relative which is desired.
 10046                                  
 10047                                  ; ---------------------------------------------------------------------------
 10048                                  
 10049                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10050                                  ;	NAME	CPMIO2
 10051                                  
 10052                                  ;
 10053                                  ;	Microsoft Confidential
 10054                                  ;	Copyright (C) Microsoft Corporation 1991
 10055                                  ;	All Rights Reserved.
 10056                                  ;
 10057                                  
 10058                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10059                                  ;
 10060                                  ;	$Std_Con_Input
 10061                                  ;	$Std_Con_Output
 10062                                  ;	OUTT
 10063                                  ;	TAB
 10064                                  ;	BUFOUT
 10065                                  ;	$Std_Aux_Input
 10066                                  ;	$Std_Aux_Output
 10067                                  ;	$Std_Printer_Output
 10068                                  ;	$Std_Con_Input_Status
 10069                                  ;	$Std_Con_Input_Flush
 10070                                  ;
 10071                                  ;	Revision History:
 10072                                  ;
 10073                                  ;	  AN000	 version 4.00 - Jan. 1988
 10074                                  
 10075                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10076                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10077                                  ; references to be SS or CS relative which is desired.
 10078                                  
 10079                                  ;DOSCODE SEGMENT
 10080                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10081                                  
 10082                                  
 10083                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10084                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10085                                  ;hkn;	not valid. 
 10086                                  
 10087                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10088                                  ; 08/11/2022
 10089                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10090                                  
 10091                                  ;
 10092                                  ;----------------------------------------------------------------------------
 10093                                  ;
 10094                                  ; Procedure : $Std_Con_Input_No_Echo
 10095                                  ;
 10096                                  ;----------------------------------------------------------------------------
 10097                                  ;
 10098                                  
 10099                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10100                                  
 10101                                  ; Inputs:
 10102                                  ;	None
 10103                                  ; Function:
 10104                                  ;	Input character from console, no echo
 10105                                  ; Returns:
 10106                                  ;	AL = character
 10107                                  
 10108 0000135C 1E                      	push	ds
 10109 0000135D 56                      	push	si
 10110                                  INTEST:
 10111 0000135E E8F13C                  	call	STATCHK
 10112 00001361 753B                    	jnz	short GET ; 08/09/2018
 10113                                  ;*************************************************************************
 10114                                  ;hkn; SS override
 10115 00001363 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10116 00001369 7505                    	jnz	short no_sys_wait
 10117 0000136B B405                    	mov	ah,5			; get input status with system wait
 10118 0000136D E82930                  	call	IOFUNC
 10119                                  no_sys_wait:
 10120                                  ;**************************************************************************
 10121 00001370 B484                    	MOV	AH,84h
 10122 00001372 CD2A                    	INT	int_IBM	 ; int 2Ah
 10123                                  
 10124                                  ;;; 7/15/86  update the date in the idle loop
 10125                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10126                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10127                                  
 10128                                  ;hkn; SS override
 10129 00001374 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10130 0000137A 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10131                                  
 10132 0000137C 50                      	PUSH	AX
 10133 0000137D 53                      	PUSH	BX			; following is tricky,
 10134 0000137E 51                      	PUSH	CX			; it may be called by critical handler
 10135 0000137F 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10136                                  					; other's READ or WRITE
 10137 00001380 1E                      	PUSH	DS			; save DS = SFT's segment
 10138                                  
 10139                                  ;hkn; READTIME must use ds = DOSDATA
 10140                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10141                                  
 10142 00001381 16                      	PUSH	SS ; 04/05/2019
 10143 00001382 1F                      	POP	DS
 10144                                  
 10145 00001383 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10146 00001386 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10147                                  	;invoke	READTIME		; readtime
 10148 00001389 E883F7                  	call	READTIME
 10149 0000138C B80100                  	MOV	AX,1
 10150 0000138F E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10151                                  
 10152                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10153                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10154                                  ;	push	bx
 10155                                  ;	mov	bx,DATE_FLAG
 10156                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10157                                  ;	cmp	word [cs:bx],5872h
 10158                                  ;	jz	short FETCHI_TAG_chk_ok
 10159                                  ;	call	DOSINIT
 10160                                  ;FETCHI_TAG_chk_ok:
 10161                                  ;	pop	bx
 10162                                  
 10163 00001392 1F                      	POP	DS			; restore DS
 10164 00001393 5A                      	POP	DX
 10165 00001394 59                      	POP	CX
 10166 00001395 5B                      	POP	BX
 10167 00001396 58                      	POP	AX
 10168                                  NoUpdate:
 10169                                  
 10170                                  ;hkn; SS override
 10171 00001397 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10172                                  
 10173                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10174 0000139C EBC0                    	JMP	short INTEST
 10175                                  GET:
 10176 0000139E 30E4                    	XOR	AH,AH
 10177 000013A0 E8F62F                  	call	IOFUNC
 10178 000013A3 5E                      	POP	SI
 10179 000013A4 1F                      	POP	DS
 10180                                  ;;; 7/15/86
 10181                                  
 10182                                  ;hkn; SS override
 10183                                  	; MSDOS 6.0
 10184 000013A5 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10185                                  	;
 10186 000013AB 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10187 000013AD 7505                    	JNZ	short noscan
 10188                                  
 10189                                  ;hkn; SS override
 10190                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10191                                  	; 20/06/2023
 10192 000013AF 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10193                                  noscan:
 10194 000013B4 C3                      	retn
 10195                                  ;
 10196                                  ;----------------------------------------------------------------------------
 10197                                  ;
 10198                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10199                                  ;
 10200                                  ;
 10201                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10202                                  ;	EXIT	none
 10203                                  ;	USES	ALL
 10204                                  ;
 10205                                  ;----------------------------------------------------------------------------
 10206                                  ;
 10207                                  
 10208                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10209                                  
 10210 000013B5 89D6                    	mov	si,dx
 10211                                  STRING_OUT1:	
 10212 000013B7 AC                      	lodsb
 10213 000013B8 3C24                    	cmp	al,'$'
 10214 000013BA 74F8                    	je	short noscan
 10215                                  NEXT_STR1:
 10216 000013BC E88402                  	call	OUTT
 10217 000013BF EBF6                    	jmp	short STRING_OUT1
 10218                                  
 10219                                  ;----------------------------------------------------------------------------
 10220                                  ;
 10221                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10222                                  ;
 10223                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10224                                  ;
 10225                                  ;	ENTRY	(ds:dx) = input buffer
 10226                                  ;	EXIT	none
 10227                                  ;	USES	ALL
 10228                                  ;
 10229                                  ;----------------------------------------------------------------------------
 10230                                  
 10231                                  	; 15/01/2024
 10232                                  
 10233                                  _$STD_CON_STRING_INPUT:		;System call 10
 10234                                  
 10235                                  	; 15/01/2024
 10236                                  	;mov	ax,ss
 10237                                  	;mov	es,ax
 10238 000013C1 16                      	push	ss
 10239 000013C2 07                      	pop	es
 10240                                  
 10241 000013C3 89D6                    	mov	si,dx
 10242 000013C5 30ED                    	xor	ch,ch
 10243 000013C7 AD                      	lodsw
 10244                                  
 10245                                  ;	(AL) = the buffer length
 10246                                  ;	(AH) = the template length
 10247                                  
 10248 000013C8 08C0                            or	al,al
 10249 000013CA 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10250 000013CC 88E3                    	mov	bl,ah		;Init template counter
 10251 000013CE 88EF                            mov	bh,ch		;Init template counter
 10252                                  
 10253                                  ;	(BL) = the number of bytes in the template
 10254                                  
 10255 000013D0 38D8                            cmp	al,bl
 10256 000013D2 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10257 000013D4 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10258 000013D7 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10259                                  
 10260                                  ; The number of chars in the template is >= the number of chars in buffer or
 10261                                  ; there is no CR at the end of the template. This is an inconsistant state
 10262                                  ; of affairs. Pretend that the template was empty:
 10263                                  ;
 10264                                  
 10265                                  NOEDIT:	
 10266 000013D9 88EB                    	mov	bl,ch		;Reset buffer
 10267                                  EDITON: 
 10268 000013DB 88C2                    	mov	dl,al
 10269 000013DD 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10270                                  
 10271                                  ;	Top level. We begin to read a line in.
 10272                                  
 10273                                  NEWLIN: 
 10274 000013DE 36A0[F901]              	mov	al,[SS:CARPOS]
 10275 000013E2 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10276                                  
 10277 000013E6 56                      	push	si
 10278 000013E7 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10279 000013EA 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10280 000013EF 88EF                    	mov	bh,ch		;No chars from template yet
 10281 000013F1 88EE                    	mov	dh,ch		;No chars to new line yet
 10282 000013F3 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10283 000013F6 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10284 000013F8 7503                    	jnz	short GOTCH
 10285                                  
 10286                                  ;	This is the main loop of reading in a character and processing it.
 10287                                  ;
 10288                                  ;	(BH) = the index of the next byte in the template
 10289                                  ;	(BL) = the length of the template
 10290                                  ;	(DH) = the number of bytes in the buffer
 10291                                  ;	(DL) = the length of the buffer
 10292                                  
 10293                                  GETCH:
 10294 000013FA E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10295                                  GOTCH:
 10296                                  ;
 10297                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10298                                  ; input queue.
 10299                                  ;
 10300 000013FD 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10301 000013FF 74F9                    	jz	short GETCH
 10302                                  
 10303                                  ;	If the leading char is the function-key lead byte
 10304                                  
 10305                                  	;cmp	al,[SS:ESCCHAR]
 10306                                  
 10307                                  	; 04/05/2019 - Retro DOS v4.0
 10308                                  
 10309                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10310                                  
 10311 00001401 2E3A06[190A]            	CMP	AL,[cs:ESCCHAR]
 10312 00001406 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10313                                  
 10314                                  ;	Rubout and ^H are both destructive backspaces.
 10315                                  
 10316 00001408 3C7F                            cmp	al,c_DEL ; 7FH
 10317                                          ;jz	short BACKSPJ
 10318                                          ; 15/01/2024
 10319 0000140A 7466                    	je	short BACKSP
 10320 0000140C 3C08                    	cmp	al,c_BS  ; 8
 10321                                          ;jz	short BACKSPJ
 10322                                          ; 15/01/2024
 10323 0000140E 7462                    	je	short BACKSP
 10324                                  
 10325                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10326                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10327                                  	;	   	after CMP and a CMP again!
 10328                                  	;		
 10329                                  	;		-It would be better if they use a 'JMP short' to 
 10330                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10331                                  	;		between them. Then, they would be able use a patch
 10332                                  	;		between 5271h and 5279h when if it will be required.
 10333                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10334                                  	;	
 10335                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10336                                  
 10337                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10338                                  	;
 10339                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10340                                  
 10341                                  ;DOSCODE:526D	cmp     al, 8
 10342                                  ;DOSCODE:526F	jz      short BACKSPJ
 10343                                  ;DOSCODE:5271	cmp     al, 17h
 10344                                  ;DOSCODE:5273	nop
 10345                                  ;DOSCODE:5274	nop
 10346                                  ;DOSCODE:5275	cmp     al, 15h
 10347                                  ;DOSCODE:5277	nop
 10348                                  ;DOSCODE:5278	nop
 10349                                  ;DOSCODE:5279	cmp     al, 0Dh
 10350                                  ;DOSCODE:527B	jz      short ENDLIN
 10351                                  ;DOSCODE:527D	cmp     al, 0Ah
 10352                                  ;DOSCODE:527F	jz      short PHYCRLF
 10353                                  	
 10354                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10355                                  	; DOSCODE:525Dh
 10356                                  
 10357                                  ; 16/12/2022
 10358                                  %if 0
 10359                                  	; MSDOS 6.0
 10360                                  ;	^W deletes backward once and then backs up until a letter is before the
 10361                                  ;	cursor
 10362                                  
 10363                                  	CMP     AL,"W"-"@" ; 17h
 10364                                  
 10365                                  ;	The removal of the comment characters before the jump statement will
 10366                                  ;	cause ^W to backup a word.
 10367                                  
 10368                                  ;***	JZ	short WordDel
 10369                                  	NOP
 10370                                  	NOP
 10371                                  
 10372                                  	CMP     AL,"U"-"@" ; 15h
 10373                                  
 10374                                  ;	The removal of the comment characters before the jump statement will
 10375                                  ;	cause ^U to clear a line.
 10376                                  
 10377                                  ;***	JZ	short LineDel
 10378                                  	NOP
 10379                                  	NOP
 10380                                  
 10381                                  %endif
 10382                                  
 10383                                  ;	CR terminates the line.
 10384                                  
 10385 00001410 3C0D                            cmp	al,c_CR ; 0Dh
 10386 00001412 7430                            jz	short ENDLIN
 10387                                  
 10388                                  ;	LF goes to a new line and keeps on reading.
 10389                                  
 10390 00001414 3C0A                            cmp	al,c_LF ; 0Ah
 10391 00001416 7442                    	jz	short PHYCRLF
 10392                                  
 10393                                  ;	^X (or ESC) deletes the line and starts over
 10394                                  
 10395                                  	; MSDOS 3.3
 10396                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10397                                  	;jz	short KILNEW
 10398                                  
 10399                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10400                                  
 10401                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10402                                  
 10403 00001418 2E3A06[180A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10404 0000141D 7440                    	jz	short KILNEW
 10405                                  	
 10406                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10407                                  	;jz	short KILNEW
 10408                                  
 10409                                  ; Otherwise, we save the input character.
 10410                                  
 10411                                  SAVCH:	
 10412 0000141F 38D6                    	cmp	dh,dl
 10413 00001421 7317                    	jnb	short BUFFUL		; buffer is full.
 10414 00001423 AA                              stosb
 10415 00001424 FEC6                    	inc	dh                      ; increment count in buffer.
 10416 00001426 E8AE02                  	call	BUFOUT			; Print control chars nicely
 10417                                  
 10418 00001429 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10419 0000142F 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10420 00001431 38DF                            cmp	bh,bl
 10421 00001433 73C5                            jnb	short GETCH		; no more characters in template
 10422 00001435 46                              inc	si                      ; Skip to next char in template
 10423 00001436 FEC7                            inc	bh                      ; remember position in template
 10424 00001438 EBC0                            jmp	short GETCH
 10425                                  
 10426                                  	; 15/01/2024
 10427                                  ;BACKSPJ: 
 10428                                  	;jmp	short BACKSP
 10429                                  
 10430                                  BUFFUL: 
 10431 0000143A B007                    	mov	al, 7			; Bell to signal full buffer
 10432 0000143C E80402                  	call	OUTT
 10433 0000143F EBB9                    	jmp	short GETCH
 10434                                  
 10435                                  ESCAPE: 
 10436                                  	;transfer OEMFunctionKey
 10437 00001441 E900F6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10438                                  
 10439                                  ENDLIN:
 10440 00001444 AA                              stosb				; Put the CR in the buffer
 10441 00001445 E8FB01                  	call	OUTT                    ; Echo it
 10442 00001448 5F                              pop	di                      ; Get start of user buffer
 10443 00001449 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10444 0000144C FEC6                            inc	dh			; DH is length including CR
 10445                                  
 10446                                  COPYNEW:
 10447                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10448                                  	;mov	bp, es
 10449                                  	;mov	bx, ds
 10450                                  	;mov	es, bx
 10451                                  	;mov	ds, bp
 10452                                  	;mov	si, INBUF
 10453                                  	;mov	cl, dh
 10454                                  	;rep	movsb
 10455                                  	;retn
 10456                                  
 10457                                  	; CPMIO.ASM (MSDOS 6.0)
 10458                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10459                                  	;SAVE	<DS,ES>
 10460 0000144E 1E                      	PUSH	DS
 10461 0000144F 06                      	PUSH	ES
 10462                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10463 00001450 1F                      	POP	DS
 10464 00001451 07                      	POP	ES
 10465                                  
 10466                                  ;;hkn; INBUF is in DOSDATA
 10467 00001452 BE[FB01]                        MOV     SI,INBUF
 10468 00001455 88F1                            MOV     CL,DH                   ; set up count
 10469 00001457 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10470                                  OLDBAK_RETN:
 10471 00001459 C3                              RETN
 10472                                  
 10473                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10474                                  
 10475                                  PHYCRLF:
 10476 0000145A E81B01                  	CALL	CRLF
 10477 0000145D EB9B                            JMP	short GETCH
 10478                                  
 10479                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10480                                  
 10481                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10482                                  
 10483                                  	; Note: Following routines were not used in IBMDOS.COM
 10484                                  	;	-CRTL+W, CRTL+U is not activated-
 10485                                  	;	but they were in the kernel code!?)
 10486                                  
 10487                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10488                                  	; DOSCODE:52B6h
 10489                                  
 10490                                  ;;;;;;;;
 10491                                  
 10492                                  ; 16/12/2022
 10493                                  %if 0
 10494                                  ;
 10495                                  ; Delete the previous line
 10496                                  ;
 10497                                  LineDel:
 10498                                  	OR      DH,DH
 10499                                  	JZ	short GETCH	 ; 06/12/2022
 10500                                  	Call    BackSpace
 10501                                  	JMP	short LineDel
 10502                                  
 10503                                  %endif
 10504                                  
 10505                                  ;
 10506                                  ; delete the previous word.
 10507                                  ;
 10508                                  WordDel:
 10509                                  WordLoop:
 10510                                  ;	Call    BackSpace               ; backspace the one spot
 10511                                  ;	OR      DH,DH
 10512                                  ;	JZ	short GetChj
 10513                                  ;	MOV     AL,[ES:DI-1]
 10514                                  ;	cmp     al,'0'
 10515                                  ;	jb	short GetChj
 10516                                  ;	cmp     al,'9'
 10517                                  ;	jbe	short WordLoop
 10518                                  ;	OR      AL,20h
 10519                                  ;	CMP     AL,'a'
 10520                                  ;	JB	short GetChj
 10521                                  ;	CMP     AL,'z'
 10522                                  ;	JBE	short WordLoop
 10523                                  ;GetChj: 
 10524                                  ;	JMP	GETCH
 10525                                  
 10526                                  ; 16/12/2022
 10527                                  %if 0
 10528                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10529                                  	; (Worddel is not called or jumped from anywhere!)
 10530                                  WordDel:
 10531                                  WordLoop:
 10532                                  	Call    BackSpace               ; backspace the one spot
 10533                                  	OR      DH,DH
 10534                                  	JZ	short GetChj
 10535                                  	MOV     AL,[ES:DI-1]
 10536                                  	cmp     al,'0'
 10537                                  	jb	short GetChj
 10538                                  	cmp     al,'9'
 10539                                  	jbe	short WordLoop
 10540                                  	OR      AL,20h
 10541                                  	CMP     AL,'a'
 10542                                  	JB	short GetChj
 10543                                  	CMP     AL,'z'
 10544                                  	JBE	short WordLoop
 10545                                  GetChj: 
 10546                                  	JMP	GETCH
 10547                                  
 10548                                  %endif
 10549                                  
 10550                                  ;;;;;;;;
 10551                                  
 10552                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10553                                  
 10554                                  ; The user wants to throw away what he's typed in and wants to start over.
 10555                                  ; We print the backslash and then go to the next line and tab to the correct
 10556                                  ; spot to begin the buffered input.
 10557                                  
 10558                                  KILNEW:
 10559 0000145F B05C                            mov	al,'\'
 10560 00001461 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10561 00001464 5E                              pop	si		;Remember start of edit buffer
 10562                                  PUTNEW:
 10563 00001465 E81001                  	call	CRLF            ;Go to next line on screen
 10564 00001468 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10565 0000146C E84802                  	call	TAB             ;Tab over
 10566 0000146F E96CFF                          JMP     NEWLIN		;Start over again
 10567                                  
 10568                                  ;	Destructively back up one character position
 10569                                  
 10570                                  BACKSP:
 10571                                  	; 09/09/2018
 10572 00001472 E80800                  	Call    BackSpace
 10573 00001475 EB83                    	JMP     short GETCH	; 15/01/2024
 10574                                  
 10575                                  	; 15/01/2024
 10576                                  ;User really wants an ESC character in his line
 10577                                  TWOESC:	
 10578 00001477 2EA0[190A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10579 0000147B EBA2                    	jmp	short SAVCH
 10580                                  
 10581                                  BackSpace:
 10582 0000147D 08F6                    	or	dh,dh
 10583 0000147F 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10584 00001481 E85800                  	call	BACKUP          ;Do the backup
 10585 00001484 268A05                  	mov	al,[es:di]	;Get the deleted char
 10586 00001487 3C20                            cmp	al,20h	; ' '
 10587 00001489 730F                    	jnb	short OLDBAK	;Was a normal char
 10588 0000148B 3C09                            cmp	al,c_HT ; 9
 10589 0000148D 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10590                                  ;; 9/27/86 fix for ctrl-U backspace
 10591 0000148F 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10592 00001491 7407                    	JZ	short OLDBAK
 10593 00001493 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10594 00001495 7403                    	JZ	short OLDBAK
 10595                                  ;; 9/27/86 fix for ctrl-U backspace
 10596 00001497 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10597                                  OLDBAK:
 10598 0000149A 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10599 000014A0 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10600 000014A2 08FF                    	or	bh,bh
 10601 000014A4 74B3                            jz	short OLDBAK_RETN 
 10602                                  				;Not advanced in template, stay where we are
 10603 000014A6 FECF                    	dec	bh		;Go back in template
 10604 000014A8 4E                              dec	si
 10605 000014A9 C3                      	retn
 10606                                  BAKTAB:
 10607 000014AA 57                              push	di
 10608 000014AB 4F                              dec	di		;Back up one char
 10609 000014AC FD                              std			;Go backward
 10610 000014AD 88F1                            mov	cl,dh		;Number of chars currently in line
 10611 000014AF B020                            mov	al,20h	; ' '
 10612 000014B1 53                              push	bx
 10613 000014B2 B307                            mov	bl,7		;Max
 10614 000014B4 E30E                            jcxz	FIGTAB		;At start, do nothing
 10615                                  FNDPOS:
 10616 000014B6 AE                              scasb			;Look back
 10617 000014B7 7609                    	jbe	short CHKCNT
 10618 000014B9 26807D0109              	cmp	byte [es:di+1],9
 10619 000014BE 7409                    	jz	short HAVTAB	;Found a tab
 10620 000014C0 FECB                    	dec	bl		;Back one char if non tab control char
 10621                                  CHKCNT:
 10622 000014C2 E2F2                            loop	FNDPOS
 10623                                  FIGTAB:		
 10624 000014C4 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10625                                  HAVTAB:
 10626 000014C9 28F3                    	sub	bl,dh
 10627 000014CB 00D9                    	add	cl,bl
 10628 000014CD 80E107                  	and	cl,7		;CX has correct number to erase
 10629 000014D0 FC                      	cld			;Back to normal
 10630 000014D1 5B                      	pop	bx
 10631 000014D2 5F                      	pop	di
 10632 000014D3 74C5                    	jz	short OLDBAK	;Nothing to erase
 10633                                  TABBAK:
 10634 000014D5 E80700                  	call	BACKMES
 10635 000014D8 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10636 000014DA EBBE                    	jmp	short OLDBAK
 10637                                  
 10638                                  BACKUP:
 10639 000014DC FECE                            dec	dh		;Back up in line
 10640 000014DE 4F                              dec	di
 10641                                  BACKMES:
 10642 000014DF B008                            mov	al,c_BS ; 8	;Backspace
 10643 000014E1 E85F01                          call	OUTT
 10644 000014E4 B020                            mov	al,20h ; ' '	;Erase
 10645 000014E6 E85A01                          call	OUTT
 10646 000014E9 B008                            mov	al,c_BS ; 8	;Backspace
 10647 000014EB E95501                  	jmp	OUTT		;Done
 10648                                  
 10649                                  	; 15/01/2024
 10650                                  ;User really wants an ESC character in his line
 10651                                  ;TWOESC:	
 10652                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10653                                  ;	jmp	SAVCH
 10654                                  
 10655                                  ;Copy the rest of the template
 10656                                  COPYLIN:
 10657 000014EE 88D9                            mov	cl,bl		;Total size of template
 10658 000014F0 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10659 000014F2 EB07                            jmp	short COPYEACH
 10660                                  
 10661                                  COPYSTR:
 10662 000014F4 E83200                  	call	FINDOLD         ;Find the char
 10663 000014F7 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10664                                  
 10665                                  ;Copy one char from template to line
 10666                                  COPYONE:
 10667 000014F9 B101                            mov	cl,1
 10668                                  ;Copy CX chars from template to line
 10669                                  COPYEACH:
 10670 000014FB 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10671 00001501 38D6                    	cmp	dh,dl
 10672 00001503 740F                            jz	short GETCH2		;At end of line, can't do anything
 10673 00001505 38DF                            cmp	bh,bl
 10674 00001507 740B                            jz	short GETCH2		;At end of template, can't do anything
 10675 00001509 AC                              lodsb
 10676 0000150A AA                              stosb
 10677 0000150B E8C901                  	call	BUFOUT
 10678 0000150E FEC7                            inc	bh			;Ahead in template
 10679 00001510 FEC6                            inc	dh			;Ahead in line
 10680 00001512 E2E7                            loop	COPYEACH
 10681                                  GETCH2:
 10682 00001514 E9E3FE                          jmp	GETCH
 10683                                  
 10684                                  ;Skip one char in template
 10685                                  SKIPONE:
 10686 00001517 38DF                    	cmp	bh,bl
 10687 00001519 74F9                    	jz	short GETCH2		;At end of template
 10688 0000151B FEC7                    	inc	bh			;Ahead in template
 10689 0000151D 46                      	inc	si
 10690                                          ;jmp	GETCH
 10691                                  	; 15/01/2024
 10692 0000151E EBF4                    	jmp	short GETCH2
 10693                                  
 10694                                  SKIPSTR:
 10695 00001520 E80600                  	call	FINDOLD                 ;Find out how far to go
 10696 00001523 01CE                            add	si,cx			;Go there
 10697 00001525 00CF                            add	bh,cl
 10698                                          ;jmp	GETCH
 10699                                  	; 15/01/2024
 10700 00001527 EBEB                    	jmp	short GETCH2
 10701                                  
 10702                                  ;Get the next user char, and look ahead in template for a match
 10703                                  ;CX indicates how many chars to skip to get there on output
 10704                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10705                                  ;       address is popped off and a jump to GETCH is taken.
 10706                                  ;       Make sure nothing extra on stack when this routine
 10707                                  ;       is called!!! (no PUSHes before calling it).
 10708                                  
 10709                                  FINDOLD:
 10710 00001529 E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10711                                  
 10712                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10713                                  
 10714                                  	;CMP	AL,[SS:ESCCHAR]	
 10715                                  	;JNZ	SHORT FINDSETUP
 10716                                  
 10717                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10718                                  
 10719                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10720                                  
 10721 0000152C 2E3A06[190A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10722 00001531 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10723                                  
 10724 00001533 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10725 00001536 EB1D                            JMP	SHORT NOTFND		; go try again
 10726                                  FINDSETUP:
 10727 00001538 88D9                    	mov	cl,bl
 10728 0000153A 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10729 0000153C 7417                    	jz	short NOTFND	;At end of template
 10730 0000153E 49                              dec	cx		;Cannot point past end, limit search
 10731 0000153F 7414                            jz	short NOTFND	;If only one char in template, forget it
 10732 00001541 06                      	push	es
 10733 00001542 1E                      	push	ds
 10734 00001543 07                      	pop	es
 10735 00001544 57                      	push	di
 10736 00001545 89F7                    	mov	di,si		;Template to ES:DI
 10737 00001547 47                      	inc	di
 10738 00001548 F2AE                    	repne	scasb		;Look
 10739 0000154A 5F                      	pop	di
 10740 0000154B 07                      	pop	es
 10741 0000154C 7507                    	jnz	short NOTFND	;Didn't find the char
 10742 0000154E F6D1                            not	cl		;Turn how far to go into how far we went
 10743 00001550 00D9                            add	cl,bl		;Add size of template
 10744 00001552 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10745                                  FINDOLD_RETN:
 10746 00001554 C3                      	retn
 10747                                  
 10748                                  NOTFND:
 10749 00001555 5D                      	pop	bp              ;Chuck return address
 10750                                  	;jmp	GETCH
 10751                                  	; 15/01/2024
 10752                                  GETCH2_j:
 10753 00001556 EBBC                    	jmp	short GETCH2
 10754                                  
 10755                                  REEDIT:
 10756 00001558 B040                    	mov	al,'@'		;Output re-edit character
 10757 0000155A E8E600                  	call	OUTT
 10758 0000155D 5F                      	pop	di
 10759 0000155E 57                      	push	di
 10760 0000155F 06                      	push	es
 10761 00001560 1E                      	push	ds
 10762 00001561 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10763 00001564 1F                      	pop	ds
 10764 00001565 07                      	pop	es
 10765 00001566 5E                      	pop	si
 10766 00001567 88F3                    	mov	bl,dh		;Size of line is new size template
 10767 00001569 E9F9FE                  	jmp	PUTNEW		;Start over again
 10768                                  
 10769                                  EXITINS:
 10770                                  ENTERINS:
 10771 0000156C 36F616[7905]            	not	byte [SS:INSMODE]
 10772                                  	;jmp	GETCH
 10773                                  	; 15/01/2024
 10774 00001571 EBE3                    	jmp	short GETCH2_j
 10775                                  
 10776                                  ;Put a real live ^Z in the buffer (embedded)
 10777                                  CTRLZ:
 10778 00001573 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10779 00001575 E9A7FE                          jmp	SAVCH
 10780                                  
 10781                                  ;Output a CRLF
 10782                                  CRLF:
 10783 00001578 B00D                    	mov	al,c_CR ; 0Dh 
 10784 0000157A E8C600                  	call	OUTT
 10785 0000157D B00A                    	mov	al,c_LF ; 0Ah
 10786 0000157F E9C100                  	jmp	OUTT
 10787                                  
 10788                                  ;
 10789                                  ;----------------------------------------------------------------------------
 10790                                  ;
 10791                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10792                                  ;
 10793                                  ;	Input or output raw character from console, no echo
 10794                                  ;
 10795                                  ;	ENTRY	DL = -1 if input
 10796                                  ;		   =  output character if output
 10797                                  ;	EXIT	(AL) = input character if input
 10798                                  ;	USES	all
 10799                                  ;
 10800                                  ;----------------------------------------------------------------------------
 10801                                  ; 20/07/2018 - Retro DOS v3.0
 10802                                  
 10803                                  ; 04/05/2019 - Retro DOS v4.0
 10804                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10805                                  
 10806                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10807                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10808                                  
 10809                                  _$RAW_CON_IO:			; System call 6
 10810 00001582 88D0                    	MOV	AL,DL
 10811 00001584 3CFF                    	CMP	AL,-1
 10812 00001586 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10813                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10814                                  	;jz	short rci1
 10815                                  	;jmp	short RAWOUT
 10816                                  	; 16/12/202
 10817                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10818                                  	;nop
 10819                                  rci1:
 10820                                  			; Get pointer to register save area
 10821 00001588 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10822 0000158D 31DB                    	XOR	BX,BX
 10823                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10824 0000158F E8FF1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10825                                          ;JC	SHORT RET17
 10826 00001592 72C0                            jc	short FINDOLD_RETN
 10827 00001594 B401                    	MOV	AH,1
 10828 00001596 E8002E                  	CALL	IOFUNC
 10829 00001599 750B                    	JNZ	SHORT RESFLG
 10830 0000159B E8863A                  	CALL	SPOOLINT
 10831                                  	;OR	BYTE [ES:DI+16H],40H
 10832 0000159E 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10833 000015A3 30C0                    	XOR	AL,AL
 10834                                  RET17:
 10835 000015A5 C3                      	RETN
 10836                                  
 10837                                  RESFLG:
 10838                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10839 000015A6 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10840                                  				; Reset user's zero flag
 10841                                  ;RILP:
 10842                                  rci0:
 10843 000015AB E8763A                  	CALL	SPOOLINT
 10844                                  ;
 10845                                  ;----------------------------------------------------------------------------
 10846                                  ;
 10847                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10848                                  ;
 10849                                  ;	Input raw character from console, no echo
 10850                                  ;
 10851                                  ;	ENTRY	none
 10852                                  ;	EXIT	(al) = character
 10853                                  ;	USES	all
 10854                                  ;
 10855                                  ;----------------------------------------------------------------------------
 10856                                  ;
 10857                                  
 10858                                  ;rci0:	invoke	SPOOLINT
 10859                                  
 10860                                  	;entry	$RAW_CON_INPUT
 10861                                  
 10862                                  	; 04/05/2019 - Retro DOS v4.0
 10863                                  
 10864                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10865                                  
 10866                                  _$RAW_CON_INPUT:		; System call 7
 10867 000015AE 53                      	push	bx
 10868 000015AF 31DB                    	XOR	BX,BX
 10869                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10870 000015B1 E8DD1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10871 000015B4 5B                      	pop	bx
 10872 000015B5 72EE                    	JC	SHORT RET17
 10873 000015B7 B401                    	MOV	AH,1
 10874 000015B9 E8DD2D                  	CALL	IOFUNC
 10875                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10876                                  	;XOR	AH,AH
 10877                                          ;CALL	IOFUNC
 10878                                          ;RETN
 10879 000015BC 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10880 000015BE B484                    	MOV	AH,84h
 10881 000015C0 CD2A                    	INT	int_IBM  ; int 2Ah
 10882 000015C2 EBE7                    	JMP	short rci0
 10883                                  rci5:	
 10884 000015C4 30E4                    	XOR	AH,AH
 10885                                  	;CALL	IOFUNC
 10886                                  	;RETN
 10887                                  	; 18/12/2022
 10888 000015C6 E9D02D                  	jmp	IOFUNC
 10889                                  
 10890                                  ;       Output the character in AL to stdout
 10891                                  ;
 10892                                  	;entry	RAWOUT
 10893                                  RAWOUT:
 10894 000015C9 53                      	PUSH    BX
 10895 000015CA BB0100                  	MOV     BX,1
 10896                                  
 10897                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10898 000015CD E8C11F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10899 000015D0 721B                    	JC	SHORT RAWRET1
 10900                                  
 10901                                  	;
 10902                                  	; MSDOS 2.11
 10903                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10904                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10905                                          ;PUSH	DS
 10906                                          ;PUSH	SI
 10907                                          ;LDS	SI,[SI+19H]		; output to special?
 10908                                  	;TEST	BYTE [SI+4],ISSPEC
 10909                                  	;POP	SI
 10910                                  	;
 10911                                          
 10912                                  	; MSDOS 3.3 & MSDOS 6.0
 10913                                  	;mov	bx,[si+5]
 10914 000015D2 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10915                                   ;
 10916                                   ; If we are a network handle OR if we are not a local device then go do the
 10917                                   ; output the hard way.
 10918                                   ;	
 10919                                  	;and	bx,8080h
 10920 000015D5 81E38080                	AND	BX,sf_isnet+devid_device
 10921                                  	;cmp	bx,80h
 10922 000015D9 81FB8000                	CMP	BX,devid_device
 10923 000015DD 7510                    	jnz     short RAWNORM
 10924 000015DF 1E                      	push    ds
 10925                                  	;lds	bx,[si+7]
 10926 000015E0 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10927                                  	;test	byte [bx+4],10h
 10928 000015E3 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10929                                  	;
 10930                                  
 10931 000015E7 1F                      	POP	DS
 10932 000015E8 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10933                                  
 10934 000015EA CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10935                                  
 10936                                  	;JMP	SHORT RAWRET
 10937                                  ;RAWNORM:
 10938                                  ;	CALL    RAWOUT3
 10939                                  RAWRET: 
 10940 000015EC F8                      	CLC
 10941                                  RAWRET1:
 10942 000015ED 5B                      	POP     BX
 10943                                  RAWRET2:
 10944 000015EE C3                      	RETN
 10945                                  RAWNORM:
 10946 000015EF E80700                  	CALL    RAWOUT3
 10947 000015F2 EBF8                    	jmp	short RAWRET
 10948                                  
 10949                                  ;	Output the character in AL to handle in BX
 10950                                  ;
 10951                                  ;	entry	RAWOUT2
 10952                                  
 10953                                  RAWOUT2:
 10954                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10955                                  	;JC	SHORT RET18
 10956 000015F4 E89A1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10957 000015F7 72F5                    	JC	SHORT RAWRET2
 10958                                  RAWOUT3:
 10959 000015F9 50                      	PUSH	AX
 10960 000015FA EB0C                    	JMP	SHORT RAWOSTRT
 10961                                  ROLP:
 10962 000015FC E8253A                  	CALL	SPOOLINT
 10963                                  
 10964                                  	; 01/05/2019 - Retro DOS v4.0
 10965                                  
 10966                                  	; MSDOS 6.0
 10967                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10968                                  	; 17/12/2022
 10969 000015FF 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10970                                  	;or	word [ss:DOS34_FLAG],200h
 10971                                  				;AN002; set control break
 10972                                  	;invoke DSKSTATCHK
 10973 00001605 E89B39                  	call	DSKSTATCHK	;AN002; check control break
 10974                                  RAWOSTRT:
 10975 00001608 B403                    	MOV	AH,3
 10976 0000160A E88C2D                  	CALL	IOFUNC
 10977 0000160D 74ED                    	JZ	SHORT ROLP
 10978                                  
 10979                                  	; MSDOS 6.0
 10980                                  ;SR;
 10981                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10982                                  ;the user failed. We do not send a char if this happens. We however return
 10983                                  ;to the caller with carry clear because this DOS call does not return any
 10984                                  ;status. 
 10985                                  ;
 10986 0000160F 40                      	inc	ax		;fail on I24 if ax = -1
 10987 00001610 58                      	POP	AX
 10988 00001611 7405                    	jz	short nosend	;yes, do not send char
 10989 00001613 B402                    	MOV	AH,2
 10990 00001615 E8812D                  	call	IOFUNC
 10991                                  nosend:
 10992 00001618 F8                      	CLC			; Clear carry indicating successful
 10993 00001619 C3                      	retn
 10994                                  
 10995                                  	; MSDOS 3.3 & MSDOS 2.11
 10996                                  	;POP	AX
 10997                                  	;MOV	AH,2
 10998                                          ;CALL	IOFUNC
 10999                                  	;CLC			; Clear carry indicating successful
 11000                                  ;RET18:    
 11001                                  	;RETN
 11002                                  
 11003                                  ;;10/08/2018
 11004                                  ; 20/07/2018 - Retro DOS v3.0
 11005                                  ; ---------------------------------------------------------------------------
 11006                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11007                                  ; ---------------------------------------------------------------------------
 11008                                  
 11009                                  ; This routine is called at DOS init
 11010                                  
 11011                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11012                                  ;;OUTMES:
 11013                                  ;;	;LODS	CS:BYTE PTR [SI]
 11014                                  ;;	CS	LODSB
 11015                                  ;;	CMP     AL,"$" ; 24h
 11016                                  ;;	JZ	SHORT RET18
 11017                                  ;;	CALL	OUTT
 11018                                  ;;	JMP     SHORT OUTMES
 11019                                  
 11020                                  ; ---------------------------------------------------------------------------
 11021                                  
 11022                                  ; 20/07/2018 - Retro DOS v3.0
 11023                                  
 11024                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11025                                  
 11026                                  ;
 11027                                  ;----------------------------------------------------------------------------
 11028                                  ;
 11029                                  ; Inputs:
 11030                                  ;	AX=0 save the DEVCALL request packet
 11031                                  ;	  =1 restore the DEVCALL request packet
 11032                                  ; Function:
 11033                                  ;	save or restore the DEVCALL packet
 11034                                  ; Returns:
 11035                                  ;	none
 11036                                  ;
 11037                                  ;----------------------------------------------------------------------------
 11038                                  ;
 11039                                  
 11040                                  ; 04/05/2019 - Retro DOS v4.0
 11041                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11042                                  
 11043                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11044                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11045                                  
 11046                                  ; 12/05/2019
 11047                                  
 11048                                  	; 15/01/2024
 11049                                  
 11050                                  Save_Restore_Packet:
 11051 0000161A 1E                      	PUSH	DS
 11052 0000161B 06                      	PUSH	ES
 11053 0000161C 56                      	PUSH	SI
 11054 0000161D 57                      	PUSH	DI
 11055                                  
 11056                                  	; 16/12/2022
 11057                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11058                                  	; 09/09/2018
 11059 0000161E BF[6C0D]                	mov	di,FAKE_STACK_2F
 11060 00001621 BE[5A03]                	mov	si,DEVCALL
 11061                                  	;
 11062                                  	; 21/09/2023
 11063 00001624 09C0                    	or	ax,ax
 11064                                  	;CMP	AX,0		; save packet
 11065 00001626 7402                    	JZ	short save_packet ; 16/12/2022
 11066                                  	;je	short set_seg
 11067                                  
 11068                                  	; MSDOS 6.0
 11069                                  restore_packet:
 11070                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11071                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11072                                  	; MSDOS 3.3
 11073                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11074                                  	;mov	di,DEVCALL  ; 09/09/2018
 11075                                  	;
 11076                                  	;JMP	short set_seg
 11077                                  
 11078                                  	; 16/12/2022	
 11079                                  	; 09/09/2018
 11080 00001628 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11081                                  
 11082                                  ; 16/12/2022
 11083                                  %if 0
 11084                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11085                                  	cmp	ax,0		; save packet
 11086                                  	jz	short save_packet
 11087                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11088                                  	mov	di,DEVCALL 
 11089                                  	jmp	short set_seg
 11090                                  
 11091                                  	; MSDOS 6.0
 11092                                  save_packet:
 11093                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11094                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11095                                  	; 09/09/2018
 11096                                  	; MSDOS 3.3
 11097                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11098                                  	;mov	si,DEVCALL ; 09/09/2018
 11099                                  
 11100                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11101                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11102                                  	mov	si,DEVCALL
 11103                                  %endif
 11104                                  
 11105                                  ; 15/01/2024
 11106                                  ; 16/12/2022
 11107                                  save_packet:
 11108                                  ;set_seg:
 11109                                  	; MSDOS 3.3
 11110                                  	;mov	ax,cs
 11111                                  
 11112                                  	; MSDOS 6.0
 11113                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11114                                  	;MOV	DS,AX
 11115                                  	;MOV	ES,AX
 11116                                  	; 15/01/2024
 11117 0000162A 16                      	push	ss
 11118 0000162B 1F                      	pop	ds
 11119 0000162C 1E                      	push	ds
 11120 0000162D 07                      	pop	es
 11121                                  
 11122 0000162E B90B00                  	MOV	CX,11		; 11 words to move
 11123 00001631 F3A5                    	REP	MOVSW
 11124                                  
 11125 00001633 5F                      	POP	DI
 11126 00001634 5E                      	POP	SI
 11127 00001635 07                      	POP	ES
 11128 00001636 1F                      	POP	DS
 11129 00001637 C3                      	retn
 11130                                  
 11131                                  ;============================================================================
 11132                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11133                                  ;============================================================================
 11134                                  ; 20/07/2018 - Retro DOS v3.0
 11135                                  ; 01/05/2019 - Retro DOS v4.0
 11136                                  
 11137                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11138                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11139                                  ;hkn;	not valid. 
 11140                                  
 11141                                  ;
 11142                                  ;----------------------------------------------------------------------------
 11143                                  ;
 11144                                  ;**	$STD_CON_INPUT - System Call 1
 11145                                  ;
 11146                                  ;	Input character from console, echo
 11147                                  ;
 11148                                  ;	ENTRY	none
 11149                                  ;	EXIT	(al) = character
 11150                                  ;	USES	ALL
 11151                                  ;
 11152                                  ;----------------------------------------------------------------------------
 11153                                  ;
 11154                                  
 11155                                  _$STD_CON_INPUT:	;System call 1
 11156                                  	
 11157 00001638 E821FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11158 0000163B 50                      	PUSH	AX
 11159 0000163C E80400                  	CALL	OUTT
 11160 0000163F 58                      	POP	AX
 11161                                  CON_INPUT_RETN:	
 11162 00001640 C3                      	RETN
 11163                                  
 11164                                  ;
 11165                                  ;----------------------------------------------------------------------------
 11166                                  ;
 11167                                  ;**	$STD_CON_OUTPUT - System Call 2
 11168                                  ;
 11169                                  ;	Output character to console
 11170                                  ;
 11171                                  ;	ENTRY	(dl) = character
 11172                                  ;	EXIT	none
 11173                                  ;	USES	all
 11174                                  ;
 11175                                  ;----------------------------------------------------------------------------
 11176                                  ;
 11177                                  
 11178                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11179                                  
 11180                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11181                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11182                                  
 11183                                  _$STD_CON_OUTPUT:	;System call 2
 11184                                  
 11185 00001641 88D0                    	MOV	AL,DL
 11186                                  OUTT:
 11187 00001643 3C20                    	CMP	AL,20H ; " "
 11188 00001645 725C                    	JB	SHORT CTRLOUT
 11189 00001647 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11190 00001649 7405                    	JZ	SHORT OUTCH
 11191                                  OUTCHA:	
 11192                                  	;INC	BYTE PTR [CARPOS]
 11193 0000164B 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11194                                  OUTCH:
 11195 00001650 1E                      	PUSH	DS
 11196 00001651 56                      	PUSH	SI
 11197                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11198                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11199 00001652 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11200                                  	;AND	BYTE [SS:CHARCO],00111111B
 11201                                  	; 01/05/2019 - Retro DOS v4.0
 11202 00001657 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11203 0000165D 7505                    	JNZ	SHORT OUTSKIP
 11204                                  
 11205 0000165F 50                      	PUSH	AX
 11206 00001660 E8EF39                  	CALL	STATCHK
 11207 00001663 58                      	POP	AX
 11208                                  OUTSKIP:
 11209 00001664 E862FF                  	CALL	RAWOUT				;output the character
 11210                                  
 11211 00001667 5E                      	POP	SI
 11212 00001668 1F                      	POP	DS
 11213                                  
 11214                                  	;TEST	BYTE PTR [PFLAG],-1
 11215                                  	;retz
 11216 00001669 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11217 0000166F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11218                                  
 11219 00001671 53                      	PUSH	BX
 11220 00001672 1E                      	PUSH	DS
 11221 00001673 56                      	PUSH	SI
 11222 00001674 BB0100                  	MOV	BX,1
 11223                                  	; 20/07/2018 - Retro DOS v3.0
 11224                                  	; MSDOS 3.3
 11225                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11226 00001677 E8171F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11227                                  					;hkn; to sft entry
 11228 0000167A 7224                    	JC	SHORT TRIPOPJ
 11229                                  
 11230                                  	; 01/05/2019 - Retro DOS v4.0
 11231                                  
 11232                                  	;mov	bx,[si+5]
 11233 0000167C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11234                                  	;test	bx,8000h
 11235                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11236 0000167F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11237 00001682 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11238                                  	;;test	bx,80h
 11239                                  	;TEST	BX,devid_device 		; output to file?
 11240 00001684 F6C380                  	test	bl,devid_device ; 80h
 11241 00001687 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11242                                  	; 14/03/2018
 11243                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11244                                  	;jc	short TRIPOPJ
 11245                                  	; MSDOS 2.11
 11246                                  	;test	byte [SI+18H], 80h
 11247                                  	;jz	short TRIPOPJ
 11248 00001689 BB0400                  	MOV	BX,4
 11249 0000168C E8021F                  	CALL	GET_IO_SFT
 11250 0000168F 720F                    	JC	SHORT TRIPOPJ
 11251                                  	;;test	word [si+5], 800h
 11252                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11253                                  	;test	byte [si+6],8 ; 08/11/2022
 11254 00001691 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11255                                  						; StdPrn redirected?
 11256                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11257                                  	;jz	LISSTRT2 ; 10/08/2018 
 11258                                  	; 16/12/2022
 11259 00001695 7503                    	jnz	short outch1
 11260 00001697 E98700                  	jmp	LISSTRT2
 11261                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11262                                  	;jz	short LISSTRT2J
 11263                                  outch1:
 11264                                  	;MOV	BYTE [PFLAG],0
 11265 0000169A 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11266                                  	; MSDOS 2.11
 11267                                  	;mov	bx,4
 11268                                  	;jmp	short LISSTRT2
 11269                                  	
 11270                                  TRIPOPJ:
 11271                                  	; 20/07/2018
 11272 000016A0 E98100                  	JMP	TRIPOP
 11273                                  
 11274                                  	; 16/12/2022
 11275                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11276                                  ;LISSTRT2J:
 11277                                  ;	JMP	LISSTRT2
 11278                                  
 11279                                  CTRLOUT:
 11280 000016A3 3C0D                    	CMP	AL,c_CR ; 0Dh
 11281 000016A5 7420                    	JZ	SHORT ZERPOS
 11282 000016A7 3C08                    	CMP	AL,c_BS ; 8
 11283 000016A9 7424                    	JZ	SHORT BACKPOS
 11284 000016AB 3C09                    	CMP	AL,c_HT ; 9
 11285 000016AD 75A1                    	JNZ	SHORT OUTCH
 11286                                  	;MOV	AL,[CARPOS]
 11287 000016AF 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11288 000016B3 0CF8                    	OR	AL,0F8H
 11289 000016B5 F6D8                    	NEG	AL
 11290                                  TAB:
 11291 000016B7 51                      	PUSH	CX
 11292 000016B8 88C1                    	MOV	CL,AL
 11293 000016BA B500                    	MOV	CH,0
 11294 000016BC E307                    	JCXZ	POPTAB
 11295                                  TABLP:
 11296 000016BE B020                    	MOV	AL," "
 11297 000016C0 E880FF                  	CALL	OUTT
 11298 000016C3 E2F9                    	LOOP	TABLP
 11299                                  POPTAB:
 11300 000016C5 59                      	POP	CX
 11301                                  
 11302 000016C6 C3                      	RETN
 11303                                  
 11304                                  ZERPOS:
 11305                                  	;MOV	BYTE PTR [CARPOS],0
 11306 000016C7 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11307                                  	; 10/08/2018
 11308 000016CD EB81                    	JMP	short OUTCH ; 04/05/2019
 11309                                  	
 11310                                  	; 18/12/2022
 11311                                  ;OUTJ:	
 11312                                  	;JMP	OUTT
 11313                                  
 11314                                  BACKPOS:
 11315                                  	;DEC	BYTE PTR [CARPOS]
 11316 000016CF 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11317 000016D4 E979FF                  	JMP	OUTCH
 11318                                  
 11319                                  BUFOUT:
 11320 000016D7 3C20                    	CMP	AL," "
 11321 000016D9 7315                    	JAE	SHORT OUTJ		;Normal char
 11322 000016DB 3C09                    	CMP	AL,9
 11323 000016DD 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11324                                  	;DOS 3.3  7/14/86
 11325 000016DF 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11326 000016E1 740D                    	JZ	short CTRLU
 11327 000016E3 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11328 000016E5 7409                    	JZ	short CTRLU
 11329                                  NOT_CTRLU:
 11330                                  	;DOS 3.3  7/14/86
 11331 000016E7 50                      	PUSH	AX
 11332 000016E8 B05E                    	MOV	AL,"^"
 11333 000016EA E856FF                  	CALL	OUTT		;Print '^' before control chars
 11334 000016ED 58                      	POP	AX
 11335 000016EE 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11336                                  CTRLU:
 11337                                  	;CALL	OUTT
 11338                                  	; 18/12/2022
 11339                                  OUTJ:
 11340 000016F0 E950FF                  	jmp	OUTT
 11341                                  ;BUFOUT_RETN:
 11342                                  	;RETN
 11343                                  
 11344                                  ;
 11345                                  ;----------------------------------------------------------------------------
 11346                                  ;
 11347                                  ;**	$STD_AUX_INPUT - System Call 3
 11348                                  ;
 11349                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11350                                  ;
 11351                                  ;	ENTRY	none
 11352                                  ;	EXIT	(al) = character
 11353                                  ;	USES	all
 11354                                  ;
 11355                                  ;----------------------------------------------------------------------------
 11356                                  ;
 11357                                  
 11358                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11359                                  
 11360                                  _$STD_AUX_INPUT:	;System call 3
 11361                                  
 11362 000016F3 E85C39                  	CALL	STATCHK
 11363 000016F6 BB0300                  	MOV	BX,3
 11364 000016F9 E8951E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11365                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11366                                  	;retc
 11367                                  	; 16/12/2022
 11368                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11369                                  	;JC	SHORT BUFOUT_RETN
 11370                                  	;JMP	SHORT TAISTRT
 11371                                  	; 07/12/2022
 11372 000016FC 7304                    	jnc	SHORT TAISTRT
 11373 000016FE C3                      	retn	
 11374                                  
 11375                                  AUXILP:
 11376 000016FF E82239                  	CALL	SPOOLINT
 11377                                  TAISTRT:
 11378 00001702 B401                    	MOV	AH,1
 11379 00001704 E8922C                  	CALL	IOFUNC
 11380 00001707 74F6                    	JZ	SHORT AUXILP
 11381 00001709 30E4                    	XOR	AH,AH
 11382                                  	; 16/12/2022
 11383                                  	;CALL	IOFUNC
 11384                                  	;RETN
 11385                                  	; 07/12/2022
 11386 0000170B E98B2C                  	jmp	IOFUNC
 11387                                  
 11388                                  ;
 11389                                  ;----------------------------------------------------------------------------
 11390                                  ;
 11391                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11392                                  ;
 11393                                  ;	ENTRY	(dl) = character
 11394                                  ;	EXIT	none
 11395                                  ;	USES	all
 11396                                  ;
 11397                                  ;----------------------------------------------------------------------------
 11398                                  ;
 11399                                  
 11400                                  _$STD_AUX_OUTPUT:	;System call 4
 11401                                  
 11402 0000170E 53                      	PUSH	BX
 11403 0000170F BB0300                  	MOV	BX,3
 11404 00001712 EB04                    	JMP	SHORT SENDOUT
 11405                                  
 11406                                  ;
 11407                                  ;----------------------------------------------------------------------------
 11408                                  ;
 11409                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11410                                  ;
 11411                                  ;	ENTRY	(dl) = character
 11412                                  ;	EXIT	none
 11413                                  ;	USES	all
 11414                                  ;
 11415                                  ;----------------------------------------------------------------------------
 11416                                  ;
 11417                                  
 11418                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11419                                  
 11420 00001714 53                      	PUSH	BX
 11421 00001715 BB0400                  	MOV	BX,4
 11422                                  
 11423                                  SENDOUT:
 11424 00001718 88D0                    	MOV	AL,DL
 11425 0000171A 50                      	PUSH	AX
 11426 0000171B E83439                  	CALL	STATCHK
 11427 0000171E 58                      	POP	AX
 11428 0000171F 1E                      	PUSH	DS
 11429 00001720 56                      	PUSH	SI
 11430                                  LISSTRT2:
 11431 00001721 E8D0FE                  	CALL	RAWOUT2
 11432                                  TRIPOP:
 11433 00001724 5E                      	POP	SI
 11434 00001725 1F                      	POP	DS
 11435 00001726 5B                      	POP	BX
 11436                                  SCIS_RETN:	; 20/07/2018
 11437 00001727 C3                      	RETN
 11438                                  ;
 11439                                  ;----------------------------------------------------------------------------
 11440                                  ;
 11441                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11442                                  ;
 11443                                  ;	Check console input status
 11444                                  ;
 11445                                  ;	ENTRY	none
 11446                                  ;	EXIT	AL = -1 character available, = 0 no character
 11447                                  ;	USES	all
 11448                                  ;
 11449                                  ;----------------------------------------------------------------------------
 11450                                  ;
 11451                                  
 11452                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11453                                  
 11454 00001728 E82739                  	CALL	STATCHK
 11455 0000172B B000                    	MOV	AL,0		; no xor!!
 11456                                  	;retz
 11457 0000172D 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11458 0000172F 0CFF                    	OR	AL,-1
 11459                                  ;SCIS_RETN:
 11460 00001731 C3                      	RETN
 11461                                  
 11462                                  ;
 11463                                  ;----------------------------------------------------------------------------
 11464                                  ;
 11465                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11466                                  ;
 11467                                  ;	Flush console input buffer and perform call in AL
 11468                                  ;
 11469                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11470                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11471                                  ;		return arguments for the fcn supplied in (AL)
 11472                                  ;	USES	all
 11473                                  ;
 11474                                  ;----------------------------------------------------------------------------
 11475                                  ;
 11476                                  
 11477                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11478                                  
 11479 00001732 50                      	PUSH	AX
 11480 00001733 52                      	PUSH	DX
 11481 00001734 31DB                    	XOR	BX,BX
 11482 00001736 E8581E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11483                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11484 00001739 7205                    	JC	SHORT BADJFNCON
 11485 0000173B B404                    	MOV	AH,4
 11486 0000173D E8592C                  	CALL	IOFUNC
 11487                                  
 11488                                  BADJFNCON:
 11489 00001740 5A                      	POP	DX
 11490 00001741 58                      	POP	AX
 11491 00001742 88C4                    	MOV	AH,AL
 11492 00001744 3C01                    	CMP	AL,1
 11493 00001746 7413                    	JZ	SHORT REDISPJ
 11494 00001748 3C06                    	CMP	AL,6
 11495 0000174A 740F                    	JZ	SHORT REDISPJ
 11496 0000174C 3C07                    	CMP	AL,7
 11497 0000174E 740B                    	JZ	SHORT REDISPJ
 11498 00001750 3C08                    	CMP	AL,8
 11499 00001752 7407                    	JZ	SHORT REDISPJ
 11500 00001754 3C0A                    	CMP	AL,10
 11501 00001756 7403                    	JZ	SHORT REDISPJ
 11502 00001758 B000                    	MOV	AL,0
 11503 0000175A C3                      	RETN
 11504                                  
 11505                                  REDISPJ:
 11506 0000175B FA                      	CLI
 11507                                  	;transfer REDISP
 11508 0000175C E928EC                  	JMP	REDISP
 11509                                  
 11510                                  ;============================================================================
 11511                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11512                                  ;============================================================================
 11513                                  ; 20/07/2018 - Retro DOS v3.0
 11514                                  ; 17/05/2019 - Retro DOS v4.0
 11515                                  
 11516                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11517                                  ;
 11518                                  ;	$GET_FCB_POSITION
 11519                                  ;	$FCB_DELETE
 11520                                  ;	$GET_FCB_FILE_LENGTH
 11521                                  ;	$FCB_CLOSE
 11522                                  ;	$FCB_RENAME
 11523                                  ;	SaveFCBInfo
 11524                                  ;	ResetLRU
 11525                                  ;	SetOpenAge
 11526                                  ;	LRUFCB
 11527                                  ;	FCBRegen
 11528                                  ;	BlastSFT
 11529                                  ;	CheckFCB
 11530                                  ;	SFTFromFCB
 11531                                  ;	FCBHardErr
 11532                                  ;
 11533                                  ;	Revision history:
 11534                                  ;
 11535                                  ;		Created: ARR 4 April 1983"
 11536                                  ;			 MZ  6 June  1983 completion of functions
 11537                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11538                                  ;					  times.  Change so successive closes work by
 11539                                  ;					  always returning OK.	Also, detect I/O to
 11540                                  ;					  already closed FCB and return EOF.
 11541                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11542                                  ;					  out of sft into FCB for reconnection
 11543                                  ;
 11544                                  ;		A000	 version 4.00  Jan. 1988
 11545                                  
 11546                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11547                                  ;----------------------------------------------------------------------------
 11548                                  ;
 11549                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11550                                  ;	extent and next record field and set the random record field to point
 11551                                  ;	to that record
 11552                                  ;
 11553                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11554                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11555                                  ;   Registers modified: all
 11556                                  ;
 11557                                  ;----------------------------------------------------------------------------
 11558                                  ;
 11559                                  
 11560                                  _$GET_FCB_POSITION:
 11561 0000175F E8D404                  	call	GetExtended		; point to FCB
 11562 00001762 E8A504                  	call	GetExtent		; DX:AX is current record
 11563                                  	;mov	[si+21h],ax
 11564 00001765 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11565                                  	;mov	[si+23h],dl
 11566 00001768 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11567                                  	;cmp	word [si+0Eh],64
 11568 0000176B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11569 0000176F 7303                    	JAE	short GetFCBBye
 11570                                  	;mov	[si+24h],dh
 11571 00001771 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11572                                  GoodPath:	; 16/12/2022
 11573                                  GetFCBBye:
 11574 00001774 E9DAEE                  	jmp	FCB_RET_OK
 11575                                  
 11576                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11577                                  ;----------------------------------------------------------------------------
 11578                                  ;
 11579                                  ;**	$FCB_Delete - Delete from FCB Template
 11580                                  ;
 11581                                  ;	given an FCB, remove all directory entries in the current
 11582                                  ;	directory that have names that match the FCB's ?  marks.
 11583                                  ;
 11584                                  ;	ENTRY	(DS:DX) = address of FCB
 11585                                  ;	EXIT	entries matching the FCB are deleted
 11586                                  ;		(al) = ff iff no entries were deleted
 11587                                  ;	USES	all
 11588                                  ;
 11589                                  ;----------------------------------------------------------------------------
 11590                                  ;
 11591                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11592                                  
 11593                                  _$FCB_DELETE:		; System call 19
 11594                                  					; OpenBuf is in DOSDATA
 11595 00001777 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11596                                  
 11597 0000177A E84C52                  	call	TransFCB		; convert FCB to path
 11598 0000177D 7207                    	JC	short BadPath 		; signal no deletions
 11599                                  
 11600 0000177F 16                      	push	SS
 11601 00001780 1F                      	pop	DS			; SS is DOSDATA
 11602                                  
 11603 00001781 E8370D                  	call	DOS_DELETE		; wham
 11604                                  	;JC	short BadPath
 11605                                  	; 16/12/2022
 11606 00001784 73EE                    	jnc 	short GoodPath
 11607                                  ;GoodPath:
 11608                                  ;	;jmp	FCB_RET_OK		; do a good return
 11609                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11610                                  ;	jmp	short GetFCBBye
 11611                                  
 11612                                  BadPath:
 11613                                  	; Error code is in AX
 11614                                  
 11615 00001786 E9CBEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11616                                  
 11617                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11618                                  ;----------------------------------------------------------------------------
 11619                                  ;
 11620                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11621                                  ;	file in records (rounded up if partial).
 11622                                  ;
 11623                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11624                                  ;   Outputs:	Random record field updated to reflect the number of records
 11625                                  ;   Registers modified: all
 11626                                  ;
 11627                                  ;----------------------------------------------------------------------------
 11628                                  ;
 11629                                  	; 15/01/2024
 11630                                  
 11631                                  _$GET_FCB_FILE_LENGTH:
 11632                                  
 11633 00001789 E8AA04                  	call	GetExtended		; get real FCB pointer
 11634                                  					; DX points to Input FCB
 11635                                  
 11636                                  					; OpenBuf is in DOSDATA
 11637 0000178C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11638                                  
 11639 0000178F 1E                      	push	ds			; save pointer to true FCB
 11640 00001790 56                      	push	si
 11641 00001791 E83552                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11642 00001794 5E                      	pop	si
 11643 00001795 1F                      	pop	ds
 11644 00001796 72EE                    	JC	short BadPath
 11645 00001798 1E                      	push	ds			; save pointer
 11646 00001799 56                      	push	si
 11647 0000179A 16                      	push	ss		
 11648 0000179B 1F                      	pop	ds
 11649 0000179C E81A11                  	call	GET_FILE_INFO		; grab the info
 11650 0000179F 5E                      	pop	si			; get pointer back
 11651 000017A0 1F                      	pop	ds
 11652 000017A1 72E3                    	JC	short BadPath 		; invalid something
 11653                                  	; 15/01/2024
 11654                                  	;MOV	DX,BX (*)		; get high order size
 11655                                  	;MOV	AX,DI (**)		; get low order size
 11656 000017A3 89D8                    	mov	ax,bx ; hw of file size
 11657                                  	;
 11658                                  	;mov	bx,[si+0Eh]
 11659 000017A5 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11660 000017A8 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11661 000017AA 7502                    	JNZ	short GetSize 		; not empty
 11662                                  	;MOV	BX,128
 11663 000017AC B380                    	mov	bl,128	; 15/01/2024
 11664                                  GetSize:
 11665                                  	; 15/01/2024
 11666                                  	;MOV	DI,AX			; save low order word
 11667                                  	;MOV	AX,DX			; move high order for divide
 11668                                  	;xchg	ax,dx ; (*)
 11669                                  	; ax = hw of file size
 11670                                  
 11671 000017AE 31D2                    	XOR	DX,DX			; clear out high
 11672 000017B0 F7F3                    	DIV	BX			; wham
 11673 000017B2 50                      	PUSH	AX			; save dividend
 11674 000017B3 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11675 000017B5 F7F3                    	DIV	BX			; wham
 11676 000017B7 89D1                    	MOV	CX,DX			; save remainder
 11677 000017B9 5A                      	POP	DX			; get high order dividend
 11678 000017BA E306                    	JCXZ	LengthStore		; no roundup
 11679 000017BC 83C001                  	ADD	AX,1
 11680 000017BF 83D200                  	ADC	DX,0			; 32-bit increment
 11681                                  LengthStore:
 11682                                  	;mov	[si+21h],ax
 11683 000017C2 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11684                                  	;mov	[si+23h],dl
 11685 000017C5 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11686 000017C8 08F6                    	OR	DH,DH
 11687 000017CA 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11688                                  	;mov	[si+24h],dh
 11689 000017CC 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11690                                  	; 16/12/2022
 11691                                  GoodRet:
 11692                                  	;jmp	FCB_RET_OK
 11693 000017CF EBA3                    	jmp	short GoodPath
 11694                                  
 11695                                  ;Break <$FCB_Close - close a file>
 11696                                  ;----------------------------------------------------------------------------
 11697                                  ;
 11698                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11699                                  ;	as the FCB may be used for further I/O
 11700                                  ;
 11701                                  ;   Inputs:	DS:DX point to FCB
 11702                                  ;   Outputs:	AL = FF if file was not found on disk
 11703                                  ;   Registers modified: all
 11704                                  ;
 11705                                  ;----------------------------------------------------------------------------
 11706                                  ;
 11707                                  	; 16/01/2024
 11708                                  
 11709                                  _$FCB_CLOSE:		; System call 16
 11710                                  
 11711 000017D1 30C0                    	XOR	AL,AL			; default search attributes
 11712 000017D3 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11713 000017D6 7403                    	JZ	short NoAttr		; not extended
 11714 000017D8 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11715                                  NoAttr:
 11716                                  					; SS override
 11717 000017DB 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11718 000017DF E8C303                  	call	SFTFromFCB
 11719 000017E2 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11720                                  
 11721                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11722                                  	; there is no need to set the SFT's attribute.
 11723                                  
 11724                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11725                                  	;;; done
 11726                                  
 11727                                  	;mov	al,[es:di+4]
 11728 000017E4 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11729 000017E8 30E4                    	XOR	AH,AH
 11730 000017EA 50                      	PUSH	AX
 11731                                  
 11732                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11733                                  	;;; done
 11734                                  
 11735 000017EB E8C959                  	call	CheckShare
 11736 000017EE 7508                    	JNZ	short NoStash
 11737 000017F0 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11738                                  	;mov	[es:di+4],al
 11739 000017F4 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11740                                  NoStash:
 11741                                  
 11742                                  ; 16/01/2024
 11743                                  %if 0
 11744                                  	;mov	ax,[si+14h]
 11745                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11746                                  	;mov	[es:di+0Fh],ax
 11747                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11748                                  	;mov	ax,[si+16h]
 11749                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11750                                  	;mov	[es:di+0Dh],ax
 11751                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11752                                  	;mov	ax,[si+10h]
 11753                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11754                                  	;mov	[es:di+11h],ax
 11755                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11756                                  	;mov	ax,[si+12h]
 11757                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11758                                  	;mov	[es:di+13h],ax
 11759                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11760                                  	;or	word [es:di+5],4000h
 11761                                  	; 17/12/2022
 11762                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11763                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11764                                  %else
 11765                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11766 000017F8 1E                      	push	ds
 11767                                  	;lds	ax,[si+14h]
 11768 000017F9 C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11769                                  	;mov	[es:di+0Fh],ax
 11770 000017FC 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11771                                  	;mov	[es:di+0Dh],ds		
 11772 00001800 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11773 00001804 1F                      	pop	ds
 11774                                  	;lds	ax,[si+10h]
 11775 00001805 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11776                                  	;mov	[es:di+11h],ax
 11777 00001808 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11778                                  	;mov	[es:di+13h],ds
 11779 0000180C 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11780                                  	; 16/01/2024
 11781                                  	;;or	word [es:di+5],4000h
 11782                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 11783 00001810 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11784                                  %endif
 11785                                  
 11786 00001815 16                      	push	ss
 11787 00001816 1F                      	pop	ds
 11788 00001817 E89016                  	call	DOS_CLOSE	; wham
 11789 0000181A C43E[9E05]              	LES	DI,[THISSFT]
 11790                                  
 11791                                  	;;; 9/8/86 F.C. restore SFT attribute
 11792 0000181E 59                      	POP	CX
 11793                                  	;mov	[es:di+4],cl
 11794 0000181F 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11795                                  	;;; 9/8/86 F.C. restore SFT attribute
 11796                                  
 11797 00001823 9C                      	PUSHF
 11798                                  	;test	word [es:di],0FFFFh
 11799                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11800                                  				; zero ref count gets blasted
 11801 00001824 26833D00                	cmp	word [ES:DI],0
 11802 00001828 7507                    	jnz     short CloseOK
 11803 0000182A 50                      	PUSH	AX
 11804 0000182B B04D                    	MOV	AL,'M' ; 4Dh
 11805 0000182D E8F202                  	call	BlastSFT
 11806 00001830 58                      	POP	AX
 11807                                  CloseOK:
 11808 00001831 9D                      	POPF
 11809 00001832 739B                    	JNC	short GoodRet
 11810                                  	;cmp	al,6
 11811 00001834 3C06                    	CMP	AL,error_invalid_handle
 11812 00001836 7497                    	JZ	short GoodRet
 11813                                  	;mov	al,2
 11814 00001838 B002                    	MOV	AL,error_file_not_found
 11815                                  fren90:
 11816                                  	; 16/12/2022
 11817                                  fcb_close_err:
 11818 0000183A E917EE                  	jmp	FCB_RET_ERR
 11819                                  
 11820                                  ;
 11821                                  ;----------------------------------------------------------------------------
 11822                                  ;
 11823                                  ;**	$FCB_Rename - Rename a File
 11824                                  ;
 11825                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11826                                  ;	multiple files copying from the meta characters.
 11827                                  ;
 11828                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11829                                  ;		    name of the files to be renamed. Starting at offset 11h
 11830                                  ;		    in the FCB is the destination name.
 11831                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11832                                  ;		AL = FF -> some files may have been renamed but:
 11833                                  ;			rename to existing file or source file not found
 11834                                  ;	USES	ALL
 11835                                  ;
 11836                                  ;----------------------------------------------------------------------------
 11837                                  ;
 11838                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11839                                  
 11840                                  _$FCB_RENAME:		; System call 23
 11841                                  
 11842 0000183D E8F603                  	call	GetExtended		; get pointer to real FCB
 11843 00001840 52                      	push	dx
 11844 00001841 8A04                    	MOV	AL,[SI] 		; get drive byte
 11845 00001843 83C610                  	ADD	SI,10h			; point to destination
 11846                                  
 11847                                  					; RenBuf is in DOSDATA
 11848 00001846 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11849 00001849 FF34                    	push	word [SI]
 11850 0000184B 1E                      	push	ds
 11851                                  	;push	di			; save source pointer for TransFCB
 11852                                  	; 16/01/2024 - BugFix !
 11853 0000184C 56                      	push	si
 11854 0000184D 8804                    	MOV	[SI],AL			; drop in real drive
 11855 0000184F 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11856 00001851 E87551                  	call	TransFCB		; munch this pathname
 11857 00001854 5E                      	pop	si
 11858 00001855 1F                      	pop	ds	
 11859 00001856 8F04                    	pop	WORD [SI]		; get path back
 11860 00001858 5A                      	pop	dx			; Original FCB pointer
 11861 00001859 72DF                    	JC	short fren90		; bad path -> error
 11862                                  
 11863                                  					; SS override for WFP_Start & Ren_WFP
 11864 0000185B 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11865 00001860 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11866                                  
 11867                                  					; OpenBuf is in DOSDATA
 11868 00001865 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11869 00001868 E85E51                  	call	TransFCB		; wham
 11870                                  					; NOTE that this call is pointing
 11871                                  					;  back to the ORIGINAL FCB so
 11872                                  					;  SATTRIB gets set correctly
 11873 0000186B 72CD                    	JC	short fren90		; error
 11874 0000186D E81F0E                  	call	DOS_RENAME
 11875 00001870 72C8                    	JC	short fren90
 11876                                  	; 16/12/2022
 11877 00001872 E9DCED                  	jmp	FCB_RET_OK
 11878                                  	
 11879                                  ;	Error -
 11880                                  ;
 11881                                  ;	(al) = error code
 11882                                  
 11883                                  	; 16/12/2022
 11884                                  ;fren90:	
 11885                                  ;	;jmp	FCB_RET_ERR
 11886                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11887                                  ;	jmp	short fcb_close_err
 11888                                  
 11889                                  ;Break <Misbehavior fixers>
 11890                                  ;
 11891                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11892                                  ;   user's space so he may move them at will. Second, they have a small
 11893                                  ;   reserved area that may be used for system information. Third, there was
 11894                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11895                                  ;   usage.
 11896                                  ;
 11897                                  ;   This results in the following misbehavior:
 11898                                  ;
 11899                                  ;	infinite opens of the same file:
 11900                                  ;
 11901                                  ;	While (TRUE) {			While (TRUE) {
 11902                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11903                                  ;	    Read (FCB); 		    Write (FCB);
 11904                                  ;	    }				    }
 11905                                  ;
 11906                                  ;	infinite opens of different files:
 11907                                  ;
 11908                                  ;	While (TRUE) {			While (TRUE) {
 11909                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11910                                  ;	    Read (FCB); 		    Write (FCB);
 11911                                  ;	    }				    }
 11912                                  ;
 11913                                  ;	multiple closes of the same file:
 11914                                  ;
 11915                                  ;	FCBOpen (FCB);
 11916                                  ;	while (TRUE)
 11917                                  ;	    FCBClose (FCB);
 11918                                  ;
 11919                                  ;	I/O after closing file:
 11920                                  ;
 11921                                  ;	FCBOpen (FCB);
 11922                                  ;	while (TRUE) {
 11923                                  ;	    FCBWrite (FCB);
 11924                                  ;	    FCBClose (FCB);
 11925                                  ;	    }
 11926                                  ;
 11927                                  ;   The following is am implementation of a methodology for emulating the
 11928                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11929                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11930                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11931                                  ;   the local machine.
 11932                                  ;
 11933                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11934                                  ;   structures depending on the file itself and the state of operations of the
 11935                                  ;   OS. The information contained in this reserved field is enough to
 11936                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11937                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11938                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11939                                  ;
 11940                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11941                                  ;
 11942                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11943                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11944                                  ;   regenerated.
 11945                                  ;
 11946                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11947                                  ;   longer available. We can make up for this by using the following
 11948                                  ;   information:
 11949                                  ;
 11950                                  ;	The Drive number (from the DPB).
 11951                                  ;	The physical sector of the directory that contains the entry.
 11952                                  ;	The relative position of the entry in the sector.
 11953                                  ;	The first cluster field.
 11954                                  ;	The last used SFT.
 11955                                  ;      OR In the case of a device FCB
 11956                                  ;	The low 6 bits of sf_flags (indicating device type)
 11957                                  ;	The pointer to the device header
 11958                                  ;
 11959                                  ;   We read in the particular directory sector and examine the indicated
 11960                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11961                                  ;
 11962                                  ;   Some key items need to be remembered:
 11963                                  ;
 11964                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11965                                  ;	information. We enforce good behavior on the FCBs.
 11966                                  ;
 11967                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11968                                  ;	open VCs. The VCs may be closed only at process termination.
 11969                                  ;
 11970                                  ;	If this is not an installed version of the DOS, file sharing will
 11971                                  ;	always be present.
 11972                                  ;
 11973                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11974                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11975                                  ;
 11976                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11977                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11978                                  ;	proper OI record.
 11979                                  ;
 11980                                  ;   The test bits are:
 11981                                  ;
 11982                                  ;	00 -> local file
 11983                                  ;	40 -> sharing local
 11984                                  ;	80 -> network
 11985                                  ;	C0 -> local device
 11986                                  
 11987                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11988                                  ;----------------------------------------------------------------------------
 11989                                  ;
 11990                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11991                                  ;	pieces of information into the FCB to allow for subsequent
 11992                                  ;	regeneration. Poke LRU also.
 11993                                  ;
 11994                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11995                                  ;		DS:SI point to the FCB (not an extended one)
 11996                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11997                                  ;		DS:SI preserved
 11998                                  ;		ES:DI point to sft
 11999                                  ;   Registers modified: All
 12000                                  ;
 12001                                  ;
 12002                                  ;----------------------------------------------------------------------------
 12003                                  ;
 12004                                  	; 20/01/2024
 12005                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12006                                  
 12007                                  SaveFCBInfo:
 12008                                  
 12009 00001875 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12010 0000187A E8CCF9                  	call	IsSFTNet
 12011 0000187D 740B                    	JZ	short SaveLocal		; if not network then save local info
 12012                                  ;
 12013                                  ;----- In net support -----
 12014                                  ;
 12015                                  	; 17/05/2019 - Retro DOS v4.0
 12016                                  
 12017                                  	; MSDOS 3.3
 12018                                  	;;mov	ax,[es:di+1Dh]
 12019                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12020                                  	;;mov	[si+1Ah],ax
 12021                                  	;mov	[si+fcb_net_handle],ax
 12022                                  	;push	es
 12023                                  	;push	di
 12024                                  	;;les	di,[es:di+19h]
 12025                                  	;LES	DI,[ES:DI+sf_netid]
 12026                                  	;;mov	[si+1Ch],di
 12027                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12028                                  	;;mov 	[si+1Eh],es
 12029                                  	;MOV	[SI+fcb_netID+2],ES
 12030                                  	;pop	di
 12031                                  	;pop	es
 12032                                  
 12033                                  	; MSDOS 6.0
 12034                                  	;mov	ax,[es:di+0Bh]
 12035 0000187F 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12036                                  	;mov	[si+1Ch],ax
 12037 00001883 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12038                                  	
 12039                                  	;mov	bl,80h
 12040 00001886 B380                    	MOV	BL,FCBNETWORK
 12041                                  ;
 12042                                  ;----- END In net support -----
 12043                                  ;
 12044 00001888 EB63                    	jmp	SHORT SaveSFN
 12045                                  
 12046                                  SaveLocal:
 12047                                  	;IF	Installed
 12048 0000188A E82A59                  	call	CheckShare
 12049                                  	;JZ	short SaveNoShare	; no sharer
 12050                                  	;JMP	short SaveShare		; sharer present
 12051                                  	; 16/12/2022
 12052                                  	; 28/07/2019
 12053 0000188D 7559                    	jnz	short SaveShare
 12054                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12055                                  	;JZ	short SaveNoShare	; no sharer
 12056                                  	;JMP	short SaveShare		; sharer present
 12057                                  
 12058                                  SaveNoShare:
 12059                                  	;;test 	word [es:di+5],80h
 12060                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12061 0000188F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12062 00001894 7542                    	JNZ	short SaveNoShareDev	; Device
 12063                                  
 12064                                  	; Save no sharing local file information
 12065                                  
 12066                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12067                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12068 00001896 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12069                                  	;mov	[si+1Dh],ax
 12070 0000189A 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12071                                  
 12072                                  	; MSDOS 6.0
 12073                                  
 12074                                  	;SR; Store high byte of directory sector
 12075                                  	;mov	ax,[es:di+1Dh]
 12076 0000189D 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12077                                  	
 12078                                  	; SR;
 12079                                  	; We have to store the read-only and archive attributes of the file.
 12080                                  	; We extract it from the SFT and store it in the top two bits of the 
 12081                                  	; sector number ( sector number == 22 bits only )
 12082                                  
 12083                                  	;mov	bl,[es:di+4]
 12084 000018A1 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12085 000018A5 88DF                    	mov	bh,bl
 12086 000018A7 D0CB                    	ror	bl,1
 12087 000018A9 D0E7                    	shl	bh,1
 12088 000018AB 08FB                    	or	bl,bh
 12089 000018AD 80E3C0                  	and	bl,0C0h
 12090 000018B0 08D8                    	or	al,bl
 12091                                  	;mov	[si+18h],al ; 08/11/2022
 12092 000018B2 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12093                                  
 12094                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12095                                  	;mov	al,[es:di+1Fh]
 12096 000018B5 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12097                                  	;mov	[si+1Fh],al
 12098 000018B9 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12099                                  	;mov	ax,[es:di+0Bh]
 12100 000018BC 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12101                                  	;mov	[si+1Bh],ax
 12102 000018C0 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12103 000018C3 B300                    	MOV	BL,0
 12104                                  
 12105                                  	; Create the bits field from the dirty/device bits of the flags word 
 12106                                  	; and the mode byte
 12107                                  
 12108                                  SetFCBBits:
 12109                                  	;mov	ax,[es:di+5]
 12110 000018C5 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12111 000018C9 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12112                                  	;or	al,[es:di+2]
 12113 000018CB 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12114                                  	;mov	[si+1Ah], al
 12115 000018CF 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12116                                  
 12117                                  	; MSDOS 6.0
 12118                                  	
 12119                                  	; SR;
 12120                                  	; Check if we came here for local file or device. If for local file, 
 12121                                  	; skip setting of SFT index
 12122                                  	
 12123 000018D2 08DB                    	or	bl,bl
 12124 000018D4 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12125                                  
 12126 000018D6 EB15                    	JMP	short SaveSFN 		; go and save SFN
 12127                                  
 12128                                  	; Save no sharing local device information
 12129                                  
 12130                                  SaveNoShareDev:
 12131                                  	; 20/01/2024
 12132                                  	;;mov	ax,[es:di+7]
 12133                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12134                                  	;;mov	[si+1Ah],ax
 12135                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12136                                  	;;mov	ax,[es:di+9]
 12137                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12138                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12139                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12140 000018D8 06                      	push	es
 12141 000018D9 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12142 000018DD 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12143 000018E0 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12144 000018E3 07                      	pop	es
 12145                                  	
 12146                                  	;mov	bl,40h
 12147 000018E4 B340                    	MOV	BL,FCBDEVICE
 12148                                  	; 28/12/2022
 12149 000018E6 EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12150                                  
 12151                                  SaveShare:
 12152                                  	;ENDIF
 12153                                  
 12154                                  ;----- In share support -----
 12155                                  
 12156                                  	;call	far [ss:ShSave]
 12157 000018E8 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12158                                  
 12159                                  ;----- end in share support -----
 12160                                  
 12161                                  	; 17/05/2019
 12162                                  
 12163                                  SaveSFN:
 12164                                  	;lea	ax,[di-6]
 12165 000018ED 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12166                                  	
 12167                                  	; Adjust for offset to table.
 12168                                  	
 12169 000018F0 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12170                                  
 12171 000018F5 53                      	push	bx			;bx = FCB type (net/Share or local)
 12172                                  	;;mov	bl,53 ; MSDOS 3.3
 12173                                  	;mov	bl,59 ; MSDOS 6.0
 12174 000018F6 B33B                    	MOV	BL,SF_ENTRY.size
 12175 000018F8 F6F3                    	DIV	BL
 12176                                  	;mov	[si+18h],al
 12177 000018FA 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12178 000018FD 5B                      	pop	bx			;restore bx
 12179                                  
 12180                                  SaveNoSFN:
 12181                                  	;mov	ax,[es:di+5]
 12182 000018FE 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12183 00001902 243F                    	AND	AL,3Fh			; get real drive
 12184 00001904 08D8                    	OR	AL,BL
 12185                                  	;mov	[si+19h],al
 12186 00001906 884419                  	MOV	[SI+fcb_l_drive],AL
 12187                                  
 12188 00001909 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12189 0000190D 40                      	INC	AX
 12190                                  	;mov	[es:di+15h],ax
 12191 0000190E 26894515                	MOV	[ES:DI+sf_LRU],AX
 12192 00001912 7506                    	JNZ	short SimpleStuff
 12193                                  	
 12194                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12195                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12196                                  	
 12197                                  	;mov	bx,15h
 12198 00001914 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12199 00001917 E80500                  	call	ResetLRU
 12200                                  
 12201                                  	; Set new LRU to AX
 12202                                  SimpleStuff:
 12203 0000191A 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12204 0000191E C3                      	retn
 12205                                  
 12206                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12207                                  ;----------------------------------------------------------------------------
 12208                                  ;
 12209                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12210                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12211                                  ;   at 0.
 12212                                  ;
 12213                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12214                                  ;		ES:DI point to SFT currently being updated
 12215                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12216                                  ;		AX has 8000h
 12217                                  ;   Registers modified: none
 12218                                  ;
 12219                                  ;----------------------------------------------------------------------------
 12220                                  ;
 12221                                  
 12222                                  	; 17/05/2019 - Retro DOS v4.0
 12223                                  ResetLRU:
 12224                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12225                                  	; DOSDATA
 12226                                  
 12227 0000191F B80080                  	MOV	AX,8000h
 12228 00001922 06                      	push	es
 12229 00001923 57                      	push	di
 12230                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12231 00001924 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12232                                  	;mov	cx,[es:di+4]
 12233 00001929 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12234                                  	;lea	di,[di+6]
 12235 0000192D 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12236                                  ovScan:
 12237 00001930 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12238 00001933 7703                    	JA	short ovLoop
 12239 00001935 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12240                                  ovLoop:
 12241                                  	;;add	di,53	; MSDOS 3.3
 12242                                  	;add	di,59	; MSDOS 6.0	
 12243 00001938 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12244 0000193B E2F3                    	LOOP	ovScan
 12245 0000193D 5F                      	pop	di
 12246 0000193E 07                      	pop	es
 12247 0000193F 268901                  	MOV	[ES:DI+BX],AX
 12248 00001942 C3                      	retn
 12249                                  
 12250                                  ;IF  0  ; We dont need this routine any more.
 12251                                  ;
 12252                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12253                                  ;----------------------------------------------------------------------------
 12254                                  ;
 12255                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12256                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12257                                  ;   count here and fill in the appropriate field.
 12258                                  ;
 12259                                  ;   Inputs:	ES:DI point to SFT
 12260                                  ;   Outputs:	ES:DI has the open age field filled in.
 12261                                  ;		If open age has wraparound, we will have subtracted 8000h
 12262                                  ;		    from all open ages.
 12263                                  ;   Registers modified: AX
 12264                                  ;
 12265                                  ;----------------------------------------------------------------------------
 12266                                  ;
 12267                                  ;SetOpenAge:
 12268                                  ;	; 20/07/2018 - Retro DOS v3.0
 12269                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12270                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12271                                  ;
 12272                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12273                                  ;
 12274                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12275                                  ;	INC	AX
 12276                                  ;	;mov	[es:di+17h],ax
 12277                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12278                                  ;	JNZ	short SetDone
 12279                                  ;	;mov	bx,17h
 12280                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12281                                  ;	call	ResetLRU
 12282                                  ;SetDone:
 12283                                  ;	MOV	[CS:OpenLRU],AX
 12284                                  ;	retn
 12285                                  ;
 12286                                  ;ENDIF	; SetOpenAge no longer needed
 12287                                  
 12288                                  ; 21/07/2018 - Retro DOS v3.0
 12289                                  ; LRUFCB for MSDOS 6.0 !
 12290                                  
 12291                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12292                                  ;----------------------------------------------------------------------------
 12293                                  ;
 12294                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12295                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12296                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12297                                  ;
 12298                                  ;   Inputs:	none
 12299                                  ;   Outputs:	ES:DI point to SFT
 12300                                  ;		ThisSFT points to SFT
 12301                                  ;		SFT is zeroed
 12302                                  ;		Carry set of closes failed
 12303                                  ;   Registers modified: none
 12304                                  ;
 12305                                  ;----------------------------------------------------------------------------
 12306                                  ;
 12307                                  ; MSDOS 6.0
 12308                                  ;IF 0	; rewritten this routine
 12309                                  ;
 12310                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12311                                  ;	call	save_world
 12312                                  ;	
 12313                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12314                                  ; to find the lease recently used one that is younger than the open age.  We
 12315                                  ; operate be scanning the list n times finding the least age that is greater
 12316                                  ; or equal to the previous minimum age.
 12317                                  ;
 12318                                  ;   BP is the count of times we need to go through this loop.
 12319                                  ;   AX is the current acceptable minimum age to consider
 12320                                  ;
 12321                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12322                                  ;	XOR	AX,AX			; low = 0;
 12323                                  ;
 12324                                  ; If we've scanned the table n times, then we are done.
 12325                                  ;
 12326                                  ;lru1:
 12327                                  ;	CMP	bp,0			; while (k--) {
 12328                                  ;	JZ	short lru75
 12329                                  ;	DEC	bp
 12330                                  ;
 12331                                  ; Set up for scan.
 12332                                  ;
 12333                                  ;   AX is the minimum age for consideration
 12334                                  ;   BX is the minimum age found during the scan
 12335                                  ;   SI is the position of the entry that corresponds to BX
 12336                                  ;
 12337                                  ;	MOV	BX,-1			;     min = 0xffff;
 12338                                  ;	MOV	si,BX			;     pos = 0xffff;
 12339                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12340                                  ;	;mov	cx,[es:di+4]
 12341                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12342                                  ;	;lea	di,[di+6]
 12343                                  ;	LEA	DI,[DI+SFT.SFTable]
 12344                                  ;
 12345                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12346                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12347                                  ; are done.  In both cases, we use the found entry.
 12348                                  ;
 12349                                  ;lru2:
 12350                                  ;	cmp	word [es:di],0
 12351                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12352                                  ;	jz	short lru25
 12353                                  ;	;cmp	word [es:di],-1
 12354                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12355                                  ;	cmp	word [es:di],sf_busy
 12356                                  ;	jnz	short lru3
 12357                                  ;
 12358                                  ; The entry is usable without further scan.  Go and use it.
 12359                                  ;
 12360                                  ;lru25:
 12361                                  ;	MOV	si,DI			;	      pos = i;
 12362                                  ;	JMP	short lru11		;	      goto got;
 12363                                  ;
 12364                                  ; See if the entry is for the network or for the sharer.
 12365                                  ;
 12366                                  ;  If for the sharer or network then
 12367                                  ;	if the age < current minimum AND >= allowed minimum then
 12368                                  ;	    this entry becomes current minimum
 12369                                  ;
 12370                                  ;lru3:
 12371                                  ;	;test	word [es:di+5],8000h
 12372                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12373                                  ;					;	  if (!net[i]
 12374                                  ;	JNZ	short lru35
 12375                                  ;if installed
 12376                                  ;	call	CheckShare		;		&& !sharing)
 12377                                  ;	JZ	short lru5		;	  else
 12378                                  ;ENDIF
 12379                                  ;
 12380                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12381                                  ; current minimum.
 12382                                  ;
 12383                                  ;lru35:
 12384                                  ;	;mov	dx,[es:di+17h]
 12385                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12386                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12387                                  ;	JB	short lru5
 12388                                  ;	CMP	DX,BX
 12389                                  ;	JAE	short lru5		;	      age[i] < min) {
 12390                                  ;
 12391                                  ; entry is new minimum.  Remember his age.
 12392                                  ;
 12393                                  ;	mov	bx,DX			;	      min = age[i];
 12394                                  ;	mov	si,di			;	      pos = i;
 12395                                  ;
 12396                                  ; End of loop.	gp back for more
 12397                                  ;
 12398                                  ;lru5:
 12399                                  ;	;add	di,53
 12400                                  ;	add	di,SF_ENTRY.size
 12401                                  ;	loop	lru2			;	      }
 12402                                  ;
 12403                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12404                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12405                                  ; complete.  Go find LRU.
 12406                                  ;
 12407                                  ;lru6:	
 12408                                  ;	cmp	si,-1			; position not -1?
 12409                                  ;	jz	short lru75		; no, done with everything
 12410                                  ;	lea	ax,[bx+1]		; set new threshold age
 12411                                  ;	jmp	short lru1		; go and loop for more
 12412                                  ;lru65:	
 12413                                  ;	stc
 12414                                  ;	jmp	short LRUDead		;	  return -1;
 12415                                  ;
 12416                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12417                                  ; network entry. We now make a second pass through to find the LRU entry
 12418                                  ; that is local-no-share or has age >= AX
 12419                                  ;
 12420                                  ;lru75:
 12421                                  ;	mov	bx,-1			; min = 0xffff;
 12422                                  ;	mov	si,bx			; pos = 0xffff;
 12423                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12424                                  ;	;mov	cx,[es:di+4]
 12425                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12426                                  ;	;lea	di,[di+6]
 12427                                  ;	LEA	DI,[DI+SFT.SFTable]
 12428                                  ;
 12429                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12430                                  ; then check for lru.
 12431                                  ;
 12432                                  ;lru8:
 12433                                  ;	;test	word [es:di+5],8000h
 12434                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12435                                  ;	jnz	short lru85		; is for network, go check age
 12436                                  ;	call	CheckShare		; sharer here?
 12437                                  ;	jz	short lru86		; no, go check lru
 12438                                  ;
 12439                                  ; Network or sharer.  Check age
 12440                                  ;
 12441                                  ;lru85:
 12442                                  ;	;cmp	[es:di+17h],ax
 12443                                  ;	cmp	[es:di+sf_OpenAge],ax
 12444                                  ;	jb	short lru9		; age is before threshold, skip it
 12445                                  ;
 12446                                  ; Check LRU
 12447                                  ;
 12448                                  ;lru86:
 12449                                  ;	;cmp	[es:di+15h],bx
 12450                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12451                                  ;	jae	short lru9		; no, skip this
 12452                                  ;	mov	si,di			; remember position
 12453                                  ;	;mov	bx,[es:di+15h]
 12454                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12455                                  ;
 12456                                  ; Done with this entry, go back for more.
 12457                                  ;
 12458                                  ;lru9:
 12459                                  ;	;add	di, 53
 12460                                  ;	add	di,SF_ENTRY.size
 12461                                  ;	loop	lru8
 12462                                  ;
 12463                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12464                                  ; out. The conditions here are:
 12465                                  ;
 12466                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12467                                  ;
 12468                                  ;lru10:
 12469                                  ;	cmp	si,-1			; if no one f
 12470                                  ;	jz	short lru65		;     return -1;
 12471                                  ;lru11:
 12472                                  ;	mov	di,si
 12473                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12474                                  ;	MOV	[CS:THISSFT+2],ES
 12475                                  ;
 12476                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12477                                  ; is 0.
 12478                                  ;
 12479                                  ;	;test	word [es:di+5],8000h
 12480                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12481                                  ;	JNZ	short LRUClose
 12482                                  ;IF INSTALLED
 12483                                  ;	call	CheckShare
 12484                                  ;	JZ	short LRUDone
 12485                                  ;ENDIF
 12486                                  ;
 12487                                  ; Repeat close until ref count is 0
 12488                                  ;
 12489                                  ;LRUClose:
 12490                                  ;	push	ss
 12491                                  ;	pop	ds
 12492                                  ;	LES	DI,[THISSFT]
 12493                                  ;	cmp     word [es:di],0
 12494                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12495                                  ;	JZ	short LRUDone 		; nope, all done
 12496                                  ;	call	DOS_CLOSE
 12497                                  ;	jnc	short LRUClose		; no error => clean up
 12498                                  ;	;cmp	al,6
 12499                                  ;	cmp	al,error_invalid_handle
 12500                                  ;	jz	short LRUClose
 12501                                  ;	stc
 12502                                  ;	JMP	short LRUDead
 12503                                  ;LRUDone:
 12504                                  ;	XOR	AL,AL
 12505                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12506                                  ;
 12507                                  ;LRUDead:
 12508                                  ;	call	restore_world
 12509                                  ;	LES     DI,[CS:THISSFT]
 12510                                  ;	jnc	short LRUFCB_retn
 12511                                  ;LRUFCB_err:
 12512                                  ;	; mov	al, 23h	
 12513                                  ;	MOV	AL,error_FCB_unavailable
 12514                                  ;LRUFCB_retn:	
 12515                                  ;	retn:
 12516                                  ;
 12517                                  ;ENDIF	; LRUFCB has been rewritten below.
 12518                                  
 12519                                  ; 17/05/2019 - Retro DOS v4.0
 12520                                  ; LRUFCB for MSDOS 6.0 !
 12521                                  ;----------------------------------------------------------------------------
 12522                                  ;
 12523                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12524                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12525                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12526                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12527                                  ; optimize regeneration operations by keeping track of the current local
 12528                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12529                                  ; local SFT in the SFT Block.
 12530                                  ;
 12531                                  ; Inputs: al = 0 => Regenerate SFT operation
 12532                                  ;	    = 1 => Allocate new SFT for Open/Create
 12533                                  ;
 12534                                  ; Outputs: Carry clear
 12535                                  ;	 	es:di = Address of allocated SFT
 12536                                  ;	  	ThisSFT = Address of allocated SFT
 12537                                  ;
 12538                                  ;	  carry set if closes of net/Share files failed 
 12539                                  ;		al = error_FCB_unavailable
 12540                                  ;
 12541                                  ; Registers affected: None
 12542                                  ;
 12543                                  ;----------------------------------------------------------------------------
 12544                                  
 12545                                  ;LruFCB	PROC	NEAR
 12546                                  LRUFCB:
 12547                                  	; 17/05/2019 - Retro DOS v4.0
 12548                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12549                                  
 12550                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12551                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12552                                  
 12553                                  	; 20/01/2024
 12554                                  
 12555 00001943 06                      	push	es	; * (MSDOS 6.21)
 12556                                  	
 12557 00001944 E81FEB                  	call	save_world
 12558                                  	
 12559                                  	;getdseg <ds>		;ds = DOSDATA
 12560 00001947 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12561                                  
 12562 0000194C 08C0                    	or	al,al		;Check if regenerate allocation
 12563 0000194E 7516                    	jnz	short lru1	;Try to find SFT to use
 12564                                  
 12565                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12566                                  	; local SFT, just return that SFT to reuse
 12567                                  
 12568                                  	; 20/01/2024
 12569                                  	;mov	di,[LocalSFT]
 12570                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12571                                  	;jz	short lru1	;invalid local SFT, find one
 12572                                  
 12573                                  	; We have found a valid local SFT. Recycle this SFT
 12574                                  
 12575 00001950 C43E[5D10]              	les	di,[LocalSFT]
 12576                                  
 12577                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12578 00001954 8CC1                    	mov	cx,es
 12579 00001956 09F9                    	or	cx,di		; is address == 0?
 12580 00001958 740C                    	jz	short lru1	; invalid local SFT, find one
 12581                                  
 12582                                  gotlocalSFT:
 12583 0000195A 893E[9E05]              	mov	[THISSFT],di
 12584 0000195E 8C06[A005]              	mov	[THISSFT+2],es
 12585 00001962 F8                      	clc
 12586 00001963 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12587                                  
 12588                                  lru1:
 12589 00001966 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12590                                  	;mov	cx,[es:di+4]
 12591 0000196A 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12592                                  	;lea	di,[di+6]
 12593 0000196E 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12594                                  
 12595                                  	; We scan through all the SFTs scanning for a free one. It also 
 12596                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12597                                  	; bx = min. LRU for local SFTs
 12598                                  	; si = pos. of local SFT with min. LRU
 12599                                  	; dx = min. LRU for net/Share SFTs
 12600                                  	; bp = pos. of net/Share SFT with min. LRU
 12601                                  
 12602 00001971 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12603 00001974 89DE                    	mov	si,bx
 12604 00001976 89DA                    	mov	dx,bx
 12605 00001978 89DD                    	mov	bp,bx
 12606                                  
 12607                                  findSFT:
 12608                                  	;See if this SFT is a free one. If so, return it
 12609 0000197A 26830D00                	or	word [es:di],0
 12610                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12611 0000197E 744C                    	jz	short gotSFT	;yes, SFT is free
 12612                                  	;;cmp	word [es:di],-1
 12613                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12614 00001980 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12615 00001984 7446                    	jz	short gotSFT	;no, can use it
 12616                                  
 12617                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12618                                  	; used for a later regen.
 12619                                  
 12620                                  	; 16/12/2022
 12621                                  	; 08/11/2022
 12622                                  	;test	byte [es:di+6],80h
 12623 00001986 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12624                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12625                                  	;;test	word [es:di+5],8000h
 12626                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12627 0000198B 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12628                                  
 12629                                  ;IF installed
 12630 0000198D E82758                  	call	CheckShare	;Share present?
 12631                                  ;ENDIF
 12632 00001990 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12633                                  
 12634                                  	;Local SFT, register its address
 12635                                  
 12636                                  	; !!HACK!!!
 12637                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12638                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12639                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12640                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12641                                  	; out the code that previously existed at label 'gotSFT'
 12642                                  
 12643                                  hackpoint:
 12644 00001992 893E[5D10]              	mov	[LocalSFT],di
 12645 00001996 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12646                                  
 12647 0000199A 08C0                    	or	al,al		;Is operation = REGEN?
 12648 0000199C 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12649                                  
 12650                                  	;Get LRU for local files
 12651                                  	
 12652                                  	;cmp	[es:di+15h],bx
 12653 0000199E 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12654 000019A2 7306                    	jae	short lru4	;no, skip
 12655                                  
 12656                                  	;mov	bx,[es:di+15h]
 12657 000019A4 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12658 000019A8 89FE                    	mov	si,di		;store SFT position
 12659                                  lru4:
 12660                                  	;add	di,59
 12661 000019AA 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12662 000019AD E2CB                    	loop	findSFT
 12663                                  	
 12664                                  	; 20/01/2024
 12665 000019AF 49                      	dec	cx ; -1
 12666                                  
 12667                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12668                                  	; available, we will reuse it instead of net/Share LRU
 12669                                  
 12670 000019B0 89F7                    	mov	di,si
 12671                                  	;cmp	si,-1		;local SFT available?
 12672 000019B2 39CE                    	cmp	si,cx ; 20/01/2024
 12673 000019B4 7516                    	jnz	short gotSFT	;yes, return it
 12674                                  
 12675                                  	;No local SFT, see if we got a net/Share SFT
 12676                                  
 12677 000019B6 89EF                    	mov	di,bp
 12678                                  
 12679 000019B8 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12680                                  	;cmp	bp,-1		;net/Share SFT available?
 12681 000019BA 752D                    	jnz	short gotnetSFT	;yes, return it
 12682                                  noSFT:
 12683                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12684                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12685                                  	; count is not maintained properly.
 12686                                  
 12687 000019BC EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12688                                  
 12689                                  	; Handle the LRU for net/Share SFTs
 12690                                  lru5:
 12691                                  	;cmp	[es:di+15h],dx
 12692 000019BE 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12693 000019C2 73E6                    	jae	short lru4	;no, skip
 12694                                  
 12695                                  	;mov	dx,[es:di+15h]
 12696 000019C4 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12697                                  
 12698 000019C8 89FD                    	mov	bp,di		;store SFT position
 12699 000019CA EBDE                    	jmp	short lru4	;continue with next SFT
 12700                                  
 12701                                  gotSFT:
 12702 000019CC 08C0                    	or	al,al
 12703 000019CE 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12704                                  
 12705                                  	; HACK!!!
 12706                                  	; The code here differs from the code at 'hackpoint' only in the
 12707                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12708                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12709                                  	; has been commented out below and replaced by the code just above.
 12710                                  
 12711                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12712                                  ;
 12713                                  ;	or	al,al		  ;Regen?
 12714                                  ;	jnz	short notlocaluse ;yes, register it and return
 12715                                  ;
 12716                                  ;Register this SFT as a local one
 12717                                  ;
 12718                                  ;	mov	[LocalSFT],di
 12719                                  ;	mov	[LocalSFT+2],es
 12720                                  ;	jmp	gotlocalSFT	;return to caller
 12721                                  ;
 12722                                  ;notlocaluse:
 12723                                  
 12724                                  	; The caller is probably going to use this SFT for a net/Share file.
 12725                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12726                                  	; does not really know whether it is a local file or not. We
 12727                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12728                                  	; registered as a local SFT that can be recycled.
 12729                                  
 12730 000019D0 8CC0                    	mov	ax,es
 12731 000019D2 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12732 000019D6 750E                    	jne	short notinvalid
 12733 000019D8 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12734                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12735                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12736 000019DC 7508                    	jne	short notinvalid
 12737                                  zerolocalSFT:	
 12738 000019DE 31C0                    	xor	ax,ax ; 0
 12739 000019E0 A3[5D10]                	mov	[LocalSFT],ax
 12740 000019E3 A3[5F10]                	mov	[LocalSFT+2],ax
 12741                                  	
 12742                                  notinvalid:
 12743 000019E6 E971FF                  	jmp	gotlocalSFT
 12744                                  
 12745                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12746                                  	; Invalidate this variable i.e LocalSFT = NULL
 12747                                  
 12748                                  ;zerolocalSFT:
 12749                                  	;xor	ax,ax ; 0
 12750                                  	;mov	[LocalSFT],ax
 12751                                  	;mov	[LocalSFT+2],ax
 12752                                  	;
 12753                                  	;jmp	gotlocalSFT
 12754                                  
 12755                                  gotnetSFT:
 12756                                  	; We have an SFT that is currently net/Share. If it is going to be
 12757                                  	; used for a regen, we know it has to be a local SFT. Update the
 12758                                  	; LocalSFT variable
 12759                                  
 12760 000019E9 08C0                    	or	al,al
 12761 000019EB 7508                    	jnz	short closenet
 12762                                  
 12763 000019ED 893E[5D10]              	mov	[LocalSFT],di
 12764 000019F1 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12765                                  closenet:
 12766 000019F5 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12767 000019F9 8C06[A005]              	mov	[THISSFT+2],es
 12768                                  
 12769                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12770                                  	; count is 0.
 12771                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12772                                  	; recycled -- no need to check for this.
 12773                                  
 12774                                  LRUClose:
 12775 000019FD 26833D00                	cmp	word [es:di],0
 12776                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12777 00001A01 740C                    	jz	short LRUDone	; nope, all done
 12778                                  
 12779 00001A03 E8A414                  	call	DOS_CLOSE
 12780 00001A06 73F5                    	jnc	short LRUClose	; no error => clean up
 12781                                  
 12782                                  	; Bugbug: I dont know why we are trying to close after we get an
 12783                                  	; error closing. Seems like we could have a potential infinite loop
 12784                                  	; here. This has to be verified.
 12785                                  
 12786 00001A08 3C06                    	cmp	al,error_invalid_handle ; 6
 12787 00001A0A 74F1                    	je	short LRUClose
 12788                                  errorbadSFT:
 12789 00001A0C F9                      	stc
 12790 00001A0D EB05                    	JMP	short LRUDead
 12791                                  LRUDone:
 12792 00001A0F 30C0                    	XOR	AL,AL
 12793 00001A11 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12794                                  
 12795                                  LRUDead:
 12796 00001A14 E838EA                  	call	restore_world		; use macro
 12797                                  	
 12798 00001A17 07                      	pop	es ; * (MSDOS 6.21)
 12799                                  
 12800                                  	;getdseg <es>
 12801 00001A18 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12802 00001A1D 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12803                                  
 12804                                  	;;retnc
 12805                                  	;jc	short LruFCB_err
 12806                                  	;retn
 12807                                  
 12808                                  	; 16/12/2022
 12809                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12810 00001A22 7302                    	jnc	short LruFCB_retn
 12811                                  	;jc	short LruFCB_err
 12812                                  	;retn
 12813                                  		
 12814                                  LruFCB_err:
 12815 00001A24 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12816                                  LruFCB_retn:
 12817 00001A26 C3                      	retn
 12818                                  	
 12819                                  ;LruFCB	ENDP
 12820                                  
 12821                                  ; 17/05/2019 - Retro DOS v4.0
 12822                                  
 12823                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12824                                  
 12825                                  ; --------------------------------------------------------------------------
 12826                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12827                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12828                                  ; to copy the name to different destinations
 12829                                  ;
 12830                                  ; Inputs: ds:si = source string
 12831                                  ;	 es:di = destination string
 12832                                  ;	 cx = length of string
 12833                                  ;
 12834                                  ; Outputs: String copied to destination
 12835                                  ;
 12836                                  ; Registers affected: cx,di,si
 12837                                  ; --------------------------------------------------------------------------
 12838                                  
 12839                                  RegenCopyName:
 12840                                  CopyName:
 12841 00001A27 AC                      	lodsb			;load character
 12842 00001A28 E80A35                  	call	UCase		; convert char to upper case
 12843                                  StuffChar2:
 12844 00001A2B AA                      	STOSB			;store converted character
 12845 00001A2C E2F9                    	LOOP	CopyName	;
 12846                                  DoneName:
 12847 00001A2E C3                      	retn
 12848                                  
 12849                                  ; --------------------------------------------------------------------------
 12850                                  
 12851                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12852                                  FCBRegen:
 12853                                  	; called from SFTFromFCB. SS already DOSDATA
 12854                                  
 12855                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12856                                  	; we do not fill, size we do no fill, position we do not fill,
 12857                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12858                                  
 12859                                  	;mov	al,[si+19h]
 12860 00001A2F 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12861                                  
 12862                                  	; We discriminate based on the first two bits in the reserved field.
 12863                                  	
 12864                                  	;test	al,80h
 12865 00001A32 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12866 00001A34 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12867                                  
 12868                                  	; The FCB is for a network or a sharing based system. At this point 
 12869                                  	; we have already closed the SFT for this guy and reconnection is 
 12870                                  	; impossible.
 12871                                  	;
 12872                                  	; Remember that he may have given us a FCB with bogus information in
 12873                                  	; it. Check to see if sharing is present or if the redir is present.
 12874                                  	; If either is around, presume that we have cycled out the FCB and 
 12875                                  	; give the hard error. Otherwise, just return with carry set.
 12876                                  
 12877 00001A36 E87E57                  	call	CheckShare		; test for sharer
 12878 00001A39 7509                    	JNZ	short RegenFail		; yep, fail this.
 12879                                  	
 12880                                  	;mov	ax,1100h
 12881 00001A3B B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12882 00001A3E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12883                                  			; Return: AL = 00h  not installed, OK to install
 12884                                  			; 01h  not installed, not OK to install
 12885                                  			; FFh  installed
 12886 00001A40 08C0                    	OR	AL,AL			; is it there?
 12887 00001A42 740C                    	JZ	short RegenDead		; no, just fail the operation
 12888                                  RegenFail:
 12889                                  	; 17/05/2019 - Retro DOS v4.0
 12890                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12891 00001A44 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12892                                  
 12893                                  	;cmp	ah,10h
 12894 00001A48 80FC10                  	cmp	AH,FCB_CLOSE
 12895 00001A4B 7403                    	jz	short RegenDead
 12896 00001A4D E88B01                  	call	FCBHardErr		; massive hard error.
 12897                                  RegenDead:
 12898 00001A50 F9                      	STC				; carry set
 12899                                  FCBRegen_retn:
 12900 00001A51 C3                      	retn
 12901                                  
 12902                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12903                                  	; so fail the operation.
 12904                                  
 12905                                  RegenNoSharing:
 12906 00001A52 E86257                  	call	CheckShare		; Sharing around?
 12907 00001A55 75ED                    	JNZ	short RegenFail
 12908                                  	
 12909                                  	; Find an SFT for this guy.
 12910                                  	
 12911                                  	; 17/05/2019 - Retro DOS v4.0
 12912                                  
 12913                                  	; MSDOS 3.3
 12914                                  	;call	LRUFCB
 12915                                  	;jc	short FCBRegen_retn
 12916                                  	
 12917                                  	; MSDOS 6.0
 12918 00001A57 50                      	push	ax
 12919 00001A58 B000                    	mov	al,0			;indicate it is a regen operation
 12920 00001A5A E8E6FE                  	call	LRUFCB
 12921 00001A5D 58                      	pop	ax
 12922 00001A5E 72F1                    	jc	short FCBRegen_retn
 12923                                  
 12924                                  	;mov	word [es:di+2],8002h
 12925 00001A60 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12926 00001A66 243F                    	AND	AL,3Fh			; get drive number for flags
 12927 00001A68 98                      	CBW
 12928                                  	;or	ax,4000h
 12929 00001A69 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12930                                  
 12931                                  	; The bits field consists of the upper two bits (dirty and device) 
 12932                                  	; from the SFT and the low 4 bits from the open mode.
 12933                                  
 12934                                  	;mov	cl,[si+1Ah]
 12935 00001A6C 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12936 00001A6F 88CD                    	MOV	CH,CL
 12937 00001A71 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12938 00001A74 08E8                    	OR	AL,CH
 12939                                  	;and	cl,0Fh
 12940 00001A76 80E10F                  	AND	CL,access_mask		; get the mode bits
 12941                                  	;mov	[es:di+2],cl
 12942 00001A79 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12943                                  	;mov	[es:di+5],ax
 12944 00001A7D 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12945                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12946 00001A81 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12947                                  	;mov	[es:di+31h],ax
 12948 00001A85 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12949 00001A89 1E                      	push	ds
 12950 00001A8A 56                      	push	si
 12951 00001A8B 06                      	push	es
 12952 00001A8C 57                      	push	di
 12953 00001A8D 16                      	push	ss
 12954 00001A8E 07                      	pop	es
 12955 00001A8F BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12956                                  
 12957 00001A92 B90800                  	MOV	CX,8
 12958 00001A95 46                      	INC	SI			; Skip past drive byte to name in FCB
 12959                                  
 12960                                  	; MSDOS 3.3
 12961                                  ;RegenCopyName:
 12962                                  	;lodsb
 12963                                  	;call	UCase
 12964                                  	;stosb
 12965                                  	;loop	RegenCopyName
 12966                                  
 12967                                  	; MSDOS 6.0
 12968 00001A96 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12969                                  
 12970 00001A99 16                      	push	ss	; SS is DOSDATA
 12971 00001A9A 1F                      	pop	ds
 12972                                  
 12973                                  	;mov	byte [ATTRIB],16h
 12974 00001A9B C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12975                                  					; Must set this to something interesting
 12976                                  					; to call DEVNAME.
 12977 00001AA0 E83526                  	call	DEVNAME 		; check for device
 12978 00001AA3 5E                      	pop	si
 12979 00001AA4 07                      	pop	es
 12980 00001AA5 5E                      	pop	si
 12981 00001AA6 1F                      	pop	ds
 12982 00001AA7 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12983                                  
 12984                                  	; Device found. We can ignore disk-specific info
 12985                                  
 12986                                  	;mov	[es:di+5],bh
 12987 00001AA9 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12988                                  	;mov	byte [es:di+4],0
 12989 00001AAD 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12990                                  					; SS override
 12991                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12992 00001AB2 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12993                                  	;mov	[es:di+7],si
 12994 00001AB7 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12995                                  	;mov	[es:di+9],ds
 12996 00001ABB 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12997 00001ABF C3                      	retn				; carry is clear
 12998                                  
 12999                                  RegenDeadJ:
 13000 00001AC0 EB8E                    	JMP	short RegenDead
 13001                                  
 13002                                  	; File found. Just copy in the remaining pieces.
 13003                                  
 13004                                  RegenFileNoSharing:
 13005                                  	;mov	ax,[es:di+5]
 13006 00001AC2 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13007 00001AC6 83E03F                  	AND	AX,03Fh
 13008 00001AC9 1E                      	push	ds
 13009 00001ACA 56                      	push	si
 13010 00001ACB E8B44D                  	call	FIND_DPB
 13011                                  	;mov	[es:di+7],si
 13012 00001ACE 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13013                                  	;mov	[es:di+9],ds
 13014 00001AD2 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13015 00001AD6 5E                      	pop	si
 13016 00001AD7 1F                      	pop	ds
 13017 00001AD8 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13018                                  					; indicator was bogus
 13019                                  	;mov	ax,[si+1Dh]
 13020 00001ADA 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13021                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13022                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13023 00001ADD 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13024                                  
 13025                                  	; MSDOS 6.0
 13026                                  
 13027                                  	; SR;
 13028                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13029                                  	; number
 13030                                  
 13031                                  	;mov	al,[si+18h]
 13032 00001AE1 8A4418                  	mov	al,[si+fcb_sfn]
 13033 00001AE4 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13034 00001AE6 88C4                    	mov	ah,al
 13035 00001AE8 D0C4                    	rol	ah,1
 13036 00001AEA D0E8                    	shr	al,1
 13037 00001AEC 08E0                    	or	al,ah
 13038 00001AEE 243F                    	and	al,03Fh		;mask off unused bits
 13039                                  	;mov	[es:di+4],al
 13040 00001AF0 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13041                                  
 13042                                  	; SR;
 13043                                  	; Update the higher word of the directory sector from the FCB
 13044                                  
 13045                                  	;;mov	al,[si+18h]
 13046 00001AF4 8A4418                  	mov	al,[si+fcb_sfn]
 13047 00001AF7 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13048 00001AF9 28E4                    	sub	ah,ah
 13049                                  	;mov	[es:di+1Dh],ax
 13050 00001AFB 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13051                                  
 13052                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13053                                  	;mov	ax,[si+1Bh]
 13054 00001AFF 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13055                                  	;mov	[es:di+0Bh],ax
 13056 00001B02 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13057                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13058                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13059 00001B06 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13060                                  	;mov	al,[si+1Fh]
 13061 00001B0A 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13062                                  	;mov  	[es:di+1Fh],al
 13063 00001B0D 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13064                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13065 00001B11 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13066                                  					; Existing FCB entries would be
 13067                                  					; flushed unnecessarily because of
 13068                                  					; check in CheckFCB of the ref_count.
 13069                                  					; July 22/85 - BAS
 13070                                  	;lea	si,[si+1]
 13071 00001B14 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13072                                  	;lea	di,[di+20h]
 13073 00001B17 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13074                                  	;mov	cx,11
 13075 00001B1A B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13076                                  	
 13077                                  	; MSDOS 6.0
 13078 00001B1D E807FF                  	call	RegenCopyName	;copy name to SFT 
 13079                                  	
 13080                                  	; MSDOS 3.3
 13081                                  ;RegenCopyName2:
 13082                                  	;lodsb
 13083                                  	;call    UCase
 13084                                  	;stosb
 13085                                  	;loop    RegenCopyName2
 13086                                  
 13087 00001B20 F8                      	clc
 13088 00001B21 C3                      	retn
 13089                                  
 13090                                  ; 17/05/2019 - Retro DOS v4.0
 13091                                  
 13092                                  ;**	BlastSFT - FIll SFT with Garbage
 13093                                  ; --------------------------------------------------------------------------
 13094                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13095                                  ;	various garbage values to put into the SFT.  I don't know why,
 13096                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13097                                  ;	necessary to show that the SFT is free after filling it.
 13098                                  ;
 13099                                  ;	ENTRY	(es:di) = address of SFT
 13100                                  ;		(al) = fill character
 13101                                  ;	EXIT	(ax) = -1
 13102                                  ;		'C' clear
 13103                                  ;	USES	AX, CX, Flags
 13104                                  
 13105                                  BlastSFT:
 13106 00001B22 57                      	push	di
 13107                                  	;mov	cx,53 ; MSDOS 3.3
 13108                                  	;mov	cx,59 ; MSDOS 6.0
 13109 00001B23 B93B00                  	mov	cx,SF_ENTRY.size
 13110 00001B26 F3AA                    	rep	stosb
 13111 00001B28 5F                      	pop	di
 13112 00001B29 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13113 00001B2B 268905                  	mov	[es:di],ax
 13114                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13115                                  	;mov	[es:di+15h],ax
 13116 00001B2E 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13117 00001B32 48                      	dec	ax	; -1					    ;
 13118                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13119 00001B33 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13120                                  BlastSFT_retn:
 13121 00001B37 C3                      	retn				; return with 'C' clear     ;
 13122                                  
 13123                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13124                                  ; --------------------------------------------------------------------------
 13125                                  ;
 13126                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13127                                  ;   regenerated.
 13128                                  ;
 13129                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13130                                  ;		AL is SFT index
 13131                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13132                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13133                                  ;   Registers modified: AX and BX
 13134                                  ;
 13135                                  ; --------------------------------------------------------------------------
 13136                                  
 13137                                  	; 21/01/2024
 13138                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13139                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13140                                  CheckFCB:
 13141                                  		
 13142                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13143                                  
 13144                                  	; MSDOS 3.3
 13145                                  
 13146                                  	; LES	DI,[CS:SFTFCB]
 13147                                  
 13148                                  	; MSDOS 6.0
 13149                                  	
 13150                                  	; SR;
 13151                                  	; We check if the given FCB is for a local file. If so, we return a 
 13152                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13153                                  
 13154                                  	;test	byte [si+19h],0C0h
 13155 00001B38 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13156 00001B3C 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13157 00001B3E 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13158                                  
 13159                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13160                                  	;cmp	[es:di+4],al
 13161 00001B43 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13162 00001B47 723C                    	JC	short BadSFT
 13163                                  	;;mov	bl,53 ; MSDOS 3.3
 13164                                  	;mov	bl,59 ; MSDOS 6.0
 13165 00001B49 B33B                    	MOV	BL,SF_ENTRY.size
 13166 00001B4B F6E3                    	MUL	BL
 13167                                  	;lea	di,[di+6]
 13168 00001B4D 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13169 00001B50 01C7                    	ADD	DI,AX
 13170                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13171 00001B52 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13172                                  	;cmp	[es:di+31h],ax
 13173 00001B56 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13174 00001B5A 7529                    	JNZ	short BadSFT		; must match process
 13175 00001B5C 26833D00                	cmp	word [es:di],0
 13176                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13177 00001B60 7423                    	JZ	short BadSFT		; must also be in use
 13178                                  	;mov	al,[si+19h]
 13179 00001B62 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13180                                  	;test	al,80h
 13181 00001B65 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13182 00001B67 7428                    	JZ	short CheckNoShare	; No. try local or device
 13183                                  
 13184                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13185                                  	; FCBSHARE is a superset of FCBNETWORK.
 13186                                  
 13187 00001B69 50                      	PUSH	AX
 13188                                  	;and	al,0C0h
 13189 00001B6A 24C0                    	AND	AL,FCBMASK
 13190                                  	;cmp	al,0C0h
 13191 00001B6C 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13192 00001B6E 58                      	POP	AX
 13193 00001B6F 7516                    	JNZ	short CheckNet		; yes
 13194                                  ;
 13195                                  ;----- In share support -----
 13196                                  ;
 13197                                  	;call	far [cs:JShare+(11*4)]
 13198 00001B71 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13199 00001B76 720D                    	JC	short BadSFT
 13200                                  
 13201                                  ; 21/01/2024
 13202                                  %if 0
 13203                                  	JMP	SHORT CheckD
 13204                                  ;
 13205                                  ;----- End in share support -----
 13206                                  ;
 13207                                  	; 09/11/2022
 13208                                  	; (There is not any procedure/sub
 13209                                  	;  which calls or jumps to CheckFirClus here)
 13210                                  	;;;
 13211                                  CheckFirClus:
 13212                                  	;cmp     bx,[es:di+0Bh]
 13213                                  	; 07/12/2022
 13214                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13215                                  	JNZ	short BadSFT
 13216                                  	;;;
 13217                                  %endif
 13218                                  
 13219                                  CheckD: 
 13220 00001B78 243F                    	AND	AL,3Fh
 13221                                  	;mov	ah,[es:di+5]
 13222 00001B7A 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13223 00001B7E 80E43F                  	AND	AH,3Fh
 13224 00001B81 38C4                    	CMP	AH,AL
 13225                                  	; 16/12/2022
 13226 00001B83 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13227                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13228                                  	;jnz	short BadSFT
 13229                                  ;CheckD_retn:
 13230                                  	;retn
 13231                                  BadSFT: 
 13232 00001B85 F9                      	STC
 13233 00001B86 C3                      	retn
 13234                                  				
 13235                                  CheckNet:
 13236                                  	; 17/05/2019 - Retro DOS v4.0
 13237                                  	
 13238                                  ;----- In net support -----
 13239                                  
 13240                                  	; MSDOS 3.3
 13241                                  	;;mov	ax,[si+1Ah]
 13242                                  	;mov	ax,[si+fcb_net_handle]
 13243                                  	;;cmp	ax,[es:di+1Dh]
 13244                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13245                                  	;jnz	short BadSFT
 13246                                  	;;cmp	ax,[es:di+19h]
 13247                                  	;cmp	ax,[ES:DI+sf_netid]
 13248                                  	;jnz     short BadSFT
 13249                                  	;;mov	ax,[si+1Eh]
 13250                                  	;mov	ax,[si+fcb_l_attr]
 13251                                  	;;cmp	ax,[es:di+1Bh]
 13252                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13253                                  	;jnz     short BadSFT
 13254                                  
 13255                                  	; MSDOS 6.0
 13256                                  	;mov	ax,[si+1Ch]
 13257 00001B87 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13258                                  	; 09/11/2022
 13259                                  	;cmp	ax,[es:di+0Bh] 
 13260 00001B8A 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13261 00001B8E 75F5                    	JNZ	short BadSFT
 13262                                  
 13263                                  ;----- END In net support -----
 13264                                  
 13265                                  CheckNet_retn:
 13266 00001B90 C3                      	retn
 13267                                  
 13268                                  CheckNoShare:
 13269                                  
 13270                                  ; 16/12/2022
 13271                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13272                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13273                                  ;	;test	al,40h
 13274                                  ;	test	AL,FCBDEVICE		; Device?
 13275                                  ;	;jnz	short $+2 ; 09/11/2022
 13276                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13277                                  
 13278                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13279                                  	;;mov	bx,[si+1Dh]
 13280                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13281                                  	;;cmp	bx,[es:di+1Dh]
 13282                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13283                                  	;jnz	short BadSFT
 13284                                  	;;mov	bl,[si+1Fh]
 13285                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13286                                  	;;cmp	bl,[es:di+1Fh]
 13287                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13288                                  	;jnz	short BadSFT
 13289                                  	;;mov	bl,[si+1Ah]
 13290                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13291                                  	;;mov	bh,[es:di+5]
 13292                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13293                                  	;xor	bh,bl
 13294                                  	;and	bh,0C0h
 13295                                  	;jnz	short BadSFT
 13296                                  	;;xor	bl,[es:di+2]
 13297                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13298                                  	;and	bl,0Fh
 13299                                  	;jnz	short BadSFT
 13300                                  	;push	di
 13301                                  	;push	si
 13302                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13303                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13304                                  	;;lea	si,[si+1]
 13305                                  	;LEA	SI,[SI+SYS_FCB.name]
 13306                                  	;;mov	cx,11
 13307                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13308                                  	;repe	cmpsb
 13309                                  	;pop	si
 13310                                  	;pop	di
 13311                                  	;jnz	short BadSFT
 13312                                  	;;mov	bx,[si+1Bh]
 13313                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13314                                  	;jmp	short CheckFirClus
 13315                                  
 13316                                  	; MSDOS 6.0
 13317                                  
 13318                                  	; SR;
 13319                                  	; The code below to match a local FCB with its SFT can no longer be
 13320                                  	; used. We just return a no-match status. This check is done right
 13321                                  	; at the top.
 13322                                  
 13323                                  CheckNoShareDev:
 13324                                  	;mov	bx,[si+1Ah]
 13325 00001B91 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13326                                  	;cmp	bx,[es:di+7]
 13327 00001B94 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13328 00001B98 75EB                    	JNZ	short BadSFT
 13329                                  	;mov	bx,[si+1Ch]
 13330 00001B9A 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13331                                  	;cmp	bx,[es:di+9]
 13332 00001B9D 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13333 00001BA1 75E2                    	JNZ	short BadSFT
 13334 00001BA3 EBD3                    	JMP	short CheckD
 13335                                  
 13336                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13337                                  ;----------------------------------------------------------------------------
 13338                                  ;
 13339                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13340                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13341                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13342                                  ;	with PID
 13343                                  ;
 13344                                  ;   Inputs:	DS:SI point to FCB
 13345                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13346                                  ;		Carry clear -> OK ES:DI -> SFT
 13347                                  ;		Carry set -> error in ax
 13348                                  ;   Registers modified: ES,DI, AX
 13349                                  ;
 13350                                  ;----------------------------------------------------------------------------
 13351                                  
 13352                                  SFTFromFCB:
 13353                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13354                                  
 13355                                  	; 17/05/2019 - Retro DOS v4.0
 13356                                  
 13357 00001BA5 50                      	push	ax
 13358 00001BA6 53                      	push	bx
 13359                                  	;mov	al,[si+18h]
 13360 00001BA7 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13361 00001BAA E88BFF                  	call	CheckFCB
 13362 00001BAD 5B                      	pop	bx
 13363 00001BAE 58                      	pop	ax
 13364                                  	;MOV	[CS:THISSFT],DI		; SS override
 13365                                  	;MOV	[CS:THISSFT+2],ES
 13366 00001BAF 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13367 00001BB4 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13368 00001BB9 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13369                                  	
 13370                                  	; 09/11/2022 (MSDOS 5.0)
 13371                                  	; 31/05/2019
 13372 00001BBB 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13373 00001BBC E8A7E8                  	call	save_world
 13374 00001BBF E86DFE                  	call	FCBRegen
 13375 00001BC2 E88AE8                  	call	restore_world		; use macro restore world
 13376 00001BC5 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13377                                  
 13378                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13379 00001BC6 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13380 00001BCA 72C4                    	jc	short CheckNet_retn
 13381                                  
 13382                                  Set_SFT: 
 13383                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13384 00001BCC 36C43E[9E05]            	les	di,[ss:THISSFT]
 13385                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13386 00001BD1 36FF36[3C03]            	push	word [ss:PROC_ID]
 13387                                  	;pop	word [es:di+31h]
 13388 00001BD6 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13389 00001BDA C3                      	retn				; carry is clear
 13390                                  
 13391                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13392                                  ;----------------------------------------------------------------------------
 13393                                  ;
 13394                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13395                                  ;	unavailable FCB.
 13396                                  ;
 13397                                  ;   Inputs:	none.
 13398                                  ;   Outputs:	none.
 13399                                  ;   Registers modified: all
 13400                                  ;
 13401                                  ;----------------------------------------------------------------------------
 13402                                  
 13403                                  FCBHardErr:
 13404                                  	; 17/05/2019 - Retro DOS v4.0
 13405 00001BDB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13406                                  	;
 13407                                  	;mov	ax,23h
 13408 00001BE0 B82300                  	MOV	AX,error_FCB_unavailable
 13409                                  	;;mov	byte [cs:ALLOWED],8
 13410                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13411 00001BE3 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13412                                  	
 13413                                  	;LES	BP,[CS:THISDPB]
 13414 00001BE9 26C42E[8A05]            	les	bp,[es:THISDPB]
 13415                                  	
 13416 00001BEE BF0100                  	MOV	DI,1			; Fake some registers
 13417 00001BF1 89F9                    	MOV	CX,DI
 13418                                  	;mov	dx,[es:bp+0Bh]
 13419 00001BF3 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13420 00001BF7 E8F535                  	call	HARDERR
 13421 00001BFA F9                      	STC
 13422 00001BFB C3                      	retn
 13423                                  
 13424                                  ;============================================================================
 13425                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13426                                  ;============================================================================
 13427                                  ; 21/07/2018 - Retro DOS v3.0
 13428                                  ; 17/05/2019 - Retro DOS v4.0
 13429                                  
 13430                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13431                                  ;
 13432                                  ;	GetRR
 13433                                  ;	GetExtent
 13434                                  ;	SetExtent
 13435                                  ;	GetExtended
 13436                                  ;	GetRecSize
 13437                                  ;	FCBIO
 13438                                  ;	$FCB_OPEN
 13439                                  ;	$FCB_CREATE
 13440                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13441                                  ;	$FCB_RANDOM_READ_BLOCK
 13442                                  ;	$FCB_SEQ_READ
 13443                                  ;	$FCB_SEQ_WRITE
 13444                                  ;	$FCB_RANDOM_READ
 13445                                  ;	$FCB_RANDOM_WRITE
 13446                                  ;
 13447                                  ;	Revision history:
 13448                                  ;
 13449                                  ;		Created: ARR 4 April 1983
 13450                                  ;			 MZ  6 June  1983 completion of functions
 13451                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13452                                  ;				  times.  Change so successive closes work by
 13453                                  ;				  always returning OK.	Also, detect I/O to
 13454                                  ;				  already closed FCB and return EOF.
 13455                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13456                                  ;				  out of sft into FCB for reconnection
 13457                                  ;
 13458                                  ;	    A000   version 4.00	Jan. 1988
 13459                                  
 13460                                  ; Defintions for FCBOp flags
 13461                                  
 13462                                  RANDOM	equ 2				; random operation
 13463                                  FCBREAD equ 4				; doing a read
 13464                                  BLOCK	equ 8				; doing a block I/O
 13465                                  
 13466                                  ;Break <GetRR - return the random record field in DX:AX>
 13467                                  ;---------------------------------------------------------------------------
 13468                                  ;
 13469                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13470                                  ;	from the FCB pointed to by DS:SI
 13471                                  ;
 13472                                  ;   Inputs:	DS:SI point to an FCB
 13473                                  ;		BX has record size
 13474                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13475                                  ;   Registers modified: none
 13476                                  ;---------------------------------------------------------------------------
 13477                                  
 13478                                  GetRR:
 13479                                  	;mov	ax,[si+21h]
 13480 00001BFC 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13481                                  	;mov	dx,[si+23h]
 13482 00001BFF 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13483 00001C02 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13484 00001C05 7202                    	JB	short GetRRBye
 13485                                  GetExtent_bye:	; 21/01/2024
 13486 00001C07 30F6                    	XOR	DH,DH
 13487                                  GetRRBye:
 13488 00001C09 C3                      	retn
 13489                                  
 13490                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13491                                  ;---------------------------------------------------------------------------
 13492                                  ;
 13493                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13494                                  ;	NR fields in the FCB.
 13495                                  ;
 13496                                  ;   Inputs:	DS:SI - point to FCB
 13497                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13498                                  ;   Registers modified: none
 13499                                  ;---------------------------------------------------------------------------
 13500                                  
 13501                                  GetExtent:
 13502                                  	;mov	al,[si+20h]
 13503 00001C0A 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13504                                  	;mov	dx,[si+0Ch]
 13505 00001C0D 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13506 00001C10 D0E0                    	SHL	AL,1
 13507 00001C12 D1EA                    	SHR	DX,1
 13508 00001C14 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13509 00001C16 88D4                    	MOV	AH,DL
 13510 00001C18 88F2                    	MOV	DL,DH
 13511                                  	; 21/01/2024
 13512                                  	;XOR	DH,DH
 13513                                  	;retn
 13514 00001C1A EBEB                    	jmp	short GetExtent_bye
 13515                                  
 13516                                  ;Break <SetExtent - update the extent/NR field>
 13517                                  ;---------------------------------------------------------------------------
 13518                                  ;
 13519                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13520                                  ;	fields
 13521                                  ;
 13522                                  ;   Inputs:	DS:SI point to FCB
 13523                                  ;		DX:AX is a record location in file
 13524                                  ;   Outputs:	Extent/NR fields are filled in
 13525                                  ;   Registers modified: CX
 13526                                  ;---------------------------------------------------------------------------
 13527                                  
 13528                                  SetExtent:
 13529 00001C1C 50                      	push	ax
 13530 00001C1D 52                      	push	dx
 13531 00001C1E 89C1                    	MOV	CX,AX
 13532 00001C20 247F                    	AND	AL,7FH			; next rec field
 13533                                  	;mov	[si+20h],al
 13534 00001C22 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13535 00001C25 80E180                  	AND	CL,80H			; save upper bit
 13536 00001C28 D1E1                    	SHL	CX,1
 13537 00001C2A D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13538 00001C2C 88E8                    	MOV	AL,CH
 13539 00001C2E 88D4                    	MOV	AH,DL
 13540                                  	;mov	[si+0Ch], ax
 13541 00001C30 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13542 00001C33 5A                      	pop	dx
 13543 00001C34 58                      	pop	ax
 13544 00001C35 C3                      	retn
 13545                                  
 13546                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13547                                  ;---------------------------------------------------------------------------
 13548                                  ;
 13549                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13550                                  ;
 13551                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13552                                  ;   Outputs:	DS:SI point to the FCB part
 13553                                  ;		zeroflag set if not extended fcb
 13554                                  ;   Registers modified: SI
 13555                                  ;---------------------------------------------------------------------------
 13556                                  
 13557                                  GetExtended:
 13558 00001C36 89D6                    	MOV	SI,DX			; point to Something
 13559 00001C38 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13560 00001C3B 7503                    	JNZ	short GetBye		; not there
 13561 00001C3D 83C607                  	ADD	SI,7			; point to FCB
 13562                                  GetBye:
 13563 00001C40 39D6                    	CMP	SI,DX			; set condition codes
 13564                                  getextd_retn:
 13565 00001C42 C3                      	retn
 13566                                  
 13567                                  ;Break <GetRecSize - return in BX the FCB record size>
 13568                                  ;---------------------------------------------------------------------------
 13569                                  ;
 13570                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13571                                  ;
 13572                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13573                                  ;   Outputs:	BX contains the record size
 13574                                  ;   Registers modified: None
 13575                                  ;---------------------------------------------------------------------------
 13576                                  
 13577                                  	; 22/01/2024
 13578                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13579                                  GetRecSize:
 13580                                  	;mov	bx,[si+0Eh]
 13581 00001C43 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13582 00001C46 09DB                    	OR	BX,BX			; is it nul?
 13583                                  	;jz	short getextd_retn
 13584                                  	; 22/01/2024 (BugFix)
 13585 00001C48 75F8                    	jnz	short getextd_retn
 13586                                  	;MOV	BX,128			; use default size
 13587 00001C4A B380                    	mov	bl,128
 13588                                  	;mov	[si+0Eh],bx
 13589 00001C4C 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13590 00001C4F C3                      	retn
 13591                                  
 13592                                  ; 23/01/2024 - Retro DOS v5.0
 13593                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13594                                  ; 23/01/2024 - Retro DOS v4.2
 13595                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13596                                  ; 23/01/2024 - Retro DOS v4.1
 13597                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13598                                  
 13599                                  ; 22/07/2018 - Retro DOS v3.0
 13600                                  
 13601                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13602                                  ;----------------------------------------------------------------------------
 13603                                  ;
 13604                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13605                                  ;	and write a number of blocks from it.
 13606                                  ;
 13607                                  ;   Inputs:	DS:DX point to an FCB
 13608                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13609                                  ;		AL <> 0 Not enough room on disk for the output
 13610                                  ;
 13611                                  ;----------------------------------------------------------------------------
 13612                                  
 13613                                  _$FCB_RANDOM_WRITE_BLOCK:
 13614                                  	;mov	AL,0Ah
 13615 00001C50 B00A                    	MOV	AL,RANDOM+BLOCK
 13616 00001C52 EB12                    	JMP	short FCBIO	; 23/01/2024
 13617                                  
 13618                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13619                                  ;----------------------------------------------------------------------------
 13620                                  ;
 13621                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13622                                  ;	and read a number of blocks from it.
 13623                                  ;
 13624                                  ;   Inputs:	DS:DX point to an FCB
 13625                                  ;   Outputs:	AL = error codes defined above
 13626                                  ;
 13627                                  ;----------------------------------------------------------------------------
 13628                                  
 13629                                  _$FCB_RANDOM_READ_BLOCK:
 13630                                  	;mov	AL,0Eh
 13631 00001C54 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13632 00001C56 EB0E                    	JMP	short FCBIO	; 23/01/2024
 13633                                  
 13634                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13635                                  ;----------------------------------------------------------------------------
 13636                                  ;
 13637                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13638                                  ;	memory
 13639                                  ;
 13640                                  ;   Inputs:	DS:DX point to an FCB
 13641                                  ;   Outputs:	AL = error codes defined above
 13642                                  ;
 13643                                  ;----------------------------------------------------------------------------
 13644                                  
 13645                                  _$FCB_SEQ_READ:
 13646                                  	;mov	AL,4
 13647 00001C58 B004                    	MOV	AL,FCBREAD
 13648 00001C5A EB0A                    	JMP	short FCBIO	; 23/01/2024
 13649                                  
 13650                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13651                                  ;----------------------------------------------------------------------------
 13652                                  ;
 13653                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13654                                  ;	file
 13655                                  ;
 13656                                  ;   Inputs:	DS:DX point to an FCB
 13657                                  ;   Outputs:	AL = error codes defined above
 13658                                  ;
 13659                                  ;----------------------------------------------------------------------------
 13660                                  
 13661                                  _$FCB_SEQ_WRITE:
 13662 00001C5C B000                    	MOV	AL,0
 13663 00001C5E EB06                    	JMP	short FCBIO	; 23/01/2024
 13664                                  
 13665                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13666                                  ;----------------------------------------------------------------------------
 13667                                  ;
 13668                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13669                                  ;	record from it.
 13670                                  ;
 13671                                  ;   Inputs:	DS:DX point to an FCB
 13672                                  ;   Outputs:	AL = error codes defined above
 13673                                  ;
 13674                                  ;----------------------------------------------------------------------------
 13675                                  
 13676                                  _$FCB_RANDOM_READ:
 13677                                  	;mov	AL,6
 13678 00001C60 B006                    	MOV	AL,RANDOM+FCBREAD
 13679                                  	; 23/01/2024
 13680                                  	;jmp	FCBIO 		; single block
 13681 00001C62 EB02                    	jmp	short FCBIO
 13682                                  
 13683                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13684                                  ;----------------------------------------------------------------------------
 13685                                  ;
 13686                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13687                                  ;	a record to it.
 13688                                  ;
 13689                                  ;   Inputs:	DS:DX point to an FCB
 13690                                  ;   Outputs:	AL = error codes defined above
 13691                                  ;
 13692                                  ;----------------------------------------------------------------------------
 13693                                  
 13694                                  _$FCB_RANDOM_WRITE:
 13695                                  	;mov	AL,2
 13696 00001C64 B002                    	MOV	AL,RANDOM
 13697                                  	; 23/01/2024
 13698                                  	;;jmp	FCBIO
 13699                                  	;jmp	short FCBIO
 13700                                  
 13701                                  ;BREAK <FCBIO - do internal FCB I/O>
 13702                                  ;---------------------------------------------------------------------------
 13703                                  ;
 13704                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13705                                  ;
 13706                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13707                                  ;		DS:DX point to FCB
 13708                                  ;		CX may have count of number of records to xfer
 13709                                  ;   Outputs:	AL has error code
 13710                                  ;   Registers modified: all
 13711                                  ;---------------------------------------------------------------------------
 13712                                  
 13713                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13714                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13715                                  
 13716                                  	; 23/01/2024
 13717                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13718                                  
 13719                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13720                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13721                                  
 13722                                  FCBIO:
 13723                                  
 13724                                  FEOF	EQU	1
 13725                                  FTRIM	EQU	2
 13726                                  
 13727                                  %define	FCBErr	byte [bp-1]  ; byte
 13728                                  %define	cRec	word [bp-3]  ; word
 13729                                  ;%define RecPos	word [bp-7]  ; dword
 13730                                  %define RecPosL	word [bp-7]  ; word
 13731                                  %define RecPosH	word [bp-5]  ; word
 13732                                  %define	RecSize	word [bp-9]  ; word
 13733                                  ;%define bPos	word [bp-13] ; dword
 13734                                  %define bPosL	word [bp-13] ; word
 13735                                  %define bPosH	word [bp-11] ; word
 13736                                  %define cByte	word [bp-15] ; word
 13737                                  %define cResult word [bp-17] ; word
 13738                                  %define	cRecRes	word [bp-19] ; word
 13739                                  %define	FCBOp	byte [bp-20] ; byte
 13740                                  ; 23/01/2024
 13741                                  %define bPos bp-13
 13742                                  
 13743                                  	;Enter
 13744                                  
 13745 00001C66 55                      	push	bp
 13746 00001C67 89E5                    	mov	bp,sp
 13747 00001C69 83EC14                  	sub	sp,20
 13748                                  	;mov	[bp-20],al
 13749 00001C6C 8846EC                  	MOV	FCBOp,AL
 13750                                  	;mov	byte [bp-1],0
 13751 00001C6F C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13752 00001C73 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13753                                  	;test	byte [bp-20],8
 13754 00001C76 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13755 00001C7A 7503                    	JNZ	short GetPos
 13756 00001C7C B90100                  	MOV	CX,1			;	cRec = 1;
 13757                                  GetPos:
 13758                                  	;mov	[bp-3],cx
 13759 00001C7F 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13760 00001C82 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13761 00001C85 E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13762                                  	;mov	[bp-9],bx
 13763 00001C88 895EF7                  	MOV	RecSize,BX
 13764                                  	;test	byte [bp-20],2
 13765 00001C8B F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13766 00001C8F 7403                    	JZ	short GetRec
 13767 00001C91 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13768                                  GetRec:
 13769                                  	;mov	[bp-7],ax
 13770 00001C94 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13771                                  	;mov	[bp-5],dx
 13772 00001C97 8956FB                  	MOV	RecPosH,DX
 13773 00001C9A E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13774                                  	;mov	ax,[bp-5]
 13775 00001C9D 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13776 00001CA0 F7E3                    	MUL	BX
 13777 00001CA2 89C7                    	MOV	DI,AX
 13778                                  	;mov	ax,[bp-7]
 13779 00001CA4 8B46F9                  	MOV	AX,RecPosL
 13780 00001CA7 F7E3                    	MUL	BX
 13781 00001CA9 01FA                    	ADD	DX,DI
 13782                                  	;mov	[bp-13],ax
 13783 00001CAB 8946F3                  	MOV	bPosL,AX
 13784                                  	;mov	[bp-11],dx
 13785 00001CAE 8956F5                  	MOV	bPosH,DX
 13786                                  	;mov	ax,[bp-3]
 13787 00001CB1 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13788 00001CB4 F7E3                    	MUL	BX
 13789                                  	;mov	[bp-15],ax
 13790 00001CB6 8946F1                  	MOV	cByte,AX
 13791                                  
 13792                                  ;hkn; 	SS override
 13793 00001CB9 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13794 00001CBE 83D200                  	ADC	DX,0
 13795 00001CC1 7419                    	JZ	short DoOper
 13796                                  	;mov	byte [bp-1],2
 13797 00001CC3 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13798                                  
 13799                                  ;hkn; 	SS override
 13800 00001CC7 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13801 00001CCB F7D8                    	NEG	AX
 13802 00001CCD 7501                    	JNZ	short DoDiv
 13803 00001CCF 48                      	DEC	AX
 13804                                  DoDiv:
 13805 00001CD0 31D2                    	XOR	DX,DX
 13806 00001CD2 F7F3                    	DIV	BX
 13807                                  	;mov	[bp-3],ax
 13808 00001CD4 8946FD                  	MOV	cRec,AX
 13809 00001CD7 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13810                                  	;mov	[bp-15],ax
 13811 00001CD9 8946F1                  	MOV	cByte,AX		;	}
 13812                                  DoOper:
 13813 00001CDC 31DB                    	XOR	BX,BX
 13814                                  	;mov	[bp-17],bx
 13815 00001CDE 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13816                                  	;cmp	[bp-15],bx
 13817 00001CE1 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13818 00001CE4 7506                    	JNZ	short DoGetExt
 13819                                  	;test	byte [bp-1],2
 13820 00001CE6 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13821                                  	;JZ	short DoGetExt
 13822                                  	;JMP	short SkipOp
 13823                                  	; 16/12/2022
 13824 00001CEA 7572                    	jnz	short SkipOp
 13825                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13826                                  	;JZ	short DoGetExt
 13827                                  	;JMP	short SkipOp
 13828                                  DoGetExt:
 13829 00001CEC E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13830 00001CEF 730F                    	JNC	short ContinueOp
 13831                                  FCBDeath:
 13832 00001CF1 E860E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13833                                  	;mov	word [bp-19],0
 13834 00001CF4 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13835                                  	;mov	byte [bp-1],1
 13836 00001CF9 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13837 00001CFD E9EB00                  	JMP	FCBSave 		; bam!
 13838                                  ContinueOp:
 13839                                  	; 23/01/2024
 13840                                  	; (PCDOS 7.1 IBMDOS.COM)
 13841                                  	;
 13842                                  	;;mov	ax,[si+10h]
 13843                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13844                                  	;;mov	[es:di+11h],ax
 13845                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13846                                  	;;mov	ax,[si+12h]
 13847                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13848                                  	;;mov	[es:di+13h],ax
 13849                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13850                                  	;;;
 13851 00001D00 1E                      	push	ds
 13852 00001D01 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13853 00001D04 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13854 00001D08 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13855 00001D0C C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13856 00001D0F 8CDA                    	mov	dx,ds
 13857 00001D11 1F                      	pop	ds
 13858                                  	;;;
 13859                                  	;;mov	ax,[bp-13]
 13860                                  	;MOV	AX,bPosL
 13861                                  	;;mov	dx,[bp-11]
 13862                                  	;MOV	DX,bPosH
 13863                                  
 13864                                  	;mov	[es:di+15h],ax
 13865 00001D12 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13866                                  	;xchg	dx,[es:di+17h]
 13867 00001D16 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13868 00001D1A 52                      	PUSH	DX			; save away Open age.
 13869                                  	;mov	cx,[bp-15]
 13870 00001D1B 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13871                                  
 13872                                  ;hkn; DOS_Read is in DOSCODE
 13873 00001D1E BF[3E32]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13874                                  	;test	byte [bp-20],4
 13875 00001D21 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13876 00001D25 7503                    	JNZ	short DoContext
 13877                                  
 13878                                  ;hkn; DOS_Write is in DOSCODE
 13879 00001D27 BF[3F34]                	MOV	DI,DOS_WRITE
 13880                                  DoContext:
 13881 00001D2A 55                      	push	bp
 13882 00001D2B 1E                      	push	ds
 13883 00001D2C 56                      	push	si
 13884                                  
 13885                                  ;hkn; SS is DOSDATA
 13886 00001D2D 16                      	push	ss
 13887 00001D2E 1F                      	pop	ds
 13888                                  
 13889                                  ;; Fix for disk full
 13890 00001D2F FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13891                                  	
 13892 00001D31 5E                      	pop	si
 13893 00001D32 1F                      	pop	ds
 13894 00001D33 5D                      	pop	bp
 13895 00001D34 72BB                    	JC	short FCBDeath
 13896                                  	
 13897 00001D36 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13898 00001D3C 740A                    	JZ	short NODSKFULL
 13899 00001D3E 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13900                                  
 13901                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13902                                  	;mov	byte [bp-1],1 
 13903 00001D44 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13904                                  
 13905                                  	; 23/01/2024
 13906                                  	; (PCDOS 7.1 IBMDOS.COM)
 13907                                  	;;mov	byte [bp-1],1 
 13908                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13909                                  
 13910                                  NODSKFULL:
 13911                                  ;; Fix for disk full
 13912                                  	;mov	[bp-17],cx
 13913 00001D48 894EEF                  	MOV	cResult,CX
 13914 00001D4B E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13915                                  	;pop	word [es:di+17h]	
 13916 00001D4E 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13917                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13918                                  
 13919                                  	; 23/01/2024
 13920                                  	; (PCDOS 7.1 IBMDOS.COM)
 13921                                  	;
 13922                                  	;;mov	ax,[es:di+11h]
 13923                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13924                                  	;;mov	[si+10h],ax
 13925                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13926                                  	;;mov	ax,[es:di+13h]
 13927                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13928                                  	;;mov	[si+12h],ax
 13929                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13930                                  	;;;
 13931 00001D52 06                      	push	es
 13932 00001D53 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13933 00001D57 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13934 00001D5A 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13935 00001D5D 07                      	pop	es
 13936                                  	;;;
 13937                                  					;	}
 13938                                  SkipOp:
 13939                                  	;mov	ax,[bp-17]
 13940 00001D5E 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13941 00001D61 31D2                    	XOR	DX,DX
 13942                                  	;div	word [bp-9]
 13943 00001D63 F776F7                  	DIV	RecSize
 13944                                  	;mov	[bp-19],ax
 13945 00001D66 8946ED                  	MOV	cRecRes,AX
 13946                                  	;add	[bp-7],ax
 13947 00001D69 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13948                                  	;adc	word [bp-5],0
 13949 00001D6C 8356FB00                	ADC	RecPosH,0
 13950                                  
 13951                                  ; If we have not gotten the expected number of records, we signal an EOF
 13952                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13953                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13954                                  ; do we.
 13955                                  
 13956                                  	;cmp	ax,[bp-3]
 13957 00001D70 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13958 00001D73 7411                    	JZ	short TryBlank
 13959                                  	;test	byte [bp-20],4
 13960 00001D75 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13961 00001D79 7507                    	JNZ	short SetEOF
 13962                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13963                                  	; MSDOS 3.3
 13964                                  	;;test	word [es:di+5],80h
 13965                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13966                                  	;JNZ	short TryBlank
 13967                                  	; MSDOS 5.0 & MSDOS 6.0
 13968                                  	;test	byte [es:di+5],80h
 13969 00001D7B 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13970 00001D80 7504                    	jnz	short TryBlank
 13971                                  
 13972                                  SetEOF:
 13973                                  	;mov	byte [bp-1],1
 13974 00001D82 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13975                                  TryBlank:				;
 13976 00001D86 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13977 00001D88 7426                    	JZ	short SetExt
 13978                                  	;add	word [bp-7],1
 13979 00001D8A 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13980                                  	;adc	word [bp-5],0
 13981 00001D8E 8356FB00                	ADC	RecPosH,0
 13982                                  	;test	byte [bp-20],4
 13983 00001D92 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13984 00001D96 7418                    	JZ	short SetExt
 13985                                  	;inc	word [bp-19]
 13986 00001D98 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13987                                  	;mov	byte [bp-1],3
 13988 00001D9B C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13989                                  	;mov	cx,[bp-9]
 13990 00001D9F 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13991 00001DA2 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13992 00001DA4 30C0                    	XOR	AL,AL
 13993                                  ;hkn; 	SS override
 13994 00001DA6 36C43E[2C03]            	les     di,[ss:DMAADD]
 13995                                  	;add	di,[bp-17]
 13996 00001DAB 037EEF                  	ADD	DI,cResult
 13997 00001DAE F3AA                    	REP	STOSB			;   }	}
 13998                                  SetExt:
 13999                                  	;mov	dx,[bp-5]
 14000 00001DB0 8B56FB                  	MOV	DX,RecPosH
 14001                                  	;mov	ax,[bp-7]
 14002 00001DB3 8B46F9                  	MOV	AX,RecPosL
 14003                                  	;test	byte [bp-20],2
 14004 00001DB6 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14005 00001DBA 7406                    	JZ	short DoSetExt
 14006                                  	;test	byte [bp-20],8
 14007 00001DBC F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14008 00001DC0 7403                    	JZ	short TrySetRR
 14009                                  DoSetExt:
 14010 00001DC2 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14011                                  TrySetRR:
 14012                                  	;test	byte [bp-20],8
 14013 00001DC5 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14014 00001DC9 740F                    	JZ	short TryReturn
 14015                                  	;mov	[si+21h],ax
 14016 00001DCB 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14017                                  	;mov	[si+23h],dl
 14018 00001DCE 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14019                                  	;cmp	word [si+0Eh],64
 14020 00001DD1 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14021 00001DD5 7303                    	JAE	short TryReturn
 14022                                  	;mov	[si+24h],dh
 14023 00001DD7 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14024                                  TryReturn: 
 14025                                  	;test	byte [bp-20],4
 14026 00001DDA F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14027 00001DDE 750B                    	JNZ	short FCBSave
 14028 00001DE0 1E                      	push	ds			;	FCB->FDate = date;
 14029 00001DE1 E801ED                  	call	DATE16			;	FCB->FTime = time;
 14030 00001DE4 1F                      	pop	ds
 14031                                  	;mov	[si+14h],ax
 14032 00001DE5 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14033                                  	;mov	[si+16h],dx
 14034 00001DE8 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14035                                  FCBSave: 
 14036                                  	;test	byte [bp-20],8
 14037 00001DEB F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14038 00001DEF 7409                    	jz	short DoReturn
 14039                                  	;mov	cx,[bp-19]
 14040 00001DF1 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14041 00001DF4 E88EE6                  	call    Get_User_Stack
 14042                                  	;mov	[si+4],cx
 14043 00001DF7 894C04                  	MOV	[SI+user_env.user_CX],CX
 14044                                  DoReturn:
 14045                                  	;mov	al,[bp-1]
 14046 00001DFA 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14047                                  	;Leave	
 14048 00001DFD 89EC                    	mov     sp,bp
 14049 00001DFF 5D                      	pop     bp
 14050 00001E00 C3                      	retn
 14051                                  
 14052                                  ; 22/07/2018 - Retro DOS v3.0
 14053                                  
 14054                                  ;Break <$FCB_Open - open an old-style FCB>
 14055                                  ;---------------------------------------------------------------------------
 14056                                  ;
 14057                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14058                                  ;	for us and asked to have the rest filled in.
 14059                                  ;
 14060                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14061                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14062                                  ;		FCB has the following fields filled in:
 14063                                  ;		    Time/Date Extent/NR Size
 14064                                  ;---------------------------------------------------------------------------
 14065                                  
 14066                                  _$FCB_OPEN:			; System call 15
 14067                                  
 14068 00001E01 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14069                                  
 14070                                  ;hkn; DOS_Open is in DOSCODE
 14071 00001E04 B9[F42A]                	MOV	CX,DOS_OPEN
 14072                                  
 14073                                  ; The following is common code for Creation and openning of FCBs. AX is
 14074                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14075                                  ; the FCB
 14076                                  
 14077                                  DoAccess:
 14078 00001E07 1E                      	push	ds
 14079 00001E08 52                      	push	dx
 14080 00001E09 51                      	push	cx
 14081 00001E0A 50                      	push	ax			; save FCB pointer away
 14082                                  
 14083                                  ;hkn; 	OpenBuf is in DOSDATA
 14084 00001E0B BF[BE03]                	MOV	DI,OPENBUF
 14085 00001E0E E8B84B                  	call	TransFCB		; crunch the fcb
 14086 00001E11 58                      	pop	ax
 14087 00001E12 59                      	pop	cx
 14088 00001E13 5A                      	pop	dx
 14089 00001E14 1F                      	pop	ds			; get fcb
 14090 00001E15 7303                    	JNC	short FindFCB		; everything seems ok
 14091                                  FCBOpenErr:
 14092                                  	; AL has error code
 14093 00001E17 E93AE8                  	jmp	FCB_RET_ERR
 14094                                  FindFCB:
 14095 00001E1A E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14096                                  
 14097                                  	; 17/05/2019 - Retro DOS v4.0
 14098                                  
 14099                                  	; MSDOS 3.3
 14100                                  	;call	LRUFCB
 14101                                  	;jc	short HardMessage
 14102                                  
 14103                                  	; MSDOS 6.0
 14104 00001E1D 50                      	push	ax
 14105 00001E1E B001                    	mov	al,1			;indicate Open/Create operation
 14106 00001E20 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14107 00001E23 58                      	pop	ax
 14108 00001E24 722A                    	jc	short HardMessage
 14109                                  	
 14110                                  	;mov	word [es:di+2],8000h
 14111 00001E26 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14112 00001E2C 1E                      	push	ds
 14113 00001E2D 56                      	push	si	
 14114 00001E2E 53                      	push	bx			; save fcb pointer
 14115 00001E2F 89CE                    	MOV	SI,CX
 14116                                  
 14117                                  ;hkn; SS is DOSDATA
 14118 00001E31 16                      	push	ss
 14119 00001E32 1F                      	pop	ds			    ; let DOS_Open see variables
 14120 00001E33 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14121 00001E35 5B                      	pop	bx
 14122 00001E36 5E                      	pop	si
 14123 00001E37 1F                      	pop	ds			; get fcb
 14124                                  
 14125                                  ;hkn; SS override
 14126 00001E38 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14127 00001E3D 7318                    	JNC	short FCBOK		; operation succeeded
 14128                                  failopen:
 14129 00001E3F 50                      	PUSH	AX
 14130 00001E40 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14131 00001E42 E8DDFC                  	call	BlastSFT
 14132 00001E45 58                      	POP	AX
 14133                                  	;cmp	ax,4
 14134 00001E46 83F804                  	CMP	AX,error_too_many_open_files
 14135 00001E49 7405                    	JZ	short HardMessage
 14136                                  	;cmp	ax,24h
 14137 00001E4B 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14138 00001E4E 7505                    	jnz	short DeadFCB
 14139                                  HardMessage:
 14140 00001E50 50                      	PUSH	AX
 14141 00001E51 E887FD                  	call	FCBHardErr
 14142 00001E54 58                      	POP	AX
 14143                                  DeadFCB:
 14144                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14145                                  	;jmp	FCB_RET_ERR
 14146 00001E55 EBC0                    	jmp	short FCBOpenErr
 14147                                  FCBOK:
 14148                                  	; MSDOS 6.0
 14149 00001E57 E8EFF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14150 00001E5A 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14151 00001E5C E85853                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14152 00001E5F 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14153                                  ;SR;
 14154                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14155                                  ; LocalSFT variable to reflect this.
 14156                                  
 14157 00001E61 36893E[5D10]            	mov	[ss:LocalSFT],di
 14158 00001E66 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14159                                  ;;SR;
 14160                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14161                                  ;;
 14162                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14163                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14164                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14165                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14166                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14167                                  
 14168                                  FCBOK2:
 14169                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14170 00001E6B 26FF05                  	inc	word [es:di]
 14171                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14172 00001E6E E804FA                  	call	SaveFCBInfo
 14173                                  	; MSDOS 3.3
 14174                                  	;call	SetOpenAge
 14175                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14176                                  	;test	word [es:di+5],80h
 14177                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14178 00001E71 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14179 00001E76 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14180 00001E78 8A04                    	MOV	AL,[SI]			; get drive byte
 14181 00001E7A E8D74A                  	call	GETTHISDRV		; convert
 14182                                  	;INC	AL
 14183                                  	; 17/12/2022
 14184 00001E7D 40                      	inc	ax
 14185 00001E7E 8804                    	MOV	[SI],AL			; stash in good drive letter
 14186                                  
 14187                                  FCBNoDrive:
 14188                                  	;mov	word [si+0Eh],128
 14189 00001E80 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14190                                  
 14191                                  	; 23/01/2024
 14192                                  	; (PCDOS 7.1 IBMDOS.COM)
 14193                                  	;;;
 14194                                  	;;mov	ax,[es:di+0Dh]
 14195                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14196                                  	;;mov	[si+16h],ax
 14197                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14198                                  	;;mov	ax,[es:di+0Fh]
 14199                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14200                                  	;;mov	[si+14h],ax
 14201                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14202                                  	;;mov	ax,[es:di+11h]
 14203                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14204                                  	;;mov	[si+10h],ax
 14205                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14206                                  	;;mov	ax,[es:di+13h]
 14207                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14208                                  	;;mov	[si+12h],ax
 14209                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14210                                  	;
 14211 00001E85 06                      	push	es
 14212                                  	;les	ax,[es:di+0Dh]
 14213 00001E86 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14214                                  	;mov	[si+16h],ax
 14215 00001E8A 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14216                                  	;mov	[si+14h],es
 14217 00001E8D 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14218 00001E90 07                      	pop	es
 14219 00001E91 06                      	push	es
 14220                                  	;les	ax,[es:di+11h]
 14221 00001E92 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14222                                  	;mov	[si+10h],ax
 14223 00001E96 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14224                                  	;mov	[si+12h],ax
 14225 00001E99 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14226 00001E9C 07                      	pop	es
 14227                                  	;;;
 14228                                  	
 14229 00001E9D 31C0                    	XOR	AX,AX			; convenient zero
 14230                                  	;mov	[si+0Ch],ax
 14231 00001E9F 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14232                                  
 14233                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14234                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14235                                  
 14236                                  ;hkn; 	SS override
 14237 00001EA2 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14238                                  	;mov	ah,[es:di+4]
 14239 00001EA7 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14240                                  OpenScan:
 14241                                  	;cmp	al,[si+18h]
 14242 00001EAB 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14243 00001EAE 7407                    	JZ	short SkipCheck
 14244 00001EB0 50                      	push	ax			; preserve count
 14245 00001EB1 E884FC                  	call	CheckFCB		; do they match
 14246 00001EB4 58                      	pop	ax			; get count back
 14247 00001EB5 7309                    	JNC	short OpenFound		; found a match!
 14248                                  SkipCheck:
 14249 00001EB7 FEC0                    	INC	AL			; advance to next FCB
 14250 00001EB9 38E0                    	CMP	AL,AH			; table full?
 14251 00001EBB 75EE                    	JNZ	short OpenScan		; no, go for more
 14252                                  OpenDone:
 14253 00001EBD 30C0                    	xor	al,al			; return success
 14254 00001EBF C3                      	retn
 14255                                  
 14256                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14257                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14258                                  ; Consider:
 14259                                  ;
 14260                                  ;   open (foo)	delete (foo) open (bar)
 14261                                  ;
 14262                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14263                                  ; foo even though foo is no longer needed; this is due to the server closing
 14264                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14265                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14266                                  ; bar and subsequent I/O would be lost to the redirector.
 14267                                  ;
 14268                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14269                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14270                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14271                                  ; around. This will allow us to access the same file through multiple network
 14272                                  ; connections and NOT prematurely terminate when the ref count on one
 14273                                  ; connection goes to zero.
 14274                                  
 14275                                  OpenFound:
 14276                                  	;mov	[si+18h],al
 14277 00001EC0 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14278 00001EC3 26FF05                  	inc	word [es:di]
 14279                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14280                                  					; remember this new invocation
 14281                                  	; 24/01/2024
 14282 00001EC6 16                      	push	ss
 14283 00001EC7 1F                      	pop	ds
 14284                                  	
 14285                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14286 00001EC8 A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14287                                  	;mov	[es:di+15h],ax
 14288 00001ECB 26894515                	MOV	[ES:DI+sf_LRU],AX
 14289                                  ;
 14290                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14291                                  ; blast it to prevent other reuse.
 14292                                  ;
 14293                                  	;push	ss
 14294                                  	;pop	ds
 14295                                  
 14296 00001ECF C43E[9E05]              	LES	DI,[THISSFT]
 14297 00001ED3 26FF0D                  	dec	word [es:di]
 14298                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14299                                  					; free the newly allocated SFT
 14300 00001ED6 E81653                  	call	ShareEnd
 14301 00001ED9 B043                    	MOV	AL,'C'	 ; 43h
 14302 00001EDB E844FC                  	call	BlastSFT
 14303 00001EDE EBDD                    	JMP	short OpenDone
 14304                                  
 14305                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14306                                  ;----------------------------------------------------------------------------
 14307                                  ;
 14308                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14309                                  ;	FCB for us and asked to have the rest filled in.
 14310                                  ;
 14311                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14312                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14313                                  ;		FCB has the following fields filled in:
 14314                                  ;		    Time/Date Extent/NR Size
 14315                                  ;----------------------------------------------------------------------------
 14316                                  
 14317                                  _$FCB_CREATE:		; System call 22
 14318                                  
 14319                                  ;hkn; DOS_Create is in DOSCODE
 14320 00001EE0 B9[CE29]                	MOV	CX,DOS_CREATE		; routine to call
 14321 00001EE3 31C0                    	XOR	AX,AX			; attributes to create
 14322 00001EE5 E84EFD                  	call	GetExtended		; get extended FCB
 14323 00001EE8 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14324 00001EEA 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14325                                  DoAccessJ:
 14326 00001EED E917FF                  	JMP	DoAccess		; do dirty work
 14327                                  
 14328                                  ;============================================================================
 14329                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14330                                  ;============================================================================
 14331                                  ; 22/07/2018 - Retro DOS v3.0
 14332                                  ; 17/05/2019 - Retro DOS v4.0
 14333                                  
 14334                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14335                                  
 14336                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14337                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14338                                  
 14339                                  ;**	Search.asm
 14340                                  ;----------------------------------------------------------------------------
 14341                                  ;	Directory search system calls.
 14342                                  ;	These will be passed direct text of the pathname from the user. 
 14343                                  ;	They will need to be passed through the macro expander prior to
 14344                                  ;	being sent through the low-level stuff. 
 14345                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14346                                  ;
 14347                                  ;	$Dir_Search_First	  written
 14348                                  ;	$Dir_Search_Next	  written
 14349                                  ;	$Find_First	  written
 14350                                  ;	$Find_Next		  written
 14351                                  ;	PackName		  written
 14352                                  ;
 14353                                  ;	Modification history:
 14354                                  ;
 14355                                  ;	  Created: ARR 4 April 1983
 14356                                  
 14357                                  ;----------------------------------------------------------------------------
 14358                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14359                                  ;
 14360                                  ; Inputs:
 14361                                  ;	DS:DX Points to unopenned FCB
 14362                                  ; Function:
 14363                                  ;	Directory is searched for first matching entry and the directory
 14364                                  ;	entry is loaded at the disk transfer address
 14365                                  ; Returns:
 14366                                  ;	AL = -1 if no entries matched, otherwise 0
 14367                                  ;----------------------------------------------------------------------------
 14368                                  
 14369                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14370                                  
 14371                                  	; 24/01/2024
 14372                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14373                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14374                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14375                                  
 14376                                  _$DIR_SEARCH_FIRST:
 14377 00001EF0 368916[A605]            	MOV	[SS:THISFCB],DX
 14378 00001EF5 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14379 00001EFA 89D6                    	MOV	SI,DX
 14380 00001EFC 803CFF                  	CMP	BYTE [SI],0FFH
 14381 00001EFF 7503                    	JNZ	short NORMFCB4
 14382 00001F01 83C607                  	ADD	SI,7			; Point to drive select byte
 14383                                  NORMFCB4:
 14384 00001F04 FF34                    	push	word [SI]		; Save original drive byte for later
 14385                                  
 14386 00001F06 16                      	push	ss
 14387 00001F07 07                      	pop	es			; get es to address DOSGroup
 14388                                  
 14389 00001F08 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14390 00001F0B E8BB4A                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14391 00001F0E 7304                    	JNC	short SearchIt		; no error, go and look
 14392 00001F10 5B                      	pop	bx			; Clean stack
 14393                                  
 14394                                  ; Error code is in AX
 14395                                  
 14396                                  	; 09/11/2022
 14397                                  dcf_errj:
 14398 00001F11 E940E7                  	jmp	FCB_RET_ERR		; error
 14399                                  
 14400                                  SearchIt:
 14401 00001F14 16                      	push	ss
 14402 00001F15 1F                      	pop	ds			; get ready for search
 14403                                  	;push	word [DMAADD]
 14404                                  	;push	word [DMAADD+2]
 14405                                  	; 24/01/2024
 14406 00001F16 C43E[2C03]              	les	di,[DMAADD]
 14407 00001F1A 57                      	push	di
 14408 00001F1B 06                      	push	es
 14409 00001F1C C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14410 00001F22 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14411                                  	; MSDOS 3.3
 14412                                  	;call	DOS_SEARCH_FIRST
 14413                                  	; MSDOS 6.0
 14414 00001F26 E8930D                  	call	GET_FAST_SEARCH		; search
 14415 00001F29 8F06[2E03]              	pop	word [DMAADD+2]
 14416 00001F2D 8F06[2C03]              	pop	word [DMAADD]
 14417 00001F31 735C                    	JNC	short SearchSet		; no error, transfer info
 14418 00001F33 5B                      	pop	bx			; Clean stack
 14419                                  
 14420                                  ; Error code is in AX
 14421                                  
 14422                                  	; 09/11/2022
 14423                                  	;jmp	FCB_RET_ERR
 14424 00001F34 EBDB                    	jmp	short dcf_errj
 14425                                  
 14426                                  ;----------------------------------------------------------------------------
 14427                                  ;
 14428                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14429                                  ;
 14430                                  ; Inputs:
 14431                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14432                                  ; Function:
 14433                                  ;	Directory is searched for the next matching entry and the directory
 14434                                  ;	entry is loaded at the disk transfer address
 14435                                  ; Returns:
 14436                                  ;	AL = -1 if no entries matched, otherwise 0
 14437                                  ;----------------------------------------------------------------------------
 14438                                  
 14439                                  	; 24/01/2024
 14440                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14441                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14442                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14443                                  
 14444                                  _$DIR_SEARCH_NEXT:
 14445 00001F36 368916[A605]            	MOV	[SS:THISFCB],DX
 14446 00001F3B 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14447 00001F40 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14448 00001F46 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14449                                  
 14450 00001F4C 16                      	push	ss
 14451 00001F4D 07                      	pop	es
 14452                                  
 14453 00001F4E BF[BE04]                	MOV	DI,SEARCHBUF
 14454                                  
 14455 00001F51 89D6                    	MOV	SI,DX
 14456 00001F53 803CFF                  	CMP	BYTE [SI],0FFh
 14457 00001F56 750D                    	JNZ	short NORMFCB6
 14458 00001F58 83C606                  	ADD	SI,6
 14459 00001F5B AC                      	LODSB
 14460                                  
 14461 00001F5C 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14462 00001F60 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14463                                  NORMFCB6:
 14464 00001F65 AC                      	LODSB				; Get original user drive byte
 14465 00001F66 50                      	push	ax			; Put it on stack
 14466 00001F67 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14467 00001F6A AA                      	STOSB				; Put in correct place
 14468 00001F6B B90A00                  	MOV	CX,20/2
 14469 00001F6E F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14470                                  
 14471 00001F70 16                      	push	ss
 14472 00001F71 1F                      	pop	ds
 14473                                  
 14474                                  	;push	word [DMAADD]
 14475                                  	;push	word [DMAADD+2]
 14476                                  	; 24/01/2024
 14477 00001F72 C43E[2C03]              	les	di,[DMAADD]
 14478 00001F76 57                      	push	di
 14479 00001F77 06                      	push	es
 14480 00001F78 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14481 00001F7E 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14482 00001F82 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14483 00001F85 8F06[2E03]              	pop	word [DMAADD+2]
 14484 00001F89 8F06[2C03]              	pop	word [DMAADD]
 14485 00001F8D 724A                    	JC	short SearchNoMore
 14486                                  	; 24/01/2024
 14487                                  	;JMP	SearchSet		; Ok set return
 14488                                  
 14489                                  ;;;	; 24/01/2024
 14490                                  
 14491                                  ; The search was successful (or the search-next). We store the information
 14492                                  ; into the user's FCB for continuation.
 14493                                  
 14494                                  SearchSet:
 14495 00001F8F BE[BE04]                	MOV	SI,SEARCHBUF
 14496 00001F92 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14497 00001F96 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14498 00001F9B 7403                    	JZ	short NORMFCB1
 14499 00001F9D 83C707                  	ADD	DI,7			; Point past the extension
 14500                                  NORMFCB1:
 14501 00001FA0 5B                      	pop	bx			; Get original drive byte
 14502 00001FA1 08DB                    	OR	BL,BL
 14503 00001FA3 7506                    	JNZ	short SearchDrv
 14504 00001FA5 8A1E[3603]              	MOV	BL,[CURDRV]
 14505 00001FA9 FEC3                    	INC	BL
 14506                                  SearchDrv:
 14507 00001FAB AC                      	LODSB				; Get correct search contin drive byte
 14508 00001FAC 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14509 00001FAE 47                      	INC	DI
 14510                                  	;STOSB				; Store the correct "user" drive byte
 14511                                  					;  at the start of the search info
 14512 00001FAF B90A00                  	MOV	CX,20/2
 14513 00001FB2 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14514 00001FB4 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14515                                  					;   byte to AL
 14516 00001FB6 AA                      	STOSB				; Search contin drive byte at end of
 14517                                  					;   contin info
 14518 00001FB7 C43E[2C03]              	LES	DI,[DMAADD]
 14519 00001FBB F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14520 00001FC0 740D                    	JZ	short NORMFCB2
 14521 00001FC2 B0FF                    	MOV	AL,0FFh
 14522 00001FC4 AA                      	STOSB
 14523 00001FC5 FEC0                    	INC	AL
 14524                                  	;MOV	CX,5
 14525                                  	; 17/12/2022
 14526 00001FC7 B105                    	mov	cl,5
 14527 00001FC9 F3AA                    	REP	STOSB
 14528 00001FCB A0[6D05]                	MOV	AL,[SATTRIB]
 14529 00001FCE AA                      	STOSB
 14530                                  NORMFCB2:
 14531 00001FCF 88D8                    	MOV	AL,BL			; User Drive byte
 14532 00001FD1 AA                      	STOSB
 14533                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14534                                  	; 17/12/2022
 14535 00001FD2 B110                    	mov	cl,16
 14536 00001FD4 F3A5                    	REP	MOVSW
 14537 00001FD6 E978E6                  	jmp	FCB_RET_OK
 14538                                  ;;;
 14539                                  
 14540                                  SearchNoMore:
 14541 00001FD9 C43E[A605]              	LES	DI,[THISFCB]
 14542 00001FDD F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14543 00001FE2 7403                    	JZ	short NORMFCB8
 14544 00001FE4 83C707                  	ADD	DI,7			; Point past the extension
 14545                                  NORMFCB8:
 14546 00001FE7 5B                      	pop	bx			; Get original drive byte
 14547 00001FE8 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14548                                  					;  at the right spot
 14549                                  ; error code is in AX
 14550                                  
 14551 00001FEB E966E6                  	jmp	FCB_RET_ERR
 14552                                  
 14553                                  ; 17/05/2019 - Retro DOS v4.0
 14554                                  
 14555                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14556                                  
 14557                                  ;---------------------------------------------------------------------------
 14558                                  ;
 14559                                  ;   Procedure Name : $FIND_FIRST
 14560                                  ; 
 14561                                  ;   Assembler usage:
 14562                                  ;	    MOV AH, FindFirst
 14563                                  ;	    LDS DX, name
 14564                                  ;	    MOV CX, attr
 14565                                  ;	    INT 21h
 14566                                  ;	; DMA address has datablock
 14567                                  ;
 14568                                  ;   Error Returns:
 14569                                  ;	    AX = error_path_not_found
 14570                                  ;	       = error_no_more_files
 14571                                  ;---------------------------------------------------------------------------
 14572                                  
 14573                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14574                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14575                                  
 14576                                  	; 24/01/2024
 14577                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14578                                  
 14579                                  _$FIND_FIRST:
 14580 00001FEE 89D6                    	MOV	SI,DX			; get name in appropriate place
 14581 00001FF0 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14582                                  
 14583 00001FF5 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14584                                  
 14585 00001FF8 E8344A                  	call	TransPathSet		; convert the path
 14586 00001FFB 7305                    	JNC	short Find_it 		; no error, go and look
 14587                                  FindError:
 14588                                  	;mov	al,3
 14589 00001FFD B003                    	mov	al, error_path_not_found ; error and map into one.
 14590                                  	; 09/11/2022
 14591                                  FF_errj:
 14592 00001FFF E93CE6                  	jmp	SYS_RET_ERR
 14593                                  Find_it:
 14594 00002002 16                      	push	ss
 14595 00002003 1F                      	pop	ds
 14596                                  
 14597                                  	;push	word [DMAADD]
 14598                                  	;push	word [DMAADD+2]
 14599                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14600 00002004 C43E[2C03]              	les	di,[DMAADD]
 14601 00002008 57                      	push	di
 14602 00002009 06                      	push	es
 14603 0000200A C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14604 00002010 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14605                                  	; MSDOS 3.3
 14606                                  	;call	DOS_SEARCH_FIRST
 14607                                  	; MSDOS 6.0
 14608 00002014 E8A50C                  	call	GET_FAST_SEARCH 	; search
 14609 00002017 8F06[2E03]              	pop	word [DMAADD+2]
 14610 0000201B 8F06[2C03]              	pop	word [DMAADD]
 14611                                  	
 14612                                  	; 16/12/2022
 14613                                  	;JNC	short FindSet 		; no error, transfer info
 14614 0000201F 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14615                                  	;
 14616                                  	;jmp	SYS_RET_ERR
 14617                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14618                                  ;FFF_errj:
 14619                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14620                                  
 14621                                  FindSet:
 14622 00002021 BE[BE04]                	MOV	SI,SEARCHBUF
 14623 00002024 C43E[2C03]              	LES	DI,[DMAADD]
 14624 00002028 B91500                  	MOV	CX,21
 14625 0000202B F3A4                    	REP	MOVSB
 14626 0000202D 56                      	PUSH	SI			; Save pointer to start of entry
 14627                                  	;mov	al,[si+0Bh]
 14628 0000202E 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14629 00002031 AA                      	STOSB
 14630                                  	;add	si,16h ; 22
 14631 00002032 83C616                  	ADD	SI,dir_entry.dir_time
 14632 00002035 A5                      	MOVSW				; dir_time
 14633 00002036 A5                      	MOVSW				; dir_date
 14634 00002037 46                      	INC	SI
 14635 00002038 46                      	INC	SI			; Skip dir_first
 14636 00002039 A5                      	MOVSW				; dir_size (2 words)
 14637 0000203A A5                      	MOVSW
 14638 0000203B 5E                      	POP	SI			; Point back to dir_name
 14639 0000203C E83300                   	CALL	PackName
 14640 0000203F E9F3E5                  	jmp	SYS_RET_OK		; bye with no errors
 14641                                  
 14642                                  ;---------------------------------------------------------------------------
 14643                                  ;
 14644                                  ;   Procedure Name : $FIND_NEXT
 14645                                  ;
 14646                                  ;   Assembler usage:
 14647                                  ;	; dma points at area returned by find_first
 14648                                  ;	    MOV AH, findnext
 14649                                  ;	    INT 21h
 14650                                  ;	; next entry is at dma
 14651                                  ;
 14652                                  ;   Error Returns:
 14653                                  ;	    AX = error_no_more_files
 14654                                  ;---------------------------------------------------------------------------
 14655                                  
 14656                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14657                                  
 14658                                  	; 24/01/2024
 14659                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14660                                  
 14661                                  _$FIND_NEXT:
 14662 00002042 16                      	push	ss
 14663 00002043 07                      	pop	es
 14664                                  
 14665 00002044 BF[BE04]                	MOV	DI,SEARCHBUF
 14666                                  
 14667 00002047 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14668                                  
 14669 0000204C B91500                  	MOV	CX,21
 14670 0000204F F3A4                    	REP	MOVSB			; Put the search continuation info
 14671                                  					;  in the right place
 14672 00002051 16                      	push	ss
 14673 00002052 1F                      	pop	ds			; get ready for search
 14674                                  	
 14675                                  	;push	word [DMAADD]
 14676                                  	;push	word [DMAADD+2]
 14677                                  	; 24/01/2024
 14678 00002053 C43E[2C03]              	les	di,[DMAADD]
 14679 00002057 57                      	push	di
 14680 00002058 06                      	push	es
 14681 00002059 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14682 0000205F 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14683 00002063 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14684 00002066 8F06[2E03]              	pop	word [DMAADD+2]
 14685 0000206A 8F06[2C03]              	pop	word [DMAADD]
 14686 0000206E 73B1                    	JNC	short FindSet 		; No error, set info
 14687                                  	;jmp	SYS_RET_ERR
 14688                                  	; 16/12/2022
 14689 00002070 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14690                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14691                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14692                                  
 14693                                  ;---------------------------------------------------------------------------
 14694                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14695                                  ;
 14696                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14697                                  ;	the ASCIZ format.
 14698                                  ;
 14699                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14700                                  ;		(ES:DI) = destination area (13 bytes)
 14701                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14702                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14703                                  ;---------------------------------------------------------------------------
 14704                                  
 14705                                  	; 25/01/2024 - Retro DOS v4.1
 14706                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F5Ch
 14707                                  
 14708                                  PackName:
 14709                                  ;	Move over 8 characters to cover the name component, then trim it's
 14710                                  ;	trailing blanks.
 14711                                  
 14712                                  	;MOV	CX,8			; Pack the name
 14713                                  	;REP	MOVSB			; Move all of it
 14714                                  	; 25/01/2024
 14715 00002072 B90400                  	mov	cx,4
 14716 00002075 F3A5                    	rep	movsw
 14717                                  main_kill_tail:
 14718 00002077 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14719 0000207C 7507                    	JNZ	short find_check_dot
 14720 0000207E 4F                      	DEC	DI			; Back up over trailing space
 14721 0000207F 41                      	INC	CX
 14722 00002080 83F908                  	CMP	CX,8
 14723 00002083 72F2                    	JB	short main_kill_tail
 14724                                  find_check_dot:
 14725                                  	;CMP	WORD [SI],(" " << 8) | " "
 14726 00002085 813C2020                	cmp     word [si],2020h 
 14727 00002089 7506                    	JNZ	short got_ext 		; Some chars in extension
 14728 0000208B 807C0220                	CMP	BYTE [SI+2]," "
 14729 0000208F 740F                    	JZ	short find_done		; No extension
 14730                                  got_ext:
 14731 00002091 B02E                    	MOV	AL,"."	; 2Eh
 14732 00002093 AA                      	STOSB
 14733                                  	;MOV	CX,3
 14734                                  	;; 18/12/2022
 14735                                  	;;mov	cl,3
 14736                                  	;;REP	MOVSB
 14737                                  	;movsb
 14738                                  	;movsb
 14739                                  	;movsb
 14740                                  	; 25/01/2024
 14741 00002094 A5                      	movsw
 14742 00002095 A4                      	movsb
 14743                                  ext_kill_tail:
 14744 00002096 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14745 0000209B 7503                    	JNZ	short find_done
 14746 0000209D 4F                      	DEC	DI			; Back up over trailing space
 14747 0000209E EBF6                    	JMP	short ext_kill_tail
 14748                                  find_done:
 14749 000020A0 31C0                    	XOR	AX,AX
 14750 000020A2 AA                      	STOSB				; NUL terminate
 14751 000020A3 C3                      	retn
 14752                                  
 14753                                  ;---------------------------------------------------------------------------
 14754                                  
 14755                                  ; 24/01/2024
 14756                                  %if 0
 14757                                  	; 17/05/2019 - Retro DOS v4.0
 14758                                  GET_FAST_SEARCH:
 14759                                  	; 22/07/2018
 14760                                  	; MSDOS 6.0
 14761                                  	; 17/12/2022
 14762                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14763                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14764                                  					;FO.trigger fastopen ;AN000;
 14765                                  	;call	DOS_SEARCH_FIRST
 14766                                  	;retn
 14767                                  	; 17/12/2022
 14768                                  	jmp	DOS_SEARCH_FIRST
 14769                                  %endif
 14770                                  
 14771                                  ;============================================================================
 14772                                  ; PATH.ASM, MSDOS 6.0, 1991
 14773                                  ;============================================================================
 14774                                  ; 06/08/2018 - Retro DOS v3.0
 14775                                  ; 17/05/2019 - Retro DOS v4.0
 14776                                  
 14777                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14778                                  
 14779                                  ;**	Directory related system calls. These will be passed direct text of the
 14780                                  ;	pathname from the user. They will need to be passed through the macro
 14781                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14782                                  ;	defined in DISPATCH. The system calls are:
 14783                                  ;
 14784                                  ;	$CURRENT_DIR  Written
 14785                                  ;	$RMDIR	  Written
 14786                                  ;	$CHDIR	  Written
 14787                                  ;	$MKDIR	  Written
 14788                                  ;
 14789                                  ;
 14790                                  ;	Modification history:
 14791                                  ;
 14792                                  ;	    Created: ARR 4 April 1983
 14793                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14794                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14795                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14796                                  ;				    current directory.
 14797                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14798                                  
 14799                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14800                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14801                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14802                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14803                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14804                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14805                                  ;	I_Need	cMeta,BYTE
 14806                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14807                                  
 14808                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14809                                  ;----------------------------------------------------------------------------
 14810                                  ;
 14811                                  ;   Procedure Name : $CURRENT_DIR
 14812                                  ;
 14813                                  ;   Assembler usage:
 14814                                  ;		LDS	SI,area
 14815                                  ;		MOV	DL,drive
 14816                                  ;		INT	21h
 14817                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14818                                  ;	    ; current directory.
 14819                                  ;   Error returns:
 14820                                  ;	    AX = error_invalid_drive
 14821                                  ;
 14822                                  ;----------------------------------------------------------------------------
 14823                                  
 14824                                  	; 06/08/2018 - Retro DOS v3.0
 14825                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14826                                  
 14827                                  	; 25/01/2024 - Retro DOS v4.1
 14828                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14829                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14830                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14831                                  
 14832                                  _$CURRENT_DIR:
 14833 000020A4 E84BF2                  	call	ECritDisk
 14834 000020A7 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14835 000020A9 E88C48                  	call	GetVisDrv		; grab it
 14836 000020AC 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14837                                  CurdirErr:
 14838 000020AE E85CF2                  	call	LCritDisk
 14839                                  
 14840                                  	; MSDOS 3.3
 14841                                  	;mov	al,0Fh
 14842                                  	
 14843                                  	; MSDOS 6.0
 14844 000020B1 1E                      	push	ds
 14845 000020B2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14846 000020B7 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14847 000020BA 1F                      	pop	ds
 14848                                  
 14849                                  curdir_errj:
 14850 000020BB E980E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14851                                  
 14852                                  CurrentValidate:
 14853 000020BE 1E                      	push	ds			; save destination
 14854 000020BF 56                      	push	si
 14855                                  	
 14856                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14857                                  	
 14858                                  	; MSDOS 6.0
 14859 000020C0 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14860                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14861 000020C5 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14862                                  	
 14863                                  	; 25/01/2024
 14864                                  	;lds     si,[THISCDS]
 14865                                  
 14866                                  ; 16/12/2022
 14867                                  %if 0
 14868                                  	; 09/11/2022 (following test instruction is nonsense!)
 14869                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14870                                  
 14871                                  	;test	word [si+43h],8000h
 14872                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14873                                  	;jnz	short $+2  ; 09/11/2022	
 14874                                  	jnz	short DoCheck
 14875                                  %endif
 14876                                  
 14877                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14878                                  ; media check.
 14879                                  ;	CMP	word [SI+curdir.ID],0
 14880                                  ;	JZ	short GetDst
 14881                                  DoCheck:
 14882                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14883                                  
 14884                                  	; 25/01/2024
 14885                                  	; MSDOS 6.0
 14886                                  	;push	ds
 14887                                  	;mov	ds,[cs:DosDSeg]
 14888                                  	;mov	byte [NoSetDir],0 ; *
 14889                                  	;pop	ds
 14890                                  
 14891 000020CA BF[BE03]                	MOV	DI,OPENBUF
 14892 000020CD E89520                  	call	ValidateCDS		; output is ES:DI -> CDS
 14893                                  
 14894 000020D0 06                      	push	es	 		; swap source and destination
 14895 000020D1 57                      	push	di
 14896 000020D2 5E                      	pop	si
 14897 000020D3 1F                      	pop	ds
 14898                                  GetDst:
 14899 000020D4 5F                      	pop	di
 14900 000020D5 07                      	pop	es			; get real destination
 14901 000020D6 72D6                    	JC	short CurdirErr
 14902                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14903                                  	;
 14904                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14905                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14906                                  	; 16/12/2022
 14907                                  	;add	si,0  ; add si,curdir.text
 14908                                  	;
 14909                                  	;add	si,[si+4Fh] ; 17/05/2019
 14910 000020D8 03744F                  	ADD	SI,[SI+curdir.end]
 14911 000020DB 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14912 000020DE 7501                    	JNZ	short CurrentCopy
 14913 000020E0 46                      	INC	SI
 14914                                  CurrentCopy:
 14915                                  ;	call	FStrCpy
 14916                                  ;; 10/29/86 E5 char
 14917 000020E1 50                      	PUSH	AX
 14918 000020E2 AC                      	LODSB				; get char
 14919 000020E3 08C0                    	OR	AL,AL
 14920 000020E5 7413                    	JZ	short FOK
 14921 000020E7 3C05                    	CMP	AL,05H
 14922 000020E9 740D                    	JZ	short FCHANGE
 14923 000020EB EB01                    	JMP	short FFF
 14924                                  FCPYNEXT:
 14925 000020ED AC                      	LODSB				; get char
 14926                                  FFF:
 14927 000020EE 3C5C                    	CMP	AL,'\'			; beginning of directory
 14928 000020F0 7508                    	JNZ	short FOK		; no
 14929 000020F2 AA                      	STOSB				; put into user's buffer
 14930 000020F3 AC                      	LODSB				; 1st char of dir is 05?
 14931 000020F4 3C05                    	CMP	AL,05H
 14932 000020F6 7502                    	JNZ	short FOK		; no
 14933                                  FCHANGE:
 14934 000020F8 B0E5                    	MOV	AL,0E5H			; make it E5
 14935                                  FOK:
 14936 000020FA AA                      	STOSB				; put into user's buffer
 14937 000020FB 08C0                    	OR	AL,AL			; final char
 14938 000020FD 75EE                    	JNZ	short FCPYNEXT		; no
 14939 000020FF 58                      	POP	AX
 14940                                  
 14941                                  ;; 10/29/86 E5 char
 14942 00002100 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14943 00002102 E808F2                  	call	LCritDisk
 14944 00002105 E92DE5                  	jmp	SYS_RET_OK		; no more, bye!
 14945                                  
 14946                                  ; 17/05/2019 - Retro DOS v4.0
 14947                                  
 14948                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14949                                  
 14950                                  ;BREAK <$RmDir -- Remove a directory>
 14951                                  ;----------------------------------------------------------------------------
 14952                                  ;
 14953                                  ; Procedure Name : $RmDir
 14954                                  ;
 14955                                  ; Inputs:
 14956                                  ;	DS:DX Points to asciz name
 14957                                  ; Function:
 14958                                  ;	Delete directory if empty
 14959                                  ; Returns:
 14960                                  ;	STD XENIX Return
 14961                                  ;	AX = error_path_not_found If path bad
 14962                                  ;	AX = error_access_denied If
 14963                                  ;		Directory not empty
 14964                                  ;		Path not directory
 14965                                  ;		Root directory specified
 14966                                  ;		Directory malformed (. and .. not first two entries)
 14967                                  ;		User tries to delete a current directory
 14968                                  ;	AX = error_current_directory
 14969                                  ;
 14970                                  ;----------------------------------------------------------------------------
 14971                                  
 14972                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14973                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14974                                  
 14975                                  _$RMDIR:
 14976 00002108 52                      	push	dx			; Save ptr to name
 14977 00002109 1E                      	push	ds
 14978 0000210A 89D6                    	mov	si,dx			; Load ptr into si
 14979 0000210C BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14980 0000210F 57                      	push	di
 14981 00002110 E82449                  	call	TransPathNoSet		; Translate the name
 14982 00002113 5F                      	pop	di			; di = ptr to buf for trans name
 14983 00002114 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14984 00002116 1F                      	pop	ds
 14985 00002117 5A                      	pop	dx			; Restore the name
 14986                                  	;mov	al,3
 14987 00002118 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14988                                  	; 16/12/2022
 14989                                  rmdir_errj: ; 10/08/2018
 14990                                  chdir_errj:
 14991 0000211A EB9F                    	jmp	short curdir_errj
 14992                                  	;jmp	SYS_RET_ERR
 14993                                  rmlset:
 14994 0000211C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14995 00002122 7512                    	Jnz	short rmerr		;	return (-1);
 14996 00002124 16                      	push	ss
 14997 00002125 07                      	pop	es
 14998 00002126 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14999                                  rmloop: 
 15000 00002128 E87E48                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15001 0000212B 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15002 0000212D E866F0                  	call	StrCmp			; Are the 2 paths the same?
 15003 00002130 7404                    	jz	short rmerr		; Yes, report error.
 15004 00002132 FEC0                    	inc	al			; No, inc al to next drive number
 15005 00002134 EBF2                    	jmp	short rmloop		; Go check next drive.
 15006                                  rmerr:
 15007 00002136 1F                      	pop	ds
 15008 00002137 5A                      	pop	dx			; Restore the name
 15009                                  	;mov	al,10h
 15010 00002138 B010                    	mov	al,error_current_directory ; error
 15011                                  	; 16/12/2022
 15012                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15013                                  ;chdir_errj:
 15014 0000213A EBDE                    	jmp	short rmdir_errj
 15015                                  rmcont:
 15016 0000213C 1F                      	pop	ds
 15017 0000213D 5A                      	pop	dx			; Restore the name
 15018 0000213E BE[6731]                	MOV	SI,DOS_RMDIR
 15019 00002141 EB7C                    	JMP	DoDirCall
 15020                                  
 15021                                  ; 17/05/2019 - Retro DOS v4.0
 15022                                  
 15023                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15024                                  
 15025                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15026                                  ;----------------------------------------------------------------------------
 15027                                  ;
 15028                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15029                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15030                                  ; several cases to consider:
 15031                                  ;
 15032                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15033                                  ;	it into a WFP.	We verify the existance of this directory and then
 15034                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15035                                  ;	directory cluster.
 15036                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15037                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15038                                  ;	WFP back into the CDS.
 15039                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15040                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15041                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15042                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15043                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15044                                  ;	to process the path but to return the logical CDS and the logical
 15045                                  ;	path.  We then copy the logical path into the logical CDS.
 15046                                  ;
 15047                                  ; Inputs:
 15048                                  ;	DS:DX Points to asciz name
 15049                                  ; Returns:
 15050                                  ;	STD XENIX Return
 15051                                  ;	AX = chdir_path_not_found if error
 15052                                  ;
 15053                                  ;----------------------------------------------------------------------------
 15054                                  
 15055                                  _$CHDIR:
 15056 00002143 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15057 00002146 89D6                    	MOV	SI,DX			; get source
 15058 00002148 E8E048                  	call	TransPath		; go munge the path and get real CDS
 15059 0000214B 7304                    	JNC	short ChDirCrack	; no errors, try path
 15060                                  ChDirErrP:
 15061                                  	;mov	al,3
 15062 0000214D B003                    	MOV	AL,error_path_not_found
 15063                                  ChDirErr:
 15064                                  	;jmp	SYS_RET_ERR 	; oops!
 15065                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15066 0000214F EBC9                    	jmp	short chdir_errj
 15067                                  
 15068                                  ChDirCrack:
 15069 00002151 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15070 00002156 75F5                    	JNZ	short ChDirErrP
 15071                                  
 15072                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15073                                  ; found.
 15074                                  
 15075 00002158 C43E[A205]              	LES	DI,[THISCDS]
 15076 0000215C 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15077 0000215F 74EC                    	JZ	short ChDirErrP		;	error ();
 15078                                  
 15079                                  ; Find out if the directory exists.
 15080                                  
 15081 00002161 E8C00F                  	call	DOS_CHDIR
 15082                                  	;Jc	short ChDirErr
 15083                                  	; 16/12/2022
 15084 00002164 72B4                    	jc	short chdir_errj
 15085                                  ;
 15086                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15087                                  ; not network). If one was seen, all we need to do is copy in the text
 15088                                  ;
 15089 00002166 C43E[A205]              	LES	DI,[THISCDS]
 15090                                  	;test	word [es:di+43h],2000h
 15091                                  	; 17/12/2022
 15092 0000216A 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15093                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15094 0000216F 7425                    	JZ	short GotCDS
 15095                                  
 15096                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15097                                  
 15098 00002171 06                      	push	es	
 15099 00002172 57                      	push	di
 15100 00002173 51                      	push	cx			; save CDS and cluster...
 15101 00002174 E80EE3                  	call	Get_User_Stack		; get original text
 15102                                  	
 15103                                  	;mov	di,[si+6]
 15104 00002177 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15105                                  	;mov	ds,[si+0Eh]
 15106 0000217A 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15107                                  	
 15108 0000217D BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15109 00002180 87F7                    	XCHG	SI,DI
 15110 00002182 30C0                    	XOR	AL,AL			; do no splicing
 15111 00002184 57                      	push	di
 15112 00002185 E8AF48                  	call	TransPathNoSet		; Munge path
 15113 00002188 5E                      	pop	si
 15114                                  
 15115                                  ; There should NEVER be an error here.
 15116                                  
 15117                                  ;IF FALSE
 15118                                  ;	JNC SKipErr
 15119                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15120                                  ;SkipErr:
 15121                                  ;ENDIF
 15122 00002189 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15123                                  	;mov	word [es:di+49h],-1
 15124 0000218D 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15125                                  					; no valid cluster here...
 15126 00002193 59                      	pop	cx
 15127 00002194 5F                      	pop	di
 15128 00002195 07                      	pop	es
 15129                                  
 15130                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15131                                  
 15132                                  GotCDS:
 15133                                  
 15134                                  ; wfp_start points to the text. See if it is long enough
 15135                                  
 15136                                  	; MSDOS 3.3
 15137                                  	;push	ss
 15138                                  	;pop	ds
 15139                                  	;mov	si,[WFP_START]
 15140                                  	;push	cx
 15141                                  	;call	DStrLen
 15142                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15143                                  	;pop	cx
 15144                                  	;ja	short ChDirErrP
 15145                                  
 15146                                  	; MSDOS 6.0
 15147 00002196 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15148 00002199 77B2                    	JA	short ChDirErrP
 15149                                  	; MSDOS 3.3 & MSDOS 6.0
 15150                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15151                                  	; 17/12/2022
 15152 0000219B 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15153 000021A0 7512                    	JNZ	short SkipRecency
 15154                                  	; MSDOS 6.0
 15155                                  	;test	word [es:di+43h],2000h
 15156                                  	; 17/12/2022
 15157 000021A2 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15158                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15159                                  					;PTM. for Join and Subst ;AN000;
 15160 000021A7 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15161 000021A9 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15162                                  setdirclus:
 15163                                  	;mov	[es:di+49h],cx
 15164 000021AC 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15165 000021B0 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15166                                  SkipRecency:
 15167 000021B4 E810F0                  	call	FStrCpy
 15168 000021B7 30C0                    	XOR	AL,AL
 15169                                  mkdir_ok:
 15170 000021B9 E979E4                  	jmp	SYS_RET_OK
 15171                                  
 15172                                  ; 17/05/2019 - Retro DOS v4.0
 15173                                  
 15174                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15175                                  
 15176                                  ;BREAK <$MkDir - Make a directory entry>
 15177                                  ;---------------------------------------------------------------------------
 15178                                  ;
 15179                                  ; Procedure Name : $MkDir
 15180                                  ; Inputs:
 15181                                  ;	DS:DX Points to asciz name
 15182                                  ; Function:
 15183                                  ;	Make a new directory
 15184                                  ; Returns:
 15185                                  ;	STD XENIX Return
 15186                                  ;	AX = mkdir_path_not_found if path bad
 15187                                  ;	AX = mkdir_access_denied  If
 15188                                  ;		Directory cannot be created
 15189                                  ;		Node already exists
 15190                                  ;		Device name given
 15191                                  ;		Disk or directory(root) full
 15192                                  ;---------------------------------------------------------------------------
 15193                                  
 15194                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15195                                  
 15196                                  _$MKDIR:
 15197 000021BC BE[3730]                	MOV	SI,DOS_MKDIR
 15198                                  DoDirCall:
 15199 000021BF BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15200                                  
 15201 000021C2 56                      	push	si
 15202 000021C3 89D6                    	MOV	SI,DX			; get source
 15203 000021C5 E86348                  	call	TransPath		; go munge the path
 15204 000021C8 5E                      	pop	si
 15205 000021C9 7305                    	JNC	short MkDirCrack	; no errors, try path
 15206                                  MkErrP:
 15207 000021CB B003                    	MOV	AL,error_path_not_found	; oops!
 15208                                  MkErr:
 15209 000021CD E96EE4                  	jmp	SYS_RET_ERR
 15210                                  MkDirCrack:
 15211 000021D0 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15212 000021D6 75F3                    	JNZ	short MkErrP
 15213                                  
 15214                                  	; MSDOS 3.3
 15215                                  	;push	ss
 15216                                  	;pop	ds
 15217                                  	;call	si
 15218                                  	;jb	short MkErr
 15219                                  	;;jmp	short mkdir_ok
 15220                                  	;jmp	SYS_RET_OK
 15221                                  
 15222                                  	; MSDOS 6.0
 15223 000021D8 56                      	PUSH	SI			;PTM.			;AN000;
 15224 000021D9 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15225 000021DC 5E                      	POP	SI			;PTM.			;AN000;
 15226 000021DD 7604                    	JBE	short pathok		;PTM.			;AN000;
 15227                                  	;mov	al,5
 15228 000021DF B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15229                                  	;jmp	SYS_RET_ERR		;PTM.
 15230 000021E1 EBEA                    	jmp	short MkErr
 15231                                  pathok:
 15232 000021E3 FFD6                    	CALL	SI			; go get file
 15233 000021E5 72E6                    	JC	short MkErr		; no errors
 15234                                  	; 16/12/2022
 15235                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15236 000021E7 EBD0                    	jmp	short mkdir_ok
 15237                                  	;jmp	SYS_RET_OK
 15238                                  
 15239                                  ;----------------------------------------------------------------------------
 15240                                  ;
 15241                                  ; Procedure Name : Check_PathLen
 15242                                  ;
 15243                                  ; Inputs:
 15244                                  ;	nothing
 15245                                  ; Function:
 15246                                  ;	check if final path length greater than 67
 15247                                  ; Returns:
 15248                                  ;	Above flag set if > 67
 15249                                  ;
 15250                                  ;---------------------------------------------------------------------------
 15251                                  
 15252                                  Check_PathLen:
 15253                                  	; 09/09/2018
 15254                                  	;mov	SI,[WFP_START]
 15255 000021E9 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15256                                  Check_PathLen2:
 15257 000021EE 16                      	push	ss
 15258 000021EF 1F                      	pop	ds
 15259                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15260 000021F0 51                      	push	CX	
 15261 000021F1 E8EAEF                  	CALL	DStrLen
 15262 000021F4 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15263 000021F7 59                      	POP	CX
 15264 000021F8 C3                      	retn
 15265                                  
 15266                                  ;============================================================================
 15267                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15268                                  ;============================================================================
 15269                                  ; 07/08/2018 - Retro DOS v3.0
 15270                                  ; 17/05/2019 - Retro DOS v4.0
 15271                                  
 15272                                  ;**	IOCTL system call.
 15273                                  ;----------------------------------------------------------------------------
 15274                                  ;	$IOCTL
 15275                                  ;
 15276                                  ;	  Revision history:
 15277                                  ;
 15278                                  ;		Created: ARR 4 April 1983
 15279                                  ;
 15280                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15281                                  ;
 15282                                  ;		A000	version 4.00	Jan. 1988
 15283                                  ;
 15284                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15285                                  ;
 15286                                  
 15287                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15288                                  ;---------------------------------------------------------------------------
 15289                                  ;
 15290                                  ;   Assembler usage:
 15291                                  ;	    MOV     BX, Handle
 15292                                  ;	    MOV     DX, Data
 15293                                  ;
 15294                                  ;	(or LDS     DX,BUF
 15295                                  ;	    MOV     CX,COUNT)
 15296                                  ;
 15297                                  ;	    MOV     AH, Ioctl
 15298                                  ;	    MOV     AL, Request
 15299                                  ;	    INT     21h
 15300                                  ;
 15301                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15302                                  ;	    attribute word in DX, handle in BX:
 15303                                  ;	    DH = high word of device driver attributes
 15304                                  ;	    DL = low byte of sf_flags
 15305                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15306                                  ;	    in BX.
 15307                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15308                                  ;	    into DS:DX.  Return number read in AX.
 15309                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15310                                  ;	    DS:DX.  Return bytes written in AX.
 15311                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15312                                  ;	    into DS:DX.  Return number read in AX.
 15313                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15314                                  ;	    DS:DX.  Return bytes written in AX.
 15315                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15316                                  ;	    device, AL = 0FFh, otherwise 0.
 15317                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15318                                  ;	    device, AL = 0FFh, otherwise 0.
 15319                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15320                                  ;	    removable media, 0 otherwise.
 15321                                  ;	 9  Return the contents of the device attribute word in DX for the
 15322                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15323                                  ;	    network. 8000h is the bit for local use.
 15324                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15325                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15326                                  ;	    the count and CX is the delay.
 15327                                  ;
 15328                                  ;   Error returns:
 15329                                  ;	    AX = error_invalid_handle
 15330                                  ;	       = error_invalid_function
 15331                                  ;	       = error_invalid_data
 15332                                  ;
 15333                                  ;-------------------------------------------------------------------------------
 15334                                  ;
 15335                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15336                                  ;   than the above
 15337                                  ;
 15338                                  ;	There are several basic forms of IOCTL calls:
 15339                                  ;
 15340                                  ;
 15341                                  ;	** Get/Set device information:	**
 15342                                  ;
 15343                                  ;	ENTRY	(AL) = function code
 15344                                  ;		  0 - Get device information
 15345                                  ;		  1 - Set device information
 15346                                  ;		(BX) = file handle
 15347                                  ;		(DX) = info for "Set Device Information"
 15348                                  ;	EXIT	'C' set if error
 15349                                  ;		  (AX) = error code
 15350                                  ;		'C' clear if OK
 15351                                  ;		  (DX) = info for "Get Device Information"
 15352                                  ;	USES	ALL
 15353                                  ;
 15354                                  ;
 15355                                  ;	**  Read/Write Control Data From/To Handle  **
 15356                                  ;
 15357                                  ;	ENTRY	(AL) = function code
 15358                                  ;		  2 - Read device control info
 15359                                  ;		  3 - Write device control info
 15360                                  ;		(BX) = file handle
 15361                                  ;		(CX) = transfer count
 15362                                  ;		(DS:DX) = address for data
 15363                                  ;	EXIT	'C' set if error
 15364                                  ;		  (AX) = error code
 15365                                  ;		'C' clear if OK
 15366                                  ;		  (AX) = count of bytes transfered
 15367                                  ;	USES	ALL
 15368                                  ;
 15369                                  ;
 15370                                  ;	**  Read/Write Control Data From/To Block Device  **
 15371                                  ;
 15372                                  ;	ENTRY	(AL) = function code
 15373                                  ;		  4 - Read device control info
 15374                                  ;		  5 - Write device control info
 15375                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15376                                  ;		(CX) = transfer count
 15377                                  ;		(DS:DX) = address for data
 15378                                  ;	EXIT	'C' set if error
 15379                                  ;		  (AX) = error code
 15380                                  ;		'C' clear if OK
 15381                                  ;		  (AX) = count of bytes transfered
 15382                                  ;	USES	ALL
 15383                                  ;
 15384                                  ;
 15385                                  ;	**  Get Input/Output Status  **
 15386                                  ;
 15387                                  ;	ENTRY	(AL) = function code
 15388                                  ;		  6 - Get Input status
 15389                                  ;		  7 - Get Output Status
 15390                                  ;		(BX) = file handle
 15391                                  ;	EXIT	'C' set if error
 15392                                  ;		  (AX) = error code
 15393                                  ;		'C' clear if OK
 15394                                  ;		  (AL) = 00 if not ready
 15395                                  ;		  (AL) = FF if ready
 15396                                  ;	USES	ALL
 15397                                  ;
 15398                                  ;
 15399                                  ;	**  Get Drive Information  **
 15400                                  ;
 15401                                  ;	ENTRY	(AL) = function code
 15402                                  ;		  8 - Check for removable media
 15403                                  ;		  9 - Get device attributes
 15404                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15405                                  ;	EXIT	'C' set if error
 15406                                  ;		  (AX) = error code
 15407                                  ;		'C' clear if OK
 15408                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15409                                  ;		  (DX) = device attribute word (func. 9)
 15410                                  ;	USES	ALL
 15411                                  ;
 15412                                  ;
 15413                                  ;	**  Get Redirected bit	**
 15414                                  ;
 15415                                  ;	ENTRY	(AL) = function code
 15416                                  ;		  0Ah - Network stuff
 15417                                  ;		(BX) = file handle
 15418                                  ;	EXIT	'C' set if error
 15419                                  ;		  (AX) = error code
 15420                                  ;		'C' clear if OK
 15421                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15422                                  ;	USES	ALL
 15423                                  ;
 15424                                  ;
 15425                                  ;	**  Change sharer retry parameters  **
 15426                                  ;
 15427                                  ;	ENTRY	(AL) = function code
 15428                                  ;		  0Bh - Set retry parameters
 15429                                  ;		(CX) = retry loop count
 15430                                  ;		(DX) = number of retries
 15431                                  ;	EXIT	'C' set if error
 15432                                  ;		  (AX) = error code
 15433                                  ;		'C' clear if OK
 15434                                  ;	USES	ALL
 15435                                  ;
 15436                                  ;
 15437                                  ;   =================================================================
 15438                                  ;
 15439                                  ;	**  New Standard Control  **
 15440                                  ;
 15441                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15442                                  ;	FORMS ARE OBSOLETE.
 15443                                  ;
 15444                                  ;   =================================================================
 15445                                  ;
 15446                                  ;	ENTRY	(AL) = function code
 15447                                  ;		  0Ch - Control Function subcode
 15448                                  ;		(BX) = File Handle
 15449                                  ;		(CH) = Category Indicator
 15450                                  ;		(CL) = Function within category
 15451                                  ;		(DS:DX) = address for data, if any
 15452                                  ;		(SI) = Passed to device as argument, use depends upon function
 15453                                  ;		(DI) = Passed to device as argument, use depends upon function
 15454                                  ;	EXIT	'C' set if error
 15455                                  ;		  (AX) = error code
 15456                                  ;		'C' clear if OK
 15457                                  ;		  (SI) = Return value, meaning is function dependent
 15458                                  ;		  (DI) = Return value, meaning is function dependent
 15459                                  ;		  (DS:DX) = Return address, use is function dependent
 15460                                  ;	USES	ALL
 15461                                  ;
 15462                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15463                                  ;     (See inc\ioctl.inc for more info)
 15464                                  ;
 15465                                  ;	ENTRY	(AL) = function code
 15466                                  ;		  0Dh - Control Function subcode
 15467                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15468                                  ;		(CH) = Category Indicator
 15469                                  ;		(CL) = Function within category
 15470                                  ;		(DS:DX) = address for data, if any
 15471                                  ;		(SI) = Passed to device as argument, use depends upon function
 15472                                  ;		(DI) = Passed to device as argument, use depends upon function
 15473                                  ;
 15474                                  ;	EXIT	'C' set if error
 15475                                  ;		  (AX) = error code
 15476                                  ;		'C' clear if OK
 15477                                  ;		  (DS:DX) = Return address, use is function dependent
 15478                                  ;	USES	ALL
 15479                                  ;
 15480                                  ;---------------------------------------------------------------------------
 15481                                  	
 15482                                  	; 17/05/2019 - Retro DOS v4.0
 15483                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15484                                  
 15485                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15486                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15487                                  
 15488                                  IOCTLJMPTABLE:	;label	word
 15489                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15490 000021F9 [3522]                  	dw	ioctl_getset_data	; 0
 15491 000021FB [3522]                  	dw	ioctl_getset_data   	; 1
 15492 000021FD [8522]                  	dw	ioctl_control_string	; 2
 15493 000021FF [8522]                  	dw	ioctl_control_string	; 3
 15494 00002201 [D323]                  	dw	ioctl_get_dev		; 4
 15495 00002203 [D323]                  	dw	ioctl_get_dev		; 5
 15496 00002205 [9F22]                  	dw	ioctl_status		; 6
 15497 00002207 [9F22]                  	dw	ioctl_status		; 7
 15498 00002209 [4023]                  	dw	ioctl_rem_media		; 8
 15499 0000220B [7B23]                  	dw	ioctl_drive_attr	; 9
 15500 0000220D [C523]                  	dw	ioctl_handle_redir	; A
 15501 0000220F [BB22]                  	dw	Set_Retry_Parameters	; B
 15502 00002211 [C922]                  	dw	GENERICIOCTLHANDLE	; C
 15503 00002213 [E022]                  	dw	GENERICIOCTL		; D
 15504                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15505 00002215 [7624]                  	dw	ioctl_drive_owner	; E
 15506 00002217 [7624]                  	dw	ioctl_drive_owner	; F
 15507                                  	; MSDOS 6.0
 15508 00002219 [C922]                  	dw	query_handle_support	; 10h
 15509 0000221B [E022]                  	dw	query_device_support	; 11h
 15510                                  
 15511                                  	; 11/11/2022
 15512                                  _$IOCTL:
 15513 0000221D 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15514 0000221F 16                      	push	ss
 15515 00002220 1F                      	pop	ds			;hkn; SS is DOSDATA
 15516                                  
 15517                                  	; MSDOS 3.3
 15518                                  	;cmp	al,0Fh 
 15519                                  	; MSDOS 6.0
 15520 00002221 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15521 00002223 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15522                                  
 15523                                  	; 14/01/2024
 15524                                  	; 28/05/2019
 15525                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15526 00002225 89C7                    	mov	di,ax			; di NOT a PARM
 15527 00002227 81E7FF00                	and	di,0FFh			; di = al
 15528 0000222B D1E7                    	shl	di,1			; di = index into jmp table
 15529                                  	;pop	AX			; Restore AL for generic IOCTL
 15530                                  
 15531 0000222D 2EFFA5[F921]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15532                                  
 15533                                  ioctl_bad_funj2:
 15534 00002232 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15535                                  
 15536                                  ;--------------------------------------------------------------------------
 15537                                  ;
 15538                                  ; IOCTL: AL = 0,1
 15539                                  ;
 15540                                  ; ENTRY: DS = DOSDATA
 15541                                  ;
 15542                                  ;--------------------------------------------------------------------------
 15543                                  
 15544                                  ioctl_getset_data:
 15545                                  	; MSDOS 6.0
 15546 00002235 E80A43                  	call	SFFromHandle		; ES:DI -> SFT
 15547 00002238 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15548                                  ioctl_bad_handle:
 15549                                  	;mov	al,6
 15550 0000223A B006                    	mov	al,error_invalid_handle
 15551                                  ioctl_error:
 15552 0000223C E9FFE3                  	jmp	SYS_RET_ERR
 15553                                  
 15554                                  ioctl_check_permissions:
 15555 0000223F 3C00                    	CMP	AL,0
 15556                                  	;mov	al,[es:di+5]
 15557 00002241 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15558 00002245 741B                    	JZ	short ioctl_read	; read the byte
 15559                                  
 15560 00002247 08F6                    	or	dh,dh
 15561 00002249 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15562                                  	;mov	al,0Dh
 15563 0000224B B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15564                                  	;jmp	SYS_RET_ERR
 15565 0000224D EBED                    	jmp	short ioctl_error
 15566                                  
 15567                                  ioctl_check_device:
 15568 0000224F A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15569 00002251 74DF                    	jz	short ioctl_bad_funj2
 15570 00002253 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15571                                  					;   device bit!! He can muck with the
 15572                                  					;   others at will.
 15573 00002256 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15574 0000225B 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15575                                  ioctl_ok:
 15576 0000225F E9D3E3                  	jmp	SYS_RET_OK
 15577                                  
 15578                                  ioctl_read:
 15579 00002262 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15580 00002267 30E4                    	XOR	AH,AH
 15581 00002269 A880                    	test	AL,devid_device 	; Should I set high byte
 15582 0000226B 740D                    	JZ	short ioctl_no_high	; no
 15583 0000226D C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15584                                  	;les	di,[es:di+7]
 15585 00002272 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15586                                  	;mov	ah,[es:di+5]
 15587 00002276 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15588                                  ioctl_no_high:
 15589 0000227A 89C2                    	MOV	DX,AX
 15590                                  ioctl_set_dx:	; 16/12/2022
 15591 0000227C E806E2                  	call	Get_User_Stack
 15592                                  	;mov	[si+6],dx
 15593 0000227F 895406                  	MOV	[SI+user_env.user_DX],DX
 15594                                  	;;jmp	SYS_RET_OK
 15595                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15596                                  ioctl_ok_j:
 15597                                  	; 16/12/2022
 15598 00002282 E9B3E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15599                                  	;jmp	short ioctl_ok
 15600                                  	; 26/07/2019
 15601                                  	;jmp	SYS_RET_OK_clc
 15602                                  
 15603                                  ;--------------------------------------------------------------------------
 15604                                  ;
 15605                                  ; IOCTL: AL = 2,3
 15606                                  ;
 15607                                  ; ENTRY: DS = DOSDATA
 15608                                  ;	 SI = user's DS
 15609                                  ;
 15610                                  ;--------------------------------------------------------------------------
 15611                                  
 15612                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15613                                  ioctl_control_string:
 15614 00002285 E8BA42                  	call	SFFromHandle		; ES:DI -> SFT
 15615 00002288 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15616                                  	; 07/12/2022
 15617                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15618                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15619                                  	; MSDOS 5.0 & MSDOS 6.0
 15620 0000228A 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15621 0000228F 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15622 00002291 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15623 00002296 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15624 0000229A 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15625 0000229C E93C01                  	JMP	ioctl_do_string
 15626                                  
 15627                                  ;--------------------------------------------------------------------------
 15628                                  ;
 15629                                  ; IOCTL: AL = 6,7
 15630                                  ;
 15631                                  ; ENTRY: DS = DOSDATA
 15632                                  ;
 15633                                  ;--------------------------------------------------------------------------
 15634                                  
 15635                                  ioctl_status:
 15636 0000229F B401                    	MOV	AH,1
 15637 000022A1 2C06                    	SUB	AL,6			; 6=0,7=1
 15638 000022A3 7402                    	JZ	short ioctl_get_status
 15639 000022A5 B403                    	MOV	AH,3
 15640                                  ioctl_get_status:
 15641 000022A7 50                      	PUSH	AX
 15642 000022A8 E8E612                  	call	GET_IO_SFT
 15643 000022AB 58                      	POP	AX
 15644                                  	;JNC	short DO_IOFUNC
 15645                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15646                                  	; 16/12/2022
 15647 000022AC 728C                    	jc	short ioctl_bad_handle
 15648                                  DO_IOFUNC:
 15649 000022AE E8E820                  	call	IOFUNC
 15650 000022B1 88C4                    	MOV	AH,AL
 15651 000022B3 B0FF                    	MOV	AL,0FFH
 15652                                  	;JNZ	short ioctl_status_ret
 15653                                  	; 29/01/2024
 15654 000022B5 75A8                    	jnz	short ioctl_ok
 15655 000022B7 FEC0                    	INC	AL
 15656                                  ioctl_status_ret:
 15657                                  	;jmp	SYS_RET_OK
 15658                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15659                                  	;jmp	short ioctl_ok_j
 15660                                  	; 16/12/2022
 15661 000022B9 EBA4                    	jmp	short ioctl_ok
 15662                                  
 15663                                  ;--------------------------------------------------------------------------
 15664                                  ;
 15665                                  ; IOCTL: AL = B
 15666                                  ;
 15667                                  ; ENTRY: DS = DOSDATA
 15668                                  ;
 15669                                  ;--------------------------------------------------------------------------
 15670                                  
 15671                                  Set_Retry_Parameters:
 15672                                  	; 09/09/2018
 15673 000022BB 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15674 000022BF 09D2                    	OR	DX,DX			; zero retries not allowed
 15675 000022C1 7475                    	JZ	short ioctl_bad_fun
 15676 000022C3 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15677                                  doneok:
 15678                                  	;jmp	SYS_RET_OK		; Done
 15679                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15680                                  	;jmp	short ioctl_status_ret
 15681                                  	; 16/12/2022
 15682 000022C7 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15683                                  
 15684                                  ;--------------------------------------------------------------------------
 15685                                  ;
 15686                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15687                                  ;
 15688                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15689                                  ;	SI:DX -> Users Device Parameter Table
 15690                                  ;	IOCALL -> IOCTL_Req structure
 15691                                  ;
 15692                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15693                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15694                                  ;	call.
 15695                                  ;
 15696                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15697                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15698                                  ;         return address off the stack if the drive is invalid.
 15699                                  ;
 15700                                  ;--------------------------------------------------------------------------
 15701                                  
 15702                                  query_handle_support:	; Entry point for handles
 15703                                  GENERICIOCTLHANDLE:
 15704 000022C9 E87642                  	call	SFFromHandle		; Get SFT for device.
 15705 000022CC 726F                    	jc	short ioctl_bad_handlej
 15706                                  
 15707                                  	;test	word [es:di+5],8000h
 15708                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15709                                  	;test	byte [es:di+6],80h
 15710 000022CE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15711 000022D3 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15712                                  
 15713 000022D5 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15714                                  	;les	di,[es:di+7]
 15715 000022DA 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15716 000022DE EB0F                    	jmp	short Do_GenIOCTL
 15717                                  
 15718                                  query_device_support:	; Entry point for devices:
 15719                                  GENERICIOCTL:
 15720 000022E0 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15721 000022E5 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15722 000022E8 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15723                                  
 15724 000022EA E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15725 000022ED 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15726                                  
 15727                                  Do_GenIOCTL:
 15728                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15729                                  					; Can device handle Generic IOCTL funcs
 15730                                  	; 09/09/2018
 15731                                  	;test	byte [es:di+4],40h
 15732 000022EF 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15733 000022F4 7442                    	jz	short ioctl_bad_fun
 15734                                  
 15735                                  	; 17/05/2019 - Retro DOS v4.0
 15736                                  
 15737                                  	; MSDOS 6.0
 15738                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15739 000022F6 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15740                                  	;cmp	al,10h
 15741 000022FB 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15742 000022FD 7C0C                    	jl	short SetIOCtlBlock
 15743                                  	
 15744                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15745                                  	;test	byte [es:di+4],80h 
 15746 000022FF 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15747 00002304 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15748                                  	;
 15749                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15750 00002306 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15751                                  
 15752                                  SetIOCtlBlock:
 15753 0000230B 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15754 0000230C 57                      	PUSH	DI			; in DS:SI
 15755                                  					; Setup Generic IOCTL Request Block
 15756                                  	;mov	byte [IOCALL_REQLEN],23
 15757 0000230D C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15758                                  	; 07/09/2018 (MSDOS 3.3)
 15759                                  	;;mov	byte [IOCALL_REQFUNC],19
 15760                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15761                                  	;
 15762 00002312 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15763 00002316 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15764 0000231A 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15765 0000231E 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15766 00002322 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15767 00002326 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15768 0000232A 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15769                                  
 15770                                  ;hkn; IOCALL is in DOSDATA
 15771 0000232E BB[7C03]                	MOV	BX,IOCALL
 15772                                  
 15773 00002331 16                      	PUSH	SS
 15774 00002332 07                      	POP	ES
 15775                                  					; DS:SI -> Device header.
 15776 00002333 5E                      	POP	SI
 15777 00002334 1F                      	POP	DS
 15778                                  	; 10/08/2018
 15779 00002335 E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15780                                  
 15781                                  ioctl_bad_fun:
 15782 00002338 B001                    	mov	al, error_invalid_function  ; 1
 15783 0000233A E901E3                  	jmp	SYS_RET_ERR	
 15784                                  
 15785                                  ioctl_bad_handlej:
 15786 0000233D E9FAFE                  	jmp	ioctl_bad_handle
 15787                                  
 15788                                  ;---------------------------------------------------------------------------
 15789                                  ;
 15790                                  ; IOCTL: AL = 8
 15791                                  ;
 15792                                  ; ENTRY: DS = DOSDATA
 15793                                  ;
 15794                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15795                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15796                                  ;         return address off the stack if the drive is invalid.
 15797                                  ;
 15798                                  ;-------------------------------------------------------------------------
 15799                                  
 15800                                  	; 30/01/2024
 15801                                  ioctl_rem_media:
 15802                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15803 00002340 E82401                  	CALL	Check_If_Net
 15804 00002343 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15805                                  					;   certainly don't know how to do this
 15806                                  					;   call.
 15807                                  	;test	word [es:di+4],800h
 15808                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15809                                  	;test	byte [es:di+5],8
 15810 00002345 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15811 0000234A 74EC                    	JZ	short ioctl_bad_fun		; NO
 15812                                  
 15813                                  ;hkn; SS override for IOCALL
 15814                                  	; 30/01/2024
 15815                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15816                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15817 0000234C C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15818 00002351 B00D                    	MOV	AL,REMHL  ; 13
 15819 00002353 88DC                    	MOV	AH,BL			; Unit number
 15820                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15821 00002355 A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15822 00002358 31C0                    	XOR	AX,AX
 15823                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15824 0000235A A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15825                                  	
 15826 0000235D 06                      	PUSH	ES
 15827 0000235E 1F                      	POP	DS
 15828 0000235F 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15829 00002361 16                      	PUSH	SS
 15830 00002362 07                      	POP	ES
 15831                                  
 15832                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15833 00002363 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15834 00002366 1E                      	push	ds
 15835 00002367 56                      	push	si
 15836 00002368 E8FD21                  	call	DEVIOCALL2
 15837 0000236B 5E                      	pop	si
 15838 0000236C 1F                      	pop	ds
 15839                                  
 15840                                  ;hkn; SS override
 15841                                  	; 30/01/2024
 15842                                  	; (ds <> ss, ss = DOSDATA segment)
 15843 0000236D 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15844                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15845                                  	; 29/01/2024
 15846 00002371 80E402                  	and	ah,STBUI>>8
 15847 00002374 B109                    	MOV	CL,9
 15848 00002376 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15849                                  ioctl_da_ok_j:	; 11/11/2022
 15850 00002378 E9BAE2                  	jmp	SYS_RET_OK
 15851                                  
 15852                                  ;-------------------------------------------------------------------------
 15853                                  ;
 15854                                  ; IOCTL: AL = 9
 15855                                  ;
 15856                                  ; ENTRY: DS = DOSDATA
 15857                                  ;
 15858                                  ;-------------------------------------------------------------------------
 15859                                  
 15860                                  ioctl_drive_attr:
 15861                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15862 0000237B 88D8                    	mov	al,bl
 15863 0000237D E8D445                  	call	GETTHISDRV
 15864 00002380 723E                    	jc	short ioctl_drv_err
 15865 00002382 E8B500                  	call	Get_Driver_BL
 15866                                  	; MSDOS 6.0
 15867 00002385 7239                    	JC	short ioctl_drv_err	; drive not valid
 15868                                  
 15869                                  	;mov	dx,[es:di+4]
 15870 00002387 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15871                                  					; get device attribute word
 15872 0000238B 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15873                                  
 15874                                  ;hkn; SS override
 15875                                  	;LES	DI,[SS:THISCDS]
 15876                                  	; 30/01/2024
 15877 0000238D C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15878                                  
 15879                                  	;test	word [es:di+43h],8000h
 15880                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15881                                  	;test	byte [es:di+44h],80h
 15882 00002391 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15883 00002396 7403                    	JZ	short IOCTLShare
 15884                                  
 15885                                  	;or	dx,1000h ; (MSDOS 3.3)
 15886                                  
 15887                                  ;	Net devices don't return a device attribute word.
 15888                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15889                                  
 15890 00002398 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15891                                  
 15892                                  IOCTLShare:
 15893                                  	; 30/01/2024
 15894                                  	; ds = ss = DOSDATA segment
 15895                                  	;push	ss
 15896                                  	;pop	ds
 15897                                  
 15898 0000239B BE[BE03]                	MOV	SI,OPENBUF
 15899 0000239E 80C341                  	ADD	BL,"A"	; 41h
 15900 000023A1 881C                    	MOV	[SI],BL
 15901 000023A3 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15902 000023A8 B80003                  	MOV	AX,0300h
 15903 000023AB F8                      	CLC
 15904                                  	;INT	int_IBM
 15905 000023AC CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15906                                  			; DS:SI -> ASCIZ disk device name 
 15907                                  			; (may be full path or only drive
 15908                                  			; specifier--must include the colon)
 15909                                  			; Return: CF clear if absolute disk access allowed
 15910 000023AE 7303                    	JNC	short IOCTLLocal	; Not shared
 15911                                  	;OR	DX,0200H		; Shared, bit 9
 15912                                  	; 17/12/2022
 15913 000023B0 80CE02                  	or	dh,02h
 15914                                  IOCTLLocal:
 15915                                  	;test	word [es:di+43h],1000h
 15916                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15917                                  	;test	byte [es:di+44h],10h
 15918 000023B3 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15919                                  	;JZ	short ioctl_set_DX
 15920                                  	; 16/12/2022
 15921 000023B8 7403                    	jz	short _ioctl_set_DX
 15922                                  	;OR	DX,8000h
 15923                                  	; 17/12/2022
 15924 000023BA 80CE80                  	or	dh,80h
 15925                                  ;ioctl_set_DX:
 15926                                  _ioctl_set_DX:
 15927                                  	; 16/12/2022
 15928 000023BD E9BCFE                  	jmp	ioctl_set_dx
 15929                                  ; 16/12/2022
 15930                                  %if 0	
 15931                                  	call	Get_User_Stack
 15932                                  	MOV	[SI+user_env.user_DX],DX
 15933                                  	;;jmp	SYS_RET_OK
 15934                                  	;; 25/06/2019
 15935                                  	;jmp	SYS_RET_OK_clc
 15936                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15937                                  ioctl_gd_ok_j:
 15938                                  	jmp	short ioctl_da_ok_j
 15939                                  %endif
 15940                                  
 15941                                  ioctl_drv_err:
 15942 000023C0 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15943                                  ioctl_gd_err_j:	; 11/11/2022
 15944 000023C2 E979E2                  	jmp	SYS_RET_ERR
 15945                                  
 15946                                  ;--------------------------------------------------------------------------
 15947                                  ;
 15948                                  ; IOCTL: AL = A
 15949                                  ;
 15950                                  ; ENTRY: DS = DOSDATA
 15951                                  ;
 15952                                  ;--------------------------------------------------------------------------
 15953                                  
 15954                                  ioctl_handle_redir:
 15955 000023C5 E87A41                  	call	SFFromHandle		; ES:DI -> SFT
 15956 000023C8 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15957 000023CA E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15958                                  
 15959                                  ioctl_got_sft:
 15960                                  	;mov	dx,[es:di+5]
 15961 000023CD 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15962                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15963                                  	; 16/12/2022
 15964 000023D1 EBEA                    	jmp	short _ioctl_set_DX
 15965                                  
 15966                                  	; 16/12/2022
 15967                                  ;ioctl_bad_funj:
 15968                                  	;JMP	ioctl_bad_fun
 15969                                  
 15970                                  ;--------------------------------------------------------------------------
 15971                                  ;
 15972                                  ; IOCTL: AL= 4,5
 15973                                  ;
 15974                                  ; ENTRY: DS = DOSDATA
 15975                                  ;	 SI = user's DS
 15976                                  ;
 15977                                  ;
 15978                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15979                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15980                                  ;         return address off the stack if the drive is invalid.
 15981                                  ;
 15982                                  ;-------------------------------------------------------------------------
 15983                                  
 15984                                  ioctl_get_dev:
 15985 000023D3 E89100                  	CALL	Check_If_Net
 15986                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15987                                  					; certainly don't know how to do this
 15988                                  					; call.
 15989                                  	; 16/12/2022
 15990 000023D6 7403                    	jz	short ioctl_do_string
 15991                                  ioctl_bad_funj:
 15992 000023D8 E95DFF                  	JMP	ioctl_bad_fun
 15993                                  
 15994                                  ioctl_do_string:
 15995                                  	;test	word [es:di+4],4000h
 15996                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15997                                  	;test	byte [es:di+5],40h
 15998 000023DB 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15999 000023E0 74F6                    	JZ	short ioctl_bad_funj		; NO
 16000                                  					; assume IOCTL read
 16001 000023E2 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16002                                  
 16003 000023E7 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16004 000023E9 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16005                                  
 16006                                  					; it is an IOCTL write
 16007 000023EB C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16008                                  
 16009                                  ioctl_control_call:
 16010 000023F0 B016                    	MOV	AL,DRDWRHL ; 22
 16011                                  ioctl_setup_pkt:
 16012 000023F2 88DC                    	MOV	AH,BL			; Unit number
 16013 000023F4 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16014 000023F7 31C0                    	XOR	AX,AX
 16015 000023F9 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16016 000023FC A2[8903]                	MOV	[IOMED],AL
 16017 000023FF 890E[8E03]              	MOV	[IOSCNT],CX
 16018 00002403 8916[8A03]              	MOV	[IOXAD],DX
 16019 00002407 8936[8C03]              	MOV	[IOXAD+2],SI
 16020 0000240B 06                      	PUSH	ES
 16021 0000240C 1F                      	POP	DS
 16022 0000240D 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16023 0000240F 16                      	PUSH	SS
 16024 00002410 07                      	POP	ES
 16025                                  
 16026 00002411 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16027                                  ioctl_do_IO:
 16028 00002414 E85121                  	call	DEVIOCALL2
 16029                                  
 16030                                  ;hkn; SS override for IOCALL
 16031                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16032                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16033                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16034 00002417 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16035 0000241D 7507                    	JNZ	short ioctl_string_err
 16036                                  
 16037                                  ;hkn; SS override
 16038 0000241F 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16039                                  	; 16/12/2022
 16040 00002423 E90FE2                  	jmp	SYS_RET_OK
 16041                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16042                                  	;jmp	short ioctl_gd_ok_j
 16043                                  
 16044                                  ioctl_string_err:
 16045 00002426 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16046                                  device_err:
 16047 0000242B 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16048 0000242F 89F8                    	MOV	AX,DI
 16049 00002431 E8B52F                  	call	SET_I24_EXTENDED_ERROR
 16050                                  
 16051                                  ;hkn; use SS override
 16052                                  ;hkn;	mov	ax,[CS:EXTERR]
 16053 00002434 36A1[2403]              	mov	ax,[SS:EXTERR]
 16054                                  	;jmp	SYS_RET_ERR
 16055                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16056 00002438 EB88                    	jmp	short ioctl_gd_err_j
 16057                                  
 16058                                  ; 17/05/2019 - Retro DOS v4.0
 16059                                  
 16060                                  ;--------------------------------------------------------------------------
 16061                                  ; Proc name : Get_Driver_BL
 16062                                  ;
 16063                                  ;	DS is DOSDATA
 16064                                  ;	BL is drive number (0=default)
 16065                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16066                                  ;	No regs modified
 16067                                  ;
 16068                                  ;---------------------------------------------------------------------------
 16069                                  
 16070                                  	; 30/01/2024
 16071                                  Get_Driver_BL:
 16072 0000243A 50                      	PUSH	AX
 16073 0000243B 88D8                    	MOV	AL,BL			; Drive
 16074 0000243D E81445                  	call	GETTHISDRV
 16075 00002440 7223                    	jc	short ioctl_bad_drv
 16076 00002442 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16077 00002444 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16078 00002449 C43E[A205]              	LES	DI,[THISCDS]
 16079                                  	;test	word [es:di+43h],8000h
 16080                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16081                                  	;test	byte [es:di+44h],80h
 16082 0000244D 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16083                                  	;les	di,[es:di+45h]
 16084 00002452 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16085 00002456 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16086 00002458 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16087                                  	;mov	bl,[es:di+1]
 16088 0000245D 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16089                                  	;les	di,[es:di+13h]
 16090 00002461 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16091                                  got_dev_ptr:
 16092                                  	; 30/01/2024
 16093                                  	; cf=0
 16094                                  	;CLC
 16095                                  ioctl_bad_drv:
 16096 00002465 58                      	POP	AX
 16097 00002466 C3                      	retn
 16098                                  
 16099                                  ;-------------------------------------------------------------------------
 16100                                  ; Proc Name : Check_If_Net:
 16101                                  ;
 16102                                  ;
 16103                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16104                                  ; If no device is found, the return address is popped off the stack, and a
 16105                                  ; jump is made to ioctl_drv_err.
 16106                                  ;
 16107                                  ; On Entry:
 16108                                  ; Registers same as those for Get_Driver_BL
 16109                                  ;
 16110                                  ; On Exit:
 16111                                  ; ZERO flag	- set if not a net device
 16112                                  ;		- reset if net device
 16113                                  ; ES:DI -> the device
 16114                                  ;
 16115                                  ;
 16116                                  ; BUGBUG: This function assumes the following stack setup on entry
 16117                                  ;
 16118                                  ;	  SP+2 -> Error return address
 16119                                  ;	  SP   -> Normal return address
 16120                                  ;
 16121                                  ;-------------------------------------------------------------------------
 16122                                  
 16123                                  Check_If_Net:
 16124                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16125 00002467 E8D0FF                  	CALL	Get_Driver_BL
 16126 0000246A 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16127                                  
 16128                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16129                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16130                                  %if 0
 16131                                  	;;;
 16132                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16133                                  	PUSH	ES
 16134                                  	PUSH	DI
 16135                                  	LES	DI,[THISCDS]
 16136                                  	;test	word [es:di+43h],8000h
 16137                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16138                                  	;test	byte [es:di+44h],80h
 16139                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16140                                  	POP	DI
 16141                                  	POP	ES
 16142                                  	;;;
 16143                                  %endif
 16144 0000246C C3                      	retn
 16145                                  
 16146                                  ioctl_drv_err_pop:
 16147 0000246D 58                      	pop	ax			; pop off return address
 16148 0000246E E94FFF                  	jmp	ioctl_drv_err
 16149                                  
 16150                                  ioctl_bad_funj3:
 16151 00002471 E9C4FE                  	jmp	ioctl_bad_fun
 16152                                  
 16153                                  ioctl_string_errj:
 16154 00002474 EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16155                                  
 16156                                  ;--------------------------------------------------------------------------
 16157                                  ;
 16158                                  ; IOCTL: AL = E, F
 16159                                  ;
 16160                                  ; ENTRY: DS = DOSDATA
 16161                                  ;
 16162                                  ;
 16163                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16164                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16165                                  ;         return address off the stack if the drive is invalid.
 16166                                  ;
 16167                                  ;--------------------------------------------------------------------------
 16168                                  
 16169                                  ioctl_drive_owner:
 16170                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16171 00002476 E8EEFF                  	Call	Check_If_Net
 16172 00002479 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16173                                  					;   certainly don't know how to do this
 16174                                  					;   call.
 16175                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16176                                  	; 09/09/2018
 16177                                  	;test	byte [es:di+4],40h
 16178 0000247B 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16179 00002480 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16180                                  	;mov	byte [IOCALL_REQFUNC],23
 16181 00002482 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16182 00002487 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16183 00002489 7405                    	jz	short GetOwner
 16184                                  SetOwner:
 16185 0000248B C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16186                                  GetOwner:
 16187 00002490 B00D                    	MOV	AL,OWNHL ; 13
 16188 00002492 88DC                    	MOV	AH,BL			; Unit number
 16189 00002494 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16190 00002497 31C0                    	XOR	AX,AX
 16191 00002499 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16192 0000249C 06                      	PUSH	ES
 16193 0000249D 1F                      	POP	DS
 16194 0000249E 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16195 000024A0 16                      	PUSH	SS
 16196 000024A1 07                      	POP	ES
 16197 000024A2 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16198 000024A5 1E                      	push	ds
 16199 000024A6 56                      	push	si
 16200 000024A7 E8BE20                  	call	DEVIOCALL2
 16201 000024AA 5E                      	pop	si
 16202 000024AB 1F                      	pop	ds
 16203                                  ;hkn; SS override
 16204                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16205                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16206 000024AC 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16207 000024B2 75C0                    	jnz	short ioctl_string_errj
 16208 000024B4 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16209                                  					; owner returned is 1-based.
 16210 000024B8 E97AE1                  	jmp	SYS_RET_OK
 16211                                  
 16212                                  ;============================================================================
 16213                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16214                                  ;============================================================================
 16215                                  ; 07/08/2018 - Retro DOS v3.0
 16216                                  ; 17/05/2019 - Retro DOS v4.0
 16217                                  
 16218                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16219                                  ;	NAME	DOS_DELETE
 16220                                  
 16221                                  ;
 16222                                  ;	Microsoft Confidential
 16223                                  ;	Copyright (C) Microsoft Corporation 1991
 16224                                  ;	All Rights Reserved.
 16225                                  ;
 16226                                  
 16227                                  ;**	DELETE.ASM - Low level routine for deleting files
 16228                                  ;----------------------------------------------------------------------------
 16229                                  ;		DOS_DELETE
 16230                                  ;		REN_DEL_Check
 16231                                  ;		FastOpen_Delete	       ; DOS 3.3
 16232                                  ;		FastOpen_Update	       ; DOS 3.3
 16233                                  
 16234                                  ;   Revision history:
 16235                                  ;
 16236                                  ;   A000  version 4.00	Jan. 1988
 16237                                  ;   A001  Fastopen Rename fix	April 1989
 16238                                  
 16239                                  ;Installed = TRUE
 16240                                  
 16241                                  ;	i_need	NoSetDir,BYTE
 16242                                  ;	i_need	Creating,BYTE
 16243                                  ;	i_need	DELALL,BYTE
 16244                                  ;	i_need	THISDPB,DWORD
 16245                                  ;	i_need	THISSFT,DWORD
 16246                                  ;	i_need	THISCDS,DWORD
 16247                                  ;	i_need	CURBUF,DWORD
 16248                                  ;	i_need	ATTRIB,BYTE
 16249                                  ;	i_need	SATTRIB,BYTE
 16250                                  ;	i_need	WFP_START,WORD
 16251                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16252                                  ;	i_need	NAME1,BYTE			 ;BN001
 16253                                  ;	i_need	FoundDel,BYTE
 16254                                  ;	i_need	AUXSTACK,BYTE
 16255                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16256                                  ;	i_need	JShare,DWORD
 16257                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16258                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16259                                  ;
 16260                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16261                                  ;
 16262                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16263                                  ;	i_need	DMAADD,DWORD
 16264                                  ;	i_need	RENAMEDMA,BYTE
 16265                                  
 16266                                  ;----------------------------------------------------------------------------
 16267                                  ;
 16268                                  ; Procedure Name : DOS_DELETE
 16269                                  ;
 16270                                  ; Inputs:
 16271                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16272                                  ;		terminated)
 16273                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16274                                  ;		( = -1 if current dir not involved, else
 16275                                  ;		 Points to first char after last "/" of current dir part)
 16276                                  ;	[THISCDS] Points to CDS being used
 16277                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16278                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16279                                  ; Function:
 16280                                  ;	Delete the specified file(s)
 16281                                  ; Outputs:
 16282                                  ;	CARRY CLEAR
 16283                                  ;		OK
 16284                                  ;	CARRY SET
 16285                                  ;	    AX is error code
 16286                                  ;		error_file_not_found
 16287                                  ;			Last element of path not found
 16288                                  ;		error_path_not_found
 16289                                  ;			Bad path (not in curr dir part if present)
 16290                                  ;		error_bad_curr_dir
 16291                                  ;			Bad path in current directory part of path
 16292                                  ;		error_access_denied
 16293                                  ;			Attempt to delete device or directory
 16294                                  ;		***error_sharing_violation***
 16295                                  ;			Deny both access required, generates an INT 24.
 16296                                  ;			This error is NOT returned. The INT 24H is generated,
 16297                                  ;			  and the file is ignored (not deleted). Delete will
 16298                                  ;			  simply continue on looking for more files.
 16299                                  ;			  Carry will NOT be set in this case.
 16300                                  ; DS preserved, others destroyed
 16301                                  ;
 16302                                  ;----------------------------------------------------------------------------
 16303                                  
 16304                                  FILEFOUND   equ 01h
 16305                                  FILEDELETED equ 10h
 16306                                  
 16307                                  
 16308                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16309                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16310                                  
 16311                                  	; 30/01/2024
 16312                                  
 16313                                  DOS_DELETE:
 16314                                  
 16315                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16316                                  ;hkn; appropriately at this point.
 16317                                  
 16318 000024BB E872ED                  	call	TestNet
 16319 000024BE 7306                    	JNC	short LOCAL_DELETE
 16320                                  
 16321                                  ;IF NOT Installed
 16322                                  ;	transfer NET_DELETE
 16323                                  ;ELSE
 16324                                  	;MOV	AX,(MultNET SHL 8) | 19
 16325                                  	;INT	2FH
 16326                                  	;return
 16327                                  
 16328 000024C0 B81311                  	mov	ax,1113h
 16329 000024C3 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16330                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16331                                  			;		fully-qualified filename in DOS CS
 16332                                  			; SDA CDS pointer -> current directory structure for drive with file
 16333                                  			; Return: CF set on error
 16334 000024C5 C3                      	retn
 16335                                  ;ENDIF
 16336                                  
 16337                                  LOCAL_DELETE:
 16338 000024C6 C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16339 000024CB E824EE                  	call	ECritDisk
 16340                                  	;mov	word [CREATING],0E500h
 16341 000024CE C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16342 000024D4 8B36[B205]              	MOV	SI,[WFP_START]
 16343                                  SKPNUL:
 16344 000024D8 AC                      	LODSB
 16345 000024D9 08C0                    	OR	AL,AL
 16346 000024DB 75FB                    	JNZ	short SKPNUL		; go to end
 16347 000024DD 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16348 000024E0 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16349 000024E4 7506                    	JNZ	short TEST_QUEST
 16350 000024E6 807C022A                	CMP	BYTE [SI+2],"*"
 16351 000024EA 741F                    	JZ	short CHECK_ATTS
 16352                                  TEST_QUEST:
 16353 000024EC 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16354 000024EF 87FE                    	XCHG	DI,SI
 16355                                  
 16356 000024F1 16                      	push	ss
 16357                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16358 000024F2 07                      	pop	es ; 17/05/2019
 16359                                  
 16360 000024F3 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16361 000024F6 B90400                  	MOV	CX,4		; four sets of "??"
 16362 000024F9 F3AF                    	REPE	SCASW
 16363 000024FB 751C                    	JNZ	short NOT_ALL
 16364 000024FD 87FE                    	XCHG	DI,SI
 16365 000024FF AD                      	LODSW
 16366 00002500 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16367 00002503 7514                    	JNZ	short NOT_ALL
 16368 00002505 AD                      	LODSW
 16369 00002506 3D3F3F                  	CMP	AX,"??"
 16370 00002509 750E                    	JNZ	short NOT_ALL
 16371                                  CHECK_ATTS:
 16372 0000250B A0[6D05]                	MOV	AL,[SATTRIB]
 16373                                  	;and	al,1Fh
 16374 0000250E 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16375                                  					; Look only at hidden bits
 16376                                  	;cmp	al,1Fh
 16377 00002510 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16378                                  					; All must be set
 16379 00002512 7505                    	JNZ	short NOT_ALL
 16380                                  
 16381                                  ; NOTE WARNING DANGER-----
 16382                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16383                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16384                                  
 16385 00002514 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16386                                  NOT_ALL:
 16387 00002519 C606[4C03]01            	MOV	byte [NoSetDir],1
 16388 0000251E E81919                  	call	GetPathNoSet
 16389 00002521 7312                    	JNC	short Del_found
 16390 00002523 750B                    	JNZ	short _bad_path
 16391 00002525 08C9                    	OR	CL,CL
 16392 00002527 7407                    	JZ	short _bad_path
 16393                                  No_file:
 16394 00002529 B80200                  	MOV	AX,error_file_not_found
 16395                                  ErrorReturn:
 16396 0000252C F9                      	STC
 16397                                  	;call	LCritDisk
 16398                                  	;retn
 16399                                  	; 18/12/2022
 16400 0000252D E9DDED                  	jmp	LCritDisk
 16401                                  
 16402                                  _bad_path:
 16403 00002530 B80300                  	MOV	AX,error_path_not_found
 16404 00002533 EBF7                    	JMP	short ErrorReturn
 16405                                  
 16406                                  Del_found:
 16407 00002535 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16408 00002537 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16409 0000253C 7405                    	JZ	short NOT_DIR
 16410                                  Del_access_err:
 16411 0000253E B80500                  	MOV	AX,error_access_denied
 16412 00002541 EBE9                    	JMP	short ErrorReturn
 16413                                  
 16414                                  NOT_DIR:
 16415 00002543 08E4                    	OR	AH,AH			; Check if device name
 16416 00002545 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16417                                  
 16418                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16419                                  
 16420                                  DELFILE:
 16421 00002547 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16422                                  
 16423                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16424                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16425                                  
 16426 0000254C 1E                      	PUSH	DS
 16427 0000254D 8A26[7F05]              	MOV	AH,[DELALL]
 16428 00002551 C53E[E205]              	LDS	DI,[CURBUF]
 16429                                  	
 16430                                  ;hkn; SS override
 16431 00002555 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16432 0000255B 7509                    	JNZ	short DoDelete		; yes
 16433                                  
 16434 0000255D F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16435 00002561 7403                    	JZ	short DoDelete		; not read only
 16436                                  
 16437                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16438                                  Skip_it:
 16439 00002563 1F                      	POP	DS
 16440 00002564 EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16441                                  
 16442                                  DoDelete:
 16443 00002566 E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16444                                  	;JNC	short DEL_SHARE_OK
 16445                                  	;POP	DS
 16446                                  	;JMP	SHORT DELNXT		; Skip it
 16447                                  	; 30/01/2024
 16448 00002569 72F8                    	jc	short Skip_it
 16449                                  
 16450                                  DEL_SHARE_OK:
 16451                                  	; 17/05/2019 - Retro DOS v4.0
 16452                                  	; MSDOS 6.0
 16453                                  	;test	byte [di+5],40h
 16454 0000256B F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16455                                  					;LB. if already dirty		  ;AN000;
 16456 0000256F 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16457 00002571 E8BE34                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16458                                  	;or	byte [di+5],40h
 16459 00002574 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16460                                  yesdirty:
 16461 00002578 8827                    	mov	[bx],ah 
 16462                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16463 0000257A 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16464 0000257C 1F                      	POP	DS
 16465 0000257D 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16466                                  
 16467 00002582 83FB02                  	CMP	BX,2
 16468 00002585 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16469                                  	;cmp	bx,[es:bp+0Dh]
 16470 00002587 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16471 0000258B 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16472                                  
 16473 0000258D E82528                  	call	RELEASE 		; Free file data
 16474 00002590 7252                    	JC	short No_fileJ
 16475                                  
 16476                                  ; DOS 3.3  FastOpen
 16477                                  
 16478 00002592 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16479                                  
 16480                                  ; DOS 3.3  FastOpen
 16481                                  
 16482                                  DELNXT:
 16483 00002595 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16484 00002599 E80B18                  	call	GETENTRY		; Registers need to be reset
 16485 0000259C 7246                    	JC	short No_fileJ
 16486 0000259E E84617                  	call	NEXTENT
 16487 000025A1 73A4                    	JNC	short DELFILE
 16488 000025A3 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16489                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16490                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16491                                  	;;mov	al,[es:bp+0]
 16492                                  	; 15/12/2022
 16493 000025A7 268A4600                	MOV	AL,[ES:BP]
 16494 000025AB E88233                  	call	FLUSHBUF
 16495 000025AE 7234                    	JC	short No_fileJ
 16496                                  ;
 16497                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16498                                  ;
 16499                                  ;   not found not deleted		file not found
 16500                                  ;   not found	  deleted		*** impossible ***
 16501                                  ;	found not deleted		access denied (read-only)
 16502                                  ;	found	  deleted		no error
 16503                                  ;
 16504 000025B0 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16505 000025B5 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16506                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16507                                  ; and to force the DOS to issue a media check.
 16508 000025B7 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16509 000025BC 741C                    	jz	short No_Set_Flag
 16510 000025BE 50                      	PUSH	AX
 16511 000025BF 06                      	PUSH	ES
 16512 000025C0 57                      	PUSH	DI
 16513 000025C1 C43E[A205]              	LES	DI,[THISCDS]
 16514 000025C5 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16515 000025C8 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16516 000025CB 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16517                                  	
 16518                                  	; MSDOS 6.0
 16519 000025CF 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16520 000025D1 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16521                                  	 
 16522 000025D4 E8E62F                  	call	FATREAD_CDS		; force media check
 16523 000025D7 5F                      	POP	DI
 16524 000025D8 07                      	POP	ES
 16525 000025D9 58                      	POP	AX
 16526                                  No_Set_Flag:
 16527                                  	;call	LCritDisk		; carry is clear
 16528                                  	;retn
 16529                                  	; 18/12/2022
 16530 000025DA E930ED                  	jmp	LCritDisk
 16531                                  DelError:
 16532 000025DD F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16533 000025E2 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16534                                  No_fileJ:
 16535 000025E4 E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16536                                  Del_access_errJ:
 16537 000025E7 E954FF                  	JMP	Del_access_err ; 10/08/2018
 16538                                  
 16539                                  ; 08/08/2018 - Retro DOS v3.0
 16540                                  
 16541                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16542                                  ;---------------------------------------------------------------------------
 16543                                  ; Procedure Name : REN_DEL_Check
 16544                                  ;
 16545                                  ; Inputs:
 16546                                  ;	[THISDPB] set
 16547                                  ;	[CURBUF+2]:BX points to entry
 16548                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16549                                  ;	[WFP_Start] points to name
 16550                                  ; Function:
 16551                                  ;	Check for Exclusive access on given file.
 16552                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16553                                  ; Outputs:
 16554                                  ;	ES:BP = [THISDPB]
 16555                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16556                                  ;		last element will be loaded from the directory entry.  This is
 16557                                  ;		so the name given to the sharer doesn't have any meta chars in
 16558                                  ;		it.
 16559                                  ;	Carry set if sharing violation, INT 24H generated
 16560                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16561                                  ;		This is because input AX is preserved.
 16562                                  ;		Caller must set the error if needed.
 16563                                  ;	Carry clear
 16564                                  ;		OK
 16565                                  ; AX,DS,BX,SI,DI preserved
 16566                                  ;---------------------------------------------------------------------------
 16567                                  
 16568                                  REN_DEL_Check:
 16569                                  
 16570 000025EA 1E                      	PUSH	DS
 16571 000025EB 57                      	PUSH	DI
 16572 000025EC 50                      	PUSH	AX
 16573 000025ED 53                      	PUSH	BX
 16574 000025EE 56                      	PUSH	SI		; Save CURBUF pointers
 16575                                  	
 16576 000025EF 16                      	push	ss
 16577 000025F0 07                      	pop	es
 16578                                  
 16579                                  ;hkn; context ES will assume ES to DOSDATA
 16580                                  ;hkn; ASSUME	ES:DOSGROUP
 16581                                  
 16582                                  ;hkn; SS override
 16583 000025F1 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16584 000025F6 89DE                    	MOV	SI,BX
 16585                                  
 16586                                  ;hkn; SS override
 16587 000025F8 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16588 000025FD 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16589                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16590                                  	; 31/01/2024
 16591 000025FF 43                      	inc	bx
 16592 00002600 43                      	inc	bx
 16593 00002601 E8CCEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16594 00002604 49                      	DEC	CX		; Don't include nul in count
 16595 00002605 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16596 00002607 E80446                  	call	SkipBack	; Back up one element
 16597 0000260A 47                      	INC	DI		; Point to start of last element
 16598                                  
 16599                                  	; 17/05/2019 - Retro DOS v4.0
 16600                                  ;hkn; SS override
 16601                                  	; MSDOS 6.0
 16602 0000260B 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16603                                  	;
 16604 00002610 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16605 00002613 5E                      	POP	SI		; Get back entry pointers
 16606 00002614 5B                      	POP	BX
 16607 00002615 53                      	PUSH	BX
 16608 00002616 56                      	PUSH	SI		; Back on stack
 16609                                  	
 16610 00002617 16                      	push	ss
 16611 00002618 1F                      	pop	ds
 16612                                  
 16613                                  ;hkn; context DS will assume ES to DOSDATA
 16614                                  ;hkn; ASSUME	DS:DOSGROUP
 16615                                  
 16616                                  ; Close the file if possible by us.
 16617                                  ;
 16618                                  ;if installed
 16619 00002619 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16620                                  ;else
 16621                                  ;	Call	ShCloseFile
 16622                                  ;endif
 16623 0000261D 8C1E[A005]              	MOV	[THISSFT+2],DS
 16624                                  
 16625                                  ;hkn; AUXSTACK is in DOSDATA
 16626 00002621 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16627                                  				; Scratch space
 16628 00002627 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16629 00002629 E81C24                  	call	DOOPEN		; Fill in SFT for share check
 16630 0000262C C43E[9E05]              	LES	DI,[THISSFT]
 16631                                  	;mov	word [es:di+2],10h
 16632 00002630 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16633                                  				; requires exclusive access
 16634                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16635 00002636 26C7050100              	mov	word [ES:DI],1
 16636 0000263B E8B64B                  	call	ShareEnter
 16637 0000263E 720D                    	jc	short CheckDone
 16638 00002640 C43E[9E05]              	LES	DI,[THISSFT]
 16639                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16640 00002644 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16641                                  	
 16642 00002649 E8A34B                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16643 0000264C F8                      	CLC
 16644                                  CheckDone:
 16645 0000264D C42E[8A05]              	LES	BP,[THISDPB]
 16646 00002651 5E                      	POP	SI
 16647 00002652 5B                      	POP	BX
 16648 00002653 58                      	POP	AX
 16649 00002654 5F                      	POP	DI
 16650 00002655 1F                      	POP	DS
 16651 00002656 C3                      	retn
 16652                                  
 16653                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16654                                  ;---------------------------------------------------------------------------
 16655                                  ; Procedure Name : FastOpen_Delete
 16656                                  ; Inputs:
 16657                                  ;	None
 16658                                  ; Function:
 16659                                  ;	Call FastOpen to delete the dir info.
 16660                                  ; Outputs:
 16661                                  ;	None
 16662                                  ;---------------------------------------------------------------------------
 16663                                  
 16664                                  	; 31/01/2024
 16665                                  
 16666                                  FastOpen_Delete:
 16667 00002657 9C                      	PUSHF			; save flag
 16668 00002658 56                      	PUSH	SI		; save registers
 16669 00002659 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16670 0000265A 53                      	PUSH	BX
 16671 0000265B 50                      	PUSH	AX
 16672                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16673                                  ;hkn; SS override
 16674                                  	; 17/05/2019 - Retro DOS v4.0
 16675                                  	; MSDOS 6.0
 16676 0000265C 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16677                                  	
 16678 00002661 B003                    	MOV	AL,FONC_delete	; al = 3
 16679                                  
 16680                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16681                                  %if 0 
 16682                                  fastinvoke:
 16683                                  ;hkn; FastTable is in DOSDATA
 16684                                  	MOV	BX,FastTable+2
 16685                                  	CALL	far [BX]	; call fastopen
 16686                                  	POP	AX		; restore registers
 16687                                  	POP	BX
 16688                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16689                                  	POP	SI
 16690                                  	POPF			; restore flag
 16691                                  	retn
 16692                                  %else
 16693 00002663 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16694                                  %endif
 16695                                  
 16696                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16697                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16698                                  
 16699                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16700                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16701                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16702                                  
 16703                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16704                                  ;---------------------------------------------------------------------------
 16705                                  ; PROCEDURE Name : FastOpen_Rename
 16706                                  ;
 16707                                  ; Inputs:
 16708                                  ;	 REN_WFP   = Path Name
 16709                                  ;	 NAME1	   = New Name
 16710                                  ; Function:
 16711                                  ;	Call FastOpen to rename the dir entry in the cache
 16712                                  ; Outputs:
 16713                                  ;	None
 16714                                  ;---------------------------------------------------------------------------
 16715                                  
 16716                                  FastOpen_Rename:
 16717                                  	; 17/05/2019 - Retro DOS v4.0
 16718                                  	; 08/08/2018 - Retro DOS v3.0
 16719                                  	; MSDOS 6.0
 16720 00002665 9C                      	PUSHF			;AN001 save flag
 16721 00002666 56                      	PUSH	SI		;AN001 save registers
 16722 00002667 57                      	PUSH	DI		;AN001
 16723 00002668 53                      	PUSH	BX		;AN001
 16724 00002669 50                      	PUSH	AX		;AN001
 16725                                  	;
 16726                                  ;hkn; SS override
 16727 0000266A 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16728                                  
 16729                                  ;hkn; NAME1 is in DOSDATA
 16730 0000266F BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16731                                  	;mov	al,6
 16732 00002672 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16733                                  
 16734                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16735                                  	
 16736                                  ;hkn; FastTable is in DOSDATA
 16737 00002674 BB[320D]                	MOV	BX,FastTable+2
 16738 00002677 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16739                                  	
 16740 00002679 58                      	POP	AX		; restore registers  ;AN001
 16741 0000267A 5B                      	POP	BX				     ;AN001
 16742 0000267B 5F                      	POP	DI				     ;AN001
 16743 0000267C 5E                      	POP	SI				     ;AN001
 16744 0000267D 9D                      	POPF			; restore flag	     ;AN001
 16745 0000267E C3                      	retn					     ;AN001
 16746                                  
 16747                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16748                                  ;---------------------------------------------------------------------------
 16749                                  ; Procedure Name : FastOpen_Update
 16750                                  ;
 16751                                  ; Inputs:
 16752                                  ;	DL     drive number (A=0,B=1,,,)
 16753                                  ;	CX     first cluster #
 16754                                  ;	AH     0 updates dir entry
 16755                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16756                                  ;	ES:DI  directory entry
 16757                                  ; Function:
 16758                                  ;	Call FastOpen to update the dir info.
 16759                                  ; Outputs:
 16760                                  ;	None
 16761                                  ;---------------------------------------------------------------------------
 16762                                  
 16763                                  FastOpen_Update:
 16764 0000267F 9C                      	PUSHF			; save flag
 16765 00002680 56                      	PUSH	SI
 16766 00002681 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16767 00002682 53                      	PUSH	BX		; save regs
 16768 00002683 50                      	PUSH	AX
 16769 00002684 B004                    	MOV	AL,FONC_update	; al = 4
 16770 00002686 EBEC                    	JMP	short fastinvoke
 16771                                  
 16772                                  	; 17/05/2019
 16773                                  
 16774                                  	; MSDOS 6.0
 16775                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16776                                  ;---------------------------------------------------------------------------
 16777                                  Fast_Dispatch:
 16778                                  ;hkn; FastTable is in DOSDATA
 16779 00002688 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16780                                  ;hkn; use SS override
 16781 0000268B 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16782 0000268E C3                      	retn
 16783                                  
 16784                                  ;============================================================================
 16785                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16786                                  ;============================================================================
 16787                                  ; 08/08/2018 - Retro DOS v3.0
 16788                                  ; 17/05/2019 - Retro DOS v4.0
 16789                                  
 16790                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16791                                  ;	NAME	DOS_RENAME
 16792                                  
 16793                                  ;**	Low level routine for renaming files
 16794                                  ;----------------------------------------------------------------------------
 16795                                  ;	DOS_RENAME
 16796                                  ;
 16797                                  ;	Modification history:
 16798                                  ;
 16799                                  ;	    Created: ARR 30 March 1983
 16800                                  
 16801                                  ;----------------------------------------------------------------------------
 16802                                  ;
 16803                                  ; Procedure Name : DOS_RENAME
 16804                                  ;
 16805                                  ; Inputs:
 16806                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16807                                  ;		chars, NUL terminated)
 16808                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16809                                  ;		( = -1 if current dir not involved, else
 16810                                  ;		 Points to first char after last "/" of current dir part)
 16811                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16812                                  ;		chars, NUL terminated)
 16813                                  ;	[THISCDS] Points to CDS being used
 16814                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16815                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16816                                  ; Function:
 16817                                  ;	Rename the specified file(s)
 16818                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16819                                  ; Outputs:
 16820                                  ;	CARRY CLEAR
 16821                                  ;	    OK
 16822                                  ;	CARRY SET
 16823                                  ;	    AX is error code
 16824                                  ;		error_file_not_found
 16825                                  ;			No match for source, or dest path invalid
 16826                                  ;		error_not_same_device
 16827                                  ;			Source and dest are on different devices
 16828                                  ;		error_access_denied
 16829                                  ;			Directory specified (not simple rename),
 16830                                  ;			Device name given, Destination exists.
 16831                                  ;			NOTE: In third case some renames may have
 16832                                  ;			 been done if metas.
 16833                                  ;		error_path_not_found
 16834                                  ;			Bad path (not in curr dir part if present)
 16835                                  ;			SOURCE ONLY
 16836                                  ;		error_bad_curr_dir
 16837                                  ;			Bad path in current directory part of path
 16838                                  ;			SOURCE ONLY
 16839                                  ;		error_sharing_violation
 16840                                  ;			Deny both access required, generates an INT 24.
 16841                                  ; DS preserved, others destroyed
 16842                                  ;
 16843                                  ;----------------------------------------------------------------------------
 16844                                  
 16845                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16846                                  
 16847                                  	; 31/01/2024
 16848                                  
 16849                                  DOS_RENAME:
 16850                                  
 16851                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16852                                  ;hkn; at this point to DOSDATA.
 16853                                  
 16854 0000268F E89EEB                  	call	TestNet
 16855 00002692 7306                    	JNC	short LOCAL_RENAME
 16856                                  
 16857                                  ;IF NOT Installed
 16858                                  ;	transfer NET_RENAME
 16859                                  ;ELSE
 16860                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16861                                  	;INT	2FH
 16862                                  	;return
 16863                                  
 16864 00002694 B81111                  	mov     ax, 1111h
 16865 00002697 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16866                                  			; SS = DS = DOS CS, 
 16867                                  			; SDA first filename pointer = offset of fully-qualified old name
 16868                                  			; SDA CDS pointer -> current directory
 16869                                  			; Return: CF set on error
 16870 00002699 C3                      	retn
 16871                                  ;ENDIF
 16872                                  
 16873                                  LOCAL_RENAME:
 16874 0000269A C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16875 0000269F 8B36[B205]              	MOV	SI,[WFP_START]
 16876 000026A3 8B3E[B405]              	MOV	DI,[REN_WFP]
 16877 000026A7 8A04                    	MOV	AL,[SI]
 16878 000026A9 8A25                    	MOV	AH,[DI]
 16879 000026AB 0D2020                  	OR	AX,2020H		; Lower case
 16880 000026AE 38E0                    	CMP	AL,AH
 16881 000026B0 7405                    	JZ	short SAMEDRV
 16882 000026B2 B81100                  	MOV	AX,error_not_same_device ; 11h
 16883 000026B5 F9                      	STC
 16884 000026B6 C3                      	retn
 16885                                  
 16886                                  SAMEDRV:
 16887 000026B7 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16888 000026BB FF36[2C03]              	PUSH	WORD [DMAADD]
 16889 000026BF 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16890                                  
 16891                                  ;hkn; RENAMEDMA is in DOSDATA
 16892 000026C3 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16893 000026C9 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16894 000026CE E821EC                  	call	ECritDisk
 16895 000026D1 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16896                                  					;    points to entry
 16897 000026D4 7314                    	JNC	short Check_Dev
 16898 000026D6 83F812                  	CMP	AX,error_no_more_files ; 12h
 16899 000026D9 7503                    	JNZ	short GOTERR
 16900 000026DB B80200                  	MOV	AX,error_file_not_found ; 2
 16901                                  GOTERR:
 16902 000026DE F9                      	STC
 16903                                  RENAME_POP:
 16904 000026DF 8F06[2C03]              	POP	WORD [DMAADD]
 16905 000026E3 8F06[2E03]              	POP	WORD [DMAADD+2]
 16906                                  	;call	LCritDisk
 16907                                  	;retn
 16908                                  	; 16/12/2022
 16909 000026E7 E923EC                  	jmp	LCritDisk
 16910                                  
 16911                                  Check_Dev:
 16912                                  	; 17/05/2019 - Retro DOS v4.0
 16913                                  	;mov	ax,5
 16914 000026EA B80500                  	MOV	AX,error_access_denied	; Assume error
 16915                                  	
 16916                                  	; MSDOS 6.0
 16917 000026ED 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16918 000026EE C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16919                                  	;add	si,21
 16920 000026F2 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16921                                  	;test	byte [si+11],10h
 16922 000026F5 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16923 000026F9 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16924 000026FB 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16925 000026FF E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16926                                  notdir:
 16927 00002702 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16928 00002703 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16929                                  
 16930                                  	; MSDOS 3.3 & MSDOS 6.0
 16931 00002705 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16932 0000270A 75D2                    	JNZ	short GOTERR
 16933                                  
 16934                                  ; At this point a source has been found. There is search continuation info (a
 16935                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16936                                  ; directory entry found.
 16937                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16938                                  ; throughout the RENAME since it is known at this point that the source and
 16939                                  ; destination are both on the same device.
 16940                                  ; [SATTRIB] is also set.
 16941                                  
 16942 0000270C 89DE                    	MOV	SI,BX
 16943                                  	;add	si,26
 16944 0000270E 83C61A                  	ADD	SI,dir_entry.dir_first
 16945 00002711 E8D6FE                  	call	REN_DEL_Check
 16946 00002714 7305                    	JNC	short REN_OK1
 16947 00002716 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16948 00002719 EBC4                    	JMP	short RENAME_POP
 16949                                  
 16950                                  ;------------------------------------------------------------------------------
 16951                                  ; Check if the source is a file or directory. If file, delete the entry
 16952                                  ; from the Fastopen cache. If directory, rename it later
 16953                                  ;------------------------------------------------------------------------------
 16954                                  
 16955                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16956                                  	; MSDOS 6.0
 16957                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16958                                  	;PUSH	SI
 16959 0000271B C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16960                                  	;add	si,21
 16961 0000271F 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16962                                  	;test	byte [si+11],10h
 16963 00002722 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16964                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16965 00002726 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 16966                                  	;POP	SI			;BN00X
 16967                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 16968                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 16969                                  	;POP	SI
 16970                                  
 16971                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16972 00002728 E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16973                                  SWAP_SOURCE:
 16974                                  	; MSDOS 3.3
 16975                                  	;MOV	SI,[REN_WFP]
 16976                                  	;MOV	[WFP_START],SI
 16977                                  	; MSDOS 6.0
 16978 0000272B A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16979 0000272E 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16980 00002732 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16981 00002736 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16982                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16983 00002739 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16984                                  	;mov	word [CREATING],0E5FFh
 16985 0000273F C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16986                                  					; A rename is like a CREATE_NEW as far
 16987                                  					; as the destination is concerned.
 16988 00002745 E8F216                  	call	GetPathNoSet
 16989                                  
 16990                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16991                                  ;   since no files match the destination name. If it fails for any other
 16992                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16993                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16994                                  ;   if the rename should fail because we haven't built an explicit name by
 16995                                  ;   substituting for the meta chars in it. In this case the destination file
 16996                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16997                                  ;   in the directory entry part.
 16998                                  	
 16999 00002748 7223                    	JC	short NODEST
 17000                                  	
 17001                                  	; MSDOS 6.0
 17002                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17003                                  	; !! MSDOS 3.3 !!
 17004                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17005                                  
 17006 0000274A 08E4                    	OR	AH,AH			; Device?
 17007 0000274C 792C                    	JNS	short SAVEDEST		; No, continue
 17008                                  BAD_ACC:
 17009 0000274E B80500                  	MOV	AX,error_access_denied
 17010 00002751 F9                      	STC
 17011                                  RENAME_CLEAN:
 17012 00002752 9C                      	PUSHF				; Save carry state
 17013 00002753 50                      	PUSH	AX			; and error code (if carry set)
 17014 00002754 A0[7605]                	MOV	AL,[THISDRV]
 17015 00002757 E8D631                  	call	FLUSHBUF
 17016 0000275A 58                      	POP	AX
 17017 0000275B 803E[4A03]00            	CMP	byte [FAILERR],0
 17018 00002760 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17019 00002762 9D                      	POPF
 17020 00002763 E979FF                  	JMP	RENAME_POP
 17021                                  
 17022                                  BAD_ERR:
 17023 00002766 58                      	POP	AX			; Saved flags
 17024                                  	; 16/12/202
 17025                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17026                                  BAD_PATH: ; *
 17027 00002767 B80300                  	MOV	AX,error_path_not_found
 17028 0000276A E971FF                  	JMP	GOTERR
 17029                                  
 17030                                  NODEST:
 17031 0000276D 75F8                    	JNZ	short BAD_PATH
 17032 0000276F 803E[4A03]00            	CMP	byte [FAILERR],0
 17033 00002774 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17034                                  					; because user FAILed on I 24
 17035                                  	; 14/11/2022
 17036 00002776 08C9                    	OR	CL,CL
 17037                                  	;JNZ	short SAVEDEST
 17038                                  	; 17/05/2019
 17039 00002778 74ED                    	jz	short BAD_PATH ; *
 17040                                  ;BAD_PATH: ; *
 17041                                  ;	MOV	AX,error_path_not_found
 17042                                  ;	;STC
 17043                                  ;	;JMP	RENAME_POP
 17044                                  ;	; 17/05/2019
 17045                                  ;	jmp	GOTERR 
 17046                                  
 17047                                  ; 16/12/2022
 17048                                  %if 0
 17049                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17050                                  	or	cl,cl
 17051                                  	jnz	short SAVEDEST
 17052                                  	;jz	short BAD_PATH ; *
 17053                                  BAD_PATH: ; *
 17054                                  	;mov	ax,3
 17055                                  	mov	ax,error_path_not_found
 17056                                  	stc
 17057                                  	jmp	RENAME_POP
 17058                                  %endif
 17059                                  
 17060                                  SAVEDEST:
 17061 0000277A 16                      	push	ss
 17062 0000277B 07                      	pop	es
 17063                                  
 17064                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17065 0000277C BF[5705]                	MOV	DI,NAME2
 17066 0000277F BE[4B05]                	MOV	SI,NAME1
 17067                                  
 17068 00002782 B90B00                  	MOV	CX,11
 17069 00002785 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17070 00002787 A1[C205]                	MOV	AX,[DIRSTART]
 17071 0000278A A3[6405]                	MOV	[DESTSTART],AX
 17072                                  BUILDDEST:
 17073                                  	; 31/01/2024
 17074                                  	;push	ss
 17075                                  	;pop	es			; needed due to JMP BUILDDEST below
 17076                                  
 17077                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17078 0000278D BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17079 00002790 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17080 00002793 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17081                                  
 17082 00002796 B90B00                  	MOV	CX,11
 17083                                  
 17084                                  	; 17/05/2019 - Retro DOS v4.0
 17085                                  	
 17086                                  	; MSDOS 6.0
 17087 00002799 E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17088                                  
 17089                                  	; MSDOS 3.3
 17090                                  
 17091                                  ; 08/08/2018 - Retro DOS v3.0
 17092                                  ; MSDOS 6.0 
 17093                                  ;---------------------------------------------------------------------------
 17094                                  ;Procedure: NEW_RENAME
 17095                                  ;
 17096                                  ;Input: DS:SI -> raw string with ?
 17097                                  ;	ES:DI -> destination string
 17098                                  ;	DS:BX -> source string
 17099                                  ;Function: replace ? chars of raw string with chars in source string and
 17100                                  ;	   put in destination string
 17101                                  ;Output: ES:DI-> new string
 17102                                  ;---------------------------------------------------------------------------
 17103                                  ;
 17104                                  ;NEW_RENAME:
 17105                                  ;NEWNAM:
 17106                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17107                                  ;	LODSB
 17108                                  ;	CMP	AL,"?"
 17109                                  ;	JNZ	short NOCHG
 17110                                  ;	MOV	AL,[BX] 		; Get replace char
 17111                                  ;NOCHG:
 17112                                  ;	STOSB
 17113                                  ;	INC	BX			; Next replace char
 17114                                  ;	LOOP	NEWNAM
 17115                                  ;	; MSDOS 6.0
 17116                                  ;	;retn
 17117                                  
 17118                                  	; MSDOS 3.3 & MSDOS 6.0
 17119                                  	;mov	byte [ATTRIB],16h
 17120 0000279C C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17121 000027A1 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17122 000027A6 E82F19                  	call	DEVNAME 		; Check if we built a device name
 17123 000027A9 73A3                    	JNC	short BAD_ACC
 17124 000027AB 8B1E[6405]              	MOV	BX,[DESTSTART]
 17125 000027AF C42E[8A05]              	LES	BP,[THISDPB]
 17126 000027B3 E82116                  	call	SETDIRSRCH		; Reset search to start of dir
 17127 000027B6 7296                    	JC	short BAD_ACC 		; Screw up
 17128 000027B8 E8E214                  	call	FINDENTRY		; See if new name already exists
 17129 000027BB 7391                    	JNC	short BAD_ACC 		; Error if found
 17130 000027BD 803E[4A03]00            	CMP	byte [FAILERR],0
 17131 000027C2 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17132 000027C4 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17133 000027C7 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17134 000027CB 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17135                                  
 17136                                  	;mov	al,[RENAMEDMA+32]
 17137 000027CD A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17138 000027D0 A810                    	TEST	AL,attr_directory ; 10h
 17139 000027D2 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17140                                  					; otherwise the . and .. entries get
 17141                                  					; wiped.
 17142 000027D4 A2[6B05]                	MOV	[ATTRIB],AL
 17143 000027D7 8C1E[A005]              	MOV	[THISSFT+2],DS
 17144                                  
 17145                                  ;hkn; AUXSTACK is in DOSDATA
 17146                                  	;mov	si,RENAMEDMA+145h
 17147 000027DB BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17148 000027DE 8936[9E05]              	MOV	[THISSFT],SI
 17149                                  	;mov	word [SI+2],2
 17150 000027E2 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17151 000027E7 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17152 000027E9 E8C520                  	call	RENAME_MAKE		; This is in mknode
 17153 000027EC 7303                    	JNC	short GOT_DEST
 17154                                  BAD_ACCJ:
 17155 000027EE E95DFF                  	JMP	BAD_ACC
 17156                                  
 17157                                  GOT_DEST:
 17158 000027F1 53                      	push	bx
 17159 000027F2 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17160 000027F6 E8F649                  	call	ShareEnd		; we need to remove it.
 17161 000027F9 5B                      	pop	bx
 17162                                  
 17163                                  ; A zero length entry with the correct new name has now been made at
 17164                                  ;   [CURBUF+2]:BX.
 17165                                  
 17166 000027FA C43E[E205]              	LES	DI,[CURBUF]
 17167                                  
 17168                                  	; MSDOS 6.0
 17169                                  	;test	byte [es:di+5],40h
 17170 000027FE 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17171                                  					;LB. if already dirty		  ;AN000;
 17172 00002803 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17173 00002805 E82A32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17174                                  	;or	byte [es:di+5],40h
 17175 00002808 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17176                                  yesdirty1:
 17177 0000280D 89DF                    	MOV	DI,BX
 17178                                  	;add	di,11
 17179 0000280F 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17180                                  
 17181                                  ;hkn; RENAMEDMA is in DOSDATA
 17182                                  	;mov	si,[RENAMEDMA+32]
 17183 00002812 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17184                                  	;mov	cx,21
 17185 00002815 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17186 00002818 F3A4                    	REP	MOVSB
 17187 0000281A E87A00                  	CALL	GET_SOURCE
 17188 0000281D 7275                    	JC	short RENAME_OVER
 17189 0000281F 89DF                    	MOV	DI,BX
 17190 00002821 8E06[E405]              	MOV	ES,[CURBUF+2]
 17191 00002825 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17192 00002827 AA                      	STOSB				; "free" the source
 17193 00002828 EB13                    	JMP	SHORT DIRTY_IT
 17194                                  
 17195                                  SIMPLE_RENAME:
 17196 0000282A E86A00                  	CALL	GET_SOURCE		; Get the source back
 17197 0000282D 7265                    	JC	short RENAME_OVER
 17198 0000282F 89DF                    	MOV	DI,BX
 17199 00002831 8E06[E405]              	MOV	ES,[CURBUF+2]
 17200                                  
 17201                                  ;hkn; NAME1 is in DOSDATA
 17202 00002835 BE[4B05]                	MOV	SI,NAME1		; New Name
 17203 00002838 B90B00                  	MOV	CX,11
 17204 0000283B F3A4                    	REP	MOVSB
 17205                                  DIRTY_IT:
 17206 0000283D 8B3E[E205]              	MOV	DI,[CURBUF]
 17207                                  
 17208                                  	; MSDOS 6.0
 17209 00002841 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17210                                  					;LB. if already dirty		  ;AN000;
 17211 00002846 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17212 00002848 E8E731                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17213                                  	
 17214 0000284B 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17215                                  
 17216                                  ;------------------------------------------------------------------------------
 17217                                  ; Check if the source is a directory of file. If directory rename it to the
 17218                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17219                                  ; previously deleted.
 17220                                  ;------------------------------------------------------------------------------
 17221                                  
 17222                                  yesdirty2:
 17223                                  	; MSDOS 6.0
 17224 00002850 56                      	PUSH	SI
 17225 00002851 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17226 00002855 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17227 00002858 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17228 0000285C 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17229 0000285E E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17230                                  	; 31/01/2024
 17231                                  	;POP	SI
 17232                                  	;JMP	SHORT NOT_DIRTY1
 17233                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17234 00002861 5E                      	POP	SI
 17235                                  NOT_DIRTY1:				;;BN00X
 17236                                  NEXT_SOURCE:
 17237                                  ;hkn; RENAMEDMA is in DOSDATA
 17238 00002862 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17239                                  
 17240                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17241                                  ; to enter it before going to RENAME_Next.
 17242                                  
 17243 00002865 E88AEA                  	call	ECritDisk
 17244 00002868 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17245                                  				  ;  to FF when we made the prev new file).
 17246 0000286D E89405                  	call	RENAME_NEXT
 17247                                  
 17248                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17249                                  ; we were before.
 17250                                  
 17251 00002870 7222                    	JC	short RENAME_OVER
 17252                                  
 17253                                  	;lea	si,[bx+26]
 17254 00002872 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17255 00002875 E872FD                  	call	REN_DEL_Check
 17256 00002878 7306                    	JNC	short REN_OK2
 17257 0000287A B82000                  	MOV	AX,error_sharing_violation ; 20h
 17258                                  jmp_to_rename_clean: ; 28/12/2022
 17259 0000287D E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17260                                  
 17261                                  ;------------------------------------------------------------------------------
 17262                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17263                                  ; if directory, rename directory name in the Fastopen cache.
 17264                                  ;-----------------------------------------------------------------------------
 17265                                  
 17266                                  REN_OK2:
 17267                                  	; MSDOS 6.0
 17268                                  	;mov	al,[RERNAMEDMA+32]
 17269 00002880 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17270                                  	;test	al,10h
 17271 00002883 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17272 00002885 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17273                                  	
 17274                                  	; MSDOS 3.3 & MSDOS 6.0
 17275 00002887 E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17276                                  jmp_to_builddest: ; 28/12/2022
 17277                                  	; 31/01/2024
 17278 0000288A 16                      	push	ss
 17279 0000288B 07                      	pop	es
 17280 0000288C E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17281                                  
 17282                                  	; MSDOS 6.0
 17283                                  Ren_Directory:
 17284 0000288F E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17285                                  	;JMP	BUILDDEST
 17286                                  	; 28/12/2022
 17287 00002892 EBF6                    	jmp	short jmp_to_builddest
 17288                                  
 17289                                  RENAME_OVER:
 17290 00002894 F8                      	CLC
 17291                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17292                                  	; 28/12/2022
 17293 00002895 EBE6                    	jmp	short jmp_to_rename_clean
 17294                                  
 17295                                  ;----------------------------------------------------------------------------
 17296                                  ; Procedure: GET_SOURCE
 17297                                  ;
 17298                                  ; Inputs:
 17299                                  ;	RENAMEDMA has source info
 17300                                  ; Function:
 17301                                  ;	Re-find the source
 17302                                  ; Output:
 17303                                  ;	[CURBUF] set
 17304                                  ;	[CURBUF+2]:BX points to entry
 17305                                  ;	Carry set if error (currently user FAILed to I 24)
 17306                                  ; DS preserved, others destroyed
 17307                                  ;----------------------------------------------------------------------------
 17308                                  
 17309                                  GET_SOURCE:
 17310 00002897 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17311 0000289B C42E[8A05]              	LES	BP,[THISDPB]
 17312 0000289F E83515                  	call	SETDIRSRCH
 17313 000028A2 7214                    	JC	short gs_ret_label	; retc
 17314 000028A4 E81018                  	call	STARTSRCH
 17315 000028A7 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17316                                  	;call	GETENT
 17317                                  	; 18/12/2022
 17318 000028AA E9FD14                  	jmp	GETENT
 17319                                  ;gs_ret_label:
 17320                                  	;retn
 17321                                  
 17322                                  ; MSDOS 6.0 
 17323                                  ;---------------------------------------------------------------------------
 17324                                  ;Procedure: NEW_RENAME
 17325                                  ;
 17326                                  ;Input: DS:SI -> raw string with ?
 17327                                  ;	ES:DI -> destination string
 17328                                  ;	DS:BX -> source string
 17329                                  ;Function: replace ? chars of raw string with chars in source string and
 17330                                  ;	   put in destination string
 17331                                  ;Output: ES:DI-> new string
 17332                                  ;---------------------------------------------------------------------------
 17333                                  
 17334                                  NEW_RENAME:
 17335                                  	; 17/05/2019 - Retro DOS v4.0
 17336                                  NEWNAM:
 17337                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17338 000028AD AC                      	LODSB
 17339 000028AE 3C3F                    	CMP	AL,"?" ; 3Fh
 17340 000028B0 7502                    	JNZ	short NOCHG
 17341 000028B2 8A07                    	MOV	AL,[BX] 		; Get replace char
 17342                                  NOCHG:
 17343 000028B4 AA                      	STOSB
 17344 000028B5 43                      	INC	BX			; Next replace char
 17345 000028B6 E2F5                    	LOOP	NEWNAM
 17346                                  	; MSDOS 6.0
 17347                                  gs_ret_label:	; 18/12/2022
 17348 000028B8 C3                      	retn
 17349                                  
 17350                                  ;============================================================================
 17351                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17352                                  ;============================================================================
 17353                                  ; 08/08/2018 - Retro DOS v3.0
 17354                                  ; 17/05/2019 - Retro DOS v4.0
 17355                                  
 17356                                  ;**	Low level routines for returning file information and setting file
 17357                                  ;	attributes
 17358                                  ;
 17359                                  ;	GET_FILE_INFO
 17360                                  ;	SET_FILE_ATTRIBUTE
 17361                                  ;
 17362                                  ;	Modification history:
 17363                                  ;
 17364                                  ;	    Created: ARR 30 March 1983
 17365                                  ;
 17366                                  ;	M025: Return access_denied if attempting to set
 17367                                  ;	      attribute of root directory.
 17368                                  ;
 17369                                  
 17370                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17371                                  
 17372                                  ;---------------------------------------------------------------------------
 17373                                  ; Procedure Name : GET_FILE_INFO
 17374                                  ;
 17375                                  ; Inputs:
 17376                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17377                                  ;		terminated)
 17378                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17379                                  ;		( = -1 if current dir not involved, else
 17380                                  ;		 Points to first char after last "/" of current dir part)
 17381                                  ;	[THISCDS] Points to CDS being used
 17382                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17383                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17384                                  ; Function:
 17385                                  ;	Get Information about a file
 17386                                  ; Returns:
 17387                                  ;	CARRY CLEAR
 17388                                  ;	    AX = Attribute of file
 17389                                  ;	    CX = Time stamp of file
 17390                                  ;	    DX = Date stamp of file
 17391                                  ;	    BX:DI = Size of file (32 bit)
 17392                                  ;	CARRY SET
 17393                                  ;	    AX is error code
 17394                                  ;		error_file_not_found
 17395                                  ;			Last element of path not found
 17396                                  ;		error_path_not_found
 17397                                  ;			Bad path (not in curr dir part if present)
 17398                                  ;		error_bad_curr_dir
 17399                                  ;			Bad path in current directory part of path
 17400                                  ; DS preserved, others destroyed
 17401                                  ;---------------------------------------------------------------------------
 17402                                  
 17403                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17404                                  
 17405                                  GET_FILE_INFO:
 17406                                  
 17407                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17408                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17409                                  
 17410 000028B9 E874E9                  	call	TestNet
 17411 000028BC 7306                    	JNC	short LOCAL_INFO
 17412                                  
 17413                                  ;IF NOT Installed
 17414                                  ;	transfer NET_GET_FILE_INFO
 17415                                  ;ELSE
 17416                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17417                                  ;	INT	2FH
 17418                                  ;	return
 17419                                  
 17420 000028BE B80F11                  	mov     ax, 110Fh
 17421 000028C1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17422                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17423                                  			; SDA CDS pointer -> current directory
 17424                                  			; Return: CF set on error, AX = file attributes
 17425 000028C3 C3                      	retn
 17426                                  ;ENDIF
 17427                                  
 17428                                  LOCAL_INFO:
 17429 000028C4 E82BEA                  	call	ECritDisk
 17430 000028C7 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17431                                  	; MSDOS 3.3
 17432                                  	;call	GETPATH
 17433                                  	; MSDOS 6.0
 17434 000028CC E8D700                  	call	GET_FAST_PATH
 17435                                  	; MSDOS 3.3 & MSDOS 6.0
 17436 000028CF 7312                    	JNC	short info_check_dev
 17437                                  NO_PATH:
 17438 000028D1 750B                    	JNZ	short bad_path1
 17439 000028D3 08C9                    	OR	CL,CL
 17440 000028D5 7407                    	JZ	short bad_path1
 17441                                  info_no_file:
 17442 000028D7 B80200                  	MOV	AX,error_file_not_found
 17443                                  BadRet:
 17444 000028DA F9                      	STC
 17445                                  JustRet:
 17446                                  	;call	LCritDisk
 17447                                  	;retn
 17448                                  	; 18/12/2022
 17449 000028DB E92FEA                  	jmp	LCritDisk
 17450                                  
 17451                                  bad_path1:
 17452 000028DE B80300                  	MOV	AX,error_path_not_found
 17453 000028E1 EBF7                    	jmp	short BadRet
 17454                                  
 17455                                  info_check_dev:
 17456 000028E3 08E4                    	OR	AH,AH
 17457 000028E5 78F0                    	JS	short info_no_file	; device
 17458                                  
 17459                                  	; MSDOS 6.0
 17460                                  ;SR;
 17461                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17462                                  ;for a root dir
 17463                                  
 17464 000028E7 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17465 000028EC 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17466                                  
 17467 000028EE 30E4                    	xor	ah,ah
 17468 000028F0 B010                    	mov	al,attr_directory ; 10h
 17469                                  	;clc
 17470                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17471                                  	; (DOSCODE:683Eh)
 17472                                  	; 16/12/2022
 17473                                  	;clc
 17474 000028F2 EBE7                    	jmp	short JustRet
 17475                                  
 17476                                  not_root:
 17477                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17478 000028F4 1E                      	PUSH	DS
 17479 000028F5 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17480 000028F9 89DE                    	MOV	SI,BX
 17481 000028FB 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17482 000028FD 89DF                    	MOV	DI,BX
 17483                                  	;mov	cx,[si+16h]
 17484 000028FF 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17485                                  	;mov	dx,[si+18h]
 17486 00002902 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17487 00002905 30E4                    	XOR	AH,AH
 17488                                  	;mov	al,[si+0Bh]
 17489 00002907 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17490                                  	;test	al,10h
 17491 0000290A A810                    	TEST	AL,attr_directory
 17492 0000290C 7506                    	JNZ	short NO_SIZE
 17493                                  	;mov	di,[si+1Ch]
 17494 0000290E 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17495                                  	;mov	bx,[si+1Eh]
 17496 00002911 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17497                                  NO_SIZE:
 17498 00002914 1F                      	POP	DS
 17499                                  	;CLC
 17500                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17501                                  	; (DOSCODE:6864h)
 17502                                  	; 16/12/2022
 17503                                  	;clc
 17504 00002915 EBC4                    	jmp	short JustRet
 17505                                  
 17506                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17507                                  ;-------------------------------------------------------------------------------
 17508                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17509                                  ; Inputs:
 17510                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17511                                  ;		terminated)
 17512                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17513                                  ;		( = -1 if current dir not involved, else
 17514                                  ;		 Points to first char after last "/" of current dir part)
 17515                                  ;	[THISCDS] Points to CDS being used
 17516                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17517                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17518                                  ;	AX is new attributes to give to file
 17519                                  ; Function:
 17520                                  ;	Set File Attributes
 17521                                  ; Returns:
 17522                                  ;	CARRY CLEAR
 17523                                  ;	    No error
 17524                                  ;	CARRY SET
 17525                                  ;	    AX is error code
 17526                                  ;		error_file_not_found
 17527                                  ;			Last element of path not found
 17528                                  ;		error_path_not_found
 17529                                  ;			Bad path (not in curr dir part if present)
 17530                                  ;		error_bad_curr_dir
 17531                                  ;			Bad path in current directory part of path
 17532                                  ;		error_access_denied
 17533                                  ;			Attempt to set an attribute which cannot be set
 17534                                  ;			(attr_directory, attr_volume_ID)
 17535                                  ;		error_sharing_violation
 17536                                  ;			Sharing mode of file did not allow the change
 17537                                  ;			(this request requires exclusive write/read access)
 17538                                  ;			(INT 24H generated)
 17539                                  ; DS preserved, others destroyed
 17540                                  ;----------------------------------------------------------------------------
 17541                                  
 17542                                  SET_FILE_ATTRIBUTE:
 17543                                  
 17544                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17545                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17546                                  
 17547 00002917 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17548 0000291A 7414                    	JZ	short set_look
 17549                                  _BAD_ACC:
 17550 0000291C C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17551 00002921 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17552 00002926 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17553 0000292B B80500                  	MOV	AX,error_access_denied ; 5
 17554 0000292E F9                      	STC
 17555 0000292F C3                      	retn
 17556                                  
 17557                                  set_look:
 17558 00002930 E8FDE8                  	call	TestNet
 17559 00002933 7308                    	JNC	short LOCAL_SET
 17560                                  
 17561                                  ;IF NOT Installed
 17562                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17563                                  ;ELSE
 17564 00002935 50                      	PUSH	AX
 17565                                  	
 17566                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17567                                  	;INT	2FH
 17568                                  
 17569 00002936 B80E11                  	mov     ax, 110Eh
 17570 00002939 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17571                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17572                                  			; SDA CDS pointer -> current directory
 17573                                  			; STACK: WORD new file attributes
 17574                                  			; Return: CF set on error
 17575                                  
 17576 0000293B 5B                      	POP	BX			; clean stack
 17577 0000293C C3                      	retn
 17578                                  ;ENDIF
 17579                                  
 17580                                  LOCAL_SET:
 17581 0000293D E8B2E9                  	call	ECritDisk
 17582 00002940 50                      	PUSH	AX			; Save new attributes
 17583 00002941 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17584 00002946 E8EB14                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17585 00002949 7308                    	JNC	short set_check_device
 17586 0000294B 5B                      	POP	BX			; Clean stack (don't zap AX)
 17587 0000294C EB83                    	JMP	short NO_PATH
 17588                                  
 17589                                  	; MSDOS 6.0
 17590                                  cannot_set_root:			; M025:
 17591 0000294E B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17592                                  	;stc				; M025: to set attr. of root
 17593                                  	;jmp	short OK_BYE		; M025:
 17594                                  	; 01/02/2024
 17595 00002951 EB87                    	jmp	short BadRet
 17596                                  
 17597                                  set_check_device:
 17598 00002953 08E4                    	OR	AH,AH
 17599 00002955 7906                    	JNS	short set_check_share
 17600 00002957 58                      	POP	AX
 17601 00002958 E8B2E9                  	call	LCritDisk
 17602 0000295B EBBF                    	JMP	short _BAD_ACC 		; device
 17603                                  
 17604                                  set_check_share:
 17605 0000295D 58                      	POP	AX			; Get new attributes
 17606                                  
 17607                                  	; MSDOS 6.0
 17608 0000295E 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17609 00002963 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17610                                  
 17611                                  	; MSDOS 3.3 & MSDOS 6.0
 17612 00002965 E882FC                  	call	REN_DEL_Check
 17613 00002968 7305                    	JNC	short set_do
 17614 0000296A B82000                  	MOV	AX,error_sharing_violation ; 32
 17615 0000296D EB34                    	jmp	short OK_BYE
 17616                                  
 17617                                  set_do:
 17618                                  	; MSDOS 3.3 & MSDOS 6.0
 17619 0000296F C43E[E205]              	LES	DI,[CURBUF]
 17620 00002973 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17621 00002978 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17622                                  
 17623                                  	; MSDOS 6.0
 17624 0000297C 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17625                                  					;LB. if already dirty		  ;AN000;
 17626 00002981 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17627 00002983 E8AC30                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17628                                  	
 17629 00002986 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17630                                  yesdirty3:
 17631 0000298B A0[7605]                	MOV	AL,[THISDRV]
 17632                                  ;;;; 10/1/86 F.C update fastopen cache
 17633 0000298E 52                      	PUSH	DX
 17634 0000298F 57                      	PUSH	DI
 17635 00002990 B400                    	MOV	AH,0		  ; dir entry update
 17636 00002992 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17637 00002994 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17638 00002996 E8E6FC                  	call	FastOpen_Update
 17639 00002999 5F                      	POP	DI
 17640 0000299A 5A                      	POP	DX
 17641                                  ;;;; 9/11/86 F.C update fastopen cache
 17642 0000299B E8922F                  	call	FLUSHBUF
 17643 0000299E 7303                    	JNC	short OK_BYE
 17644 000029A0 B80200                  	MOV	AX,error_file_not_found
 17645                                  OK_BYE:
 17646                                  	;call	LCritDisk
 17647                                  	;retn
 17648                                  	; 16/12/2022
 17649 000029A3 E967E9                  	jmp	LCritDisk
 17650                                  
 17651                                  	; 17/05/2019 - Retro DOS v4.0
 17652                                  
 17653                                  	; MSDOS 6.0
 17654                                  GET_FAST_PATH:
 17655                                  ;hkn; use SS override for FastOpenFlg
 17656 000029A6 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17657                                  					;FO. trigger fastopen	;AN000;
 17658 000029AC E88514                  	call	GETPATH
 17659 000029AF 9C                      	PUSHF			 	;FO.			;AN000;
 17660 000029B0 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17661                                  					;FO. clear all fastopen flags ;AN000;
 17662 000029B6 9D                      	POPF				;FO.			;AN000;
 17663 000029B7 C3                      	retn
 17664                                  
 17665                                  ;============================================================================
 17666                                  ; DUP.ASM, MSDOS 6.0, 1991
 17667                                  ;============================================================================
 17668                                  ; 08/08/2018 - Retro DOS v3.0
 17669                                  ; 17/05/2019 - Retro DOS v4.0
 17670                                  
 17671                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17672                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17673                                  ;
 17674                                  ;	DOS_DUP
 17675                                  ;
 17676                                  ;	Modification history:
 17677                                  ;
 17678                                  ;	  Created: ARR 30 March 1983
 17679                                  
 17680                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17681                                  ;---------------------------------------------------------------------------
 17682                                  ; Procedure Name : DOS_DUP
 17683                                  ;
 17684                                  ; Inputs:
 17685                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17686                                  ;		(a non net SFT is OK, in this case the ref
 17687                                  ;		 count is simply incremented)
 17688                                  ; Function:
 17689                                  ;	Signal to the devices that a logical open is occurring
 17690                                  ; Returns:
 17691                                  ;	ES:DI point to SFT
 17692                                  ;    Carry clear
 17693                                  ;	SFT ref_count is incremented
 17694                                  ; Registers modified: None.
 17695                                  ; NOTE:
 17696                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17697                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17698                                  ;	that time.
 17699                                  ;---------------------------------------------------------------------------
 17700                                  
 17701                                  DOS_DUP:
 17702                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17703                                  
 17704                                  	; MSDOS 6.0
 17705 000029B8 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17706 000029BD 26C43E[9E05]            	les	di,[es:THISSFT]
 17707                                  
 17708                                  	;Entry	Dos_Dup_Direct
 17709                                  DOS_Dup_Direct:
 17710 000029C2 E884E8                  	call	IsSFTNet
 17711 000029C5 7503                    	JNZ	short DO_INC
 17712 000029C7 E81D1B                  	call	DEV_OPEN_SFT
 17713                                  DO_INC:
 17714                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17715 000029CA 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17716                                  					;   we're in big trouble anyway)
 17717 000029CD C3                      	retn
 17718                                  
 17719                                  ;============================================================================
 17720                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17721                                  ;============================================================================
 17722                                  ; 08/08/2018 - Retro DOS v3.0
 17723                                  ; 18/05/2019 - Retro DOS v4.0
 17724                                  
 17725                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17726                                  ;NAME	DOS_CREATE
 17727                                  ;----------------------------------------------------------------------------
 17728                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17729                                  ;
 17730                                  ;	DOS_CREATE
 17731                                  ;	DOS_CREATE_NEW
 17732                                  ;	SET_MKND_ERR
 17733                                  ;	SET_Media_ID
 17734                                  ;	SET_EXT_Mode
 17735                                  ;
 17736                                  ;	Revision history:
 17737                                  ;
 17738                                  ;	    A000 version 4.00	  Jan. 1988
 17739                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17740                                  
 17741                                  ;Installed = TRUE
 17742                                  
 17743                                  ;	i_need	THISSFT,DWORD
 17744                                  ;	i_need	THISCDS,DWORD
 17745                                  ;	I_need	EXTERR,WORD
 17746                                  ;	I_Need	ExtErr_locus,BYTE
 17747                                  ;	I_need	JShare,DWORD
 17748                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17749                                  ;	I_need	SATTRIB,BYTE
 17750                                  ;	I_need	CALLVIDM,DWORD
 17751                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17752                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17753                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17754                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17755                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17756                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17757                                  
 17758                                  ;***	DOS_CREATE - Create a File
 17759                                  ;----------------------------------------------------------------------------
 17760                                  ;	DOS_Create is called to create the specified file, truncating
 17761                                  ;	the old one if it exists.
 17762                                  ;
 17763                                  ;	ENTRY	AX is Attribute to create
 17764                                  ;		(ds) = DOSDATA
 17765                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17766                                  ;			terminated)
 17767                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17768                                  ;			( = -1 if current dir not involved, else
 17769                                  ;			 Points to first char after last "/" of current dir part)
 17770                                  ;		[THISCDS] Points to CDS being used
 17771                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17772                                  ;		[THISSFT] Points to SFT to fill in if file created
 17773                                  ;			(sf_mode field set so that FCB may be detected)
 17774                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17775                                  ;
 17776                                  ;	EXIT	sf_ref_count is NOT altered
 17777                                  ;		CARRY CLEAR
 17778                                  ;		    THISSFT filled in.
 17779                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17780                                  ;		CARRY SET
 17781                                  ;		    AX is error code
 17782                                  ;			error_path_not_found
 17783                                  ;				Bad path (not in curr dir part if present)
 17784                                  ;			error_bad_curr_dir
 17785                                  ;				Bad path in current directory part of path
 17786                                  ;			error_access_denied
 17787                                  ;				Attempt to re-create read only file , or
 17788                                  ;				create a second volume id or create a dir
 17789                                  ;			error_sharing_violation
 17790                                  ;				The sharing mode was correct but not allowed
 17791                                  ;				generates an INT 24
 17792                                  ;	USES	all but DS
 17793                                  ;----------------------------------------------------------------------------
 17794                                  
 17795                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17796                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17797                                  
 17798                                  DOS_CREATE:
 17799                                  	; 18/05/2019 - Retro DOS v4.0
 17800                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17801                                  
 17802                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17803                                  ;hkn; this point.
 17804                                  
 17805 000029CE 30E4                    	XOR	AH,AH		; Truncate is OK
 17806                                  
 17807                                  ;	Enter here from Dos_Create_New
 17808                                  ;
 17809                                  ;	(ah) = 0 iff truncate OK
 17810                                  
 17811                                  Create_inter:
 17812 000029D0 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17813                                  				; Mask out any meaningless bits
 17814 000029D2 7511                    	JNZ	short AttErr
 17815 000029D4 A808                    	TEST	AL,attr_volume_id
 17816 000029D6 7407                    	JZ	short NoReset
 17817                                  	
 17818                                  	; MSDOS 6.0
 17819                                  	; 16/12/2022
 17820 000029D8 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17821                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17822                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17823                                  	
 17824 000029DD B008                    	MOV	AL,attr_volume_id ; 8
 17825                                  NoReset:
 17826 000029DF 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17827 000029E1 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17828 000029E3 740A                    	JZ	short ATT_OK
 17829                                  AttErr:
 17830 000029E5 B80500                  	MOV	AX,5		; Attribute problem
 17831 000029E8 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17832 000029ED EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17833                                  				   ;	attr_device to be set.
 17834                                  ATT_OK:
 17835 000029EF C43E[9E05]              	LES	DI,[THISSFT]
 17836 000029F3 06                      	PUSH	ES
 17837 000029F4 C436[A205]              	LES	SI,[THISCDS]
 17838 000029F8 83FEFF                  	CMP	SI,-1
 17839 000029FB 751B                    	JNE	short TEST_RE_NET
 17840                                  
 17841                                  ;	No CDS, it must be redirected.
 17842                                  
 17843 000029FD 07                      	POP	ES
 17844                                  
 17845                                  	; MSDOS 6.0
 17846                                  ;Extended open hooks
 17847                                  	;test	byte [EXTOPEN_ON],1
 17848 000029FE F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17849 00002A03 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17850                                  IFS_extopen:				    ;AN000;EO.
 17851 00002A05 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17852                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17853 00002A06 B82E11                  	mov	ax,112Eh
 17854                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17855 00002A09 CD2F                    	INT	2FH			    ;AN000;EO.
 17856 00002A0B 5B                      	POP	BX			    ;AN000;EO. trash bx
 17857 00002A0C C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17858 00002A11 C3                      	retn				    ;AN000;EO.
 17859                                  NOEXTOP:				    ;AN000;
 17860                                  ;Extended open hooks
 17861                                  
 17862                                  ;IF NOT Installed
 17863                                  ;	transfer NET_SEQ_CREATE
 17864                                  ;ELSE
 17865 00002A12 50                      	PUSH	AX
 17866                                  
 17867                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17868                                  	;INT	2FH
 17869                                  
 17870 00002A13 B81811                  	mov	ax,1118h
 17871                                  	; 01/02/2024
 17872                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17873                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17874                                  			; SDA first filename pointer -> fully-qualified name of file
 17875                                  			; STACK: WORD file creation mode???
 17876                                  
 17877                                  	;POP	BX			; BX is trashed anyway
 17878                                  	;retn
 17879 00002A16 EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17880                                  ;ENDIF
 17881                                  
 17882                                  ;	We have a CDS. See if it's network
 17883                                  
 17884                                  TEST_RE_NET:
 17885                                  	;;test	word [es:si+43h],8000h
 17886                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17887                                  	; 07/12/2022
 17888                                  	;test	byte [es:si+44h],80h
 17889                                  	; 17/12/2022
 17890 00002A18 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17891 00002A1D 07                      	POP	ES
 17892 00002A1E 7417                    	JZ	short LOCAL_CREATE
 17893                                  
 17894                                  	; MSDOS 6.0
 17895 00002A20 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17896 00002A23 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17897                                  	;;or	word [es:di+2],2
 17898                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17899                                  	; 17/12/2022
 17900 00002A25 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17901                                  
 17902                                  ;Extended open hooks
 17903                                  dochk:
 17904 00002A2A F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17905 00002A2F 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17906                                  ;Extended open hooks
 17907                                  
 17908                                  ;IF NOT Installed
 17909                                  ;	transfer NET_CREATE
 17910                                  ;ELSE
 17911 00002A31 50                      	PUSH	AX
 17912                                  	
 17913                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17914                                  	;INT	2FH
 17915                                  	
 17916 00002A32 B81711                  	mov	ax,1117h
 17917                                  	
 17918                                  	; 01/02/2024
 17919                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17920                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17921                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17922                                  			; SDA CDS pointer -> current directory
 17923                                  			; Return: CF set on error
 17924                                  
 17925                                  	;POP	BX			; BX is trashed anyway
 17926                                  ;nomore:
 17927                                  	;retn
 17928 00002A35 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17929                                  ;ENDIF
 17930                                  
 17931                                  ;**	It's a local create. We have a local CDS for it.
 17932                                  
 17933                                  LOCAL_CREATE:
 17934                                  	; MSDOS 6.0
 17935 00002A37 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17936 00002A3A 7205                    	JC	short setdone	;AN000;EO.
 17937                                  	
 17938                                  	; MSDOS 3.3 & MSDOS 6.0
 17939                                  	; 17/12/2022
 17940                                  	;;or	word [es:di+2],2
 17941                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17942                                  	;or	byte [es:di+2],2
 17943 00002A3C 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17944                                  setdone:
 17945 00002A41 E8AEE8                  	call	ECritDisk
 17946 00002A44 E8461E                  	call	MakeNode
 17947 00002A47 7317                    	JNC	short Create_ok
 17948 00002A49 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17949 00002A4E E8BCE8                  	call	LCritDisk
 17950                                  
 17951                                  	;entry	SET_MKND_ERR
 17952                                  SET_MKND_ERR:
 17953                                  
 17954                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17955                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17956                                  
 17957                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17958 00002A51 BB[582A]                	MOV     BX,CRTERRTAB
 17959                                  	;XLAT  ; MSDOS 3.3
 17960                                  	; 18/05/2019 - Retro DOS v4.0
 17961 00002A54 2E                      	CS
 17962 00002A55 D7                      	XLAT
 17963                                  CreatBadRet:
 17964 00002A56 F9                      	STC
 17965 00002A57 C3                      	retn
 17966                                  
 17967                                  ; 13/05/2019 - Retro DOS v4.0
 17968                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17969                                  ; ---------------------------------------------------------------------------
 17970                                  
 17971                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17972                                  
 17973                                  ; 17/07/2018 - Retro DOS v3.0
 17974                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17975                                  
 17976                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17977                                  ;	db	0,5,52h,50h,3,5,20h
 17978                                  
 17979                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17980                                  ;	db	0,5,52h,50h,3,5,20h,2
 17981                                  
 17982                                  ; 08/08/2018
 17983                                  
 17984                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17985 00002A58 00                      	DB	0			; none
 17986 00002A59 05                      	DB	error_access_denied	; MakeNode error 1
 17987 00002A5A 52                      	DB	error_cannot_make	; MakeNode error 2
 17988 00002A5B 50                      	DB	error_file_exists	; MakeNode error 3
 17989 00002A5C 03                      	DB	error_path_not_found	; MakeNode error 4
 17990 00002A5D 05                      	DB	error_access_denied	; MakeNode error 5
 17991 00002A5E 20                      	DB	error_sharing_violation ; MakeNode error 6
 17992                                  	; MSDOS 6.0
 17993 00002A5F 02                      	DB	error_file_not_found	; MakeNode error 7
 17994                                  
 17995                                  ; ---------------------------------------------------------------------------
 17996                                  
 17997                                  ; We have just created a new file. This results in the truncation of old
 17998                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17999                                  ; file to the current size.
 18000                                  
 18001                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18002                                  ; drive number to force a Build BPB after Media Check.
 18003                                  
 18004                                  ;;; FASTOPEN 8/29/86
 18005                                  Create_ok:
 18006 00002A60 E8F4FB                  	call	FastOpen_Delete
 18007                                  ;;; FASTOPEN 8/29/86
 18008 00002A63 A0[6D05]                	mov	al,[SATTRIB]
 18009 00002A66 A808                    	test	al,attr_volume_id
 18010 00002A68 741C                    	jz	short NoVolLabel
 18011 00002A6A C43E[A205]              	LES	DI,[THISCDS]
 18012                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18013 00002A6E 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18014 00002A71 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18015 00002A74 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18016                                  	
 18017                                  	; 18/05/2019 - Retro DOS v4.0
 18018                                  
 18019                                  	; MSDOS 6.0
 18020 00002A78 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18021 00002A7A E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18022                                  	
 18023 00002A7D E872E8                  	call	ECritDisk
 18024 00002A80 E83A2B                  	call	FATREAD_CDS		; force a media check
 18025 00002A83 E887E8                  	call	LCritDisk
 18026                                  
 18027                                  NoVolLabel:
 18028 00002A86 B80200                  	MOV	ax,2
 18029 00002A89 C43E[9E05]              	LES	DI,[THISSFT]
 18030                                  ;if installed
 18031                                  	;call	JShare + 14 * 4
 18032 00002A8D FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18033                                  ;else
 18034                                  ;	Call	ShSU
 18035                                  ;endif
 18036 00002A91 E879E8                  	call	LCritDisk
 18037 00002A94 E94901                  	jmp	SET_SFT_MODE
 18038                                  
 18039                                  ;---------------------------------------------------------------------------
 18040                                  ; Procedure Name : Dos_Create_New
 18041                                  ;
 18042                                  ; Inputs:
 18043                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18044                                  ;		terminated)
 18045                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18046                                  ;		( = -1 if current dir not involved, else
 18047                                  ;		 Points to first char after last "/" of current dir part)
 18048                                  ;	[THISCDS] Points to CDS being used
 18049                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18050                                  ;	[THISSFT] Points to SFT to fill in if file created
 18051                                  ;		(sf_mode field set so that FCB may be detected)
 18052                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18053                                  ;	AX is Attribute to create
 18054                                  ; Function:
 18055                                  ;	Try to create the specified file truncating an old one that exists
 18056                                  ; Outputs:
 18057                                  ;	sf_ref_count is NOT altered
 18058                                  ;	CARRY CLEAR
 18059                                  ;	    THISSFT filled in.
 18060                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18061                                  ;	CARRY SET
 18062                                  ;	    AX is error code
 18063                                  ;		error_path_not_found
 18064                                  ;			Bad path (not in curr dir part if present)
 18065                                  ;		error_bad_curr_dir
 18066                                  ;			Bad path in current directory part of path
 18067                                  ;		error_access_denied
 18068                                  ;			Create a second volume id or create a dir
 18069                                  ;		error_file_exists
 18070                                  ;			Already a file by this name
 18071                                  ; DS preserved, others destroyed
 18072                                  ;---------------------------------------------------------------------------
 18073                                  
 18074                                  DOS_Create_New:
 18075 00002A97 B401                    	MOV	AH,1		; Truncate is NOT OK
 18076 00002A99 E934FF                  	JMP	Create_inter
 18077                                  
 18078                                  ; MSDOS 6.0
 18079                                  ;---------------------------------------------------------------------------
 18080                                  ; Procedure Name : Set_Media_ID
 18081                                  ;
 18082                                  ; Inputs:
 18083                                  ;	NAME1= Volume ID
 18084                                  ;	BH= 0, delete volume id
 18085                                  ;	    1, set new volume id
 18086                                  ;	DS= DOSGROUP
 18087                                  ; Function:
 18088                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18089                                  ; Outputs:
 18090                                  ;	CARRY CLEAR
 18091                                  ;	    volume id set
 18092                                  ;	CARRY SET
 18093                                  ;	    AX is error code
 18094                                  ;---------------------------------------------------------------------------
 18095                                  
 18096                                  	; 18/05/2019 - Retro DOS v4.0
 18097                                  Set_Media_ID:
 18098 00002A9C 50                      	PUSH	AX		;AN000;;>32mb
 18099 00002A9D 06                      	PUSH	ES		;AN000;;>32mb
 18100 00002A9E 57                      	PUSH	DI		;AN000;;>32mb
 18101                                  
 18102 00002A9F FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18103 00002AA1 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18104 00002AA3 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18105 00002AA5 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18106                                  
 18107                                  ;hkn; PACKET_TEMP is in DOSDATA
 18108 00002AA8 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18109                                  
 18110 00002AAB 53                      	PUSH	BX		;AN000;;>32mb
 18111 00002AAC 52                      	PUSH	DX		;AN000;;>32mb
 18112 00002AAD 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18113                                  
 18114                                  	;invoke	$IOCTL		;AN000;;>32mb
 18115 00002AAF E86BF7                  	call	_$IOCTL	
 18116                                  
 18117 00002AB2 5A                      	POP	DX		;AN000;;>32mb
 18118 00002AB3 5B                      	POP	BX		;AN000;;>32mb
 18119 00002AB4 7224                    	JC	short geterr	;AN000;;>32mb
 18120                                  
 18121 00002AB6 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18122 00002AB8 7405                    	JZ	short NoName	;AN000;>32mb yes
 18123                                  
 18124                                  ;hkn; NAME1 is in DOSDATA
 18125 00002ABA BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18126                                  
 18127 00002ABD EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18128                                  NoName: 			;AN000;
 18129                                  
 18130                                  ;hkn; NO_NAME_ID is in DOSDATA
 18131 00002ABF BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18132                                  
 18133                                  doset:				;AN000;
 18134 00002AC2 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18135                                  	;add	di,6
 18136 00002AC4 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18137                                  
 18138                                  ;hkn; ES & DS must point to SS
 18139                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18140 00002AC7 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18141                                  
 18142 00002AC8 1F                      	POP	DS		;AN000;;>32mb
 18143                                  
 18144                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18145 00002AC9 16                      	PUSH	SS		;AN000;;>32mb
 18146                                  
 18147 00002ACA 07                      	POP	ES		;AN000;;>32mb
 18148 00002ACB B90B00                  	MOV	CX,11		;AN000;;>32mb
 18149 00002ACE F3A4                    	REP	MOVSB		;AN000;;>32mb
 18150 00002AD0 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18151 00002AD3 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18152 00002AD5 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18153                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18154 00002AD7 E843F7                  	call	_$IOCTL	
 18155                                  geterr: 			;AN000;
 18156                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18157 00002ADA 16                      	PUSH	SS		;AN000;>32mb
 18158                                  
 18159 00002ADB 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18160                                  
 18161 00002ADC 5F                      	POP	DI		;AN000;;>32mb
 18162 00002ADD 07                      	POP	ES		;AN000;;>32mb
 18163 00002ADE 58                      	POP	AX		;AN000;;>32mb
 18164 00002ADF C3                      	retn			;AN000;>32mb
 18165                                  
 18166                                  ; MSDOS 6.0
 18167                                  ;---------------------------------------------------------------------------
 18168                                  ; Procedure Name : Set_EXT_mode
 18169                                  ;
 18170                                  ; Inputs:
 18171                                  ;	[EXTOPEN_ON]= flag for extended open
 18172                                  ;	SAVE_BX= mode specified in Extended Open
 18173                                  ; Function:
 18174                                  ;	Set mode in ThisSFT
 18175                                  ; Outputs:
 18176                                  ;	carry set,mode is set if from Extended Open
 18177                                  ;	carry clear, mode not set yet
 18178                                  ;---------------------------------------------------------------------------
 18179                                  
 18180                                  ; 13/05/2019 - Retro DOS v4.0
 18181                                  
 18182                                  Set_EXT_mode:
 18183                                  
 18184                                  ;hkn; SS override
 18185 00002AE0 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18186 00002AE6 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18187 00002AE8 50                      	PUSH	AX			    ;AN000;EO.
 18188                                  
 18189                                  ;hkn; SS override
 18190 00002AE9 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18191                                  	;or	[es:di+2],ax
 18192 00002AED 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18193 00002AF1 58                      	POP	AX			    ;AN000;EO.
 18194 00002AF2 F9                      	STC				    ;AN000;EO.
 18195                                  NOTEX:					    ;AN000;
 18196 00002AF3 C3                      	retn				    ;AN000;EO.
 18197                                  
 18198                                  ;============================================================================
 18199                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18200                                  ;============================================================================
 18201                                  ; 08/08/2018 - Retro DOS v3.0
 18202                                  ; 18/05/2019 - Retro DOS v4.0
 18203                                  
 18204                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18205                                  ;	NAME	DOS_OPEN
 18206                                  
 18207                                  ;**	OPEN.ASM - File Open
 18208                                  ;----------------------------------------------------------------------------
 18209                                  ;	Low level routines for openning a file from a file spec.
 18210                                  ;	Also misc routines for sharing errors
 18211                                  ;
 18212                                  ;	DOS_Open
 18213                                  ;	Check_Access_AX
 18214                                  ;	SHARE_ERROR
 18215                                  ;	SET_SFT_MODE
 18216                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18217                                  ;
 18218                                  ;	Revision history:
 18219                                  ;
 18220                                  ;	    Created: ARR 30 March 1983
 18221                                  ;	    A000	version 4.00   Jan. 1988
 18222                                  ;
 18223                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18224                                  ; 	       remote extended opens and not save_cx.
 18225                                  ;
 18226                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18227                                  ;	       on the stack before calling off to the redir.
 18228                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18229                                  ;	       to handle open from exec. In this case set the appropriate bit
 18230                                  ;	       else do not.
 18231                                  ;----------------------------------------------------------------------------	
 18232                                  
 18233                                  ;Installed = TRUE
 18234                                  
 18235                                  ;	i_need	NoSetDir,BYTE
 18236                                  ;	i_need	THISSFT,DWORD
 18237                                  ;	i_need	THISCDS,DWORD
 18238                                  ;	i_need	CURBUF,DWORD
 18239                                  ;	i_need	CurrentPDB,WORD
 18240                                  ;	i_need	CURR_DIR_END,WORD
 18241                                  ;	I_need	RetryCount,WORD
 18242                                  ;	I_need	Open_Access,BYTE
 18243                                  ;	I_need	fSharing,BYTE
 18244                                  ;	i_need	JShare,DWORD
 18245                                  ;	I_need	FastOpenFlg,byte
 18246                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18247                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18248                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18249                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18250                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18251                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18252                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18253                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18254                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18255                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18256                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18257                                  ;
 18258                                  ;	I_need	DOS_FLAG,BYTE
 18259                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18260                                  
 18261                                  ;Break	<DOS_Open - internal file access>
 18262                                  ;---------------------------------------------------------------------------
 18263                                  ; Procedure Name : DOS_Open
 18264                                  ;
 18265                                  ; Inputs:
 18266                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18267                                  ;		terminated)
 18268                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18269                                  ;		( = -1 if current dir not involved, else
 18270                                  ;		 Points to first char after last "/" of current dir part)
 18271                                  ;	[THISCDS] Points to CDS being used
 18272                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18273                                  ;	[THISSFT] Points to SFT to fill in if file found
 18274                                  ;		(sf_mode field set so that FCB may be detected)
 18275                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18276                                  ;	AX is Access and Sharing mode
 18277                                  ;	  High NIBBLE of AL (Sharing Mode)
 18278                                  ;		sharing_compat	   file is opened in compatibility mode
 18279                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18280                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18281                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18282                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18283                                  ;	  Low NIBBLE of AL (Access Mode)
 18284                                  ;		open_for_read	file is opened for reading
 18285                                  ;		open_for_write	file is opened for writing
 18286                                  ;		open_for_both	file is opened for both reading and writing.
 18287                                  ;
 18288                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18289                                  ;		(not checked)
 18290                                  ; Function:
 18291                                  ;	Try to open the specified file
 18292                                  ; Outputs:
 18293                                  ;	sf_ref_count is NOT altered
 18294                                  ;	CARRY CLEAR
 18295                                  ;	    THISSFT filled in.
 18296                                  ;	CARRY SET
 18297                                  ;	    AX is error code
 18298                                  ;		error_file_not_found
 18299                                  ;			Last element of path not found
 18300                                  ;		error_path_not_found
 18301                                  ;			Bad path (not in curr dir part if present)
 18302                                  ;		error_bad_curr_dir
 18303                                  ;			Bad path in current directory part of path
 18304                                  ;		error_invalid_access
 18305                                  ;			Bad sharing mode or bad access mode or bad combination
 18306                                  ;		error_access_denied
 18307                                  ;			Attempt to open read only file for writting, or
 18308                                  ;			open a directory
 18309                                  ;		error_sharing_violation
 18310                                  ;			The sharing mode was correct but not allowed
 18311                                  ;			generates an INT 24 on compatibility mode SFTs
 18312                                  ; DS preserved, others destroyed
 18313                                  ;----------------------------------------------------------------------------
 18314                                  
 18315                                  ; 18/05/2019 - Retro DOS v4.0
 18316                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18317                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18318                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18319                                  
 18320                                  DOS_OPEN:
 18321                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18322                                  
 18323 00002AF4 C606[4C03]00            	MOV	byte [NoSetDir],0
 18324 00002AF9 E83301                  	CALL	Check_Access_AX
 18325 00002AFC 722B                    	JC	short do_ret_label	    ; retc
 18326                                  
 18327 00002AFE C43E[9E05]              	LES	DI,[THISSFT]
 18328 00002B02 30E4                    	XOR	AH,AH
 18329                                  
 18330                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18331                                  
 18332 00002B04 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18333 00002B08 06                      	PUSH	ES
 18334 00002B09 C436[A205]              	LES	SI,[THISCDS]
 18335                                  	; 18/08/2018
 18336 00002B0D 83FEFF                  	CMP	SI,-1
 18337 00002B10 7530                    	JNZ	short TEST_RE_NET1
 18338 00002B12 07                      	POP	ES
 18339                                  
 18340                                  	; MSDOS 6.0
 18341                                  ;Extended open hooks
 18342 00002B13 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18343 00002B18 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18344                                  _IFS_extopen:									;AN000;
 18345 00002B1A A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18346                                  					    ; with which call was made. This
 18347                                  					    ; has the open access bits. 
 18348                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18349                                  	
 18350 00002B1D 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18351                                  	;mov	ax,112Eh
 18352                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18353 00002B1E B82E11                  	mov	ax,(MultNET*256)+46 
 18354 00002B21 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18355 00002B23 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18356 00002B24 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18357                                  
 18358                                  do_ret_label:
 18359 00002B29 C3                      	retn				    ;FT.				;AN000;
 18360                                  _NOEXTOP:
 18361                                  ;Extended open hooks
 18362                                  	;
 18363                                  ;IF NOT Installed
 18364                                  	;transfer NET_SEQ_OPEN
 18365                                  ;ELSE
 18366                                  	
 18367                                  do_net_int2f:
 18368 00002B2A F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18369 00002B2F 7409                    	jz	short not_exec_open	; N: just do net open
 18370                                  					; Y: check to see if redir is aware
 18371                                  					;    of this 
 18372                                  	
 18373                                  					; M042 - start
 18374                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18375 00002B31 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18376                                  					; Q: does this redir know how to 
 18377                                  					;    this
 18378 00002B36 7402                    	jz	short not_exec_open	; N: just do net open
 18379                                  					; Y: set bit 3 of access byte and 
 18380                                  					;    set sharing mode to DENY_WRITE
 18381                                  					; M042 - end
 18382                                  	
 18383                                  	; NOTE: This specific mode has not been set for the code assembled
 18384                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18385                                  	; always one.
 18386                                  					; M035 - set the bits on the stack
 18387                                  	;mov	al,23h
 18388 00002B38 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18389                                  	
 18390                                  not_exec_open:
 18391                                  	; MSDOS 3.3 & MSDOS 6.0
 18392 00002B3A 50                      	PUSH	AX
 18393                                  
 18394                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18395                                  	;INT	2FH
 18396                                  
 18397 00002B3B B81611                  	mov     ax,1116h
 18398 00002B3E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18399                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18400                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18401                                  			; STACK: WORD file open mode
 18402                                  			; Return: CF set on error
 18403                                  
 18404 00002B40 5B                      	POP	BX			; clean stack
 18405                                  ;do_ret_label: ; 09/08/2018
 18406 00002B41 C3                      	retn
 18407                                  ;ENDIF
 18408                                  
 18409                                  TEST_RE_NET1:
 18410                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18411                                  	; 17/12/2022
 18412 00002B42 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18413 00002B47 07                      	POP	ES
 18414                                  	; 18/05/2019
 18415 00002B48 7409                    	JZ	short LOCAL_OPEN
 18416                                  
 18417                                  ;Extended open hooks
 18418                                  	; MSDOS 6.0
 18419 00002B4A F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18420 00002B4F 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18421                                  ;Extended open hooks
 18422                                  
 18423                                  ;IF NOT Installed
 18424                                  ;	transfer NET_OPEN
 18425                                  ;ELSE
 18426 00002B51 EBD7                    	jmp	short do_net_int2f
 18427                                  ;ENDIF
 18428                                  
 18429                                  LOCAL_OPEN:
 18430                                  	; MSDOS 3.3 & MSDOS 6.0
 18431 00002B53 E89CE7                  	call	ECritDisk
 18432                                  
 18433                                  ; DOS 3.3 FastOPen 6/16/86
 18434                                  
 18435                                  	;or	byte [FastOpenFlg],5
 18436 00002B56 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18437                                  
 18438 00002B5B E8D612                  	call	GETPATH
 18439                                  
 18440                                  ; DOS 3.3 FastOPen 6/16/86
 18441                                  
 18442 00002B5E 731D                    	JNC	short Open_found
 18443 00002B60 7511                    	JNZ	short bad_path2
 18444 00002B62 08C9                    	OR	CL,CL
 18445 00002B64 740D                    	JZ	short bad_path2
 18446                                  OpenFNF:
 18447 00002B66 B80200                  	MOV	AX,error_file_not_found	; 2
 18448                                  OpenBadRet:
 18449                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18450                                  	; 12/08/2018
 18451                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18452                                  	; MSDOS 6.0
 18453 00002B69 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18454 00002B6F F9                      	STC
 18455                                  	;call	LCritDisk
 18456                                  	; 16/12/2022
 18457 00002B70 E99AE7                  	jmp	LCritDisk
 18458                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18459                                  	;retn 	; 08/09/2018
 18460                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18461                                  	;jmp	Clear_FastOpen
 18462                                  
 18463                                  bad_path2:
 18464 00002B73 B80300                  	MOV	AX,error_path_not_found	; 3
 18465 00002B76 EBF1                    	JMP	short OpenBadRet
 18466                                  
 18467                                  Open_Bad_Access:
 18468 00002B78 B80500                  	MOV	AX,error_access_denied	; 5
 18469 00002B7B EBEC                    	JMP	short OpenBadRet
 18470                                  
 18471                                  Open_found:
 18472 00002B7D 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18473 00002B7F 08E4                    	OR	AH,AH
 18474 00002B81 783E                    	JS	short open_ok		; Devices don't have attributes
 18475 00002B83 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18476                                  	;mov	al,[es:bx+0Bh]
 18477 00002B87 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18478 00002B8B A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18479 00002B8D 75E9                    	JNZ	short Open_Bad_Access
 18480 00002B8F A801                    	TEST	AL,attr_read_only	; check write on read only
 18481 00002B91 742E                    	JZ	short open_ok
 18482                                  
 18483                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18484                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18485                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18486                                  ; processing until the actual write operation:
 18487                                  ;
 18488                                  ; If FCB, then we change the mode to be read_only.
 18489                                  ; If net_FCB, then we change the mode to be read_only.
 18490                                  ; If not open for read then error.
 18491                                  
 18492 00002B93 1E                      	push	ds
 18493 00002B94 56                      	push	si
 18494 00002B95 C536[9E05]              	LDS	SI,[THISSFT]
 18495                                  	;mov	cx,[si+2]
 18496 00002B99 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18497                                  	; 17/12/2022
 18498                                  	;test	ch,80h
 18499 00002B9C F6C580                  	test	ch,sf_isFCB>>8
 18500                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18501 00002B9F 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18502 00002BA1 88CA                    	MOV	DL,CL
 18503 00002BA3 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18504 00002BA6 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18505 00002BA9 7508                    	JNZ	short NormalOpen	; no
 18506                                  ResetAccess:
 18507                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18508                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18509                                  	; 16/12/2022
 18510 00002BAB 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18511                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18512 00002BAE 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18513 00002BB1 EB0C                    	JMP	SHORT FillSFT
 18514                                  
 18515                                  ; The SFT is normal. See if the requested access is open_for_read
 18516                                  
 18517                                  NormalOpen:
 18518 00002BB3 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18519 00002BB6 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18520 00002BB9 7404                    	JZ	short FillSFT
 18521 00002BBB 5E                      	pop	si
 18522 00002BBC 1F                      	pop	ds
 18523 00002BBD EBB9                    	JMP	short Open_Bad_Access
 18524                                  ;
 18525                                  ; All done, restore registers and fill the SFT.
 18526                                  ;
 18527                                  FillSFT:
 18528 00002BBF 5E                      	pop	si
 18529 00002BC0 1F                      	pop	ds
 18530                                  open_ok:
 18531 00002BC1 E8841E                  	call	DOOPEN			; Fill in SFT
 18532                                  
 18533                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18534                                  	; 18/05/2019
 18535                                  	;and	byte [ss:FastOpenFlag],80h
 18536 00002BC4 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18537                                  	; 12/08/2018
 18538                                  	;and	byte [FastOpenFlg],Fast_yes	
 18539                                  
 18540                                  	; MSDOS 6.0
 18541 00002BCA E84300                  	CALL	DO_SHARE_CHECK
 18542 00002BCD 7303                    	JNC	short SHARE_OK
 18543                                  	;call	LCritDisk
 18544                                  	; 16/12/2022
 18545 00002BCF E93BE7                  	jmp	LCritDisk
 18546                                  	;;JMP	short Clear_FastOpen
 18547                                  	;retn	; 18/05/2019
 18548                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18549                                  	;jmp	short Clear_FastOpen	
 18550                                  
 18551                                  	; MSDOS 3.3
 18552                                  ;DO_SHARE_CHECK:
 18553                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18554                                  ;OpenShareRetry:
 18555                                  ;	push	cx			; Save number left to do
 18556                                  ;	call	SHARE_CHECK		; Final Check
 18557                                  ;	pop	cx			; CX = # left
 18558                                  ;	JNC	short SHARE_OK		; No problem with access
 18559                                  ;	call	Idle
 18560                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18561                                  ;OpenShareFail:
 18562                                  ;	LES	DI,[THISSFT]
 18563                                  ;	call	SHARE_ERROR
 18564                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18565                                  	
 18566                                  	;12/08/2018
 18567                                  	;mov	byte [ss:FastOpenFlg],0
 18568                                  	;08/09/2018
 18569                                  	;mov	byte [FastOpenFlg],0
 18570                                  	;call	LCritDisk
 18571                                  	;JMP	short Clear_FastOpen
 18572                                  	;retn
 18573                                  
 18574                                  SHARE_OK:
 18575                                  	; MSDOS 3.3 & MSDOS 6.0
 18576 00002BD2 B80300                  	MOV	AX,3
 18577 00002BD5 C43E[9E05]              	LES	DI,[THISSFT]
 18578                                  ;if installed
 18579                                  	;call	JShare + 14 * 4
 18580 00002BD9 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18581                                  ;else
 18582                                  ;	Call	ShSU
 18583                                  ;endif
 18584 00002BDD E82DE7                  	call	LCritDisk
 18585                                  	
 18586                                  	;FallThru Set_SFT_Mode
 18587                                  
 18588                                  ;----------------------------------------------------------------------------
 18589                                  ; Procedure Name : SET_SFT_MODE
 18590                                  ;
 18591                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18592                                  ;
 18593                                  ;   Inputs:
 18594                                  ;	ThisSFT points to SFT
 18595                                  ;
 18596                                  ;   Outputs:
 18597                                  ;	Carry clear
 18598                                  ;   Registers modified: AX.
 18599                                  ;---------------------------------------------------------------------------
 18600                                  
 18601                                  ;hkn; called from create. DS already set up to DOSDATA.
 18602                                  
 18603                                  SET_SFT_MODE:
 18604 00002BE0 C43E[9E05]              	LES	DI,[THISSFT]
 18605 00002BE4 E80019                  	call	DEV_OPEN_SFT
 18606                                  	;test	word [es:di+2],8000h
 18607                                  	; 17/12/2022
 18608                                  	;test	byte [es:di+3],80h
 18609 00002BE7 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18610                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18611 00002BEC 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18612 00002BEE A1[3003]                	MOV	AX,[CurrentPDB]
 18613                                  	;mov	[es:di+31h],ax
 18614 00002BF1 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18615                                  
 18616                                  Clear_FastOpen:
 18617 00002BF5 C3                      	retn			       ;;;;; DOS 3.3
 18618                                  
 18619                                  ;----------------------------------------------------------------------------
 18620                                  ; Procedure Name : SHARE_ERROR
 18621                                  ;
 18622                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18623                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18624                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18625                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18626                                  ;---------------------------------------------------------------------------
 18627                                  
 18628                                  SHARE_ERROR:
 18629                                  	; 17/12/2022
 18630                                  	;test	byte [es:di+3],80h
 18631 00002BF6 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18632                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18633 00002BFB 7509                    	JNZ	short _HARD_ERR
 18634 00002BFD 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18635 00002C01 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18636                                  	;CMP	CL,SHARING_COMPAT ; 0
 18637                                  	;JNE	short _NO_HARD_ERR
 18638                                  	; 21/09/2023
 18639 00002C04 7505                    	jnz	short _NO_HARD_ERR
 18640                                  _HARD_ERR:
 18641 00002C06 E8C045                  	call	SHARE_VIOLATION
 18642                                  	;retnc				; User wants retry
 18643 00002C09 73EA                    	jnc	short Clear_FastOpen
 18644                                  _NO_HARD_ERR:
 18645 00002C0B B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18646 00002C0E F9                      	STC
 18647 00002C0F C3                      	retn
 18648                                  
 18649                                  ; MSDOS 6.0
 18650                                  ;----------------------------------------------------------------------------
 18651                                  ; Procedure Name : DO_SHARE_CHECK
 18652                                  ;
 18653                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18654                                  ; Functions: check file sharing mode is valid
 18655                                  ; Output: carry set, error
 18656                                  ;	  carry clear, share ok
 18657                                  ;----------------------------------------------------------------------------
 18658                                  
 18659                                  	; 18/05/2019 - Retro DOS v4.0
 18660                                  DO_SHARE_CHECK:
 18661 00002C10 E8DFE6                  	call	ECritDisk		; enter critical section
 18662                                  OPN_RETRY:
 18663 00002C13 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18664                                  OpenShareRetry:
 18665 00002C17 51                      	push	cx			; Save number left to do
 18666 00002C18 E8A945                  	call	SHARE_CHECK		; Final Check
 18667 00002C1B 59                      	pop	cx			; CX = # left
 18668 00002C1C 730E                    	JNC	short Share_Ok2		; No problem with access
 18669 00002C1E E8CAE5                  	call	Idle
 18670 00002C21 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18671                                  OpenShareFail:
 18672 00002C23 C43E[9E05]              	LES	DI,[THISSFT]
 18673 00002C27 E8CCFF                  	call	SHARE_ERROR
 18674 00002C2A 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18675                                  Share_Ok2:
 18676                                  	;call	LCritDisk		; leave critical section
 18677                                  	;retn
 18678                                  	; 18/12/2022
 18679 00002C2C E9DEE6                  	jmp	LCritDisk
 18680                                  
 18681                                  ;-----------------------------------------------------------------------------
 18682                                  ; Procedure Name : Check_Access
 18683                                  ;
 18684                                  ; Inputs:
 18685                                  ;	AX is mode
 18686                                  ;	  High NIBBLE of AL (Sharing Mode)
 18687                                  ;		sharing_compat	   file is opened in compatibility mode
 18688                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18689                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18690                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18691                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18692                                  ;	  Low NIBBLE of AL (Access Mode)
 18693                                  ;		open_for_read	file is opened for reading
 18694                                  ;		open_for_write	file is opened for writing
 18695                                  ;		open_for_both	file is opened for both reading and writing.
 18696                                  ; Function:
 18697                                  ;	Check this access mode for correctness
 18698                                  ; Outputs:
 18699                                  ;	[open_access] = AL input
 18700                                  ;	Carry Clear
 18701                                  ;		Mode is correct
 18702                                  ;		AX unchanged
 18703                                  ;	Carry Set
 18704                                  ;		Mode is bad
 18705                                  ;		AX = error_invalid_access
 18706                                  ; No other registers effected
 18707                                  ;----------------------------------------------------------------------------
 18708                                  
 18709                                  Check_Access_AX:
 18710 00002C2F A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18711 00002C32 53                      	PUSH	BX
 18712                                  
 18713                                  ;	If sharing, then test for special sharing mode for FCBs
 18714                                  
 18715 00002C33 88C3                    	MOV	BL,AL
 18716 00002C35 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18717 00002C38 803E[7205]FF            	CMP	byte [FSHARING],-1
 18718 00002C3D 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18719 00002C3F 80FB70                  	CMP	BL,SHARING_NET_FCB
 18720 00002C42 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18721                                  CheckShareMode:
 18722 00002C44 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18723 00002C47 770D                    	JA	short Make_Bad_Access
 18724                                  CheckAccessMode:
 18725 00002C49 88C3                    	MOV	BL,AL
 18726 00002C4B 80E30F                  	AND	BL,access_mask
 18727 00002C4E 80FB02                  	CMP	BL,2
 18728 00002C51 7703                    	JA	short Make_Bad_Access
 18729 00002C53 5B                      	POP	BX
 18730 00002C54 F8                      	CLC
 18731 00002C55 C3                      	retn
 18732                                  
 18733                                  Make_Bad_Access:
 18734 00002C56 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18735 00002C59 5B                      	POP	BX
 18736 00002C5A F9                      	STC
 18737 00002C5B C3                      	retn
 18738                                  
 18739                                  ;============================================================================
 18740                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18741                                  ;============================================================================
 18742                                  ; 08/08/2018 - Retro DOS v3.0
 18743                                  ; 18/05/2019 - Retro DOS v4.0
 18744                                  
 18745                                  ;**	Low level routine for returning disk drive information from a local
 18746                                  ;	  or NET device
 18747                                  ;
 18748                                  ;	DISK_INFO
 18749                                  ;
 18750                                  ;	  Modification history:
 18751                                  ;
 18752                                  ;		Created: ARR 30 March 1983
 18753                                  
 18754                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18755                                  ;---------------------------------------------------------------------------
 18756                                  ; Procedure Name : DISK_INFO
 18757                                  ;
 18758                                  ; Inputs:
 18759                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18760                                  ;		(It MAY NOT be NUL, error not detected)
 18761                                  ; Function:
 18762                                  ;	Get Interesting Drive Information
 18763                                  ; Returns:
 18764                                  ;	DX = Number of free allocation units
 18765                                  ;	BX = Total Number of allocation units on disk
 18766                                  ;	CX = Sector size
 18767                                  ;	AL = Sectors per allocation unit
 18768                                  ;	AH = FAT ID BYTE
 18769                                  ;	Carry set if error (currently user FAILed to I 24)
 18770                                  ; Segs except ES preserved, others destroyed
 18771                                  ;----------------------------------------------------------------------------
 18772                                  
 18773                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18774                                  ;hkn; DOSDATA. 
 18775                                  
 18776                                  DISK_INFO:
 18777                                  	; 08/08/2018 - Retro DOS v3.0
 18778                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18779                                  
 18780 00002C5C E8D1E5                  	call	TestNet
 18781 00002C5F 7306                    	JNC	short LOCAL_DSK_INFO
 18782                                  
 18783                                  ;IF NOT Installed
 18784                                  ;	transfer NET_DISK_INFO
 18785                                  ;ELSE
 18786                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18787                                  	;INT	2FH
 18788                                  	;return
 18789                                  
 18790 00002C61 B80C11                  	mov     ax,110Ch
 18791 00002C64 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18792                                  			; ES:DI -> current directory
 18793                                  			; Return: AL = sectors per cluster, BX = total clusters
 18794                                  			; CX = bytes per sector, DX = number of available clusters
 18795 00002C66 C3                      	retn
 18796                                  ;ENDIF
 18797                                  
 18798                                  LOCAL_DSK_INFO:
 18799 00002C67 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18800 00002C6C E883E6                  	call	ECritDisk
 18801 00002C6F E84B29                  	call	FATREAD_CDS		; perform media check.
 18802 00002C72 7241                    	JC	short CRIT_LEAVE
 18803 00002C74 BB0200                  	MOV	BX,2
 18804 00002C77 E8AD27                  	call	UNPACK			; Get first FAT sector into CURBUF
 18805 00002C7A 7239                    	JC	short CRIT_LEAVE
 18806 00002C7C C536[E205]              	LDS	SI,[CURBUF]
 18807                                  	;mov	ah,[si+20]
 18808 00002C80 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18809                                  
 18810                                  ;hkn; SS is DOSDATA
 18811 00002C83 16                      	push	ss
 18812 00002C84 1F                      	pop	ds
 18813                                  	;mov	cx,[es:bp+0Dh]
 18814 00002C85 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18815                                  
 18816                                  ; Examine the current free count. If it indicates that we have an invalid
 18817                                  ; count, do the expensive calculation.
 18818                                  
 18819                                  	;mov	dx,[es:bp+1Fh]
 18820 00002C89 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18821 00002C8D 83FAFF                  	CMP	DX,-1			; is it valid?
 18822 00002C90 7404                    	JZ	short DoScan
 18823                                  
 18824                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18825                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18826                                  ; the count.
 18827                                  
 18828 00002C92 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18829 00002C94 7222                    	JB	short GotVal		; yes, trust it.
 18830                                  DoScan:
 18831 00002C96 31D2                    	XOR	DX,DX
 18832 00002C98 49                      	DEC	CX
 18833                                  SCANFREE:
 18834 00002C99 E88B27                  	call	UNPACK
 18835 00002C9C 7217                    	JC	short CRIT_LEAVE
 18836 00002C9E 7501                    	JNZ	short NOTFREECLUS
 18837 00002CA0 42                      	INC	DX			; A free one
 18838                                  NOTFREECLUS:
 18839 00002CA1 43                      	INC	BX			; Next cluster
 18840 00002CA2 E2F5                    	LOOP	SCANFREE
 18841 00002CA4 4B                      	DEC	BX			; BX was next cluster. Convert to
 18842                                  ReturnVals:
 18843 00002CA5 4B                      	DEC	BX			; count
 18844                                  	;mov	al,[es:bp+4]
 18845 00002CA6 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18846 00002CAA FEC0                    	INC	AL			; Sectors/cluster
 18847                                  	;mov	cx,[es:bp+2]
 18848 00002CAC 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18849                                  	;mov	[es:bp+1Fh],dx
 18850 00002CB0 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18851 00002CB4 F8                      	CLC
 18852                                  CRIT_LEAVE:
 18853                                  	;call	LCritDisk
 18854                                  	;retn
 18855                                  	; 17/12/2022
 18856 00002CB5 E955E6                  	jmp	LCritDisk
 18857                                  
 18858                                  ; We have correctly computed everything previously. Load up registers for
 18859                                  ; return.
 18860                                  
 18861                                  GotVal: 
 18862 00002CB8 89CB                    	MOV	BX,CX			; get cluster count
 18863 00002CBA EBE9                    	JMP	short ReturnVals
 18864                                  
 18865                                  ;============================================================================
 18866                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18867                                  ;============================================================================
 18868                                  ; 22/07/2018 - Retro DOS v3.0
 18869                                  
 18870                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18871                                  ;	NAME	DOS_SEARCH
 18872                                  
 18873                                  ;**	Low level routines for doing local and NET directory searches
 18874                                  ;
 18875                                  ;	DOS_SEARCH_FIRST
 18876                                  ;	DOS_SEARCH_NEXT
 18877                                  ;	RENAME_NEXT
 18878                                  ;
 18879                                  ;	Revision history:
 18880                                  ;
 18881                                  ;	    Created: ARR 30 March 1983
 18882                                  ;	    A000	version 4.00  Jan. 1988
 18883                                  ;	    A001	PTM 3564 -- search for fastopen
 18884                                  
 18885                                  ;Installed = TRUE
 18886                                  
 18887                                  ;--------------------------------------------------------------------------
 18888                                  ;
 18889                                  ; Procedure Name : DOS_SEARCH_FIRST
 18890                                  ;
 18891                                  ; Inputs:
 18892                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18893                                  ;		terminated)
 18894                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18895                                  ;		( = -1 if current dir not involved, else
 18896                                  ;		 Points to first char after last "/" of current dir part)
 18897                                  ;	[THISCDS] Points to CDS being used
 18898                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18899                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18900                                  ;	[DMAADD] Points to 53 byte buffer
 18901                                  ; Function:
 18902                                  ;	Initiate a search for the given file spec
 18903                                  ; Outputs:
 18904                                  ;	CARRY CLEAR
 18905                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18906                                  ;
 18907                                  ;	LOCAL
 18908                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18909                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18910                                  ;	    11 byte search name with Meta chars in it
 18911                                  ;	    Search Attribute Byte, attribute of search
 18912                                  ;	    WORD LastEnt value
 18913                                  ;	    WORD DirStart
 18914                                  ;	    4 byte pad
 18915                                  ;	    32 bytes of the directory entry found
 18916                                  ;	NET
 18917                                  ;	    21 bytes First byte has high bit set
 18918                                  ;	    32 bytes of the directory entry found
 18919                                  ;
 18920                                  ;	CARRY SET
 18921                                  ;	    AX = error code
 18922                                  ;		error_no_more_files
 18923                                  ;			No match for this file
 18924                                  ;		error_path_not_found
 18925                                  ;			Bad path (not in curr dir part if present)
 18926                                  ;		error_bad_curr_dir
 18927                                  ;			Bad path in current directory part of path
 18928                                  ; DS preserved, others destroyed
 18929                                  ;---------------------------------------------------------------------------
 18930                                  
 18931                                  ; 24/01/2024
 18932                                  %if 1
 18933                                  	; 17/05/2019 - Retro DOS v4.0
 18934                                  GET_FAST_SEARCH:
 18935                                  	; 22/07/2018
 18936                                  	; MSDOS 6.0
 18937                                  	; 17/12/2022
 18938 00002CBC 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18939                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18940                                  					;FO.trigger fastopen ;AN000;
 18941                                  	;call	DOS_SEARCH_FIRST
 18942                                  	;retn
 18943                                  	; 24/01/2024
 18944                                  	; 17/12/2022
 18945                                  	;jmp	DOS_SEARCH_FIRST
 18946                                  %endif
 18947                                  
 18948                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18949                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18950                                  
 18951                                  DOS_SEARCH_FIRST:
 18952                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18953                                  
 18954 00002CC2 C43E[A205]              	LES	DI,[THISCDS]
 18955 00002CC6 83FFFF                  	CMP	DI,-1
 18956 00002CC9 7506                    	JNZ	short TEST_RE_NET2
 18957                                  
 18958                                  ;IF NOT Installed
 18959                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18960                                  ;ELSE
 18961                                  	;mov	ax,1119h
 18962 00002CCB B81911                  	MOV	AX,(MultNET<<8)|25
 18963 00002CCE CD2F                    	INT	2Fh
 18964 00002CD0 C3                      	retn
 18965                                  ;ENDIF
 18966                                  
 18967                                  TEST_RE_NET2:
 18968                                  	;test	word [es:di+43h],8000h
 18969                                  	; 17/12/2022
 18970                                  	;test	byte [es:di+44h],80h
 18971                                  	; 28/12/2022
 18972 00002CD1 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 18973                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18974 00002CD6 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18975                                  
 18976                                  ;IF NOT Installed
 18977                                  ;	transfer NET_SEARCH_FIRST
 18978                                  ;ELSE
 18979                                  	;mov	ax,111Bh
 18980 00002CD8 B81B11                  	MOV	AX,(MultNET<<8)|27
 18981 00002CDB CD2F                    	INT	2FH
 18982 00002CDD C3                      	retn
 18983                                  ;ENDIF
 18984                                  	; 18/05/2019 - Retro DOS v4.0
 18985                                  LOCAL_SEARCH_FIRST:
 18986 00002CDE E811E6                  	call	ECritDisk
 18987                                  	; MSDOS 6.0
 18988                                  	;;test	word [DOS34_FLAG],400h
 18989                                  	; 17/12/2022
 18990                                  	;test	byte [DOS34_FLAG+1],04h
 18991 00002CE1 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18992                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18993 00002CE6 7405                    	JZ	short NOFN			;AN000;
 18994                                  	;or	byte [FastOpenFlg],1
 18995 00002CE8 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18996                                  NOFN:						;AN000;
 18997 00002CED C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18998                                  
 18999                                  ; 03/02/2024
 19000                                  %if 0
 19001                                  	; MSDOS 6.0
 19002                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19003                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19004                                  %else
 19005                                  	; 03/02/2024
 19006 00002CF2 16                      	push	ss
 19007 00002CF3 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19008 00002CF4 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19009                                  getnext:				;AN000;
 19010 00002CF8 AC                      	lodsb				;AN000;;FO. get char
 19011 00002CF9 08C0                    	or	al,al			;AN000;;FO. is it null
 19012 00002CFB 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19013 00002CFD 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19014 00002CFF 75F7                    	jne	short getnext 		;AN000;;FO. no
 19015                                  %endif
 19016                                  	;and	byte [FastOpenFlg],80h
 19017 00002D01 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19018                                  NO_Question:	; 03/02/2024
 19019                                  norm_GETPATH:
 19020 00002D06 E82B11                  	call	GETPATH
 19021                                  	; BX = offset NAME1
 19022                                  ;_getdone:
 19023 00002D09 7318                    	JNC	short find_check_dev
 19024 00002D0B 7511                    	JNZ	short bad_path3
 19025 00002D0D 08C9                    	OR	CL,CL
 19026 00002D0F 740D                    	JZ	short bad_path3
 19027                                  find_no_more:
 19028                                  	;mov	ax,12h
 19029 00002D11 B81200                  	MOV	AX,error_no_more_files
 19030                                  BadBye:
 19031                                  	; MSDOS 6.0
 19032 00002D14 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19033                                  
 19034 00002D1A F9                      	STC
 19035                                  	;call	LCritDisk
 19036                                  	;retn
 19037                                  	; 18/12/2022
 19038 00002D1B E9EFE5                  	jmp	LCritDisk
 19039                                  
 19040                                  bad_path3:
 19041                                  	;mov	ax,3
 19042 00002D1E B80300                  	MOV	AX,error_path_not_found
 19043 00002D21 EBF1                    	JMP	short BadBye
 19044                                  
 19045                                  find_check_dev:
 19046 00002D23 08E4                    	OR	AH,AH
 19047 00002D25 790A                    	JNS	short found_entry
 19048 00002D27 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19049 00002D2D FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19050                                  found_entry:
 19051                                  
 19052                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19053                                  ; a search-next may not have wfp_start set correctly
 19054                                  
 19055 00002D31 C43E[2C03]              	LES	DI,[DMAADD]
 19056 00002D35 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19057 00002D39 AC                      	LODSB
 19058 00002D3A 2C40                    	SUB	AL,'A'-1                ; logical drive
 19059 00002D3C AA                      	STOSB				; High bit not set (local)
 19060                                  found_it:
 19061 00002D3D C43E[2C03]              	LES	DI,[DMAADD]
 19062 00002D41 47                      	INC	DI
 19063                                  
 19064                                  	; MSDOS 6.0
 19065 00002D42 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19066                                  	;test	byte [FastOpenFlg],10h
 19067 00002D43 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19068 00002D48 7408                    	JZ	short notfast			  ;FO.;AN001;
 19069 00002D4A 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19070 00002D4C 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19071 00002D50 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19072                                  
 19073                                  notfast:
 19074 00002D52 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19075                                  movmov:
 19076                                  ; Special E5 code
 19077 00002D55 A4                      	MOVSB
 19078 00002D56 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19079 00002D5B 7505                    	JNZ	short NOTKANJB
 19080 00002D5D 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19081                                  NOTKANJB:
 19082                                  	;MOV	CX,10
 19083                                  	;REP	MOVSB
 19084                                  	; 03/02/2024
 19085 00002D62 B90500                  	mov	cx,5
 19086 00002D65 F3A5                    	rep	movsw
 19087                                  
 19088                                  	; 08/09/2018
 19089 00002D67 1F                      	POP	DS			;FO.;AN001; restore ds
 19090                                  
 19091 00002D68 A0[6B05]                	MOV	AL,[ATTRIB]
 19092 00002D6B AA                      	STOSB
 19093 00002D6C 50                      	PUSH	AX			; Save AH device info
 19094 00002D6D A1[4803]                	MOV	AX,[LASTENT]
 19095 00002D70 AB                      	STOSW
 19096 00002D71 A1[C205]                	MOV	AX,[DIRSTART]
 19097 00002D74 AB                      	STOSW
 19098                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19099 00002D75 83C704                  	ADD	DI,4
 19100 00002D78 58                      	POP	AX			; Recover AH device info
 19101 00002D79 08E4                    	OR	AH,AH
 19102 00002D7B 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19103 00002D7D 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19104 00002D82 7510                    	JNZ	short OKSTORE
 19105                                  
 19106                                  	; MSDOS 6.0
 19107 00002D84 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19108                                  					;AN000;;FO. from fastopen and is good
 19109 00002D89 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19110                                  
 19111                                  	; The user has specified the root directory itself, rather than some
 19112                                  	; contents of it. We can't "find" that.
 19113                                  
 19114 00002D8B 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19115                                  					;   stuffing a -1 at Lastent
 19116 00002D91 E97DFF                  	JMP	find_no_more
 19117                                  
 19118                                  OKSTORE:
 19119 00002D94 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19120                                  DOSREL:
 19121                                  	; BX = offset NAME1 (from GETPATH)
 19122 00002D98 89DE                    	MOV	SI,BX			; SI-> start of entry
 19123                                  
 19124                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19125                                  
 19126                                  	;;mov	cx,32
 19127                                  	;MOV	CX,dir_entry.size
 19128                                  	; 03/02/2024
 19129 00002D9A B91000                  	mov	cx,dir_entry.size>>1
 19130                                  ;;;;; 7/29/86
 19131 00002D9D 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19132                                  	;REP	MOVSB
 19133 00002D9F F3A5                    	rep	movsw
 19134                                  	;
 19135 00002DA1 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19136 00002DA3 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19137 00002DA7 7504                    	JNZ	short NO05
 19138 00002DA9 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19139                                  NO05:
 19140                                  
 19141                                  ;;;;; 7/29/86
 19142                                  
 19143                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19144                                  	; 16/12/2022
 19145                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19146                                  	; MSDOS 6.0
 19147                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19148                                  	; 18/05/2019 - Retro DOS v4.0
 19149 00002DAD 16                      	push	ss
 19150 00002DAE 1F                      	pop	ds
 19151                                  	; 16/12/2022
 19152 00002DAF 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19153                                  
 19154                                  ;hkn; SS is DOSDATA
 19155                                  	;push	ss
 19156                                  	;pop	ds
 19157 00002DB4 F8                      	CLC
 19158                                  	;call	LCritDisk
 19159                                  	;retn
 19160                                  	; 16/12/2022
 19161 00002DB5 E955E5                  	jmp	LCritDisk
 19162                                  
 19163                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19164                                  ;----------------------------------------------------------------------------
 19165                                  ;
 19166                                  ; Procedure Name : DOS_SEARCH_NEXT
 19167                                  ;
 19168                                  ; Inputs:
 19169                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19170                                  ;	    (only first 21 bytes must have valid information)
 19171                                  ; Function:
 19172                                  ;	Look for subsequent matches
 19173                                  ; Outputs:
 19174                                  ;	CARRY CLEAR
 19175                                  ;	    The 53 bytes at DMAADD are updated for next call
 19176                                  ;		(see DOS_SEARCH_FIRST)
 19177                                  ;	CARRY SET
 19178                                  ;	    AX = error code
 19179                                  ;		error_no_more_files
 19180                                  ;			No more files to find
 19181                                  ; DS preserved, others destroyed
 19182                                  ;---------------------------------------------------------------------------
 19183                                  
 19184                                  ;hkn; called from search.asm. DS already set up at this point.
 19185                                  
 19186                                  DOS_SEARCH_NEXT:
 19187 00002DB8 C43E[2C03]              	LES	DI,[DMAADD]
 19188 00002DBC 268A05                  	MOV	AL,[ES:DI]
 19189 00002DBF A880                    	TEST	AL,80H			; Test for NET
 19190 00002DC1 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19191                                  ;IF NOT Installed
 19192                                  ;	transfer NET_SEARCH_NEXT
 19193                                  ;ELSE
 19194                                  	;mov	ax,111Ch
 19195 00002DC3 B81C11                  	MOV	AX,(MultNET<<8)|28
 19196 00002DC6 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19197                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19198                                  		     ; Return: CF set on error, AX = DOS error code
 19199                                  		     ; CF clear if successful
 19200 00002DC8 C3                      	retn
 19201                                  ;ENDIF
 19202                                  
 19203                                  LOCAL_SEARCH_NEXT:
 19204                                  	;AL is drive A=1
 19205                                  	;mov	byte [EXTERR_LOCUS],2
 19206 00002DC9 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19207 00002DCE E821E5                  	call	ECritDisk
 19208                                  
 19209                                  ;hkn; DummyCDS is in DOSDATA
 19210 00002DD1 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19211                                  ;hkn; Segment address is DOSDATA - use ds
 19212                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19213 00002DD7 8C1E[A405]              	mov	[THISCDS+2],DS
 19214                                  
 19215 00002DDB 0440                    	ADD	AL,'A'-1
 19216 00002DDD E8B73A                  	call	InitCDS
 19217                                  
 19218                                  ;	call	GETTHISDRV		; Set CDS pointer
 19219                                  
 19220 00002DE0 7246                    	JC	short No_files		; Bogus drive letter
 19221 00002DE2 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19222                                  	;les	bp,[es:di+45h]
 19223 00002DE6 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19224 00002DEA E83FD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19225                                  
 19226                                  	; 16/12/2022
 19227 00002DED 268A4600                	mov	al,[ES:BP]
 19228                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19229                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19230 00002DF1 A2[7605]                	mov	[THISDRV],AL
 19231                                  	;mov	word [CREATING],0E500h
 19232 00002DF4 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19233 00002DFA C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19234 00002DFF C536[2C03]              	LDS	SI,[DMAADD]
 19235 00002E03 AC                      	LODSB				; Drive Byte
 19236                                  
 19237                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19238                                  RENAME_NEXT:
 19239                                  	;context ES
 19240 00002E04 16                      	push	ss
 19241 00002E05 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19242                                  
 19243                                  ;hkn; NAME1 is in DOSDATA
 19244 00002E06 BF[4B05]                	MOV	DI,NAME1
 19245                                  
 19246 00002E09 B90B00                  	MOV	CX,11
 19247 00002E0C F3A4                    	REP	MOVSB			; Search name
 19248 00002E0E AC                      	LODSB				; Attribute
 19249                                  
 19250                                  ;hkn; SS override
 19251 00002E0F 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19252 00002E13 AD                      	LODSW				; LastEnt
 19253 00002E14 09C0                    	OR	AX,AX
 19254                                  	; 03/02/2024
 19255                                  	;JNS	short cont_load
 19256 00002E16 7810                    	js	short No_files
 19257                                  ;No_files:
 19258                                  	;JMP	find_no_more
 19259                                  
 19260                                  cont_load:
 19261 00002E18 50                      	PUSH	AX			; Save LastEnt
 19262 00002E19 AD                      	LODSW				; DirStart
 19263 00002E1A 89C3                    	MOV	BX,AX
 19264                                  
 19265                                  ;hkn; SS is DOSDATA
 19266                                  	;context DS
 19267 00002E1C 16                      	push	ss
 19268 00002E1D 1F                      	pop	ds
 19269 00002E1E C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19270                                  	;invoke	SetDirSrch
 19271 00002E22 E8B20F                  	call	SETDIRSRCH
 19272 00002E25 7304                    	JNC	short SEARCH_GOON
 19273 00002E27 58                      	POP	AX			; Clean stack
 19274                                  	;JMP	short No_files
 19275                                  	; 03/02/2024
 19276                                  No_files:
 19277 00002E28 E9E6FE                  	JMP	find_no_more
 19278                                  
 19279                                  SEARCH_GOON:
 19280 00002E2B E88912                  	call	STARTSRCH
 19281 00002E2E 58                      	POP	AX
 19282 00002E2F E8780F                  	call	GETENT
 19283 00002E32 72F4                    	JC	short No_files
 19284 00002E34 E8B00E                  	call	NEXTENT
 19285 00002E37 72EF                    	JC	short No_files
 19286 00002E39 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19287 00002E3B E9FFFE                  	JMP	found_it ; 10/08/2018
 19288                                  
 19289                                  ; MSDOS 6.0
 19290                                  ;---------------------------------------------------------------------------
 19291                                  ;
 19292                                  ; Procedure Name : CHECK_QUESTION
 19293                                  ;
 19294                                  ; Input: [WFP_START]= pointer to final path
 19295                                  ; Function: check '?' char
 19296                                  ; Output: carry clear, if no '?'
 19297                                  ;	 carry set, if '?' exists
 19298                                  ;---------------------------------------------------------------------------
 19299                                  
 19300                                  ; 03/02/2024
 19301                                  %if 0
 19302                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19303                                  CHECK_QUESTION:
 19304                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19305                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19306                                  	push	ss
 19307                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19308                                  	; 16/12/2022
 19309                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19310                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19311                                  	;mov	si,[ss:WFP_START]
 19312                                  getnext:				;AN000;
 19313                                  	LODSB				;AN000;;FO. get char
 19314                                  	OR	AL,AL			;AN000;;FO. is it null
 19315                                  	JZ	short NO_Question	;AN000;;FO. yes
 19316                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19317                                  	JNZ	short getnext 		;AN000;;FO. no
 19318                                  	STC				;AN000;;FO.
 19319                                  NO_Question:				;AN000;
 19320                                  	retn				;AN000;;FO.
 19321                                  %endif
 19322                                  
 19323                                  ;============================================================================
 19324                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19325                                  ;============================================================================
 19326                                  ; 23/07/2018 - Retro DOS v3.0
 19327                                  ; 18/05/2019 - Retro DOS v4.0
 19328                                  
 19329                                  ;**
 19330                                  ;
 19331                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19332                                  ;  If process has NET resources a close all is sent out over the net.
 19333                                  ;
 19334                                  ;   DOS_ABORT
 19335                                  ;
 19336                                  ;   Modification history:
 19337                                  ;
 19338                                  ;       Created: ARR 30 March 1983
 19339                                  ;
 19340                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19341                                  ;				being terminated only if it is busy.
 19342                                  ;
 19343                                  
 19344                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19345                                  ;--------------------------------------------------------------------------
 19346                                  ;
 19347                                  ; Procedure Name : DOS_ABORT
 19348                                  ;
 19349                                  ; Inputs:
 19350                                  ;       [CurrentPDB] set to PID of process aborting
 19351                                  ; Function:
 19352                                  ;       Close all files and free all SFTs for this PID
 19353                                  ; Returns:
 19354                                  ;       None
 19355                                  ; All destroyed except stack
 19356                                  ;---------------------------------------------------------------------------
 19357                                  
 19358                                  DOS_ABORT:
 19359 00002E3E 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19360 00002E43 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19361                                  reset_free_jfn:
 19362 00002E48 89CB                    	MOV     BX,CX
 19363 00002E4A 51                      	PUSH    CX
 19364 00002E4B 4B                      	DEC     BX                      ; get jfn (start with last one)
 19365                                  
 19366 00002E4C E88D37                  	CALL	_$CLOSE
 19367 00002E4F 59                      	POP     CX
 19368 00002E50 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19369                                  
 19370                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19371                                  ; are running in the no-sharing no-network environment, we are simulating the
 19372                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19373                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19374                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19375                                  ;
 19376                                  ; If sharing is loaded, then the following call to close process will
 19377                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19378                                  ;
 19379                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19380                                  ; known network resources. These resources are then responsible for cleaning
 19381                                  ; up after this process.
 19382                                  ;
 19383                                  ; Sleazy, eh?
 19384                                  
 19385                                  	;context DS			; SS is DOSDATA
 19386 00002E52 16                      	push	ss
 19387 00002E53 1F                      	pop	ds  ; 09/09/2018
 19388                                  
 19389                                  	;CallInstall Net_Abort, MultNET, 29
 19390 00002E54 B81D11                  	mov	ax,111Dh
 19391 00002E57 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19392                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19393                                  			; DS???, SS = DOS CS
 19394                                  ;if installed
 19395 00002E59 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19396                                  ;else
 19397                                  ;	call 	MFTCloseP
 19398                                  ;endif
 19399                                  
 19400                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19401                                  ; counts.
 19402                                  					; SS override
 19403 00002E5D 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19404                                  	;mov	cx,[es:di+4]
 19405 00002E62 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19406 00002E66 E317                    	jcxz    FCBScanDone
 19407                                  	;lea	di,[di+6]
 19408 00002E68 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19409 00002E6B 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19410                                  FCBTest:
 19411                                  	;cmp	[es:di+31h],ax
 19412 00002E6F 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19413 00002E73 7505                    	jnz	short FCBNext		; no, skip it
 19414 00002E75 26C7050000              	mov	word [es:di],0
 19415                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19416                                  FCBNext:
 19417 00002E7A 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19418 00002E7D E2F0                    	loop    FCBTest
 19419                                  FCBScanDone:
 19420                                  
 19421                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19422                                  
 19423 00002E7F 31DB                    	XOR     BX,BX
 19424                                  Scan:
 19425 00002E81 53                      	push    bx
 19426 00002E82 E8D336                  	call	SFFromSFN
 19427 00002E85 5B                      	pop     bx
 19428                                  	;jnc	short Scan1
 19429                                  	;retn
 19430                                  
 19431                                  	; 18/12/2022
 19432                                  	;jc	short NO_Question ; retn
 19433                                  	; 03/02/2024
 19434 00002E86 7234                    	jc	short RET2
 19435                                  
 19436                                  ;M038
 19437                                  ; Do what the comment above says, check for busy state
 19438                                  
 19439                                  Scan1:
 19440                                  	;cmp	word [es:di],0
 19441                                  	;jz	short scan_next  ; MSDOS 3.3
 19442                                  	; MSDOS 6.0
 19443 00002E88 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19444                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19445                                  				; Is Sft busy? ;M038
 19446 00002E8C 7519                    	jnz	short scan_next
 19447                                  ;
 19448                                  ; we have a SFT that is busy. See if it is for the current process
 19449                                  ;
 19450 00002E8E 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19451                                  	;cmp	[es:di+31h],ax
 19452 00002E92 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19453 00002E96 750F                    	jnz	short scan_next
 19454 00002E98 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19455                                  	;cmp	[es:di+2Fh],ax
 19456 00002E9C 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19457 00002EA0 7505                    	jnz	short scan_next
 19458                                  
 19459                                  ; This SFT is labelled as ours.
 19460                                  
 19461 00002EA2 26C7050000              	mov	word [es:di],0
 19462                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19463                                  scan_next:
 19464 00002EA7 43                      	inc     bx
 19465 00002EA8 EBD7                    	jmp     short Scan
 19466                                  
 19467                                  ;============================================================================
 19468                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19469                                  ;============================================================================
 19470                                  ; 23/07/2018 - Retro DOS v3.0
 19471                                  ; 18/05/2019 - Retro DOS v4.0
 19472                                  
 19473                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19474                                  ;
 19475                                  ;	DOS_CLOSE
 19476                                  ;	DOS_COMMIT
 19477                                  ;	FREE_SFT
 19478                                  ;	SetSFTTimes
 19479                                  ;
 19480                                  ;	Revision history:
 19481                                  ;
 19482                                  ;	   AN000  version 4.00	Jan. 1988
 19483                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19484                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19485                                  
 19486                                  ;Installed = TRUE
 19487                                  
 19488                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19489                                  ;---------------------------------------------------------------------------
 19490                                  ;
 19491                                  ; Procedure Name : DOS_CLOSE
 19492                                  ;
 19493                                  ; Inputs:
 19494                                  ;	[THISSFT] set to the SFT for the file being used
 19495                                  ; Function:
 19496                                  ;	Close the indicated file via the SFT
 19497                                  ; Returns:
 19498                                  ;	sf_ref_count decremented otherwise
 19499                                  ;	ES:DI point to SFT
 19500                                  ;	Carry set if error
 19501                                  ;	    AX has error code
 19502                                  ; DS preserved, others destroyed
 19503                                  ;---------------------------------------------------------------------------
 19504                                  
 19505                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19506                                  
 19507                                  ; 18/05/2019 - Retro DOS v4.0
 19508                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19509                                  
 19510                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19511                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19512                                  
 19513                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19514                                  
 19515                                  DOS_CLOSE:
 19516 00002EAA C43E[9E05]              	LES	DI,[THISSFT]
 19517                                  	;mov	bx,[ES:DI+5]
 19518 00002EAE 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19519                                  
 19520                                  ; Network closes are handled entirely by the net code.
 19521                                  
 19522                                  	;;test	bx,8000h
 19523                                  	;TEST	BX,sf_isnet
 19524                                  	; 17/12/2022
 19525                                  	;test	bh,80h
 19526 00002EB2 F6C780                  	test	bh,(sf_isnet>>8)
 19527 00002EB5 7406                    	JZ	short LocalClose
 19528                                  
 19529                                  	;CallInstall Net_Close,MultNET,6
 19530 00002EB7 B80611                  	mov     ax,1106h
 19531 00002EBA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19532                                  			; ES:DI -> SFT
 19533                                  			; SFT DPB field -> DPB of drive containing file
 19534                                  			; Return: CF set on error, AX = DOS error code
 19535                                  			; CF clear if successful
 19536                                  RET2:		; 03/02/2024
 19537 00002EBC C3                      	retn
 19538                                  
 19539                                  ; All closes release the sharing information.
 19540                                  ; No commit releases sharing information
 19541                                  ;
 19542                                  ; All closes decrement the ref count.
 19543                                  ; No commit decrements the ref count.
 19544                                  
 19545                                  LocalClose:
 19546 00002EBD E832E4                  	call	ECritDisk
 19547 00002EC0 E85801                  	CALL	SetSFTTimes
 19548 00002EC3 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19549                                  
 19550                                  ;hkn; SS is DOSDATA
 19551                                  	;Context DS
 19552 00002EC6 16                      	push	ss
 19553 00002EC7 1F                      	pop	ds
 19554                                  
 19555 00002EC8 50                      	push	ax
 19556 00002EC9 53                      	push	bx
 19557 00002ECA E82243                  	call	ShareEnd
 19558 00002ECD 5B                      	pop	bx
 19559 00002ECE 58                      	pop	ax
 19560                                  
 19561                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19562                                  
 19563                                  CloseEntry:
 19564 00002ECF 50                      	PUSH	AX
 19565                                  
 19566                                  ; File clean or device does not get stamped nor disk looked at.
 19567                                  
 19568                                  	;test	bx,0C0h
 19569                                  	; 17/12/2022
 19570 00002ED0 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19571                                  	;TEST	BX,devid_file_clean+devid_device
 19572 00002ED3 7403                    	JZ	short rdir
 19573                                  	; 14/11/2022
 19574 00002ED5 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19575                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19576                                  
 19577                                  ; Retrieve the directory entry for the file
 19578                                  
 19579                                  rdir:
 19580 00002ED8 E8D100                  	CALL	DirFromSFT
 19581                                  	;mov	al,5
 19582 00002EDB B005                    	MOV	AL,error_access_denied
 19583 00002EDD 7303                    	JNC	short clook
 19584                                  	; 14/11/2022
 19585 00002EDF E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19586                                  	;jc	short CloseFinish ; 24/07/2019
 19587                                  clook:
 19588                                  
 19589                                  ; ES:DI points to entry
 19590                                  ; DS:SI points to SFT
 19591                                  ; ES:BX points to buffer header
 19592                                  
 19593 00002EE2 57                      	push	di
 19594 00002EE3 56                      	push	si
 19595                                  	;lea	si,[si+20h]
 19596 00002EE4 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19597                                  
 19598                                  ; ES:DI point to directory entry
 19599                                  ; DS:SI point to unpacked name
 19600                                  
 19601 00002EE7 E8FAE2                  	call	XCHGP
 19602                                  
 19603                                  ; ES:DI point to unpacked name
 19604                                  ; DS:SI point to directory entry
 19605                                  
 19606 00002EEA E8580E                  	call	MetaCompare
 19607 00002EED E8F4E2                  	call	XCHGP
 19608 00002EF0 5E                      	pop	si
 19609 00002EF1 5F                      	pop	di
 19610 00002EF2 740C                    	JZ	short CLOSE_GO		; Name OK
 19611                                  Bye:	
 19612 00002EF4 89F7                    	MOV	DI,SI
 19613 00002EF6 1E                      	PUSH	DS
 19614 00002EF7 07                      	POP	ES			; ES:DI points to SFT
 19615 00002EF8 16                      	PUSH	SS
 19616 00002EF9 1F                      	POP	DS
 19617 00002EFA F9                      	STC
 19618                                  	;mov	al,2
 19619 00002EFB B002                    	MOV	AL,error_file_not_found
 19620 00002EFD E98E00                  	JMP	CloseFinish ; 24/07/2019
 19621                                  
 19622                                  	; 18/05/2019 - Retro DOS v4.0
 19623                                  CLOSE_GO:
 19624                                  	; 03/02/2024
 19625                                  	;mov	al,[si+4]
 19626 00002F00 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19627                                  	
 19628                                  	; MSDOS 6.0
 19629                                  	;test	word [si+2],8000h
 19630                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19631                                  	; 17/12/2022
 19632                                  	;test	byte [si+3],80h
 19633 00002F03 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19634 00002F07 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19635                                  	; MSDOS 3.3 & MSDOS 6.0
 19636                                  	;mov	ch,[es:di+0Bh]
 19637 00002F09 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19638                                  
 19639                                  	; 03/02/2024
 19640                                  	;;mov	al,[si+4]
 19641                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19642                                  
 19643                                  ;hkn; SS override
 19644 00002F0D 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19645                                  	; MSDOS 3.3
 19646                                  	;;call	MatchAttributes
 19647                                  	;;JNZ	short Bye		; attributes do not match
 19648                                  	; 18/05/2019
 19649 00002F11 EB04                    	JMP	SHORT setattr		;FT.
 19650                                  nofcb:
 19651                                  	; 03/02/2024
 19652                                  	; MSDOS 6.0
 19653                                  	;;mov	al,[si+4]
 19654                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19655                                  
 19656 00002F13 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19657                                  setattr:
 19658                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19659                                  	;or	byte [es:di+0Bh],20h
 19660 00002F17 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19661                                  	; MSDOS 6.0
 19662                                  	;mov	ax,[es:di+1Ah]
 19663 00002F1C 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19664                                  					;F.O. save old first cluster
 19665                                  ;hkn; SS override
 19666 00002F20 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19667                                  
 19668                                  ; 03/02/2024
 19669                                  %if 0
 19670                                  	;mov	ax,[si+0Bh]
 19671                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19672                                  	;mov	[es:di+1Ah],ax
 19673                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19674                                  	;mov	ax,[si+11h]
 19675                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19676                                  	;mov	[es:di+1Ch],ax
 19677                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19678                                  	;mov	ax,[si+13h]
 19679                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19680                                  	;mov	[es:di+1Eh],ax
 19681                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19682                                  	;mov	ax,[si+0Fh]
 19683                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19684                                  	;mov	[es:di+18h],ax
 19685                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19686                                  	;mov	ax,[si+0Dh]
 19687                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19688                                  	;mov	[es:di+16h],ax
 19689                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19690                                  %else
 19691                                  	; 03/02/2024 - Retro DOS v4.1
 19692 00002F24 56                      	push	si
 19693 00002F25 83C60B                  	add	si,0Bh
 19694 00002F28 AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19695                                  	;mov	[es:di+1Ah],ax
 19696 00002F29 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19697 00002F2D AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19698 00002F2E 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19699 00002F32 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19700 00002F33 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19701 00002F37 AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19702 00002F38 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19703 00002F3C AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19704 00002F3D 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19705 00002F41 5E                      	pop	si
 19706                                  %endif
 19707                                  
 19708                                  	; MSDOS 6.0
 19709                                  ;; File Tagging
 19710 00002F42 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19711                                  				  ;LB. if already dirty		    ;AN000;
 19712 00002F47 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19713                                  	; 02/06/2019
 19714 00002F49 E8E62A                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19715                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19716                                  	;or	byte [es:bx+5],40h
 19717 00002F4C 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19718                                  yesdirty4:
 19719 00002F51 1E                      	push	ds
 19720 00002F52 56                      	push	si
 19721                                  	; MSDOS 6.0
 19722                                  	;mov	cx,[si+0Bh]
 19723                                  	; 07/12/2022
 19724 00002F53 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19725                                  ;hkn; SS override
 19726 00002F56 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19727                                  	; MSDOS 3.3 
 19728                                  	;push	ss
 19729                                  	;pop	ds
 19730                                  	;MOV	AL,[THISDRV]
 19731                                  ;;; 10/1/86  update fastopen cache
 19732                                  	; MSDOS 3.3 & MSDOS 6.0
 19733 00002F5A 52                      	PUSH	DX
 19734 00002F5B B400                    	MOV	AH,0			; dir entry update
 19735 00002F5D 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19736                                  	; MSDOS 6.0
 19737 00002F5F 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19738 00002F61 750D                    	JNZ	short do_update2	;AN005; no, do update
 19739 00002F63 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19740                                  	;mov	di,[si+1Bh]
 19741 00002F65 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19742                                  	;mov	cx,[si+1Dh]
 19743 00002F68 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19744                                  	;mov	dh,[si+1Fh]
 19745 00002F6B 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19746 00002F6E EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19747                                  do_update2:				;AN011;F.O.
 19748                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19749                                  	; 
 19750 00002F70 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19751 00002F75 7407                    	JZ	short do_update		;AN011;F.O. yes
 19752 00002F77 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19753 00002F79 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19754                                  do_update:				;AN005;
 19755                                  ;hkn; SS is DOSDATA
 19756                                  	;Context DS
 19757 00002F7E 16                      	push	ss
 19758 00002F7F 1F                      	pop	ds
 19759                                  	; MSDOS 3.3 & MSDOS 6.0
 19760 00002F80 E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19761 00002F83 5A                      	POP	DX
 19762                                  
 19763                                  ;;; 10/1/86  update fastopen cache
 19764 00002F84 E8A929                  	call	FLUSHBUF		; flush all relevant buffers
 19765 00002F87 5F                      	pop	di
 19766 00002F88 07                      	pop	es
 19767                                  	;mov	al,5
 19768 00002F89 B005                    	MOV	AL,error_access_denied
 19769 00002F8B 7201                    	JC	short CloseFinish
 19770                                  FREE_SFT_OK:
 19771 00002F8D F8                      	CLC				; signal no error.
 19772                                  CloseFinish:
 19773                                  
 19774                                  ; Indicate to the device that the SFT is being closed.
 19775                                  
 19776                                  ;;;; 7/21/86
 19777 00002F8E 9C                      	PUSHF				; save flag from DirFromSFT
 19778 00002F8F E85D15                  	call	DEV_CLOSE_SFT
 19779 00002F92 9D                      	POPF
 19780                                  ;;;; 7/21/86
 19781                                  ;
 19782                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19783                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19784                                  ; going to be moving from busy to free.
 19785                                  ;
 19786 00002F93 59                      	POP	CX			; get old ref count
 19787 00002F94 9C                      	PUSHF
 19788                                  	; 03/02/2024
 19789                                  	;DEC	CX			; if cx != 1
 19790                                  	;JNZ	short NoFree		; then do NOT free SFT
 19791 00002F95 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19792                                  
 19793 00002F97 26890D                  	mov	[es:di],cx ; 0
 19794                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19795                                  NoFree:
 19796 00002F9A E870E3                  	call	LCritDisk
 19797 00002F9D 9D                      	POPF
 19798 00002F9E C3                      	retn
 19799                                  
 19800                                  ;---------------------------------------------------------------------------
 19801                                  ;
 19802                                  ; Procedure Name : FREE_SFT
 19803                                  ;
 19804                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19805                                  ; Flags preserved. Return old ref count in AX
 19806                                  ;
 19807                                  ; Note that busy is indicated by the SFT ref count being -1.
 19808                                  ;
 19809                                  ;---------------------------------------------------------------------------
 19810                                  
 19811                                  FREE_SFT:
 19812 00002F9F 9C                      	PUSHF		; Save carry state
 19813 00002FA0 268B05                  	mov	ax,[es:di]
 19814                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19815 00002FA3 48                      	DEC	AX
 19816 00002FA4 7501                    	JNZ	short SetCount
 19817 00002FA6 48                      	DEC	AX
 19818                                  SetCount:
 19819 00002FA7 268705                  	xchg	ax,[es:di]
 19820                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19821 00002FAA 9D                      	POPF
 19822 00002FAB C3                      	retn
 19823                                  
 19824                                  	; 18/05/2019 - Retro DOS v4.0
 19825                                  
 19826                                  ;----------------------------------------------------------------------------
 19827                                  ;
 19828                                  ; Procedure Name : DirFromSFT
 19829                                  ;
 19830                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19831                                  ;
 19832                                  ;   Inputs:	ES:DI point to SFT
 19833                                  ;		DS = DOSDATA
 19834                                  ;   Outputs:
 19835                                  ;		EXTERR_LOCUS = errLOC_Disk
 19836                                  ;		CurBuf points to buffer
 19837                                  ;		Carry Clear -> operation OK
 19838                                  ;		    ES:DI point to entry
 19839                                  ;		    ES:BX point to buffer
 19840                                  ;		    DS:SI point to SFT
 19841                                  ;		Carry SET   -> operation failed
 19842                                  ;		    registers trashified
 19843                                  ;   Registers modified: ALL
 19844                                  ;----------------------------------------------------------------------------
 19845                                  
 19846                                  DirFromSFT:
 19847                                  	;mov	byte [EXTERR_LOCUS],2
 19848 00002FAC C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19849 00002FB1 06                      	push	es
 19850 00002FB2 57                      	push	di
 19851                                  	; MSDOS 3.3
 19852                                  	;;mov	dx,[es:di+1Dh]
 19853                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19854                                  	; MSDOS 6.0
 19855                                  	;mov	dx,[es:[di+1Dh]
 19856 00002FB3 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19857 00002FB7 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19858                                  	; 04/02/2024
 19859 00002FBB 52                      	push	dx
 19860                                  	;mov	dx,[es:di+1Bh]
 19861 00002FBC 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19862                                  	; 04/02/2024
 19863                                  	; 19/05/2019
 19864                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19865                                  	; MSDOS 3.3 & MSDOS 6.0
 19866 00002FC0 52                      	PUSH	DX
 19867 00002FC1 E8E925                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19868                                  					; [THISDPB] set
 19869 00002FC4 5A                      	POP	DX
 19870 00002FC5 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19871 00002FC9 721E                    	JC	short PopDone
 19872                                  	; 22/09/2023
 19873                                  	;XOR	AL,AL	; *		; Pre read
 19874                                  	;;mov	byte [ALLOWED],18h
 19875                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19876                                  	;call	GETBUFFR
 19877                                  	; 22/09/2023
 19878 00002FCB E85E28                  	call	GETBUFFER ; * 		; Pre read
 19879 00002FCE 7219                    	JC	short PopDone
 19880 00002FD0 5E                      	pop	si
 19881 00002FD1 1F                      	pop	ds			; Get back SFT pointer
 19882                                  
 19883                                  ;hkn; SS override
 19884 00002FD2 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19885                                  	;or	byte [es:di+5],4
 19886 00002FD7 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19887 00002FDC 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19888                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19889                                  	;lea	di,[di+20] ; MSDOS 6.0
 19890 00002FDE 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19891                                  	;mov	al,32
 19892 00002FE1 B020                    	MOV	AL,dir_entry.size
 19893                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19894 00002FE3 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19895 00002FE6 01C7                    	ADD	DI,AX			; Point at the entry
 19896 00002FE8 C3                      	retn				; carry is clear
 19897                                  PopDone:
 19898 00002FE9 5F                      	pop	di
 19899 00002FEA 07                      	pop	es
 19900                                  PopDone_retn:
 19901 00002FEB C3                      	retn
 19902                                  
 19903                                  ;----------------------------------------------------------------------------
 19904                                  ;
 19905                                  ;**	DOS_Commit - UPdate Directory Entries
 19906                                  ;
 19907                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19908                                  ;		(DS) = DOSGROUP
 19909                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19910                                  ;	USES	all but DS
 19911                                  ;
 19912                                  ;----------------------------------------------------------------------------
 19913                                  
 19914                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19915                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19916                                  
 19917                                  DOS_COMMIT:
 19918                                  	;hkn; called from srvcall. DS already set up.
 19919 00002FEC C43E[9E05]              	LES	DI,[THISSFT]
 19920                                  	;mov	bx,[es:di+5]
 19921 00002FF0 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19922                                  	;test	bx,0C0h
 19923                                  	; 17/12/2022
 19924 00002FF4 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19925                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19926 00002FF7 75F2                    	jnz	short PopDone_retn
 19927                                  	;test	bx,8000h
 19928                                  	; 17/12/2022
 19929                                  	;test	bh,80h
 19930 00002FF9 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19931                                  	;TEST	BX,sf_isnet ; 8000h
 19932 00002FFC 7406                    	JZ	short LOCAL_COMMIT
 19933                                  
 19934                                  ;IF NOT Installed
 19935                                  ;	transfer NET_COMMIT
 19936                                  ;ELSE
 19937                                  	;mov	ax,1107h
 19938 00002FFE B80711                  	MOV	AX,(MultNET<<8)|7
 19939 00003001 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19940                                  			; ES:DI -> SFT
 19941                                  			; SFT DPB field -> DPB of drive containing file
 19942                                  			; Return: CF set on error, AX = DOS error code
 19943                                  			; CF clear if successful
 19944                                  localcommit_retn: ; 18/12/2022	
 19945 00003003 C3                      	retn
 19946                                  ;ENDIF
 19947                                  
 19948                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19949                                  ; There are three ways we can do this. One is to enter a critical section to
 19950                                  ; protect a potential free. The second is to increment the ref count to mask
 19951                                  ; the close decrementing.
 19952                                  ;
 19953                                  ; The proper way is to let the caller's of close decide if a decrement should
 19954                                  ; be done. We do this by providing another entry into close after the
 19955                                  ; decrement and after the share information release.
 19956                                  
 19957                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19958                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19959                                  
 19960                                  LOCAL_COMMIT:
 19961 00003004 E8EBE2                  	call	ECritDisk
 19962                                  	; MSDOS 6.0
 19963 00003007 E8E8E2                  	call	ECritDisk	;PTM.
 19964 0000300A E80E00                  	call	SetSFTTimes
 19965 0000300D B8FFFF                  	MOV	AX,-1
 19966 00003010 E8BCFE                  	call	CloseEntry
 19967                                  	; MSDOS 6.0
 19968 00003013 9C                      	PUSHF			;PTM.				;AN000;
 19969 00003014 E8D014                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19970 00003017 9D                      	POPF			;PTM.				;AN000;
 19971                                  	;call	LCritDisk	;PTM.				;AN000;
 19972                                  	; 18/12/2022
 19973 00003018 E9F2E2                  	jmp	LCritDisk
 19974                                  ;localcommit_retn:
 19975                                  ;	retn
 19976                                  
 19977                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19978                                  ;----------------------------------------------------------------------------
 19979                                  ;
 19980                                  ; Procedure Name : SetSFTTimes
 19981                                  ;
 19982                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19983                                  ;   Reflect these times in other SFT's for the same file.
 19984                                  ;
 19985                                  ;   Inputs:	ES:DI point to SFT
 19986                                  ;		BX = sf_flags set apprpriately
 19987                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19988                                  ;   Registers modified: All except ES:DI, BX, AX
 19989                                  ;
 19990                                  ;----------------------------------------------------------------------------
 19991                                  
 19992                                  	; 04/02/2024 - Retro DOS v4.1
 19993                                  
 19994                                  SetSFTTimes:
 19995                                  
 19996                                  ; 04/02/2024
 19997                                  %if 0
 19998                                  ;	File clean or device does not get stamped nor disk looked at.
 19999                                  	
 20000                                  	;test	bx,0C0h
 20001                                  	; 17/12/2022
 20002                                  	test	bl,devid_file_clean+devid_device
 20003                                  	;TEST	BX,devid_file_clean+devid_device
 20004                                  	;retnz				; clean or device => no timestamp
 20005                                  	jnz	short localcommit_retn
 20006                                  
 20007                                  ;	file and dirty. See if date is good
 20008                                  
 20009                                  	;test	bx,4000h
 20010                                  	; 17/12/2022
 20011                                  	;test	bh,40h
 20012                                  	test	bh,(sf_close_nodate>>8)
 20013                                  	;TEST	BX,sf_close_nodate
 20014                                  	;retnz				; nodate => no timestamp
 20015                                  	jnz	short localcommit_retn
 20016                                  %else
 20017                                  	; 04/02/2024
 20018                                  	; (PCDOS 7.1 IBMDOS.COM)
 20019                                  	;test	bx,40C0h
 20020 0000301B F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20021 0000301F 75E2                    	jnz	short localcommit_retn
 20022                                  %endif
 20023                                  
 20024 00003021 50                      	push	ax
 20025 00003022 53                      	push	bx
 20026 00003023 E8BFDA                  	call	DATE16			; Date/Time to AX/DX
 20027                                  	;mov	[es:di+0Fh],ax
 20028 00003026 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20029                                  	;mov	[es:di+0Dh],dx
 20030 0000302A 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20031 0000302E 31C0                    	XOR	AX,AX
 20032                                  ;if installed
 20033                                  	;call	JShare + 14 * 4
 20034 00003030 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20035                                  ;else
 20036                                  ;	call	ShSU
 20037                                  ;endif
 20038 00003034 5B                      	pop	bx
 20039 00003035 58                      	pop	ax
 20040 00003036 C3                      	retn
 20041                                  
 20042                                  ;============================================================================
 20043                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20044                                  ;============================================================================
 20045                                  ; 23/07/2018 - Retro DOS v3.0
 20046                                  ; 18/05/2019 - Retro DOS v4.0
 20047                                  
 20048                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20049                                  
 20050                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20051                                  ;NAME  DIRCALL
 20052                                  
 20053                                  ;**	Low level directory manipulation routines for making removing and
 20054                                  ;	  verifying local or NET directories
 20055                                  ;
 20056                                  ;	DOS_MKDIR
 20057                                  ;	DOS_CHDIR
 20058                                  ;	DOS_RMDIR
 20059                                  ;
 20060                                  ;	Modification history:
 20061                                  ;
 20062                                  ;		Created: ARR 30 March 1983
 20063                                  
 20064                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20065                                  ;---------------------------------------------------------------------------
 20066                                  ;
 20067                                  ; Procedure Name : DOS_MkDir
 20068                                  ;
 20069                                  ; Inputs:
 20070                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20071                                  ;		terminated)
 20072                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20073                                  ;		( = -1 if current dir not involved, else
 20074                                  ;		 Points to first char after last "/" of current dir part)
 20075                                  ;	[THISCDS] Points to CDS being used
 20076                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20077                                  ; Function:
 20078                                  ;	Make a new directory
 20079                                  ; Returns:
 20080                                  ;	Carry Clear
 20081                                  ;		No error
 20082                                  ;	Carry Set
 20083                                  ;	    AX is error code
 20084                                  ;		error_path_not_found
 20085                                  ;			Bad path (not in curr dir part if present)
 20086                                  ;		error_bad_curr_dir
 20087                                  ;			Bad path in current directory part of path
 20088                                  ;		error_access_denied
 20089                                  ;			Already exists, device name
 20090                                  ; DS preserved, Others destroyed
 20091                                  ;---------------------------------------------------------------------------
 20092                                  
 20093                                  ;hkn; called from path.asm. DS already set up.
 20094                                  
 20095                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20096                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20097                                  
 20098                                  ; 04/02/2024 - Retro DOS v4.1
 20099                                  
 20100                                  DOS_MKDIR:
 20101 00003037 E8F6E1                  	call	TestNet
 20102 0000303A 7313                    	JNC	short LOCAL_MKDIR
 20103                                  
 20104                                  ;IF NOT Installed
 20105                                  ;	transfer NET_MKDIR
 20106                                  ;ELSE
 20107                                  	;mov	ax,1103h
 20108 0000303C B80311                  	MOV	AX,(MultNET<<8)|3
 20109 0000303F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20110                                  			; SS = DOS CS
 20111                                  			; SDA first filename pointer -> fully-qualified directory name
 20112                                  			; SDA CDS pointer -> current directory
 20113                                  			; Return: CF set on error, AX = DOS error code
 20114                                  			; CF clear if successful
 20115 00003041 C3                      	retn
 20116                                  ;ENDIF
 20117                                  
 20118                                  NODEACCERRJ:
 20119                                  	;mov	ax,5
 20120 00003042 B80500                  	MOV	AX,error_access_denied
 20121                                  _BadRet:
 20122 00003045 F9                      	STC
 20123                                  	;call	LCritDisk
 20124                                  	;retn
 20125                                  	; 18/12/2022
 20126 00003046 E9C4E2                  	jmp	LCritDisk
 20127                                  
 20128                                  PATHNFJ:
 20129 00003049 E8C1E2                  	call	LCritDisk
 20130 0000304C E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20131                                  
 20132                                  LOCAL_MKDIR:
 20133 0000304F E8A0E2                  	call	ECritDisk
 20134                                  
 20135                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20136                                  
 20137 00003052 8C16[A005]              	MOV	[THISSFT+2],SS
 20138                                  
 20139                                  ;hkn; DOSDATA
 20140 00003056 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20141                                  
 20142                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20143                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20144                                  
 20145                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20146 0000305C C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20147                                  				; make sure SHARER won't complain.
 20148                                  	;mov	al,10h
 20149 00003062 B010                    	MOV	AL,attr_directory
 20150 00003064 E82618                  	call	MakeNode
 20151 00003067 72E0                    	JC	short PATHNFJ
 20152 00003069 83F803                  	CMP	AX,3
 20153 0000306C 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20154 0000306E C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20155 00003072 C53E[E205]              	LDS	DI,[CURBUF]
 20156 00003076 29FE                    	SUB	SI,DI
 20157 00003078 56                      	PUSH	SI		; Pointer to dir_first
 20158                                  
 20159                                  ; 04/02/2024
 20160                                  %if 0
 20161                                  	; MSDOS 6.0
 20162                                  	;push	word [DI+8]
 20163                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20164                                  	; MSDOS 3.3 & MSDOS 6.0
 20165                                  	;push	word [di+6]
 20166                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20167                                  %else
 20168                                  	; 04/02/2024
 20169                                  	; (PCDOS 7.1 IBMDOS.COM)
 20170 00003079 C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20171 0000307C 1E                      	push	ds
 20172 0000307D 50                      	push	ax
 20173                                  %endif
 20174                                  
 20175 0000307E 16                      	push	ss
 20176 0000307F 1F                      	pop	ds
 20177                                  
 20178                                  	; 04/02/2024
 20179                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20180 00003080 31C0                    	XOR	AX,AX
 20181                                  	;MOV	[DIRSTART],AX	; Null directory
 20182 00003082 8706[C205]              	xchg	ax,[DIRSTART]
 20183 00003086 50                      	push	ax
 20184                                  
 20185 00003087 E84017                  	call	NEWDIR
 20186 0000308A 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20187 0000308C E81B0D                  	call	GETENT		; First entry
 20188 0000308F 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20189 00003091 C43E[E205]              	LES	DI,[CURBUF]
 20190                                  
 20191                                  	; MSDOS 6.0
 20192 00003095 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20193                                  				 ;LB. if already dirty		    ;AN000;
 20194 0000309A 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20195 0000309C E89329                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20196                                  	
 20197                                  	; MSDOS 3.3 & MSDOS 6.0
 20198                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20199 0000309F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20200                                  yesdirty5:
 20201                                  	;;add	di,16 ; MSDOS 3.3
 20202                                  	;add	di,20 ; MSDOS 6.0
 20203 000030A4 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20204 000030A7 B82E20                  	MOV	AX,202EH	; ". "
 20205 000030AA 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20206 000030AE E8B917                  	call	SETDOTENT
 20207 000030B1 B82E2E                  	MOV	AX,2E2EH	; ".."
 20208 000030B4 5A                      	POP	DX		; Parent
 20209 000030B5 E8B217                  	call	SETDOTENT
 20210 000030B8 C42E[8A05]              	LES	BP,[THISDPB]
 20211                                  	; 22/09/2023
 20212                                  	;;mov	byte [ALLOWED],18h
 20213                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20214 000030BC 5A                      	POP	DX		; Entry sector
 20215                                  	; MSDOS 6.0
 20216 000030BD 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20217                                  
 20218                                  	;XOR	AL,AL ; *	; Pre read
 20219                                  	;call	GETBUFFR
 20220                                  	; 22/09/2023
 20221 000030C1 E86827                  	call	GETBUFFER ; *	 ;Pre read
 20222 000030C4 725B                    	JC	short NODEEXISTSP
 20223 000030C6 8B16[C205]              	MOV	DX,[DIRSTART]
 20224 000030CA C53E[E205]              	LDS	DI,[CURBUF]
 20225                                  	;or	byte [di+5],4
 20226 000030CE 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20227 000030D2 5E                      	POP	SI		; dir_first pointer
 20228 000030D3 01FE                    	ADD	SI,DI
 20229 000030D5 8914                    	MOV	[SI],DX
 20230 000030D7 31D2                    	XOR	DX,DX
 20231 000030D9 895402                  	MOV	[SI+2],DX	; Zero size
 20232 000030DC 895404                  	MOV	[SI+4],DX
 20233                                  DIRUP:
 20234                                  	; MSDOS 6.0
 20235 000030DF F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20236                                  	;			 ;LB. if already dirty 		   ;AN000;
 20237 000030E3 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20238 000030E5 E84A29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20239                                  	
 20240                                  	; MSDOS 3.3 & MSDOS 6.0
 20241                                  	;or	byte [di+5],40h
 20242 000030E8 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20243                                  yesdirty6:
 20244 000030EC 16                      	push	ss
 20245 000030ED 1F                      	pop	ds
 20246 000030EE 268A4600                	mov	al,[es:bp]
 20247                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20248 000030F2 E83B28                  	call	FLUSHBUF
 20249                                  	;mov	ax,5
 20250 000030F5 B80500                  	MOV	AX,error_access_denied
 20251                                  	;call	LCritDisk
 20252                                  	;retn
 20253                                  	; 18/12/2022
 20254 000030F8 E912E2                  	jmp	LCritDisk
 20255                                  
 20256                                  NODEEXISTSPOPDEL:
 20257 000030FB 5A                      	POP	DX		; Parent
 20258 000030FC 5A                      	POP	DX		; Entry sector
 20259                                  	; MSDOS 6.0 
 20260 000030FD 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20261 00003101 C42E[8A05]              	LES	BP,[THISDPB]
 20262                                  	; 22/09/2023
 20263                                  	;;mov	byte [ALLOWED],18h
 20264                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20265                                  	;XOR	AL,AL ; *	; Pre read
 20266                                  	;call	GETBUFFR
 20267                                  	; 22/09/2023
 20268 00003105 E82427                  	call	GETBUFFER ; *	; Pre read
 20269 00003108 7217                    	JC	short NODEEXISTSP
 20270 0000310A C53E[E205]              	LDS	DI,[CURBUF]
 20271                                  	;or	byte [di+5],4
 20272 0000310E 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20273 00003112 5E                      	POP	SI		; dir_first pointer
 20274 00003113 01FE                    	ADD	SI,DI
 20275                                  	;sub	si,1Ah ; 26
 20276 00003115 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20277 00003118 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20278 0000311B E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20279                                  NODEEXISTS:
 20280 0000311E E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20281                                  
 20282                                  NODEEXISTSP:
 20283 00003121 5E                      	POP	SI		; Clean stack
 20284 00003122 EBFA                    	JMP	short NODEEXISTS
 20285                                  
 20286                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20287                                  
 20288                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20289                                  ;----------------------------------------------------------------------------
 20290                                  ;
 20291                                  ; Procedure Name : DOS_ChDir
 20292                                  ;
 20293                                  ; Inputs:
 20294                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20295                                  ;		terminated)
 20296                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20297                                  ;		( = -1 if current dir not involved, else
 20298                                  ;		 Points to first char after last "/" of current dir part)
 20299                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20300                                  ; Function:
 20301                                  ;	Validate the path for potential new current directory
 20302                                  ; Returns:
 20303                                  ;	NOTE:
 20304                                  ;	    [SATTRIB] is modified by this call
 20305                                  ;	Carry Clear
 20306                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20307                                  ;		Caller must NOT set ID fields on a NET CDS.
 20308                                  ;	Carry Set
 20309                                  ;	    AX is error code
 20310                                  ;		error_path_not_found
 20311                                  ;			Bad path
 20312                                  ;		error_access_denied
 20313                                  ;			device or file name
 20314                                  ; DS preserved, Others destroyed
 20315                                  ;----------------------------------------------------------------------------
 20316                                  
 20317                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20318                                  
 20319                                  ; 18/05/2019 - Retro DOS v4.0
 20320                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20321                                  
 20322                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20323                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20324                                  
 20325                                  DOS_CHDIR:
 20326 00003124 E809E1                  	call	TestNet
 20327 00003127 7306                    	JNC	short LOCAL_CHDIR
 20328                                  
 20329                                  ;IF NOT Installed
 20330                                  ;	transfer NET_CHDIR
 20331                                  ;ELSE
 20332                                  	;mov	ax,1105h
 20333 00003129 B80511                  	MOV	AX,(MultNET<<8)|5
 20334 0000312C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20335                                  			; SS = DOS CS
 20336                                  			; SDA first filename pointer -> fully-qualified directory name
 20337                                  			; SDA CDS pointer -> current directory
 20338                                  			; Return: CF set on error, AX = DOS error code
 20339                                  			; CF clear if successful
 20340 0000312E C3                      	retn
 20341                                  ;ENDIF
 20342                                  
 20343                                  LOCAL_CHDIR:
 20344 0000312F E8C0E1                  	call	ECritDisk
 20345                                  	; MSDOS 6.0
 20346                                  	;;test	word [es:di+43h],2000h
 20347                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20348                                  	; 17/12/2022
 20349                                  	;test	byte [es:di+44h],20h
 20350 00003132 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20351 00003137 7406                    	JZ	short nojoin		   ;PTM.
 20352                                  	;mov	word [es:di+49h], 0FFFFh
 20353 00003139 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20354                                  nojoin:
 20355                                  	; MSDOS 3.3 & MSDOS 6.0
 20356 0000313F C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20357                                  	;mov	byte [SATTRIB],16h
 20358 00003144 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20359                                  				; Dir calls can find these
 20360                                  ; DOS 3.3  6/24/86 FastOpen
 20361 00003149 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20362 0000314E E8E30C                  	call	GETPATH
 20363                                  	
 20364                                  	; 04/02/2024
 20365                                  	;PUSHF						;AN000;
 20366 00003151 9F                      	lahf						
 20367 00003152 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20368                                  	;POPF						;AN000;
 20369 00003157 9E                      	sahf
 20370                                  
 20371                                  ; DOS 3.3  6/24/86 FastOpen
 20372                                  
 20373                                  	; MSDOS 3.3
 20374                                  	;mov	byte [FastOpenFlg],0
 20375                                  	
 20376                                  	;mov	ax,3
 20377 00003158 B80300                  	MOV	AX,error_path_not_found
 20378 0000315B 7207                    	JC	short ChDirDone
 20379 0000315D 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20380 0000315F 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20381 00003163 F8                      	CLC
 20382                                  ChDirDone:
 20383                                  	;call	LCritDisk
 20384                                  	;retn
 20385                                  	; 18/12/2022
 20386 00003164 E9A6E1                  	jmp	LCritDisk
 20387                                  
 20388                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20389                                  ;----------------------------------------------------------------------------
 20390                                  ;
 20391                                  ; Procedure Name : DOS_RmDir
 20392                                  ;
 20393                                  ; Inputs:
 20394                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20395                                  ;		terminated)
 20396                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20397                                  ;		( = -1 if current dir not involved, else
 20398                                  ;		 Points to first char after last "/" of current dir part)
 20399                                  ;	[THISCDS] Points to CDS being used
 20400                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20401                                  ; Function:
 20402                                  ;	Remove a directory
 20403                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20404                                  ; Returns:
 20405                                  ;	NOTE:
 20406                                  ;	    [SATTRIB] is modified by this call
 20407                                  ;	Carry Clear
 20408                                  ;		No error
 20409                                  ;	Carry Set
 20410                                  ;	    AX is error code
 20411                                  ;		error_path_not_found
 20412                                  ;			Bad path (not in curr dir part if present)
 20413                                  ;		error_bad_curr_dir
 20414                                  ;			Bad path in current directory part of path
 20415                                  ;		error_access_denied
 20416                                  ;			device or file name, root directory
 20417                                  ;			Bad directory ('.' '..' messed up)
 20418                                  ; DS preserved, Others destroyed
 20419                                  ;----------------------------------------------------------------------------
 20420                                  
 20421                                  ;hkn; called from path.asm. DS already set up.
 20422                                  
 20423                                  ; 18/05/2019 - Retro DOS v4.0
 20424                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20425                                  
 20426                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20427                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20428                                  
 20429                                  DOS_RMDIR:
 20430 00003167 E8C6E0                  	call	TestNet
 20431 0000316A 7306                    	JNC	short LOCAL_RMDIR
 20432                                  
 20433                                  ;IF NOT Installed
 20434                                  ;	transfer NET_RMDIR
 20435                                  ;ELSE
 20436                                  	;mov	ax,1101h
 20437 0000316C B80111                  	MOV	AX,(MultNET<<8)|1
 20438 0000316F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20439                                  			; SS = DOS CS
 20440                                  			; SDA first filename pointer -> fully-qualified directory name
 20441                                  			; SDA CDS pointer -> current directory
 20442                                  			; Return: CF set on error, AX = DOS error code
 20443                                  			; CF clear if successful
 20444 00003171 C3                      	retn
 20445                                  ;ENDIF
 20446                                  
 20447                                  LOCAL_RMDIR:
 20448 00003172 E87DE1                  	call	ECritDisk
 20449 00003175 C606[4C03]00            	MOV	byte [NoSetDir],0
 20450                                  	;mov	byte [SATTRIB],16h
 20451 0000317A C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20452                                  					; Dir calls can find these
 20453 0000317F E8B20C                  	call	GETPATH
 20454 00003182 720C                    	JC	short NOPATH		; Path not found
 20455 00003184 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20456 00003186 8B3E[C205]              	MOV	DI,[DIRSTART]
 20457 0000318A 09FF                    	OR	DI,DI			; Root ?
 20458 0000318C 750E                    	JNZ	short rmdir_get_buf	; No
 20459 0000318E EB09                    	JMP	SHORT NOTDIRPATH
 20460                                  
 20461                                  NOPATH:
 20462                                  	;mov	ax,3
 20463 00003190 B80300                  	MOV	AX,error_path_not_found
 20464 00003193 E9AFFE                  	JMP	_BadRet
 20465                                  
 20466                                  NOTDIRPATHPOP:
 20467 00003196 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20468 00003197 58                      	POP	AX
 20469                                  NOTDIRPATHPOP2:
 20470 00003198 58                      	POP	AX
 20471                                  NOTDIRPATH:
 20472 00003199 E9A6FE                  	JMP	NODEACCERRJ
 20473                                  
 20474                                  rmdir_get_buf:
 20475 0000319C C53E[E205]              	LDS	DI,[CURBUF]
 20476 000031A0 29FB                    	SUB	BX,DI		; Compute true offset
 20477 000031A2 53                      	PUSH	BX		; Save entry pointer
 20478                                  	
 20479                                  	; MSDOS 6.0
 20480                                  	;push	word [di+8]
 20481 000031A3 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20482                                  	
 20483                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20484                                  	;push	word [di+6]
 20485 000031A6 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20486                                  
 20487                                  ;hkn; SS is DOSDATA
 20488                                  	;context DS
 20489 000031A9 16                      	push	ss
 20490 000031AA 1F                      	pop	ds
 20491                                  	;context ES
 20492 000031AB 16                      	push	ss
 20493 000031AC 07                      	pop	es
 20494                                  
 20495                                  ;hkn; NAME1 is in DOSDATA
 20496 000031AD BF[4B05]                	MOV	DI,NAME1
 20497 000031B0 B03F                    	MOV	AL,'?'
 20498 000031B2 B90B00                  	MOV	CX,11
 20499 000031B5 F3AA                    	REP	STOSB
 20500 000031B7 30C0                    	XOR	AL,AL
 20501 000031B9 AA                      	STOSB				; Nul terminate it
 20502 000031BA E8FA0E                  	call	STARTSRCH		; Set search
 20503 000031BD E8E70B                  	call	GETENTRY		; Get start of directory
 20504 000031C0 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20505 000031C2 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20506 000031C6 89DE                    	MOV	SI,BX
 20507 000031C8 AD                      	LODSW
 20508                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20509 000031C9 3D2E20                  	cmp	ax,202Eh ; ". "
 20510 000031CC 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20511                                  	;add	si,30
 20512 000031CE 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20513 000031D1 AD                      	LODSW
 20514                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20515                                  	;cmp	ax, '..'
 20516 000031D2 3D2E2E                  	cmp	ax,2E2Eh
 20517 000031D5 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20518                                  
 20519                                  ;hkn; SS is DOSDATA
 20520                                  	;context DS
 20521 000031D7 16                      	push	ss
 20522 000031D8 1F                      	pop	ds
 20523 000031D9 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20524 000031DF E8C50B                  	call	GETENTRY		; Get next entry
 20525 000031E2 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20526                                  	;mov	byte [ATTRIB],16h
 20527 000031E4 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20528 000031E9 E8C50A                  	call	SRCH			; Do a search
 20529 000031EC 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20530 000031EE 803E[4A03]00            	CMP	byte [FAILERR],0
 20531 000031F3 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20532 000031F5 C42E[8A05]              	LES	BP,[THISDPB]
 20533 000031F9 8B1E[C205]              	MOV	BX,[DIRSTART]
 20534 000031FD E8B51B                  	call	RELEASE 		; Release data in sub dir
 20535 00003200 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20536 00003202 5A                      	POP	DX			; Sector # of entry
 20537 00003203 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20538                                  	; 22/09/2023
 20539                                  	;;mov	byte [ALLOWED],18h
 20540                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20541                                  	;XOR	AL,AL ; *		; Pre read
 20542                                  	;call	GETBUFFR		; Get sector back
 20543 00003207 E82226                  	call	GETBUFFER ; *		; Pre Read
 20544 0000320A 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20545 0000320C C53E[E205]              	LDS	DI,[CURBUF]
 20546                                  	;or	byte [di+5],4
 20547 00003210 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20548 00003214 5B                      	POP	BX			; Pointer to start of entry
 20549 00003215 01FB                    	ADD	BX,DI			; Corrected
 20550 00003217 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20551                                  
 20552                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20553 0000321A 1E                      	PUSH	DS
 20554                                  
 20555                                  ;hkn; SS is DOSDATA
 20556                                  	;context DS
 20557 0000321B 16                      	push	ss
 20558 0000321C 1F                      	pop	ds
 20559                                  
 20560                                  	; MSDOS 6.0
 20561 0000321D E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20562                                  
 20563                                  ;	; MSDOS 3.3
 20564                                  ;_FastOpen_Delete:
 20565                                  ;	push	ax
 20566                                  ;	mov	si,[WFP_START]
 20567                                  ;	mov	bx,FastTable
 20568                                  ;	;mov	al,3  ; FONC_delete
 20569                                  ;	mov	al,FONC_delete
 20570                                  ;	call	far [BX+2]  ; FastTable+2
 20571                                  ;	pop	ax
 20572                                  
 20573 00003220 1F                      	POP	DS
 20574                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20575                                  
 20576 00003221 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20577                                  
 20578                                  ;============================================================================
 20579                                  ; DISK.ASM, MSDOS 6.0, 1991
 20580                                  ;============================================================================
 20581                                  ; 23/07/2018 - Retro DOS v3.0 
 20582                                  ; 04/05/2019 - Retro DOS v4.0
 20583                                  
 20584                                  ;	TITLE	DISK - Disk utility routines
 20585                                  ;	NAME	Disk
 20586                                  
 20587                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20588                                  ;
 20589                                  ;	SWAPCON
 20590                                  ;	SWAPBACK
 20591                                  ;	DOS_READ
 20592                                  ;	DOS_WRITE
 20593                                  ;	get_io_sft
 20594                                  ;	DirRead
 20595                                  ;	FIRSTCLUSTER
 20596                                  ;	SET_BUF_AS_DIR
 20597                                  ;	FATSecRd
 20598                                  ;	DREAD
 20599                                  ;	CHECK_WRITE_LOCK
 20600                                  ;	CHECK_READ_LOCK
 20601                                  ;
 20602                                  ;	Revision history:
 20603                                  ;
 20604                                  ;		A000   version 4.00  Jan. 1988
 20605                                  ;
 20606                                  ;----------------------------------------------------------------------------
 20607                                  ;
 20608                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20609                                  ;		error happens, DOS retries the entire block assuming that
 20610                                  ;		zero characters were transferred. Modified the code to take
 20611                                  ;		into account the number of characters transfered before
 20612                                  ;		retrying the operation.
 20613                                  ;
 20614                                  ;----------------------------------------------------------------------------
 20615                                  ;
 20616                                  
 20617                                  ;Installed = TRUE
 20618                                  
 20619                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20620                                  
 20621                                  ; **** Drivers for file input from devices ****
 20622                                  ;----------------------------------------------------------------------------
 20623                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20624                                  ;   of handles 0 and 1
 20625                                  ;
 20626                                  ;   Inputs:	DS is DOSDATA
 20627                                  ;   Outputs:	CONSWAP is set to false.
 20628                                  ;   Registers modified: none
 20629                                  ;----------------------------------------------------------------------------
 20630                                  
 20631                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20632                                  
 20633                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20634                                  ; 04/05/2019 - Retro DOS v4.0
 20635                                  
 20636                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20637                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20638                                  
 20639                                  SWAPBACK:
 20640 00003224 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20641 00003229 C3                      	retn
 20642                                  
 20643                                  ;----------------------------------------------------------------------------
 20644                                  ;
 20645                                  ; Procedure Name : SWAPCON
 20646                                  ;
 20647                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20648                                  ;
 20649                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20650                                  ;		DS is DOSDATA
 20651                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20652                                  ;   Registers modified: none
 20653                                  ;--------------------------------------------------------------------------
 20654                                  
 20655                                  SWAPCON:
 20656                                  	; MSDOS 3.3
 20657                                  	;push	es
 20658                                  	;push	di
 20659                                  	;mov	byte [CONSWAP],1
 20660                                  	;les	di,[THISSFT]
 20661                                  	;mov	word [CONSFT],di
 20662                                  	;mov	word [CONSFT+2],es
 20663                                  	;pop	di
 20664                                  	;pop	es
 20665                                  	;retn
 20666                                  
 20667                                  	; MSDOS 6.0
 20668 0000322A C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20669 0000322F 50                      	push	ax
 20670 00003230 A1[9E05]                	mov	ax,[THISSFT]
 20671 00003233 A3[E605]                	mov	[CONSFT],ax
 20672 00003236 A1[A005]                	mov	ax,[THISSFT+2]
 20673 00003239 A3[E805]                	mov	[CONSFT+2],ax
 20674 0000323C 58                      	pop	ax
 20675 0000323D C3                      	retn
 20676                                  
 20677                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20678                                  ; 04/05/2019 - Retro DOS v4.0
 20679                                  
 20680                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20681                                  ;-----------------------------------------------------------------------------
 20682                                  ;
 20683                                  ; Inputs:
 20684                                  ;	ThisSFT set to the SFT for the file being used
 20685                                  ;	[DMAADD] contains transfer address
 20686                                  ;	CX = No. of bytes to read
 20687                                  ;	DS = DOSDATA
 20688                                  ; Function:
 20689                                  ;	Perform read operation
 20690                                  ; Outputs:
 20691                                  ;    Carry clear
 20692                                  ;	SFT Position and cluster pointers updated
 20693                                  ;	CX = No. of bytes read
 20694                                  ;	ES:DI point to SFT
 20695                                  ;    Carry set
 20696                                  ;	AX is error code
 20697                                  ;	CX = 0
 20698                                  ;	ES:DI point to SFT
 20699                                  ; DS preserved, all other registers destroyed
 20700                                  ;
 20701                                  ;-----------------------------------------------------------------------------
 20702                                  
 20703                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20704                                  
 20705                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20706                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20707                                  
 20708                                  DOS_READ:
 20709 0000323E C43E[9E05]              	LES	DI,[THISSFT]
 20710                                  
 20711                                  ; Verify that the sft has been opened in a mode that allows reading.
 20712                                  
 20713                                  	;mov	al,[es:di+2]
 20714 00003242 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20715                                  	;and	al,0Fh
 20716 00003246 240F                    	AND	AL,access_mask
 20717                                  	;cmp	al,1
 20718 00003248 3C01                    	CMP	AL,open_for_write
 20719 0000324A 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20720 0000324C E9CE05                  	jmp	SET_ACC_ERR
 20721                                  
 20722                                  READ_NO_MODE:
 20723 0000324F E8B304                  	call	SETUP
 20724 00003252 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20725 00003254 E8F2DF                  	call	IsSFTNet
 20726 00003257 7408                    	JZ	short LOCAL_READ
 20727                                  
 20728                                  ;IF NOT Installed
 20729                                  ;	transfer NET_READ
 20730                                  ;ELSE
 20731                                  	;mov	ax,1108h
 20732 00003259 B80811                  	MOV	AX,(MultNET<<8)|8
 20733 0000325C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20734                                  			; ES:DI -> SFT
 20735                                  			; SFT DPB field -> DPB of drive containing file
 20736                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20737                                  			; Return: CF set on error, CX = bytes read
 20738 0000325E C3                      	retn
 20739                                  ;ENDIF
 20740                                  
 20741                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20742                                  ; except return immediately.
 20743                                  
 20744                                  NoIORet:
 20745 0000325F F8                      	CLC
 20746 00003260 C3                      	retn
 20747                                  
 20748                                  LOCAL_READ:
 20749                                  	;test	word [es:di+5],80h
 20750                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20751 00003261 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20752 00003266 750E                    	JNZ	short READDEV
 20753                                  
 20754                                  	;mov	byte [EXTERR_LOCUS],2
 20755 00003268 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20756 0000326D E882E0                  	call	ECritDisk
 20757 00003270 E86D05                  	call	DISKREAD
 20758                                  
 20759                                  critexit:
 20760                                  	;call	LCritDisk
 20761                                  	;retn
 20762                                  	; 16/12/2022
 20763 00003273 E997E0                  	jmp	LCritDisk
 20764                                  
 20765                                  ; We are reading from a device. Examine the status of the device to see if we
 20766                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20767                                  ; null device, we can safely indicate no transfer.
 20768                                  
 20769                                  READDEV:
 20770                                  	;mov	byte [EXTERR_LOCUS],4
 20771 00003276 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20772                                  	;mov	bl,[es:di+5]
 20773 0000327B 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20774 0000327F C43E[2C03]              	LES	DI,[DMAADD]
 20775                                  	;test	bl,40h
 20776 00003283 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20777 00003286 7407                    	JZ	short ENDRDDEVJ3
 20778                                  	;test	bl,4
 20779 00003288 F6C304                  	test	BL,devid_device_null	; NUL device?
 20780 0000328B 7405                    	JZ	short TESTRAW 		; NO
 20781 0000328D 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20782                                  ENDRDDEVJ3:
 20783                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20784                                  	;JMP	short ENDRDDEVJ2
 20785                                  	; 16/12/2022
 20786 0000328F E93F01                  	jmp	ENDRDDEV ; 04/05/2019
 20787                                  
 20788                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20789                                  ; bizarre std_con_string_input.
 20790                                  
 20791                                  TESTRAW:
 20792                                  	;test	bl,20h
 20793 00003292 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20794 00003295 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20795                                  	;test	bl,1
 20796 00003297 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20797 0000329A 7458                    	JZ	short NOTRDCON
 20798 0000329C E96701                  	JMP	READCON
 20799                                  
 20800                                  DVRDRAW:
 20801 0000329F 06                      	PUSH	ES
 20802 000032A0 1F                      	POP	DS			; Xaddr to DS:DI
 20803                                  
 20804                                  	; 04/05/2019 - Retro DOS v4.0
 20805                                  
 20806                                  	; MSDOS 6.0
 20807                                  ;SR;
 20808                                  ;Check for win386 presence -- if present, do polled read of characters
 20809                                  
 20810 000032A1 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20811 000032A7 7408                    	jz	short ReadRawRetry	;not present
 20812 000032A9 F6C301                  	test	bl,devid_device_con_in	;is it console device
 20813 000032AC 7403                    	jz	short ReadRawRetry	;no, do normal read
 20814 000032AE E9A800                  	jmp	do_polling		;yes, do win386 polling loop
 20815                                  
 20816                                  ReadRawRetry:
 20817                                  
 20818                                  ; 07/02/2024
 20819                                  %if 0
 20820                                  	MOV	BX,DI			; DS:BX transfer addr
 20821                                  	; 06/02/2024 ; *
 20822                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20823                                  	;;MOV	DX,AX			; Start at 0
 20824                                  	;; 06/02/2024
 20825                                  	;cwd
 20826                                  	;call	SETREAD
 20827                                  	; 06/02/2024 ; *
 20828                                  	call	SETREAD_X
 20829                                  %else
 20830 000032B1 E82713                  	call	SETREAD_XJ
 20831                                  %endif
 20832                                  
 20833 000032B4 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20834                                  
 20835                                  ;hkn; SS override
 20836 000032B5 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20837 000032BA E8A812                  	call	DEVIOCALL
 20838 000032BD 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20839 000032BF B486                    	MOV	AH,86H			; Read error
 20840                                  
 20841                                  ;hkn; SS override
 20842 000032C1 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20843                                  	; MSDOS 3.3
 20844                                  	;test	di,8000h
 20845                                  	;jz	short CRDROK
 20846                                  	; MSDOS 6.0
 20847 000032C6 09FF                    	or	di,di
 20848 000032C8 7920                    	jns	short CRDROK		; no errors
 20849                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20850 000032CA E8F11E                  	call	CHARHARD
 20851                                  
 20852                                  ; 06/02/2024 - Retrro DOS v5.0
 20853                                  %if 0
 20854                                  	MOV	DI,DX			; DS:DI is Xaddr
 20855                                  	; 04/05/2019
 20856                                  	; MSDOS 6.0
 20857                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20858                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20859                                  %else
 20860 000032CD 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20861 000032D2 29F9                    	sub	cx,di			; update transfer count
 20862 000032D4 01D7                    	add	di,dx			; update pointer
 20863                                  %endif
 20864                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20865 000032D6 08C0                    	OR	AL,AL
 20866 000032D8 7410                    	JZ	short CRDROK		; Ignore
 20867 000032DA 3C03                    	CMP	AL,3
 20868 000032DC 7403                    	JZ	short CRDFERR 		; fail.
 20869 000032DE 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20870 000032DF EBD0                    	JMP	short ReadRawRetry	; Retry
 20871                                  
 20872                                  ; We have encountered a device-driver error. We have informed the user of it
 20873                                  ; and he has said for us to fail the system call.
 20874                                  
 20875                                  CRDFERR:
 20876 000032E1 5F                      	POP	DI			; Clean stack
 20877                                  DEVIOFERR:
 20878                                  
 20879                                  ;hkn; SS override
 20880 000032E2 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20881 000032E7 E93105                  	jmp	SET_ACC_ERR_DS
 20882                                  
 20883                                  CRDROK:
 20884 000032EA 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20885 000032EB 89D7                    	MOV	DI,DX
 20886                                  
 20887                                  ;hkn; SS override
 20888 000032ED 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20889                                  	;JMP	SHORT ENDRDDEVJ3
 20890                                  	; 16/12/2022
 20891 000032F2 EB63                    	jmp	short ENDRDDEVJ2
 20892                                  
 20893                                  ; We are going to do a cooked read on some character device. There is a
 20894                                  ; problem here, what does the data look like? Is it a terminal device, line
 20895                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20896                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20897                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20898                                  ; included in data). this "simulates" the way con works in cooked mode
 20899                                  ; reading one line at a time. With file data, however, the lines will look
 20900                                  ; like, LF line CR. This is a little weird.
 20901                                  
 20902                                  NOTRDCON:
 20903                                  	;MOV	AX,ES
 20904                                  	;MOV	DS,AX
 20905                                  	; 07/02/2024
 20906 000032F4 06                      	push	es
 20907 000032F5 1F                      	pop	ds
 20908                                  
 20909                                  ; 07/02/2024
 20910                                  %if 0
 20911                                  	MOV	BX,DI
 20912                                  	; 06/02/2024 ; *
 20913                                  	;;XOR	DX,DX
 20914                                  	;;MOV	AX,DX
 20915                                  	;; 06/02/2024
 20916                                  	;xor	ax,ax
 20917                                  	;cwd
 20918                                  	PUSH	CX
 20919                                  	MOV	CX,1
 20920                                  	;call	SETREAD
 20921                                  	; 06/02/2024 ; *
 20922                                  	call	SETREAD_X
 20923                                  	POP	CX
 20924                                  %else
 20925 000032F6 51                      	push	cx
 20926 000032F7 B90100                  	mov	cx,1
 20927 000032FA E8DE12                  	call	SETREAD_XJ
 20928 000032FD 59                      	pop	cx
 20929                                  %endif
 20930                                  
 20931                                  ;hkn; SS override
 20932 000032FE 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20933                                  	;lds	si,[si+7]
 20934 00003303 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20935                                  DVRDLP:
 20936 00003306 E89A1C                  	call	DSKSTATCHK
 20937 00003309 E85C12                  	call	DEVIOCALL2
 20938 0000330C 57                      	PUSH	DI			; Save "count" done
 20939 0000330D B486                    	MOV	AH,86H
 20940                                  
 20941                                  ;hkn; SS override
 20942 0000330F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20943                                  	
 20944                                  	; MSDOS 3.3
 20945                                  	;test	di,8000h
 20946                                  	;jz	short CRDOK
 20947                                  	; MSDOS 6.0
 20948 00003314 09FF                    	or	di,di
 20949 00003316 7917                    	jns	short CRDOK
 20950                                  	
 20951 00003318 E8A31E                  	call	CHARHARD
 20952 0000331B 5F                      	POP	DI
 20953                                  
 20954                                  ;hkn; SS override
 20955 0000331C 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20956 00003323 3C01                    	CMP	AL,1
 20957 00003325 74DF                    	JZ	short DVRDLP		; Retry
 20958 00003327 3C03                    	CMP	AL,3
 20959 00003329 74B7                    	JZ	short DEVIOFERR		; FAIL
 20960 0000332B 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20961 0000332D EB12                    	JMP	SHORT DVRDIGN
 20962                                  
 20963                                  CRDOK:
 20964 0000332F 5F                      	POP	DI
 20965                                  
 20966                                  ;hkn; SS override
 20967 00003330 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20968                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20969 00003336 751F                    	JNZ	short ENDRDDEVJ2
 20970                                  	; 16/12/2022
 20971                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20972                                  
 20973 00003338 1E                      	PUSH	DS
 20974                                  
 20975                                  ;hkn; SS override
 20976 00003339 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20977 0000333E 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20978 00003340 1F                      	POP	DS
 20979                                  DVRDIGN:
 20980                                  
 20981                                  ;hkn; SS override
 20982 00003341 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20983 00003346 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20984 0000334D 47                      	INC	DI			; Next character
 20985 0000334E 3C1A                    	CMP	AL,1Ah			; ^Z?
 20986                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20987 00003350 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20988                                  	; 16/12/2022
 20989                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20990 00003352 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20991 00003354 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20992 00003356 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20993                                  					;  AX=FFFF which is not likely
 20994                                  ENDRDDEVJ2:
 20995                                  	; 16/12/2022
 20996                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20997                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20998 00003357 EB78                    	jmp	ENDRDDEV
 20999                                  
 21000                                  	; 04/05/2019
 21001                                  
 21002                                  	; MSDOS 6.0
 21003                                  ;SR;
 21004                                  ;Polling code for raw read on CON when WIN386 is present
 21005                                  ;
 21006                                  ;At this point -- ds:di is transfer address
 21007                                  ;		  cx is count
 21008                                  
 21009                                  do_polling:
 21010                                  
 21011                                  ; 07/02/2024
 21012                                  %if 0
 21013                                  	mov	bx,di			;ds:bx is Xfer address
 21014                                  	; 06/02/2024 ; *
 21015                                  	;xor	ax,ax
 21016                                  	;;mov	dx,ax
 21017                                  	;; 06/02/2024
 21018                                  	;cwd
 21019                                  	;call	SETREAD			;prepare device packet
 21020                                  	; 06/02/2024 ; *
 21021                                  	call	SETREAD_X
 21022                                  %else
 21023 00003359 E87F12                  	call	SETREAD_XJ
 21024                                  %endif
 21025                                  
 21026                                  do_io:
 21027                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21028                                  
 21029 0000335C 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21030 00003361 1E                      	push	ds
 21031 00003362 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21032 00003367 E8FB11                  	call	DEVIOCALL		;call device driver
 21033 0000336A 1F                      	pop	ds
 21034                                  	
 21035                                  	;test	word [es:bx+3],8000h
 21036                                  	; 16/12/2022
 21037                                  	;test	byte [es:bx+4],80h
 21038 0000336B 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21039                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21040 00003370 7413                    	jz	short check_busy	;no
 21041                                  
 21042 00003372 1E                      	push	ds
 21043 00003373 89FA                    	mov	dx,di
 21044                                  
 21045                                  invoke_charhard:	; 07/02/2024
 21046                                  	;invoke charhard		;invoke int 24h handler
 21047 00003375 E8461E                  	call	CHARHARD
 21048 00003378 89D7                    	mov	di,dx
 21049 0000337A 08C0                    	or	al,al
 21050 0000337C 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21051 0000337E 3C03                    	cmp	al,3
 21052 00003380 7438                    	jz	short devrderr		;user asked to fail
 21053 00003382 1F                      	pop	ds
 21054 00003383 EBD7                    	jmp	short do_io		;user asked to retry
 21055                                  
 21056                                  check_busy:
 21057                                  	;test	word [es:bx+3],200h
 21058                                  	; 16/12/2022
 21059 00003385 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21060                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21061 0000338A 7537                    	jnz	short no_char		;yes, no character available
 21062                                  
 21063                                  ;Character is available. Read in 1 character at a time until all characters
 21064                                  ;are read in or no character is available
 21065                                  
 21066 0000338C 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21067 00003391 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21068 00003397 1E                      	push	ds
 21069 00003398 36C536[9E05]            	lds	si,[ss:THISSFT]
 21070 0000339D E8C511                  	call	DEVIOCALL
 21071                                  
 21072 000033A0 89FA                    	mov	dx,di
 21073 000033A2 B486                    	mov	ah,86h
 21074                                  	;mov	di,[es:bx+3]
 21075 000033A4 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21076 000033A8 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21077                                  	;jz	short next_char		;no,read next character
 21078                                  	; 07/02/2024
 21079 000033AC 75C7                    	jnz	short invoke_charhard
 21080                                  
 21081                                  ; 07/02/2024
 21082                                  %if 0
 21083                                  	;invoke	charhard		;invoke int 24h handler
 21084                                  	call	CHARHARD
 21085                                  	mov	di,dx			;restore di
 21086                                  	or	al,al			;
 21087                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21088                                  	cmp	al,3
 21089                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21090                                  	pop	ds
 21091                                  	jmp	short do_io		;user issued a retry
 21092                                  %endif
 21093                                  
 21094                                  next_char:
 21095 000033AE 1F                      	pop	ds
 21096 000033AF 89D7                    	mov	di,dx
 21097 000033B1 49                      	dec	cx			;decrement count
 21098                                  	;jcxz	done_read		;all characters read in
 21099                                  	; 07/02/2024
 21100 000033B2 7418                    	jz	short done_read
 21101 000033B4 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21102 000033B8 EBA2                    	jmp	short do_io		;read next character in
 21103                                  
 21104                                  devrderr:
 21105 000033BA 5F                      	pop	di			;discard segment address
 21106 000033BB 36C43E[9E05]            	les	di,[ss:THISSFT]
 21107                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21108 000033C0 E95804                  	jmp     SET_ACC_ERR_DS
 21109                                  
 21110                                  no_char:
 21111                                  ;Since no character is available, we let win386 switch the VM out
 21112                                  
 21113 000033C3 50                      	push	ax
 21114 000033C4 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21115 000033C6 CD2A                    	int	2Ah			;indicate idle to WIN386
 21116                                  
 21117                                  ;When control returns from WIN386, we continue the raw read
 21118                                  
 21119 000033C8 58                      	pop	ax
 21120 000033C9 EB91                    	jmp	do_io
 21121                                  
 21122                                  pop_done_read:
 21123 000033CB 1F                      	pop	ds
 21124                                  done_read:
 21125 000033CC 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21126                                  
 21127                                  	; 16/12/2022
 21128                                  
 21129                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21130                                  	;jmp	ENDRDDEV ; 04/05/2019
 21131                                  
 21132                                  	; 04/05/2019 - Retro DOS v4.0
 21133                                  ENDRDDEV:
 21134 000033D1 16                      	push	ss
 21135 000033D2 1F                      	pop	ds
 21136 000033D3 EB1F                    	jmp	short endrddev1
 21137                                  
 21138                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21139                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21140                                  
 21141                                  TRANBUF:
 21142 000033D5 AC                      	LODSB
 21143 000033D6 AA                      	STOSB
 21144 000033D7 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21145 000033D9 7503                    	JNZ	short NORMCH
 21146 000033DB C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21147                                  NORMCH:
 21148 000033DE 3C0A                    	CMP	AL,c_LF ; 0Ah
 21149 000033E0 E0F3                    	LOOPNZ	TRANBUF
 21150 000033E2 7507                    	JNZ	short ENDRDCON
 21151 000033E4 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21152 000033E6 E85AE2                  	call	OUTT		; Transmit linefeed
 21153 000033E9 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21154                                  ENDRDCON:
 21155                                  ;hkn; SS is DOSDATA
 21156 000033EB 16                      	push	ss
 21157 000033EC 1F                      	pop	ds
 21158 000033ED E834FE                  	CALL	SWAPBACK
 21159 000033F0 8936[2200]              	MOV	[CONTPOS],SI
 21160                                  
 21161                                  	; 16/12/2022
 21162                                  ;ENDRDDEV:
 21163                                  ;;hkn; SS is DOSDATA
 21164                                  ;	push	ss
 21165                                  ;	pop	ds
 21166                                  endrddev1:	; 04/05/2019
 21167 000033F4 893E[B805]              	MOV	[NEXTADD],DI
 21168 000033F8 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21169 000033FA C43E[9E05]              	LES	DI,[THISSFT]
 21170                                  	;and	byte [es:di+5],0BFh
 21171 000033FE 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21172                                  				; Mark as no more data available
 21173                                  SETSFTC:
 21174                                  	; 31/07/2019
 21175                                  	;call	SETSFT
 21176                                  	;retn
 21177 00003403 E9A904                  	jmp	SETSFT
 21178                                  
 21179                                  ; 16/12/2022
 21180                                  %if 0
 21181                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21182                                  ENDRDDEV:
 21183                                  ;hkn; SS is DOSDATA
 21184                                  	push	ss
 21185                                  	pop	ds
 21186                                  	MOV	[NEXTADD],DI
 21187                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21188                                  	LES	DI,[THISSFT]
 21189                                  	;and	byte [es:di+5],0BFh
 21190                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21191                                  				; Mark as no more data available
 21192                                  SETSFTC:
 21193                                  	;call	SETSFT
 21194                                  	;retn
 21195                                  	jmp	SETSFT	
 21196                                  %endif
 21197                                  
 21198                                  READCON:
 21199 00003406 E821FE                  	CALL	SWAPCON
 21200 00003409 8B36[2200]              	MOV	SI,[CONTPOS]
 21201 0000340D 09F6                    	OR	SI,SI
 21202 0000340F 75C4                    	JNZ	short TRANBUF
 21203 00003411 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21204 00003416 7406                    	JZ	short GETBUF
 21205 00003418 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21206                                  GETBUF:
 21207 0000341E 51                      	PUSH	CX
 21208 0000341F 06                      	PUSH	ES
 21209 00003420 57                      	PUSH	DI
 21210                                  
 21211                                  ;hkn; CONBUF is in DOSDATA
 21212 00003421 BA[7B02]                	MOV	DX,CONBUF
 21213                                  
 21214 00003424 E89ADF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21215 00003427 5F                      	POP	DI
 21216 00003428 07                      	POP	ES
 21217 00003429 59                      	POP	CX
 21218                                  
 21219                                  ;hkn; CONBUF is in DOSDATA
 21220 0000342A BE[7D02]                	MOV	SI,CONBUF+2
 21221                                  
 21222 0000342D 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21223 00003430 75A3                    	JNZ	short TRANBUF
 21224 00003432 B01A                    	MOV	AL,1AH
 21225 00003434 AA                      	STOSB
 21226 00003435 4F                      	DEC	DI
 21227 00003436 B00A                    	MOV	AL,c_LF
 21228 00003438 E808E2                  	call	OUTT		; Send linefeed
 21229 0000343B 31F6                    	XOR	SI,SI
 21230 0000343D EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21231                                  
 21232                                  ; 24/07/2018 - Retro DOS v3.0
 21233                                  
 21234                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21235                                  ;---------------------------------------------------------------------------
 21236                                  ;
 21237                                  ; Procedure Name : DOS_WRITE
 21238                                  ;
 21239                                  ; Inputs:
 21240                                  ;	ThisSFT set to the SFT for the file being used
 21241                                  ;	[DMAADD] contains transfer address
 21242                                  ;	CX = No. of bytes to write
 21243                                  ; Function:
 21244                                  ;	Perform write operation
 21245                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21246                                  ;		to current sf_position
 21247                                  ; Outputs:
 21248                                  ;    Carry clear
 21249                                  ;	SFT Position and cluster pointers updated
 21250                                  ;	CX = No. of bytes written
 21251                                  ;	ES:DI point to SFT
 21252                                  ;    Carry set
 21253                                  ;	AX is error code
 21254                                  ;	CX = 0
 21255                                  ;	ES:DI point to SFT
 21256                                  ; DS preserved, all other registers destroyed
 21257                                  ;---------------------------------------------------------------------------
 21258                                  
 21259                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21260                                  ;hkn; point to DOSDATA.
 21261                                  
 21262                                  ; 04/05/2019 - Retro DOS v4.0
 21263                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21264                                  
 21265                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21266                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21267                                  
 21268                                  DOS_WRITE:
 21269 0000343F C43E[9E05]              	LES	DI,[THISSFT]
 21270                                  	;mov	al,[ES:DI+2]
 21271 00003443 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21272                                  	;and	al,0Fh
 21273 00003447 240F                    	AND	AL,access_mask
 21274                                  	;cmp	al,0
 21275 00003449 3C00                    	CMP	AL,open_for_read
 21276 0000344B 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21277                                  BadMode:
 21278 0000344D E9CD03                  	jmp	SET_ACC_ERR
 21279                                  
 21280                                  ; NOTE: The following check for writting to a Read Only File is performed
 21281                                  ;	    ONLY on FCBs!!!!
 21282                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21283                                  ;	    of a read only file which can then be written to.
 21284                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21285                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21286                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21287                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21288                                  ;	    to a read-only file.
 21289                                  
 21290                                  Check_FCB_RO:
 21291                                  	;;test	word [es:di+2],8000h
 21292                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21293                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21294                                  	
 21295                                  	;test	byte [es:di+3],80h
 21296 00003450 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21297 00003455 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21298                                  
 21299                                  	;test	byte [es:di+4],1
 21300 00003457 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21301 0000345C 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21302                                  WRITE_NO_MODE:
 21303 0000345E E8A402                  	call	SETUP
 21304 00003461 E8E5DD                  	call	IsSFTNet
 21305 00003464 7406                    	JZ	short LOCAL_WRITE
 21306                                  
 21307                                  ;IF NOT Installed
 21308                                  ;	transfer NET_WRITE
 21309                                  ;ELSE
 21310                                  	;mov	ax,1109h
 21311 00003466 B80911                  	MOV	AX,(MultNET<<8)|9
 21312 00003469 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21313                                  			; ES:DI -> SFT
 21314                                  			; SFT DPB field -> DPB of drive containing file
 21315                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21316                                  			; Return: CF set on error, CX = bytes written
 21317 0000346B C3                      	retn
 21318                                  ;ENDIF
 21319                                  
 21320                                  LOCAL_WRITE:
 21321                                  	;;test	word [es:di+5],80h
 21322                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21323                                  	;jnz	short WRTDEV
 21324                                  
 21325                                  	;test	byte [es:di+5],80h
 21326 0000346C 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21327 00003471 756D                    	jnz	short WRTDEV
 21328                                  
 21329                                  	;mov	byte [EXTERR_LOCUS],2
 21330 00003473 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21331 00003478 E877DE                  	call	ECritDisk
 21332                                  
 21333 0000347B E8E104                  	call	DISKWRITE
 21334                                  
 21335                                  	; 04/05/2019 - Retro DOS v4.0
 21336                                  
 21337                                  	; MSDOS 6.0
 21338                                  ; Extended Open
 21339 0000347E 7210                    	JC	short nocommit
 21340                                  	
 21341 00003480 C43E[9E05]              	LES	DI,[THISSFT]
 21342                                  	
 21343                                  	;;test	word [ES:DI+2],4000h
 21344                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21345                                  	;JZ	short nocommit
 21346                                  	
 21347                                  	;test	byte [ES:DI+3],40h
 21348 00003484 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21349 00003489 7405                    	JZ	short nocommit
 21350                                  	
 21351 0000348B 51                      	PUSH	CX
 21352 0000348C E85DFB                  	call	DOS_COMMIT
 21353 0000348F 59                      	POP	CX
 21354                                  nocommit:
 21355                                  ; Extended Open
 21356                                  	;call	LCritDisk
 21357                                  	;retn
 21358                                  	; 18/12/2022
 21359 00003490 E97ADE                  	jmp	LCritDisk
 21360                                  
 21361                                  DVWRTRAW:
 21362 00003493 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21363 00003495 E88411                  	call	SETWRITE
 21364 00003498 1E                      	PUSH	DS			; Save seg of transfer
 21365                                  
 21366                                  ;hkn; SS override
 21367 00003499 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21368 0000349E E8C410                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21369                                  
 21370 000034A1 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21371 000034A3 B487                    	MOV	AH,87H
 21372                                  
 21373                                  ;hkn; SS override
 21374 000034A5 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21375                                  
 21376                                  	; MSDOS 3.3
 21377                                  	;test	di,8000h
 21378                                  	;jz	short CWRTROK
 21379                                  
 21380                                  	; MSDOS 6.0
 21381 000034AA 09FF                    	or	di,di
 21382 000034AC 791F                    	jns	short CWRTROK
 21383                                  	
 21384                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21385 000034AE E80D1D                  	call	CHARHARD
 21386                                  
 21387                                  	; 04/05/2019  - Retro DOS v4.0
 21388                                  
 21389                                  	; MSDOS 6.0
 21390                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21391                                  	; 08/02/2024
 21392 000034B1 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21393 000034B6 29F9                    	sub	cx,di
 21394 000034B8 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21395                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21396 000034BA 01FB                    	add	bx,di
 21397 000034BC 89DF                    	mov	di,bx			;				M065
 21398                                  	
 21399                                  	; MSDOS 3.3
 21400                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21401                                  
 21402                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21403 000034BE 08C0                    	OR	AL,AL
 21404 000034C0 740B                    	JZ	short CWRTROK 		; Ignore
 21405 000034C2 3C03                    	CMP	AL,3
 21406 000034C4 7403                    	JZ	short CWRFERR
 21407 000034C6 1F                      	POP	DS			; Recover saved seg of transfer
 21408 000034C7 EBCA                    	JMP	short DVWRTRAW		; Try again
 21409                                  CWRFERR:
 21410 000034C9 58                      	POP	AX			; Chuck saved seg of transfer
 21411 000034CA E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21412                                  CWRTROK:
 21413 000034CD 58                      	POP	AX			; Chuck saved seg of transfer
 21414 000034CE 1F                      	POP	DS
 21415 000034CF A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21416                                  ENDWRDEV:
 21417 000034D2 C43E[9E05]              	LES	DI,[THISSFT]
 21418 000034D6 89C1                    	MOV	CX,AX
 21419                                  	;call	ADDREC
 21420                                  	;retn
 21421                                  	; 16/12/2022
 21422                                  	; 10/06/2019
 21423 000034D8 E9F503                  	jmp	ADDREC
 21424                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21425                                  	;call	ADDREC
 21426                                  	;retn
 21427                                  	
 21428                                  WRTNUL:
 21429 000034DB 89CA                    	MOV	DX,CX			; Entire transfer done
 21430                                  WRTCOOKJ:
 21431 000034DD E98D00                  	JMP	WRTCOOKDONE
 21432                                  WRTDEV:
 21433                                  	;mov	byte [EXTERR_LOCUS],4
 21434 000034E0 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21435                                  	;or	byte [es:di+5],40h
 21436 000034E5 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21437                                  					; Reset EOF for input
 21438                                  	;mov	bl,[es:di+5]
 21439 000034EA 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21440 000034EE 31C0                    	XOR	AX,AX
 21441 000034F0 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21442 000034F2 1E                      	PUSH	DS
 21443 000034F3 88D8                    	MOV	AL,BL
 21444 000034F5 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21445 000034F9 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21446 000034FB 31D2                    	XOR	DX,DX			; Set starting point
 21447                                  	;test	al,20h
 21448 000034FD A820                    	test	AL,devid_device_raw	; Raw?
 21449                                  	;JZ	short TEST_DEV_CON
 21450                                  	;JMP	DVWRTRAW
 21451                                  	; 16/12/2022
 21452 000034FF 7592                    	jnz	short DVWRTRAW
 21453                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21454                                  	;JZ	short TEST_DEV_CON
 21455                                  	;JMP	short DVWRTRAW
 21456                                  
 21457                                  TEST_DEV_CON:
 21458                                  	;test	al,2
 21459 00003501 A802                    	test	AL,devid_device_con_out ; Console output device?
 21460 00003503 756E                    	jnz	short WRITECON
 21461                                  	;test	al,4
 21462 00003505 A804                    	test	AL,devid_device_null
 21463 00003507 75D2                    	JNZ	short WRTNUL
 21464 00003509 89D0                    	MOV	AX,DX
 21465 0000350B 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21466 0000350E 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21467 00003510 51                      	PUSH	CX
 21468 00003511 B90100                  	MOV	CX,1
 21469 00003514 E80511                  	call	SETWRITE
 21470 00003517 59                      	POP	CX
 21471                                  
 21472                                  ;hkn; SS override
 21473 00003518 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21474                                  ;
 21475                                  ;SR; Removed X25 support from here
 21476                                  ;
 21477                                  	;lds	si,[si+7]
 21478 0000351D C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21479                                  DVWRTLP:
 21480 00003520 E8801A                  	call	DSKSTATCHK
 21481 00003523 E84210                  	call	DEVIOCALL2
 21482 00003526 57                      	PUSH	DI
 21483 00003527 B487                    	MOV	AH,87H
 21484                                  
 21485                                  ;hkn; SS override
 21486 00003529 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21487                                  	
 21488                                  	; MSDOS 3.3
 21489                                  	;test	di,8000h
 21490                                  	;jz	short CWROK
 21491                                  
 21492                                  	; MSDOS 6.0
 21493 0000352E 09FF                    	or	di,di
 21494 00003530 7916                    	jns	short CWROK
 21495                                  	
 21496                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21497 00003532 E8891C                  	call	CHARHARD
 21498 00003535 5F                      	POP	DI
 21499                                  
 21500                                  ;hkn; SS override
 21501 00003536 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21502 0000353D 3C01                    	CMP	AL,1
 21503 0000353F 74DF                    	JZ	short DVWRTLP 	; Retry
 21504 00003541 08C0                    	OR	AL,AL
 21505 00003543 740C                    	JZ	short DVWRTIGN	; Ignore
 21506                                  	; 10/08/2018
 21507 00003545 E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21508                                  CWROK:
 21509 00003548 5F                      	POP	DI
 21510                                  
 21511                                  ;hkn; SS override
 21512 00003549 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21513 0000354F 741C                    	JZ	short WRTCOOKDONE
 21514                                  DVWRTIGN:
 21515 00003551 42                      	INC	DX
 21516                                  
 21517                                  ;hkn; SS override for CALLXAD
 21518 00003552 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21519 00003557 47                      	INC	DI
 21520 00003558 1E                      	PUSH	DS
 21521 00003559 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21522 0000355E 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21523 00003561 1F                      	POP	DS
 21524 00003562 7409                    	JZ	short WRTCOOKDONE
 21525                                  
 21526                                  ;hkn; SS override
 21527 00003564 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21528 0000356B E2B3                    	LOOP	DVWRTLP
 21529                                  WRTCOOKDONE:
 21530 0000356D 89D0                    	MOV	AX,DX
 21531 0000356F 1F                      	POP	DS
 21532 00003570 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21533                                  
 21534                                  WRITECON:
 21535 00003573 1E                      	PUSH	DS
 21536                                  
 21537                                  ;hkn; SS is DOSDATA
 21538 00003574 16                      	push	ss
 21539 00003575 1F                      	pop	ds
 21540 00003576 E8B1FC                  	CALL	SWAPCON
 21541 00003579 1F                      	POP	DS
 21542 0000357A 89DE                    	MOV	SI,BX
 21543 0000357C 51                      	PUSH	CX
 21544                                  WRCONLP:
 21545 0000357D AC                      	LODSB
 21546 0000357E 3C1A                    	CMP	AL,1Ah		; ^Z?
 21547 00003580 7405                    	JZ	short CONEOF
 21548 00003582 E8BEE0                  	call	OUTT
 21549 00003585 E2F6                    	LOOP	WRCONLP
 21550                                  CONEOF:
 21551 00003587 58                      	POP	AX			; Count
 21552 00003588 29C8                    	SUB	AX,CX			; Amount actually written
 21553 0000358A 1F                      	POP	DS
 21554 0000358B E896FC                  	CALL	SWAPBACK
 21555 0000358E E941FF                  	JMP	ENDWRDEV
 21556                                  
 21557                                  ;---------------------------------------------------------------------------
 21558                                  ;
 21559                                  ; Procedure Name : get_io_sft
 21560                                  ;
 21561                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21562                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21563                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21564                                  ;
 21565                                  ;---------------------------------------------------------------------------
 21566                                  
 21567                                  ; 04/05/2019 - Retro DOS v4.0
 21568                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21569                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21570                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21571                                  
 21572                                  GET_IO_SFT:
 21573                                  	;test	byte [SS:CONSWAP],0FFh
 21574 00003591 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21575 00003597 7512                    	JNZ	short GetRedir
 21576                                  GetNormal:
 21577 00003599 16                      	push	ss
 21578 0000359A 1F                      	pop	ds
 21579 0000359B 06                      	PUSH	ES
 21580 0000359C 57                      	PUSH	DI
 21581 0000359D E8A22F                  	call	SFFromHandle
 21582 000035A0 7206                    	JC	short RET44P
 21583 000035A2 8CC6                    	MOV	SI,ES
 21584 000035A4 8EDE                    	MOV	DS,SI
 21585 000035A6 89FE                    	MOV	SI,DI
 21586                                  RET44P:
 21587 000035A8 5F                      	POP	DI
 21588 000035A9 07                      	POP	ES
 21589 000035AA C3                      	retn
 21590                                  GetRedir:
 21591 000035AB 83FB01                  	CMP	BX,1
 21592 000035AE 77E9                    	JA	short GetNormal
 21593 000035B0 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21594 000035B5 F8                      	CLC
 21595                                  get_io_sft_retn:
 21596 000035B6 C3                      	retn
 21597                                  
 21598                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21599                                  ;---------------------------------------------------------------------------
 21600                                  ;
 21601                                  ; Procedure Name : DIRREAD
 21602                                  ;
 21603                                  ; Inputs:
 21604                                  ;	AX = Directory block number (relative to first block of directory)
 21605                                  ;	ES:BP = Base of drive parameters
 21606                                  ;	[DIRSEC] = First sector of first cluster of directory
 21607                                  ;	[CLUSNUM] = Next cluster
 21608                                  ;	[CLUSFAC] = Sectors/Cluster
 21609                                  ; Function:
 21610                                  ;	Read the directory block into [CURBUF].
 21611                                  ; Outputs:
 21612                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21613                                  ;	[SECCLUSPOS] Set
 21614                                  ;	ES:BP unchanged
 21615                                  ;	[CURBUF] Points to Buffer with dir sector
 21616                                  ;	Carry set if error (user said FAIL to I 24)
 21617                                  ; DS preserved, all other registers destroyed.
 21618                                  ;---------------------------------------------------------------------------
 21619                                  
 21620                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21621                                  
 21622                                  DIRREAD:
 21623                                  
 21624                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21625                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21626                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21627                                  ; by DIRStart = 0.
 21628                                  
 21629 000035B7 31D2                    	XOR	DX,DX
 21630                                  	;CMP	word [DIRSTART],0
 21631                                  	; 21/09/2023
 21632 000035B9 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21633 000035BD 7503                    	jnz	short SubDir
 21634 000035BF 92                      	XCHG	AX,DX
 21635 000035C0 EB0C                    	JMP	short DoRead
 21636                                  
 21637                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21638                                  
 21639                                  SubDir:
 21640 000035C2 88C2                    	MOV	DL,AL
 21641                                  	;and	dl,[es:bp+4]
 21642 000035C4 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21643                                  
 21644                                  ;	(DX) = sector-in-cluster
 21645                                  
 21646                                  	;mov	cl,[es:bp+5]
 21647 000035C8 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21648 000035CC D3E8                    	SHR	AX,CL
 21649                                  
 21650                                  ;	(DX) = position in cluster
 21651                                  ;	(AX) = number of clusters to skip
 21652                                  
 21653                                  DoRead:
 21654 000035CE 8816[7305]              	MOV	[SECCLUSPOS],DL
 21655 000035D2 89C1                    	MOV	CX,AX
 21656 000035D4 88D4                    	MOV	AH,DL
 21657                                  
 21658                                  ;	(CX) = number of clusters to skip.
 21659                                  ;	(AH) = remainder
 21660                                  
 21661                                  	; 04/05/2019 - Retro DOS v4.0
 21662                                  
 21663                                  	; MSDOS 6.0
 21664                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21665                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21666                                  	;MOV	DX,[DIRSEC]
 21667                                  	;ADD	DL,AH
 21668                                  	;ADC	DH,0
 21669                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21670                                  	; 21/09/2023
 21671 000035D6 31DB                    	xor	bx,bx ; 0
 21672 000035D8 8B16[BE05]              	mov	dx,[DIRSEC]
 21673 000035DC 00E2                    	add	dl,ah
 21674 000035DE 10DE                    	adc	dh,bl ; 0
 21675 000035E0 131E[C005]              	adc	bx,[DIRSEC+2]
 21676 000035E4 891E[0706]              	mov	[HIGH_SECTOR],bx
 21677                                  
 21678 000035E8 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21679 000035EC 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21680 000035F0 E319                    	JCXZ	FIRSTCLUSTER
 21681                                  SKPCLLP:
 21682 000035F2 E8321E                  	call	UNPACK
 21683 000035F5 72BF                    	jc	short get_io_sft_retn
 21684 000035F7 87DF                    	XCHG	BX,DI
 21685 000035F9 E8141E                  	call	IsEOF			; test for eof based on fat size
 21686 000035FC 7302                    	JAE	short HAVESKIPPED
 21687 000035FE E2F2                    	LOOP	SKPCLLP
 21688                                  HAVESKIPPED:
 21689 00003600 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21690 00003604 89FA                    	MOV	DX,DI
 21691 00003606 88E3                    	MOV	BL,AH
 21692 00003608 E8DA16                  	call	FIGREC
 21693                                  
 21694                                  	;entry	FIRSTCLUSTER
 21695                                  
 21696                                  FIRSTCLUSTER:
 21697                                  	; 22/09/2023
 21698                                  	;;mov	byte [ALLOWED],18h
 21699                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21700                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21701                                  	;call	GETBUFFR
 21702 0000360B E81E22                  	call	GETBUFFER ; *	; pre-read
 21703 0000360E 72A6                    	jc	short get_io_sft_retn
 21704                                  
 21705                                  	;entry	SET_BUF_AS_DIR
 21706                                  
 21707                                  SET_BUF_AS_DIR:
 21708                                  
 21709                                  ;	Set the type of CURBUF to be a directory sector.
 21710                                  ;	Only flags are modified.
 21711                                  
 21712 00003610 1E                      	PUSH	DS
 21713 00003611 56                      	PUSH	SI
 21714 00003612 C536[E205]              	LDS	SI,[CURBUF]
 21715                                  	;or	byte [si+5],4
 21716 00003616 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21717 0000361A 5E                      	POP	SI
 21718 0000361B 1F                      	POP	DS
 21719                                  dirread_retn:
 21720 0000361C C3                      	retn
 21721                                  
 21722                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21723                                  ;----------------------------------------------------------------------------
 21724                                  ;
 21725                                  ; Procedure Name : FATSECRD
 21726                                  ; Inputs:
 21727                                  ;	Same as DREAD
 21728                                  ;	DS:BX = Transfer address
 21729                                  ;	CX = Number of sectors
 21730                                  ;	DX = Absolute record number
 21731                                  ;	ES:BP = Base of drive parameters
 21732                                  ; Function:
 21733                                  ;	Calls BIOS to perform FAT read.
 21734                                  ; Outputs:
 21735                                  ;	Same as DREAD
 21736                                  ;---------------------------------------------------------------------------
 21737                                  
 21738                                  	; 04/05/2019 - Retro DOS v4.0
 21739                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21740                                  
 21741                                  FATSECRD:
 21742                                  ;hkn; SS override
 21743                                  	;mov	byte [ss:ALLOWED],18h
 21744 0000361D 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21745 00003623 89CF                    	MOV	DI,CX
 21746                                  	;mov	cl,[es:bp+8]
 21747 00003625 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21748                                  	; MSDOS 3.3
 21749                                  	;;mov	al,[es:bp+0Fh]
 21750                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21751                                  	;XOR	AH,AH
 21752                                  	; MSDOS 6.0
 21753                                  	;mov	ax,[es:bp+0Fh]
 21754 00003629 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21755 0000362D 30ED                    	XOR	CH,CH
 21756 0000362F 52                      	PUSH	DX
 21757                                  NXTFAT:
 21758                                  	; MSDOS 6.0
 21759                                  ;hkn; SS override
 21760 00003630 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21761 00003637 51                      	PUSH	CX			;32mb
 21762 00003638 50                      	PUSH	AX
 21763 00003639 89F9                    	MOV	CX,DI
 21764 0000363B E85B00                  	call	DSKREAD
 21765 0000363E 58                      	POP	AX
 21766 0000363F 59                      	POP	CX
 21767 00003640 7420                    	JZ	short RET41P		; Carry clear
 21768 00003642 01C2                    	ADD	DX,AX
 21769 00003644 E2EA                    	LOOP	NXTFAT
 21770 00003646 5A                      	POP	DX
 21771 00003647 89F9                    	MOV	CX,DI
 21772                                  
 21773                                  ; NOTE FALL THROUGH
 21774                                  
 21775                                  ;Break	<DREAD -- DO A DISK READ>
 21776                                  ;---------------------------------------------------------------------------
 21777                                  ;
 21778                                  ; Procedure Name : DREAD
 21779                                  ;
 21780                                  ; Inputs:
 21781                                  ;	DS:BX = Transfer address
 21782                                  ;	CX = Number of sectors
 21783                                  ;	DX = Absolute record number	      (LOW)
 21784                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21785                                  ;	ES:BP = Base of drive parameters
 21786                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21787                                  ; Function:
 21788                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21789                                  ;	errors, will call HARDERRRW for further action.
 21790                                  ; Outputs:
 21791                                  ;	Carry set if error (currently user FAILED to INT 24)
 21792                                  ; DS,ES:BP preserved. All other registers destroyed.
 21793                                  ;---------------------------------------------------------------------------
 21794                                  
 21795                                  	;entry	DREAD
 21796                                  DREAD:
 21797 00003649 E84D00                  	call	DSKREAD
 21798 0000364C 74CE                    	jz	short dirread_retn	; Carry clear
 21799                                  ;hkn; SS override
 21800 0000364E 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21801 00003654 E89500                  	call	HARDERRRW
 21802 00003657 3C01                    	CMP	AL,1			; Check for retry
 21803 00003659 74EE                    	JZ	short DREAD
 21804                                  
 21805                                  fail_ignore:	; 09/02/2024
 21806 0000365B 3C03                    	CMP	AL,3			; Check for FAIL
 21807 0000365D F8                      	CLC
 21808 0000365E 7501                    	JNZ	short NO_CAR		; Ignore
 21809 00003660 F9                      	STC
 21810                                  NO_CAR:
 21811 00003661 C3                      	retn
 21812                                  RET41P: 
 21813 00003662 5A                      	POP	DX
 21814 00003663 C3                      	retn
 21815                                  
 21816                                  ; 24/07/2018 - Retro DOS v3.0
 21817                                  
 21818                                  ;Break	<CHECK_WRITE_LOCK>
 21819                                  ;---------------------------------------------------------------------------
 21820                                  ;
 21821                                  ; Procedure Name : CHECK_WRITE_LOCK
 21822                                  ;
 21823                                  ; Inputs:
 21824                                  ;	output of SETUP
 21825                                  ;	ES:DI -> SFT
 21826                                  ; Function:
 21827                                  ;	check write lock
 21828                                  ; Outputs:
 21829                                  ;	Carry set if error
 21830                                  ;	Carry clear if ok
 21831                                  ;
 21832                                  ;----------------------------------------------------------------------------
 21833                                  
 21834                                  	; 04/05/2019 - Retro DOS v4.0
 21835                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21836                                  
 21837                                  CHECK_WRITE_LOCK:
 21838                                  	; MSDOS 6.0
 21839                                  	;test	byte [es:di+4],8
 21840 00003664 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21841                                  	;JZ	short write_cont			     ;no
 21842                                  	;;call	SET_ACC_ERR_DS
 21843                                  	;;retn
 21844                                  	;;jnz	SET_ACC_ERR_DS
 21845                                  	; 19/08/2018
 21846                                  	;jz	short write_cont
 21847                                  	;jmp	SET_ACC_ERR_DS
 21848                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21849 00003669 7403                    	JZ	short write_cont
 21850                                  	;call	SET_ACC_ERR_DS
 21851                                  	;retn
 21852                                  	; 16/12/2022
 21853 0000366B E9AD01                  	jmp	SET_ACC_ERR_DS
 21854                                  
 21855                                  write_cont:				;
 21856 0000366E 51                      	PUSH	CX			;save reg
 21857 0000366F 09C9                    	OR	CX,CX			;
 21858 00003671 7501                    	JNZ	short Not_Truncate	;
 21859 00003673 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21860                                  Not_Truncate:				;
 21861 00003674 B080                    	MOV	AL,80H			;check write access
 21862 00003676 E8023B                  	call	LOCK_CHECK		;check lock
 21863 00003679 59                      	POP	CX			;restore reg
 21864 0000367A 7305                    	JNC	short WRITE_OK		;lock ok
 21865 0000367C E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21866 0000367F 73ED                    	JNC	short write_cont	;retry
 21867                                  WRITE_OK:				;
 21868 00003681 C3                      	retn				;
 21869                                  
 21870                                  ;Break	<CHECK_READ_LOCK>
 21871                                  ;---------------------------------------------------------------------------
 21872                                  ;
 21873                                  ; Procedure Name : CHECK_READ_LOC
 21874                                  ;
 21875                                  ; Inputs:
 21876                                  ;	ES:DI -> SFT
 21877                                  ;	output of SETUP
 21878                                  ; Function:
 21879                                  ;	check read lock
 21880                                  ; Outputs:
 21881                                  ;	Carry set if error
 21882                                  ;	Carry clear if ok
 21883                                  ;----------------------------------------------------------------------------
 21884                                  
 21885                                  CHECK_READ_LOCK:
 21886                                  	; MSDOS 6.0
 21887                                  	;test	byte [es:di+4],8
 21888 00003682 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21889                                  	;JZ	short do_retry			   	     ; no
 21890                                  	;;call	SET_ACC_ERR
 21891                                  	;;retn
 21892                                  	;;jnz	SET_ACC_ERR
 21893                                  	; 16/12/2022
 21894                                  	; 28/07/2019
 21895 00003687 7403                    	jz	short do_retry
 21896 00003689 E99101                  	jmp	SET_ACC_ERR
 21897                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21898                                  	;JZ	short do_retry
 21899                                  	;call	SET_ACC_ERR
 21900                                  	;retn
 21901                                  do_retry:				;
 21902 0000368C 30C0                    	xor	al,al			;check read access
 21903 0000368E E8EA3A                  	call	LOCK_CHECK		;check lock
 21904 00003691 7305                    	JNC	short READLOCK_OK 	;lock ok
 21905 00003693 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 21906 00003696 73F4                    	JNC	short do_retry		;retry
 21907                                  READLOCK_OK:				;
 21908                                  dw_ret_label:	; 09/02/2024
 21909 00003698 C3                      	retn				;
 21910                                  
 21911                                  ;============================================================================
 21912                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21913                                  ;============================================================================
 21914                                  ; 24/07/2018 - Retro DOS v3.0
 21915                                  ; 04/05/2019 - Retro DOS v4.0
 21916                                  
 21917                                  ;	TITLE	DISK2 - Disk utility routines
 21918                                  ;	NAME	Disk2
 21919                                  
 21920                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21921                                  ;
 21922                                  ;	DskRead
 21923                                  ;	DWRITE
 21924                                  ;	DSKWRITE
 21925                                  ;	HarderrRW
 21926                                  ;	SETUP
 21927                                  ;	BREAKDOWN
 21928                                  ;	READ_LOCK_VIOLATION
 21929                                  ;	WRITE_LOCK_VIOLATION
 21930                                  ;	DISKREAD
 21931                                  ;	SET_ACC_ERR_DS
 21932                                  ;	SET_ACC_ERR
 21933                                  ;	SETSFT
 21934                                  ;	SETCLUS
 21935                                  ;	AddRec
 21936                                  ;
 21937                                  ;	Revision history:
 21938                                  ;
 21939                                  ;		AN000 version 4.00 Jan. 1988
 21940                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21941                                  
 21942                                  ; 04/05/2019 - Retro DOS v4.0
 21943                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21944                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21945                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21946                                  
 21947                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21948                                  ;---------------------------------------------------------------------------
 21949                                  ;
 21950                                  ; Procedure Name : DSKREAD
 21951                                  ;
 21952                                  ; Inputs:
 21953                                  ;	DS:BX = Transfer addr
 21954                                  ;	CX = Number of sectors
 21955                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21956                                  ;	DX = Absolute record number	       (LOW)
 21957                                  ;	ES:BP = Base of drive parameters
 21958                                  ; Function:
 21959                                  ;	Call BIOS to perform disk read
 21960                                  ; Outputs:
 21961                                  ;	DI = CX on entry
 21962                                  ;	CX = Number of sectors unsuccessfully transfered
 21963                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21964                                  ;	Zero set if OK (from BIOS) (carry clear)
 21965                                  ;	Zero clear if error (carry clear)
 21966                                  ; SI Destroyed, others preserved
 21967                                  ;---------------------------------------------------------------------------
 21968                                  
 21969                                  DSKREAD:
 21970 00003699 51                      	PUSH	CX
 21971                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21972 0000369A 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21973                                  	;mov	al,[es:bp+1]
 21974 0000369E 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21975 000036A2 53                      	PUSH	BX
 21976 000036A3 06                      	PUSH	ES
 21977 000036A4 E8420F                  	call	SETREAD
 21978 000036A7 EB22                    	JMP	short DODSKOP
 21979                                  
 21980                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21981                                  ;--------------------------------------------------------------------------
 21982                                  ;
 21983                                  ; Procedure Name : DWRITE
 21984                                  ;
 21985                                  ; Inputs:
 21986                                  ;	DS:BX = Transfer address
 21987                                  ;	CX = Number of sectors
 21988                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21989                                  ;	DX = Absolute record number	       (LOW)
 21990                                  ;	ES:BP = Base of drive parameters
 21991                                  ;	[ALLOWED] must be set in case HARDERR called
 21992                                  ; Function:
 21993                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21994                                  ;	errors, will call HARDERRRW for further action.
 21995                                  ; Output:
 21996                                  ;	Carry set if error (currently, user FAILed to I 24)
 21997                                  ; BP preserved. All other registers destroyed.
 21998                                  ;----------------------------------------------------------------------------
 21999                                  
 22000                                  	;entry	DWRITE
 22001                                  DWRITE:
 22002 000036A9 E81100                  	CALL	DSKWRITE
 22003 000036AC 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22004                                  
 22005                                  ;hkn; SS override
 22006 000036AE 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22007 000036B4 E83500                  	call	HARDERRRW
 22008 000036B7 3C01                    	CMP	AL,1			; Check for retry
 22009 000036B9 74EE                    	JZ	short DWRITE
 22010                                  
 22011                                  ; 09/02/2024
 22012                                  %if 0
 22013                                  	CMP	AL,3			; Check for FAIL
 22014                                  	CLC
 22015                                  	JNZ	short NO_CAR2 		; Ignore
 22016                                  	STC
 22017                                  NO_CAR2:
 22018                                  dw_ret_label:
 22019                                  	retn
 22020                                  %else
 22021                                  	; 09/02/2024 - Retro DOS v4.1
 22022 000036BB EB9E                    	jmp	short fail_ignore
 22023                                  %endif
 22024                                  
 22025                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22026                                  ;---------------------------------------------------------------------------
 22027                                  ;
 22028                                  ; Procedure Name : DSKWRITE
 22029                                  ;
 22030                                  ; Inputs:
 22031                                  ;	DS:BX = Transfer addr
 22032                                  ;	CX = Number of sectors
 22033                                  ;	DX = Absolute record number	       (LOW)
 22034                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22035                                  ;	ES:BP = Base of drive parameters
 22036                                  ; Function:
 22037                                  ;	Call BIOS to perform disk read
 22038                                  ; Outputs:
 22039                                  ;	DI = CX on entry
 22040                                  ;	CX = Number of sectors unsuccessfully transfered
 22041                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22042                                  ;	Zero set if OK (from BIOS) (carry clear)
 22043                                  ;	Zero clear if error (carry clear)
 22044                                  ; SI Destroyed, others preserved
 22045                                  ;
 22046                                  ;----------------------------------------------------------------------------
 22047                                  
 22048                                  	;entry	DSKWRITE
 22049                                  DSKWRITE:
 22050 000036BD 51                      	PUSH	CX
 22051                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22052 000036BE 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22053                                  	;mov	al,[es:bp+1]
 22054 000036C2 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22055 000036C6 53                      	PUSH	BX
 22056 000036C7 06                      	PUSH	ES
 22057 000036C8 E8510F                  	call	SETWRITE
 22058                                  DODSKOP:
 22059 000036CB 8CD9                    	MOV	CX,DS		; Save DS
 22060 000036CD 1F                      	POP	DS		; DS:BP points to DPB
 22061 000036CE 1E                      	PUSH	DS
 22062                                  
 22063                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22064 000036CF 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22065 000036D3 E8920E                  	call	DEVIOCALL2
 22066                                  
 22067 000036D6 8ED9                    	MOV	DS,CX		; Restore DS
 22068 000036D8 07                      	POP	ES		; Restore ES
 22069 000036D9 5B                      	POP	BX
 22070                                  
 22071                                  ;hkn; SS override
 22072 000036DA 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22073 000036DF 5F                      	POP	DI
 22074 000036E0 29F9                    	SUB	CX,DI
 22075 000036E2 F7D9                    	NEG	CX		; Number of sectors not transferred
 22076                                  
 22077                                  ;hkn; SS override
 22078 000036E4 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22079                                  	;test	ax,8000h
 22080                                  	; 17/12/2022
 22081                                  	;test	ah,80h
 22082 000036E8 F6C480                  	test	ah,(STERR>>8)
 22083                                  	;test	AX,STERR
 22084 000036EB C3                      	retn
 22085                                  
 22086                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22087                                  ;---------------------------------------------------------------------------
 22088                                  ;
 22089                                  ; Procedure Name : HardErrRW
 22090                                  ;
 22091                                  ; Inputs:
 22092                                  ;	AX is error code from read or write
 22093                                  ;	Other registers set as per HARDERR
 22094                                  ; Function:
 22095                                  ;	Checks the error code for special extended
 22096                                  ;	errors and maps them if needed. Then invokes
 22097                                  ;	Harderr
 22098                                  ; Outputs:
 22099                                  ;	Of HARDERR
 22100                                  ; AX may be modified prior to call to HARDERR.
 22101                                  ; No other registers altered.
 22102                                  ;
 22103                                  ;---------------------------------------------------------------------------
 22104                                  
 22105                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22106                                  HARDERRRW:
 22107                                  	;cmp	al,0Fh
 22108 000036EC 3C0F                    	CMP	AL,error_I24_wrong_disk
 22109 000036EE 7512                    	JNZ	short DO_ERR				; Nothing to do
 22110                                  
 22111                                  	; MSDOS 3.3
 22112                                  	;push	ds
 22113                                  	;push	si
 22114                                  	;lds	si,[ss:CALLVIDRW]
 22115                                  	;mov	[ss:EXTERRPT+2], ds
 22116                                  	;mov	[ss:EXTERRPT], si
 22117                                  	;pop	si
 22118                                  	;pop	ds
 22119                                  
 22120                                  	; MSDOS 6.0
 22121 000036F0 50                      	push	ax
 22122 000036F1 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22123 000036F5 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22124 000036F9 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22125 000036FD 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22126 00003701 58                      	pop	ax
 22127                                  DO_ERR:
 22128                                  	;;call	HARDERR
 22129                                  	;;retn
 22130                                  	; 16/12/2022
 22131                                  	; 10/06/2019
 22132 00003702 E9EA1A                  	jmp	HARDERR	
 22133                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22134                                  	;call	HARDERR
 22135                                  	;retn
 22136                                  
 22137                                  ; 24/07/2018 - Retro DOS v3.0
 22138                                  
 22139                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22140                                  ;----------------------------------------------------------------------------
 22141                                  ;
 22142                                  ; Procedure Name : SETUP
 22143                                  ;
 22144                                  ; Inputs:
 22145                                  ;	ES:DI point to SFT (value also in THISSFT)
 22146                                  ;	DMAAdd contains transfer address
 22147                                  ;	CX = Byte count
 22148                                  ;	DS = DOSDATA
 22149                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22150                                  ;		2nd of caller of caller.
 22151                                  ; Outputs:
 22152                                  ;	    CX = byte count
 22153                                  ;	    [THISDPB] = Base of drive parameters if file
 22154                                  ;		      = Pointer to device header if device or NET
 22155                                  ;	    ES:DI Points to SFT
 22156                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22157                                  ;	    [TRANS] = 0 (No transfers yet)
 22158                                  ;	    BytPos = Byte position in file
 22159                                  ;
 22160                                  ;	The following fields are relevant to local files (not devices) only:
 22161                                  ;
 22162                                  ;	    SecPos = Position of first sector (local files only)
 22163                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22164                                  ;	    [CLUSNUM] = First cluster (local files only)
 22165                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22166                                  ;	    [THISDRV] = Physical unit number (local files only)
 22167                                  ;
 22168                                  ;      RETURNS ONE LEVEL UP WITH:
 22169                                  ;	   CX = 0
 22170                                  ;	   CARRY = Clear
 22171                                  ;	IF AN ERROR IS DETECTED
 22172                                  ; All other registers destroyed
 22173                                  ;----------------------------------------------------------------------------
 22174                                  
 22175                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22176                                  
 22177                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22178                                  
 22179                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22180                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22181                                  
 22182                                  SETUP:
 22183                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22184                                  
 22185                                  	;lds 	si,[es:di+7]
 22186 00003705 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22187                                  
 22188                                  ;hkn; SS override
 22189 00003709 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22190                                  
 22191                                  ;hkn; SS is DOSDATA
 22192 0000370E 16                      	push	ss
 22193 0000370F 1F                      	pop	ds
 22194                                  
 22195 00003710 8936[8A05]              	MOV	[THISDPB],SI
 22196                                  
 22197 00003714 8B1E[2C03]              	MOV	BX,[DMAADD]
 22198 00003718 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22199 0000371C C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22200                                  	;mov	ax,[es:di+15h]
 22201 00003721 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22202                                  	;mov	dx,[es:di+17h]
 22203 00003725 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22204 00003729 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22205 0000372D A3[CE05]                	MOV	[BYTPOS],AX
 22206                                  	;test	word [es:di+5],8080h
 22207 00003730 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22208 00003736 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22209 00003738 06                      	PUSH	ES
 22210 00003739 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22211                                  
 22212                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22213                                  	;;mov	bl,[es:bp+0]
 22214                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22215                                  	; 05/12/2022
 22216 0000373D 268A5E00                	mov	bl,[es:bp]
 22217                                  	
 22218 00003741 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22219                                  	;mov	bx,[es:bp+2]
 22220 00003745 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22221                                  
 22222                                  	;; MSDOS 3.3
 22223                                  	;cmp	dx,bx
 22224                                  	;jnb	short EOFERR
 22225                                  	;div	bx
 22226                                  	;mov	[SECPOS],ax
 22227                                  	;mov	[BYTSECPOS],dx
 22228                                  	;mov	dx,ax
 22229                                  	;;and	al,[es:bp+4]
 22230                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22231                                  	;mov	[SECCLUSPOS],al
 22232                                  	;mov	ax,cx
 22233                                  	;;mov	cl,[es:bp+5]
 22234                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22235                                  	;shr	dx,cl
 22236                                  	;mov	[CLUSNUM],dx
 22237                                  	;pop	es
 22238                                  	;mov	cx,ax
 22239                                  
 22240                                  	; 04/05/2019 - Retro DOS v4.0
 22241                                  
 22242                                  	; MSDOS 6.0
 22243                                  ;M039: Optimized this section.
 22244 00003749 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22245 0000374A E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22246 0000374D 8916[CC05]              	MOV	[BYTSECPOS],DX
 22247 00003751 A3[C405]                	MOV	[SECPOS],AX
 22248 00003754 890E[C605]              	MOV	[SECPOS+2],CX
 22249 00003758 89CA                    	MOV	DX,CX
 22250                                  
 22251 0000375A 89C3                    	MOV	BX,AX
 22252                                  	;and	bl,[es:bp+4]
 22253 0000375C 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22254 00003760 881E[7305]              	MOV	[SECCLUSPOS],BL
 22255                                  
 22256 00003764 E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22257 00003767 59                      	POP	CX			;CX = byte count.
 22258 00003768 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22259                                  	;cmp	ax,[es:bp+0Dh]
 22260 0000376A 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22261 0000376E 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22262                                  
 22263 00003770 A3[BC05]                	MOV	[CLUSNUM],AX
 22264 00003773 07                      	POP	ES			; ES:DI point to SFT
 22265                                  ;M039
 22266                                  
 22267                                  NOSETSTUFF:
 22268 00003774 89C8                    	MOV	AX,CX		; AX = Byte count.
 22269 00003776 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22270 0000377A 730C                    	JNC	short setup_OK	; Must be less than 64
 22271 0000377C A1[2C03]                	MOV	AX,[DMAADD]
 22272 0000377F F7D8                    	NEG	AX		; Amount of room left in segment (know
 22273                                  				;    less than 64K since max value of CX
 22274                                  				;    is FFFF).
 22275 00003781 7501                    	JNZ	short NoDec
 22276 00003783 48                      	DEC	AX
 22277                                  NoDec:
 22278 00003784 89C1                    	MOV	CX,AX		; Can do this much
 22279 00003786 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22280                                  setup_OK:
 22281 00003788 C3                      	retn
 22282                                  
 22283                                  EOFERR:
 22284 00003789 07                      	POP	ES		; ES:DI point to SFT
 22285 0000378A 31C9                    	XOR	CX,CX		; No bytes read
 22286                                  ;;;;;;;;;;; 7/18/86
 22287                                  	; MSDOS 3.3
 22288                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22289                                  ;;;;;;;;;;;
 22290                                  NOROOM:
 22291 0000378C 5B                      	POP	BX		; Kill return address
 22292 0000378D F8                      	CLC
 22293 0000378E C3                      	retn			; RETURN TO CALLER OF CALLER
 22294                                  
 22295                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22296                                  ;---------------------------------------------------------------------------
 22297                                  ;
 22298                                  ; Procedure Name : BREAKDOWN
 22299                                  ;
 22300                                  ; Inputs:
 22301                                  ;	CX = Length of disk transfer in bytes
 22302                                  ;	ES:BP = Base of drive parameters
 22303                                  ;	[BYTSECPOS] = Byte position within first sector
 22304                                  ;	DS = DOSDATA
 22305                                  ; Outputs:
 22306                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22307                                  ;	[SECCNT] = No. of whole sectors to transfer
 22308                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22309                                  ; AX, BX, DX destroyed. No other registers affected.
 22310                                  ;---------------------------------------------------------------------------
 22311                                  
 22312                                  BREAKDOWN:
 22313 0000378F A1[CC05]                	MOV	AX,[BYTSECPOS]
 22314 00003792 89CB                    	MOV	BX,CX
 22315 00003794 09C0                    	OR	AX,AX
 22316 00003796 740E                    	JZ	short SAVFIR	; Partial first sector?
 22317                                  	;sub	ax,[es:bp+2]
 22318 00003798 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22319 0000379C F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22320 0000379E 29C3                    	SUB	BX,AX		; Subtract from total length
 22321 000037A0 7304                    	JAE	short SAVFIR
 22322 000037A2 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22323 000037A4 31DB                    	XOR	BX,BX		; And no bytes are left
 22324                                  SAVFIR:
 22325 000037A6 A3[D205]                	MOV	[BYTCNT1],AX
 22326 000037A9 89D8                    	MOV	AX,BX
 22327 000037AB 31D2                    	XOR	DX,DX
 22328                                  	;div	word [ES:BP+2]
 22329 000037AD 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22330 000037B1 A3[D605]                	MOV	[SECCNT],AX
 22331 000037B4 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22332                                  	; MSDOS 3.3
 22333                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22334                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22335                                  	;CMP	AX,1
 22336                                  	;retnz
 22337                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22338                                  	;MOV	[BYTCNT2],AX
 22339                                  	;MOV	[SECCNT],DX	; DX = 0
 22340                                  _RET45:
 22341 000037B8 C3                      	retn
 22342                                  
 22343                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22344                                  
 22345                                  ;----------------------------------------------------------------------------
 22346                                  ;
 22347                                  ; Procedure Name : READ_LOCK_VIOLATION
 22348                                  ;
 22349                                  ; ES:DI points to SFT. This entry used by NET_READ
 22350                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22351                                  ; Else do retrys.
 22352                                  ; ES:DI,DS,CX preserved
 22353                                  ;
 22354                                  ;----------------------------------------------------------------------------
 22355                                  
 22356                                  READ_LOCK_VIOLATION:
 22357 000037B9 C606[7505]00            	MOV	byte [READOP],0
 22358                                  ERR_ON_CHECK:
 22359                                  	;;test	word [es:di+2],8000h
 22360                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22361                                  	;JNZ	short HARD_ERR
 22362                                  
 22363                                  	; 04/05/2019
 22364                                  	;test	byte [es:di+3],80h
 22365 000037BE 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22366 000037C3 7508                    	JNZ	short HARD_ERR
 22367                                  
 22368                                  	;PUSH	CX
 22369                                  	;;mov	cl,[es:di+2]
 22370                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22371                                  	;;and	cl,0F0h
 22372                                  	;AND	CL,SHARING_MASK
 22373                                  	;;cmp	cl,0
 22374                                  	;CMP	CL,SHARING_COMPAT
 22375                                  	;POP	CX
 22376                                  	;JNE	short NO_HARD_ERR
 22377                                  	; 21/09/2023
 22378 000037C5 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22379 000037C9 24F0                    	and	al,SHARING_MASK
 22380                                  	;cmp	al,SHARING_COMPAT
 22381                                  	;jne	short NO_HARD_ERR
 22382 000037CB 7505                    	jnz	short NO_HARD_ERR
 22383                                  HARD_ERR:
 22384 000037CD E8C139                  	call	LOCK_VIOLATION
 22385 000037D0 73E6                    	jnc	short _RET45		; User wants Retrys
 22386                                  NO_HARD_ERR:
 22387 000037D2 31C9                    	XOR	CX,CX			;No bytes transferred
 22388                                  	;mov	ax,21h
 22389 000037D4 B82100                  	MOV	AX,error_lock_violation
 22390 000037D7 F9                      	STC
 22391                                  RET3:		; 06/02/2024
 22392 000037D8 C3                      	retn
 22393                                  
 22394                                  ;----------------------------------------------------------------------------
 22395                                  ;
 22396                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22397                                  ;
 22398                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22399                                  ; This entry used by NET_WRITE
 22400                                  ;
 22401                                  ;----------------------------------------------------------------------------
 22402                                  
 22403                                  WRITE_LOCK_VIOLATION:
 22404 000037D9 C606[7505]01            	MOV	byte [READOP],1
 22405 000037DE EBDE                    	JMP	short ERR_ON_CHECK
 22406                                  
 22407                                  ; 04/05/2019 - Retro DOS v4.0
 22408                                  
 22409                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22410                                  
 22411                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22412                                  ;----------------------------------------------------------------------------
 22413                                  ;
 22414                                  ; Procedure Name : DISKREAD
 22415                                  ;
 22416                                  ; Inputs:
 22417                                  ;	Outputs of SETUP
 22418                                  ; Function:
 22419                                  ;	Perform disk read
 22420                                  ; Outputs:
 22421                                  ;    Carry clear
 22422                                  ;	CX = No. of bytes read
 22423                                  ;	ES:DI point to SFT
 22424                                  ;	SFT offset and cluster pointers updated
 22425                                  ;    Carry set
 22426                                  ;	CX = 0
 22427                                  ;	ES:DI point to SFT
 22428                                  ;	AX has error code
 22429                                  ;----------------------------------------------------------------------------
 22430                                  
 22431                                  ;hkn; called from disk.asm. DS already set up.
 22432                                  
 22433                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22434                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22435                                  
 22436                                  DISKREAD:
 22437                                  	;mov	ax,[es:di+11h]
 22438 000037E0 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22439                                  	;mov	bx,[es:di+13h]
 22440 000037E4 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22441 000037E8 2B06[CE05]              	SUB	AX,[BYTPOS]
 22442 000037EC 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22443 000037F0 721F                    	JB	short RDERR		;Read starts past EOF
 22444 000037F2 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22445 000037F4 09C0                    	OR	AX,AX
 22446 000037F6 7419                    	JZ	short RDERR		;Read starts at EOF
 22447 000037F8 39C8                    	CMP	AX,CX
 22448 000037FA 7302                    	JAE	short ENUF		;I/O fits
 22449 000037FC 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22450                                  ENUF:
 22451                                  	; MSDOS 3.3
 22452                                  	;test	byte [es:di+4],8
 22453                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22454                                  	;jnz	short SET_ACC_ERR
 22455                                  	;call	LOCK_CHECK
 22456                                  	;jnb	short _READ_OK
 22457                                  	;call	READ_LOCK_VIOLATION
 22458                                  	;jnb	short ENUF
 22459                                  	;retn
 22460                                  
 22461                                  	; MSDOS 6.0
 22462 000037FE E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22463                                  	;JNC	short _READ_OK 		; There are no locks
 22464                                  	;retn
 22465                                  	; 06/02/2024
 22466 00003801 72D5                    	jc	short RET3
 22467                                  
 22468                                  _READ_OK:
 22469 00003803 C42E[8A05]              	LES	BP,[THISDPB]
 22470 00003807 E885FF                  	CALL	BREAKDOWN
 22471                                  
 22472                                  ; 10/02/2024
 22473                                  %if 0
 22474                                  	MOV	CX,[CLUSNUM] ; *
 22475                                  	call	FNDCLUS
 22476                                       	; MSDOS 6.0			;M022 conditional removed here
 22477                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22478                                  					; migrated from 330a - HKN
 22479                                  %else
 22480                                  	; 10/02/2024 - Retro DOS v4.1
 22481 0000380A E83B13                  	call	FNDCLUS_X ; *
 22482 0000380D 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22483                                  %endif
 22484                                  	;OR	CX,CX
 22485                                  	;JZ	short SKIPERR
 22486                                  	; 06/02/2024
 22487 0000380F E313                    	jcxz	SKIPERR
 22488                                  
 22489                                  RDERR:
 22490 00003811 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22491 00003813 E91802                  	jmp	WRTERR22
 22492                                  
 22493                                  ;RDLASTJ: 
 22494                                  	;JMP	RDLAST                  ;M039
 22495                                  
 22496                                  SETSFTJ2: 
 22497 00003816 E99600                  	JMP	SETSFT
 22498                                  
 22499                                  CANOT_READ:
 22500                                  	; MSDOS 3.3
 22501                                  	;POP	CX		;M039.
 22502                                  	; MSDOS 3.3 & MSDOS 6.0
 22503 00003819 59                      	POP	CX              ;Clean stack.
 22504 0000381A 5B                      	POP	BX
 22505                                  
 22506                                  	;entry	SET_ACC_ERR_DS
 22507                                  SET_ACC_ERR_DS:
 22508                                  
 22509                                  ;hkn; SS is DOSDATA
 22510                                  	;Context DS
 22511 0000381B 16                      	push	ss
 22512 0000381C 1F                      	pop	ds
 22513                                  
 22514                                  	;entry	SET_ACC_ERR
 22515                                  SET_ACC_ERR:
 22516 0000381D 31C9                    	XOR	CX,CX
 22517                                  	;mov	ax,5
 22518 0000381F B80500                  	MOV	AX,error_access_denied
 22519 00003822 F9                      	STC
 22520 00003823 C3                      	retn
 22521                                  
 22522                                  SKIPERR:
 22523 00003824 8916[BA05]              	MOV	[LASTPOS],DX
 22524 00003828 891E[BC05]              	MOV	[CLUSNUM],BX
 22525 0000382C 833E[D205]00            	CMP	word [BYTCNT1],0
 22526 00003831 7405                    	JZ	short RDMID
 22527                                  
 22528 00003833 E88C13                  	call	BUFRD
 22529                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22530                                  	; 10/02/2024
 22531                                  	; ds=ss
 22532 00003836 72E5                    	jc	short SET_ACC_ERR
 22533                                  
 22534                                  RDMID:
 22535 00003838 833E[D605]00            	CMP	word [SECCNT],0
 22536                                  	;JZ	RDLAST ; 10/08/2018
 22537 0000383D 7453                    	jz	short RDLAST
 22538                                  
 22539 0000383F E81414                  	call	NEXTSEC
 22540 00003842 72D2                    	JC	short SETSFTJ2
 22541                                  
 22542 00003844 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22543                                  ONSEC:
 22544 00003849 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22545 0000384D 8B0E[D605]              	MOV	CX,[SECCNT]
 22546 00003851 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22547                                  RDLP:
 22548 00003855 E82F14                  	call	OPTIMIZE
 22549                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22550                                  	; 10/02/2024
 22551                                  	; ds=ss
 22552 00003858 72C3                    	jc	short SET_ACC_ERR
 22553                                  
 22554 0000385A 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22555 0000385B 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22556 0000385C 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22557                                  	;mov	byte [ALLOWED],38h
 22558 0000385D C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22559 00003862 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22560                                  
 22561 00003866 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22562 00003867 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22563                                  
 22564                                  	; 04/05/2019 - Retro DOS v4.0
 22565                                  
 22566                                  	; MSDOS 6.0
 22567 00003868 E8B421                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22568                                  
 22569                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22570 0000386B E8DBFD                  	call	DREAD
 22571                                  
 22572                                  	; 10/02/2024
 22573                                  	; ds<>ss
 22574                                  
 22575                                  	; MSDOS 3.3 
 22576                                  	;pop	bx
 22577                                  	;pop	dx
 22578                                  	;jc	short CANOT_READ
 22579                                  	;add	bx,dx	; (bx = Extent end)
 22580                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22581                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22582                                  	;call	SETVISIT
 22583                                  	; ->***
 22584                                  ;M039
 22585                                  	; MSDOS 6.0 
 22586 0000386E 59                      	pop	cx
 22587 0000386F 5A                      	pop	dx
 22588 00003870 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22589 00003875 72A2                    	jc	short CANOT_READ
 22590                                  
 22591 00003877 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22592                                  
 22593                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22594                                  ;            sectors, also termed an "Extent".)
 22595                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22596                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22597                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22598                                  ;
 22599                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22600                                  ;	buffers must be "read" into the transfer memory block, so that the
 22601                                  ;       transfer memory reflects the most recent data.
 22602                                  
 22603 0000387C E85E00                  	call	DskRdBufScan
 22604                                  
 22605                                  	;Context DS
 22606 0000387F 16                      	push	ss
 22607 00003880 1F                      	pop	ds
 22608                                          
 22609 00003881 59                      	pop	cx
 22610 00003882 5B                              pop	bx
 22611                                  
 22612                                  ;       CX = # of sector remaining.
 22613                                  ;       BX = Next physical cluster.
 22614                                  
 22615                                  ;M039
 22616                                  
 22617                                  ;;;;;;;;
 22618                                  ;	; 25/07/2018 - Retro DOS v3.0
 22619                                  ;	; ***->
 22620                                  ;	; MSDOS 3.3
 22621                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22622                                  ;bufq:
 22623                                  ;;	DX = Extent start.
 22624                                  ;;	BX = Extent end.
 22625                                  ;;	 AL = Drive #.
 22626                                  ;;     DS:DI-> 1st buffer in queue.
 22627                                  ;
 22628                                  ;	;or	byte [di+5],20h
 22629                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22630                                  ;	;cmp	al,[di+4]	
 22631                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22632                                  ;	jnz	short bufq3
 22633                                  ;	;cmp	[di+6],dx
 22634                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22635                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22636                                  ;	;cmp	[di+6],bx
 22637                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22638                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22639                                  ;	
 22640                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22641                                  ;
 22642                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22643                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22644                                  ;;      as MRU (Most Recently Used).
 22645                                  ;
 22646                                  ;	;test	byte [di+5],40h
 22647                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22648                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22649                                  ;	pop	ax ; transfer address
 22650                                  ;	push	ax
 22651                                  ;	push	di
 22652                                  ;	push	dx
 22653                                  ;	;sub	dx,[di+6]
 22654                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22655                                  ;	neg	dx
 22656                                  ;
 22657                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22658                                  ;;           block.
 22659                                  ;
 22660                                  ;	mov	si,di
 22661                                  ;	mov	di,ax
 22662                                  ;	mov	ax,dx
 22663                                  ;	;mov	cx,[es:bp+6]	
 22664                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22665                                  ;	mul	cx
 22666                                  ;	add	di,ax
 22667                                  ;
 22668                                  ;	lea	si,[si+16]
 22669                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22670                                  ;	shr	cx,1
 22671                                  ;	push	es
 22672                                  ;	mov	es,[SS:DMAADD+2]
 22673                                  ;
 22674                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22675                                  ;;      DS:SI-> Buffer sector data.
 22676                                  ;;      ES:DI-> Destination within Transfer memory block.
 22677                                  ;
 22678                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22679                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22680                                  ;	;rep	movsb                   ;Copy last byte.
 22681                                  ;	jnc	short bufq1
 22682                                  ;	movsb
 22683                                  ;bufq1:
 22684                                  ;	pop	es
 22685                                  ;	pop	dx
 22686                                  ;	pop	di
 22687                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22688                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22689                                  ;bufq2:
 22690                                  ;	call	SCANPLACE
 22691                                  ;bufq3:
 22692                                  ;	call	SKIPVISIT
 22693                                  ;	jnz	short bufq
 22694                                  ;	
 22695                                  ;	push	ss
 22696                                  ;	pop	ds
 22697                                  ;	pop	cx
 22698                                  ;	pop	cx
 22699                                  ;	pop	bx	
 22700                                  ;bufq4:
 22701                                  ;;;;;;;
 22702 00003883 E30D                    	JCXZ	RDLAST
 22703                                  
 22704 00003885 E8881B                  	call	IsEOF			; test for eof on fat size
 22705 00003888 7325                    	JAE	short SETSFT
 22706                                  
 22707 0000388A B200                    	MOV	DL,0
 22708 0000388C FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22709 00003890 EBC3                    	JMP	short RDLP ; 19/05/2019
 22710                                  
 22711                                  RDLAST:
 22712 00003892 A1[D405]                	MOV	AX,[BYTCNT2]
 22713 00003895 09C0                    	OR	AX,AX
 22714 00003897 7416                    	JZ	short SETSFT
 22715 00003899 A3[D205]                	MOV	[BYTCNT1],AX
 22716                                  
 22717 0000389C E8B713                  	call	NEXTSEC
 22718 0000389F 720E                    	JC	short SETSFT
 22719                                  
 22720 000038A1 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22721 000038A7 E81813                  	call	BUFRD
 22722                                  	; 10/08/2018
 22723 000038AA 7303                    	JNC	short SETSFT
 22724                                  	;JMP	SET_ACC_ERR_DS
 22725                                  	; 10/02/2024
 22726                                  	; ds=ss
 22727 000038AC E96EFF                  	jmp	SET_ACC_ERR
 22728                                  
 22729                                  ;------------------------------------------------------------------------------
 22730                                  ;
 22731                                  ; Procedure Name : SETSFT
 22732                                  ; Inputs:
 22733                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22734                                  ;		and set cluster fields
 22735                                  ; Function:
 22736                                  ;	Update [THISSFT] based on the transfer
 22737                                  ; Outputs:
 22738                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22739                                  ;	ES:DI points to [THISSFT]
 22740                                  ;	CX No. of bytes transferred
 22741                                  ;	Carry clear
 22742                                  ;
 22743                                  ;----------------------------------------------------------------------------
 22744                                  
 22745                                  	;entry	SETSFT
 22746                                  
 22747                                  ; 26/07/2018 - Retro DOS v3.0
 22748                                  SETSFT:
 22749 000038AF C43E[9E05]              	LES	DI,[THISSFT]
 22750                                  
 22751                                  ; Same as SETSFT except ES:DI already points to SFT
 22752                                  	;entry	SETCLUS
 22753                                  SETCLUS:	
 22754 000038B3 8B0E[B805]              	MOV	CX,[NEXTADD]
 22755 000038B7 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22756                                  	;;test	word [es:di+5],80h
 22757                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22758                                  	;JNZ	short ADDREC		; don't set clusters if device
 22759                                  
 22760                                  	; 04/05/2019 - Retro DOS v4.0
 22761                                  	;test	byte [es:di+5],80h
 22762 000038BB 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22763 000038C0 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22764                                  
 22765 000038C2 A1[BC05]                	MOV	AX,[CLUSNUM]
 22766                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22767                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22768 000038C5 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22769 000038C9 A1[BA05]                	MOV	AX,[LASTPOS]
 22770                                  	;mov	[es:di+19h],ax
 22771 000038CC 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22772                                  
 22773                                  ;----------------------------------------------------------------------------
 22774                                  ;
 22775                                  ; Procedure : AddRec
 22776                                  ; Inputs:
 22777                                  ;	ES:DI points to SFT
 22778                                  ;	CX is No. Bytes transferred
 22779                                  ; Function:
 22780                                  ;	Update the SFT offset based on the transfer
 22781                                  ; Outputs:
 22782                                  ;	sf_position updated to point to first byte after transfer
 22783                                  ;	ES:DI points to SFT
 22784                                  ;	CX No. of bytes transferred
 22785                                  ;	Carry clear
 22786                                  ;----------------------------------------------------------------------------
 22787                                  
 22788                                  	;entry	AddRec
 22789                                  ADDREC:
 22790 000038D0 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22791                                  	;add	[es:di+15h],cx
 22792 000038D2 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22793                                  	;adc	word [es:di+17h], 0
 22794 000038D6 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22795                                  RET28:	
 22796 000038DB F8                      	CLC
 22797 000038DC C3                      	retn
 22798                                  
 22799                                  ; 25/07/2018
 22800                                  ; MSDOS 6.0
 22801                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22802                                  ;----------------------------------------------------------------------------
 22803                                  ;
 22804                                  ; Procedure Name : DskRdBufScan
 22805                                  ;
 22806                                  ; Inputs:
 22807                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22808                                  ;            sectors, also termed an "Extent".)
 22809                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22810                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22811                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22812                                  ;
 22813                                  ; Function:
 22814                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22815                                  ;	"read" into the transfer memory block, so that the transfer memory
 22816                                  ;	reflects the most recent data.
 22817                                  ;
 22818                                  ; Outputs:
 22819                                  ;       Transfer memory updated as required.
 22820                                  ;
 22821                                  ; Uses:
 22822                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22823                                  ;       SS override for all global variables.
 22824                                  ;
 22825                                  ; Notes:
 22826                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22827                                  ;	than the FIRST.
 22828                                  ;----------------------------------------------------------------------------
 22829                                  ;M039: Created
 22830                                  
 22831                                  ; 04/05/2019 - Retro DOS v4.0
 22832                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22833                                  
 22834                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22835                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22836                                  
 22837                                  ;procedure DskRdBufScan,NEAR
 22838                                  ;
 22839                                  ;ASSUME  DS:NOTHING
 22840                                  
 22841                                  DskRdBufScan:
 22842 000038DD 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22843 000038E3 743C                    	je	short bufx		     ; -no, skip all work.
 22844                                  
 22845 000038E5 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22846 000038EA 89DE                    	mov     si,bx
 22847 000038EC 01D1                    	add     cx,dx
 22848 000038EE 83D600                  	adc     si,0
 22849                                  
 22850 000038F1 E8C61E                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22851                                  	;mov	ax,[di+2]
 22852 000038F4 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22853 000038F7 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22854                                  		
 22855                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22856                                  	;;mov	al,[es:bp+0]
 22857                                  	;mov	al,[es:bp+DPB.DRIVE]
 22858                                  	; 15/12/2022
 22859 000038FB 268A4600                	mov	al,[es:bp]
 22860                                  
 22861                                  ;       BX:DX = Extent start.
 22862                                  ;       SI:CX = Extent end + 1.
 22863                                  ;          AL = Drive #.
 22864                                  ;       DS:DI-> 1st buffer in queue.
 22865                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22866                                  
 22867                                  bufq:	
 22868                                  	;cmp	al,[di+4]
 22869 000038FF 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22870 00003902 7514                    	jne	short bufq1        	;  -no, jump.
 22871                                  
 22872                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22873                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22874                                  
 22875                                  	;cmp	bx,[di+8]
 22876 00003904 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22877 00003907 7503                    	jne	short bufq01
 22878                                  	;cmp	dx,[di+6]
 22879 00003909 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22880                                  bufq01:
 22881 0000390C 770A                    	ja	short bufq1
 22882                                  
 22883                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22884                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22885                                  
 22886                                  	;cmp	si,[di+8]
 22887 0000390E 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22888 00003911 7503                    	jne	short bufq02
 22889                                  	;cmp	cx,[di+6]
 22890 00003913 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22891                                  bufq02:
 22892 00003916 770A                    	ja	short bufq2
 22893                                  bufq1:	
 22894 00003918 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22895 0000391D 8B3D                    	mov	di,[di]
 22896                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22897 0000391F 75DE                    	jne	short bufq		; -no, do next buffer
 22898                                  bufx:
 22899 00003921 C3                      	retn				;Exit.
 22900                                  
 22901                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22902                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22903                                  ;       as MRU (Most Recently Used).
 22904                                  
 22905                                  bufq2:	
 22906 00003922 50                      	push	ax
 22907                                  	;test	byte [di+5],40h
 22908 00003923 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22909 00003927 7428                    	jz	short bufq3                    ; -no, jump.
 22910                                  
 22911                                  ;       SaveReg <cx,dx,si,di,es>
 22912 00003929 51                      	push	cx
 22913 0000392A 52                      	push	dx
 22914 0000392B 56                      	push	si
 22915 0000392C 57                      	push	di
 22916 0000392D 06                      	push	es
 22917                                  
 22918 0000392E 89D0                    	mov     ax,dx
 22919                                  	;sub	ax,[di+6]
 22920 00003930 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22921 00003933 F7D8                    	neg	ax
 22922                                  
 22923                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22924                                  ;            block. (Note: the upper word of the sector # may be ignored
 22925                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22926                                  ;            is imposed by the input parameters of the disk read operation.)
 22927                                  
 22928                                  	;lea	si,[di+20]
 22929 00003935 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22930                                  	;mov	cx,[es:bp+2]
 22931 00003938 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22932 0000393C F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22933                                  	;mov	di,[ss:TEMP_VAR]
 22934                                  	; 09/02/2024
 22935 0000393E 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 22936 00003943 01C7                    	add	di,ax
 22937                                  	;mov	es,[ss:TEMP_VAR2]
 22938 00003945 D1E9                    	shr	cx,1
 22939                                  
 22940                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22941                                  ;       DS:SI-> Buffer sector data.
 22942                                  ;       ES:DI-> Destination within Transfer memory block.
 22943                                  
 22944 00003947 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22945                                  	;; 04/05/2019
 22946                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22947                                  	;;rep	movsb                   ;Copy last byte.
 22948                                  	;jnc	short bufq03	
 22949                                  	;movsb
 22950                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22951                                  	;adc	cx,0
 22952                                  	;rep	movsb
 22953                                  	; 22/09/2023
 22954 00003949 7301                    	jnc	short bufq03
 22955 0000394B A4                      	movsb
 22956                                  bufq03:
 22957                                  	;RestoreReg <es,di,si,dx,cx>
 22958 0000394C 07                      	pop	es
 22959 0000394D 5F                      	pop	di
 22960 0000394E 5E                      	pop	si
 22961 0000394F 5A                      	pop	dx
 22962 00003950 59                      	pop	cx
 22963                                  
 22964                                  ;       DS:DI -> current buffer.
 22965                                  bufq3:	
 22966 00003951 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22967                                          ;invoke SCANPLACE
 22968 00003953 E8761E                  	call	SCANPLACE
 22969 00003956 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22970 0000395B 58                      	pop	ax
 22971                                  	;jne	short bufq		; -no, jump.
 22972                                  	;;jmp	short bufx		; -yes, exit.
 22973                                  	;; 12/06/2019
 22974                                  	;retn
 22975                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22976 0000395C 75A1                    	jne	short bufq
 22977                                  	;jmp	short bufx
 22978                                  	; 09/02/2024
 22979 0000395E C3                      	retn	; Exit
 22980                                  
 22981                                  ;EndProc DskRdBufScan
 22982                                  
 22983                                  ;============================================================================
 22984                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22985                                  ;============================================================================
 22986                                  ; 04/05/2019 - Retro DOS v4.0
 22987                                  ; 24/07/2018 - Retro DOS v3.0
 22988                                  
 22989                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22990                                  ;----------------------------------------------------------------------------
 22991                                  ;
 22992                                  ; Procedure Name : DISKWRITE
 22993                                  ;
 22994                                  ; Inputs:
 22995                                  ;       Outputs of SETUP
 22996                                  ; Function:
 22997                                  ;       Perform disk write
 22998                                  ; Outputs:
 22999                                  ;    Carry clear
 23000                                  ;       CX = No. of bytes written
 23001                                  ;       ES:DI point to SFT
 23002                                  ;       SFT offset and cluster pointers updated
 23003                                  ;    Carry set
 23004                                  ;       CX = 0
 23005                                  ;       ES:DI point to SFT
 23006                                  ;       AX has error code
 23007                                  ;----------------------------------------------------------------------------
 23008                                  
 23009                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23010                                  
 23011                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23012                                  
 23013                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23014                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23015                                  
 23016                                  DISKWRITE:
 23017                                  	; MSDOS 3.3
 23018                                  	; IBMDOS.COM - Offset 436Dh
 23019                                  	;;test	byte [es:di+4],8
 23020                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23021                                  	;jz	short write_cont
 23022                                  	;jmp	SET_ACC_ERR_DS
 23023                                  ;write_cont:
 23024                                  	;push	cx
 23025                                  	;or	cx,cx
 23026                                  	;jnz	short Not_Truncate
 23027                                  	;;mov	cx,-1
 23028                                  	;dec	cx
 23029                                  ;Not_Truncate:
 23030                                  	;call	LOCK_CHECK
 23031                                  	;pop	cx
 23032                                  	;jnb	short _WRITE_OK
 23033                                  	;call	WRITE_LOCK_VIOLATION
 23034                                  	;jnb	short DISKWRITE
 23035                                  	;retn
 23036                                  
 23037                                  	; MSDOS 6.0
 23038 0000395F E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23039                                  	; 19/08/2018
 23040 00003962 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23041 00003964 C3                      	retn
 23042                                  
 23043                                  WRTEOFJ:
 23044 00003965 E9D101                  	JMP     WRTEOF
 23045                                  
 23046                                  _WRITE_OK:
 23047                                   	; 27/07/2018
 23048                                  	; IBMDOS.COM - Offset 438Eh
 23049                                  	
 23050                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23051                                  	;and	word [es:di+5],0BFBFh
 23052 00003968 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23053                                  				; Mark file as dirty, clear no date on close
 23054                                  ; 10/02/2024
 23055                                  %if 0
 23056                                  	; 04/05/2019 - Retro DOS v4.0
 23057                                  
 23058                                  	; MSDOS 6.0
 23059                                  	;mov 	ax,[es:di+11h]
 23060                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23061                                          MOV	[TEMP_VAR],AX                           ;M039
 23062                                  	;mov	ax,[es:di+13h]
 23063                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23064                                          MOV	[TEMP_VAR2],AX                          ;M039
 23065                                  %else
 23066                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23067                                  	;les	ax,[es:di+11h]
 23068 0000396E 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23069 00003972 8C06[0E06]              	mov	[TEMP_VAR2],es
 23070 00003976 A3[0C06]                	mov	[TEMP_VAR],ax
 23071                                  %endif
 23072                                  
 23073                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23074                                  
 23075                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23076 00003979 C42E[8A05]              	LES     BP,[THISDPB]
 23077                                  
 23078 0000397D E80FFE                  	call	BREAKDOWN
 23079                                  
 23080 00003980 A1[CE05]                	MOV     AX,[BYTPOS]
 23081 00003983 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23082 00003987 E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23083 00003989 01C8                    	ADD     AX,CX
 23084 0000398B 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23085                                  
 23086                                  	;mov	bx,[es:bp+2]
 23087 0000398E 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23088                                  
 23089                                  	; MSDOS 3.3
 23090                                  	;cmp	dx,bx
 23091                                  	;jnb	short WRTERR33
 23092                                  	;div	bx
 23093                                  	;mov	bx,ax
 23094                                  	;OR	DX,DX
 23095                                  	;JNZ	short CALCLUS
 23096                                  	;dec	ax
 23097                                  ;CALCLUS:
 23098                                  	; MSDOS 3.3
 23099                                  	;mov	cl,[es:bp+5]
 23100                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23101                                  	;shr	ax,cl
 23102                                  	;push	ax
 23103                                  	;push	dx
 23104                                  	;push	es
 23105                                  	;les	di,[THISSFT]
 23106                                  	;;mov	ax,[es:di+11h]
 23107                                  	;;mov	dx,[es:di+13h]
 23108                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23109                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23110                                  	;pop	es
 23111                                  	;;DX:AX = current file size (in bytes).
 23112                                  	;;div	word [es:bp+2]
 23113                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23114                                  	;mov	cx,ax
 23115                                  	;or	dx,dx
 23116                                  	;jz	short NORND
 23117                                  	;inc	ax
 23118                                  ;NORND:
 23119                                  	; MSDOS 6.0
 23120 00003992 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23121 00003995 89C6                    	MOV	SI,AX
 23122 00003997 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23123                                  
 23124                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23125                                  
 23126 0000399B 09D2                    	OR	DX,DX
 23127 0000399D 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23128 0000399E 89CA                    	MOV	DX,CX			;M039
 23129 000039A0 7506                    	JNZ	short CALCLUS
 23130 000039A2 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23131 000039A5 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23132                                  
 23133                                  CALCLUS:
 23134                                  	; MSDOS 6.0
 23135 000039A8 E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23136 000039AB 5A                      	POP	DX
 23137                                  
 23138                                  ;       AX = Last cluster to write.
 23139                                  ;       DX = # of bytes in last sector to write (the "tail").
 23140                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23141                                  
 23142 000039AC 50                      	PUSH	AX
 23143 000039AD 52                      	PUSH	DX
 23144                                  ;M039
 23145 000039AE 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23146 000039B2 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23147 000039B5 E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23148 000039B8 890E[0E06]              	mov	[TEMP_VAR2],cx
 23149 000039BC 890E[CA05]              	mov	[VALSEC+2],cx
 23150 000039C0 89C1                    	mov	cx,ax
 23151 000039C2 89F3                    	mov	bx,si
 23152                                  
 23153                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23154                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23155                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23156                                  ;                     DX = # of bytes in last sector of current file.
 23157                                  ;M039
 23158 000039C4 09D2                    	OR	DX,DX
 23159 000039C6 7407                    	JZ	short NORND
 23160                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23161                                  	;ADC	word [VALSEC+2],0
 23162                                  	; 22/09/2023
 23163 000039C8 40                      	inc	ax  ; 0FFFFh -> 0
 23164 000039C9 7504                    	jnz	short NORND
 23165 000039CB FF06[CA05]              	inc	word [VALSEC+2]
 23166                                  NORND:		
 23167                                  	; MSDOS 3.3 & MSDOS 6.0
 23168 000039CF A3[C805]                	MOV     [VALSEC],AX
 23169                                  
 23170                                  ;       [VALSEC] = Last sector of current file.
 23171                                  
 23172 000039D2 31C0                    	XOR     AX,AX
 23173 000039D4 A3[DE05]                	MOV     [GROWCNT],AX
 23174 000039D7 A3[E005]                	MOV     [GROWCNT+2],AX
 23175 000039DA 58                      	POP     AX
 23176                                  
 23177                                  	; MSDOS 6.0
 23178 000039DB 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23179 000039DF 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23180 000039E3 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23181 000039E5 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23182 000039E7 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23183 000039E9 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23184 000039ED EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23185                                  lowsec:
 23186                                  	;MOV	DI,0			;F.C. >32mb
 23187                                  	; 22/09/2023
 23188 000039EF 31FF                    	xor	di,di
 23189                                  	; MSDOS 3.3 & MSDOS 6.0
 23190 000039F1 29CB                    	SUB	BX,CX			; Number of full sectors
 23191 000039F3 7253                    	JB	short NOGROW
 23192 000039F5 7444                    	JZ	short TESTTAIL
 23193                                  yesgrow:
 23194                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23195 000039F7 89D1                    	MOV     CX,DX
 23196 000039F9 93                      	XCHG    AX,BX
 23197                                  	;mul	word [es:bp+2]
 23198 000039FA 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23199                                  	
 23200                                  	; MSDOS 6.0
 23201 000039FE 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23202 00003A02 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23203 00003A05 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23204                                  	;mul	word [es:bp+2]
 23205 00003A07 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23206                                  	
 23207 00003A0B 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23208 00003A0F 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23209 00003A11 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23210                                  
 23211                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23212 00003A14 29C8                    	SUB     AX,CX			; Take off current "tail"
 23213 00003A16 83DA00                  	SBB     DX,0			; 32-bit extension
 23214 00003A19 01D8                    	ADD     AX,BX			; Add on new "tail"
 23215 00003A1B 83D200                  	ADC     DX,0			; ripple tim's head off
 23216 00003A1E EB21                    	JMP     SHORT SETGRW
 23217                                  
 23218                                  HAVSTART:
 23219                                  	;int 3
 23220 00003A20 89C1                    	MOV     CX,AX
 23221 00003A22 E84711                  	call	SKPCLP
 23222                                  	;JCXZ	DOWRTJ
 23223                                  	; 16/12/2022
 23224 00003A25 E353                    	jcxz	DOWRT
 23225                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23226                                  	;jcxz	DOWRTJ
 23227                                  
 23228 00003A27 E8DF12                  	call	ALLOCATE
 23229                                  	;JNC	short DOWRTJ
 23230                                  	; 16/12/2022
 23231 00003A2A 734E                    	jnc	short DOWRT
 23232                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23233                                  	;jnc	short DOWRTJ
 23234                                  
 23235                                  	;entry   WRTERR
 23236                                  WRTERR:
 23237 00003A2C B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23238                                  
 23239                                  	;entry WRTERR22
 23240                                  WRTERR22:
 23241 00003A2E A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23242                                  
 23243                                  	; 27/07/2018
 23244                                  WRTERR33:
 23245                                  	;MOV	CX,0			;No bytes transferred
 23246 00003A31 31C9                    	XOR     CX,CX
 23247                                  
 23248 00003A33 C43E[9E05]              	LES     DI,[THISSFT]
 23249                                  	;CLC ; 19/05/2019
 23250                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23251                                  	; 16/12/2022
 23252                                  	;clc
 23253 00003A37 C3                      	retn
 23254                                  
 23255                                  	; 16/12/2022
 23256                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23257                                  ;DOWRTJ:
 23258                                  	;JMP	short DOWRT
 23259                                  
 23260                                  ACC_ERRWJ:
 23261                                  	; 10/08/2018
 23262                                  	;JMP	SET_ACC_ERRW
 23263                                  	; 16/12/2022
 23264                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23265                                  	; 10/02/2024
 23266                                  	; ds=ss
 23267 00003A38 E9E2FD                  	jmp	SET_ACC_ERR
 23268                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23269                                  	;;jmp	SET_ACC_ERRW	
 23270                                  
 23271                                  TESTTAIL:
 23272 00003A3B 29D0                    	SUB     AX,DX
 23273 00003A3D 7609                    	JBE	short NOGROW
 23274 00003A3F 31D2                    	XOR     DX,DX
 23275                                  SETGRW:
 23276 00003A41 A3[DE05]                	MOV	[GROWCNT],AX
 23277 00003A44 8916[E005]              	MOV	[GROWCNT+2],DX
 23278                                  NOGROW:
 23279 00003A48 58                      	POP     AX
 23280                                  
 23281                                  ; 10/02/2024
 23282                                  %if 0
 23283                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23284                                  	call	FNDCLUS
 23285                                  %else
 23286                                  	; 10/02/2024 - Retro DOS v4.1
 23287 00003A49 E8FC10                  	call	FNDCLUS_X ; *+
 23288                                  %endif
 23289 00003A4C 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23290                                  
 23291 00003A4E 891E[BC05]              	MOV     [CLUSNUM],BX
 23292 00003A52 8916[BA05]              	MOV     [LASTPOS],DX
 23293                                  
 23294 00003A56 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23295 00003A58 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23296 00003A5A E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23297 00003A5C 51                      	PUSH    CX              ; No. of clusters short of first
 23298 00003A5D 89C1                    	MOV     CX,AX
 23299 00003A5F E8A712                  	call	ALLOCATE
 23300 00003A62 59                      	POP     CX
 23301 00003A63 72C7                    	JC	short WRTERR
 23302 00003A65 8B16[BA05]              	MOV     DX,[LASTPOS]
 23303 00003A69 42                      	INC     DX
 23304 00003A6A 49                      	DEC     CX
 23305 00003A6B 7405                    	JZ	short NOSKIP
 23306 00003A6D E8FC10                  	call	SKPCLP
 23307 00003A70 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23308                                  NOSKIP:
 23309 00003A72 891E[BC05]              	MOV     [CLUSNUM],BX
 23310 00003A76 8916[BA05]              	MOV     [LASTPOS],DX
 23311                                  DOWRT:
 23312 00003A7A 833E[D205]00            	CMP     word [BYTCNT1],0
 23313 00003A7F 7405                    	JZ	short WRTMID
 23314                                  	; 09/02/2024
 23315                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23316 00003A81 E87711                  	call	BUFWRT
 23317 00003A84 72B2                    	JC	short ACC_ERRWJ
 23318                                  WRTMID:
 23319 00003A86 A1[D605]                	MOV     AX,[SECCNT]
 23320 00003A89 09C0                    	OR      AX,AX
 23321                                  	; 20/11/2022
 23322 00003A8B 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23323 00003A8D 0106[C405]              	ADD     [SECPOS],AX
 23324                                  	; 19/05/2019
 23325                                  	; MSDOS 6.0
 23326 00003A91 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23327 00003A96 E8BD11                  	call	NEXTSEC
 23328                                  	; 16/12/2022
 23329 00003A99 729D                    	JC	short ACC_ERRWJ
 23330                                  	;JC	short SET_ACC_ERRW	;M039
 23331 00003A9B C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23332 00003AA0 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23333 00003AA4 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23334 00003AA8 8B0E[D605]              	MOV     CX,[SECCNT]
 23335                                  WRTLP:
 23336 00003AAC E8D811                  	call	OPTIMIZE
 23337 00003AAF 7248                    	JC	short SET_ACC_ERRW
 23338                                  	; 16/12/2022
 23339                                  	;JC	short ACC_ERRWJ
 23340                                  
 23341                                  ;M039
 23342                                  ;       DI = Next physical cluster.
 23343                                  ;       AX = # sectors remaining.
 23344                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23345                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23346                                  ;	     sectors, also termed an "Extent".)
 23347                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23348                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23349                                  ;
 23350                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23351                                  ;	are in Extent; they are being over-written.
 23352                                  
 23353 00003AB1 57                      	push    di
 23354 00003AB2 50                      	push    ax
 23355                                  
 23356                                  	; MSDOS 3.3
 23357                                  	; IBMDOS.COM (1987) - Offset 4497h
 23358                                  	;push	dx
 23359                                  	;push	bx
 23360                                  	;mov	al,[es:bp]
 23361                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23362                                  	;mov	bx,cx
 23363                                  	;add	bx,dx	; (bx = Extent end)
 23364                                  
 23365                                  ;	DX = Extent start.
 23366                                  ;	BX = Extent end.
 23367                                  ;	AL = Drive #.
 23368                                  
 23369                                  	;call	SETVISIT
 23370                                  
 23371                                  ;wbufq1:
 23372                                  	;;or	byte [di+5],20h
 23373                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23374                                  	;;cmp	al,[di+4]	
 23375                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23376                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23377                                  	;;cmp	[di+6],dx
 23378                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23379                                  	;jb	short wbufq2
 23380                                  	;;cmp	[di+6],bx
 23381                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23382                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23383                                  
 23384                                  	;; Buffer sector is in the Extent
 23385                                  
 23386                                  	;;mov	word [di+4],20FFh
 23387                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23388                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23389                                  	;				; .buf_flags, AH = 0, reset/clear
 23390                                  	;call	SCANPLACE
 23391                                  ;wbufq2:
 23392                                  	;call	SKIPVISIT
 23393                                  	;jnz	short wbufq1
 23394                                  	;pop	bx
 23395                                  	;pop	dx
 23396                                  
 23397                                          ; MSDOS 6.0
 23398 00003AB3 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23399                                  
 23400                                  ;ASSUME DS:NOTHING
 23401                                  ;M039
 23402                                  	; MSDOS 3.3 & MSDOS 6.0
 23403                                  ;hkn; SS override for DMAADD and ALLOWED
 23404 00003AB6 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23405                                  	;mov	byte [ss:ALLOWED],38h
 23406 00003ABB 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23407                                  
 23408                                  ;	put logic from DWRITE in-line here so we can modify it
 23409                                  ;	for DISK FULL conditions.
 23410                                  
 23411                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23412                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23413                                  
 23414                                  	; 16/12/2022
 23415                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23416                                  	;call	DWRITE
 23417                                  
 23418                                  ;DWRITE_OKAY:
 23419                                  
 23420                                  	; 16/12/2022
 23421                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23422                                  	;pop	cx
 23423                                  	;pop	bx
 23424                                  	;push	ss
 23425                                  	;pop	ds
 23426                                  	;jc	short SET_ACC_ERRW
 23427                                  	;jcxz	WRTLAST
 23428                                  	;mov	dl,0
 23429                                  	;inc	word [LASTPOS]
 23430                                  	;jmp	short WRTLP
 23431                                  
 23432                                  	; 16/12/2022
 23433                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23434                                  DWRITE_LUP:
 23435                                  	; 23/07/2019 - Retro DOS v3.2
 23436                                  
 23437                                  	; MSDOS 6.0
 23438 00003AC1 E8F9FB                  	call	DSKWRITE
 23439 00003AC4 7417                    	jz	short DWRITE_OKAY
 23440                                  
 23441                                  ;;	int	3
 23442                                  
 23443 00003AC6 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23444 00003AC8 7423                    	jz	short DWRITE_DISK_FULL
 23445                                  
 23446                                  	; 16/12/2022
 23447                                  
 23448                                  ;;hkn; SS override
 23449 00003ACA 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23450 00003AD0 E819FC                  	call	HARDERRRW
 23451 00003AD3 3C01                    	CMP	AL,1		; Check for retry
 23452 00003AD5 74EA                    	JZ	short DWRITE_LUP
 23453                                  
 23454                                  	; 16/12/2022
 23455                                  	; 23/07/2019
 23456                                  	;POP	CX ; *4*
 23457                                  	;POP	BX ; *5*
 23458                                  	;
 23459                                  	;push	ss
 23460                                  	;pop	ds
 23461                                  	;
 23462                                  
 23463                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23464                                  
 23465                                  	; 16/12/2022
 23466 00003AD7 3C03                    	CMP	AL,3		; Check for FAIL
 23467 00003AD9 F8                      	CLC
 23468 00003ADA 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23469 00003ADC F9                      	STC
 23470                                  
 23471                                  DWRITE_OKAY:
 23472                                  	; 16/12/2022
 23473                                  	; 23/07/2019
 23474                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23475 00003ADD 59                      	POP	CX ; *4*
 23476 00003ADE 5B                      	POP	BX ; *5*
 23477                                  
 23478                                  ;       CX = # sectors remaining.
 23479                                  ;       BX = Next physical cluster.
 23480                                  
 23481                                  ;hkn; SS override
 23482                                          ;Context DS
 23483                                  	; 16/12/2022
 23484                                  	;push	ss
 23485                                  	;pop	ds
 23486                                  
 23487                                  	; 10/02/2024
 23488                                  	; 16/12/2022
 23489                                  	;jc	short SET_ACC_ERRW
 23490                                  
 23491                                  	; 16/12/2022
 23492 00003ADF 16                      	push	ss
 23493 00003AE0 1F                      	pop	ds
 23494                                  
 23495                                  	; 10/02/2024
 23496 00003AE1 7216                    	jc	short SET_ACC_ERRW
 23497                                  
 23498 00003AE3 E317                    	JCXZ    WRTLAST
 23499                                  
 23500                                  	; 10/02/2024
 23501 00003AE5 B200                    	MOV	DL,0
 23502                                  	;xor	dl,dl ; 23/07/2019
 23503 00003AE7 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23504 00003AEB EBBF                    	JMP     short WRTLP
 23505                                  
 23506                                  	; 23/07/2019 - Retro DOS v3.2
 23507                                  	; 09/08/2018
 23508                                  	; MSDOS 6.0
 23509                                  DWRITE_DISK_FULL:
 23510                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23511                                  	; 16/12/2022
 23512 00003AED 16                      	push	ss
 23513 00003AEE 1F                      	pop	ds
 23514 00003AEF 59                      	pop	cx		; unjunk stack
 23515 00003AF0 5B                      	pop	bx
 23516 00003AF1 C606[0B06]01            	mov	byte [DISK_FULL],1
 23517                                  	;stc
 23518 00003AF6 E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23519                                  
 23520                                  	; 16/12/2022
 23521                                  SET_ACC_ERRW:
 23522                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23523                                  	; 10/02/2024
 23524                                  	; ds=ss
 23525 00003AF9 E921FD                  	jmp	SET_ACC_ERR
 23526                                  
 23527                                  WRTLAST:
 23528 00003AFC A1[D405]                	MOV     AX,[BYTCNT2]
 23529 00003AFF 09C0                    	OR      AX,AX
 23530 00003B01 7413                    	JZ	short FINWRT
 23531 00003B03 A3[D205]                	MOV     [BYTCNT1],AX
 23532 00003B06 E84D11                  	call	NEXTSEC
 23533 00003B09 72EE                    	JC	short SET_ACC_ERRW
 23534 00003B0B C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23535 00003B11 E8E710                  	call	BUFWRT
 23536 00003B14 72E3                    	JC	short SET_ACC_ERRW
 23537                                  FINWRT:
 23538 00003B16 C43E[9E05]              	LES     DI,[THISSFT]
 23539 00003B1A A1[DE05]                	MOV     AX,[GROWCNT]
 23540 00003B1D 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23541 00003B21 09C0                    	OR      AX,AX
 23542 00003B23 7502                    	JNZ	short UPDATE_size
 23543 00003B25 E30F                    	JCXZ    SAMSIZ
 23544                                  UPDATE_size:
 23545                                  	;add	[es:di+11h],ax
 23546 00003B27 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23547                                  	;adc	[es:di+13h],cx
 23548 00003B2B 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23549                                  
 23550                                  ; Make sure that all other SFT's see this growth also.
 23551                                  
 23552 00003B2F B80100                  	MOV     AX,1
 23553                                  ;if installed
 23554                                  	;Call	JShare + 14 * 4
 23555 00003B32 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23556                                  ;else
 23557                                  ;	Call    ShSU
 23558                                  ;endif
 23559                                  
 23560                                  SAMSIZ:
 23561 00003B36 E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23562                                  
 23563                                  	; 16/12/2022
 23564                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23565                                  ;SET_ACC_ERRW:
 23566                                  	;jmp	SET_ACC_ERR_DS
 23567                                  
 23568                                  WRTEOF:
 23569 00003B39 89C1                    	MOV     CX,AX
 23570 00003B3B 09D1                    	OR      CX,DX
 23571 00003B3D 746A                    	JZ	short KILLFIL
 23572 00003B3F 83E801                  	SUB     AX,1
 23573 00003B42 83DA00                  	SBB     DX,0
 23574                                  
 23575                                  	; MSDOS 3.3
 23576                                  	;;div	word [es:bp+2]
 23577                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23578                                  	;;mov	cl,[es:bp+5]
 23579                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23580                                  	;shr	ax,cl
 23581                                  
 23582                                  	; MSDOS 6.0
 23583 00003B45 53                      	PUSH	BX
 23584                                  	;mov	bx,[es:bp+2]
 23585 00003B46 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23586 00003B4A E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23587 00003B4D 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23588 00003B4E 89CA                    	MOV	DX,CX			      ;M039
 23589 00003B50 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23590 00003B54 E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23591                                  
 23592 00003B57 89C1                    	MOV     CX,AX
 23593 00003B59 E8F00F                  	call	FNDCLUS
 23594                                  SET_ACC_ERRWJ2:
 23595 00003B5C 729B                    	JC	short SET_ACC_ERRW
 23596                                  
 23597 00003B5E E324                    	JCXZ    RELFILE
 23598 00003B60 E8A611                  	call	ALLOCATE
 23599                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23600                                  	; 16/12/2022
 23601 00003B63 7303                    	jnc	short UPDATE
 23602 00003B65 E9C4FE                  	JMP	WRTERR
 23603                                  UPDATE:
 23604 00003B68 C43E[9E05]              	LES	DI,[THISSFT]
 23605 00003B6C A1[CE05]                	MOV	AX,[BYTPOS]
 23606                                  	;mov	[es:di+11h],ax
 23607 00003B6F 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23608 00003B73 A1[D005]                	MOV	AX,[BYTPOS+2]
 23609                                  	;mov	[es:di+13h],ax
 23610 00003B76 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23611                                  ;
 23612                                  ; Make sure that all other SFT's see this growth also.
 23613                                  ;
 23614 00003B7A B80200                  	MOV     AX,2
 23615                                  ;if installed
 23616                                  	;Call	JShare + 14 * 4
 23617 00003B7D FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23618                                  ;else
 23619                                  ;	Call    ShSU
 23620                                  ;endif
 23621 00003B81 31C9                    	XOR     CX,CX ; 0
 23622                                  	;jmp	ADDREC
 23623                                  	; 08/02/2024
 23624 00003B83 C3                      	retn
 23625                                  
 23626                                  	; 16/12/2022
 23627                                  ;WRTERRJ: 
 23628                                  	;JMP	WRTERR
 23629                                  
 23630                                  ;;;;;;;;;;;;;;;; 7/18/86
 23631                                  ;;;;;;;;;;;;;;;;
 23632                                  
 23633                                  RELFILE:
 23634                                  	; MSDOS 6.0
 23635 00003B84 06                      	PUSH	ES			;AN002; BL Reset Lstclus and cluspos to
 23636 00003B85 C43E[9E05]              	LES	DI,[THISSFT]		;AN002; BL beginning of file if current
 23637                                  	;cmp	dx,[es:di+19h]
 23638 00003B89 263B5519                	CMP	DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23639 00003B8D 730E                    	JAE	short SKIPRESET			;AN002; BL
 23640                                  	;mov	[es:di+19h],0
 23641 00003B8F 26C745190000            	MOV	word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23642                                  	;mov	dx,[es:di+0Bh]
 23643 00003B95 268B550B                	MOV	DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23644                                  	;mov	[es:di+35h],dx
 23645 00003B99 26895535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23646                                  SKIPRESET:					;AN002; BL
 23647 00003B9D 07                      	POP	ES                    		;AN002; BL
 23648                                  ;
 23649 00003B9E BAFFFF                  	MOV	DX,0FFFFH
 23650 00003BA1 E81312                  	call	RELBLKS
 23651                                  	; 16/12/2022
 23652                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23653 00003BA4 73C2                    	jnc	short UPDATE
 23654                                  SET_ACC_ERRWJ:
 23655                                  	;JC	short SET_ACC_ERRWJ2
 23656                                  	;JMP	SHORT UPDATE
 23657                                  	; 16/12/2022
 23658                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23659                                  	; 10/02/2024
 23660                                  	; ds=ss
 23661 00003BA6 E974FC                  	jmp	SET_ACC_ERR
 23662                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23663                                  	;JC	short SET_ACC_ERRWJ2
 23664                                  	;JMP	SHORT UPDATE
 23665                                  
 23666                                  KILLFIL:
 23667 00003BA9 31DB                    	XOR	BX,BX
 23668 00003BAB 06                      	PUSH	ES
 23669 00003BAC C43E[9E05]              	LES	DI,[THISSFT]
 23670                                  	;mov	[es:di+19h],bx
 23671 00003BB0 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23672                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23673 00003BB4 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23674                                  	;xchg	bx,[es:di+0Bh]
 23675 00003BB8 26875D0B                	XCHG	BX,[ES:DI+SF_ENTRY.sf_firclus]
 23676 00003BBC 07                      	POP	ES
 23677                                  
 23678 00003BBD 09DB                    	OR	BX,BX
 23679                                  	;JZ	short UPDATEJ
 23680                                  	; 16/12/2022
 23681 00003BBF 74A7                    	jz	short UPDATE
 23682                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23683                                  	;jz	short UPDATEJ
 23684                                  
 23685                                  ;; 10/23/86 FastOpen update
 23686 00003BC1 06                      	PUSH	ES			; since first cluster # is 0
 23687 00003BC2 55                      	PUSH	BP			; we must delete the old cache entry
 23688 00003BC3 50                      	PUSH	AX
 23689 00003BC4 51                      	PUSH	CX
 23690 00003BC5 52                      	PUSH	DX
 23691 00003BC6 C42E[8A05]              	LES	BP,[THISDPB]		; get current DPB
 23692                                  	; 15/12/2022
 23693 00003BCA 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23694                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23695                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23696 00003BCE 89D9                    	MOV	CX,BX			; first cluster #
 23697 00003BD0 B402                    	MOV	AH,2			; delete cache entry by drive:firclus
 23698 00003BD2 E8AAEA                  	call	FastOpen_Update		; call fastopen
 23699 00003BD5 5A                      	POP	DX
 23700 00003BD6 59                      	POP	CX
 23701 00003BD7 58                      	POP	AX
 23702 00003BD8 5D                      	POP	BP
 23703 00003BD9 07                      	POP	ES
 23704                                  ;; 10/23/86 FastOpen update
 23705                                  
 23706 00003BDA E8D811                  	call	RELEASE
 23707 00003BDD 72C7                    	JC	short SET_ACC_ERRWJ
 23708                                  UPDATEJ:
 23709                                  	; 20/11/2022
 23710 00003BDF EB87                    	JMP	short UPDATE ; 10/08/2018
 23711                                  
 23712                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23713                                  ;----------------------------------------------------------------------------
 23714                                  ;
 23715                                  ; Procedure Name : DskWrtBufPurge
 23716                                  ;
 23717                                  ; Inputs:
 23718                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23719                                  ;	     sectors, also termed an "Extent".)
 23720                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23721                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23722                                  ;
 23723                                  ; Function:
 23724                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23725                                  ;	are in Extent; they are being over-written.
 23726                                  ;
 23727                                  ; Outputs:
 23728                                  ;       (Same as Input.)
 23729                                  ; Uses:
 23730                                  ;       All registers except DS,AX,SI,DI preserved.
 23731                                  ;       SS override for all global variables.
 23732                                  ;----------------------------------------------------------------------------
 23733                                  ;M039: Created
 23734                                  
 23735                                  ;procedure   DskWrtBufPurge,NEAR
 23736                                  ;
 23737                                  ;ASSUME  DS:NOTHING
 23738                                  
 23739                                  ; 04/05/2019 - Retro DOS v4.0
 23740                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23741                                  
 23742                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23743                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23744                                  
 23745                                  DskWrtBufPurge:
 23746                                  	;SaveReg <bx,cx>
 23747 00003BE1 53                      	push	bx
 23748 00003BE2 51                      	push	cx
 23749                                  
 23750 00003BE3 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23751 00003BE8 89DE                    	mov	si,bx
 23752 00003BEA 01D1                    	add	cx,dx
 23753 00003BEC 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23754                                  
 23755                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23756                                  	;;mov	al,[es:bp+0]
 23757                                  	;mov	al,[es:bp+DPB.DRIVE]
 23758                                  	; 15/12/2022
 23759 00003BEF 268A4600                	mov	al,[es:bp]
 23760                                  
 23761                                  ;	BX:DX = Extent start.
 23762                                  ;	SI:CX = Extent end + 1.
 23763                                  ;	AL = Drive #
 23764                                  
 23765 00003BF3 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23766 00003BF9 7431                    	je	short nosc		; -no, jump.
 23767                                  
 23768                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23769                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23770                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23771                                  
 23772 00003BFB 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23773 00003C00 752A                    	jne	short nosc		; -no, jump.
 23774                                  
 23775 00003C02 50                      	push    ax
 23776 00003C03 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23777 00003C07 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23778                                  
 23779                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23780                                  	;jbe	short sc5		; -yes, jump.
 23781                                  
 23782 00003C0C 39FE                    	cmp	si,di
 23783 00003C0E 7502                    	jne	short sc01
 23784 00003C10 39C1                    	cmp	cx,ax
 23785                                  sc01: 
 23786 00003C12 7617                    	jbe	short sc5
 23787                                  
 23788 00003C14 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23789 00003C19 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23790                                  	
 23791                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23792                                  	;jae	short sc5		; -yes, jump.
 23793                                  
 23794 00003C1C 39FB                    	cmp	bx,di
 23795 00003C1E 7502                    	jne	short sc02
 23796 00003C20 39C2                    	cmp	dx,ax
 23797                                  sc02:
 23798 00003C22 7307                    	jnb	short sc5
 23799                                  
 23800 00003C24 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23801                                  sc5:	
 23802 00003C2B 58                      	pop     ax
 23803                                  
 23804                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23805                                  ;	written.
 23806                                  
 23807                                  nosc:	
 23808 00003C2C E88B1B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23809                                  
 23810                                  _bufq:	
 23811                                  	;cmpo	al,[di+4]
 23812 00003C2F 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23813 00003C32 7527                    	jne	short bufq5		; -no, jump.
 23814                                  
 23815                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23816                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23817                                  
 23818                                  	;cmp	bx,[di+8]
 23819 00003C34 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23820 00003C37 7503                    	jne	short bufq04
 23821                                  	;cmp	dx,[di+6]
 23822 00003C39 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23823                                  bufq04:
 23824 00003C3C 771D                    	ja	short bufq5
 23825                                  
 23826                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23827                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23828                                  
 23829                                  	;cmp	si,[di+8]
 23830 00003C3E 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23831 00003C41 7503                    	jne	short bufq05
 23832                                  	;cmp	cx,[di+6]
 23833 00003C43 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23834                                  bufq05:
 23835 00003C46 7613                    	jbe	short bufq5
 23836                                  
 23837                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23838                                  
 23839                                  	;test	byte [di+5],40h
 23840 00003C48 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23841 00003C4C 7403                    	jz	short bufq4		; -no, jump.
 23842 00003C4E E8E71D                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23843                                  bufq4:
 23844                                  	;mov	word [di+4],20FFh
 23845 00003C51 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23846                                  
 23847 00003C56 E8731B                  	call	SCANPLACE
 23848 00003C59 EB02                    	jmp     short bufq6
 23849                                  bufq5: 
 23850 00003C5B 8B3D                    	mov     di,[di]
 23851                                  	;mov	di,[di+BUFFINFO.buf_next]
 23852                                  bufq6: 
 23853 00003C5D 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23854 00003C62 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23855                                  	
 23856                                  	;RestoreReg <cx,bx>
 23857 00003C64 59                      	pop	cx
 23858 00003C65 5B                      	pop	bx
 23859 00003C66 C3                      	retn
 23860                                  
 23861                                  ;EndProc DskWrtBufPurge
 23862                                  
 23863                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23864                                  ;----------------------------------------------------------------------------
 23865                                  ;
 23866                                  ; Procedure Name : DIV32
 23867                                  ;
 23868                                  ; Inputs:
 23869                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23870                                  ; Function:
 23871                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23872                                  ; Outputs:
 23873                                  ;       CX:AX = quotient , DX= remainder
 23874                                  ; Uses:
 23875                                  ;       All registers except AX,CX,DX preserved.
 23876                                  ;----------------------------------------------------------------------------
 23877                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23878                                  
 23879                                  ; 04/05/2019 - Retro DOS v4.0
 23880                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23881                                  
 23882                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23883                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23884                                  
 23885                                  DIV32:
 23886 00003C67 81FB0002                	cmp	bx,512
 23887 00003C6B 7515                    	jne	short div5
 23888                                  
 23889 00003C6D 89D1                    	mov	cx,dx
 23890 00003C6F 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23891 00003C71 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23892 00003C75 88E0                    	mov	al,ah
 23893 00003C77 88CC                    	mov	ah,cl
 23894 00003C79 88E9                    	mov	cl,ch
 23895 00003C7B 30ED                    	xor	ch,ch
 23896 00003C7D D1E9                    	shr	cx,1
 23897 00003C7F D1D8                    	rcr	ax,1
 23898 00003C81 C3                      	retn
 23899                                  div5:	
 23900 00003C82 89C1                    	mov	cx,ax
 23901 00003C84 89D0                    	mov	ax,dx
 23902 00003C86 31D2                    	xor	dx,dx
 23903 00003C88 F7F3                    	div	bx              ; 0:AX/BX
 23904 00003C8A 91                      	xchg	cx,ax
 23905 00003C8B F7F3                    	div	bx              ; DX:AX/BX
 23906 00003C8D C3                      	retn
 23907                                  
 23908                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23909                                  ;----------------------------------------------------------------------------
 23910                                  ;
 23911                                  ; Procedure Name : SHR32
 23912                                  ;
 23913                                  ; Inputs:
 23914                                  ;	DX:AX = 32 bit sector number
 23915                                  ; Function:
 23916                                  ;       Perform 32 bit shift right
 23917                                  ; Outputs:
 23918                                  ;	AX = cluster number
 23919                                  ;	ZF = 1 if no error
 23920                                  ;	   = 0 if error (cluster number > 64k)
 23921                                  ; Uses:
 23922                                  ;       DX,CX
 23923                                  ;---------------------------------------------------------------------------
 23924                                  ; M017	- SHR32 rewritten for better performance
 23925                                  ; M039	- Additional optimization
 23926                                  
 23927                                  ; 04/05/2019 - Retro DOS v4.0
 23928                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23929                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23930                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS)
 23931                                  SHR32:
 23932                                  	;mov	cl,[es:bp+5]
 23933 00003C8E 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23934 00003C92 30ED                    	xor	ch,ch	    ;ZF=1
 23935 00003C94 E306                    	jcxz	norota
 23936                                  
 23937                                  rotashft2:
 23938 00003C96 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23939 00003C98 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23940 00003C9A E2FA                    	loop	rotashft2
 23941                                  norota:
 23942 00003C9C C3                      	retn
 23943                                  
 23944                                  ;============================================================================
 23945                                  ; DIR.ASM, MSDOS 6.0, 1991
 23946                                  ;============================================================================
 23947                                  ; 27/07/2018 - Retro DOS v3.0
 23948                                  ; 19/05/2019 - Retro DOS v4.0
 23949                                  
 23950                                  ;	TITLE	DIR - Directory and path cracking
 23951                                  ;	NAME	Dir
 23952                                  
 23953                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23954                                  ;---------------------------------------------------------------------------
 23955                                  ;
 23956                                  ; Procedure Name : FINDENTRY,SEARCH
 23957                                  ;
 23958                                  ; Inputs:
 23959                                  ;	[THISDPB] set
 23960                                  ;	[SECCLUSPOS] = 0
 23961                                  ;	[DIRSEC] = Starting directory sector number
 23962                                  ;	[CLUSNUM] = Next cluster of directory
 23963                                  ;	[CLUSFAC] = Sectors/Cluster
 23964                                  ;	[NAME1] = Name to look for
 23965                                  ; Function:
 23966                                  ;	Find file name in disk directory.
 23967                                  ;	"?" matches any character.
 23968                                  ; Outputs:
 23969                                  ;	Carry set if name not found
 23970                                  ;	ELSE
 23971                                  ;	Zero set if attributes match (always except when creating)
 23972                                  ;	AH = Device ID (bit 7 set if not disk)
 23973                                  ;	[THISDPB] = Base of drive parameters
 23974                                  ;	DS = DOSGROUP
 23975                                  ;	ES = DOSGROUP
 23976                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23977                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23978                                  ;	[CURBUF] has directory record with match
 23979                                  ;	[NAME1] has file name
 23980                                  ;	[LASTENT] is entry number of the entry
 23981                                  ; All other registers destroyed.
 23982                                  ;----------------------------------------------------------------------------
 23983                                  
 23984                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23985                                  ;hkn; this point.
 23986                                  
 23987                                  SEARCH:
 23988                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23989                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23990                                  
 23991                                  	; 19/05/2019 - Retro DOS v4.0
 23992                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23993                                  
 23994                                  	; 27/07/2018 - Retro DOS v3.0
 23995                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23996                                  	; 15/03/2018 - Retro DOS v2.0
 23997                                  
 23998                                  	; 24/01/2024
 23999                                  
 24000                                  	;entry	FindEntry
 24001                                  FINDENTRY:
 24002 00003C9D E81704                  	call	STARTSRCH
 24003 00003CA0 A0[6B05]                	MOV	AL,[ATTRIB]
 24004                                  	;and	al,9Eh
 24005 00003CA3 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24006                                  	;cmp	al,8
 24007 00003CA5 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24008 00003CA7 7503                    	JNZ	short NOTVOLSRCH	; No
 24009 00003CA9 E86601                  	CALL	SETROOTSRCH		; Yes force search of root
 24010                                  NOTVOLSRCH:
 24011 00003CAC E8F800                  	CALL	GETENTRY
 24012                                  	;JNC	short SRCH
 24013                                  	;JMP	SETESRET
 24014                                  	; 24/01/2024
 24015 00003CAF 723F                    	jc	short SETESRET
 24016                                  
 24017                                  	;entry	Srch
 24018                                  SRCH:
 24019 00003CB1 1E                      	PUSH	DS
 24020 00003CB2 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24021                                  
 24022                                  ;	(DS:BX) = directory entry address
 24023                                  
 24024 00003CB6 8A27                    	mov	ah,[BX]
 24025                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24026 00003CB8 08E4                    	OR	AH,AH			; End of directory?
 24027 00003CBA 7437                    	JZ	short FREE
 24028                                  
 24029                                  ;hkn; SS override
 24030 00003CBC 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24031 00003CC1 7430                    	JZ	short FREE
 24032                                  	;test	byte [bx+0Bh],8
 24033 00003CC3 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24034                                  					; Volume ID file?
 24035 00003CC7 7405                    	JZ	short CHKFNAM 		; NO
 24036                                  
 24037                                  ;hkn; SS override
 24038 00003CC9 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24039                                  CHKFNAM:
 24040                                  ;	Context ES
 24041 00003CCE 8CD6                    	MOV	SI,SS
 24042 00003CD0 8EC6                    	MOV	ES,SI
 24043 00003CD2 89DE                    	MOV	SI,BX
 24044                                  
 24045                                  ;hkn; NAME1 is in DOSDATA
 24046 00003CD4 BF[4B05]                	MOV	DI,NAME1
 24047                                  ;;;;; 7/29/86
 24048                                  
 24049                                  ;hkn; SS override for NAME1
 24050                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24051                                  	;JNZ	short NO_E5
 24052                                  	;MOV	BYTE [SS:NAME1],05H
 24053                                  	; 22/09/2023
 24054 00003CD7 26803DE5                	cmp	byte [es:di],0E5h
 24055 00003CDB 7504                    	jnz	short NO_E5
 24056 00003CDD 26C60505                	mov	byte [es:di],05h
 24057                                  NO_E5:
 24058                                  ;;;;; 7/29/86
 24059 00003CE1 E86100                  	CALL	MetaCompare
 24060 00003CE4 7429                    	JZ	short FOUND
 24061 00003CE6 1F                      	POP	DS
 24062                                  
 24063                                  	;entry	NEXTENT
 24064                                  NEXTENT:
 24065 00003CE7 C42E[8A05]              	LES	BP,[THISDPB]
 24066 00003CEB E86600                  	CALL	NEXTENTRY
 24067 00003CEE 73C1                    	JNC	short SRCH
 24068                                  	;JMP	SHORT SETESRET
 24069                                  	; 24/01/2024
 24070                                  SETESRET:
 24071 00003CF0 16                      	PUSH	SS
 24072 00003CF1 07                      	POP	ES
 24073 00003CF2 C3                      	retn
 24074                                  FREE:
 24075 00003CF3 1F                      	POP	DS
 24076 00003CF4 8B0E[4803]              	MOV	CX,[LASTENT]
 24077 00003CF8 3B0E[D805]              	CMP	CX,[ENTFREE]
 24078 00003CFC 7304                    	JAE	short TSTALL
 24079 00003CFE 890E[D805]              	MOV	[ENTFREE],CX
 24080                                  TSTALL:
 24081 00003D02 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24082                                  NEXTENTJ:
 24083 00003D06 74DF                    	je	short NEXTENT 		; No - continue search
 24084 00003D08 890E[DA05]              	MOV	[ENTLAST],CX
 24085 00003D0C F9                      	STC
 24086 00003D0D EBE1                    	JMP	SHORT SETESRET
 24087                                  
 24088                                  FOUND:
 24089                                  ; We have a file with a matching name. We must now consider the attributes:
 24090                                  ; ATTRIB	Action
 24091                                  ; ------	------
 24092                                  ; Volume_ID	Is Volume_ID in test?
 24093                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24094                                  ;		If create then Is ATTRIB equal to test?
 24095                                  
 24096 00003D0F 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24097 00003D11 1F                      	POP	DS
 24098 00003D12 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24099                                  	;and	ah,9Eh
 24100 00003D16 80E4DE                  	AND	AH,~attr_ignore
 24101                                  	;lea	si,[si+15]
 24102 00003D19 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24103                                  					; point to first cluster field
 24104                                  	;test	ch,8
 24105 00003D1C F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24106 00003D1F 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24107                                  	;test	ah,8
 24108 00003D21 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24109                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24110                                  	; 16/12/2022
 24111 00003D24 74C1                    	jz	short NEXTENT ; 19/05/2019
 24112                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24113                                  	;JZ	short NEXTENTJ
 24114 00003D26 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24115 00003D28 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24116                                  check_one_volume_id:
 24117                                  	;CMP	ah,8
 24118 00003D2A 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24119                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24120                                  	; 16/12/2022
 24121 00003D2D 74B8                    	je	short NEXTENT ; 19/05/2019
 24122                                  	;JZ	short NEXTENTJ
 24123 00003D2F E89903                  	CALL	MatchAttributes
 24124 00003D32 7407                    	JZ	SHORT RETFF
 24125 00003D34 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24126                                  	; 16/12/2022
 24127                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24128 00003D39 74AC                    	jz	short NEXTENT ; 19/05/2019
 24129                                  RETFF:
 24130 00003D3B C42E[8A05]              	LES	BP,[THISDPB]
 24131                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24132                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24133                                  	; 15/12/2022
 24134 00003D3F 268A6600                	MOV	AH,[ES:BP]
 24135                                  ;SETESRET:
 24136                                  	;PUSH	SS
 24137                                  	;POP	ES
 24138                                  	;retn
 24139                                  	; 24/01/2024
 24140 00003D43 EBAB                    	jmp	short SETESRET	
 24141                                  
 24142                                  ;----------------------------------------------------------------------------
 24143                                  ;
 24144                                  ; Procedure Name : MetaCompare
 24145                                  ;
 24146                                  ; Inputs:
 24147                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24148                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24149                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24150                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24151                                  ; Function:
 24152                                  ;	Compare FCB style names allowing for ? match to any char
 24153                                  ; Outputs:
 24154                                  ;	Zero if match else NZ
 24155                                  ; Destroys CX,SI,DI all others preserved
 24156                                  ;----------------------------------------------------------------------------
 24157                                  
 24158                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24159                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24160                                  
 24161                                  MetaCompare:
 24162 00003D45 B90B00                  	MOV	CX,11
 24163                                  WILDCRD:
 24164 00003D48 F3A6                    	REPE	CMPSB
 24165 00003D4A 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24166                                  CHECK_META:
 24167 00003D4C 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24168 00003D51 74F5                    	JZ	short WILDCRD
 24169                                  MetaRet:
 24170 00003D53 C3                       	retn				; Zero set, Match
 24171                                  
 24172                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24173                                  ;----------------------------------------------------------------------------
 24174                                  ;
 24175                                  ; Procedure Name : NEXTENTRY
 24176                                  ;
 24177                                  ; Inputs:
 24178                                  ;	Same as outputs of GETENTRY, above
 24179                                  ; Function:
 24180                                  ;	Update BX, and [LASTENT] for next directory entry.
 24181                                  ;	Carry set if no more.
 24182                                  ;----------------------------------------------------------------------------
 24183                                  
 24184                                  NEXTENTRY:
 24185                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24186                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24187                                  
 24188                                  	; 19/05/2019 - Retro DOS v4.0
 24189                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24190                                  
 24191                                  	; 27/07/2018 - Retro DOS v3.0
 24192                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24193                                  	; 15/03/2018 - Retro DOS v2.0
 24194                                  
 24195 00003D54 A1[4803]                	MOV	AX,[LASTENT]
 24196 00003D57 3B06[DA05]              	CMP	AX,[ENTLAST]
 24197 00003D5B 7422                    	JZ	short NONE
 24198 00003D5D 40                      	INC	AX
 24199                                  	;ADD	BX,32
 24200 00003D5E 8D5F20                  	LEA	BX,[BX+32]
 24201 00003D61 39D3                    	CMP	BX,DX
 24202                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24203                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24204                                  	; 16/12/2022
 24205 00003D63 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24206 00003D65 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24207 00003D69 FEC3                    	INC	BL
 24208 00003D6B 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24209 00003D6F 7215                    	JB	short SAMECLUS
 24210 00003D71 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24211 00003D75 E89816                  	call	IsEOF
 24212 00003D78 7305                    	JAE	short NONE
 24213                                  	; 23/07/2019
 24214 00003D7A 83FB02                  	CMP	BX,2
 24215                                  	;JB	short NONE
 24216                                  	;JMP	short GETENT
 24217                                  	; 16/12/2022
 24218 00003D7D 732B                    	jnb	short GETENT
 24219                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24220                                  	;JB	short NONE
 24221                                  	;JMP	short GETENT
 24222                                  NONE:
 24223 00003D7F F9                      	STC
 24224 00003D80 C3                      	retn
 24225                                  HAVIT:
 24226 00003D81 A3[4803]                	MOV	[LASTENT],AX
 24227 00003D84 F8                      	CLC
 24228                                  nextentry_retn:
 24229 00003D85 C3                      	retn
 24230                                  
 24231                                  SAMECLUS:
 24232 00003D86 881E[7305]              	MOV	[SECCLUSPOS],BL
 24233 00003D8A A3[4803]                	MOV	[LASTENT],AX
 24234 00003D8D 1E                      	PUSH	DS
 24235 00003D8E C53E[E205]              	LDS	DI,[CURBUF]
 24236                                  	; 19/05/2019
 24237                                  	; MSDOS 6.0
 24238                                  	;;mov	dx,[di+8]
 24239                                  	; 23/09/2023
 24240                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24241                                  ;hkn; SS override
 24242                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24243                                  
 24244                                  ; 14/02/2024
 24245                                  %if 0
 24246                                  	; 23/09/2023
 24247                                  	mov	si,[di+BUFFINFO.buf_sector+2]
 24248                                  	
 24249                                  	;mov	dx,[di+6]
 24250                                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24251                                  
 24252                                  	;inc	dx ; MSDOS 3.3
 24253                                  	; MSDOS 6.0
 24254                                  	;ADD	DX,1				;AN000; >32mb
 24255                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24256                                  	; 23/09/2023
 24257                                  	inc	dx
 24258                                  	jnz	short nextexntry_fc
 24259                                  	inc	si
 24260                                  	;inc	word [SS:HIGH_SECTOR]
 24261                                  nextexntry_fc:
 24262                                  	; 23/09/2023
 24263                                  	mov	[SS:HIGH_SECTOR],si
 24264                                  	; MSDOS 3.3 & MSDOS 6.0
 24265                                  	POP	DS
 24266                                  %else
 24267                                  	; 14/02/2024 - Retro DOS v5.0
 24268 00003D92 C55506                  	lds	dx,[di+BUFFINFO.buf_sector]
 24269 00003D95 8CDE                    	mov	si,ds
 24270 00003D97 1F                      	pop	ds
 24271 00003D98 42                      	inc	dx
 24272 00003D99 7501                    	jnz	short nextexntry_fc
 24273 00003D9B 46                      	inc	si
 24274                                  nextexntry_fc:
 24275 00003D9C 8936[0706]              	mov	[HIGH_SECTOR],si
 24276                                  %endif
 24277                                  
 24278 00003DA0 E868F8                  	call	FIRSTCLUSTER
 24279 00003DA3 31DB                    	XOR	BX,BX
 24280 00003DA5 EB21                    	JMP	short SETENTRY
 24281                                  
 24282                                  ;----------------------------------------------------------------------------
 24283                                  ;
 24284                                  ; Procedure Name : GETENTRY
 24285                                  ;
 24286                                  ; Inputs:
 24287                                  ;	[LASTENT] has directory entry
 24288                                  ;	ES:BP points to drive parameters
 24289                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24290                                  ; Function:
 24291                                  ;	Locates directory entry in preparation for search
 24292                                  ;	GETENT provides entry for passing desired entry in AX
 24293                                  ; Outputs:
 24294                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24295                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24296                                  ;	[LASTENT] = New directory entry number
 24297                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24298                                  ;	Carry set if error (currently user FAILed to I 24)
 24299                                  ;----------------------------------------------------------------------------
 24300                                  
 24301                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24302                                  GETENTRY:
 24303                                  	; 27/07/2018 - Retro DOS v3.0
 24304 00003DA7 A1[4803]                	MOV	AX,[LASTENT]
 24305                                  
 24306                                  	;entry	GETENT
 24307                                  GETENT:
 24308 00003DAA A3[4803]                	MOV	[LASTENT],AX
 24309                                  ;
 24310                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24311                                  ; directory.
 24312                                  ;
 24313 00003DAD B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24314 00003DAF D3C0                    	rol	ax,cl			; keep hight order bits
 24315 00003DB1 89C2                    	mov	dx,ax
 24316                                  	; 19/05/2019 - Retro DOS v4.0
 24317                                  	;and	ax,0FFE0h
 24318                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24319                                  	;and	ax,~(32-1)		; mask off high order bits
 24320                                  	; 16/12/2022
 24321 00003DB3 24E0                    	and	al,0E0h ; ~31
 24322 00003DB5 83E21F                  	and	dx,1Fh
 24323                                  	;and	dx,32-1			; mask off low order bits
 24324                                  ;
 24325                                  ; DX:AX contain the byte offset of the required directory entry from the
 24326                                  ; beginning of the directory. Convert this to a sector number. Round the
 24327                                  ; sector size down to a multiple of 32.
 24328                                  ;
 24329                                  	;mov	bx,[es:bp+2]
 24330 00003DB8 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24331 00003DBC 80E3E0                  	and	bl,0E0h
 24332                                  	;AND	BL,255-31		; Must be multiple of 32
 24333 00003DBF F7F3                    	DIV	BX
 24334                                  	; 14/02/2024
 24335                                  	;MOV	BX,DX			; Position within sector
 24336                                  				; NOTE: This BX value is not used in DIRREAD
 24337                                  				; Erdogan Tan - 14/02/2024
 24338                                  	;PUSH	BX
 24339 00003DC1 52                      	push	dx
 24340                                  	;
 24341 00003DC2 E8F2F7                  	call	DIRREAD
 24342 00003DC5 5B                      	POP	BX
 24343                                  	;retc
 24344 00003DC6 72BD                    	jc	short nextentry_retn
 24345                                  SETENTRY:
 24346 00003DC8 8B16[E205]              	MOV	DX,[CURBUF]
 24347                                  	;add	dx,16 ; MSDOS 3.3
 24348                                  	;add	dx,20 ; MSDOS 6.0 
 24349 00003DCC 83C214                  	ADD	DX,BUFINSIZ
 24350 00003DCF 01D3                    	ADD	BX,DX
 24351                                  	;add	dx,[es:bp+2]
 24352 00003DD1 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24353                                  	; 29/12/2022
 24354                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24355 00003DD5 F8                      	clc
 24356 00003DD6 C3                      	retn
 24357                                  
 24358                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24359                                  ;----------------------------------------------------------------------------
 24360                                  ;
 24361                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24362                                  ;
 24363                                  ; Inputs:
 24364                                  ;	BX cluster number of start of directory
 24365                                  ;	ES:BP Points to DPB
 24366                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24367                                  ; Function:
 24368                                  ;	Set up a directory search
 24369                                  ; Outputs:
 24370                                  ;	[DIRSTART] = BX
 24371                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24372                                  ;	Carry set if error (currently user FAILed to I 24)
 24373                                  ; destroys AX,DX,BX
 24374                                  ;----------------------------------------------------------------------------
 24375                                  
 24376                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24377                                  SETDIRSRCH:
 24378 00003DD7 09DB                    	OR	BX,BX
 24379 00003DD9 7437                    	JZ	short SETROOTSRCH
 24380 00003DDB 891E[C205]              	MOV	[DIRSTART],BX
 24381                                  	;mov	al,[es:bp+4]
 24382 00003DDF 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24383 00003DE3 FEC0                    	INC	AL
 24384 00003DE5 A2[7705]                	MOV	[CLUSFAC],AL
 24385                                  
 24386                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24387                                  	;SAVE	<SI>
 24388 00003DE8 56                      	push	si
 24389                                  	;test	byte [FastOpenFlg],2
 24390 00003DE9 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24391 00003DEE 7507                    	JNZ	short UNP_OK
 24392                                  
 24393                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24394                                  	;invoke	UNPACK
 24395 00003DF0 E83416                  	call	UNPACK
 24396 00003DF3 7302                    	JNC	short UNP_OK
 24397                                  	;RESTORE <SI>
 24398 00003DF5 5E                      	pop	si
 24399                                  	;return
 24400 00003DF6 C3                      	retn
 24401                                  
 24402                                  UNP_OK:
 24403 00003DF7 893E[BC05]              	MOV	[CLUSNUM],DI
 24404 00003DFB 89DA                    	MOV	DX,BX
 24405 00003DFD 30DB                    	XOR	BL,BL
 24406 00003DFF 881E[7305]              	MOV	[SECCLUSPOS],BL
 24407                                  	;invoke	FIGREC
 24408 00003E03 E8DF0E                  	call	FIGREC
 24409                                  	;RESTORE <SI>
 24410 00003E06 5E                      	pop	si
 24411                                  	
 24412                                  	; 19/05/2019 - Retro DOS v4.0
 24413                                  
 24414                                  	; MSDOS 6.0
 24415                                  	;PUSH	DX			   ;AN000; >32mb
 24416                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24417                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24418                                  	;POP	DX			   ;AN000; >32mb
 24419                                  
 24420                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24421                                  	;push	dx
 24422                                  	;mov	dx,[HIGH_SECTOR]
 24423                                  	;mov	[DIRSEC+2],dx
 24424                                  	;pop	dx
 24425                                  	;MOV	[DIRSEC],dx
 24426                                  	; 16/12/2022
 24427 00003E07 A1[0706]                	mov	ax,[HIGH_SECTOR]
 24428 00003E0A A3[C005]                	mov	[DIRSEC+2],AX
 24429 00003E0D 8916[BE05]              	MOV	[DIRSEC],DX
 24430                                  
 24431                                  	; 16/12/2022
 24432                                  	; cf=0 (at the return of FIGREC)
 24433                                  	;CLC
 24434 00003E11 C3                      	retn
 24435                                  
 24436                                  	;entry	SETROOTSRCH
 24437                                  SETROOTSRCH:
 24438 00003E12 31C0                    	XOR	AX,AX
 24439 00003E14 A3[C205]                	MOV	[DIRSTART],AX
 24440                                  	; 22/09/2023
 24441 00003E17 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24442 00003E1A A2[7305]                	MOV	[SECCLUSPOS],AL
 24443 00003E1D 48                      	DEC	AX
 24444 00003E1E A3[BC05]                	MOV	[CLUSNUM],AX
 24445                                  	;mov	ax,[es:bp+0Bh]
 24446 00003E21 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24447                                  	; 19/05/2019
 24448                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24449                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24450 00003E25 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24451 00003E29 29D0                    	SUB	AX,DX
 24452 00003E2B A2[7705]                	MOV	[CLUSFAC],AL
 24453 00003E2E 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24454                                  	; 22/09/2023
 24455                                  	; MSDOS 6.0
 24456                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24457 00003E32 F8                      	CLC
 24458 00003E33 C3                      	retn
 24459                                  
 24460                                  ;============================================================================
 24461                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24462                                  ;============================================================================
 24463                                  ; 27/07/2018 - Retro DOS v3.0
 24464                                  ; 19/05/2019 - Retro DOS v4.0 
 24465                                  
 24466                                  ;	TITLE	DIR2 - Directory and path cracking
 24467                                  ;	NAME	Dir2
 24468                                  
 24469                                  ;Break	<GETPATH -- PARSE A WFP>
 24470                                  ;----------------------------------------------------------------------------
 24471                                  ;
 24472                                  ; Procedure Name : GETPATH
 24473                                  ;
 24474                                  ; Inputs:
 24475                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24476                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24477                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24478                                  ;		( = -1 if current dir not involved, else
 24479                                  ;		 Points to first char after last "/" of current dir part)
 24480                                  ;	[THISCDS] Points to CDS being used
 24481                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24482                                  ;	[NoSetDir] set
 24483                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24484                                  ; Function:
 24485                                  ;	Crack the path
 24486                                  ; Outputs:
 24487                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24488                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24489                                  ;	ID1 field of [THISCDS] updated appropriately
 24490                                  ;	[ATTRIB] = [SATTRIB]
 24491                                  ;	ES:BP Points to DPB
 24492                                  ;	Carry set if bad path
 24493                                  ;	   SI Points to path element causing failure
 24494                                  ;	   Zero set
 24495                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24496                                  ;	      start a search on the last directory
 24497                                  ;	      CL is zero if there is a bad name in the path
 24498                                  ;	      CL is non-zero if the name was simply not found
 24499                                  ;		 [ENTFREE] may have free spot in directory
 24500                                  ;		 [NAME1] is the name.
 24501                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24502                                  ;	   Zero reset
 24503                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24504                                  ;		or path too long or malformed path
 24505                                  ;	ELSE
 24506                                  ;	   [CurBuf] = -1 if root directory
 24507                                  ;	   [CURBUF] contains directory record with match
 24508                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24509                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24510                                  ;	   AH = device ID
 24511                                  ;	      bit 7 of AH set if device SI and BX
 24512                                  ;	      will point DOSGROUP relative The firclus
 24513                                  ;	      field of the device entry contains the device pointer
 24514                                  ;	   [NAME1] Has name looked for
 24515                                  ;	   If last element is a directory zero is set and:
 24516                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24517                                  ;	      are set up to start a search on it.
 24518                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24519                                  ;	      like that for a file (except for zero flag)
 24520                                  ;	   If last element is a file zero is reset
 24521                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24522                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24523                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24524                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24525                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24526                                  ; DS preserved, Others destroyed
 24527                                  ;---------------------------------------------------------------------------
 24528                                  
 24529                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24530                                  ;hkn; DS already set up at this point.
 24531                                  
 24532                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24533                                  GETPATH:
 24534                                  	;mov	word [CREATING],0E500h
 24535 00003E34 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24536                                  
 24537                                  ; Same as GetPath only CREATING and DELALL already set
 24538                                  
 24539                                  	;entry	GetPathNoSet
 24540                                  GetPathNoSet:
 24541                                  	;mov	byte [EXTERR_LOCUS],2	
 24542 00003E3A C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24543 00003E3F C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24544                                  
 24545                                  ; See if the input indicates a device that has already been detected. If so,
 24546                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24547                                  
 24548 00003E45 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24549                                  	;cmp	word [DI+1],5C3Ah
 24550                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24551 00003E49 817D013A5C              	cmp	word [DI+1],':\'
 24552 00003E4E 7437                    	JZ	short CrackIt
 24553                                  
 24554                                  ; Let ChkDev find it in the device list
 24555                                  
 24556 00003E50 83C703                  	ADD	DI,3
 24557                                  	; 18/08/2018
 24558                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24559                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24560                                  	; 16/12/2022
 24561                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24562 00003E53 E89E00                  	CALL	CHKDEV
 24563 00003E56 722D                    	JC	short InternalError
 24564                                  
 24565                                  Build_devJ:
 24566 00003E58 A0[6D05]                	MOV	AL,[SATTRIB]
 24567 00003E5B A2[6B05]                	MOV	[ATTRIB],AL
 24568                                  	;mov	byte [EXTERR_LOCUS],1
 24569 00003E5E C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24570                                  					; "finding" a char device
 24571                                  					; set LOCUS to Unknown. This makes
 24572                                  					; certain idiotic problems reported
 24573                                  					; by a certain 3 letter OEM go away.
 24574                                  
 24575                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24576                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24577                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24578                                  ; wfp into the share set.
 24579                                  ;
 24580                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24581                                  ; non-space seen +1.  This position is kept in DX.
 24582                                  
 24583                                  ;hkn; SS is DOSDATA
 24584 00003E63 16                      	push	ss
 24585 00003E64 07                      	pop	es
 24586                                  
 24587                                  ;hkn; NAME1 is in DOSDATA
 24588 00003E65 BE[4B05]                	mov	si,NAME1
 24589 00003E68 8B3E[B205]              	mov	di,[WFP_START]
 24590 00003E6C 89FA                    	mov	dx,di
 24591 00003E6E B90800                  	mov	cx,8			; 8 chars in device name
 24592                                  MoveLoop:
 24593 00003E71 AC                      	lodsb
 24594 00003E72 AA                      	stosb
 24595 00003E73 3C20                    	cmp	al," "
 24596 00003E75 7402                    	jz	short NoSave
 24597                                  
 24598 00003E77 89FA                    	mov	dx,di
 24599                                  NoSave:
 24600 00003E79 E2F6                    	loop	MoveLoop
 24601                                  
 24602                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24603                                  ; at this point.
 24604                                  
 24605 00003E7B 89D7                    	mov	di,dx
 24606                                  	;mov	byte [di],0		; end of string
 24607                                  	; 15/02/2024
 24608 00003E7D 880D                    	mov	[di],cl ; 0
 24609 00003E7F E8B502                  	call	Build_device_ent	; Clears carry sets zero
 24610 00003E82 FEC0                    	INC	AL			; reset zero
 24611 00003E84 C3                      	retn
 24612                                  
 24613                                  InternalError:
 24614                                  InternalError_loop:
 24615 00003E85 EBFE                    	JMP	short InternalError_loop ; freeze
 24616                                  
 24617                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24618                                  
 24619                                  CrackIt:
 24620                                  ; 15/02/2024
 24621                                  %if 0
 24622                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24623                                  	CMP	SI,-1			; valid?
 24624                                  	JNZ	short LOOK_SING		; Yes, use it.
 24625                                  	LEA	SI,[DI+3]		; skip D:\.
 24626                                  LOOK_SING:
 24627                                  %endif
 24628                                  	;mov	byte [ATTRIB],16h
 24629 00003E87 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24630                                  					; Attributes to search through Dirs
 24631 00003E8C C43E[A205]              	LES	DI,[THISCDS]
 24632 00003E90 B8FFFF                  	MOV	AX,-1
 24633                                  	;mov	bx,[es:di+73]
 24634 00003E93 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24635 00003E97 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24636                                  
 24637                                  ; AX = -1
 24638                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24639                                  ;      has been uncertainly changed.
 24640                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24641                                  ;      may be -1 if no current directory part has been used.
 24642                                  
 24643 00003E9B 39C6                    	CMP	SI,AX			; if Current directory is not part
 24644 00003E9D 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24645 00003E9F 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24646                                  
 24647                                  ; DOS 3.3  6/25/86
 24648 00003EA1 7437                    	JZ	short NO_CURR_D		; no, crack from the root
 24649                                  	;test	byte [FastOpenFlg],1
 24650 00003EA3 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24651 00003EA8 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24652 00003EAA 06                      	PUSH	ES			; save registers
 24653 00003EAB 57                      	PUSH	DI
 24654 00003EAC 51                      	PUSH	CX
 24655 00003EAD FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24656 00003EB0 56                      	PUSH	SI
 24657 00003EB1 53                      	PUSH	BX
 24658                                  
 24659 00003EB2 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24660 00003EB6 8B36[B205]              	MOV	SI,[WFP_START]
 24661                                  
 24662                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24663 00003EBA BB[300D]                	MOV	BX,FastOpenTable
 24664 00003EBD BF[460D]                	MOV	DI,Dir_Info_Buff
 24665 00003EC0 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24666                                  	;mov	al,1
 24667 00003EC3 B001                    	MOV	AL,FONC_Look_up
 24668 00003EC5 1E                      	PUSH	DS
 24669 00003EC6 07                      	POP	ES
 24670                                  	;call	far [BX+2]
 24671 00003EC7 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24672 00003ECA 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24673                                  					; Go to Got_Srch_cluster
 24674                                  	; 29/12/2022
 24675                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24676                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24677                                  	;stc
 24678                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24679                                  
 24680 00003ECC 803C01                  	cmp	byte [si],1
 24681                                  GO_Chk_end1:	; 29/12/2022
 24682 00003ECF F5                      	cmc 
 24683                                  	; [si] = 0 -> cf = 0
 24684                                  	; [si] > 0 -> cf = 1
 24685                                  
 24686                                  ;GO_Chk_end1:
 24687                                  	; 29/12/2022
 24688                                  	;clc
 24689                                  
 24690                                  GO_Chk_end:				; restore registers
 24691 00003ED0 5B                      	POP	BX
 24692 00003ED1 5E                      	POP	SI
 24693 00003ED2 8F44FF                  	POP	word [SI-1]
 24694 00003ED5 59                      	POP	CX
 24695 00003ED6 5F                      	POP	DI
 24696 00003ED7 07                      	POP	ES
 24697 00003ED8 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24698                                  
 24699                                  ; DOS 3.3  6/25/86
 24700                                  ;
 24701                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24702                                  ; of path and go crack from root.
 24703                                  
 24704                                  NO_CURR_D:
 24705 00003EDA 8B36[B205]              	MOV	SI,[WFP_START]
 24706                                  	;LEA	SI,[SI+3]		; Skip "d:/"
 24707                                  	; 15/02/2024
 24708 00003EDE 83C603                  	add	si,3
 24709 00003EE1 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24710 00003EE5 EB3B                    	JMP	short ROOTPATH
 24711                                  
 24712                                  ; We are able to crack from the current directory part. Go set up for search
 24713                                  ; of specified cluster.
 24714                                  
 24715                                  GOT_SEARCH_CLUSTER:
 24716 00003EE7 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24717 00003EEB E8E9FE                  	call	SETDIRSRCH
 24718                                  	;JC	short SETFERR
 24719                                  	;JMP	short FINDPATH
 24720                                  	; 16/12/2022
 24721 00003EEE 7343                    	jnc	short FINDPATH ; 17/08/2018
 24722                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24723                                  	;JC	short SETFERR
 24724                                  	;JMP	short FINDPATH
 24725                                  SETFERR:
 24726 00003EF0 30C9                    	XOR	CL,CL			; set zero
 24727 00003EF2 F9                      	STC
 24728 00003EF3 C3                      	retn
 24729                                  
 24730                                  ;---------------------------------------------------------------------------
 24731                                  ;
 24732                                  ; Procedure Name : ChkDev
 24733                                  ;
 24734                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24735                                  ;   device.
 24736                                  ; Blasts CX,SI,DI,AX,BX
 24737                                  ;---------------------------------------------------------------------------
 24738                                  
 24739                                  CHKDEV:
 24740 00003EF4 89FE                    	MOV	SI,DI
 24741 00003EF6 8CD7                    	MOV	DI,SS
 24742 00003EF8 8EC7                    	MOV	ES,DI
 24743                                  
 24744 00003EFA BF[4B05]                	MOV	DI,NAME1
 24745 00003EFD B90900                  	MOV	CX,9
 24746                                  TESTLOOP:
 24747 00003F00 E83110                  	call	GETLET
 24748                                  
 24749 00003F03 3C2E                    	CMP	AL,'.'
 24750 00003F05 740E                    	JZ	short TESTDEVICE
 24751 00003F07 E88010                  	call	PATHCHRCMP
 24752 00003F0A 7407                    	JZ	short NOTDEV
 24753 00003F0C 08C0                    	OR	AL,AL
 24754 00003F0E 7405                    	JZ	short TESTDEVICE
 24755                                  
 24756 00003F10 AA                      	STOSB
 24757 00003F11 E2ED                    	LOOP	TESTLOOP
 24758                                  NOTDEV:
 24759 00003F13 F9                      	STC
 24760 00003F14 C3                      	retn
 24761                                  
 24762                                  TESTDEVICE:
 24763                                  	;ADD	CX,2
 24764                                  	; 23/09/2023
 24765 00003F15 41                      	inc	cx
 24766 00003F16 41                      	inc	cx
 24767 00003F17 B020                    	MOV	AL,' '
 24768 00003F19 F3AA                    	REP	STOSB
 24769 00003F1B 8CD0                    	MOV	AX,SS
 24770 00003F1D 8ED8                    	MOV	DS,AX
 24771                                  	;call	DEVNAME
 24772                                  	;retn
 24773                                  	; 18/12/2022
 24774 00003F1F E9B601                  	jmp	DEVNAME
 24775                                  
 24776                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24777                                  ;----------------------------------------------------------------------------
 24778                                  ;
 24779                                  ; Procedure Name : ROOTPATH,FINDPATH
 24780                                  ;
 24781                                  ; Inputs:
 24782                                  ;	Same as FINDPATH but,
 24783                                  ;	SI Points to asciz string of path which is assumed to start at
 24784                                  ;		the root (no leading '/').
 24785                                  ; Function:
 24786                                  ;	Search from root for path
 24787                                  ; Outputs:
 24788                                  ;	Same as FINDPATH but:
 24789                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24790                                  ;	[NoSetDir] is ignored.
 24791                                  ;----------------------------------------------------------------------------
 24792                                  
 24793                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24794                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24795                                  
 24796                                  ROOTPATH:
 24797 00003F22 E8EDFE                  	call	SETROOTSRCH
 24798 00003F25 803C00                  	CMP	BYTE [SI],0
 24799 00003F28 7509                    	JNZ	short FINDPATH
 24800                                  
 24801                                  ; Root dir specified
 24802 00003F2A A0[6D05]                	MOV	AL,[SATTRIB]
 24803 00003F2D A2[6B05]                	MOV	[ATTRIB],AL
 24804 00003F30 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24805                                  					; (dir), clears carry.
 24806 00003F32 C3                      	retn
 24807                                  
 24808                                  ; Inputs:
 24809                                  ;	[ATTRIB] Set to get through directories
 24810                                  ;	[SATTRIB] Set to find last element
 24811                                  ;	ES:BP Points to DPB
 24812                                  ;	SI Points to asciz string of path (no leading '/').
 24813                                  ;	[SECCLUSPOS] = 0
 24814                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24815                                  ;	[CLUSNUM] = Cluster # of next cluster
 24816                                  ;	[CLUSFAC] = Sectors per cluster
 24817                                  ;	[NoSetDir] set
 24818                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24819                                  ;		( = -1 if current dir not involved, else
 24820                                  ;		 Points to first char after last "/" of current dir part)
 24821                                  ;	[THISCDS] Points to CDS being used
 24822                                  ;	[CREATING] and [DELALL] set
 24823                                  ; Function:
 24824                                  ;	Parse path name
 24825                                  ; Outputs:
 24826                                  ;	ID1 field of [THISCDS] updated appropriately
 24827                                  ;	[ATTRIB] = [SATTRIB]
 24828                                  ;	ES:BP Points to DPB
 24829                                  ;	[THISDPB] = ES:BP
 24830                                  ;	Carry set if bad path
 24831                                  ;	   SI Points to path element causing failure
 24832                                  ;	   Zero set
 24833                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24834                                  ;	      start a search on the last directory
 24835                                  ;	      CL is zero if there is a bad name in the path
 24836                                  ;	      CL is non-zero if the name was simply not found
 24837                                  ;		 [ENTFREE] may have free spot in directory
 24838                                  ;		 [NAME1] is the name.
 24839                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24840                                  ;	   Zero reset
 24841                                  ;	      File in middle of path or bad name in path
 24842                                  ;		or path too long or malformed path
 24843                                  ;	ELSE
 24844                                  ;	   [CURBUF] contains directory record with match
 24845                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24846                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24847                                  ;	   [NAME1] Has name looked for
 24848                                  ;	   AH = device ID
 24849                                  ;	      bit 7 of AH set if device SI and BX
 24850                                  ;	      will point DOSGROUP relative The firclus
 24851                                  ;	      field of the device entry contains the device pointer
 24852                                  ;	   If last element is a directory zero is set and:
 24853                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24854                                  ;	      are set up to start a search on it,
 24855                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24856                                  ;	      like that for a file (except for zero flag)
 24857                                  ;	   If last element is a file zero is reset
 24858                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24859                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24860                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24861                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24862                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24863                                  ; Destroys all other registers
 24864                                  
 24865                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24866                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24867                                  
 24868                                      	;entry	FINDPATH
 24869                                  FINDPATH:
 24870 00003F33 06                      	PUSH	ES			; Save ES:BP
 24871 00003F34 56                      	PUSH	SI
 24872 00003F35 89F7                    	MOV	DI,SI
 24873 00003F37 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24874 00003F3B 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24875 00003F40 740E                    	JZ	short NOIDS		; No current dir part
 24876 00003F42 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24877 00003F46 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24878 00003F48 C43E[A205]              	LES	DI,[THISCDS]
 24879                                  	;mov	[es:di+73],cx
 24880 00003F4C 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 24881                                  NOIDS:
 24882                                  
 24883                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24884                                  ; character in the string. CX,DI may be destroyed.
 24885                                  ;
 24886                                  ;	invoke	NAMETRANS
 24887                                  ;	MOV	CL,AL
 24888                                  ;
 24889                                  ; The above is the slow method. The name has *already* been munged by
 24890                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24891                                  ; the name until ., \ or 0 is hit.
 24892                                  
 24893                                  	;MOV	AX,SS
 24894                                  	;MOV	ES,AX
 24895                                  	; 15/02/2024 - Retro DOS v4.1
 24896 00003F50 16                      	push	ss
 24897 00003F51 07                      	pop	es
 24898                                  
 24899                                  ;hkn; Name1 is in DOSDATA
 24900 00003F52 BF[4B05]                	MOV	DI,NAME1
 24901 00003F55 B82020                  	MOV	AX,'  ' ; 2020h
 24902 00003F58 AA                      	STOSB
 24903 00003F59 AB                      	STOSW
 24904 00003F5A AB                      	STOSW
 24905 00003F5B AB                      	STOSW
 24906 00003F5C AB                      	STOSW
 24907 00003F5D AB                      	STOSW
 24908                                  
 24909                                  ;hkn; Name1 is in DOSDATA
 24910 00003F5E BF[4B05]                	MOV	DI,NAME1
 24911 00003F61 30E4                    	XOR	AH,AH			; bits for CL
 24912                                  GetNam:
 24913                                  	; 19/05/2019 - Retro DOS v4.0
 24914                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24915                                  
 24916                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24917                                  	; 16/12/2022
 24918                                  	;inc	cl ; not required !	
 24919                                  	
 24920 00003F63 AC                      	LODSB
 24921 00003F64 3C2E                    	CMP	AL,'.'	; 2Eh
 24922 00003F66 7412                    	JZ	short _SetExt
 24923 00003F68 08C0                    	OR	AL,AL
 24924 00003F6A 7424                    	JZ	short _GetDone
 24925 00003F6C 3C5C                    	CMP	AL,'\'	; 5Ch
 24926 00003F6E 7420                    	JZ	short _GetDone
 24927 00003F70 3C3F                    	CMP	AL,'?'	; 3Fh
 24928 00003F72 7503                    	JNZ	short StoNam
 24929 00003F74 80CC01                  	OR	AH,1
 24930                                  StoNam: 
 24931 00003F77 AA                      	STOSB
 24932 00003F78 EBE9                    	JMP	short GetNam
 24933                                  _SetExt:
 24934 00003F7A BF[5305]                	MOV	DI,NAME1+8
 24935                                  GetExt:
 24936 00003F7D AC                      	LODSB
 24937 00003F7E 08C0                    	OR	AL,AL
 24938 00003F80 740E                    	JZ	short _GetDone
 24939 00003F82 3C5C                    	CMP	AL,'\'
 24940 00003F84 740A                    	JZ	short _GetDone
 24941 00003F86 3C3F                    	CMP	AL,'?'
 24942 00003F88 7503                    	JNZ	short StoExt
 24943 00003F8A 80CC01                  	OR	AH,1
 24944                                  StoExt: 
 24945 00003F8D AA                      	STOSB
 24946 00003F8E EBED                    	JMP	short GetExt
 24947                                  _GetDone:
 24948 00003F90 4E                      	DEC	SI
 24949 00003F91 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24950 00003F93 80C980                  	OR	CL,80H
 24951 00003F96 5F                      	POP	DI			; Start of this element
 24952 00003F97 07                      	POP	ES			; Restore ES:BP
 24953 00003F98 39FE                    	CMP	SI,DI
 24954 00003F9A 7503                    	JNZ	short check_device
 24955 00003F9C E9E000                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24956                                  check_device:
 24957 00003F9F 56                      	PUSH	SI			; Start of next element
 24958                                  	;MOV	AL,[SI]
 24959                                  	; 15/02/2024
 24960 00003FA0 08C0                    	OR	AL,AL
 24961                                  	; 23/09/2023
 24962                                  	;cmp	byte [si],0
 24963 00003FA2 7508                    	JNZ	short NOT_LAST
 24964                                  
 24965                                  ; for last element of the path switch to the correct search attributes
 24966                                  
 24967 00003FA4 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24968 00003FA8 883E[6B05]              	MOV	[ATTRIB],BH
 24969                                  
 24970                                  NOT_LAST:
 24971                                  
 24972                                  ; check name1 to see if we have a device...
 24973                                  
 24974 00003FAC 06                      	PUSH	ES			; Save ES:BP
 24975                                  
 24976                                  ;hkn; SS is DOSDATA
 24977                                  	;context ES
 24978 00003FAD 16                      	push	ss
 24979 00003FAE 07                      	pop	es
 24980 00003FAF E82601                  	call	DEVNAME 		; blast BX
 24981 00003FB2 07                      	POP	ES			; Restore ES:BP
 24982 00003FB3 720B                    	JC	short FindFile		; Not a device
 24983 00003FB5 08C0                    	OR	AL,AL			; Test next char again
 24984 00003FB7 7403                    	JZ	short GO_BDEV
 24985 00003FB9 E9C700                  	JMP	FILEINPATH		; Device name in middle of path
 24986                                  
 24987                                  GO_BDEV:
 24988 00003FBC 5E                      	POP	SI			; Points to NUL at end of path
 24989 00003FBD E998FE                  	JMP	Build_devJ
 24990                                  
 24991                                  FindFile:
 24992                                  ;;;; 7/28/86
 24993 00003FC0 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24994 00003FC5 7505                    	JNZ	short NOE5		; no
 24995 00003FC7 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24996                                  NOE5:
 24997                                  ;;;; 7/28/86
 24998 00003FCC 57                      	PUSH	DI			; Start of this element
 24999 00003FCD 06                      	PUSH	ES			; Save ES:BP
 25000 00003FCE 51                      	PUSH	CX			; CL return from NameTrans
 25001                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25002                                  
 25003 00003FCF E88F02                  	CALL	LookupPath		; call fastopen to get dir entry
 25004 00003FD2 7303                    	JNC	short DIR_FOUND		; found dir entry
 25005                                  
 25006                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25007 00003FD4 E8C6FC                  	call	FINDENTRY
 25008                                  DIR_FOUND:
 25009 00003FD7 59                      	POP	CX
 25010 00003FD8 07                      	POP	ES
 25011 00003FD9 5F                      	POP	DI
 25012 00003FDA 7303                    	JNC	short LOAD_BUF
 25013 00003FDC E9C900                  	JMP	BADPATHPOP
 25014                                  
 25015                                  LOAD_BUF:
 25016 00003FDF C53E[E205]              	LDS	DI,[CURBUF]
 25017                                  	;test	byte [bx+0Bh],10h
 25018 00003FE3 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25019 00003FE7 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25020 00003FE9 E99700                  	JMP	FILEINPATH		; Error or end of path
 25021                                  
 25022                                  ; if we are not setting the directory, then check for end of string
 25023                                  
 25024                                  GO_NEXT:
 25025                                  ;hkn; SS override
 25026 00003FEC 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25027 00003FF2 7423                    	JZ	short SetDir
 25028 00003FF4 89FA                    	MOV	DX,DI			; Save pointer to entry
 25029 00003FF6 8CD9                    	MOV	CX,DS
 25030                                  
 25031                                  ;hkn; SS is DOSDATA
 25032                                  	;context DS
 25033 00003FF8 16                      	push	ss
 25034 00003FF9 1F                      	pop	ds
 25035 00003FFA 5F                      	POP	DI			; Start of next element
 25036                                  	; 19/05/2019 - Retro DOS v4.0
 25037                                  	; MSDOS 6.0
 25038 00003FFB F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25039 00004000 740B                    	JZ	short _nofast			; the FastOpen
 25040 00004002 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25041 00004007 7404                    	JZ	short _nofast			; no
 25042 00004009 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25043                                  _nofast:
 25044 0000400D 803D00                  	CMP	BYTE [DI],0
 25045                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25046                                  	;;JMP	_SETRET  ; retn		; Got it
 25047                                  	;retn	; 05/09/2018
 25048                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25049                                  	;jmp	_SETRET
 25050                                  	; 16/12/2022
 25051 00004010 7421                    	jz	short _SETRET
 25052                                  
 25053                                  NEXT_ONE:
 25054 00004012 57                      	PUSH	DI			; Put start of next element back on stack
 25055 00004013 89D7                    	MOV	DI,DX
 25056 00004015 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25057                                  SetDir:
 25058 00004017 8B14                    	MOV	DX,[SI] 		; Dir_first
 25059                                  
 25060                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25061 00004019 1E                      	PUSH	DS		      ; save [curbuf+2]
 25062                                  ;hkn; SS is DOSDATA
 25063 0000401A 16                      	push	ss
 25064 0000401B 1F                      	pop	ds		      ; set DS Dosgroup
 25065                                  	;test	byte [FastOpenFlg],2
 25066 0000401C F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25067 00004021 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25068 00004023 89D3                    	MOV	BX,DX		      ; not found
 25069 00004025 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25070 00004029 50                      	PUSH	AX		      ; save device id (AH)
 25071 0000402A E8AAFD                  	call	SETDIRSRCH
 25072 0000402D 58                      	POP	AX		      ; restore device id (AH)
 25073 0000402E 83C402                  	ADD	SP,2		      ; pop ds in stack
 25074 00004031 EB36                    	JMP	short FAST_OPEN_SKIP
 25075                                  
 25076                                  	; 16/12/2022
 25077                                  _SETRET:
 25078 00004033 C3                      	retn
 25079                                  
 25080                                  DO_NORMAL:
 25081 00004034 1F                      	POP	DS			; DS = [curbuf + 2]
 25082                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25083                                  
 25084 00004035 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25085 00004037 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25086 00004039 53                      	PUSH	BX
 25087 0000403A 50                      	PUSH	AX
 25088 0000403B 56                      	PUSH	SI
 25089 0000403C 51                      	PUSH	CX
 25090                                  
 25091                                  ; 16/02/2024
 25092                                  %if 0
 25093                                  	;push	word [di+6]
 25094                                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25095                                  	; 19/05/2019
 25096                                  	; MSDOS 6.0
 25097                                  	;push	word [di+8]
 25098                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25099                                  %else	
 25100                                  	; 16/02/2024
 25101                                  	;lds	bx,[di+6]
 25102 0000403D C55D06                  	lds	bx,[di+BUFFINFO.buf_sector]
 25103 00004040 53                      	push	bx
 25104 00004041 1E                      	push	ds
 25105                                  %endif
 25106                                  
 25107 00004042 89D3                    	MOV	BX,DX
 25108                                  
 25109                                  ;hkn; SS is DOSDATA
 25110                                  	;context DS
 25111 00004044 16                      	push	ss
 25112 00004045 1F                      	pop	ds
 25113                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25114 00004046 E88EFD                  	call	SETDIRSRCH		; the entry sector buffer
 25115                                  	; 19/05/2019
 25116                                  	; MSDOS 6.0
 25117 00004049 8F06[0706]              	POP	word [HIGH_SECTOR]
 25118 0000404D 5A                      	POP	DX
 25119 0000404E 7203                    	JC	short SKIP_GETB
 25120                                  	; 22/09/2023
 25121                                  	;;mov	byte [ALLOWED],18h
 25122                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25123                                  	;XOR	AL,AL ; *
 25124                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25125                                  	;call	GETBUFFR
 25126 00004050 E8D917                  	call	GETBUFFER ; * ; pre-read
 25127                                  SKIP_GETB:
 25128 00004053 59                      	POP	CX
 25129 00004054 5E                      	POP	SI
 25130 00004055 58                      	POP	AX
 25131 00004056 5B                      	POP	BX
 25132 00004057 7305                    	JNC	short SET_THE_BUF
 25133 00004059 5F                      	POP	DI			; Start of next element
 25134 0000405A 89FE                    	MOV	SI,DI			; Point with SI
 25135 0000405C EB21                    	JMP	SHORT _BADPATH
 25136                                  
 25137                                  SET_THE_BUF:
 25138 0000405E E8AFF5                  	call	SET_BUF_AS_DIR
 25139 00004061 8B3E[E205]              	MOV	DI,[CURBUF]
 25140 00004065 01FE                    	ADD	SI,DI			; Get the offsets back
 25141 00004067 01FB                    	ADD	BX,DI
 25142                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25143                                  FAST_OPEN_SKIP:
 25144 00004069 5F                      	POP	DI			; Start of next element
 25145 0000406A E89802                  	CALL	InsertPath		; insert dir entry info
 25146                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25147 0000406D 8A05                    	MOV	AL,[DI]
 25148 0000406F 08C0                    	OR	AL,AL
 25149 00004071 74C0                    	JZ	short _SETRET		; At end
 25150 00004073 47                      	INC	DI			; Skip over "/"
 25151 00004074 89FE                    	MOV	SI,DI			; Point with SI
 25152 00004076 E8110F                  	call	PATHCHRCMP
 25153 00004079 7503                    	JNZ	short find_bad_name	; oops
 25154 0000407B E9B5FE                  	JMP	FINDPATH		; Next element
 25155                                  
 25156                                  find_bad_name:
 25157 0000407E 4E                      	DEC	SI			; Undo above INC to get failure point
 25158                                  _BADPATH:
 25159 0000407F 30C9                    	XOR	CL,CL			; Set zero
 25160 00004081 EB2C                    	JMP	SHORT BADPRET
 25161                                  
 25162                                  FILEINPATH:
 25163 00004083 5F                      	POP	DI			; Start of next element
 25164                                  
 25165                                  ;hkn; SS is DOSDATA
 25166                                  	;context DS			; Got to from one place with DS gone
 25167 00004084 16                      	push	ss
 25168 00004085 1F                      	pop	ds
 25169                                  
 25170                                  ; DOS 3.3 FastOpen
 25171                                  	;test	byte [FastOpenFlg],1
 25172 00004086 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25173 0000408B 740B                    	JZ	short NO_FAST		; device info to fastopen
 25174                                  	;test	byte [FastOpenFlg],2
 25175 0000408D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25176 00004092 7404                    	JZ	short NO_FAST
 25177 00004094 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25178                                  					 ; success
 25179                                  NO_FAST:
 25180                                  ; DOS 3.3 FastOpen
 25181 00004098 8A05                    	MOV	AL,[DI]
 25182 0000409A 08C0                    	OR	AL,AL
 25183 0000409C 7404                    	JZ	short INCRET
 25184 0000409E 89FE                    	MOV	SI,DI			; Path too long
 25185 000040A0 EB0D                    	JMP	SHORT BADPRET
 25186                                  
 25187                                  INCRET:
 25188                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25189                                  
 25190 000040A2 E86002                  	CALL   InsertPath		; insert dir entry info
 25191                                  
 25192                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25193 000040A5 FEC0                    	INC	AL			; Reset zero
 25194                                  	; 16/12/2022	
 25195                                  ;_SETRET:
 25196 000040A7 C3                      	retn
 25197                                  
 25198                                  BADPATHPOP:
 25199 000040A8 5E                      	POP	SI			; Start of next element
 25200 000040A9 8A04                    	MOV	AL,[SI]
 25201 000040AB 89FE                    	MOV	SI,DI			; Start of bad element
 25202 000040AD 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25203                                  BADPRET:
 25204 000040AF A0[6D05]                	MOV	AL,[SATTRIB]
 25205 000040B2 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25206 000040B5 F9                      	STC
 25207 000040B6 C3                      	retn
 25208                                  
 25209                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25210                                  ;---------------------------------------------------------------------------
 25211                                  ;
 25212                                  ; Procedure Name : STARTSRCH
 25213                                  ;
 25214                                  ; Inputs:
 25215                                  ;	[THISDPB] Set
 25216                                  ; Function:
 25217                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25218                                  ; Outputs:
 25219                                  ;	ES:BP = Drive parameters
 25220                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25221                                  ; Destroys ES,BP,AX
 25222                                  ;--------------------------------------------------------------------------
 25223                                  
 25224                                  STARTSRCH:
 25225 000040B7 C42E[8A05]              	LES	BP,[THISDPB]
 25226 000040BB 31C0                    	XOR	AX,AX
 25227 000040BD A3[4803]                	MOV	[LASTENT],AX
 25228 000040C0 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25229 000040C3 48                      	DEC	AX
 25230 000040C4 A3[D805]                	MOV	[ENTFREE],AX
 25231 000040C7 A3[DA05]                	MOV	[ENTLAST],AX
 25232 000040CA C3                      	retn
 25233                                  
 25234                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25235                                  ;----------------------------------------------------------------------------
 25236                                  ; Procedure Name : MatchAttributes
 25237                                  ;
 25238                                  ; Input:    [Attrib] = attribute to search for
 25239                                  ;	    CH = found attribute
 25240                                  ; Output:   JZ <match>
 25241                                  ;	    JNZ <nomatch>
 25242                                  ; Registers modified: noneski
 25243                                  ;----------------------------------------------------------------------------
 25244                                  
 25245                                  MatchAttributes:
 25246 000040CB 50                      	PUSH	AX
 25247                                  
 25248                                  ;hkn; SS override
 25249 000040CC 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25250 000040D0 F6D0                    	NOT	AL			; AL <- SearchSet'
 25251 000040D2 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25252                                  	;and	al,16h
 25253 000040D4 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25254                                  ;
 25255                                  ; the result is non-zero if an attribute is not in the search set
 25256                                  ; and in the found set and in the important set. This means that we do not
 25257                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25258                                  ;
 25259 000040D6 58                      	POP	AX
 25260 000040D7 C3                      	retn
 25261                                  
 25262                                  ; 19/05/2019 - Retro DOS v4.0
 25263                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25264                                  
 25265                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25266                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25267                                  
 25268                                  ;Break <DevName - Look for name of device>
 25269                                  ;---------------------------------------------------------------------------
 25270                                  ;
 25271                                  ; Procedure Name : DevName
 25272                                  ;
 25273                                  ; Inputs:
 25274                                  ;	DS,ES:DOSDATA
 25275                                  ;	Filename in NAME1
 25276                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25277                                  ; Function:
 25278                                  ;	Determine if file is in list of I/O drivers
 25279                                  ; Outputs:
 25280                                  ;	Carry set if not a device
 25281                                  ;	ELSE
 25282                                  ;	Zero flag set
 25283                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25284                                  ;	     bits 0-4 set from low byte of attribute word
 25285                                  ;	DEVPT = DWORD pointer to Device header of device
 25286                                  ; BX destroyed, others preserved
 25287                                  ;---------------------------------------------------------------------------
 25288                                  
 25289                                  DEVNAME:
 25290                                  	; 28/07/2018 - Retro DOS v3.0
 25291                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25292                                  
 25293 000040D8 56                      	PUSH	SI
 25294 000040D9 57                      	PUSH	DI
 25295 000040DA 51                      	PUSH	CX
 25296 000040DB 50                      	PUSH	AX
 25297                                  
 25298                                  ; E5 special code
 25299 000040DC FF36[4B05]              	PUSH	WORD [NAME1]
 25300 000040E0 803E[4B05]05            	CMP	byte [NAME1],5
 25301 000040E5 7505                    	JNZ	short NOKTR
 25302 000040E7 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25303                                  NOKTR:
 25304                                  	;test	byte [ATTRIB],8
 25305 000040EC F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25306                                  					; If looking for VOL id don't find devs
 25307 000040F1 7521                    	JNZ	short RET31
 25308                                  
 25309                                  ;hkn; NULDEV is in DOSDATA
 25310 000040F3 BE[4800]                	MOV	SI,NULDEV
 25311                                  LOOKIO:
 25312                                  	; 21/11/2022
 25313                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25314                                  	; 17/12/2022
 25315                                  	;test	byte [si+5],80h
 25316 000040F6 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25317                                  	;;test	word [si+4],8000h
 25318                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25319 000040FA 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25320 000040FC 89F0                    	MOV	AX,SI
 25321                                  	;add	si,10
 25322 000040FE 83C60A                  	ADD	SI,SYSDEV.NAME
 25323                                  
 25324                                  ;hkn; NAME1 is in DOSDATA
 25325 00004101 BF[4B05]                	MOV	DI,NAME1
 25326 00004104 B90400                  	MOV	CX,4			; All devices are 8 letters
 25327 00004107 F3A7                    	REPE	CMPSW			; Check for name in list
 25328 00004109 89C6                    	MOV	SI,AX
 25329 0000410B 7415                    	JZ	short IOCHK		; Found it?
 25330                                  SKIPDEV:
 25331 0000410D C534                    	LDS	SI,[SI]			; Get address of next device
 25332 0000410F 83FEFF                  	CMP	SI,-1			; At end of list?
 25333 00004112 75E2                    	JNZ	short LOOKIO
 25334                                  RET31:	
 25335 00004114 F9                      	STC				; Not found
 25336                                  RETNV:	
 25337 00004115 8CD1                    	MOV	CX,SS
 25338 00004117 8ED9                    	MOV	DS,CX
 25339                                  
 25340 00004119 8F06[4B05]              	POP	WORD [NAME1]
 25341 0000411D 58                      	POP	AX
 25342 0000411E 59                      	POP	CX
 25343 0000411F 5F                      	POP	DI
 25344 00004120 5E                      	POP	SI
 25345 00004121 C3                      	RETN
 25346                                  
 25347                                  IOCHK:
 25348                                  ;hkn; SS override for DEVPT
 25349 00004122 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25350                                  	;mov	bh,[si+4]
 25351 00004127 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25352 0000412A 80CFC0                  	OR	BH,0C0h
 25353 0000412D 80E7DF                  	and	bh,0DFh
 25354                                  	;AND	BH,~(020h)		; Clears Carry
 25355 00004130 368936[9A05]            	MOV	[SS:DEVPT],SI
 25356 00004135 EBDE                    	JMP	short RETNV
 25357                                  
 25358                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25359                                  ;---------------------------------------------------------------------------
 25360                                  ; Procedure Name : Build_device_ent
 25361                                  ;
 25362                                  ; Inputs:
 25363                                  ;	[NAME1] has name
 25364                                  ;	BH is attribute field (supplied by DEVNAME)
 25365                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25366                                  ; Function:
 25367                                  ;	Build a directory entry for a device at DEVFCB
 25368                                  ; Outputs:
 25369                                  ;	BX points to DEVFCB
 25370                                  ;	SI points to dir_first field
 25371                                  ;	AH = input BH
 25372                                  ;	AL = 0
 25373                                  ;	dir_first = DEVPT
 25374                                  ;	Zero Set, Carry Clear
 25375                                  ; DS,ES,BP preserved, others destroyed
 25376                                  ;--------------------------------------------------------------------------
 25377                                  
 25378                                  Build_device_ent:
 25379 00004137 B82020                  	MOV	AX,"  " ; 2020h
 25380                                  
 25381                                  ;hkn; DEVFCB is in DOSDATA
 25382 0000413A BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25383                                  
 25384                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25385                                  
 25386 0000413D AB                      	STOSW
 25387 0000413E AA                      	STOSB				; Blank out extent field
 25388                                  	;mov	al,40h
 25389 0000413F B040                    	MOV	AL,attr_device
 25390                                  
 25391                                  ;	Fill Dir_attr
 25392                                  
 25393 00004141 AA                      	STOSB				; Set attribute field
 25394 00004142 31C0                    	XOR	AX,AX
 25395 00004144 B90A00                  	MOV	CX,10
 25396                                  
 25397                                  ; Fill dir_pad
 25398                                  
 25399 00004147 F3AB                    	REP	STOSW			; Fill rest with zeros
 25400 00004149 E899C9                  	call	DATE16
 25401                                  
 25402                                  ;hkn; DEVFCB is in DOSDATA
 25403 0000414C BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25404 0000414F 92                      	XCHG	AX,DX
 25405                                  
 25406                                  ; Fill dir_time
 25407                                  
 25408 00004150 AB                      	STOSW
 25409 00004151 92                      	XCHG	AX,DX
 25410                                  
 25411                                  ; Fill dir_date
 25412                                  
 25413 00004152 AB                      	STOSW
 25414 00004153 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25415 00004155 A1[9A05]                	MOV	AX,[DEVPT]
 25416                                  
 25417                                  ; Fill dir_first
 25418                                  
 25419 00004158 AB                      	STOSW				; Dir_first points to device
 25420 00004159 A1[9C05]                	MOV	AX,[DEVPT+2]
 25421                                  ;
 25422                                  ; Fill dir_size_l
 25423                                  ;
 25424 0000415C AB                      	STOSW
 25425 0000415D 88FC                    	MOV	AH,BH			; Put device atts in AH
 25426                                  
 25427                                  ;hkn; DEVFCB is in DOSDATA
 25428 0000415F BB[4B05]                	MOV	BX,DEVFCB
 25429 00004162 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25430 00004164 C3                      	retn
 25431                                  
 25432                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25433                                  ;----------------------------------------------------------------------------
 25434                                  ;
 25435                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25436                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25437                                  ;   If invalid, reset original CDS to root.
 25438                                  ;
 25439                                  ;   Inputs:	ThisCDS points to CDS of interest
 25440                                  ;		SS:DI points to temp buffer
 25441                                  ;   Outputs:	The current directory string is validated on the appropriate
 25442                                  ;		    drive
 25443                                  ;		ThisDPB changed
 25444                                  ;		ES:DI point to CDS
 25445                                  ;		Carry set if error (currently user FAILed to I 24)
 25446                                  ;   Registers modified: all
 25447                                  ;----------------------------------------------------------------------------
 25448                                  
 25449                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25450                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25451                                  
 25452                                  ValidateCDS:
 25453                                  	; 19/05/2019 - Retro DOS v4.0
 25454                                  	; 28/07/2018 - Retro DOS v3.0
 25455                                  
 25456                                     %define  Temp	[bp-2]	; word
 25457                                     %define  SaveCDS	[bp-6]	; dword
 25458                                     %define  SaveCDSL	[bp-6]	; word
 25459                                     %define  SaveCDSH	[bp-4]	; word
 25460                                  
 25461                                  	;Enter
 25462 00004165 55                      	push	bp
 25463 00004166 89E5                    	mov	bp,sp
 25464 00004168 83EC06                  	sub	sp,6
 25465                                  
 25466 0000416B 897EFE                  	MOV	Temp,DI
 25467                                  
 25468                                  ;hkn; SS override
 25469 0000416E 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25470 00004173 8976FA                  	MOV	SaveCDSL,SI
 25471 00004176 8C5EFC                  	MOV	SaveCDSH,DS
 25472                                  	;EnterCrit critDisk
 25473 00004179 E876D1                  	call	ECritDisk
 25474                                  	; 21/11/2022
 25475                                  	;test	byte [SI+curdir.flags+1],80h
 25476                                  	;test	word [si+67],8000h
 25477                                  	; 17/12/2022
 25478                                  	;test	byte [SI+68],80h
 25479 0000417C F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25480                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25481 00004180 7403                    	JZ	short _DoSplice
 25482 00004182 E98D00                  	JMP	FatFail
 25483                                  _DoSplice:
 25484 00004185 30D2                    	XOR	DL,DL
 25485 00004187 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25486                                  
 25487                                  ;hkn; SS is DOSDATA
 25488                                  	;Context ES
 25489 0000418C 16                      	push	ss
 25490 0000418D 07                      	pop	es
 25491                                  	;Invoke	FStrcpy
 25492 0000418E E836D0                  	call	FStrCpy
 25493 00004191 8B76FE                  	MOV	SI,Temp
 25494                                  
 25495                                  ;hkn; SS is DOSDATA
 25496                                  	;Context DS
 25497 00004194 16                      	push	ss
 25498 00004195 1F                      	pop	ds	
 25499                                  	;Invoke	Splice
 25500 00004196 E8162B                  	call	Splice
 25501                                  
 25502                                   ;hkn; SS is DOSDATA
 25503                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25504 00004199 16                      	push	ss
 25505 0000419A 1F                      	pop	ds
 25506 0000419B 8816[4C03]              	MOV	[NoSetDir],DL
 25507 0000419F C43E[A205]              	LES	DI,[THISCDS]
 25508                                  	;SAVE	<BP>
 25509 000041A3 55                      	push	bp
 25510                                  	;Invoke	FATREAD_CDS
 25511 000041A4 E81614                  	call	FATREAD_CDS	
 25512                                  	;RESTORE <BP>
 25513 000041A7 5D                      	pop	bp
 25514 000041A8 7268                    	JC	short FatFail
 25515                                  
 25516 000041AA C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25517                                  	;cmp	word [si+73],-1
 25518 000041AE 837C49FF                	CMP	word [SI+curdir.ID],-1
 25519 000041B2 7550                    	JNZ	short RestoreCDS
 25520                                  
 25521                                  ;hkn; SS is DOSDATA
 25522                                  	;Context ES
 25523 000041B4 16                      	push	ss
 25524 000041B5 07                      	pop	es
 25525                                  
 25526                                  ;hkn; SS override
 25527                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25528 000041B6 36FF36[B205]            	push	word [SS:WFP_START]
 25529                                  	;cmp	si,[bp-6]
 25530 000041BB 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25531 000041BE 750B                    	JNZ	short DoChdir
 25532                                  	;mov	di,[bp-2]
 25533 000041C0 8B7EFE                  	MOV	DI,Temp
 25534                                  
 25535                                  ;hkn; SS override
 25536 000041C3 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25537                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25538 000041C8 E8FCCF                  	call	FStrCpy
 25539                                  DoChdir:
 25540                                  ;hkn; SS is DOSDATA
 25541                                  	;Context DS
 25542 000041CB 16                      	push	ss
 25543 000041CC 1F                      	pop	ds
 25544                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25545 000041CD FF36[6D05]              	push	word [SATTRIB]
 25546 000041D1 55                      	push	bp
 25547                                  	;Invoke	DOS_ChDir
 25548 000041D2 E84FEF                  	call	DOS_CHDIR
 25549                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25550 000041D5 5D                      	pop	bp
 25551 000041D6 5B                      	pop	bx
 25552 000041D7 8F06[B205]              	pop	word [WFP_START]
 25553 000041DB 881E[6D05]              	MOV	[SATTRIB],BL
 25554 000041DF C576FA                  	LDS	SI,SaveCDS
 25555 000041E2 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25556                                  
 25557                                  ;hkn; SS override for THISCDS
 25558 000041E4 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25559 000041E9 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25560 000041EE 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25561 000041F0 884C03                  	MOV	[SI+3],CL		;	    }
 25562                                  SetCluster:
 25563                                  	; 16/02/2024
 25564                                  	;;mov	word [si+73],0FFFFh
 25565                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25566                                  	;
 25567 000041F3 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25568                                  	; 21/11/2022
 25569                                  	;test	byte [si+curdir.flags+1],20h
 25570                                  	; 19/05/2019
 25571                                  	; MSDOS 6.0
 25572                                  	; 17/12/2022
 25573                                  	;test	byte [si+68],20h
 25574 000041F8 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25575                                  	;;test	word [si+67],2000h
 25576                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25577 000041FC 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25578 000041FE B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25579                                  _setdirclus:
 25580                                  	;mov	[si+73],cx
 25581 00004201 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25582                                  RestoreCDS:
 25583 00004204 C47EFA                  	LES	DI,SaveCDS
 25584 00004207 36893E[A205]            	MOV	[SS:THISCDS],DI
 25585 0000420C 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25586 00004211 F8                      	CLC
 25587                                  FatFail:
 25588                                  	;LeaveCrit critDisk
 25589 00004212 E8F8D0                  	call	LCritDisk
 25590                                  
 25591                                  	;les	di,[bp-6]
 25592 00004215 C47EFA                  	LES	DI,SaveCDS
 25593                                  	;Leave
 25594 00004218 89EC                    	mov	sp,bp
 25595 0000421A 5D                      	pop	bp
 25596 0000421B C3                      	retn
 25597                                  
 25598                                  ; 28/07/2018 - Retro DOS v3.0
 25599                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25600                                  
 25601                                  ;Break	<CheckThisDevice - Check for being a device>
 25602                                  ;---------------------------------------------------------------------------
 25603                                  ;
 25604                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25605                                  ;   device specified. We will return carry if there is a device present. 
 25606                                  ;   The forms of devices we will recognize are:
 25607                                  ;
 25608                                  ;	[path]device
 25609                                  ;
 25610                                  ;   Note that the drive letter has *already* been removed. All other forms
 25611                                  ;   are not considered to be devices. If such a device is found we change
 25612                                  ;   the source pointer to point to the device component.
 25613                                  ;
 25614                                  ;   Inputs:	ES is DOSDATA
 25615                                  ;		DS:SI contains name
 25616                                  ;   Outputs:	ES is DOSDATA
 25617                                  ;		DS:SI point to name or device
 25618                                  ;		Carry flag set if device was found
 25619                                  ;		Carry flag reset otherwise
 25620                                  ;   Registers Modified: all except ES:DI, DS
 25621                                  ;----------------------------------------------------------------------------
 25622                                  
 25623                                  CheckThisDevice:
 25624 0000421C 57                      	push	di
 25625 0000421D 56                      	push	si
 25626 0000421E 89F7                    	MOV	DI,SI
 25627                                  
 25628                                  ; Check for presence of \dev\ (Dam multiplan!)
 25629                                  
 25630 00004220 8A04                    	MOV	AL,[SI]
 25631 00004222 E8650D                  	call	PATHCHRCMP		; is it a path char?
 25632 00004225 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25633 00004227 46                      	INC	SI			; simulate LODSB
 25634                                  
 25635                                  ; We have the leading path separator. Look for DEV part.
 25636                                  
 25637 00004228 AD                      	LODSW
 25638 00004229 0D2020                  	OR	AX,2020h
 25639 0000422C 3D6465                  	cmp	ax,"de"
 25640                                  	;CMP	AX,"e"<< 8 + "d"
 25641 0000422F 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25642 00004231 AC                      	LODSB
 25643 00004232 0C20                    	OR	AL,20h
 25644 00004234 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25645 00004236 7526                    	JNZ	short NotDevice
 25646 00004238 AC                      	LODSB
 25647 00004239 E84E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25648 0000423C 7520                    	JNZ	short NotDevice		; no. go for it.
 25649                                  
 25650                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25651                                  ; SI and DevName may destroy DS.
 25652                                  
 25653                                  ParseDev:
 25654 0000423E 1E                      	push	ds
 25655 0000423F 56                      	push	si			; preserve the source pointer
 25656 00004240 E8890C                  	call	NameTrans		; advance DS:SI
 25657 00004243 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25658 00004246 F9                      	STC				; simulate a Carry return from DevName
 25659 00004247 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25660                                  
 25661                                  ;hkn; SS is DOSDATA
 25662 00004249 16                      	push	ss
 25663 0000424A 1F                      	pop	ds
 25664                                  
 25665                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25666                                  ;
 25667                                  ; SR;
 25668                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25669                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25670                                  ; old call set the volume attribute bit.
 25671                                  
 25672 0000424B A0[6D05]                	mov	al,[SATTRIB]
 25673 0000424E A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25674                                  
 25675                                  ; M026 - end
 25676                                  
 25677 00004251 E884FE                  	call	DEVNAME
 25678                                  
 25679                                  SkipSearch:
 25680 00004254 5E                      	pop	si
 25681 00004255 1F                      	pop	ds
 25682                                  
 25683                                  ; SI points to the beginning of the potential device. If we have a device
 25684                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25685                                  ; original value. At this point Carry set indicates FILE.
 25686                                  
 25687                                  CheckReturn:
 25688 00004256 5F                      	pop	di			; get original SI
 25689 00004257 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25690 00004259 89FE                    	MOV	SI,DI
 25691                                  Check_Done:
 25692 0000425B 5F                      	pop	di
 25693 0000425C F5                      	CMC				; invert carry. Carry => device
 25694 0000425D C3                      	retn
 25695                                  NotDevice:
 25696 0000425E F9                      	STC
 25697 0000425F EBF5                    	JMP	short CheckReturn
 25698                                  
 25699                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25700                                  ;-----------------------------------------------------------------------------
 25701                                  ;
 25702                                  ; Procedure Name : LookupPath
 25703                                  ;
 25704                                  ; Output  DS:SI -> path name,
 25705                                  ;	  ES:DI -> dir entry info buffer
 25706                                  ;	  ES:CX -> extended dir info buffer
 25707                                  ;
 25708                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25709                                  ;			     FastOpen, DS:SI points to char just one after
 25710                                  ;			     the last char of path name which is fully or
 25711                                  ;			     partially found in FastOPen
 25712                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25713                                  ;
 25714                                  ;----------------------------------------------------------------------------
 25715                                  
 25716                                  LookupPath:
 25717                                  ;	PUSH	AX
 25718                                  
 25719                                  ;hkn; SS override
 25720                                  	;test	byte [ss:FastOpenFlg],1
 25721 00004261 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25722 00004267 7503                    	JNZ	short FASTINST			    ; and this routine is
 25723                                  NOLOOK:
 25724 00004269 E99700                  	JMP	NOLOOKUP			    ; executed once
 25725                                  
 25726                                  FASTINST:
 25727                                  ;hkn; SS override
 25728                                  	;test	byte [ss:FastOpenFlg],8
 25729 0000426C 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25730 00004272 75F5                    	JNZ	short NOLOOK			    ; yes
 25731                                  
 25732 00004274 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25733                                  
 25734                                  ;hkn; SS override
 25735 00004277 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25736 0000427C BF[460D]                	MOV	DI,Dir_Info_Buff
 25737 0000427F B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25738 00004282 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25739 00004284 1E                      	PUSH	DS
 25740 00004285 07                      	POP	ES
 25741                                  
 25742                                  ;hkn; SS override
 25743                                  	;call	far [bx+2]
 25744 00004286 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25745 00004289 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25746                                  
 25747 0000428B 8D5CFE                  	LEA	BX,[SI-2]
 25748                                  
 25749                                  ;hkn; SS override
 25750 0000428E 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25751 00004293 745D                    	JZ	short NOTFOUND			    ; no
 25752                                  
 25753                                  	; 19/05/2019 - Retro DOS v4.0
 25754                                  
 25755                                  	; MSDOS 6.0				    ; fully or partially found
 25756 00004295 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25757 00004298 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25758 0000429A 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25759                                  
 25760                                  ;hkn; SS override for attrib/sattrib
 25761 0000429B 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25762 000042A0 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25763 000042A5 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25764                                  	;mov	ch,[es:di+0Bh]
 25765 000042AA 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25766 000042AE E81AFE                  	call	MatchAttributes 		    ;AN000;FO.;
 25767                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25768 000042B1 59                      	POP	CX				    ;AN000;FO.;
 25769 000042B2 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25770                                  parfnd:
 25771                                  
 25772                                  ;hkn; SS override
 25773 000042B4 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25774 000042B9 89CB                    	MOV	BX,CX
 25775                                  	; MSDOS 6.0
 25776                                  	;mov	ax,[bx+7]
 25777 000042BB 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25778                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25779 000042BE 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25780 000042C2 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25781 000042C5 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25782                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25783                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25784                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25785 000042C9 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25786 000042CC 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25787                                  
 25788 000042D0 06                      	PUSH	ES				    ; save ES
 25789                                  ;hkn; SS override
 25790 000042D1 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25791 000042D6 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25792                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25793 000042D9 07                      	POP	ES				    ; pop ES
 25794                                  ;SR;
 25795                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25796                                  ;indicate it is not a root dir
 25797                                  
 25798 000042DA 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25799 000042E1 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25800 000042E6 89FB                    	MOV	BX,DI				    ; start of entry
 25801                                  	;lea	si,[di+1Ah]
 25802 000042E8 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25803                                  						    ; dir_first field in the
 25804                                  						    ; dir entry
 25805                                  ;hkn; SS override for FastOpenFlg
 25806                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25807 000042EB 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25808                                  ;	POP	AX
 25809 000042F1 C3                      	RETN
 25810                                  NOTFOUND:
 25811 000042F2 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25812 000042F5 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25813 000042F7 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25814                                  Partial_Success:
 25815                                  	;and	byte [SS:FastOpenFlg],0FBh
 25816 000042FD 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25817                                  NOLOOKUP:
 25818                                  ;	POP	AX
 25819 00004303 F9                      	STC
 25820 00004304 C3                      	RETN
 25821                                  
 25822                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25823                                  ;-----------------------------------------------------------------------------
 25824                                  ;
 25825                                  ; Procedure Name : InsertPath
 25826                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25827                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25828                                  ;	  DS = DOSDATA
 25829                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25830                                  ;
 25831                                  ;-----------------------------------------------------------------------------
 25832                                  
 25833                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25834                                  
 25835                                  InsertPath:
 25836 00004305 9C                      	PUSHF
 25837                                  ;hkn; SS override for FastOpenFlag
 25838                                  	;test	byte [SS:FastOpenFlg], 1
 25839 00004306 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25840 0000430C 7477                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25841                                  	;test	byte [ss:FastOpenFlg],2
 25842 0000430E 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25843 00004314 740D                    	JZ	short INSERT_DIR_INFO		; no
 25844                                  	;and	byte [ss:FastOpenFlg],0FDh
 25845 00004316 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25846 0000431C 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25847 00004321 EB5C                    	JMP	short GET_NEXT2
 25848                                  
 25849                                  INSERT_DIR_INFO:				; save registers
 25850 00004323 1E                      	PUSH	DS
 25851 00004324 06                      	PUSH	ES
 25852 00004325 53                      	PUSH	BX
 25853 00004326 56                      	PUSH	SI
 25854 00004327 57                      	PUSH	DI
 25855 00004328 51                      	PUSH	CX
 25856 00004329 50                      	PUSH	AX
 25857                                  
 25858                                  ;hkn; SS override
 25859 0000432A 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25860 0000432F BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25861                                  
 25862                                  ; 21/02/2024
 25863                                  %if 0
 25864                                  	;mov	ax,[di+6]
 25865                                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25866                                  	; MSDOS 6.0
 25867                                  	;mov	[ss:si+1],ax
 25868                                  	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25869                                  	; 19/05/2019 - Retro DOS v4.0
 25870                                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25871                                  
 25872                                  ;hkn; SS is DOSDATA
 25873                                  	push	ss
 25874                                  	pop	ds
 25875                                  	; MSDOS 3.3
 25876                                  	;;mov	[si+1],ax
 25877                                  	;MOV	[SI+FEI.dirsec],AX
 25878                                  	; MSDOS 6.0
 25879                                  	;mov	[si+3],ax
 25880                                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25881                                  %else
 25882                                  	;lds	ax,[di+6]
 25883 00004332 C54506                  	lds	ax,[di+BUFFINFO.buf_sector]	; get directory sector
 25884                                  	;mov	[ss:si+1],ax
 25885 00004335 36894401                	mov	[ss:si+FEI.dirsec],ax
 25886                                  	;mov	[ss:si+3],ax
 25887 00004339 368C5C03                	mov	[ss:si+FEI.dirsec+2],ds
 25888 0000433D 16                      	push	ss
 25889 0000433E 1F                      	pop	ds
 25890                                  %endif
 25891                                  
 25892                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25893 0000433F A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25894                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25895                                  	;mov	[si+3],ax ; MSDOS 3.3
 25896 00004342 894405                  	MOV	[SI+FEI.clusnum],AX
 25897                                  	; MSDOS 6.0
 25898 00004345 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25899                                  	;mov	[si+7],ax
 25900 00004348 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25901 0000434B A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25902                                  	;mov	[si+9],ax
 25903 0000434E 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25904                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25905 00004351 89D8                    	MOV	AX,BX
 25906                                  	;;add	di,16  ; MSDOS 3.3
 25907                                  	;add	di,20  ; MSDOS 6.0
 25908 00004353 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25909 00004356 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25910                                  	;mov	cl,32
 25911 00004358 B120                    	MOV	CL,dir_entry.size
 25912 0000435A F6F1                    	DIV	CL
 25913                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25914 0000435C 8804                    	mov	[si],al
 25915                                  
 25916 0000435E 1E                      	PUSH	DS
 25917 0000435F 07                      	POP	ES
 25918                                  
 25919 00004360 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25920 00004364 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25921                                  	;cmp	word [di+1Ah],0
 25922 00004366 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25923                                  					; never insert info when file is empty
 25924 0000436A 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25925                                  
 25926 0000436C 56                      	PUSH	SI			; ES:BX -> extended info
 25927 0000436D 5B                      	POP	BX
 25928                                  
 25929                                  	;mov	al,2
 25930 0000436E B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25931 00004370 BE[300D]                	MOV	SI,FastOpenTable
 25932                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25933                                  	; 07/12/2022
 25934 00004373 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25935                                  
 25936 00004377 F8                      	CLC
 25937                                  SKIP_INSERT:
 25938 00004378 58                      	POP	AX
 25939 00004379 59                      	POP	CX			; restore registers
 25940 0000437A 5F                      	POP	DI
 25941 0000437B 5E                      	POP	SI
 25942 0000437C 5B                      	POP	BX
 25943 0000437D 07                      	POP	ES
 25944 0000437E 1F                      	POP	DS
 25945                                  GET_NEXT2:
 25946                                  	;or	[ss:FastOpenFlg],8
 25947 0000437F 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25948                                  					; we got dir info from fastopen so
 25949                                  GET_NEXT_ELEMENT:
 25950 00004385 9D                      	POPF
 25951 00004386 C3                      	RETN
 25952                                  
 25953                                  ;============================================================================
 25954                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25955                                  ;============================================================================
 25956                                  ; 17/07/2018 - Retro DOS v3.0
 25957                                  ; 30/04/2019 - Retro DOS v4.0
 25958                                  
 25959                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25960                                  
 25961                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25962                                  
 25963                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25964                                  
 25965                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25966                                  ;DEV001s:
 25967                                  ;		length of packets
 25968 00004387 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25969                                  ;LenTab: db	22,14,22,13,15,14
 25970                                  
 25971                                  ;	Error Function
 25972                                  
 25973                                  CmdTab:
 25974 0000438D 8604                    	DB	86h, DEVRD	; 0 input
 25975 0000438F 8605                    	DB	86h, DEVRDND	; 1 input status
 25976 00004391 8708                    	DB	87h, DEVWRT	; 2 output
 25977 00004393 870A                    	DB	87h, DEVOST	; 3 output status
 25978 00004395 8607                    	DB	86h, DEVIFL	; 4 input flush
 25979 00004397 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25980                                  
 25981                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25982                                  
 25983                                  ;CmdTab:
 25984                                  ;	db	86h, 4
 25985                                  ;	db	86h, 5
 25986                                  ;	db	87h, 8
 25987                                  ;	db	87h, 10
 25988                                  ;	db	86h, 7
 25989                                  ;	db	86h, 5
 25990                                  
 25991                                  ;DEV001E:
 25992                                  
 25993                                  ; 30/04/2019 - Retro DOS v4.0
 25994                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25995                                  
 25996                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25997                                  ;----------------------------------------------------------------------------
 25998                                  ;
 25999                                  ; Procedure Name : IOFUNC
 26000                                  ;
 26001                                  ; Inputs:
 26002                                  ;	DS:SI Points to SFT
 26003                                  ;	AH is function code
 26004                                  ;		= 0 Input
 26005                                  ;		= 1 Input Status
 26006                                  ;		= 2 Output
 26007                                  ;		= 3 Output Status
 26008                                  ;		= 4 Flush
 26009                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 26010                                  ;				   present.
 26011                                  ;	AL = character if output
 26012                                  ; Function:
 26013                                  ;	Perform indicated I/O to device or file
 26014                                  ; Outputs:
 26015                                  ;	AL is character if input
 26016                                  ;	If a status call
 26017                                  ;		zero set if not ready
 26018                                  ;		zero reset if ready (character in AL for input status)
 26019                                  ; For regular files:
 26020                                  ;	Input Status
 26021                                  ;		Gets character but restores position
 26022                                  ;		Zero set on EOF
 26023                                  ;	Input
 26024                                  ;		Gets character advances position
 26025                                  ;		Returns ^Z on EOF
 26026                                  ;	Output Status
 26027                                  ;		Always ready
 26028                                  ; AX altered, all other registers preserved
 26029                                  ;----------------------------------------------------------------------------
 26030                                  
 26031                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26032                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26033                                  
 26034                                  IOFUNC:
 26035 00004399 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26036                                  					; DEVIOBUF
 26037 0000439E 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26038 000043A5 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26039 000043AC 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26040                                  	;test	byte [si+6],80h
 26041                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26042 000043B0 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26043 000043B4 7403                    	JZ	short IOTO22		;AN000;
 26044 000043B6 E9A500                  	JMP	IOTOFILE		;AN000;
 26045                                  IOTO22:
 26046                                  	;test	word [si+5],80h
 26047                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26048 000043B9 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26049 000043BD 7503                    	JNZ	short IOTO33		;AN000;
 26050 000043BF E99C00                  	JMP	IOTOFILE		;AN000;
 26051                                  IOTO33:
 26052 000043C2 06                      	push	es ; * (MSDOS 6.21)
 26053 000043C3 E8A0C0                  	call	save_world
 26054 000043C6 8CDA                    	MOV	DX,DS
 26055 000043C8 8CD3                    	MOV	BX,SS
 26056 000043CA 8EDB                    	MOV	DS,BX
 26057 000043CC 8EC3                    	MOV	ES,BX
 26058 000043CE 31DB                    	XOR	BX,BX
 26059 000043D0 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26060 000043D3 7503                    	jnz	short _no_sys_wait
 26061                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26062                                  	; 16/12/2022
 26063 000043D5 80CF04                  	or	bh,04h
 26064                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26065                                  				    ; It is up to device driver to carry out
 26066                                  				    ; appropriate action.
 26067                                  _no_sys_wait:
 26068 000043D8 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26069 000043DC 31DB                    	XOR	BX,BX
 26070 000043DE 881E[8903]              	MOV	[IOMED],BL
 26071                                  
 26072 000043E2 88E3                    	MOV	BL,AH		 	; get function
 26073 000043E4 2E8AA7[8743]            	MOV	AH,[cs:BX+LenTab]
 26074 000043E9 D1E3                    	SHL	BX,1
 26075 000043EB 2E8B8F[8D43]            	MOV	CX,[cs:BX+CmdTab]
 26076 000043F0 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26077 000043F3 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26078 000043F7 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26079                                  
 26080 000043FB 8EDA                    	MOV	DS,DX
 26081 000043FD E86501                  	CALL	DEVIOCALL
 26082 00004400 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26083 00004405 21FF                    	and	di,di
 26084 00004407 7834                    	js	short DevErr
 26085                                  OKDevIO:
 26086 00004409 8CD0                    	MOV	AX,SS
 26087 0000440B 8ED8                    	MOV	DS,AX
 26088                                  
 26089                                  	;cmp	ch,5
 26090 0000440D 80FD05                  	CMP	CH,DEVRDND
 26091 00004410 7506                    	JNZ	short DNODRD
 26092 00004412 A0[8903]                	MOV	AL,[IORCHR]
 26093 00004415 A2[BC03]                	MOV	[DEVIOBUF],AL
 26094                                  
 26095                                  DNODRD: 
 26096 00004418 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26097 0000441C F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26098                                  	;and	ah,2
 26099 0000441E 80E402                  	AND	AH,STBUI>>8
 26100                                  
 26101                                  QuickReturn:				;AN000; 2/13/KK
 26102 00004421 E82BC0                  	call	restore_world
 26103 00004424 07                      	pop	es ; * (MSDOS 6.21)
 26104                                  
 26105                                  	; SR;
 26106                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26107                                  	; IoStatFail = -1 (set after return from the I24)
 26108                                  
 26109                                  	; MSDOS 6.0
 26110 00004425 9C                      	pushf
 26111 00004426 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26112 0000442A 98                      	cbw				;sign extend to word
 26113 0000442B 83F8FF                  	cmp	ax,-1
 26114 0000442E 7507                    	jne	short not_fail_ret
 26115 00004430 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26116 00004435 9D                      	popf
 26117 00004436 C3                      	retn
 26118                                  
 26119                                  not_fail_ret:
 26120 00004437 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26121 0000443B 9D                      	popf
 26122 0000443C C3                      	retn
 26123                                  
 26124                                  DevErr:
 26125 0000443D 88CC                    	MOV	AH,CL
 26126 0000443F E87C0D                  	call	CHARHARD
 26127 00004442 3C01                    	CMP	AL,1
 26128 00004444 7507                    	JNZ	short NO_RETRY
 26129 00004446 E806C0                  	call	restore_world
 26130                                  	; 12/05/2019
 26131 00004449 07                      	pop	es ; * (MSDOS 6.21)		
 26132 0000444A E94CFF                  	JMP	IOFUNC	; 10/08/2018
 26133                                  
 26134                                  NO_RETRY:
 26135                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26136                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26137                                  	; simply wants to ignore the error.
 26138                                  	;
 26139                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26140                                  	; should be checked by the caller on return
 26141                                  
 26142                                  					; SS override
 26143 0000444D 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26144                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26145                                  
 26146                                  	; SR;
 26147                                  	; Check if user failed
 26148                                  
 26149                                  	; MSDOS 6.0
 26150 00004453 3C03                    	cmp	al,3
 26151 00004455 7505                    	jnz	short not_fail
 26152 00004457 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26153                                  not_fail:
 26154 0000445C EBAB                    	JMP	short OKDevIO
 26155                                  
 26156                                  IOTOFILE:
 26157 0000445E 08E4                    	OR	AH,AH
 26158 00004460 7421                    	JZ	short IOIN
 26159 00004462 FECC                    	DEC	AH
 26160 00004464 7405                    	JZ	short IOIST
 26161 00004466 FECC                    	DEC	AH
 26162 00004468 7411                    	JZ	short IOUT
 26163                                  IOUT_retn:	; 18/12/2022
 26164 0000446A C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26165                                  IOIST:
 26166                                  	;push	word [si+15h]
 26167 0000446B FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26168                                  	;push	word [si+17h]
 26169 0000446E FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26170 00004471 E80F00                  	CALL	IOIN
 26171                                  	;pop	word [si+17h]
 26172 00004474 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26173                                  	;pop	word [si+15h]
 26174 00004477 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26175 0000447A C3                      	retn
 26176                                  IOUT:
 26177 0000447B E82500                  	CALL	SETXADDR
 26178 0000447E E8BEEF                  	call	DOS_WRITE
 26179                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26180                                  	; 18/12/2022
 26181 00004481 EB4F                    	jmp	RESTXADDR
 26182                                  ;IOUT_retn:
 26183                                  	;retn			; come crying to me when things don't
 26184                                  				; work ARR
 26185                                  IOIN:
 26186 00004483 E81D00                  	CALL	SETXADDR
 26187                                  					; SS override for DOS34_FLAG
 26188                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26189                                  	;or	word [ss:DOS34_FLAG],40h
 26190                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26191                                  	; 16/12/2022
 26192 00004486 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26193 0000448C E8AFED                  	CALL	DOS_READ
 26194                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26195                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26196                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26197                                  	; 16/12/2022
 26198 0000448F 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26199 00004495 09C9                    	OR	CX,CX			; Check EOF
 26200 00004497 E83800                  	CALL	RESTXADDR
 26201                                  					; SS override
 26202 0000449A 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26203 0000449E 75CA                    	jnz	short IOUT_retn	
 26204 000044A0 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26205 000044A2 C3                      	retn
 26206                                  
 26207                                  SETXADDR:
 26208                                  					; SS override
 26209 000044A3 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26210                                  
 26211 000044A8 06                      	push	es ; * (MSDOS 6.21)
 26212                                  
 26213 000044A9 E8BABF                  	call	save_world
 26214                                  					; SS override for DMAADD and THISSFT
 26215                                  	; 24/09/2023
 26216                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26217                                  	;PUSH	WORD [SS:DMAADD+2]
 26218 000044AC 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26219                                  
 26220                                  ; 22/02/2024
 26221                                  %if 0
 26222                                  	push	ss
 26223                                  	pop	ds
 26224                                  
 26225                                  	; 24/09/2023
 26226                                  	push	word [DMAADD]
 26227                                  	push	word [DMAADD+2]
 26228                                  
 26229                                  	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26230                                  	MOV	CX,[IOXAD+2]
 26231                                  	MOV	[DMAADD+2],CX
 26232                                  	MOV	CX,[IOXAD]
 26233                                  	MOV	[DMAADD],CX		; Set byte trans addr
 26234                                  %else
 26235                                  	; 22/02/2024 - Retro DOS v4.1
 26236                                  	; PCDOS 7.1 IBMDOS.COM
 26237                                  	
 26238 000044B1 36C50E[2C03]            	lds	cx,[ss:DMAADD]		; Save Disk transfer address
 26239 000044B6 51                      	push	cx
 26240 000044B7 1E                      	push	ds
 26241 000044B8 36C50E[8A03]            	lds	cx,[ss:IOXAD]		; Set byte trans address
 26242 000044BD 368C1E[2E03]            	mov	[ss:DMAADD+2],ds
 26243 000044C2 16                      	push	ss
 26244 000044C3 1F                      	pop	ds
 26245 000044C4 890E[2C03]              	mov	[DMAADD],cx
 26246 000044C8 8936[9E05]              	mov	[THISSFT],si
 26247                                  %endif
 26248 000044CC 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26249 000044D0 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26250                                  
 26251                                  RESTXADDR:
 26252 000044D2 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26253 000044D6 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26254 000044DA 8F06[2C03]              	POP	WORD [DMAADD]
 26255                                  
 26256 000044DE E86EBF                  	call	restore_world
 26257                                  
 26258 000044E1 07                      	pop	es ; * (MSDOS 6.21)
 26259                                  					; SS override
 26260                                  RESTRET:
 26261 000044E2 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26262                                  
 26263                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26264                                  ; 21/11/2022
 26265                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26266                                  
 26267                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26268                                  
 26269                                  ;----------------------------------------------------------------------------
 26270                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26271                                  ;
 26272                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26273                                  ;	the SFT.
 26274                                  ;
 26275                                  ;	ENTRY	(ES:DI) = SFT
 26276                                  ;	EXIT	none
 26277                                  ;	USES	all
 26278                                  ;----------------------------------------------------------------------------
 26279                                  
 26280                                  DEV_OPEN_SFT:
 26281 000044E7 06                      	push	es ; * (MSDOS 6.21)
 26282 000044E8 E87BBF                  	call	save_world
 26283                                  	;mov	al,0Dh	
 26284 000044EB B00D                    	MOV	AL,DEVOPN
 26285 000044ED EB06                    	JMP	SHORT DO_OPCLS
 26286                                  
 26287                                  ;----------------------------------------------------------------------------
 26288                                  ; Procedure Name : DEV_CLOSE_SFT
 26289                                  ;
 26290                                  ; Inputs:
 26291                                  ;	ES:DI Points to SFT
 26292                                  ; Function:
 26293                                  ;	Issue a CLOSE call to the correct device
 26294                                  ; Outputs:
 26295                                  ;	None
 26296                                  ; ALL preserved
 26297                                  ;----------------------------------------------------------------------------
 26298                                  
 26299                                  DEV_CLOSE_SFT:
 26300 000044EF 06                      	push	es ; * (MSDOS 6.21)
 26301 000044F0 E873BF                  	call	save_world
 26302                                  	;mov	al,0Eh	
 26303 000044F3 B00E                    	MOV	AL,DEVCLS
 26304                                  
 26305                                  	; Main entry for device open and close. AL contains the function 
 26306                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26307                                  	; open/close to block devices. This allows networks to function but 
 26308                                  	; does NOT hang up with bogus change-line code.
 26309                                  
 26310                                  	;entry	DO_OPCLS
 26311                                  DO_OPCLS:
 26312                                  	; Is the SFT for the net? If so, no action necessary.
 26313                                  
 26314                                  	; MSDOS 6.0
 26315                                  	;test	word [es:di+5],8000h
 26316                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26317 000044F5 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26318 000044FA 7564                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26319 000044FC 30E4                    	XOR	AH,AH			; Unit
 26320                                  	;test	byte [es:di+5],80h
 26321 000044FE 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26322                                  	;les	di,[es:di+7]
 26323 00004503 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26324 00004507 7511                    	JNZ	short GOT_DEV_ADDR
 26325                                  
 26326                                  	; We are about to call device open/close on a block driver. If no 
 26327                                  	; sharing then just short circuit to done.
 26328                                  	
 26329                                  	; MSDOS 6.0
 26330                                  					; SS override
 26331 00004509 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26332 0000450F 764F                    	JBE	short OPCLS_DONE	;AN010; yes
 26333                                  
 26334                                  ; 22/02/2024
 26335                                  %if 0
 26336                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26337                                  	;mov	ah,[es:di+1]
 26338                                  	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26339                                  	mov	cl,[es:di]
 26340                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26341                                  %else
 26342                                  	; 22/02/2024 - Retro DOS v4.1
 26343                                  	; (PCDOS 7.1 IBMDOS.COM)
 26344                                  	;mov	cx,[es:di+DPB.DRIVE]
 26345 00004511 268B0D                  	mov	cx,[es:di]
 26346 00004514 88EC                    	mov	ah,ch			; AH = unit
 26347                                  					; CL = drive
 26348                                  %endif
 26349                                  
 26350                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26351                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26352 00004516 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26353                                  GOT_DEV_ADDR:				; ES:DI -> device
 26354                                  	;test	word [es:di+4],800h
 26355                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26356 0000451A 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26357 0000451F 743F                    	JZ	short OPCLS_DONE	; Device can't
 26358 00004521 06                      	PUSH	ES
 26359 00004522 1F                      	POP	DS
 26360 00004523 89FE                    	MOV	SI,DI			; DS:SI -> device
 26361                                  
 26362                                  OPCLS_RETRY:
 26363                                  	;Context ES
 26364 00004525 16                      	push	ss
 26365 00004526 07                      	pop	es
 26366                                  					; DEVCALL is in DOSDATA
 26367 00004527 BF[5A03]                	MOV	DI,DEVCALL
 26368                                  
 26369 0000452A 89FB                    	MOV	BX,DI
 26370 0000452C 50                      	PUSH	AX
 26371                                  	;mov	al,13
 26372 0000452D B00D                    	MOV	AL,DOPCLHL
 26373 0000452F AA                      	STOSB				; Length
 26374 00004530 58                      	POP	AX
 26375                                  
 26376 00004531 86E0                    	XCHG	AH,AL
 26377                                  	;STOSB				; Unit
 26378                                  	; 22/02/2024 (PCDOS 7.1 IBMDOS.COM)
 26379 00004533 AB                      	stosw				; Unit, Command
 26380 00004534 86E0                    	XCHG	AH,AL
 26381                                  	;STOSB				; Command
 26382                                  
 26383 00004536 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26384 0000453B 50                      	PUSH	AX			; Save Unit,Command
 26385                                  	;invoke	DEVIOCALL2
 26386 0000453C E82900                  	call	DEVIOCALL2
 26387                                  
 26388                                  	;mov	di,[es:bx+3]
 26389 0000453F 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26390                                  	;test	di,8000h
 26391                                  	;jz	short OPCLS_DONEP	
 26392 00004543 21FF                    	and	di,di
 26393 00004545 7918                    	jns	short OPCLS_DONEP	; No error
 26394                                  	; 21/11/2022
 26395                                  	;test	word [si+4],8000h
 26396                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26397                                  	;test	word [si+5],80h
 26398 00004547 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26399 0000454B 7404                    	JZ	short BLKDEV
 26400 0000454D B486                    	MOV	AH,86H			; Read error in data, Char dev
 26401 0000454F EB04                    	JMP	SHORT HRDERR
 26402                                  BLKDEV:
 26403 00004551 88C8                    	MOV	AL,CL			; Drive # in AL
 26404 00004553 B406                    	MOV	AH,6			; Read error in data, Blk dev
 26405                                  HRDERR:
 26406                                  	;invoke	CHARHARD
 26407 00004555 E8660C                  	call	CHARHARD
 26408 00004558 3C01                    	cmp	al,1
 26409 0000455A 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26410                                  					;  Note that FAIL is essentually IGNORED
 26411 0000455C 58                      	POP	AX			; Get back Unit, Command
 26412 0000455D EBC6                    	JMP	short OPCLS_RETRY
 26413                                  OPCLS_DONEP:
 26414 0000455F 58                      	POP	AX			; Clean stack
 26415                                  OPCLS_DONE:
 26416 00004560 E8ECBE                  	call	restore_world
 26417 00004563 07                      	pop	es ; * (MSDOS 6.21)
 26418 00004564 C3                      	retn
 26419                                  
 26420                                  ; 30/04/2019 - Retro DOS v4.0
 26421                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26422                                  
 26423                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26424                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26425                                  
 26426                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26427                                  ;----------------------------------------------------------------------------
 26428                                  ;**	DevIoCall  - Call Device
 26429                                  ;
 26430                                  ;	ENTRY	DS:SI Points to device SFT
 26431                                  ;		ES:BX Points to request data
 26432                                  ;	EXIT	DS:SI -> Device driver
 26433                                  ;	USES	DS:SI,AX
 26434                                  ;----------------------------------------------------------------------------
 26435                                  ;**	DevIoCall2 - Call Device
 26436                                  ;
 26437                                  ;	ENTRY	DS:SI Points to DPB
 26438                                  ;		ES:BX Points to request data
 26439                                  ;	EXIT	DS:SI -> Device driver
 26440                                  ;	USES	DS:SI,AX
 26441                                  ;----------------------------------------------------------------------------
 26442                                  
 26443                                  DEVIOCALL:
 26444                                  					; SS override for CALLSSEC, 
 26445                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26446 00004565 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26447                                  
 26448                                  	;entry	DEVIOCALL2
 26449                                  DEVIOCALL2:
 26450                                  	;EnterCrit critDevice
 26451 00004568 E8BCCD                  	call	ECritDevice
 26452                                  
 26453                                  	; MSDOS 6.0
 26454                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26455                                  	;test	byte [si+5],80h
 26456 0000456B F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26457 0000456F 7545                    	jnz	short chardev2		;AN000; >32mb no
 26458                                  
 26459                                  	; 16/12/2022
 26460                                  	; 22/11/2022
 26461 00004571 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26462 00004575 3C04                    	cmp	al,DEVRD	; 4
 26463 00004577 7408                    	je	short chkext	
 26464 00004579 3C08                    	cmp	al,DEVWRT	; 8
 26465 0000457B 7404                    	je	short chkext
 26466 0000457D 3C09                    	cmp	al,DEVWRTV	; 9
 26467 0000457F 7535                    	jne	short chardev2
 26468                                  
 26469                                  	; 16/12/2022
 26470                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26471                                  	;;cmp	byte [es:bx+2],4
 26472                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26473                                  	;JZ	short chkext		;AN000; >32mb   yes
 26474                                  	;;cmp	byte [es:bx+2],8
 26475                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26476                                  	;JZ	short chkext		;AN000; >32mb   yes
 26477                                  	;;cmp	byte [es:bx+2],9
 26478                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26479                                  	;				;AN000; >32mb write/verify ?
 26480                                  	;JNZ	short chardev2		;AN000; >32mb no
 26481                                  chkext:
 26482 00004581 E8A400                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26483 00004584 7252                    	JC	short dev_exit		;AN000;LB. done
 26484                                  
 26485                                  	;test	byte [si+4],2
 26486 00004586 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26487 0000458A 741A                    	JZ	short chksector		;AN000;>32mb   no
 26488 0000458C 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26489                                  
 26490                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26491                                  	;MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26492                                  	; 22/02/2024
 26493 00004590 B8FFFF                  	mov	ax,-1 ; 0FFFFh
 26494 00004593 368706[6E03]            	xchg    ax,[ss:CALLSSEC]
 26495                                  
 26496 00004598 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26497 0000459C 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26498 000045A0 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26499 000045A4 EB10                    	JMP	short chardev2		;AN000; >32mb
 26500                                  chksector:				;AN000; >32mb
 26501 000045A6 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26502 000045AC 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26503                                  	;mov	word [es:bx+3],8107h
 26504 000045AE 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26505                                  					;AN000; >32mb
 26506 000045B4 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26507                                  
 26508                                  chardev2:				;AN000;
 26509                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26510                                  	; preserved
 26511                                  
 26512                                  	;mov	ax,[si+6]
 26513 000045B6 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26514 000045B9 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26515 000045BD 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26516 000045C2 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26517                                  
 26518                                  	;mov	ax,[si+8]
 26519 000045C7 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26520 000045CA 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26521 000045CE 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26522                                  
 26523                                  	; MSDOS 6.0
 26524 000045D3 E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26525 000045D6 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26526                                  
 26527                                  dev_exit:
 26528                                  	;LeaveCrit critDevice
 26529                                  	;call	LCritDevice
 26530                                  	;retn
 26531                                  	; 18/12/2022
 26532 000045D8 E967CD                  	jmp	LCritDevice
 26533                                  
 26534                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26535                                  ; 22/11/2022
 26536                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26537                                  
 26538                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26539                                  ;---------------------------------------------------------------------------
 26540                                  ;
 26541                                  ; Procedure Name : SETREAD, SETWRITE
 26542                                  ;
 26543                                  ; Inputs:
 26544                                  ;	DS:BX = Transfer Address
 26545                                  ;	CX = Record Count
 26546                                  ;	DX = Starting Record
 26547                                  ;	AH = Media Byte
 26548                                  ;	AL = Unit Code
 26549                                  ; Function:
 26550                                  ;	Set up the device call header at DEVCALL
 26551                                  ; Output:
 26552                                  ;	ES:BX Points to DEVCALL
 26553                                  ; No other registers effected
 26554                                  ;
 26555                                  ;---------------------------------------------------------------------------
 26556                                  
 26557                                  SETREAD_XJ:
 26558                                  	;;;
 26559                                  	; 07/02/2024 - Retro DOS v4.1
 26560 000045DB 89FB                    	mov	bx,di
 26561 000045DD EB07                    	jmp	short SETREAD_X
 26562                                  	;;;
 26563                                  
 26564                                  SETREAD_XT:
 26565                                  	;;;
 26566                                  	; 07/02/2024 - Retro DOS v4.1
 26567 000045DF BB[B603]                	mov	bx,TIMEBUF
 26568 000045E2 53                      	push	bx
 26569                                  SETREAD_XTC:
 26570 000045E3 B90600                  	mov	cx,6
 26571                                  	;;;
 26572                                  SETREAD_X:
 26573                                  	;;;
 26574                                  	; 06/02/2024 - Retro DOS v4.1
 26575 000045E6 31C0                    	xor	ax,ax
 26576                                  	;mov	dx,ax ; 0
 26577 000045E8 99                      	cwd
 26578                                  	;;;
 26579                                  
 26580                                  ; ------------------------------------
 26581                                  
 26582                                  SETREAD:
 26583 000045E9 57                      	PUSH	DI
 26584 000045EA 51                      	PUSH	CX
 26585 000045EB 50                      	PUSH	AX
 26586 000045EC B104                    	MOV	CL,DEVRD ; mov cl,4
 26587                                  SETCALLHEAD:
 26588 000045EE B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26589 000045F0 16                      	PUSH	SS
 26590 000045F1 07                      	POP	ES
 26591                                  					; DEVCALL is in DOSDATA
 26592 000045F2 BF[5A03]                	MOV	DI,DEVCALL
 26593                                  
 26594 000045F5 AA                      	STOSB				; length
 26595 000045F6 58                      	POP	AX			; 
 26596 000045F7 AA                      	STOSB				; Unit
 26597 000045F8 50                      	PUSH	AX
 26598 000045F9 88C8                    	MOV	AL,CL
 26599 000045FB AA                      	STOSB				; Command code
 26600 000045FC 31C0                    	XOR	AX,AX
 26601 000045FE AB                      	STOSW				; Status
 26602 000045FF 83C708                  	ADD	DI,8			; Skip link fields
 26603 00004602 58                      	POP	AX
 26604 00004603 86E0                    	XCHG	AH,AL
 26605 00004605 AA                      	STOSB				; Media byte
 26606 00004606 86C4                    	XCHG	AL,AH
 26607 00004608 50                      	PUSH	AX
 26608 00004609 89D8                    	MOV	AX,BX
 26609 0000460B AB                      	STOSW
 26610                                  
 26611 0000460C 8CD8                    	MOV	AX,DS
 26612 0000460E AB                      	STOSW				; Transfer addr
 26613                                  
 26614 0000460F 59                      	POP	CX			; Real AX
 26615 00004610 58                      	POP	AX			; Real CX
 26616 00004611 AB                      	STOSW				; Count
 26617                                  
 26618 00004612 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26619 00004613 AB                      	STOSW				; Start
 26620 00004614 91                      	XCHG	AX,CX
 26621 00004615 87D1                    	XCHG	DX,CX
 26622 00004617 5F                      	POP	DI
 26623                                  					; DEVCALL is in DOSDATA
 26624 00004618 BB[5A03]                	MOV	BX,DEVCALL
 26625 0000461B C3                      	retn
 26626                                  
 26627                                  	;entry	SETWRITE
 26628                                  SETWRITE:
 26629                                  
 26630                                  ; Inputs:
 26631                                  ;	DS:BX = Transfer Address
 26632                                  ;	CX = Record Count
 26633                                  ;	DX = Starting Record
 26634                                  ;	AH = Media Byte
 26635                                  ;	AL = Unit Code
 26636                                  ; Function:
 26637                                  ;	Set up the device call header at DEVCALL
 26638                                  ; Output:
 26639                                  ;	ES:BX Points to DEVCALL
 26640                                  ; No other registers effected
 26641                                  
 26642 0000461C 57                      	PUSH	DI
 26643 0000461D 51                      	PUSH	CX
 26644 0000461E 50                      	PUSH	AX
 26645 0000461F B108                    	MOV	CL,DEVWRT ; mov cl,8
 26646 00004621 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26647 00004626 EBC6                    	JMP	SHORT SETCALLHEAD
 26648                                  
 26649                                  ; 30/04/2019 - Retro DOS v4.0
 26650                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26651                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26652                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26653                                  
 26654                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26655                                  ;---------------------------------------------------------------------------
 26656                                  ;
 26657                                  ; Procedure Name : RW_SC
 26658                                  ;
 26659                                  ; Inputs:
 26660                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26661                                  ;	 [SC_STATUS]= SC validity status
 26662                                  ;	 [SEQ_SECTOR]= last sector read
 26663                                  ; Function:
 26664                                  ;	Read from or write through secondary cache
 26665                                  ; Output:
 26666                                  ;	ES:BX Points to DEVCALL
 26667                                  ;	carry clear, I/O is not done
 26668                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26669                                  ;	carry set, I/O is done
 26670                                  ;
 26671                                  ;----------------------------------------------------------------------------
 26672                                  
 26673                                  RW_SC:
 26674                                  	; SS override for all variables used.
 26675                                  	
 26676 00004628 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26677 0000462E 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26678 00004630 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26679 00004636 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26680 00004638 51                      	PUSH	CX			    ;AN000;LB.
 26681 00004639 52                      	PUSH	DX			    ;AN000;LB. yes
 26682 0000463A 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26683 0000463B 56                      	PUSH	SI			    ;AN000;LB.
 26684 0000463C 06                      	PUSH	ES			    ;AN000;LB.
 26685 0000463D 57                      	PUSH	DI			    ;AN000;LB.
 26686                                  
 26687 0000463E 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26688 00004643 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26689 00004649 7408                    	JZ	short doread		    ;AN000;LB. yes
 26690 0000464B E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26691 0000464E E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26692                                  scexit4:				    ;AN000;
 26693 00004651 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26694 00004652 C3                      	retn				    ;AN000;LB.
 26695                                  doread: 				    ;AN000;
 26696 00004653 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26697 00004656 720A                    	JC	short readSC		    ;AN000;LB.
 26698 00004658 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26699 0000465F F9                      	STC				    ;AN000;LB. set carry
 26700 00004660 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26701                                  readSC: 				    ;AN000;
 26702 00004662 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26703 00004666 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26704 0000466B 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26705 00004670 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26706                                  	; 24/09/2023
 26707                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26708 00004675 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26709                                  chklow: 						
 26710 00004677 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26711 0000467A 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26712 0000467C 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26713 00004683 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26714 00004687 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26715                                  readsr:
 26716 0000468B 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26717 0000468F 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26718 00004693 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26719 00004697 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26720                                  
 26721 0000469B 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26722 0000469F 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26723 000046A3 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26724 000046A7 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26725 000046AB 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26726 000046B1 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26727 000046B5 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26728 000046B9 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26729 000046BD 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26730 000046C1 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26731 000046C5 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26732                                  saveseq2:				    ;AN000;
 26733 000046C9 F8                      	CLC				    ;AN000;LB. clear carry
 26734                                  saveseq:				    ;AN000;	
 26735 000046CA 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26736 000046CE 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26737 000046D2 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26738 000046D6 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26739 000046DA EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26740                                  scexit2:				    ;AN000;LB.
 26741 000046DC F8                      	CLC				    ;AN000;LB.	clear carry
 26742                                  scexit: 				    ;AN000;		
 26743 000046DD 5F                      	POP	DI			    ;AN000;LB.
 26744 000046DE 07                      	POP	ES			    ;AN000;LB. restore registers
 26745 000046DF 5E                      	POP	SI			    ;AN000;LB.
 26746 000046E0 1F                      	POP	DS			    ;AN000;LB.
 26747 000046E1 5A                      	POP	DX			    ;AN000;LB.
 26748 000046E2 59                      	POP	CX			    ;AN000;LB.
 26749 000046E3 C3                      	retn				    ;AN000;LB.
 26750                                  
 26751                                  ;Break	<IN_SC -- check if in secondary cache>
 26752                                  ;--------------------------------------------------------------------------
 26753                                  ;
 26754                                  ; Procedure Name : IN_SC
 26755                                  ;
 26756                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26757                                  ;	   [CURSC_DRIVE]= current SC drive
 26758                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26759                                  ;	   [SC_CACHE_COUNT]= SC count
 26760                                  ;	   [HIGH_SECTOR]:DX= sector number
 26761                                  ; Function:
 26762                                  ;	Check if the sector is in secondary cache
 26763                                  ; Output:
 26764                                  ;	carry clear, in SC
 26765                                  ;	   CX= the index in the secondary cache
 26766                                  ;	carry set, not in SC
 26767                                  ;
 26768                                  ;---------------------------------------------------------------------------
 26769                                  
 26770                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26771                                  IN_SC:
 26772                                  	; SS override for all variables used
 26773 000046E4 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26774 000046E8 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26775 000046ED 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26776 000046EF 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26777 000046F3 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26778 000046F5 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26779 000046FA 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26780                                  	; 24/09/2023
 26781                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26782 000046FF 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26783 00004701 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26784 00004706 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26785 00004708 F8                      	CLC				    ;AN000;;LB. clear carry
 26786                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26787                                  	; 16/12/2022
 26788 00004709 C3                      	retn	; 30/04/2019
 26789                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26790                                  	;jmp	short inexit
 26791                                  
 26792                                  outrange2:				    ;AN000;;LB. set carry
 26793 0000470A F9                      	STC				    ;AN000;;LB.
 26794                                  inexit: 				    ;AN000;;LB.
 26795 0000470B C3                      	retn				    ;AN000;;LB.
 26796                                  
 26797                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26798                                  ;---------------------------------------------------------------------------
 26799                                  ;
 26800                                  ; Procedure Name : Invalidate_Sc
 26801                                  ;
 26802                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26803                                  ;	   [CURSC_DRIVE]= current SC drive
 26804                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26805                                  ;	   [SC_CACHE_COUNT]= SC count
 26806                                  ;	   [SC_STATUS]= SC status word
 26807                                  ;	   [HIGH_SECTOR]:DX= sector number
 26808                                  ;
 26809                                  ; Function:
 26810                                  ;	invalidate secondary cache if in there
 26811                                  ; Output:
 26812                                  ;	[SC_STATUS] is updated
 26813                                  ;---------------------------------------------------------------------------
 26814                                  
 26815                                  INVALIDATE_SC:
 26816                                  	; SS override for all variables used
 26817                                  
 26818 0000470C E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26819 0000470F 720C                    	JC	short outrange		    ;AN000;;LB. no
 26820 00004711 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26821 00004714 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26822 00004716 F7D0                    	NOT	AX			    ;AN000;;LB.
 26823 00004718 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26824                                  outrange:				    ;AN000;;LB.
 26825 0000471D C3                      	retn				    ;AN000;;LB.
 26826                                  
 26827                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26828                                  ; 22/11/2022
 26829                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26830                                  
 26831                                  ;Break	<VIRREAD- virtually read data into buffer>
 26832                                  ;--------------------------------------------------------------------------
 26833                                  ;
 26834                                  ; Procedure Name : SC_FLAG
 26835                                  ;
 26836                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26837                                  ;		     1, continuous sectors were read into SC
 26838                                  ; Function:
 26839                                  ;	   Move data from SC to buffer
 26840                                  ; Output:
 26841                                  ;	 carry clear, data is moved to buffer
 26842                                  ;	 carry set, bad sector or exceeds maximum sector
 26843                                  ;	   SC_FLAG =0
 26844                                  ;	   CALLSCNT=1
 26845                                  ;	   SC_STATUS= -1 if succeeded
 26846                                  ;     
 26847                                  ;		       0 if failed
 26848                                  ;--------------------------------------------------------------------------
 26849                                  
 26850                                  VIRREAD:
 26851                                  	; SS override for all variables used
 26852                                  
 26853 0000471E 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26854 00004724 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26855 00004726 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26856 0000472A 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26857 0000472E 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26858 00004732 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26859 00004736 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26860 0000473C 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26861                                  
 26862                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26863 00004743 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26864 00004749 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26865 0000474B 1E                      	PUSH	DS			    ;AN000;;LB.
 26866 0000474C 56                      	PUSH	SI			    ;AN000;;LB.
 26867 0000474D 06                      	PUSH	ES			    ;AN000;;LB.
 26868 0000474E 57                      	PUSH	DI			    ;AN000;;LB.
 26869 0000474F 52                      	PUSH	DX			    ;AN000;;LB.
 26870 00004750 51                      	PUSH	CX			    ;AN000;;LB.
 26871 00004751 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26872 00004753 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26873 00004756 59                      	POP	CX
 26874 00004757 5A                      	POP	DX			    ;AN000;;LB.
 26875 00004758 5F                      	POP	DI			    ;AN000;;LB.
 26876 00004759 07                      	POP	ES			    ;AN000;;LB.
 26877 0000475A 5E                      	POP	SI			    ;AN000;;LB.
 26878 0000475B 1F                      	POP	DS			    ;AN000;;LB.
 26879 0000475C EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26880                                  scerror:				    ;AN000;
 26881 0000475E 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26882 00004765 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26883 0000476C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26884 00004772 F9                      	STC				    ;AN000;;LB. carry set
 26885 00004773 C3                      	retn				    ;AN000;;LB.
 26886                                  sc2end: 				    ;AN000;
 26887 00004774 F8                      	CLC				    ;AN000;;LB. carry clear
 26888 00004775 C3                      	retn				    ;AN000;;LB.
 26889                                  
 26890                                  ; 30/04/2019 - Retro  DOS v4.0
 26891                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26892                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26893                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26894                                  
 26895                                  ;Break	<SC2BUF- move data from SC to buffer>
 26896                                  ;----------------------------------------------------------------------------
 26897                                  ;
 26898                                  ; Procedure Name : SC2BUF
 26899                                  ;
 26900                                  ; Inputs:  [SC_STATUS] = SC validity status
 26901                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26902                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26903                                  ; Function:
 26904                                  ;	   Move data from SC to buffer
 26905                                  ; Output:
 26906                                  ;	   carry clear, in SC  and data is moved
 26907                                  ;	   carry set, not in SC and data is not moved
 26908                                  ;---------------------------------------------------------------------------
 26909                                  
 26910                                  SC2BUF:
 26911                                  	; SS override for all variables used
 26912 00004776 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26913                                  	;JC	short noSC		    ;AN000;LB. no
 26914                                  	; 24/09/2023
 26915 00004779 723D                    	jc	short sexit
 26916 0000477B B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26917 0000477E D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26918 00004780 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26919 00004785 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26920                                  ;entry SC2BUF2
 26921                                  SC2BUF2:				    ;AN000;
 26922                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26923                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26924                                  	; 24/09/2023
 26925 00004787 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26926 0000478B 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26927 0000478C F7E1                    	mul	cx
 26928 0000478E 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26929 00004793 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26930 00004798 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26931 0000479A 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26932 0000479C 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26933 000047A1 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26934                                  	; 24/09/2023
 26935                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26936 000047A6 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26937                                  ;entry MOVWORDS
 26938                                  MOVWORDS:				    ;AN000;
 26939 000047A8 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26940 000047AE 7403                    	JZ	short nodd		    ;AN000;LB. no
 26941 000047B0 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26942 000047B2 66                      	DB	66H			    ;AN000;LB. use double word move
 26943                                  nodd:
 26944 000047B3 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26945 000047B5 F8                      	CLC				    ;AN000;LB. clear carry
 26946 000047B6 C3                      	retn				    ;AN000;LB. exit
 26947                                  noSC:					    ;AN000;
 26948 000047B7 F9                      	STC				    ;AN000;LB. set carry
 26949                                  sexit:					    ;AN000;
 26950 000047B8 C3                      	retn				    ;AN000;LB.
 26951                                  
 26952                                  ;============================================================================
 26953                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26954                                  ;============================================================================
 26955                                  ; 29/07/2018 - Retro DOS v3.0
 26956                                  ; 19/05/2019 - Retro DOS v4.0
 26957                                  
 26958                                  ;	TITLE	MKNODE - Node maker
 26959                                  ;	NAME	MKNODE
 26960                                  
 26961                                  ;**	MKNODE.ASM
 26962                                  ;----------------------------------------------------------------------------
 26963                                  ;	Low level routines for making a new local file system node
 26964                                  ;	and filling in an SFT from a directory entry
 26965                                  ;
 26966                                  ;	BUILDDIR
 26967                                  ;	SETDOTENT
 26968                                  ;	MakeNode
 26969                                  ;	NEWENTRY
 26970                                  ;	FREEENT
 26971                                  ;	NEWDIR
 26972                                  ;	DOOPEN
 26973                                  ;	RENAME_MAKE
 26974                                  ;	CHECK_VIRT_OPEN
 26975                                  ;
 26976                                  ;	Revision history:
 26977                                  ;
 26978                                  ;	 AN000	version 4.0  Jan. 1988
 26979                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26980                                  
 26981                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26982                                  ;----------------------------------------------------------------------------
 26983                                  ;
 26984                                  ; Procedure Name : BUILDDIR,NEWDIR
 26985                                  ;
 26986                                  ; Inputs:
 26987                                  ;       ES:BP Points to DPB
 26988                                  ;       [THISSFT] Set if using NEWDIR entry point
 26989                                  ;               (used by ALLOCATE)
 26990                                  ;       [LASTENT] current last valid entry number in directory if no free
 26991                                  ;               entries
 26992                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26993                                  ; Function:
 26994                                  ;       Grow directory if no free entries and not root
 26995                                  ; Outputs:
 26996                                  ;       CARRY SET IF FAILURE
 26997                                  ;       ELSE
 26998                                  ;          AX entry number of new entry
 26999                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 27000                                  ;               AX = first entry of new dir
 27001                                  ;       GETENT should be called to set [LASTENT]
 27002                                  ;
 27003                                  ;----------------------------------------------------------------------------
 27004                                  
 27005                                  ; 19/05/2019 - Retro DOS v4.0
 27006                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 27007                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27008                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 27009                                  
 27010                                  BUILDDIR:
 27011                                  	; 29/07/2018 - Retro DOS v3.0
 27012                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 27013                                  
 27014 000047B9 A1[D805]                        MOV     AX,[ENTFREE]
 27015 000047BC 83F8FF                          CMP     AX,-1 ; 0FFFFh
 27016                                  	;JZ	short CHECK_IF_ROOT
 27017                                          ;CLC
 27018                                          ;retn
 27019                                  	; 24/09/2023
 27020 000047BF 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 27021                                  
 27022                                  CHECK_IF_ROOT:
 27023 000047C1 833E[C205]00                    CMP     word [DIRSTART],0
 27024 000047C6 7502                            JNZ	short NEWDIR
 27025                                          ;STC
 27026                                  	; 24/09/2023
 27027                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 27028                                  builddir_cmc_retn:
 27029                                  	; 24/09/2023
 27030 000047C8 F5                      	cmc	; cf=1 <-> cf=0
 27031                                  builddir_retn:
 27032 000047C9 C3                              retn				; Can't grow root
 27033                                  
 27034                                  	;entry   NEWDIR
 27035                                  NEWDIR: 
 27036 000047CA 8B1E[C205]              	MOV     BX,[DIRSTART]
 27037 000047CE 09DB                            OR      BX,BX
 27038 000047D0 7405                            JZ	short NULLDIR
 27039 000047D2 E81B06                  	call	GETEOF
 27040 000047D5 72F2                            jc	short builddir_retn	; Screw up
 27041                                  NULLDIR:
 27042 000047D7 B90100                          MOV     CX,1
 27043 000047DA E82C05                  	call	ALLOCATE
 27044 000047DD 72EA                            jc	short builddir_retn
 27045 000047DF 8B16[C205]                      MOV     DX,[DIRSTART]
 27046 000047E3 09D2                            OR      DX,DX
 27047 000047E5 750D                            JNZ	short ADDINGDIR
 27048 000047E7 E8EDF5                  	call	SETDIRSRCH
 27049 000047EA 72DD                            jc	short builddir_retn
 27050 000047EC C706[4803]FFFF                  MOV     word [LASTENT],-1
 27051 000047F2 EB29                            JMP     SHORT GOTDIRREC
 27052                                  ADDINGDIR:
 27053 000047F4 53                              PUSH    BX
 27054 000047F5 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27055 000047F9 E8140C                          call	IsEOF
 27056 000047FC 5B                              POP     BX
 27057 000047FD 7217                            JB	short NOTFIRSTGROW
 27058                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27059 000047FF 891E[BC05]                      MOV     [CLUSNUM],BX
 27060                                  	; 24/09/2023
 27061                                  	;PUSH	CX ; (not necessary)
 27062 00004803 50                      	PUSH	AX
 27063 00004804 55                      	PUSH	BP
 27064 00004805 B401                            MOV     AH,1			; CLUSNUM update
 27065                                  	; 15/12/2022
 27066 00004807 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27067                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27068                                  	;;mov	dl,[es:bp+0]
 27069                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27070 0000480B 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27071 0000480F 89DD                            MOV     BP,BX 			; CLUSNUM
 27072 00004811 E86BDE                  	call	FastOpen_Update
 27073 00004814 5D                              POP     BP
 27074 00004815 58                              POP     AX
 27075                                  	; 24/09/2023
 27076                                          ;POP	CX
 27077                                  
 27078                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27079                                  NOTFIRSTGROW:
 27080 00004816 89DA                            MOV     DX,BX
 27081 00004818 30DB                            XOR     BL,BL
 27082 0000481A E8C804                  	call	FIGREC
 27083                                  GOTDIRREC:
 27084                                  	;mov	cl,[es:bp+4]
 27085 0000481D 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27086 00004821 FEC1                            INC     CL
 27087 00004823 30ED                            XOR     CH,CH
 27088                                  ZERODIR:
 27089 00004825 51                              PUSH    CX
 27090                                  	; 22/09/2023
 27091                                  	;;mov	byte [ALLOWED],18h
 27092                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27093 00004826 B0FF                            MOV     AL,0FFH
 27094                                          ;call	GETBUFFR
 27095 00004828 E80310                          call	GETBUFFRD ; *
 27096 0000482B 7302                    	JNC	short GET_SSIZE
 27097 0000482D 59                              POP     CX
 27098 0000482E C3                              retn
 27099                                  
 27100                                  GET_SSIZE:
 27101                                  	;mov	cx,[es:bp+2]
 27102 0000482F 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27103 00004833 06                              PUSH    ES
 27104 00004834 C43E[E205]                      LES     DI,[CURBUF]
 27105                                  	;or	byte [es:di+5],4
 27106 00004838 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27107 0000483D 57                              PUSH    DI
 27108                                  	;;add	di,16	; MSDOS 3.3
 27109                                  	;add	di,20	; MSDOS 6.0	
 27110 0000483E 83C714                          ADD     DI,BUFINSIZ
 27111 00004841 31C0                            XOR     AX,AX
 27112 00004843 D1E9                            SHR     CX,1
 27113 00004845 F3AB                            REP     STOSW
 27114 00004847 7301                            JNC	short EVENZ
 27115 00004849 AA                              STOSB
 27116                                  EVENZ:
 27117 0000484A 5F                              POP     DI
 27118                                  
 27119                                  	; MSDOS 6.0
 27120 0000484B 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27121                                  					;LB. if already dirty		  ;AN000;
 27122 00004850 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27123 00004852 E8DD11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27124                                          
 27125                                  	;or	byte [es:di+5],40h
 27126 00004855 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27127                                  yesdirty7:
 27128 0000485A 07                              POP	ES
 27129 0000485B 59                              POP	CX
 27130                                  
 27131                                  	; 19/05/2019 - Retro DOS v4.0
 27132                                  
 27133                                  	; MSDOS 3.3
 27134                                  	;INC	DX
 27135                                  
 27136                                  	; MSDOS 6.0
 27137                                  	; 24/09/2023
 27138                                  	;add	dx,1
 27139                                  	;;adc	word [HIGH_SECTOR],0
 27140                                  	;; 24/09/2023
 27141                                  	;; ax=0
 27142                                  	;adc	[HIGH_SECTOR],ax ; 0
 27143                                  	; 24/09/2023
 27144 0000485C 42                      	inc	dx
 27145 0000485D 7504                    	jnz	short loop_zerodir
 27146 0000485F FF06[0706]              	inc	word [HIGH_SECTOR]
 27147                                  loop_zerodir:
 27148 00004863 E2C0                            LOOP    ZERODIR
 27149                                  
 27150 00004865 A1[4803]                        MOV     AX,[LASTENT]
 27151 00004868 40                              INC     AX
 27152                                  	; 24/09/2023
 27153                                  	; cf=0
 27154                                  	;CLC
 27155 00004869 C3                              retn
 27156                                  
 27157                                  ;--------------------------------------------------------------------------
 27158                                  ;
 27159                                  ; Procedure Name : SETDOTENT
 27160                                  ;
 27161                                  ; set up a . or .. directory entry for a directory.
 27162                                  ;
 27163                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27164                                  ;               AX contains ". " or ".."
 27165                                  ;               DX contains first cluster of entry
 27166                                  ;
 27167                                  ;----------------------------------------------------------------------------
 27168                                  
 27169                                  SETDOTENT:
 27170                                  ;	Fill in name field
 27171 0000486A AB                      	STOSW
 27172 0000486B B90400                  	MOV	CX,4
 27173 0000486E B82020                  	MOV	AX,"  " ; 2020h
 27174 00004871 F3AB                    	REP	STOSW
 27175 00004873 AA                      	STOSB
 27176                                  
 27177                                  ;	Set up attribute
 27178                                  	;mov	al, 10h
 27179 00004874 B010                    	MOV	AL,attr_directory
 27180 00004876 AA                      	STOSB
 27181                                  
 27182                                  ;	Initialize time and date of creation
 27183 00004877 83C70A                  	ADD	DI,10
 27184 0000487A 8B36[9E05]              	MOV	SI,[THISSFT]
 27185                                  	;mov	ax,[si+0Dh]
 27186 0000487E 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 27187 00004881 AB                      	STOSW
 27188                                  	;mov	ax,[si+0Fh]
 27189 00004882 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 27190 00004885 AB                      	STOSW
 27191                                  
 27192                                  ;	Set up first cluster field
 27193 00004886 89D0                    	MOV	AX,DX
 27194 00004888 AB                      	STOSW
 27195                                  
 27196                                  ;	0 file size
 27197                                  	;XOR	AX,AX
 27198 00004889 91                      	xchg	ax,cx ; 23/02/2024
 27199 0000488A AB                      	STOSW
 27200 0000488B AB                      	STOSW
 27201 0000488C C3                      	retn
 27202                                  
 27203                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27204                                  ;---------------------------------------------------------------------------
 27205                                  ;
 27206                                  ; Procedure Name : MakeNode
 27207                                  ;
 27208                                  ; Inputs:
 27209                                  ;       AL - attribute to create
 27210                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27211                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27212                                  ;               (AH ignored on dirs and devices)
 27213                                  ;
 27214                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27215                                  ;               a name already existant is ALWAYS an error in these cases.
 27216                                  ;
 27217                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27218                                  ;               terminated)
 27219                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27220                                  ;               ( = -1 if current dir not involved, else
 27221                                  ;                Points to first char after last "/" of current dir part)
 27222                                  ;       [THISCDS] Points to CDS being used
 27223                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27224                                  ; Function:
 27225                                  ;       Make a new node
 27226                                  ; Outputs:
 27227                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27228                                  ;       CARRY SET IF ERROR
 27229                                  ;          AX = 1 A node by this name exists and is a directory
 27230                                  ;          AX = 2 A new node could not be created
 27231                                  ;          AX = 3 A node by this name exists and is a disk file
 27232                                  ;               (AH was NZ on input)
 27233                                  ;          AX = 4 Bad Path
 27234                                  ;               SI return from GetPath maintained
 27235                                  ;          AX = 5 Attribute mismatch
 27236                                  ;          AX = 6 Sharing Violation
 27237                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27238                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27239                                  ;       ELSE
 27240                                  ;          AX = 0 Disk Node
 27241                                  ;          AX = 3 Device Node (error in some cases)
 27242                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27243                                  ;               containing new node.
 27244                                  ;          [CURBUF+2]:BX Points to entry
 27245                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27246                                  ;          [THISSFT] is filled in
 27247                                  ;               sf_mode = unchanged.
 27248                                  ;          Attribute byte in entry is input AL
 27249                                  ; DS preserved, others destroyed
 27250                                  ;
 27251                                  ;-------------------------------------------------------------------------
 27252                                  
 27253                                  ; 19/05/2019 - Retro DOS v4.0
 27254                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27255                                  
 27256                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27257                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27258                                  
 27259                                  ; 23/02/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 27260                                  ; DOSCODE:8925h (MSDOS 6.22, MSDOS.SYS)
 27261                                  ; DOSCODE:951Ah (PCDOS 7.1, IBMDOS.COM)
 27262                                  
 27263                                  MakeNode:
 27264                                  	;mov	word [CREATING],0E5FFh
 27265 0000488D C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27266 00004893 50                      	PUSH	AX 		; Save AH value
 27267 00004894 C606[4C03]00            	MOV	byte [NoSetDir],0
 27268 00004899 A2[6D05]                	MOV	[SATTRIB],AL
 27269 0000489C E89BF5                  	call	GetPathNoSet
 27270 0000489F 88CA                    	MOV	DL,CL		; Save CL info
 27271                                  	;MOV	CX,AX		; Device ID to CH
 27272                                  	; 23/02/2024
 27273 000048A1 91                      	xchg	ax,cx
 27274 000048A2 58                      	POP	AX		; Get back AH
 27275 000048A3 732D                    	JNC	short make_exists ; File existed
 27276 000048A5 7505                    	JNZ	short make_err_4 ; Path bad
 27277 000048A7 80FA80                  	CMP	DL,80h		; Check "CL" return from GETPATH
 27278 000048AA 7405                    	JZ	short make_type	; Name simply not found, and no metas
 27279                                  make_err_4:
 27280 000048AC B004                    	MOV	AL,4		; case 1 bad path
 27281                                  make_err_ret:
 27282                                  	;XOR	AH,AH
 27283                                  	; 23/02/2024
 27284 000048AE 98                      	cbw
 27285 000048AF F9                      	STC
 27286                                  ;make_retn:	; 22/11/2022
 27287 000048B0 C3                      	retn
 27288                                  
 27289                                  	;entry	RENAME_MAKE	; Used by DOS_RENAME to "copy" a node
 27290                                  RENAME_MAKE:
 27291                                  make_type:
 27292                                  ;Extended Open hooks
 27293                                  	; MSDOS 6.0
 27294                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27295 000048B1 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27296 000048B6 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27297 000048B8 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27298                                  					;FT. set for extended open ;AN000;
 27299                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27300 000048BD F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27301 000048C2 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27302 000048C4 F9                      	STC				;FT. set carry			;AN000;
 27303 000048C5 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27304                                  	; 22/11/2022
 27305                                  make_retn:
 27306                                  	;return
 27307 000048C8 C3                      	retn				;FT.				;AN000;
 27308                                  
 27309                                  ;	Extended Open hooks
 27310                                  
 27311                                  make_type2:
 27312 000048C9 C43E[9E05]              	LES	DI,[THISSFT]
 27313 000048CD 31C0                    	XOR	AX,AX		; nothing exists Disk Node
 27314 000048CF F9                      	STC			; Not found
 27315 000048D0 EB59                    	JMP	short make_new
 27316                                  
 27317                                  ; The node exists. It may be either a device, directory or file:
 27318                                  ;   Zero set => directory
 27319                                  ;   High bit of CH on => device
 27320                                  ;   else => file
 27321                                  
 27322                                  make_exists:
 27323 000048D2 7447                    	JZ	short make_exists_dir
 27324 000048D4 B003                    	MOV	AL,3		; file exists type 3  (error or device node)
 27325                                  	;test	byte [ATTRIB],18h
 27326 000048D6 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27327 000048DB 753A                    	JNZ	short make_err_ret_5
 27328                                  				; Cannot already exist as Disk or Device Node
 27329                                  				;  if making DIR or Volume ID
 27330 000048DD 08ED                    	OR	CH,CH
 27331 000048DF 781A                    	JS	short make_share ; No further checks on attributes if device
 27332 000048E1 08E4                    	OR	AH,AH
 27333 000048E3 75C9                    	JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27334 000048E5 51                      	PUSH	CX		; Save device ID
 27335 000048E6 8E06[E405]              	MOV	ES,[CURBUF+2]
 27336                                  	;mov	ch,[es:bx+0Bh]
 27337 000048EA 268A6F0B                	MOV	CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27338                                  	;test	ch,1
 27339 000048EE F6C501                  	test	CH,attr_read_only
 27340 000048F1 7523                    	JNZ	short make_err_ret_5P ; Cannot create on read only files
 27341 000048F3 E8D5F7                  	call	MatchAttributes
 27342 000048F6 59                      	POP	CX		; Devid back in CH
 27343 000048F7 751E                    	JNZ	short make_err_ret_5 ; Attributes not ok
 27344 000048F9 30C0                    	XOR	AL,AL		; AL = 0, Disk Node
 27345                                  
 27346                                  make_share:
 27347                                  	;XOR	AH,AH
 27348                                  	; 23/02/2024
 27349 000048FB 98                      	cbw
 27350 000048FC 50                      	PUSH	AX		; Save Disk or Device node
 27351 000048FD 51                      	PUSH	CX		; Save Device ID
 27352 000048FE 88EC                    	MOV	AH,CH		; Device ID to AH
 27353 00004900 E84501                  	CALL	DOOPEN		; Fill in SFT for share check
 27354 00004903 C43E[9E05]              	LES	DI,[THISSFT]
 27355 00004907 56                      	push	si
 27356 00004908 53                      	push	bx		; Save CURBUF pointers
 27357 00004909 E8E828                  	call	ShareEnter
 27358 0000490C 735A                    	jnc	short MakeEndShare
 27359                                  
 27360                                  ; User failed request.
 27361 0000490E 5B                      	pop	bx
 27362 0000490F 5E                      	pop	si
 27363 00004910 59                      	pop	cx
 27364 00004911 58                      	pop	ax
 27365                                  
 27366                                  Make_Share_ret:
 27367 00004912 B006                    	MOV	AL,6
 27368 00004914 EB98                    	JMP	short make_err_ret
 27369                                  
 27370                                  make_err_ret_5P:
 27371 00004916 59                      	POP	CX		; Get back device ID
 27372                                  make_err_ret_5:
 27373 00004917 B005                    	MOV     AL,5		; Attribute mismatch
 27374                                          ; 22/11/2022
 27375 00004919 EB93                    	JMP	short make_err_ret
 27376                                  
 27377                                  make_exists_dir:
 27378 0000491B B001                    	MOV	AL,1		; exists as directory, always an error
 27379                                  	; 22/11/2022
 27380 0000491D EB8F                    	JMP	short make_err_ret
 27381                                  
 27382                                  make_save:
 27383 0000491F 50                      	PUSH	AX		; Save whether Disk or File
 27384 00004920 89C8                    	MOV	AX,CX		; Device ID to AH
 27385 00004922 E87400                  	CALL	NEWENTRY
 27386 00004925 58                      	POP	AX		; 0 if Disk, 3 if File
 27387 00004926 73A0                    	jnc	short make_retn
 27388 00004928 B002                    	MOV	AL,2		; create failed case 2
 27389                                  make_save_retn:
 27390 0000492A C3                      	retn
 27391                                  
 27392                                  make_new:
 27393 0000492B E8F1FF                  	call	make_save
 27394 0000492E 72FA                    	jc	short make_save_retn	; case 2 fail
 27395                                  	;test	byte [ATTRIB],10h
 27396 00004930 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27397 00004935 75F3                    	jnz	short make_save_retn	; Don't "open" directories,
 27398                                  					; so don't tell the sharer about them
 27399 00004937 50                      	push	ax
 27400 00004938 53                      	push	bx
 27401 00004939 56                      	push	si
 27402 0000493A E8B728                  	call	ShareEnter
 27403 0000493D 5E                      	pop	si
 27404 0000493E 5B                      	pop	bx
 27405 0000493F 58                      	pop	ax
 27406 00004940 73E8                    	jnc	short make_save_retn
 27407                                  
 27408                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27409                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27410                                  ; possible: delete the newly created directory entry and return share_error.
 27411                                  
 27412 00004942 50                      	PUSH	AX
 27413 00004943 C43E[E205]              	LES	DI,[CURBUF]
 27414                                  	;mov	byte [es:bx],0E5h
 27415 00004947 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27416                                  	
 27417                                  	; MSDOS 6.0
 27418                                  	;test	byte [es:di+5],40h
 27419 0000494B 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27420                                  					;LB. if already dirty		  ;AN000;
 27421 00004950 7508                    	JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27422                                  	; 22/11/2022
 27423 00004952 E8DD10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27424                                  	;or	byte [es:di+5],40h
 27425 00004955 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27426                                  yesdirty8:
 27427 0000495A C42E[8A05]              	LES	BP,[THISDPB]
 27428                                  	; 15/12/2022
 27429 0000495E 268A4600                	mov	al,[ES:BP]
 27430                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27431                                  	;;mov	al,[es:bp+0]
 27432                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27433 00004962 E8CB0F                  	call	FLUSHBUF		; write out buffer.
 27434 00004965 58                      	POP	AX
 27435 00004966 EBAA                    	jmp	short Make_Share_ret
 27436                                  
 27437                                  ; We have found an existing file. We have also entered it into the share set.
 27438                                  ; At this point we need to call newentry to correctly address the problem of
 27439                                  ; getting rid of old data (create an existing file) or creating a new
 27440                                  ; directory entry (create a new file). Unfortunately, this operation may
 27441                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27442                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27443                                  ; the share set now, do the operation and then reassert the share access.
 27444                                  ;
 27445                                  ; We are allowed to do this! There is no window! After all, we are in
 27446                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27447                                  
 27448                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27449                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27450                                  
 27451                                  MakeEndShare:
 27452 00004968 C43E[9E05]              	LES	DI,[THISSFT]		; grab SFT
 27453 0000496C 31C0                    	XOR	AX,AX
 27454 0000496E E881C9                  	call	ECritSFT
 27455 00004971 268705                  	xchg	AX,[ES:DI]
 27456                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27457 00004974 50                      	push	ax
 27458 00004975 57                      	push	di
 27459 00004976 06                      	push	es
 27460 00004977 9C                      	PUSHF
 27461 00004978 E87428                  	call	ShareEnd		; remove sharing
 27462 0000497B 9D                      	POPF
 27463 0000497C 07                      	pop	es
 27464 0000497D 5F                      	pop	di
 27465 0000497E 268F05                  	pop	word [ES:DI]
 27466                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27467 00004981 E889C9                  	call	LCritSFT
 27468                                  	; 22/11/2022
 27469                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27470 00004984 5B                      	pop	bx
 27471 00004985 5E                      	pop	si
 27472 00004986 59                      	pop	cx
 27473 00004987 58                      	pop	ax
 27474 00004988 E894FF                  	CALL	make_save
 27475                                  
 27476                                  ; If the user failed, we do not reenter into the sharing set.
 27477                                  
 27478 0000498B 729D                    	jc	short make_save_retn	; bye if error
 27479 0000498D 50                      	push	ax
 27480 0000498E 53                      	push	bx
 27481 0000498F 56                      	push	si
 27482 00004990 9C                      	PUSHF
 27483 00004991 E86028                  	call	ShareEnter
 27484 00004994 9D                      	POPF
 27485 00004995 5E                      	pop	si
 27486 00004996 5B                      	pop	bx
 27487 00004997 58                      	pop	ax
 27488                                  
 27489                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27490                                  
 27491                                  makeendshare_retn:
 27492 00004998 C3                      	retn
 27493                                  
 27494                                  ;---------------------------------------------------------------------------
 27495                                  ;
 27496                                  ; Procedure Name : NEWENTRY
 27497                                  ;
 27498                                  ; Inputs:
 27499                                  ;	  [THISSFT] set
 27500                                  ;	  [THISDPB] set
 27501                                  ;	  [LASTENT] current last valid entry number in directory if no free
 27502                                  ;		  entries
 27503                                  ;	  [VOLID] set if a volume ID was found during search
 27504                                  ;	Attrib Contains attributes for new file
 27505                                  ;	  [DIRSTART] Points to first cluster of dir (0 means root)
 27506                                  ;	  CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27507                                  ;		  NC means file existed (device)
 27508                                  ;		  C  means file did not exist
 27509                                  ;	  AH = Device ID byte
 27510                                  ;	  If FILE
 27511                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27512                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27513                                  ;	  If device
 27514                                  ;	  DS:BX points to start of "fake" directory entry
 27515                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27516                                  ;		  (has DWORD pointer to device header)
 27517                                  ; Function:
 27518                                  ;	  Make a new directory entry
 27519                                  ;	  If an old one existed it is truncated first
 27520                                  ; Outputs:
 27521                                  ;	  Carry set if error
 27522                                  ;		  Can't grow dir, atts didn't match, attempt to make 2nd
 27523                                  ;		  vol ID, user FAILed to I 24
 27524                                  ;	  else
 27525                                  ;		  outputs of DOOPEN
 27526                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27527                                  ;
 27528                                  ;----------------------------------------------------------------------------
 27529                                  
 27530                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27531                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27532                                  
 27533                                  NEWENTRY:
 27534 00004999 C42E[8A05]              	LES	BP,[THISDPB]
 27535 0000499D 7315                    	JNC	short EXISTENT
 27536 0000499F 803E[4A03]00            	CMP	byte [FAILERR],0
 27537                                  	;STC
 27538                                  	;jnz	short makeendshare_retn	; User FAILed, node might exist
 27539                                  	; 24/09/2023
 27540 000049A4 750C                    	jnz	short ERRRET3
 27541 000049A6 E810FE                  	CALL	BUILDDIR	; Try to build dir
 27542 000049A9 72ED                    	jc	short makeendshare_retn	; Failed
 27543 000049AB E8FCF3                  	call	GETENT		; Point at that free entry
 27544 000049AE 72E8                    	jc	short makeendshare_retn	; Failed
 27545 000049B0 EB0E                    	JMP	SHORT FREESPOT
 27546                                  
 27547                                  ERRRET3:
 27548 000049B2 F9                      	STC
 27549                                  newentry_retn:
 27550 000049B3 C3                      	retn
 27551                                  
 27552                                  EXISTENT:
 27553 000049B4 08E4                    	OR	AH,AH		; Check if file is I/O device
 27554 000049B6 7903                    	JNS	short NOT_DEV1
 27555 000049B8 E98D00                  	JMP	DOOPEN		; If so, proceed with open
 27556                                  
 27557                                  NOT_DEV1:
 27558 000049BB E82801                  	call	FREEENT	; Free cluster chain
 27559 000049BE 72F3                    	jc	short newentry_retn ; Failed
 27560                                  FREESPOT:
 27561                                  	;test	byte [ATTRIB],8
 27562 000049C0 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27563 000049C5 7407                    	JZ	short NOTVOLID
 27564 000049C7 803E[7B05]00            	CMP	BYTE [VOLID],0
 27565 000049CC 75E4                    	JNZ	short ERRRET3	; Can't create a second volume ID
 27566                                  NOTVOLID:
 27567 000049CE 8E06[E405]              	MOV	ES,[CURBUF+2]
 27568 000049D2 89DF                    	MOV	DI,BX
 27569                                  
 27570 000049D4 BE[4B05]                	MOV	SI,NAME1
 27571                                  
 27572 000049D7 B90500                  	MOV	CX,5
 27573 000049DA F3A5                    	REP	MOVSW
 27574 000049DC A4                      	MOVSB			; Move name into dir entry
 27575 000049DD A0[6B05]                	MOV	AL,[ATTRIB]
 27576 000049E0 AA                      	STOSB			; Attributes
 27577                                  
 27578                                  ;; File Tagging for Create DOS 4.00
 27579 000049E1 B105                    	MOV	CL,5		;FT. assume normal FBUGBUG	;AN000;
 27580                                  ;; File Tagging for Create DOS 4.00
 27581                                  
 27582 000049E3 31C0                    	XOR	AX,AX
 27583 000049E5 F3AB                    	REP	STOSW		; Zero pad
 27584 000049E7 E8FBC0                  	call	DATE16
 27585 000049EA 92                      	XCHG	AX,DX
 27586 000049EB AB                      	STOSW			; dir_time
 27587 000049EC 92                      	XCHG	AX,DX
 27588 000049ED AB                      	STOSW			; dir_date
 27589 000049EE 31C0                    	XOR	AX,AX
 27590 000049F0 57                      	PUSH	DI		; Correct SI input value
 27591                                  				; (recomputed for new buffer)
 27592 000049F1 AB                      	STOSW			; Zero dir_first and size
 27593 000049F2 AB                      	STOSW
 27594 000049F3 AB                      	STOSW
 27595                                  updnxt:
 27596 000049F4 8B36[E205]              	MOV	SI,[CURBUF]
 27597                                  
 27598                                  	; 19/05/2019 - Retro DOS v4.0
 27599                                  
 27600                                  	; MSDOS 6.0
 27601 000049F8 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27602                                  				;LB. if already dirty		  ;AN000;
 27603 000049FD 7508                    	JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27604 000049FF E83010                  	call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27605                                  	
 27606                                  	;or	byte [es:si+5],40h
 27607 00004A02 26804C0540              	OR	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27608                                  yesdirty9:
 27609 00004A07 C42E[8A05]              	LES	BP,[THISDPB]
 27610                                  	; 15/12/2022
 27611 00004A0B 268A4600                	MOV	AL,[ES:BP]
 27612                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27613                                  	;;mov	al,[es:bp+0]
 27614                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27615 00004A0F 50                      	PUSH	AX
 27616 00004A10 53                      	PUSH	BX
 27617                                  
 27618                                  ; If we have a file, we need to increment the open ref. count so that
 27619                                  ; we have some protection against invalid media changes if an Int 24
 27620                                  ; error occurs.
 27621                                  ; Do nothing for a device.
 27622                                  
 27623 00004A11 06                      	push	es
 27624 00004A12 57                      	push	di
 27625 00004A13 C43E[9E05]              	LES	DI,[THISSFT]
 27626                                  	;test	word [es:di+5],80h
 27627                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27628 00004A17 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27629 00004A1C 751A                    	jnz	short GotADevice
 27630 00004A1E 1E                      	push	ds
 27631 00004A1F 53                      	push	bx
 27632 00004A20 C51E[8A05]              	LDS	BX,[THISDPB]
 27633                                  	;mov	[es:di+7],bx
 27634 00004A24 26895D07                	MOV	[ES:DI+SF_ENTRY.sf_devptr],BX
 27635 00004A28 8CDB                    	MOV	BX,DS
 27636                                  	;mov	[es:di+9],bx
 27637 00004A2A 26895D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],BX
 27638 00004A2E 5B                      	pop	bx
 27639 00004A2F 1F                      	pop	ds ; need to use DS for segment later on
 27640                                  
 27641 00004A30 E8B4FA                  	call	DEV_OPEN_SFT	; increment ref. count
 27642 00004A33 C606[A20A]01            	mov	byte [VIRTUAL_OPEN],1; set flag
 27643                                  
 27644                                  GotADevice:
 27645 00004A38 5F                      	pop	di
 27646 00004A39 07                      	pop	es
 27647                                  
 27648 00004A3A E8F30E                  	call	FLUSHBUF
 27649                                  
 27650 00004A3D E8EC00                  	Call	CHECK_VIRT_OPEN	; decrement ref. count	;AN000;
 27651                                  
 27652 00004A40 5B                      	POP	BX
 27653 00004A41 58                      	POP	AX
 27654 00004A42 5E                      	POP	SI		; Get SI input back
 27655 00004A43 88C4                    	MOV	AH,AL		; Get I/O driver number back
 27656 00004A45 7301                    	jnc	short DOOPEN	
 27657 00004A47 C3                      	retn			; Failed
 27658                                  	
 27659                                  ;NOTE FALL THROUGH
 27660                                  
 27661                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27662                                  
 27663                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27664                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27665                                  
 27666                                  ; DOOPEN
 27667                                  ;----------------------------------------------------------------------------
 27668                                  ;
 27669                                  ; Inputs:
 27670                                  ;	  [THISDPB] points to DPB if file
 27671                                  ;	  [THISSFT] points to SFT being used
 27672                                  ;	  AH = Device ID byte
 27673                                  ;	  If FILE
 27674                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27675                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27676                                  ;	  If device
 27677                                  ;	  DS:BX points to start of "fake" directory entry
 27678                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27679                                  ;		  (has DWORD pointer to device header)
 27680                                  ; Function:
 27681                                  ;	  Fill in SFT from dir entry
 27682                                  ; Outputs:
 27683                                  ;	  CARRY CLEAR
 27684                                  ;	  sf_ref_count and sf_mode fields not altered
 27685                                  ;	  sf_flags high byte = 0
 27686                                  ;	  sf_flags low byte = AH except
 27687                                  ;	  sf_flags Bit 6 set (not dirty or not EOF)
 27688                                  ;	  sf_attr sf_date sf_time sf_name set from entry
 27689                                  ;	  sf_position = 0
 27690                                  ;	  If device
 27691                                  ;	  sf_devptr = dword at dir_first (pointer to device header)
 27692                                  ;	  sf_size = 0
 27693                                  ;	  If file
 27694                                  ;	  sf_firclus sf_size set from entry
 27695                                  ;	  sf_devptr = [THISDPB]
 27696                                  ;	  sf_cluspos = 0
 27697                                  ;	  sf_lstclus = sf_firclus
 27698                                  ;	  sf_dirsec sf_dirpos set
 27699                                  ; DS,SI,BX preserved, others destroyed
 27700                                  ;
 27701                                  ;----------------------------------------------------------------------------
 27702                                  
 27703                                  	;entry	DOOPEN
 27704                                  DOOPEN:
 27705                                  ;	Generate and store attribute
 27706                                  
 27707 00004A48 88E6                    	MOV	DH,AH	  	; AH to different place
 27708 00004A4A C43E[9E05]              	LES	DI,[THISSFT]
 27709                                  	;add	di,4
 27710 00004A4E 83C704                  	ADD	DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27711                                  	; 24/09/2023
 27712 00004A51 31C0                    	xor	ax,ax
 27713                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27714                                  				;  attribute of 0 (for R/O testing etc).
 27715 00004A53 08F6                    	OR	DH,DH		; See if our assumption good.
 27716 00004A55 7807                    	JS	short DEV_SFT1	; If device DS=DOSGROUP
 27717 00004A57 8E1E[E405]              	MOV	DS,[CURBUF+2]
 27718                                  	;mov	al,[BX+0Bh]
 27719 00004A5B 8A470B                  	MOV	AL,[BX+dir_entry.dir_attr]
 27720                                  				; If file, get attrib from dir entry
 27721                                  DEV_SFT1:
 27722 00004A5E AA                      	STOSB			; sf_attr, ES:DI -> sf_flags
 27723                                  
 27724                                  ;	Generate and store flags word
 27725                                  
 27726                                  	; 24/09/2023
 27727                                  	;XOR	AX,AX
 27728                                  	; ah=0
 27729 00004A5F 88F0                    	MOV	AL,DH
 27730                                  	;or	al,40h
 27731 00004A61 0C40                    	OR	AL,devid_file_clean
 27732 00004A63 AB                      	STOSW			; sf_flags, ES:DI -> sf_devptr
 27733                                  
 27734                                  ;	Generate and store device pointer
 27735                                  
 27736 00004A64 1E                      	PUSH	DS
 27737                                  	;lds	ax,[bx+1Ah]
 27738 00004A65 C5471A                  	LDS	AX,[BX+dir_entry.dir_first] ; Assume device
 27739 00004A68 08F6                    	OR	DH,DH
 27740 00004A6A 7805                    	JS	short DEV_SFT2
 27741                                  
 27742                                  ;hkn; SS override
 27743 00004A6C 36C506[8A05]            	LDS	AX,[SS:THISDPB]	; Was file
 27744                                  DEV_SFT2:
 27745 00004A71 AB                      	STOSW			; store offset
 27746 00004A72 8CD8                    	MOV	AX,DS
 27747 00004A74 1F                      	POP	DS
 27748 00004A75 AB                      	STOSW			; store segment
 27749                                  				; ES:DI -> sf_firclus
 27750                                  
 27751                                  ;	Generate pointer to, generate and store first cluster
 27752                                  ;	(irrelevant for devices)
 27753                                  
 27754 00004A76 56                      	PUSH	SI		; Save pointer to dir_first
 27755 00004A77 A5                      	MOVSW			; dir_first -> sf_firclus
 27756                                  				; DS:SI -> dir_size_l, ES:DI -> sf_time
 27757                                  
 27758                                  ;	Copy time/date of last modification
 27759                                  
 27760                                  	;sub	si,6
 27761 00004A78 83EE06                  	SUB	SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27762                                  				; DS:SI->dir_time
 27763 00004A7B A5                      	MOVSW			; dir_time -> sf_time
 27764                                  				; DS:SI -> dir_date, ES:DI -> sf_date
 27765 00004A7C A5                      	MOVSW			; dir_date -> sf_date
 27766                                  				; DS:SI -> dir_first, ES:DI -> sf_size
 27767                                  
 27768                                  ;	Generate and store file size (0 for devices)
 27769                                  
 27770 00004A7D AD                      	LODSW			; skip dir_first, DS:SI -> dir_size_l
 27771 00004A7E AD                      	LODSW			; dir_size_l in AX, DS:SI -> dir_size_h
 27772                                  	;MOV	CX,AX		; dir_size_l in CX
 27773                                  	; 23/02/2024
 27774 00004A7F 91                      	xchg	ax,cx
 27775 00004A80 AD                      	LODSW			; dir_size_h (size AX:CX), DS:SI -> ????
 27776 00004A81 08F6                    	OR	DH,DH
 27777 00004A83 7904                    	JNS	short FILE_SFT1
 27778 00004A85 31C0                    	XOR	AX,AX
 27779 00004A87 89C1                    	MOV	CX,AX		; Devices are open ended
 27780                                  FILE_SFT1:
 27781 00004A89 91                      	XCHG	AX,CX
 27782 00004A8A AB                      	STOSW			; Low word of sf_size
 27783 00004A8B 91                      	XCHG	AX,CX
 27784 00004A8C AB                      	STOSW			; High word of sf_size
 27785                                  				; ES:DI -> sf_position
 27786                                  ; Initialize position to 0
 27787                                  
 27788 00004A8D 31C0                    	XOR	AX,AX
 27789 00004A8F AB                      	STOSW
 27790 00004A90 AB                      	STOSW			; sf_position
 27791                                  				; ES:DI -> sf_cluspos
 27792                                  
 27793                                  ; Generate cluster optimizations for files
 27794                                  
 27795 00004A91 08F6                    	OR	DH,DH
 27796 00004A93 7843                    	JS	short DEV_SFT3
 27797 00004A95 AB                      	STOSW			; sf_cluspos ; 19h
 27798                                  	;mov	ax,[bx+1Ah]
 27799 00004A96 8B471A                  	MOV	AX,[BX+dir_entry.dir_first]
 27800                                  	; 19/05/2019
 27801                                  	; MSDOS 3.3
 27802                                  	;STOSW			; sf_lstclus ; 1Bh
 27803                                  	; MSDOS 6.0
 27804 00004A99 57                      	PUSH	DI		;AN004; save dirsec offset
 27805                                  	;sub	di,1Bh
 27806 00004A9A 83EF1B                  	SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27807                                  	;mov	[es:di+35h],ax
 27808 00004A9D 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27809 00004AA1 5F                      	POP	DI		;AN004; restore dirsec offset
 27810                                  
 27811                                  ; DOS 3.3  FastOpen  6/13/86
 27812                                  
 27813 00004AA2 1E                      	PUSH	DS
 27814                                  
 27815                                  ;hkn; SS is DOSDATA
 27816 00004AA3 16                      	push	ss
 27817 00004AA4 1F                      	pop	ds
 27818                                  	;test	byte [FastOpenFlg],4
 27819 00004AA5 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27820 00004AAA 7411                    	JZ	short Not_FastOpen
 27821                                  
 27822                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27823 00004AAC BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 27824                                  
 27825                                  	;mov	ax,[si+1]
 27826 00004AAF 8B4401                  	MOV	AX,[SI+FEI.dirsec]
 27827 00004AB2 AB                      	STOSW		  	; sf_dirsec
 27828                                  	; MSDOS 6.0
 27829                                  	;mov	ax,[si+3]
 27830 00004AB3 8B4403                  	MOV	AX,[SI+FEI.dirsec+2]
 27831                                  		;;; changed for >32mb
 27832 00004AB6 AB                      	STOSW		  	; sf_dirsec
 27833                                  	; 19/08//2018
 27834 00004AB7 8A04                    	mov	al,[SI]
 27835                                  	;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27836 00004AB9 AA                      	STOSB		  	; sf_dirpos
 27837 00004ABA 1F                      	POP	DS
 27838                                  	;JMP	short Next_Name
 27839                                  	; 24/09/2023
 27840 00004ABB EB1E                    	jmp	short FILE_SFT2	; cf=0 (after 'test' instruction)
 27841                                  
 27842                                  ; DOS 3.3  FastOpen  6/13/86
 27843                                  
 27844                                  Not_FastOpen:
 27845                                  	;POP	DS		; normal path
 27846                                  
 27847                                  ;hkn; SS override
 27848                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27849                                  	; 16/12/2022
 27850                                  	; 28/07/2019
 27851 00004ABD 8B36[E205]              	mov	si,[CURBUF]
 27852 00004AC1 1F                      	pop	ds
 27853                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27854                                  	;pop	ds
 27855                                  	;mov	si,[ss:CURBUF]
 27856                                  	
 27857                                  	;mov	ax,[si+6]
 27858 00004AC2 8B4406                  	MOV	AX,[SI+BUFFINFO.buf_sector]	;F.C. >32mb ;AN000;
 27859 00004AC5 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27860                                  	; 19/05/2019	
 27861                                  	; MSDOS 6.0
 27862                                  	;mov	ax,[si+8]
 27863 00004AC6 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27864 00004AC9 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27865                                  	
 27866 00004ACA 89D8                    	MOV	AX,BX
 27867                                  	;;add	si,16	; MSDOS 3.3
 27868                                  	;add	si,20	; MSDOS 6.0
 27869 00004ACC 83C614                  	ADD	SI,BUFINSIZ	; DS:SI-> start of data in buffer
 27870 00004ACF 29F0                    	SUB	AX,SI		; AX = BX relative to start of sector
 27871                                  	;mov	cl,32
 27872 00004AD1 B120                    	MOV	CL,dir_entry.size
 27873 00004AD3 F6F1                    	DIV	CL
 27874 00004AD5 AA                      	STOSB		  	; sf_dirpos
 27875                                  Next_Name:
 27876 00004AD6 EB03                    	JMP	SHORT FILE_SFT2
 27877                                  
 27878                                  	; 24/09/2023
 27879                                  	; cf=0 (after 'or' instruction)
 27880                                  DEV_SFT3:
 27881                                  	;add	di,7
 27882 00004AD8 83C707                  	ADD	DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27883                                  FILE_SFT2:
 27884                                  
 27885                                  ; Copy in the object's name
 27886                                  
 27887 00004ADB 89DE                    	MOV	SI,BX		; DS:SI points to dir_name
 27888 00004ADD B90B00                  	MOV	CX,11
 27889 00004AE0 F3A4                    	REP	MOVSB		; sf_name
 27890 00004AE2 5E                      	POP	SI		; recover DS:SI -> dir_first
 27891                                  
 27892                                  ;hkn; SS is DOSDATA
 27893 00004AE3 16                      	push	ss
 27894 00004AE4 1F                      	pop	ds
 27895                                  	; 24/09/2023
 27896                                  	; cf=0
 27897                                  	;CLC
 27898 00004AE5 C3                      	retn
 27899                                  
 27900                                  ;---------------------------------------------------------------------------
 27901                                  ;
 27902                                  ; Procedure Name : FREEENT
 27903                                  ;
 27904                                  ; Inputs:
 27905                                  ;	  ES:BP -> DPB
 27906                                  ;	  [CURBUF] Set
 27907                                  ;	  [CURBUF+2]:BX points to directory entry
 27908                                  ;	  [CURBUF+2]:SI points to above dir_first
 27909                                  ; Function:
 27910                                  ;	  Free the cluster chain for the entry if present
 27911                                  ; Outputs:
 27912                                  ;	  Carry set if error (currently user FAILed to I 24)
 27913                                  ;	  (NOTE dir_firclus and dir_size_l/h are wrong)
 27914                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27915                                  ;---------------------------------------------------------------------------
 27916                                  
 27917                                  	; 24/02/2024 - Retro DOS v4.1
 27918                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27919                                  FREEENT:
 27920 00004AE6 1E                      	PUSH	DS
 27921 00004AE7 C53E[E205]              	LDS	DI,[CURBUF]
 27922 00004AEB 8B0C                    	MOV	CX,[SI]		; Get pointer to clusters
 27923                                  	; 19/05/2019 - Retro DOS v4.0
 27924                                  	; MSDOS 6.0
 27925 00004AED 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb  ;AN000;
 27926                                  ;hkn; SS override
 27927 00004AF0 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	      ;F.C. >32mb  ;AN000;
 27928 00004AF5 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]
 27929 00004AF8 1F                      	POP	DS
 27930 00004AF9 83F902                  	CMP	CX,2
 27931 00004AFC 722C                    	JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27932                                  	;cmp	cx,[es:bp+0Dh]
 27933 00004AFE 263B4E0D                	CMP	CX,[ES:BP+DPB.MAX_CLUSTER]
 27934                                  	;JA	short RET1	; Treat like zero length file (firclus mucked)
 27935 00004B02 7715                    	ja	short freeent_retn ; 24/02/2024
 27936 00004B04 29FB                    	SUB	BX,DI
 27937 00004B06 53                      	PUSH	BX		; Save offset
 27938 00004B07 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27939 00004B0B 52                      	PUSH	DX		; Save sector number
 27940 00004B0C 89CB                    	MOV	BX,CX
 27941 00004B0E E8A402                  	call	RELEASE		; Free any data allocated
 27942 00004B11 5A                      	POP	DX
 27943 00004B12 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27944 00004B16 7302                    	JNC	short GET_BUF_BACK
 27945 00004B18 5B                      	POP	BX
 27946                                  freeent_retn:
 27947 00004B19 C3                      	retn			; Screw up
 27948                                  
 27949                                  GET_BUF_BACK:
 27950                                  	; 22/09/2023
 27951                                  	;;mov	byte [ALLOWED],18h
 27952                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27953                                  	;XOR	AL,AL ; *
 27954                                  	;call	GETBUFFR	; Get sector back
 27955 00004B1A E80F0D                  	call	GETBUFFER ; *	; pre read
 27956                                  
 27957 00004B1D 5B                      	POP	BX		; Get offset back
 27958 00004B1E 72F9                    	jc	short freeent_retn
 27959 00004B20 E8EDEA                  	call	SET_BUF_AS_DIR
 27960 00004B23 031E[E205]              	ADD	BX,[CURBUF]	; Correct it for new buffer
 27961                                  
 27962                                  	;MOV	SI,BX
 27963                                  	;;add	si,1Ah
 27964                                  	;ADD	SI,dir_entry.dir_first	; Get corrected SI
 27965                                  	; 24/02/2024 - Retro DOS v4.1
 27966                                  	;lea	si,[bx+1Ah]
 27967 00004B27 8D771A                  	lea	si,[bx+dir_entry.dir_first]
 27968                                  RET1:
 27969 00004B2A F8                      	CLC
 27970 00004B2B C3                      	retn
 27971                                  
 27972                                  ;---------------------------------------------------------------------------
 27973                                  ;
 27974                                  ; Procedure Name : CHECK_VIRT_OPEN
 27975                                  ;
 27976                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27977                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27978                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27979                                  ; flag [VIRTUAL_OPEN].
 27980                                  ; No registers affected (including flags).
 27981                                  ; On input, [THISSFT] points to current SFT.
 27982                                  ;
 27983                                  ;---------------------------------------------------------------------------
 27984                                  
 27985                                  CHECK_VIRT_OPEN:
 27986 00004B2C 50                      	PUSH	AX
 27987 00004B2D 9F                      	lahf			; preserve flags
 27988 00004B2E 803E[A20A]00            	CMP	byte [VIRTUAL_OPEN],0
 27989 00004B33 7410                    	JZ	short ALL_CLOSED
 27990 00004B35 C606[A20A]00            	mov	byte [VIRTUAL_OPEN],0 ; reset flag
 27991 00004B3A 06                      	push	es
 27992 00004B3B 57                      	push	di
 27993 00004B3C C43E[9E05]              	LES	DI,[THISSFT]
 27994 00004B40 E8ACF9                  	call	DEV_CLOSE_SFT
 27995 00004B43 5F                      	pop	di
 27996 00004B44 07                      	pop	es
 27997                                  
 27998                                  ALL_CLOSED:
 27999 00004B45 9E                      	sahf			; restore flags
 28000 00004B46 58                      	POP	AX
 28001 00004B47 C3                      	retn
 28002                                  
 28003                                  ;============================================================================
 28004                                  ; ROM.ASM, MSDOS 6.0, 1991
 28005                                  ;============================================================================
 28006                                  ; 29/07/2018 - Retro DOS v3.0
 28007                                  ; 20/05/2019 - Retro DOS v4.0
 28008                                  
 28009                                  ;	TITLE	ROM - Miscellaneous routines
 28010                                  ;	NAME	ROM
 28011                                  
 28012                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 28013                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 28014                                  ;
 28015                                  ;	SKPCLP
 28016                                  ;	FNDCLUS
 28017                                  ;	BUFSEC
 28018                                  ;	BUFRD
 28019                                  ;	BUFWRT
 28020                                  ;	NEXTSEC
 28021                                  ;	OPTIMIZE
 28022                                  ;	FIGREC
 28023                                  ;	ALLOCATE
 28024                                  ;	RESTFATBYT
 28025                                  ;	RELEASE
 28026                                  ;	RELBLKS
 28027                                  ;	GETEOF
 28028                                  ;
 28029                                  ;	Modification history:
 28030                                  ;
 28031                                  ;		Created: ARR 30 March 1983
 28032                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 28033                                  
 28034                                  ;Break   <FNDCLUS -- Skip over allocation units>
 28035                                  ;--------------------------------------------------------------------------
 28036                                  ;
 28037                                  ; Procedure Name : FNDCLUS
 28038                                  ;
 28039                                  ; Inputs:
 28040                                  ;       CX = No. of clusters to skip
 28041                                  ;       ES:BP = Base of drive parameters
 28042                                  ;       [THISSFT] point to SFT
 28043                                  ; Outputs:
 28044                                  ;       BX = Last cluster skipped to
 28045                                  ;       CX = No. of clusters remaining (0 unless EOF)
 28046                                  ;       DX = Position of last cluster
 28047                                  ;       Carry set if error (currently user FAILed to I 24)
 28048                                  ; DI destroyed. No other registers affected.
 28049                                  ;--------------------------------------------------------------------------
 28050                                  
 28051                                  	; 10/02/2024 - Retro DOS v4.1
 28052                                  FNDCLUS_X:
 28053 00004B48 8B0E[BC05]              	mov	cx,[CLUSNUM]
 28054                                  
 28055                                  ; 20/05/2019 - Retro DOS v4.0
 28056                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 28057                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28058                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 28059                                  
 28060                                  FNDCLUS:
 28061 00004B4C 06                      	PUSH	ES
 28062 00004B4D C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 28063                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 28064                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 28065 00004B51 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 28066                                  	;mov	dx,[es:di+19h]
 28067 00004B55 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 28068 00004B59 09DB                    	OR	BX,BX
 28069 00004B5B 7424                    	JZ	short NOCLUS
 28070                                  
 28071 00004B5D 29D1                            SUB     CX,DX
 28072 00004B5F 7308                            JNB	short FINDIT
 28073                                  
 28074 00004B61 01D1                            ADD     CX,DX
 28075 00004B63 31D2                            XOR     DX,DX
 28076                                  	;mov	bx,[es:di+0Bh]
 28077 00004B65 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28078                                  FINDIT:
 28079 00004B69 07                              POP	ES
 28080 00004B6A E313                    	JCXZ	RET9
 28081                                  
 28082                                  	;entry	SKPCLP
 28083                                  SKPCLP:
 28084 00004B6C E8B808                  	call	UNPACK
 28085 00004B6F 7214                            jc	short fndclus_retn	; retc
 28086                                  
 28087                                  	; 09/09/2018
 28088                                  
 28089                                  	; MSDOS 3.3
 28090                                  	;push	bx
 28091                                  	;mov	bx,di
 28092                                  	;call	IsEOF
 28093                                  	;pop	bx	
 28094                                  	;jae	short RET9
 28095                                  
 28096                                  	; 20/05/2019 - Retro DOS v4.0
 28097                                  
 28098                                  	; MSDOS 6.0
 28099 00004B71 87DF                    	xchg	bx,di
 28100 00004B73 E89A08                  	call	IsEOF
 28101 00004B76 87DF                    	xchg	bx,di
 28102 00004B78 7305                    	jae	short RET9
 28103                                  
 28104 00004B7A 87DF                            XCHG    BX,DI
 28105 00004B7C 42                              INC     DX
 28106                                  
 28107 00004B7D E2ED                    	LOOP	SKPCLP			; RMFS
 28108                                  RET9:	
 28109 00004B7F F8                      	CLC
 28110 00004B80 C3                              retn
 28111                                  NOCLUS:
 28112 00004B81 07                              POP	ES
 28113 00004B82 41                              INC	CX
 28114 00004B83 4A                              DEC	DX
 28115 00004B84 F8                              CLC
 28116                                  
 28117                                  fndclus_retn:
 28118 00004B85 C3                              retn
 28119                                  
 28120                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28121                                  ;--------------------------------------------------------------------------
 28122                                  ;
 28123                                  ; Procedure Name : BUFSEC
 28124                                  ;
 28125                                  ; Inputs:
 28126                                  ;       AH = priority of buffer
 28127                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28128                                  ;       ES:BP = Base of drive parameters
 28129                                  ;       [CLUSNUM] = Physical cluster number
 28130                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28131                                  ;       [BYTCNT1] = Size of transfer
 28132                                  ; Function:
 28133                                  ;       Insure specified sector is in buffer, flushing buffer before
 28134                                  ;       read if necessary.
 28135                                  ; Outputs:
 28136                                  ;       ES:DI = Pointer to buffer
 28137                                  ;       SI = Pointer to transfer address
 28138                                  ;       CX = Number of bytes
 28139                                  ;       [NEXTADD] updated
 28140                                  ;       [TRANS] set to indicate a transfer will occur
 28141                                  ;       Carry set if error (user FAILed to I 24)
 28142                                  ;--------------------------------------------------------------------------
 28143                                  
 28144                                  BUFSEC:
 28145 00004B86 8B16[BC05]              	MOV	DX,[CLUSNUM]
 28146 00004B8A 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 28147                                  	;mov	byte [ALLOWED],38h
 28148 00004B8E C606[4B03]38            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28149 00004B93 E84F01                  	CALL	FIGREC
 28150 00004B96 E89A0C                  	call	GETBUFFR
 28151 00004B99 72EA                    	jc	short fndclus_retn
 28152                                  
 28153 00004B9B C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 28154 00004BA0 8B36[B805]              	MOV	SI,[NEXTADD]
 28155 00004BA4 89F7                    	MOV	DI,SI
 28156 00004BA6 8B0E[D205]              	MOV	CX,[BYTCNT1]
 28157 00004BAA 01CF                    	ADD	DI,CX
 28158 00004BAC 893E[B805]              	MOV	[NEXTADD],DI
 28159 00004BB0 C43E[E205]              	LES	DI,[CURBUF]
 28160                                  	;or	byte [es:di+5],8
 28161 00004BB4 26804D0508              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28162                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28163                                  	;lea	di,[di+20] ; MSDOS 6.0
 28164 00004BB9 8D7D14                  	LEA	DI,[DI+BUFINSIZ]        ; Point to buffer
 28165 00004BBC 033E[CC05]              	ADD	DI,[BYTSECPOS]
 28166 00004BC0 F8                      	CLC
 28167 00004BC1 C3                      	retn
 28168                                  
 28169                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28170                                  
 28171                                  ;---------------------------------------------------------------------------
 28172                                  ;
 28173                                  ; Procedure Name : BUFRD
 28174                                  ;
 28175                                  ; Do a partial sector read via one of the system buffers
 28176                                  ; ES:BP Points to DPB
 28177                                  ; Carry set if error (currently user FAILed to I 24)
 28178                                  ;
 28179                                  ; DS - set to DOSDATA
 28180                                  ;
 28181                                  ;----------------------------------------------------------------------------
 28182                                  
 28183                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28184                                  	; 20/05/2019 - Retro DOS v4.0
 28185                                  BUFRD:
 28186 00004BC2 06                      	PUSH	ES
 28187 00004BC3 31C0                    	xor	ax,ax			; pre-read sector
 28188 00004BC5 E8BEFF                  	CALL	BUFSEC
 28189 00004BC8 7303                    	JNC	short BUF_OK ; ds=ss
 28190                                  
 28191                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28192 00004BCA 07                      	POP	ES
 28193 00004BCB EB2D                    	JMP	SHORT RBUFPLACED ; ds=ss ; 25/02/2024 - Retro DOS v4.1
 28194                                  
 28195                                  BUF_OK:
 28196 00004BCD 8CC3                    	MOV	BX,ES
 28197 00004BCF 8E06[2E03]              	MOV	ES,[DMAADD+2]
 28198 00004BD3 8EDB                    	MOV	DS,BX
 28199 00004BD5 87FE                    	XCHG	DI,SI
 28200 00004BD7 D1E9                    	SHR	CX,1
 28201                                  ;M039
 28202                                  	; MSDOS 3.3
 28203                                  	;JNC	short EVENRD
 28204                                  	;MOVSB
 28205                                  ;EVENRD:
 28206                                  	;REP	MOVSW
 28207                                  
 28208                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28209                                  ;       DS:SI-> Source within Buffer.
 28210                                  ;       ES:DI-> Destination within Transfer memory block.
 28211                                  
 28212                                  	; MSDOS 6.0
 28213 00004BD9 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28214                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28215                                  	;rep	movsb			;Copy last byte.
 28216                                  	; 16/12/2022
 28217 00004BDB 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28218 00004BDD A4                      	movsb ; ****
 28219                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28220                                  	;adc	cx,0
 28221                                  	;rep	movsb
 28222                                  ;M039
 28223                                  EVENRD: ; ****
 28224 00004BDE 07                      	POP	ES
 28225                                  ;hkn; SS override
 28226 00004BDF 36C53E[E205]            	LDS	DI,[SS:CURBUF]
 28227                                  	;;lea	bx,[di+16]
 28228                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28229 00004BE4 8D5D14                  	LEA	BX,[DI+BUFINSIZ]
 28230 00004BE7 29DE                    	SUB	SI,BX			; Position in buffer
 28231 00004BE9 E8E70B                  	call	PLACEBUF
 28232                                  	;cmp	si,[es:bp+2]
 28233 00004BEC 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28234 00004BF0 7205                    	JB	short RBUFPLACEDC ; ds<>ss ; No, leave buf where it is
 28235                                  ;M039
 28236                                  	; MSDOS 3.3
 28237                                  	;call	PLACEHEAD 		; Make it prime candidate for chucking
 28238                                  					;  even though it is MRU.
 28239                                  	; MSDOS 6.0
 28240 00004BF2 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28241                                  ;M039					; chucking even though it is MRU.
 28242                                  
 28243                                  RBUFPLACEDC:
 28244 00004BF7 F8                      	CLC
 28245                                  ;RBUFPLACED:
 28246 00004BF8 16                      	push	ss
 28247 00004BF9 1F                      	pop	ds
 28248                                  RBUFPLACED:	; 25/02/2024 (ds=ss)
 28249 00004BFA C3                      	retn
 28250                                  
 28251                                  ;----------------------------------------------------------------------------
 28252                                  ;
 28253                                  ; Procedure : BUFWRT
 28254                                  ;
 28255                                  ; Do a partial sector write via one of the system buffers
 28256                                  ; ES:BP Points to DPB
 28257                                  ; Carry set if error (currently user FAILed to I 24)
 28258                                  ;
 28259                                  ; DS - set to DOSDATA
 28260                                  ;
 28261                                  ;----------------------------------------------------------------------------
 28262                                  
 28263                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28264                                  	; 20/05/2019 - Retro DOS v4.0
 28265                                  BUFWRT:
 28266                                  	;MOV	AX,[SECPOS]
 28267                                  	; MSDOS 6.0
 28268                                  	;ADD	AX,1			; Set for next sector
 28269                                  	;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28270                                  	;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28271                                  	; 24/09/2023
 28272 00004BFB FF06[C405]              	inc	word [SECPOS]
 28273 00004BFF 7504                    	jnz	short bufw_secpos
 28274 00004C01 FF06[C605]              	inc	word [SECPOS+2]
 28275                                  bufw_secpos:
 28276 00004C05 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28277 00004C08 3B06[CA05]              	CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28278 00004C0C B001                    	MOV	AL,1			;F.C. >32mb	;AN000;
 28279 00004C0E 770F                    	JA	short NOREAD		;F.C. >32mb	;AN000;
 28280 00004C10 720B                    	JB	short _doread		;F.C. >32mb	;AN000;
 28281 00004C12 A1[C405]                	MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28282                                  
 28283                                  	; MSDOS 3.3
 28284                                  	;INC	AX
 28285                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28286                                  
 28287                                  	; 20/05/2019
 28288                                  	; MSDOS 3.3 & MSDOS 6.0
 28289 00004C15 3B06[C805]              	CMP	AX,[VALSEC]		; Has sector been written before?
 28290 00004C19 B001                    	MOV	AL,1
 28291 00004C1B 7702                    	JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28292                                  _doread:
 28293 00004C1D 30C0                    	XOR	AL,AL
 28294                                  NOREAD:
 28295 00004C1F 06                      	PUSH	ES
 28296 00004C20 E863FF                  	CALL	BUFSEC
 28297 00004C23 72A5                    	JC	short BUF_IO_FAIL
 28298 00004C25 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 28299 00004C29 D1E9                    	SHR	CX,1
 28300                                  ;M039
 28301                                  	; MSDOS 3.3
 28302                                  	;JNC	short EVENWRT ; 09/09/2018
 28303                                  	;MOVSB
 28304                                  ;EVENWRT:
 28305                                  	;REP	MOVSW
 28306                                  
 28307                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28308                                  ;	DS:SI-> Source within Transfer memory block.
 28309                                  ;	ES:DI-> Destination within Buffer.
 28310                                  
 28311                                  	; MSDOS 6.0
 28312 00004C2B F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28313                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28314                                  	;rep	movsb		  	;Copy last byte.
 28315                                  	; 16/12/2022
 28316 00004C2D 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28317 00004C2F A4                      	movsb ; ****
 28318                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28319                                  	;adc	cx,0
 28320                                  	;rep	movsb
 28321                                  ;M039
 28322                                  EVENWRT: ; ****
 28323 00004C30 07                      	POP	ES
 28324                                  
 28325                                  ;hkn; SS override
 28326 00004C31 36C51E[E205]            	LDS	BX,[SS:CURBUF]
 28327                                  
 28328                                  	; MSDOS 6.0
 28329 00004C36 F6470540                	TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28330                                  					;LB. if already dirty		 ;AN000;
 28331 00004C3A 7507                    	JNZ	short yesdirty10	;LB. don't increment dirty count ;AN000;
 28332 00004C3C E8F30D                  	call	INC_DIRTY_COUNT		;LB.				 ;AN000;
 28333                                  	
 28334                                  	;or	byte [bx+5],40h
 28335 00004C3F 804F0540                	OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28336                                  yesdirty10:
 28337                                  	;;lea	si,[bx+16]
 28338                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28339 00004C43 8D7714                  	LEA	SI,[BX+BUFINSIZ]
 28340 00004C46 29F7                    	SUB	DI,SI		  	; Position in buffer
 28341                                  ;M039
 28342                                  	; MSDOS 3.3
 28343                                  	;MOV	SI,DI
 28344                                  	;MOV	DI,BX
 28345                                  	;call	PLACEBUF
 28346                                  	;;cmp	si,[es:bp+2]
 28347                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28348                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28349                                  	;call	PLACEHEAD		; Make it prime candidate for chucking
 28350                                  					;  even though it is MRU.
 28351                                  	; 10/02/2024
 28352 00004C48 16                      	push	ss
 28353 00004C49 1F                      	pop	ds
 28354                                  
 28355                                  	; MSDOS 6.0
 28356                                  	;cmp	di,[es:bp+2]
 28357 00004C4A 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28358 00004C4E 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 28359                                  
 28360                                  	; 10/02/2024
 28361                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28362                                  					; chucking even though it is MRU.
 28363 00004C50 891E[6D00]              	mov	[BufferQueue],bx
 28364                                  ;M039
 28365                                  
 28366                                  WBUFPLACED:
 28367 00004C54 F8                      	CLC
 28368                                  	; 10/02/2024
 28369                                  	;push	ss
 28370                                  	;pop	ds
 28371 00004C55 C3                      	retn
 28372                                  
 28373                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28374                                  ;---------------------------------------------------------------------------
 28375                                  ;
 28376                                  ; Procedure Name : NEXTSEC
 28377                                  ;
 28378                                  ; Compute the next sector to read or write
 28379                                  ; ES:BP Points to DPB
 28380                                  ;
 28381                                  ;---------------------------------------------------------------------------
 28382                                  
 28383                                  NEXTSEC:
 28384 00004C56 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28385                                  	;JZ	short CLRET
 28386                                  	; 29/02/2024
 28387 00004C5B 7427                    	jz	short CLRET2
 28388                                  
 28389 00004C5D A0[7305]                	MOV	AL,[SECCLUSPOS]
 28390 00004C60 FEC0                    	INC	AL
 28391                                  	;cmp	al,[es:bp+4]
 28392 00004C62 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 28393 00004C66 7618                    	JBE	short SAVPOS
 28394                                  
 28395 00004C68 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 28396 00004C6C E8A107                  	call	IsEOF
 28397 00004C6F 7314                    	JAE	short NONEXT
 28398                                  
 28399 00004C71 E8B307                  	call	UNPACK
 28400                                  	;JC	short NONEXT
 28401                                  	; 26/02/2024
 28402 00004C74 7210                    	jc	short NONEXT2
 28403                                  clusgot:
 28404 00004C76 893E[BC05]              	MOV	[CLUSNUM],DI
 28405 00004C7A FF06[BA05]              	INC	word [LASTPOS]
 28406 00004C7E B000                    	MOV	AL,0
 28407                                  SAVPOS:
 28408 00004C80 A2[7305]                	MOV	[SECCLUSPOS],AL
 28409                                  CLRET:
 28410 00004C83 F8                              CLC
 28411                                  CLRET2:		; 29/02/2024
 28412 00004C84 C3                      	retn
 28413                                  NONEXT:
 28414 00004C85 F9                      	STC
 28415                                  NONEXT2:	; 26/02/2024
 28416 00004C86 C3                      	retn
 28417                                  
 28418                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28419                                  ;----------------------------------------------------------------------------
 28420                                  ;
 28421                                  ; Procedure Name : OPTIMIZE
 28422                                  ;
 28423                                  ; Inputs:
 28424                                  ;	  BX = Physical cluster
 28425                                  ;	  CX = No. of records
 28426                                  ;	  DL = sector within cluster
 28427                                  ;	  ES:BP = Base of drive parameters
 28428                                  ;	  [NEXTADD] = transfer address
 28429                                  ; Outputs:
 28430                                  ;	  AX = No. of records remaining
 28431                                  ;	  BX = Transfer address
 28432                                  ;	  CX = No. or records to be transferred
 28433                                  ;	  DX = Physical sector address (LOW)
 28434                                  ;	  [HIGH_SECTOR] = Physical sector address (HIGH)
 28435                                  ;	  DI = Next cluster
 28436                                  ;	  [CLUSNUM] = Last cluster accessed
 28437                                  ;	  [NEXTADD] updated
 28438                                  ;	  Carry set if error (currently user FAILed to I 24)
 28439                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28440                                  ;
 28441                                  ;---------------------------------------------------------------------------
 28442                                  
 28443                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28444                                  OPTIMIZE:
 28445 00004C87 52                      	PUSH	DX
 28446 00004C88 53                      	PUSH	BX
 28447                                  	;mov	al,[es:bp+4]
 28448 00004C89 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 28449 00004C8D FEC0                    	INC	AL		; Number of sectors per cluster
 28450 00004C8F 88C4                    	MOV	AH,AL
 28451 00004C91 28D0                    	SUB	AL,DL		; AL = Num of sectors left in first cluster
 28452 00004C93 89CA                    	MOV	DX,CX
 28453                                  	;MOV	CX,0
 28454                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28455                                  	; 16/12/2022
 28456 00004C95 31C9                    	xor	cx,cx	; sub cx,cx
 28457                                  OPTCLUS:
 28458                                  ; AL has number of sectors available in current cluster
 28459                                  ; AH has number of sectors available in next cluster
 28460                                  ; BX has current physical cluster
 28461                                  ; CX has number of sequential sectors found so far
 28462                                  ; DX has number of sectors left to transfer
 28463                                  ; ES:BP Points to DPB
 28464                                  ; ES:SI has FAT pointer
 28465                                  
 28466                                  do_norm3:
 28467 00004C97 E88D07                  	call	UNPACK
 28468 00004C9A 7236                    	JC	short OP_ERR
 28469                                  clusgot2:
 28470 00004C9C 00C1                    	ADD	CL,AL
 28471 00004C9E 80D500                  	ADC	CH,0
 28472 00004CA1 39D1                    	CMP	CX,DX
 28473 00004CA3 7332                    	JAE	short BLKDON
 28474 00004CA5 88E0                    	MOV	AL,AH
 28475 00004CA7 43                      	INC	BX
 28476 00004CA8 39DF                    	CMP	DI,BX
 28477 00004CAA 74EB                    	JZ	short OPTCLUS
 28478 00004CAC 4B                      	DEC	BX
 28479                                  FINCLUS:
 28480 00004CAD 891E[BC05]              	MOV	[CLUSNUM],BX	; Last cluster accessed
 28481 00004CB1 29CA                    	SUB	DX,CX		; Number of sectors still needed
 28482 00004CB3 52                      	PUSH	DX
 28483 00004CB4 89C8                    	MOV	AX,CX
 28484                                  	;mul	word[ES:BP+2]
 28485 00004CB6 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28486                                  				; Number of sectors times sector size
 28487 00004CBA 8B36[B805]              	MOV	SI,[NEXTADD]
 28488 00004CBE 01F0                    	ADD	AX,SI		; Adjust by size of transfer
 28489 00004CC0 A3[B805]                	MOV	[NEXTADD],AX
 28490 00004CC3 58                      	POP	AX		; Number of sectors still needed
 28491 00004CC4 5A                      	POP	DX		; Starting cluster
 28492 00004CC5 29D3                    	SUB	BX,DX		; Number of new clusters accessed
 28493 00004CC7 011E[BA05]              	ADD	[LASTPOS],BX
 28494 00004CCB 5B                      	POP	BX		; BL = sector position within cluster
 28495 00004CCC E81600                  	call	FIGREC
 28496 00004CCF 89F3                    	MOV	BX,SI
 28497                                  	; 24/09/2023
 28498                                  	; cf=0 (at the return of FIGREC)
 28499                                  	;CLC
 28500 00004CD1 C3                      	retn
 28501                                  OP_ERR:
 28502 00004CD2 83C404                  	ADD	SP,4
 28503 00004CD5 F9                      	STC
 28504 00004CD6 C3                      	retn
 28505                                  BLKDON:
 28506 00004CD7 29D1                    	SUB	CX,DX	  	; Number of sectors in cluster we don't want
 28507 00004CD9 28CC                    	SUB	AH,CL	  	; Number of sectors in cluster we accepted
 28508 00004CDB FECC                    	DEC	AH		; Adjust to mean position within cluster
 28509 00004CDD 8826[7305]              	MOV	[SECCLUSPOS],AH
 28510 00004CE1 89D1                    	MOV	CX,DX		; Anyway, make the total equal to the request
 28511 00004CE3 EBC8                    	JMP	SHORT FINCLUS
 28512                                  
 28513                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28514                                  ;---------------------------------------------------------------------------
 28515                                  ;
 28516                                  ; Procedure Name : FIGREC
 28517                                  ;
 28518                                  ; Inputs:
 28519                                  ;	  DX = Physical cluster number
 28520                                  ;	  BL = Sector position within cluster
 28521                                  ;	  ES:BP = Base of drive parameters
 28522                                  ; Outputs:
 28523                                  ;	  DX = physical sector number (LOW)
 28524                                  ;	  [HIGH_SECTOR] Physical sector address (HIGH)
 28525                                  ; No other registers affected.
 28526                                  ;
 28527                                  ;---------------------------------------------------------------------------
 28528                                  
 28529                                  	; 10/06/2019
 28530                                  	; 20/05/2019 - Retro DOS v4.0
 28531                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28532                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28533                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)
 28534                                  
 28535                                  	; 27/02/2024 - Retro DOS v4.1
 28536                                  	; (ds=ss)
 28537                                  FIGREC:
 28538 00004CE5 51                      	PUSH	CX
 28539                                  	;
 28540                                  	; 27/02/2024
 28541 00004CE6 31C9                    	xor	cx,cx
 28542 00004CE8 890E[0706]              	mov	[HIGH_SECTOR],cx ;0
 28543                                  	;
 28544                                  	;mov	cl,[es:bp+5]
 28545 00004CEC 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28546 00004CF0 4A                      	DEC	DX
 28547 00004CF1 4A                      	DEC	DX
 28548                                  
 28549                                  	; MSDOS 3.3
 28550                                  	;SHL	DX,CL
 28551                                  
 28552                                  ;hkn; SS override HIGH_SECTOR
 28553                                  	; MSDOS 6.0
 28554                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28555                                  	; 27/02/2024
 28556                                  	;mov	word [HIGH_SECTOR],0
 28557                                  	; 24/09/2023
 28558                                  	;;xor	ch,ch				;F.C. >32mb
 28559                                  	;OR	CL,CL				;F.C. >32mb
 28560                                  	;JZ	short noshift			;F.C. >32mb
 28561                                  	; 27/02/2024
 28562 00004CF2 E309                    	jcxz	noshift
 28563                                  	; 27/02/2024
 28564                                  	;;XOR	CH,CH				;F.C. >32mb
 28565                                  rotleft:					;F.C. >32mb
 28566 00004CF4 F8                      	CLC					;F.C. >32mb
 28567 00004CF5 D1D2                    	RCL	DX,1				;F.C. >32mb
 28568                                  	; 10/06/2019
 28569                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28570                                  	; 27/02/2024
 28571 00004CF7 D116[0706]              	rcl	word [HIGH_SECTOR],1
 28572 00004CFB E2F7                    	LOOP	rotleft				;F.C. >32mb
 28573                                  noshift:
 28574                                  	; MSDOS 3.3 & MSDOS 6.0
 28575 00004CFD 08DA                    	OR	DL,BL
 28576                                  	;add	dx,[es:bp+0Bh]
 28577 00004CFF 2603560B                	ADD	DX,[ES:BP+DPB.FIRST_SECTOR]
 28578                                  	; MSDOS 6.0
 28579                                  	; 10/06/2019
 28580                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28581                                  	; 24/09/2023
 28582                                  	; cx=0
 28583                                  	;ADC	word [ss:HIGH_SECTOR],cx ; 0
 28584                                  	; 27/02/2024
 28585 00004D03 110E[0706]              	adc	word [HIGH_SECTOR],cx ; 0
 28586                                  
 28587                                  	; MSDOS 3.3 & MSDOS 6.0
 28588 00004D07 59                      	POP	CX
 28589                                  figrec_retn:
 28590 00004D08 C3                      	retn
 28591                                  
 28592                                  ; 20/05/2019 - Retro DOS v4.0
 28593                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28594                                  
 28595                                  ; 30/07/2018 - Retro DOS v3.0
 28596                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28597                                  
 28598                                  ;Break   <ALLOCATE -- Assign disk space>
 28599                                  ;---------------------------------------------------------------------------
 28600                                  ;
 28601                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28602                                  ;
 28603                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28604                                  ;   FAT-chained onto the end of the existing file.
 28605                                  ;
 28606                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28607                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28608                                  ;   numbered clusters, looking for the necessary free blocks.
 28609                                  ;
 28610                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28611                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28612                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28613                                  ;
 28614                                  ;       If we get to the end of the disk without satisfaction:
 28615                                  ;
 28616                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28617                                  ;               return (insufficient_disk_space)
 28618                                  ;           ELSE
 28619                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28620                                  ;
 28621                                  ;   Note that there is no multitasking interlock. There is no race when
 28622                                  ;   examining the entrys in an in-core FAT block since there will be no
 28623                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28624                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28625                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28626                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28627                                  ;   satisfied. We can't allow another activation to think this cluster is
 28628                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28629                                  ;   allocated.
 28630                                  ;
 28631                                  ;   Note that when we run out of space this algorithem will scan from
 28632                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28633                                  ;   redundantly scanning the later part of the disk. This only happens when
 28634                                  ;   we run out of space, so sue me.
 28635                                  ;
 28636                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28637                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28638                                  ;                                                                          ;
 28639                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28640                                  ;   explanation:
 28641                                  ;
 28642                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28643                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28644                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28645                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28646                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28647                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28648                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28649                                  ;   the
 28650                                  ;           LOOP   findfre         ; alloc more if needed
 28651                                  ;   instruction when the first cluster is allocated to the nul file. The
 28652                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28653                                  ;
 28654                                  ;   This method is obviously useless (because it is non-reentrant) for
 28655                                  ;   multitasking, and will have to be changed. Storing the required value on
 28656                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28657                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28658                                  ;   problems with INT 24 well.
 28659                                  ;
 28660                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28661                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28662                                  ;                                                                          ;
 28663                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28664                                  ;               CX = No. of clusters to allocate
 28665                                  ;               ES:BP = Base of drive parameters
 28666                                  ;               [THISSFT] = Points to SFT
 28667                                  ;
 28668                                  ;       EXIT    'C' set if insufficient space
 28669                                  ;                 [FAILERR] can be tested to see the reason for failure
 28670                                  ;                 CX = max. no. of clusters that could be added to file
 28671                                  ;               'C' clear if space allocated
 28672                                  ;                 BX = First cluster allocated
 28673                                  ;                 FAT is fully updated
 28674                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28675                                  ;
 28676                                  ;       USES    ALL but SI, BP
 28677                                  
 28678                                  ;callmagic  proc near
 28679                                  ;       push    ds                             ;push segment of routine 
 28680                                  ;       push    Offset MagicPatch              ;push offset for routine
 28681                                  ;       retf                                   ;simulate jmp far
 28682                                  ;                                              ;far return address is on
 28683                                  ;                                              ;stack, so far return from
 28684                                  ;                                              ;call will return this routine
 28685                                  ;callmagic  endp
 28686                                  
 28687                                  ALLOCATE:
 28688                                  	; 10/09/2018
 28689                                  ;BEGIN MAGICDRV MODIFICATIONS
 28690                                  ;
 28691                                  ;7/5/92 scottq
 28692                                  ;
 28693                                  ;This is the disk compression patch location which allows
 28694                                  ;the disk compression software to fail allocations if the
 28695                                  ;FAT would allows allocation, but the free space for compressed
 28696                                  ;data would not.
 28697                                  ;        
 28698                                  ;;;	call    far ptr MAGICPATCH
 28699                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28700                                  ;;; but we do know the segment and offset of the routine
 28701                                  ;;; so simulate a far call to dosdata:magicpatch
 28702                                  ;;; note dosassume above, so DS -> dosdata
 28703                                  
 28704                                  	; MSDOS 6.0
 28705                                          ;clc				;clear carry so we fall through
 28706                                  	;				;if no patch is present
 28707                                  	;push	cs			;push segment for far return
 28708                                          ;call	callmagic		;this is a near call
 28709                                          ;jnc	short Regular_Allocate_Path
 28710                                  	;jmp	Disk_Full_Return
 28711                                  
 28712                                  ;Regular_Allocate_Path:
 28713                                  	; 20/05/2019 - Retro DOS v4.0
 28714                                  ;END MAGICDRV MODIFICATIONS
 28715                                  
 28716                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28717                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28718                                  
 28719 00004D09 53                              PUSH    BX                      ; save (bx)
 28720 00004D0A 31DB                            XOR     BX,BX
 28721 00004D0C E81807                  	call	UNPACK
 28722 00004D0F 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28723 00004D13 5B                              POP     BX
 28724 00004D14 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28725                                  
 28726 00004D16 51                              PUSH    CX
 28727 00004D17 53                              PUSH    BX
 28728                                  
 28729 00004D18 89DA                            MOV     DX,BX
 28730                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28731                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28732 00004D1A 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28733 00004D1E 83FB02                          cmp     bx,2
 28734 00004D21 7709                            ja	short FINDFRE
 28735                                  
 28736                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28737                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28738                                  
 28739                                  ads1:
 28740                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28741                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28742 00004D23 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28743 00004D29 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28744                                                                          ;       cluster examined is 2
 28745                                  
 28746                                  ;   Scanning both forwards and backwards for a free cluster
 28747                                  ;
 28748                                  ;       (BX) = forwards scan pointer
 28749                                  ;       (CX) = clusters remaining to be allocated
 28750                                  ;       (DX) = current last cluster in file
 28751                                  ;       (TOS) = last cluster of file
 28752                                  
 28753                                  FINDFRE:
 28754 00004D2C 43                              INC     BX
 28755                                  	;cmp	bx,[es:bp+0Dh]
 28756 00004D2D 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28757 00004D31 7757                    	ja	short ads7	; at end of disk
 28758 00004D33 E8F106                          call	UNPACK          ; check out this cluster
 28759 00004D36 722F                            jc	short ads4	; FAT error             [INTERR?]
 28760 00004D38 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28761                                  
 28762                                  ;   Have found a free cluster. Chain it to the file
 28763                                  ;
 28764                                  ;       (BX) = found free cluster #
 28765                                  ;       (DX) = current last cluster in file
 28766                                  
 28767                                  	;;mov	[es:bp+1Ch],bx
 28768                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28769 00004D3A 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28770 00004D3E 92                              xchg    ax,dx           ; save (dx) in ax
 28771 00004D3F BA0100                          mov     dx,1            ; mark this free guy as "1"
 28772 00004D42 E83607                  	call	PACK            ; set special "temporary" mark
 28773 00004D45 7220                            jc	short ads4	; FAT error             [INTERR?]
 28774                                  	;;cmp	word [es:bp+1Eh],-1
 28775                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28776 00004D47 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28777 00004D4C 7404                            JZ	short NO_ALLOC	; No
 28778                                  	;;dec	word [es:bp+1Eh]
 28779                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28780 00004D4E 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28781                                  NO_ALLOC:
 28782 00004D52 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28783 00004D53 87DA                            XCHG    BX,DX
 28784 00004D55 89D0                            MOV     AX,DX
 28785 00004D57 E82107                  	call	PACK            ; link free cluster onto file
 28786                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28787                                                                  ;    cluster 0 with FIRCLUS value.
 28788 00004D5A 720B                            jc	short ads4	; FAT error [INTERR?]
 28789 00004D5C 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28790 00004D5D 89DA                            mov     dx,bx           ; (dx) = current end of file
 28791 00004D5F E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28792                                  
 28793                                  ;   We've successfully extended the file. Clean up and exit
 28794                                  ;
 28795                                  ;       (BX) = last cluster in file
 28796                                  
 28797 00004D61 BAFFFF                          MOV     DX,0FFFFH
 28798 00004D64 E81407                  	call	PACK            ; mark last cluster EOF
 28799                                  
 28800                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28801                                  ;   2 whole bytes. Hope its worth it...
 28802                                  ;
 28803                                  ;       'C' set if error
 28804                                  ;       calling (BX) and (CX) pushed on stack
 28805                                  
 28806                                  ads4:   
 28807 00004D67 5B                      	POP     BX
 28808 00004D68 59                              POP     CX              ; Don't need this stuff since we're successful
 28809 00004D69 729D                            jc	short figrec_retn
 28810 00004D6B E8B906                          call	UNPACK          ; Get first cluster allocated for return
 28811                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28812 00004D6E 7298                            jc	short figrec_retn
 28813 00004D70 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28814 00004D73 7293                            jc	short figrec_retn
 28815 00004D75 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28816 00004D77 09FF                            OR      DI,DI           ; clear 'C'
 28817 00004D79 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28818                                  
 28819                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28820                                  ;   info
 28821                                  dofastk:
 28822                                  	; 20/05/2019
 28823                                  	; MSDOS 6.0
 28824                                  	;push	dx ; * MSDOS 6.0
 28825                                  	;;mov	dl,[es:bp+0]
 28826                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28827                                  	;mov	dl,[es:bp]
 28828                                  
 28829                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28830                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28831                                  	
 28832                                  	; 16/12/2022
 28833                                  	;push	dx ; *
 28834                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28835                                  	; 15/12/2022
 28836                                  	;mov	dl,[es:bp]
 28837                                  	
 28838                                  	; MSDOS 3.3 & MSDOS 6.0
 28839 00004D7B 06                      	PUSH	ES
 28840 00004D7C C43E[9E05]              	LES     DI,[THISSFT]
 28841                                  	;mov	[es:di+0Bh],bx
 28842 00004D80 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28843                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28844                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28845 00004D84 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28846 00004D88 07                      	POP	ES
 28847                                  	;retn
 28848                                  
 28849                                  	;pop	dx ; * MSDOS 6.0
 28850                                  
 28851                                  	; 16/12/2022
 28852                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28853                                  	;pop	dx ; *
 28854                                  
 28855 00004D89 C3                      	retn	
 28856                                  
 28857                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28858                                  ;   of the disk...
 28859                                  
 28860                                  ads7:   
 28861 00004D8A 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28862 00004D8F 7592                    	jnz	short ads1	; start scan from front of disk
 28863                                  
 28864                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28865                                  ;   the space back to the free list and tell the caller how much he could have
 28866                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28867                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28868                                  ;
 28869                                  ;       (CX) = clusters remaining to be allocated
 28870                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28871                                  ;       (TOS+1) = # of clusters wanted to allocate
 28872                                  
 28873 00004D91 5B                              POP     BX              ; (BX) = last cluster of file
 28874 00004D92 BAFFFF                          MOV     DX,0FFFFH
 28875 00004D95 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28876 00004D98 58                              POP     AX              ; No. of clusters requested
 28877                                                                  ; Don't "retc". We are setting Carry anyway,
 28878                                                                  ;   Alloc failed, so proceed with return CX
 28879                                                                  ;   setup.
 28880 00004D99 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28881 00004D9B E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28882                                                                  ;   Alloc failed.
 28883                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28884                                          ; MSDOS 6.0
 28885 00004D9E C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28886 00004DA3 F9                              STC
 28887 00004DA4 C3                              retn
 28888                                  
 28889                                  ;-----------------------------------------------------------------------
 28890                                  ;
 28891                                  ; Procedure Name : RESTFATBYT
 28892                                  ;
 28893                                  ; SEE ALLOCATE CAVEAT
 28894                                  ;       Carry set if error (currently user FAILed to I 24)
 28895                                  ;-----------------------------------------------------------------------
 28896                                  
 28897                                  RESTFATBYT:
 28898 00004DA5 53                              PUSH    BX
 28899 00004DA6 52                              PUSH    DX
 28900 00004DA7 57                              PUSH    DI
 28901 00004DA8 31DB                            XOR     BX,BX
 28902 00004DAA 8B16[9605]                      MOV     DX,[FATBYT]
 28903 00004DAE E8CA06                  	call	PACK
 28904 00004DB1 5F                              POP     DI
 28905 00004DB2 5A                              POP     DX
 28906 00004DB3 5B                              POP     BX
 28907                                  ; 16/12/2022
 28908                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28909                                  ;RELEASE_flush:
 28910 00004DB4 C3                      	retn
 28911                                  
 28912                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28913                                  ;---------------------------------------------------------------------------
 28914                                  ;
 28915                                  ; Procedure Name : RELEASE
 28916                                  ;
 28917                                  ; Inputs:
 28918                                  ;       BX = Cluster in file
 28919                                  ;       ES:BP = Base of drive parameters
 28920                                  ; Function:
 28921                                  ;       Frees cluster chain starting with [BX]
 28922                                  ;       Carry set if error (currently user FAILed to I 24)
 28923                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28924                                  ;
 28925                                  ;-----------------------------------------------------------------------------
 28926                                  
 28927                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28928                                  	; 20/05/2019 - Retro DOS v4.0
 28929                                  RELEASE:
 28930 00004DB5 31D2                            XOR     DX,DX
 28931                                  
 28932                                  	;entry	RELBLKS
 28933                                  RELBLKS:
 28934                                  
 28935                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28936                                  ;   and free the rest in the chain.
 28937                                  
 28938 00004DB7 E86D06                  	call	UNPACK
 28939 00004DBA 7224                    	jc	short RELEASE_flush
 28940 00004DBC 7422                    	jz	short RELEASE_flush
 28941 00004DBE 89F8                            MOV     AX,DI
 28942 00004DC0 52                              PUSH    DX
 28943 00004DC1 E8B706                  	call	PACK
 28944 00004DC4 5A                              POP     DX
 28945 00004DC5 7219                    	jc	short RELEASE_flush
 28946 00004DC7 09D2                            OR      DX,DX
 28947 00004DC9 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28948                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28949                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28950 00004DCB 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28951 00004DD0 7404                            JZ	short NO_DEALLOC	; No
 28952 00004DD2 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28953                                  NO_DEALLOC:
 28954 00004DD6 89C3                            MOV     BX,AX
 28955 00004DD8 48                              dec     ax              ; check for "1"
 28956 00004DD9 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28957 00004DDB E83206                  	call	IsEOF
 28958 00004DDE 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28959                                  
 28960                                  	; 16/12/2022
 28961                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28962                                  ;%if 0
 28963                                  RELEASE_flush:
 28964                                  	; MSDOS 6.0
 28965 00004DE0 268A4600                	mov	al,[es:bp]
 28966                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28967 00004DE4 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28968 00004DE5 51                      	push	cx		;  them to be preserved.
 28969 00004DE6 06                      	push	es
 28970 00004DE7 55                      	push	bp
 28971 00004DE8 E8450B                  	call	FLUSHBUF	; commit buffers for this drive
 28972 00004DEB 5D                      	pop	bp
 28973 00004DEC 07                      	pop	es
 28974 00004DED 59                      	pop	cx
 28975 00004DEE 5E                      	pop	si
 28976                                  ;%endif
 28977                                  RET12:
 28978 00004DEF C3                      	retn
 28979                                  
 28980                                  ;Break	<GETEOF -- Find the end of a file>
 28981                                  ;------------------------------------------------------------------------
 28982                                  ;
 28983                                  ; Procedure Name : GETEOF
 28984                                  ;
 28985                                  ; Inputs:
 28986                                  ;       ES:BP Points to DPB
 28987                                  ;       BX = Cluster in a file
 28988                                  ;       DS = CS
 28989                                  ; Outputs:
 28990                                  ;       BX = Last cluster in the file
 28991                                  ;       Carry set if error (currently user FAILed to I 24)
 28992                                  ; DI destroyed. No other registers affected.
 28993                                  ;
 28994                                  ;--------------------------------------------------------------------------
 28995                                  
 28996                                  GETEOF:
 28997 00004DF0 E83406                  	call	UNPACK
 28998 00004DF3 72FA                            jc	short RET12
 28999 00004DF5 53                              PUSH    BX
 29000 00004DF6 89FB                            MOV     BX,DI
 29001 00004DF8 E81506                  	call	IsEOF
 29002 00004DFB 5B                              POP     BX
 29003 00004DFC 73F1                            JAE     short RET12
 29004 00004DFE 89FB                            MOV     BX,DI
 29005 00004E00 EBEE                            JMP     short GETEOF
 29006                                  
 29007                                  ;============================================================================
 29008                                  ; FCB.ASM, MSDOS 6.0, 1991
 29009                                  ;============================================================================
 29010                                  ; 30/07/2018 - Retro DOS v3.0
 29011                                  ; 20/05/2019 - Retro DOS v4.0
 29012                                  
 29013                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 29014                                  ;	NAME	FCB
 29015                                  
 29016                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 29017                                  ;		  filename characters
 29018                                  ;
 29019                                  ;	MakeFcb
 29020                                  ;	NameTrans
 29021                                  ;	PATHCHRCMP
 29022                                  ;	GetLet
 29023                                  ;	UCase
 29024                                  ;	GetLet3
 29025                                  ;	GetCharType
 29026                                  ;	TESTKANJ
 29027                                  ;	NORMSCAN
 29028                                  ;	DELIM
 29029                                  ;
 29030                                  ;	Revision history:
 29031                                  ;
 29032                                  ;		A000  version 4.00  Jan. 1988
 29033                                  ;	
 29034                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 29035                                  
 29036                                  TableLook	EQU	-1
 29037                                  
 29038                                  SCANSEPARATOR	EQU	1
 29039                                  DRVBIT		EQU	2
 29040                                  NAMBIT		EQU	4
 29041                                  EXTBIT		EQU	8
 29042                                  
 29043                                  ;----------------------------------------------------------------------------
 29044                                  ;
 29045                                  ; Procedure : MakeFcb
 29046                                  ;
 29047                                  ;----------------------------------------------------------------------------
 29048                                  
 29049                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29050                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 29051                                  
 29052                                  	; 29/02/2024 - Retro DOS v4.1
 29053                                  MAKEFCB:
 29054                                  ;hkn; SS override
 29055                                  	;MOV	BYTE [SS:SpaceFlag],0
 29056 00004E02 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 29057                                  	; 29/02/2024
 29058 00004E04 368816[4E03]            	mov	[ss:SpaceFlag],dl ; 0
 29059                                  	;test	al,2
 29060 00004E09 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 29061 00004E0B 7503                    	JNZ	short DEFDRV
 29062                                  	;MOV	BYTE [ES:DI],0	; No - use default drive
 29063                                  	; 29/02/2024
 29064 00004E0D 268815                  	mov	[es:di],dl ; 0
 29065                                  DEFDRV:
 29066 00004E10 47                      	INC	DI
 29067 00004E11 B90800                  	MOV	CX,8
 29068                                  	;test	al,4
 29069 00004E14 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 29070 00004E16 93                      	XCHG	AX,BX		; Save bits in BX
 29071 00004E17 B020                    	MOV	AL," "
 29072 00004E19 7404                    	JZ	short FILLB	; If not, go fill with blanks
 29073 00004E1B 01CF                    	ADD	DI,CX
 29074 00004E1D 31C9                    	XOR	CX,CX		; Don't fill any
 29075                                  FILLB:
 29076 00004E1F F3AA                    	REP	STOSB
 29077 00004E21 B103                    	MOV	CL,3
 29078 00004E23 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 29079 00004E26 7404                    	JZ	short FILLB2
 29080 00004E28 01CF                    	ADD	DI,CX
 29081 00004E2A 31C9                    	XOR	CX,CX
 29082                                  FILLB2:
 29083 00004E2C F3AA                    	REP	STOSB
 29084 00004E2E 91                      	XCHG	AX,CX		; Put zero in AX
 29085 00004E2F AB                      	STOSW
 29086 00004E30 AB                      	STOSW			; Initialize two words after to zero
 29087 00004E31 83EF10                  	SUB	DI,16		; Point back at start
 29088                                  	;test	bl,1
 29089 00004E34 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29090 00004E37 7409                    	JZ	short SKPSPC
 29091 00004E39 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29092 00004E3C E81E01                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29093 00004E3F 7504                    	JNZ	short NOSCAN
 29094 00004E41 46                      	INC	SI		; Skip over the delimiter
 29095                                  SKPSPC:
 29096 00004E42 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29097                                  NOSCAN:
 29098 00004E45 E8EC00                  	CALL	GETLET
 29099 00004E48 761E                    	JBE	short NODRV	; Quit if termination character
 29100 00004E4A 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29101 00004E4D 7519                    	JNZ	short NODRV
 29102 00004E4F 46                      	INC	SI		; Skip over colon
 29103 00004E50 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29104 00004E52 760F                    	JBE	short BADDRV	; Drive letter out of range
 29105                                  
 29106 00004E54 50                      	PUSH	AX
 29107 00004E55 E8E01A                  	call	GetVisDrv
 29108 00004E58 58                      	POP	AX
 29109 00004E59 730A                    	JNC	short HAVDRV
 29110                                  
 29111                                  	; 20/05/2019 - Retro DOS v4.0
 29112                                  	; MSDOS 6.0
 29113                                  ;hkn; SS override
 29114 00004E5B 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29115                                  					; if not FAT drive ;AN000;
 29116 00004E61 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29117                                  BADDRV:
 29118 00004E63 B2FF                    	MOV	DL,-1
 29119                                  HAVDRV:
 29120 00004E65 AA                      	STOSB			; Put drive specifier in first byte
 29121 00004E66 46                      	INC	SI
 29122 00004E67 4F                      	DEC	DI		; Counteract next two instructions
 29123                                  NODRV:
 29124 00004E68 4E                      	DEC	SI		; Back up
 29125 00004E69 47                      	INC	DI		; Skip drive byte
 29126                                  
 29127                                  	;entry	NORMSCAN
 29128                                  NORMSCAN:
 29129 00004E6A B90800                  	MOV	CX,8
 29130 00004E6D E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29131 00004E70 803C2E                  	CMP	BYTE [SI],"."
 29132 00004E73 7510                    	JNZ	short NODOT
 29133 00004E75 46                      	INC	SI		; Skip over dot if present
 29134                                  
 29135                                  	; 24/09/2023
 29136                                  	;mov	cx,3
 29137 00004E76 B103                    	mov	cl,3	; ch=0
 29138                                  
 29139                                  	; MSDOS 6.0
 29140                                  ;hkn; SS override
 29141                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29142                                  	; 10/06/2019
 29143 00004E78 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29144 00004E7E 7402                    	JZ	short VOLOK				;AN000;
 29145 00004E80 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29146                                  	; 24/09/2023
 29147                                  	;MOV	CX,2					;AN000;
 29148 00004E81 49                      	dec	cx  ; cx=2
 29149                                  	;JMP	SHORT contvol				;AN000;
 29150                                  VOLOK:
 29151                                  	;MOV	CX,3		; Get 3-letter extension
 29152                                  contvol:
 29153 00004E82 E81300                  	CALL	MUSTGETWORD
 29154                                  NODOT:
 29155 00004E85 88D0                    	MOV	AL,DL
 29156                                  
 29157                                  	; MSDOS 6.0
 29158                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29159                                  	; 18/12/2022
 29160 00004E87 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29161                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29162                                  
 29163 00004E8D C3                      	retn
 29164                                  
 29165                                  NONAM:
 29166 00004E8E 01CF                    	ADD	DI,CX
 29167 00004E90 4E                      	DEC	SI
 29168 00004E91 C3                      	retn
 29169                                  
 29170                                  GETWORD:
 29171 00004E92 E89F00                  	CALL	GETLET		
 29172 00004E95 76F7                    	JBE	short NONAM	; Exit if invalid character
 29173 00004E97 4E                      	DEC	SI
 29174                                  
 29175                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29176                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29177                                  
 29178                                  MUSTGETWORD:
 29179 00004E98 E89900                  	CALL	GETLET
 29180                                  
 29181                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29182                                  
 29183                                  ;IF NOT TABLELOOK
 29184                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29185                                  ;ENDIF
 29186 00004E9B 750C                    	JNZ	short MustCheckCX
 29187                                  
 29188                                  ;hkn; SS override
 29189 00004E9D 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29190 00004EA3 7419                    	JZ	short FILLNAM
 29191 00004EA5 3C20                    	CMP	AL," "
 29192 00004EA7 7515                    	JNZ	short FILLNAM
 29193                                  
 29194                                  MustCheckCX:
 29195 00004EA9 E3ED                    	JCXZ	MUSTGETWORD
 29196 00004EAB 49                      	DEC	CX
 29197 00004EAC 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29198 00004EAE 7504                    	JNZ	short NOSTAR
 29199 00004EB0 B03F                    	MOV	AL,"?"
 29200 00004EB2 F3AA                    	REP	STOSB
 29201                                  NOSTAR:
 29202 00004EB4 AA                      	STOSB
 29203 00004EB5 3C3F                    	CMP	AL,"?"
 29204 00004EB7 75DF                    	JNZ	short MUSTGETWORD
 29205 00004EB9 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29206 00004EBC EBDA                    	JMP	short MUSTGETWORD
 29207                                  FILLNAM:
 29208 00004EBE B020                    	MOV	AL," "
 29209 00004EC0 F3AA                    	REP	STOSB
 29210 00004EC2 4E                      	DEC	SI
 29211 00004EC3 C3                      	retn
 29212                                  
 29213                                  SCANB:
 29214 00004EC4 AC                      	LODSB
 29215 00004EC5 E89D00                  	CALL	SPCHK
 29216 00004EC8 74FA                    	JZ	short SCANB
 29217 00004ECA 4E                      	DEC	SI
 29218                                  scanb_retn:
 29219 00004ECB C3                      	retn
 29220                                  
 29221                                  ;----------------------------------------------------------------------------
 29222                                  ;
 29223                                  ; Procedure Name : NameTrans
 29224                                  ;
 29225                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29226                                  ; allow spaces in pathnames
 29227                                  ;
 29228                                  ;   Inputs:	DS:SI points to start of path element
 29229                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29230                                  ;		ES = DOSGroup
 29231                                  ;		DS:SI advanced after name
 29232                                  ;   Registers modified: DI,AX,DX,CX
 29233                                  ;
 29234                                  ;----------------------------------------------------------------------------
 29235                                  
 29236                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29237                                  	; 20/05/2019 - Retro DOS v4.0
 29238                                  
 29239                                  	; 29/02/2024 - Retro DOS v4.1
 29240                                  
 29241                                  NameTrans:
 29242                                  ;hkn; SS override
 29243 00004ECC 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29244 00004ED2 16                      	push	ss
 29245 00004ED3 07                      	pop	es
 29246                                  
 29247                                  ;hkn; NAME1 is in DOSDATA
 29248 00004ED4 BF[4B05]                	MOV	DI,NAME1
 29249 00004ED7 57                      	PUSH	DI
 29250                                  
 29251                                  ; 29/02/2024
 29252                                  %if 0
 29253                                  	MOV	AX,'  '	; 2020h
 29254                                  	MOV	CX,5
 29255                                  	STOSB
 29256                                  	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29257                                  	XOR	AL,AL		; Set stuff for NORMSCAN
 29258                                  	MOV	DL,AL
 29259                                  %else
 29260                                  	; 29/02/2024
 29261                                  	; (PCDOS 7.1 IBMDOS.COM)
 29262 00004ED8 B020                    	mov     al,20h ; ' '
 29263 00004EDA B90B00                  	mov     cx,11
 29264 00004EDD F3AA                    	rep stosb               ; Fill "FCB" at NAME1 with spaces
 29265 00004EDF 91                      	xchg    ax,cx
 29266 00004EE0 99                      	cwd
 29267                                  %endif
 29268                                  
 29269 00004EE1 AA                      	STOSB
 29270 00004EE2 5F                      	POP	DI
 29271                                  
 29272 00004EE3 E884FF                  	CALL	NORMSCAN
 29273                                  
 29274                                  ;hkn; SS override for NAME1
 29275 00004EE6 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29276 00004EEC 75DD                    	jnz	short scanb_retn
 29277 00004EEE 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29278 00004EF4 C3                      	retn
 29279                                  
 29280                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29281                                  ;============================================================================
 29282                                  
 29283                                  ; 20/05/2019 - Retro DOS v4.0
 29284                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29285                                  
 29286                                  ;If TableLook
 29287                                  
 29288                                  ;hkn; Table	SEGMENT
 29289                                  ;	PUBLIC	CharType
 29290                                  ;----------------------------------------------------------------------------
 29291                                  
 29292                                  ; Character type table for file name scanning
 29293                                  ; Table provides a mapping of characters to validity bits.
 29294                                  ; Four bits are provided for each character. Values 7Dh and above
 29295                                  ; have all bits set, so that part of the table is chopped off, and
 29296                                  ; the translation routine is responsible for screening these values.
 29297                                  ; The bit values are defined in DOSSYM.INC
 29298                                  
 29299                                  ;	      ; ^A and NUL
 29300                                  ;CharType:
 29301                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29302                                  ;	      ; ^C and ^B
 29303                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29304                                  ;	      ; ^E and ^D
 29305                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29306                                  ;	      ; ^G and ^F
 29307                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29308                                  ;	      ; TAB and BS
 29309                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29310                                  ;	      ; ^K and ^J
 29311                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29312                                  ;	      ; ^M and ^L
 29313                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29314                                  ;	      ; ^O and ^N
 29315                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29316                                  ;	      ; ^Q and ^P
 29317                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29318                                  ;	      ; ^S and ^R
 29319                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29320                                  ;	      ; ^U and ^T
 29321                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29322                                  ;	      ; ^W and ^V
 29323                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29324                                  ;	      ; ^Y and ^X
 29325                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29326                                  ;	      ; ESC and ^Z
 29327                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29328                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29330                                  ;	      ; ^_ and ^^
 29331                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29332                                  ;	      ; ! and SPACE
 29333                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29334                                  ;	      ; # and "
 29335                                  ;	 db   LOW (NOT FFCB+FCHK)
 29336                                  ;	      ; $ - )
 29337                                  ;	 db   3 dup (0FFh)
 29338                                  ;	      ; + and *
 29339                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29340                                  ;	      ; - and '
 29341                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29342                                  ;	      ; / and .
 29343                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29344                                  ;	      ; 0 - 9
 29345                                  ;	 db   5 dup (0FFh)
 29346                                  ;	      ; ; and :
 29347                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29348                                  ;	      ; = and <
 29349                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29350                                  ;	      ; ? and >
 29351                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29352                                  ;	      ; A - Z
 29353                                  ;	 db   13 dup (0FFh)
 29354                                  ;	      ; \ and [
 29355                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29356                                  ;	      ; ^ and ]
 29357                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29358                                  ;	      ; _ - {
 29359                                  ;	 db   15 dup (0FFh)
 29360                                  ;	      ; } and |
 29361                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29362                                  
 29363                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29364                                  ;					; character in the table
 29365                                  
 29366                                  ;FCHK	equ 1		; normal name char, no chks needed
 29367                                  ;FDELIM	equ 2		; is a delimiter
 29368                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29369                                  ;FFCB	equ 8		; is valid in an FCB
 29370                                  
 29371                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29372                                  ;----------------------------------------------------------------------------
 29373                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29374                                  
 29375                                  CharType: ; 63 bytes
 29376 00004EF5 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29377 00004EFD 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29378 00004F05 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29379 00004F0D FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29380 00004F15 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29381 00004F1D FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29382 00004F25 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29383 00004F2D FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29384                                  
 29385                                  CharType_last equ ($ - CharType) * 2
 29386                                  
 29387                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29388                                  ;----------------------------------------------------------------------------
 29389                                  ;CharType:
 29390                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29391                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29392                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29393                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29394                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29395                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29396                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29397                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29398                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29399                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29400                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29401                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29402                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29403                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29404                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29405                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29406                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29407                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29408                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29409                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29410                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29411                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29412                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29413                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29414                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29415                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29416                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29417                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29418                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29419                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29420                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29421                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29422                                  
 29423                                  ;hkn; Table	ENDS
 29424                                  
 29425                                  ;ENDIF
 29426                                  
 29427                                  ; 20/05/2019 - Retro DOS v4.0
 29428                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29429                                  
 29430                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29431                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29432                                  
 29433                                  ;----------------------------------------------------------------------------
 29434                                  ;
 29435                                  ; Procedure Names : GetLet, UCase, GetLet3
 29436                                  ;
 29437                                  ; These routines take a character, convert it to upper case, and check
 29438                                  ; for delimiters.  Three different entry points:
 29439                                  ;	GetLet -  DS:[SI] = character to convert
 29440                                  ;	UCase  -  AL = character to convert
 29441                                  ;	GetLet3 - AL = character
 29442                                  ;		  [BX] = translation table to use
 29443                                  ;
 29444                                  ;	Exit (in all cases) : AL = upper case character
 29445                                  ;			      CY set if char is control char other than TAB
 29446                                  ;			      ZF set if char is a delimiter
 29447                                  ;	Uses : AX, flags
 29448                                  ;
 29449                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29450                                  ; inline version.  Return with carry set is only possible in the inline
 29451                                  ; version. The table lookup version is the one in use.
 29452                                  ;
 29453                                  ;----------------------------------------------------------------------------
 29454                                  
 29455                                  ; This entry point has character at [SI]
 29456                                  
 29457                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29458                                  GETLET:	
 29459 00004F34 AC                      	LODSB
 29460                                  
 29461                                  ; This entry point has character in AL
 29462                                  
 29463                                  	;entry	UCase
 29464                                  UCase:	
 29465                                  	; 09/08/2018
 29466                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29467                                  _UCase:
 29468 00004F35 53                      	PUSH	BX
 29469 00004F36 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29470                                  
 29471                                  ; Convert the character in AL to upper case
 29472                                  
 29473                                  gl_0:
 29474 00004F39 3C61                    	CMP	AL,"a"
 29475 00004F3B 7214                    	JB	short gl_2	; Already upper case, go check type
 29476 00004F3D 3C7A                    	CMP	AL,"z"
 29477 00004F3F 7702                    	JA	short gl_1
 29478 00004F41 2C20                    	SUB	AL,20H		; Convert to upper case
 29479                                  
 29480                                  ; Map European character to upper case
 29481                                  
 29482                                  gl_1:
 29483 00004F43 3C80                    	CMP	AL,80H
 29484 00004F45 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29485 00004F47 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29486                                  
 29487                                  	; M048 - Start 
 29488                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29489                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29490                                  	; preserve it.
 29491                                  
 29492                                  	; 09/08/2018 - Retro DOS v3.0
 29493                                  	; MSDOS 3.3
 29494                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29495                                  	;CS	XLAT
 29496                                  
 29497                                  	; 20/05/2019 - Retro DOS v4.0
 29498                                  
 29499                                  	; MSDOS 6.0
 29500 00004F49 1E                      	push	ds
 29501                                  	;getdseg <ds>
 29502 00004F4A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29503 00004F4F D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29504 00004F50 1F                      	pop	ds
 29505                                  
 29506                                  	; M048 - End
 29507                                  
 29508                                  ; Now check the type
 29509                                  
 29510                                  ;If TableLook
 29511                                  gl_2:
 29512                                  	; 20/05/2019 - Retro DOS v4.0
 29513 00004F51 50                      	PUSH	AX
 29514                                  
 29515                                  	; MSDOS 3.3
 29516                                  	;mov	bx,CharType
 29517                                  	;; 09/08/2018
 29518                                  	;;xlat	byte [cs:bx]
 29519                                  	;cs	xlat	
 29520                                  	
 29521                                  	; MSDOS 6.0
 29522 00004F52 E81800                  	CALL	GetCharType	; returns type flags in AL
 29523                                  	
 29524                                  	;test	al,1	
 29525 00004F55 A801                    	TEST	AL,FCHK 	; test for normal character
 29526 00004F57 58                      	POP	AX
 29527 00004F58 5B                      	POP	BX
 29528 00004F59 C3                      	RETN
 29529                                  
 29530                                  ; This entry has character in AL and lookup table in BX
 29531                                  
 29532                                  	; MSDOS 6.0
 29533                                  ;	;entry GetLet3
 29534                                  GETLET3: ; 10/08/2018
 29535 00004F5A 53                      	PUSH	BX
 29536 00004F5B EBDC                    	JMP	short gl_0
 29537                                  ;ELSE
 29538                                  ;
 29539                                  ;gl_2:
 29540                                  ;	POP	BX
 29541                                  ;	CMP	AL,"."
 29542                                  ;	retz
 29543                                  ;	CMP	AL,'"'
 29544                                  ;	retz
 29545                                  ;	CALL	PATHCHRCMP
 29546                                  ;	retz
 29547                                  ;	CMP	AL,"["
 29548                                  ;	retz
 29549                                  ;	CMP	AL,"]"
 29550                                  ;	retz
 29551                                  ;ENDIF
 29552                                  
 29553                                  ;---------------------------------------------------------------------
 29554                                  ;
 29555                                  ; DELIM - check if character is a delimiter
 29556                                  ;	Entry : AX = character to check
 29557                                  ;	Exit  : ZF set if character is not a delimiter
 29558                                  ;	Uses  : Flags
 29559                                  ;
 29560                                  ;--------------------------------------------------------------------
 29561                                  
 29562                                  	;entry	DELIM
 29563                                  DELIM:
 29564                                  ;IF TableLook
 29565                                  	; 20/05/2019 - Retro DOS v4.0
 29566 00004F5D 50                      	PUSH	AX
 29567                                  
 29568                                  	; MSDOS 3.3
 29569                                  	;push	bx
 29570                                  	;mov	bx,CharType
 29571                                  	;;09/08/2018
 29572                                  	;;xlat	byte [cs:bx]
 29573                                  	;cs	xlat
 29574                                  	;pop	bx
 29575                                  
 29576                                  	; MSDOS 6.0
 29577 00004F5E E80C00                  	CALL	GetCharType
 29578                                  	
 29579                                  	;test	al,2
 29580 00004F61 A802                    	TEST	AL,FDELIM
 29581 00004F63 58                      	POP	AX
 29582 00004F64 C3                      	RETN
 29583                                  ;ELSE
 29584                                  ;	CMP	AL,":"
 29585                                  ;	retz
 29586                                  ;
 29587                                  ;	CMP	AL,"<"
 29588                                  ;	retz
 29589                                  ;	CMP	AL,"|"
 29590                                  ;	retz
 29591                                  ;	CMP	AL,">"
 29592                                  ;	retz
 29593                                  ;
 29594                                  ;	CMP	AL,"+"
 29595                                  ;	retz
 29596                                  ;	CMP	AL,"="
 29597                                  ;	retz
 29598                                  ;	CMP	AL,";"
 29599                                  ;	retz
 29600                                  ;	CMP	AL,","
 29601                                  ;	retz
 29602                                  ;ENDIF
 29603                                  
 29604                                  ;-------------------------------------------------------------------------
 29605                                  ;
 29606                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29607                                  ;	Entry : AL = character to check
 29608                                  ;	Exit  : ZF set if character is a space
 29609                                  ;	Uses  : flags
 29610                                  ;
 29611                                  ;-------------------------------------------------------------------------
 29612                                  
 29613                                  	;entry SPCHK
 29614                                  SPCHK:
 29615                                  ;IF TableLook
 29616                                  	; 20/05/2019 - Retro DOS v4.0
 29617 00004F65 50                      	PUSH	AX
 29618                                  
 29619                                  	; MSDOS 3.3
 29620                                  	;push	bx
 29621                                  	;mov	bx,CharType
 29622                                  	;; 09/08/2018
 29623                                  	;;xlat	byte [cs:bx]
 29624                                  	;cs	xlat
 29625                                  	;pop	bx
 29626                                  
 29627                                  	; MSDOS 6.0
 29628 00004F66 E80400                  	CALL	GetCharType
 29629                                  	
 29630                                  	;test	al,4
 29631 00004F69 A804                    	TEST	AL,FSPCHK
 29632 00004F6B 58                      	POP	AX
 29633 00004F6C C3                      	RETN
 29634                                  ;ELSE
 29635                                  ;	CMP	AL,9		; Filter out tabs too
 29636                                  ;	retz
 29637                                  ;; WARNING! " " MUST be the last compare
 29638                                  ;	CMP	AL," "
 29639                                  ;	return
 29640                                  ;ENDIF
 29641                                  
 29642                                  ;-------------------------------------------------------------------------
 29643                                  ;
 29644                                  ;  GetCharType - return flag bits indicating character type
 29645                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29646                                  ;	defined above at label CharType.
 29647                                  ;
 29648                                  ;	Entry : AL = character to return type flags for
 29649                                  ;	Exit  : AL = type flags
 29650                                  ;	Uses  : AL, flags
 29651                                  ;
 29652                                  ;-------------------------------------------------------------------------
 29653                                  
 29654                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29655                                  
 29656                                  	; 20/05/2019 - Retro DOS v4.0
 29657                                  	; MSDOS 6.0
 29658                                  GetCharType:
 29659                                  	;cmp	al,7Eh
 29660 00004F6D 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29661 00004F6F 7316                    	jae	short gct_90		; return standard value
 29662                                  
 29663 00004F71 53                      	push	bx
 29664 00004F72 BB[F54E]                	mov	bx,CharType		; load lookup table
 29665 00004F75 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29666                                  	;xlat	cs:[bx] 		; get flags
 29667 00004F77 2ED7                    	cs	xlat	
 29668 00004F79 5B                      	pop	bx
 29669                                  
 29670                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29671                                  ; we have to shift the flags down to the low nibble
 29672                                  
 29673 00004F7A 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29674                                  
 29675 00004F7C D0E8                    	shr	al,1			; we want high nibble, shift it down
 29676 00004F7E D0E8                    	shr	al,1
 29677 00004F80 D0E8                    	shr	al,1
 29678 00004F82 D0E8                    	shr	al,1
 29679                                  gct_80:
 29680 00004F84 240F                    	and	al,0Fh			; clear the unused nibble
 29681 00004F86 C3                      	retn
 29682                                  gct_90:
 29683 00004F87 B00F                    	mov	al,0Fh			; set all flags
 29684 00004F89 C3                      	retn
 29685                                  
 29686                                  ;----------------------------------------------------------------------------
 29687                                  ;
 29688                                  ; Procedure : PATHCHRCMP
 29689                                  ;
 29690                                  ;----------------------------------------------------------------------------
 29691                                  
 29692                                  PATHCHRCMP:
 29693 00004F8A 3C2F                    	CMP	AL,'/'
 29694 00004F8C 7606                    	JBE	short PathRet
 29695 00004F8E 3C5C                    	CMP	AL,'\'
 29696 00004F90 C3                      	retn
 29697                                  GotFor:
 29698 00004F91 B05C                    	MOV	AL,'\'
 29699 00004F93 C3                      	retn
 29700                                  PathRet:
 29701 00004F94 74FB                    	JZ	short GotFor
 29702 00004F96 C3                      	retn
 29703                                  
 29704                                  ;============================================================================
 29705                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29706                                  ;============================================================================
 29707                                  ; 30/07/2018 - Retro DOS v3.0
 29708                                  ; 29/04/2019 - Retro DOS v4.0
 29709                                  
 29710                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29711                                  
 29712                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29713                                  
 29714                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29715                                  ;	NAME	IBMCTRLC
 29716                                  
 29717                                  ;**	Low level routines for detecting special characters on CON input,
 29718                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29719                                  ;	process termination code, and the INT 0 divide overflow handler.
 29720                                  ;
 29721                                  ;	FATAL
 29722                                  ;	FATAL1
 29723                                  ;	reset_environment
 29724                                  ;	DSKSTATCHK
 29725                                  ;	SPOOLINT
 29726                                  ;	STATCHK
 29727                                  ;	CNTCHAND
 29728                                  ;	DIVOV
 29729                                  ;	CHARHARD
 29730                                  ;	HardErr
 29731                                  ;
 29732                                  ;	Revision history:
 29733                                  ;
 29734                                  ;	    AN000	version 4.0   Jan 1988
 29735                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29736                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29737                                  ;
 29738                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29739                                  ;	      flags register. In order to return to user normally DOS used to
 29740                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29741                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29742                                  ;
 29743                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29744                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29745                                  ;	      charhard.
 29746                                  
 29747                                  ; 29/04/2019 - Retro DOS v4.0
 29748                                  	; MSDOS 6.0
 29749                                  ;		public	LowInt23Addr		
 29750                                  LowInt23Addr: ;	LABEL	DWORD
 29751 00004F97 [E710]0000              	DW	LowInt23, 0
 29752                                  
 29753                                  ;		public	LowInt24Addr
 29754                                  LowInt24Addr: ;	LABEL	DWORD
 29755 00004F9B [FB10]0000              	DW	LowInt24, 0
 29756                                  
 29757                                  ;		public	LowInt28Addr
 29758                                  LowInt28Addr: ;	LABEL	DWORD
 29759 00004F9F [0F11]0000              	DW	LowInt28, 0
 29760                                  
 29761                                  ;Break	<Checks for ^C in CON I/O>
 29762                                  
 29763                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29764                                  ; 05/05/2019 - Retro DOS v4.0
 29765                                  
 29766                                  ;---------------------------------------------------------------------------
 29767                                  ;
 29768                                  ; Procedure Name : DSKSTATCHK
 29769                                  ;
 29770                                  ; Check for ^C if only one level in
 29771                                  ;
 29772                                  ;---------------------------------------------------------------------------
 29773                                  
 29774                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29775                                  
 29776                                  	; 29/02/2024 - Retro DOS v4.1
 29777                                  
 29778                                  DSKSTATCHK:        
 29779                                  	;CMP	BYTE [INDOS],1
 29780 00004FA3 36803E[2103]01          	CMP	BYTE [SS:INDOS],1 ; 15/03/2018
 29781                                  	;retnz			; Do NOTHING
 29782                                  	; 16/12/2022
 29783 00004FA9 7537                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018
 29784                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29785                                  	;jz	short _RET37 ; dskstatchk1
 29786                                  	;retn
 29787                                  ;_RET37:
 29788                                  ;dskstatchk1:
 29789 00004FAB 51                      	PUSH    CX
 29790 00004FAC 06                      	PUSH    ES
 29791 00004FAD 53                      	PUSH    BX
 29792 00004FAE 1E                      	PUSH    DS
 29793 00004FAF 56                      	PUSH    SI
 29794                                          
 29795                                  	;PUSH	CS
 29796                                  	;POP	ES
 29797                                  	;PUSH	CS
 29798                                  	;POP	DS
 29799                                  
 29800 00004FB0 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29801 00004FB2 8EC3                    	MOV	ES,BX		; for deviocall2
 29802 00004FB4 8EDB                    	MOV	DS,BX
 29803                                  
 29804                                  	; 16/12/2022
 29805                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29806                                  
 29807                                  	; 05/05/2019
 29808                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29809                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29810                                  	;mov	word [ss:DSKSTST],0
 29811                                  
 29812                                  	; 16/12/2022
 29813                                  	; 25/06/2019
 29814 00004FB6 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29815 00004FBB C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29816 00004FC0 C706[9503]0000          	mov	word [DSKSTST],0
 29817                                  
 29818 00004FC6 BB[9203]                        MOV     BX,DSKSTCALL
 29819                                  
 29820                                  	;LDS	SI,[ss:BCON]
 29821                                          ; 25/062019
 29822 00004FC9 C536[3200]              	lds	si,[BCON]
 29823                                  
 29824                                  ; 16/12/2022
 29825                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29826                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29827                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29828                                  ;	mov	word [ss:DSKSTST],0
 29829                                  ;	mov	bx,DSKSTCALL
 29830                                  ;	lds	si,[ss:BCON]
 29831                                  
 29832 00004FCD E898F5                  	CALL	DEVIOCALL2
 29833                                  
 29834                                  	; 29/02/2024
 29835 00004FD0 1E                      	push	ds ; *
 29836 00004FD1 16                      	push	ss
 29837 00004FD2 1F                      	pop	ds
 29838                                  
 29839                                   	; 15/03/2018
 29840                                  	;;test	word [ss:DSKSTST],200h
 29841                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29842                                  	; 05/05/2019
 29843                                  	;test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29844                                  	; 29/02/2024
 29845 00004FD3 F606[9603]02            	test	byte [DSKSTST+1],(STBUI>>8) ; 2
 29846 00004FD8 7409                    	jz	short _GotCh		; No characters available
 29847                                  
 29848 00004FDA 30C0                    	XOR	AL,AL			; Set zero
 29849                                  RET36:
 29850                                  	; 29/02/2024
 29851 00004FDC 5E                      	pop	si ; *
 29852                                  	;
 29853 00004FDD 5E                      	POP	SI
 29854 00004FDE 1F                      	POP	DS
 29855 00004FDF 5B                      	POP	BX
 29856 00004FE0 07                      	POP	ES
 29857 00004FE1 59                      	POP	CX
 29858                                  	; 16/12/2022
 29859                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29860                                  _RET37:
 29861 00004FE2 C3                      	RETN
 29862                                  
 29863                                  _GotCh:
 29864                                  
 29865                                  ; 29/02/2024
 29866                                  %if 0
 29867                                  	MOV	AL,[SS:DSKCHRET]	; SS override
 29868                                  
 29869                                  	CMP	AL,"C"-"@" ; cmp al,3
 29870                                  	JNZ	SHORT RET36
 29871                                  	MOV	BYTE [SS:DSKSTCOM],DEVRD
 29872                                  	MOV	BYTE [SS:DSKSTCALL],DRDWRHL
 29873                                  	MOV	[SS:DSKCHRET],CL
 29874                                  	; 09/09/2018
 29875                                  	MOV	word [SS:DSKSTST],0
 29876                                  	MOV	word [SS:DSKSTCNT],1
 29877                                  %else
 29878                                  	; 29/02/2024
 29879 00004FE3 A0[9F03]                	mov	al,[DSKCHRET]
 29880                                  
 29881 00004FE6 3C03                    	cmp	al,"C"-"@" ; cmp al,3
 29882 00004FE8 75F2                    	jnz	short RET36
 29883                                  
 29884 00004FEA C606[9403]04            	mov	byte [DSKSTCOM],DEVRD
 29885 00004FEF C606[9203]16            	mov	byte [DSKSTCALL],DRDWRHL
 29886 00004FF4 880E[9F03]              	mov	[DSKCHRET],cl
 29887 00004FF8 C706[9503]0000          	mov	word [DSKSTST],0
 29888 00004FFE C706[A403]0100          	mov	word [DSKSTCNT],1
 29889 00005004 1F                      	pop	ds ; *
 29890                                  %endif
 29891                                  	
 29892 00005005 E860F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29893                                  
 29894 00005008 5E                              POP     SI
 29895 00005009 1F                              POP     DS
 29896 0000500A 5B                              POP     BX                      ; Clean stack
 29897 0000500B 07                              POP     ES
 29898 0000500C 59                              POP     CX
 29899 0000500D E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29900                                  
 29901                                  	; 05/05/2019
 29902                                  NOSTOP:
 29903                                  	; MSDOS 6.0
 29904 00005010 3C10                    	CMP	AL,"P"-"@"
 29905 00005012 7509                    	JNZ	short check_next
 29906                                  				    	; SS override
 29907 00005014 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29908 0000501A 7405                    	JZ	short INCHKJ		; no
 29909                                  check_end:	; 24/09/2023
 29910 0000501C C3                      	retn
 29911                                  check_next:
 29912                                  	;IF	NOT TOGLPRN
 29913                                  	;CMP	AL,"N"-"@"
 29914                                  	;JZ	short INCHKJ
 29915                                  	;ENDIF
 29916                                  
 29917 0000501D 3C03                    	CMP	AL,"C"-"@"
 29918                                  	; 24/09/2023
 29919                                  	;JZ	short INCHKJ
 29920                                  ;check_end:
 29921                                  	;retn
 29922 0000501F 75FB                    	jnz	short check_end
 29923                                  
 29924                                  	; 24/09/2023
 29925                                  	; 08/09/2018
 29926                                  INCHKJ:	; 10/08/2018
 29927 00005021 E9A500                  	jmp	INCHK
 29928                                  
 29929                                  	; MSDOS 3.3
 29930                                          ;CMP	AL,"P"-"@"  ; cmp al,16
 29931                                          ;JZ	short INCHKJ
 29932                                  
 29933                                  	; 15/04/2018
 29934                                          ;;IF	NOT TOGLPRN
 29935                                          ;CMP	AL,"N"-"@"
 29936                                          ;JZ	SHORT INCHKJ
 29937                                          ;;ENDIF
 29938                                  	
 29939                                  	;CMP	AL,"C"-"@"  ; cmp al,3
 29940                                          ;JZ	short INCHKJ
 29941                                  	;RETN
 29942                                  
 29943                                  ;	; 08/09/2018
 29944                                  ;INCHKJ:; 10/08/2018
 29945                                  ;	JMP	INCHK
 29946                                  
 29947                                  ;----------------------------------------------------------------------------
 29948                                  ;
 29949                                  ; Procedure Name : SpoolInt
 29950                                  ;
 29951                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29952                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29953                                  ; the middle of an INT 24.
 29954                                  ;
 29955                                  ;----------------------------------------------------------------------------
 29956                                  
 29957                                  SPOOLINT:
 29958 00005024 9C                      	PUSHF
 29959                                  	; 15/03/2018
 29960 00005025 36803E[5803]00          	CMP	BYTE [SS:IDLEINT],0	; SS override
 29961 0000502B 7423                    	JZ	SHORT POPFRET
 29962 0000502D 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0
 29963 00005033 751B                    	JNZ	SHORT POPFRET		; No spool ints in error mode
 29964                                  
 29965                                  	; 30/07/2018
 29966                                  
 29967                                  	; Note that we are going to allow an external program to issue system 
 29968                                  	; calls at this time. We MUST preserve IdleInt across this.
 29969                                  
 29970 00005035 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29971                                  
 29972                                  	; 05/05/2019 - Retro DOS v4.0
 29973                                   
 29974                                  	; MSDOS 6.0
 29975 0000503A 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29976 00005040 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29977 00005042 CD28                    	INT	int_spooler  ; int 28h	; N: Execute user int 28 handler
 29978 00005044 EB05                    	jmp	short spool_ret_addr
 29979                                  
 29980                                  do_low_int28:
 29981                                  	;call	far [ss:LowInt28Addr]
 29982 00005046 2EFF1E[9F4F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29983                                  
 29984                                  spool_ret_addr:
 29985                                  	;INT	int_spooler		; INT 28h
 29986                                  
 29987 0000504B 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29988                                  POPFRET:
 29989 00005050 9D                      	POPF
 29990                                  _RET18:  
 29991 00005051 C3                      	RETN
 29992                                  
 29993                                  ; 05/05/2019 - Retro DOS v4.0
 29994                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29995                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29996                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29997                                  
 29998                                  ;----------------------------------------------------------------------------
 29999                                  ;
 30000                                  ; Procedure Name : STATCHK
 30001                                  ;
 30002                                  ;----------------------------------------------------------------------------
 30003                                  
 30004                                  STATCHK:
 30005 00005052 E84EFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 30006                                                                          ; input redirection
 30007 00005055 53                              PUSH    BX
 30008 00005056 31DB                            XOR     BX,BX
 30009 00005058 E836E5                          CALL	GET_IO_SFT
 30010 0000505B 5B                              POP     BX
 30011 0000505C 72F3                            JC      SHORT _RET18
 30012                                  
 30013 0000505E B401                            MOV     AH,1
 30014 00005060 E836F3                          CALL	IOFUNC
 30015 00005063 74BF                            JZ      SHORT SPOOLINT
 30016 00005065 3C13                            CMP     AL,'S'-'@'
 30017 00005067 75A7                            JNZ     SHORT NOSTOP
 30018                                  
 30019                                  	; 05/05/2019
 30020                                  	; MSDOS 6.0			; SS override
 30021 00005069 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 30022 0000506F 75AB                    	JNZ	short check_end		; AN000; yes
 30023                                  
 30024 00005071 30E4                            XOR     AH,AH
 30025 00005073 E823F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 30026 00005076 EB4A                            JMP     SHORT PAUSOSTRT
 30027                                  PRINTOFF:
 30028                                  PRINTON:
 30029 00005078 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 30030                                  
 30031                                  	; 30/07/2018 - Retro DOS v3.0
 30032 0000507D 53                      	PUSH	BX
 30033 0000507E BB0400                  	MOV	BX,4
 30034 00005081 E80DE5                  	call	GET_IO_SFT
 30035 00005084 5B                      	POP	BX
 30036 00005085 72CA                    	jc	short _RET18
 30037 00005087 06                      	PUSH	ES
 30038 00005088 57                      	PUSH	DI
 30039 00005089 1E                      	PUSH	DS
 30040 0000508A 07                      	POP	ES
 30041 0000508B 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 30042                                  	;test	word [es:di+5],800h
 30043                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 30044                                  	; 05/05/2019
 30045 0000508D 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 30046 00005092 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 30047                                  
 30048                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 30049                                  					; See if allowed
 30050 00005094 50                      	push	ax
 30051 00005095 B82611                  	mov	ax,1126h
 30052 00005098 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30053                                  			; Return: CF set on error, AX = error code
 30054                                  			; STACK unchanged
 30055 0000509A 58                      	pop	ax
 30056                                  
 30057 0000509B 730F                    	JNC	short NORM_PR 		; Echo is OK
 30058                                  
 30059                                  					; SS override
 30060 0000509D 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 30061                                  
 30062                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 30063                                  
 30064 000050A3 50                      	push    ax
 30065 000050A4 B82411                  	mov     ax,1124h
 30066 000050A7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30067                                  			; ES:DI -> SFT, SS = DOS CS
 30068 000050A9 58                      	pop     ax
 30069                                  
 30070 000050AA EB10                    	JMP	SHORT RETP6
 30071                                  NORM_PR:
 30072 000050AC 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 30073 000050B2 7505                    	JNZ	short PRNOPN
 30074 000050B4 E838F4                  	call	DEV_CLOSE_SFT
 30075 000050B7 EB03                    	JMP	SHORT RETP6
 30076                                  PRNOPN:
 30077 000050B9 E82BF4                  	call	DEV_OPEN_SFT
 30078                                  RETP6:
 30079 000050BC 5F                      	POP	DI
 30080 000050BD 07                      	POP	ES
 30081                                  STATCHK_RETN:
 30082 000050BE C3                              RETN
 30083                                  PAUSOLP:
 30084 000050BF E862FF                          CALL    SPOOLINT
 30085                                  PAUSOSTRT:
 30086 000050C2 B401                            MOV     AH,1
 30087 000050C4 E8D2F2                          CALL	IOFUNC
 30088 000050C7 74F6                            JZ      SHORT PAUSOLP
 30089                                  INCHK:
 30090 000050C9 53                              PUSH    BX
 30091 000050CA 31DB                            XOR     BX,BX
 30092 000050CC E8C2E4                          CALL	GET_IO_SFT
 30093 000050CF 5B                              POP     BX
 30094 000050D0 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 30095 000050D2 30E4                            XOR     AH,AH
 30096 000050D4 E8C2F2                          CALL	IOFUNC
 30097                                  	; 30/07/2018
 30098                                  	; MSDOS 3.3
 30099                                          ;CMP	AL,'P'-'@' ;cmp al,16
 30100                                          ;JNZ	SHORT NOPRINT
 30101                                  
 30102                                  	;cmp	byte [SS:SCAN_FLAG],0
 30103                                  	;JZ	SHORT PRINTON	
 30104                                  	;mov	byte [ss:SCAN_FLAG],0
 30105                                  
 30106                                  	; 05/05/2019
 30107                                  	; MSDOS 6.0
 30108 000050D7 3C10                    	CMP	AL,"P"-"@"
 30109                                  	;;;;  7/14/86	ALT_Q key fix
 30110 000050D9 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 30111                                  ;NOPRINT:	
 30112                                  	;IF	NOT TOGLPRN
 30113                                  	;CMP	AL,"N"-"@"
 30114                                  	;JZ	short PRINTOFF
 30115                                  	;ENDIF
 30116 000050DB 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 30117                                  	;retnz
 30118 000050DD 75DF                    	jnz	short STATCHK_RETN
 30119                                  
 30120                                  	; !! NOTE: FALL THROUGH !!
 30121                                  
 30122                                  ;---------------------------------------------------------------------------
 30123                                  ;
 30124                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 30125                                  ;
 30126                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 30127                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30128                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30129                                  ; processing to continue; 2) the original interrupt return address to the code
 30130                                  ; that performed the function call in the first place. If the user CTRL-C
 30131                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30132                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30133                                  ; is simulated.
 30134                                  ;
 30135                                  ;---------------------------------------------------------------------------
 30136                                  
 30137                                  CNTCHAND:
 30138                                  	; MSDOS 6.0			; SS override
 30139                                  					; AN002; from RAWOUT
 30140                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30141                                  	;JNZ	short around_deadlock 	; AN002;
 30142                                  
 30143                                  	; 05/05/2019 - Retro DOS v4.0
 30144                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30145 000050DF 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30146 000050E5 7508                    	JNZ	short around_deadlock 	; AN002;
 30147                                  
 30148 000050E7 B003                            MOV     AL,3			; Display "^C"
 30149 000050E9 E8EBC5                          CALL	BUFOUT
 30150 000050EC E889C4                          CALL	CRLF
 30151                                  around_deadlock:
 30152 000050EF 16                              PUSH    SS
 30153 000050F0 1F                              POP     DS
 30154 000050F1 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30155 000050F6 7403                            JZ      SHORT NOSWAP
 30156 000050F8 E829E1                          CALL	SWAPBACK
 30157                                  NOSWAP:
 30158 000050FB FA                      	CLI				; Prepare to play with stack
 30159 000050FC 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30160 00005100 8B26[8405]              	MOV	SP,[USER_SP]
 30161 00005104 E848B3                          CALL	restore_world       ; User registers now restored
 30162                                  
 30163                                  	; 30/07/2018 - Retro DOS v3.0 
 30164                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30165                                          ; 14/03/2018 - Retro DOS v2.0
 30166                                  	;MOV	BYTE [CS:INDOS],0	
 30167                                          ;MOV	BYTE [CS:ERRORMODE],0
 30168                                          ;MOV	[CS:ConC_Spsave],SP
 30169                                  	;clc	;30/07/2018
 30170                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30171                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30172                                  			; Return: return via RETF 2 with CF set
 30173                                  			; DOS will abort program with errorlevel 0
 30174                                  			; else
 30175                                  			; interrupted DOS call continues
 30176                                  
 30177                                  	; 05/05/2019 - Retro DOS v4.0
 30178                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30179                                  
 30180                                  	; CS was used to address these variables. We have to use DOSDATA
 30181                                  	
 30182 00005107 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30183                                  			; (pop es, after 'call restore_world')	
 30184 00005108 1E                      	push	ds
 30185                                  	;getdseg <ds>			; ds -> dosdata
 30186 00005109 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30187 0000510E C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30188 00005113 C606[2003]00            	mov	byte [ERRORMODE],0
 30189 00005118 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30190                                  	; User SP has changed because of push. Adjust for it
 30191 0000511C 8306[3203]02            	add	word [ConC_Spsave],2
 30192                                  
 30193 00005121 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30194 00005126 1F                       	pop	ds	; restore ds
 30195 00005127 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30196 00005129 F8                      	CLC				
 30197 0000512A CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30198 0000512C EB06                    	jmp	short ctrlc_ret_addr
 30199                                  
 30200                                  	; 05/05/2019
 30201                                  do_low_int23:
 30202 0000512E F8                      	clc
 30203 0000512F 2EFF1E[974F]            	call	far [cs:LowInt23Addr]	
 30204                                  
 30205                                  	; 30/07/2018 
 30206                                  
 30207                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30208                                  
 30209                                  ; The user has returned to us. The circumstances we allow are:
 30210                                  ;
 30211                                  ;   IRET	We retry the operation by redispatching the system call
 30212                                  ;   CLC/RETF	POP the stack and retry
 30213                                  ;   ... 	Exit the current process with ^C exit
 30214                                  ;
 30215                                  ; User's may RETURN to us and leave interrupts on. 
 30216                                  ; Turn 'em off just to be sure
 30217                                  
 30218                                  ctrlc_ret_addr: ; 05/05/2019
 30219                                  
 30220 00005134 FA                      	CLI
 30221                                  
 30222                                  	; MSDOS 3.3 
 30223                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30224                                  	;PUSHF				; and the flags (maybe new call)
 30225                                  	;POP	AX
 30226                                  
 30227                                  	; 05/05/2019
 30228                                  	; MSDOS 6.0
 30229                                  
 30230                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30231                                  
 30232 00005135 50                      	push	ax
 30233 00005136 8CD8                    	mov	ax,ds
 30234                                  	;getdseg <ds>			; ds -> dosdata
 30235 00005138 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30236 0000513D A3[0A0D]                	mov	[TEMPSEG],ax
 30237 00005140 58                      	pop	ax
 30238 00005141 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30239 00005144 9C                      	pushf				; and the flags (maybe new call)
 30240 00005145 58                      	pop	ax
 30241                                  
 30242                                  ; See if the input stack is identical to the output stack
 30243                                  
 30244                                  	; MSDOS 3.3
 30245                                  	;CMP	SP,[CS:ConC_Spsave]
 30246                                  	;JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30247                                  
 30248                                  	; MSDOS 6.0
 30249 00005146 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30250 0000514A 750A                    	JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30251                                  
 30252                                  ; Repeat the operation by redispatching the system call.
 30253                                  
 30254                                  ctrlc_repeat:
 30255                                  	; MSDOS 3.3
 30256                                  	;MOV	AX,[CS:USER_IN_AX]
 30257                                  	; 05/05/2019
 30258                                  	; MSDOS 6.0
 30259 0000514C A1[3A03]                	mov	ax,[USER_IN_AX]
 30260 0000514F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30261                                  	; MSDOS 3.3 & MSDOS 6.0 
 30262                                  	;transfer COMMAND
 30263                                  COMMANDJ:
 30264 00005153 E9B1B1                  	JMP	COMMAND
 30265                                  
 30266                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30267                                  ; RETF'd leaving some flags on the stack and examine the input
 30268                                  
 30269                                  ctrlc_try_new:
 30270                                  	; 29/02/2024
 30271                                  	;ADD	SP,2			; pop those flags
 30272                                  	;
 30273                                  	;;test	ax,1
 30274                                  	;TEST	AX,f_Carry		; did he return with carry?
 30275 00005156 A801                    	test	al,f_Carry ; test al,1
 30276                                  	;
 30277                                  	; 29/02/2024
 30278 00005158 58                      	pop	ax  ; (PCDOS 7.1 IBMDOS.COM)
 30279                                  	;
 30280 00005159 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30281                                  
 30282                                  	; MSDOS 6.0
 30283 0000515B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30284                                  
 30285                                  	; Well...  time to abort the user.  
 30286                                  	; Signal a ^C exit and use the EXIT system call..
 30287                                  
 30288                                  ctrlc_abort:
 30289                                  	; MSDOS 3.3
 30290                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30291                                          ;MOV	AX,(EXIT*256) + 0 ; 4C00h
 30292                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30293                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30294                                  	;;JMP	SHORT COMMANDJ
 30295                                  	;JMP	COMMAND
 30296                                  
 30297                                  	; 05/05/2019 - Retro DOS v4.0
 30298                                  	; MSDOS 6.0
 30299 0000515F B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30300 00005162 1E                      	push	ds
 30301                                  	;getdseg <ds>			; ds -> dosdata
 30302 00005163 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30303 00005168 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30304 0000516D 1F                      	pop	ds
 30305                                  	;transfer COMMAND		; give up by faking $EXIT
 30306 0000516E EBE3                    	JMP	SHORT COMMANDJ
 30307                                  	;JMP	COMMAND
 30308                                  
 30309                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30310                                  ;----------------------------------------------------------------------------
 30311                                  ;
 30312                                  ; Procedure Name : DIVOV
 30313                                  ;
 30314                                  ; Default handler for division overflow trap
 30315                                  ;
 30316                                  ;----------------------------------------------------------------------------
 30317                                  
 30318                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30319                                  DIVOV: 
 30320                                  	; 05/05/2019 - Retro DOS v4.0
 30321                                  	; 30/07/2018
 30322                                  	; 07/07/2018 - Retro DOS v3.0
 30323 00005170 BE[9C09]                	mov	si,DIVMES
 30324 00005173 2E8B1E[AF09]            	mov	bx,[cs:DivMesLen]
 30325                                  	;mov	ax,cs
 30326                                  	;mov	ss,ax
 30327                                  	; 05/05/2019
 30328                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30329 00005178 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30330 0000517D BC[A007]                	mov     sp,AUXSTACK
 30331                                  	;call	RealDivOv ; MSDOS 3.3
 30332 00005180 E80200                  	call	_OUTMES ; MSDOS 6.0
 30333 00005183 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30334                                  
 30335                                  ; 30/07/2018
 30336                                  
 30337                                  ; MSDOS 6.0
 30338                                  ;---------------------------------------------------------------------------
 30339                                  ;
 30340                                  ; Procedure Name : OutMes
 30341                                  ;
 30342                                  ;
 30343                                  ; OutMes: perform message output
 30344                                  ; Inputs:   SS:SI points to message
 30345                                  ;	    BX has message length
 30346                                  ; Outputs:  message to BCON
 30347                                  ;
 30348                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30349                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30350                                  ;NB. This procedure is called only from DIVOV. -SR
 30351                                  ;
 30352                                  ;---------------------------------------------------------------------------
 30353                                  
 30354                                  ;MSDOS 3.3
 30355                                  ;---------------------------------------------------------------------------
 30356                                  ; RealDivOv: perform actual divide overflow stuff.
 30357                                  ; Inputs:   none
 30358                                  ; Outputs:  message to BCON
 30359                                  ;---------------------------------------------------------------------------
 30360                                  
 30361                                  	; 05/05/2019 - Retro DOS v4.0
 30362                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30363                                  
 30364                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30365                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30366                                  
 30367                                  ;---------------------------------------------------------------------------
 30368                                  ;
 30369                                  ; Procedure Name : OutMes
 30370                                  ;
 30371                                  ; OutMes: perform message output
 30372                                  ; Inputs:   SS:SI points to message
 30373                                  ;	    BX has message length
 30374                                  ; Outputs:  message to BCON
 30375                                  ;
 30376                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30377                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30378                                  ;NB. This procedure is called only from DIVOV. -SR
 30379                                  ;
 30380                                  ;---------------------------------------------------------------------------
 30381                                  
 30382                                  	; 30/07/2018
 30383                                  	; MSDOS 6.0
 30384                                  _OUTMES:
 30385                                  	; MSDOS 3.3
 30386                                  ;RealDivOv:
 30387                                  	; 07/07/2018 - Retro DOS v3.0
 30388                                          ;Context ES
 30389 00005185 16                      	push	ss ; 05/05/2019
 30390                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30391 00005186 07                      	POP	ES
 30392                                          ;Context DS
 30393 00005187 16                      	push	ss ; 05/05/2019	
 30394                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30395 00005188 1F                      	POP	DS
 30396 00005189 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30397 0000518E C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30398 00005193 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30399                                  	; BX = [DivMesLen] = 19
 30400 00005199 891E[A403]                      MOV     [DSKSTCNT],BX
 30401 0000519D BB[9203]                        MOV     BX,DSKSTCALL
 30402 000051A0 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30403                                  	; 08/09/2018
 30404                                  	;mov	[DEVIOBUF_PTR],si
 30405                                  	; MSDOS 6.0
 30406                                  					; CS is used for string, fill in 
 30407                                  					; segment address
 30408                                  	;mov	[DOSSEG_INIT],cs ; 29/02/2024 
 30409 000051A4 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30410                                  
 30411 000051A8 C536[3200]                      LDS     SI,[BCON]
 30412 000051AC E8B9F3                          CALL	DEVIOCALL2
 30413                                  
 30414                                  	;; 14/03/2018
 30415                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30416                                  	;; 08/09/2018
 30417                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30418                                          ;MOV	WORD [CS:DSKSTCNT],1
 30419                                          
 30420                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30421                                  
 30422                                  	; ES still points to DOSDATA. ES is
 30423                                  					; not destroyed by deviocall2. So use
 30424                                  					; ES override.
 30425                                  
 30426 000051AF 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30427 000051B6 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30428                                  
 30429 000051BD C3                      	RETN
 30430                                  
 30431                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30432                                  ;---------------------------------------------------------------------------
 30433                                  ;
 30434                                  ; Procedure Name : CHARHARD
 30435                                  ;
 30436                                  ;
 30437                                  ; Character device error handler
 30438                                  ; Same function as HARDERR
 30439                                  ;
 30440                                  ;---------------------------------------------------------------------------
 30441                                  
 30442                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30443                                  CHARHARD:
 30444                                  	; 05/05/2019 - Retro DOS v4.0
 30445                                  	; 30/07/2018
 30446                                  	; 08/07/2018 - Retro DOS v3.0
 30447                                  
 30448                                  	; MSDOS 6.0
 30449                                  		   			; M024 - start
 30450 000051BE 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30451                                  	;jne	short @f		; Y: allow fail
 30452 000051C4 750B                    	jne	short chard1
 30453                                  
 30454 000051C6 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30455                                  
 30456 000051C9 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30457 000051CF 7503                    	jnz	short ctrlp		; Y: 
 30458                                  ;@@:
 30459                                  chard1:					; M024 - end
 30460                                  	; MSDOS 6.0 & MSDOS 3.3
 30461                                  
 30462                                  ; Character device error handler
 30463                                  ; Same function as HARDERR
 30464                                  
 30465                                  	;or	ah,38h
 30466 000051D1 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30467                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30468 000051D4 368826[4B03]            	mov	[SS:ALLOWED],ah
 30469                                  
 30470                                  	; 15/03/2018
 30471 000051D9 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30472 000051DE 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30473 000051E3 56                              PUSH    SI
 30474                                  	;and	di,0FFh
 30475 000051E4 81E7FF00                        AND     DI,STECODE
 30476 000051E8 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30477 000051EA E86400                          CALL    FATALC
 30478 000051ED 5E                              POP     SI
 30479                                  	;return
 30480 000051EE C3                              RETN
 30481                                  
 30482                                  ;---------------------------------------------------------------------------
 30483                                  ;
 30484                                  ; Procedure Name : HardErr
 30485                                  ;
 30486                                  ; Hard disk error handler. Entry conditions:
 30487                                  ;	DS:BX = Original disk transfer address
 30488                                  ;	DX = Original logical sector number
 30489                                  ;	CX = Number of sectors to go (first one gave the error)
 30490                                  ;	AX = Hardware error code
 30491                                  ;	DI = Original sector transfer count	
 30492                                  ;	ES:BP = Base of drive parameters
 30493                                  ;	[READOP] = 0 for read, 1 for write
 30494                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30495                                  ; Output:
 30496                                  ;	[FAILERR] will be set if user responded FAIL
 30497                                  ;
 30498                                  ;--------------------------------------------------------------------------
 30499                                  
 30500                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30501                                  HARDERR:
 30502                                  	; 05/05/2019 - Retro DOS v4.0
 30503                                  	; 30/07/2018
 30504                                  	; 08/07/2018 - Retro DOS v3.0
 30505 000051EF 97                      	XCHG    AX,DI			; Error code in DI, count in AX
 30506                                  	;and	di,0FFh
 30507 000051F0 81E7FF00                	AND	DI,STECODE		; And off status bits
 30508                                  	;CMP	DI,WRECODE		; Write Protect Error?
 30509                                  	;cmp	di,0
 30510 000051F4 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30511 000051F7 750A                    	JNZ	short NOSETWRPERR
 30512 000051F9 50                      	PUSH    AX
 30513                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30514                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30515                                  	;;MOV	AL,[ES:BP+0]
 30516                                  	; 15/12/2022
 30517 000051FA 268A4600                	mov	al,[ES:BP]
 30518                                  		; 15/03/2018
 30519 000051FE 36A2[2203]              	MOV	[SS:WPERR],AL		; Flag drive with WP error
 30520 00005202 58                      	POP	AX
 30521                                  NOSETWRPERR:
 30522 00005203 29C8                    	SUB	AX,CX		  ; Number of sectors successfully transferred
 30523 00005205 01C2                    	ADD	DX,AX		  ; First sector number to retry
 30524 00005207 52                      	PUSH    DX
 30525                                  	; 08/07/2018
 30526                                  	;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30527 00005208 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30528 0000520C 5A                      	POP	DX
 30529 0000520D 01C3                    	ADD	BX,AX			; First address for retry
 30530 0000520F 30E4                    	XOR	AH,AH			; Flag disk section in error
 30531                                  	;CMP	DX,[ES:BP+6] 		; In reserved area?
 30532 00005211 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30533 00005215 721A                    	JB	SHORT ERRINT
 30534 00005217 FEC4                    	INC	AH			; Flag for FAT
 30535                                  	;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30536                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019
 30537 00005219 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30538 0000521D 7308                    	JAE	short TESTDIR		; No
 30539                                  		; Err in FAT must force recomp of freespace
 30540                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30541                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30542 0000521F 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30543 00005225 EB0A                    	JMP	SHORT ERRINT
 30544                                  TESTDIR:
 30545 00005227 FEC4                    	INC	AH
 30546                                  	;CMP	DX,[ES:BP+0BH]		; In directory?
 30547 00005229 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR]
 30548 0000522D 7202                    	JB	SHORT ERRINT
 30549 0000522F FEC4                    	INC	AH			; Must be in data area
 30550                                  ERRINT:
 30551 00005231 D0E4                    	SHL	AH,1			; Make room for read/write bit
 30552 00005233 360A26[7505]            	OR	AH,[SS:READOP] ; 15/03/2018
 30553                                  
 30554                                  	; 15/08/2018
 30555                                  					; SS override for allowed and EXITHOLD
 30556 00005238 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30557                                  
 30558                                  	;entry   FATAL
 30559                                  FATAL:
 30560                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30561                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30562                                  	;;MOV	AL,[ES:BP+0]		; Get drive number
 30563                                  	; 15/12/2022
 30564 0000523D 268A4600                	MOV	AL,[ES:BP]
 30565                                  
 30566                                  	;entry   FATAL1
 30567                                  FATAL1:  
 30568                                  	; 15/03/2018	
 30569 00005241 368C06[8205]            	MOV	[SS:EXITHOLD+2],ES
 30570 00005246 36892E[8005]            	MOV	[SS:EXITHOLD],BP	; The only things we preserve
 30571                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30572                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30573 0000524B 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30574 0000524F 8CC5                    	MOV	BP,ES		  ; BP:SI points to the device involved
 30575                                  
 30576                                  	; DI has the INT-24-style extended error. We now map the error code
 30577                                  	; for this into the normalized get extended error set by using the
 30578                                  	; ErrMap24 table as a translate table. Note that we translate ONLY
 30579                                  	; the device returned codes and leave all others beyond the look up
 30580                                  	; table alone.
 30581                                  
 30582                                  	; 08/07/2018 - Retro DOS v3.0
 30583                                  FATALC:
 30584 00005251 E89501                  	call	SET_I24_EXTENDED_ERROR
 30585                                  	;cmp	di,0Ch
 30586 00005254 83FF0C                  	CMP	DI,error_I24_gen_failure
 30587 00005257 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30588 00005259 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30589                                  					;  Only come via GetExtendedError
 30590                                  ;** ----------------------------------------------------------------
 30591                                  ;
 30592                                  ; Entry point used by REDIRector on Network I 24 errors.
 30593                                  ;
 30594                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30595                                  ;
 30596                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30597                                  ;	EXITHOLD set for restore of ES:BP.
 30598                                  ; ------------------------------------------------------------------
 30599                                  	;entry	NET_I24_ENTRY
 30600                                  NET_I24_ENTRY:
 30601                                  GOT_RIGHT_CODE:
 30602 0000525C 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30603 00005262 7404                    	JZ	SHORT NoSetFail
 30604 00005264 B003                    	MOV	AL,3
 30605 00005266 EB6C                    	JMP	short FailRet
 30606                                  NoSetFail:
 30607 00005268 368926[8805]            	MOV	[SS:CONTSTK],SP		; SS override
 30608 0000526D 16                      	PUSH	SS
 30609 0000526E 07                      	POP	ES
 30610                                      
 30611                                  	; Wango!!! We may need to free some user state info... In 
 30612                                  	; particular, we may have locked down a JFN for a user and he may
 30613                                  	; NEVER return to us. Thus,we need to free it here and then
 30614                                  	; reallocate it when we come back.
 30615                                  
 30616 0000526F 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30617 00005275 740C                    	JZ	short _NoFree
 30618 00005277 1E                      	push	ds
 30619 00005278 56                      	push	si
 30620 00005279 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30621 0000527E C604FF                  	MOV	BYTE [SI],0FFH
 30622 00005281 5E                      	pop	si
 30623 00005282 1F                      	pop	ds
 30624                                  
 30625                                  _NoFree:
 30626 00005283 FA                      	CLI
 30627                                  					; Prepare to play with stack
 30628 00005284 36FE06[2003]            	INC	BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30629 00005289 36FE0E[2103]            	DEC	BYTE [SS:INDOS]		; INT 24 handler might not return
 30630                                  
 30631                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30632                                  
 30633                                  	;; Extended Open hooks
 30634                                  					; AN000;IFS.I24 error disabled
 30635                                  	;test	byte [ss:EXTOPEN_ON],2
 30636 0000528E 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF
 30637 00005294 7404                    	JZ	short i24yes		; AN000;IFS.no
 30638                                  faili24:				; AN000;
 30639 00005296 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30640 00005298 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30641                                  i24yes: 				; AN000;
 30642                                  	;; Extended Open hooks
 30643                                  
 30644 0000529A 368E16[8605]            	MOV	SS,[SS:USER_SS]
 30645 0000529F 268B26[8405]            	MOV	SP,[ES:USER_SP]	; User stack pointer restored
 30646                                  
 30647                                  	;;int	24h	
 30648                                  	;IN	int_fatal_abort		; Fatal error interrupt vector,
 30649                                  					; must preserve ES
 30650                                  	; 05/05/2019
 30651 000052A4 26803E[1112]00          	cmp	byte [es:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30652 000052AA 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30653 000052AC CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30654                                  					; must preserve ES
 30655 000052AE EB05                    	jmp	short criterr_ret_addr
 30656                                  
 30657                                  do_low_int24:
 30658                                  	; 05/05/2019
 30659                                  	; MSDOS 6.0
 30660 000052B0 2EFF1E[9B4F]            	call    far [cs:LowInt24Addr]
 30661                                  criterr_ret_addr:
 30662 000052B5 268926[8405]            	MOV	[ES:USER_SP],SP	; restore our stack
 30663 000052BA 268C16[8605]            	MOV	[ES:USER_SS],SS
 30664 000052BF 8CC5                    	MOV	BP,ES
 30665 000052C1 8ED5                    	MOV	SS,BP
 30666                                  passi24:
 30667 000052C3 368B26[8805]            	MOV	SP,[SS:CONTSTK]
 30668 000052C8 36FE06[2103]            	INC	BYTE [SS:INDOS]		; Back in the DOS
 30669 000052CD 36C606[2003]00          	MOV	BYTE [SS:ERRORMODE],0	; Back from INT 24
 30670 000052D3 FB                      	STI
 30671                                  FailRet:
 30672 000052D4 36C42E[8005]            	LES	BP,[SS:EXITHOLD]
 30673                                  	
 30674                                  	; 08/07/2018
 30675                                  
 30676                                  	; Triage the user's reply.
 30677                                  
 30678 000052D9 3C01                    	CMP	AL,1
 30679 000052DB 723D                    	JB	short CheckIgnore	; 0 => ignore
 30680 000052DD 7445                    	JZ	short CheckRetry	; 1 => retry
 30681 000052DF 3C03                    	CMP	AL,3			; 3 => fail
 30682 000052E1 7549                    	JNZ	short DoAbort 		; 2, invalid => abort
 30683                                  
 30684                                  	; The reply was fail. See if we are allowed to fail.
 30685                                  
 30686                                  					; SS override for ALLOWED, EXTOPEN_ON,
 30687                                  					; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30688                                  	;test	byte [ss:ALLOWED],8
 30689 000052E3 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30690 000052E9 7441                    	jz	short DoAbort		; No, do abort
 30691                                  DoFail:
 30692 000052EB B003                    	MOV	AL,3			; just in case...
 30693                                  					; AN000;EO. I24 error disabled
 30694                                  	; 05/05/2019
 30695                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30696 000052ED 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30697 000052F3 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30698                                  	
 30699 000052F5 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30700                                  CleanUp:
 30701 000052FA 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30702 00005300 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30703                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30704                                  	;jnz	short CleanUp2
 30705                                  	;retn
 30706                                  	; 17/12/2022
 30707 00005306 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30708                                  CleanUp2:
 30709 00005308 1E                      	push	ds
 30710 00005309 56                      	push	si
 30711 0000530A 50                      	push	ax
 30712 0000530B 36A1[AA05]              	MOV	AX,[ss:SFN]
 30713 0000530F 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30714 00005314 8804                    	MOV	[SI],AL
 30715 00005316 58                      	pop	ax
 30716 00005317 5E                      	pop	si
 30717 00005318 1F                      	pop	ds
 30718                                  Cleanup_retn:
 30719 00005319 C3                      	retn
 30720                                  
 30721                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30722                                  
 30723                                  CheckIgnore:
 30724                                  	;test	byte [ss:ALLOWED],20h
 30725 0000531A 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30726                                  CheckRI:	; 29/02/2024
 30727 00005320 74C9                    	jz	short DoFail			; No, do fail
 30728 00005322 EBD6                    	jmp	short CleanUp
 30729                                  
 30730                                  	; The reply was RETRY. See if we are allowed to retry.
 30731                                  
 30732                                  CheckRetry:
 30733                                  	;test	byte [ss:ALLOWED],10h
 30734 00005324 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30735                                  	;jz	short DoFail			; No, do fail
 30736                                  	;JMP	short CleanUp
 30737                                  	; 29/02/2024 (PCDOS 7.1 IBMDOS.COM)
 30738 0000532A EBF4                    	jmp	short CheckRI
 30739                                  
 30740                                  	; The reply was ABORT.
 30741                                  DoAbort:
 30742 0000532C 16                      	push	ss
 30743 0000532D 1F                      	pop	ds
 30744                                  
 30745 0000532E 803E[5703]00            	CMP	byte [CONSWAP],0
 30746 00005333 7403                    	JZ	short NOSWAP2
 30747 00005335 E8ECDE                  	call	SWAPBACK
 30748                                  NOSWAP2:
 30749                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30750                                  	; turn this abort into a fail.
 30751                                  
 30752                                  	;test	[fAborting],0FFh
 30753                                  	;jnz	short DoFail
 30754                                  
 30755 00005338 803E[5903]00            	cmp	byte [fAborting],0
 30756 0000533D 75AC                    	JNZ	short DoFail
 30757                                  
 30758                                  	; Set return code
 30759                                  
 30760 0000533F C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30761 00005344 30C0                    	XOR	AL,AL
 30762                                  
 30763                                  	; we are truly aborting the process. Go restore information from 
 30764                                  	; the PDB as necessary.
 30765                                  
 30766 00005346 E9700D                  	jmp	exit_inner
 30767                                  
 30768                                  ;** --------------------------------------------------------------------------
 30769                                  ;
 30770                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30771                                  ; different, then an old-style return is performed. If they are the same,
 30772                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30773                                  ; the source of the terminate addresses.
 30774                                  ;
 30775                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30776                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30777                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30778                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30779                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30780                                  ; operation. In essence, we dis-allow the abort response.
 30781                                  ;
 30782                                  ; output:   none.
 30783                                  ; ----------------------------------------------------------------------------
 30784                                  
 30785                                  	;entry	reset_environment
 30786                                  	
 30787                                  reset_environment:
 30788                                  	; 30/07/2018 - Retro DOS v3.0
 30789                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30790                                  
 30791                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30792                                  
 30793 00005349 1E                      	PUSH	DS			; save PDB of process
 30794                                  
 30795                                  	; There are no critical sections in force. Although we may enter
 30796                                  	; here with critical sections locked down, they are no longer 
 30797                                  	; relevant. We may safely free all allocated resources.
 30798                                  
 30799 0000534A B482                    	MOV	AH,82h
 30800                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30801                                  	;int	2Ah 	
 30802 0000534C CD2A                    	INT	int_IBM
 30803                                  
 30804                                  					; SS override
 30805 0000534E 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30806                                  
 30807                                  					; DOS 4.00 doesn't need it
 30808                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30809                                  					; Allow REDIR to clear some stuff
 30810                                  					; On process exit.
 30811 00005354 B82211                  	mov	ax, 1122h
 30812 00005357 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30813                                  			; SS = DOS CS
 30814                                  	;mov	al,22h	
 30815 00005359 B022                    	MOV	AL,int_terminate
 30816 0000535B E81BBB                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30817                                  
 30818 0000535E 59                      	POP	CX			; get ThisPDB
 30819 0000535F 06                      	push	es
 30820 00005360 53                      	push	bx			; save return address
 30821                                  
 30822 00005361 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30823 00005366 8EDB                    	MOV	DS,BX
 30824 00005368 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30825                                  
 30826                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30827                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper
 30828                                  	; is not Exit_keep_process
 30829                                  	
 30830 0000536B 39D8                    	CMP	AX,BX
 30831 0000536D 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30832 0000536F 39CB                    	CMP	BX,CX
 30833 00005371 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30834 00005373 50                      	PUSH	AX			; save parent
 30835                                  
 30836                                  					; SS override
 30837                                  	;cmp	byte [SS:EXIT_TYPE],3
 30838 00005374 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30839 0000537A 7406                    	JZ	short reset_to_parent 	; keeping this process
 30840                                  
 30841                                  	; We are truly removing a process. Free all allocation blocks
 30842                                  	; belonging to this PDB
 30843                                  
 30844                                  	;invoke	arena_free_process
 30845 0000537C E8720D                  	call	arena_free_process
 30846                                  
 30847                                  	; Kill off remainder of this process. Close file handles and signal
 30848                                  	; to relevant network folks that this process is dead. Remember that
 30849                                  	; CurrentPDB is STILL the current process!
 30850                                  
 30851                                  	;invoke	DOS_ABORT
 30852 0000537F E8BCDA                  	call	DOS_ABORT
 30853                                  
 30854                                  reset_to_parent:
 30855                                  					; SS override
 30856 00005382 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30857                                  
 30858                                  reset_return:				; come here for normal return
 30859                                  	;Context DS			; DS is used to refer to DOSDATA
 30860 00005387 16                      	push	ss
 30861 00005388 1F                      	pop	ds	
 30862                                  
 30863 00005389 B0FF                    	MOV	AL,-1
 30864                                  
 30865                                  	; make sure that everything is clean In this case ignore any errors,
 30866                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30867                                  
 30868                                  	;EnterCrit critDisk
 30869 0000538B E864BF                  	call	ECritDisk
 30870                                  	;invoke	FLUSHBUF
 30871 0000538E E89F05                  	call	FLUSHBUF
 30872                                  	;LeaveCrit critDisk
 30873 00005391 E879BF                  	call	LCritDisk
 30874                                  
 30875                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30876                                  
 30877 00005394 E895F7                  	call	CHECK_VIRT_OPEN
 30878 00005397 FA                      	CLI
 30879 00005398 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30880 0000539D C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30881 000053A2 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30882 000053A7 8F06[8005]              	POP	WORD [EXITHOLD]
 30883 000053AB 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30884                                  
 30885                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30886                                  
 30887 000053AF 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30888 000053B3 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30889 000053B7 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30890                                  
 30891 000053BB E891B0                  	call	restore_world
 30892                                  
 30893                                  	; 05/05/2019
 30894 000053BE 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30895                                  
 30896                                  	; MSDOS 6.0
 30897 000053BF 50                      	push	ax			; set up ds, but save ds in TEMPSEG
 30898 000053C0 8CD8                    	mov	ax,ds			; and not on stack.
 30899                                  	;getdseg <ds>			; ds -> dosdata
 30900 000053C2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30901 000053C7 A3[0A0D]                	mov	[TEMPSEG],ax
 30902 000053CA 58                      	pop	ax
 30903                                  					; set up ds to DOSDATA
 30904                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30905 000053CB A3[8405]                	mov	[USER_SP],ax
 30906                                  
 30907 000053CE 58                      	POP	AX			; suck off CS:IP of interrupt...
 30908 000053CF 58                      	POP	AX
 30909 000053D0 58                      	POP	AX
 30910                                  
 30911                                  ; M011 : BEGIN
 30912                                  
 30913                                  	; MSDOS 3.3
 30914                                  ;	MOV	AX,0F202h	; STI
 30915                                  
 30916                                  	; MSDOS 6.0
 30917 000053D1 9F                      	LAHF
 30918 000053D2 86E0                    	XCHG	AH,AL
 30919 000053D4 2402                    	AND	AL,2
 30920 000053D6 B4F2                    	MOV	AH,0F2h
 30921                                  
 30922                                  ; M011 : END
 30923                                  
 30924                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30925 000053D8 50                      	PUSH	AX
 30926                                   
 30927                                  	;PUSH	word [CS:EXITHOLD+2]
 30928                                  	;PUSH	word [CS:EXITHOLD]
 30929                                  	
 30930                                  	; MSDOS 6.0
 30931 000053D9 FF36[8205]              	PUSH	word [EXITHOLD+2]
 30932 000053DD FF36[8005]              	PUSH	word [EXITHOLD]
 30933                                  
 30934                                  	;MOV	AX,[CS:USER_SP]
 30935                                  
 30936                                  	; MSDOS 6.0
 30937 000053E1 A1[8405]                	MOV	AX,[USER_SP]
 30938 000053E4 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30939                                  
 30940 000053E8 CF                      	IRET			; Long return back to user terminate address
 30941                                  
 30942                                  ;---------------------------------------------------------------------------
 30943                                  ;
 30944                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30945                                  ;
 30946                                  ; This routine handles extended error codes.
 30947                                  ; Input : DI = error code from device
 30948                                  ; Output: All EXTERR fields are set
 30949                                  ;
 30950                                  ;--------------------------------------------------------------------------
 30951                                  
 30952                                  SET_I24_EXTENDED_ERROR:
 30953 000053E9 50                      	PUSH	AX
 30954                                  					; ErrMap24End is in DOSDATA
 30955 000053EA B8[BB0E]                	MOV	AX,ErrMap24End
 30956 000053ED 2D[AB0E]                	SUB	AX,ErrMap24
 30957                                  					; Change to dosdata to access
 30958                                  					; ErrMap24 and EXTERR -SR
 30959                                  	; 05/05/2019 - Retro DOS v4.0
 30960                                  	
 30961                                  	; MSDOS 6.0
 30962 000053F0 1E                      	push	ds
 30963                                  	;getdseg <ds>			; ds ->dosdata
 30964 000053F1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30965                                  
 30966                                  	; AX is the index of the first unavailable error. Do not translate
 30967                                  	; if greater or equal to AX.
 30968                                  
 30969 000053F6 39C7                    	CMP	DI,AX
 30970 000053F8 89F8                    	MOV	AX,DI
 30971 000053FA 7306                    	JAE	short NoTrans
 30972                                  
 30973                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30974 000053FC 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30975 00005400 30E4                    	XOR	AH,AH
 30976                                  NoTrans:
 30977                                  	;MOV	[CS:EXTERR],AX
 30978 00005402 A3[2403]                	mov	[EXTERR],AX
 30979 00005405 1F                      	pop	ds
 30980                                  	;assume	ds:nothing
 30981 00005406 58                      	POP	AX
 30982                                  
 30983                                  	; Now Extended error is set correctly. Translate it to get correct
 30984                                  	; error locus class and recommended action.
 30985                                  
 30986 00005407 56                      	PUSH	SI
 30987                                  					; ERR_TABLE_24 is in DOSCODE 
 30988 00005408 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30989 0000540B E86AB2                  	call	CAL_LK			; Set other extended error fields
 30990 0000540E 5E                      	POP	SI
 30991 0000540F C3                      	retn
 30992                                  
 30993                                  ;============================================================================
 30994                                  ; FAT.ASM, MSDOS 6.0, 1991
 30995                                  ;============================================================================
 30996                                  ; 30/07/2018 - Retro DOS v3.0
 30997                                  ; 20/05/2019 - Retro DOS v4.0
 30998                                  
 30999                                  ;	TITLE	FAT - FAT maintenance routines
 31000                                  ;	NAME	FAT
 31001                                  
 31002                                  ;**	FAT.ASM
 31003                                  ;----------------------------------------------------------------------------
 31004                                  ;	Low level local device routines for performing disk change sequence,
 31005                                  ;	setting cluster validity, and manipulating the FAT
 31006                                  ;
 31007                                  ;	IsEof
 31008                                  ;	UNPACK
 31009                                  ;	PACK
 31010                                  ;	MAPCLUSTER
 31011                                  ;	FATREAD_SFT
 31012                                  ;	FATREAD_CDS
 31013                                  ;	FAT_operation
 31014                                  ;
 31015                                  ;	Revision history:
 31016                                  ;
 31017                                  ;	  AN000  version Jan. 1988
 31018                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 31019                                  ;
 31020                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 31021                                  ;	       from CL0FATENTRY rather than disk.
 31022                                  
 31023                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 31024                                  
 31025                                  ;Break <IsEOF - check the quantity in BX for EOF>
 31026                                  ;----------------------------------------------------------------------------
 31027                                  ;
 31028                                  ; Procedure Name : IsEOF
 31029                                  ;
 31030                                  ; IsEOF - check the fat value in BX for eof.
 31031                                  ;
 31032                                  ;   Inputs:	ES:BP point to DPB
 31033                                  ;		BX has fat value
 31034                                  ;   Outputs:	JAE eof
 31035                                  ;   Registers modified: none
 31036                                  ;
 31037                                  ;---------------------------------------------------------------------------
 31038                                  
 31039                                  IsEOF:
 31040                                  	;cmp	word [es:bp+0Dh],0FF6h
 31041 00005410 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 31042 00005416 730B                    	JAE	short EOF16			; yes, check for eof there
 31043                                  
 31044                                  ;J.K. 8/27/86
 31045                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 31046                                  ;of any media that has "F0"(Other) as a MediaByte.
 31047                                  ;Hopely, this does not create any side effect for those who may use any value
 31048                                  ;other than "FF8-FFF" as an EOF for their own file.
 31049                                  
 31050 00005418 81FBF00F                	cmp	bx,0FF0h
 31051 0000541C 7404                    	je	short IsEOF_other
 31052                                  
 31053 0000541E 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 31054                                  IsEOF_other:
 31055 00005422 C3                      	retn
 31056                                  EOF16:
 31057 00005423 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 31058 00005426 C3                      	retn
 31059                                  
 31060                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 31061                                  
 31062                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 31063                                  ;---------------------------------------------------------------------------
 31064                                  ;
 31065                                  ; Procedur Name : UNPACK
 31066                                  ;
 31067                                  ; Inputs:
 31068                                  ;	BX = Cluster number (may be full 16-bit quantity)
 31069                                  ;	ES:BP = Base of drive parameters
 31070                                  ; Outputs:
 31071                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 31072                                  ;	Zero set means DI=0 (free cluster)
 31073                                  ;	Carry set means error (currently user FAILed to I 24)
 31074                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 31075                                  ;
 31076                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 31077                                  ;
 31078                                  ;----------------------------------------------------------------------------
 31079                                  	
 31080                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31081                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 31082                                  
 31083                                  	; 20/05/2019 - Retro DOS v4.0
 31084                                  UNPACK:
 31085                                  	; MSDOS 6.0			; M014 - Start
 31086 00005427 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 31087 00005429 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 31088 0000542B 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 31089 0000542F 09FF                    	or	di,di 			; return z if di=0
 31090 00005431 C3                      	retn				; done
 31091                                  up_cont:				; M014 - End
 31092                                  	; MSDOS 3.3 & MSDOS 6.0
 31093                                  	;cmp	bx,[es:bp+0Dh]
 31094 00005432 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 31095 00005436 7726                    	JA	short HURTFAT
 31096 00005438 E8D600                  	CALL	MAPCLUSTER
 31097 0000543B 721E                    	jc	short _DoContext
 31098 0000543D 8B3D                    	MOV	DI,[DI]
 31099 0000543F 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 31100 00005441 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 31101 00005445 81FEF60F                	CMP	SI,4096-10
 31102 00005449 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 31103 0000544B 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 31104 0000544D EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 31105                                  High12:
 31106 0000544F D1EF                    	SHR	DI,1
 31107 00005451 D1EF                    	SHR	DI,1
 31108 00005453 D1EF                    	SHR	DI,1
 31109 00005455 D1EF                    	SHR	DI,1
 31110                                  Unpack12:
 31111 00005457 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 31112                                  _DoContext:
 31113 0000545B 16                      	PUSH	SS
 31114 0000545C 1F                      	POP	DS
 31115 0000545D C3                      	retn
 31116                                  HURTFAT:
 31117                                  	;;mov	word [es:bp+1Eh],0FFFFh
 31118                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31119 0000545E 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 31120 00005464 50                      	PUSH	AX
 31121 00005465 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 31122                                  
 31123                                  ;hkn; SS override
 31124 00005467 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 31125                                  ;
 31126                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 31127                                  ;
 31128 0000546D BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 31129 00005470 E8CAFD                  	call	FATAL
 31130 00005473 3C03                    	CMP	AL,3
 31131 00005475 F8                      	CLC
 31132 00005476 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 31133 00005478 F9                      	STC				; User said FAIL
 31134                                  OKU_RET:
 31135 00005479 58                      	POP	AX
 31136                                  hurtfat_retn:
 31137 0000547A C3                      	retn
 31138                                  
 31139                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31140                                  
 31141                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31142                                  ;----------------------------------------------------------------------------
 31143                                  ;
 31144                                  ; Procedure Name : PACK
 31145                                  ;
 31146                                  ; Inputs:
 31147                                  ;	BX = Cluster number
 31148                                  ;	DX = Data
 31149                                  ;	ES:BP = Pointer to drive DPB
 31150                                  ; Outputs:
 31151                                  ;	The data is stored in the FAT at the given cluster.
 31152                                  ;	SI,DX,DI all destroyed
 31153                                  ;	Carry set means error (currently user FAILed to I 24)
 31154                                  ;	No other registers affected
 31155                                  ;
 31156                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31157                                  ;
 31158                                  ;---------------------------------------------------------------------------
 31159                                  
 31160                                  	; 02/01/2024
 31161                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31162                                  	; 20/05/2019 - Retro DOS v4.0
 31163                                  PACK:
 31164                                  	; MSDOS 6.0			; M014 - start
 31165 0000547B 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31166 0000547D 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31167 0000547F 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31168 00005483 C3                      	retn				; done
 31169                                  p_cont:					; M014 - end
 31170                                  	; MSDOS 3.3 & MSDOS 6.0
 31171 00005484 E88A00                  	CALL	MAPCLUSTER
 31172 00005487 72D2                    	JC	short _DoContext
 31173 00005489 8B35                    	MOV	SI,[DI]
 31174 0000548B 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31175 0000548D 51                      	PUSH	CX			; move data to upper 12 bits
 31176 0000548E B104                    	MOV	CL,4
 31177 00005490 D3E2                    	SHL	DX,CL
 31178 00005492 59                      	POP	CX
 31179 00005493 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31180 00005496 EB14                    	JMP	SHORT PACKIN
 31181                                  ALIGNED:
 31182                                  	;cmp	word [es:bp+0Dh],0FF6h
 31183 00005498 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31184 0000549E 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 31185 000054A0 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31186 000054A4 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 31187 000054A8 EB02                    	JMP	SHORT PACKIN		; MZ go store
 31188                                  Pack16:
 31189 000054AA 31F6                    	XOR	SI,SI			; MZ no original data
 31190                                  PACKIN:
 31191 000054AC 09D6                    	OR	SI,DX
 31192 000054AE 8935                    	MOV	[DI],SI
 31193                                  
 31194                                  ;hkn; SS override
 31195 000054B0 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31196                                  	; MSDOS 6.0
 31197 000054B5 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31198                                  					;LB. if already dirty		  ;AN000;
 31199 000054B9 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31200                                  	; 10/06/2019
 31201 000054BB E87405                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31202                                  	
 31203                                  	;or	byte [si+5],40h
 31204 000054BE 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31205                                  yesdirty11:				;LB.				;AN000;
 31206                                  ;hkn; SS override
 31207 000054C2 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31208                                  ;hkn; SS is DOSDATA
 31209 000054C8 16                      	push	ss
 31210 000054C9 1F                      	pop	ds
 31211 000054CA 74AE                    	jz	short hurtfat_retn	; Carry clear
 31212 000054CC 50                      	PUSH	AX
 31213 000054CD 53                      	PUSH	BX
 31214 000054CE 51                      	PUSH	CX
 31215 000054CF A1[8E05]                	MOV	AX,[CLUSSAVE]
 31216 000054D2 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31217                                  	;;add	si,16 ; MSDOS 3.3
 31218                                  	;add	si,20 ; MSDOS 6.0
 31219 000054D6 83C614                  	ADD	SI,BUFINSIZ
 31220 000054D9 8824                    	MOV	[SI],AH
 31221                                  ;hkn; SS is DOSDATA
 31222                                  	;Context DS
 31223 000054DB 16                      	push	ss
 31224 000054DC 1F                      	pop	ds
 31225                                  	
 31226 000054DD 50                      	PUSH	AX
 31227                                  	
 31228                                  	; MSDOS 6.0
 31229 000054DE 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31230 000054E2 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31231                                  
 31232                                  	; MSDOS 3.3 & MSDOS 6.0
 31233 000054E6 8B16[9005]              	MOV	DX,[CLUSSEC]
 31234                                  
 31235                                  	;MOV	SI,1	  ; *
 31236                                  	;XOR	AL,AL     ; *
 31237                                  	;call	GETBUFFRB ; *
 31238                                  	; 22/09/2023
 31239 000054EA E83803                  	call	GETBUFFRA ; *
 31240                                  
 31241 000054ED 58                      	POP	AX
 31242 000054EE 721B                    	JC	short POPP_RET
 31243 000054F0 C53E[E205]              	LDS	DI,[CURBUF]
 31244                                  	
 31245                                  	; MSDOS 6.0
 31246 000054F4 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31247                                  					;LB. if already dirty		  ;AN000;
 31248 000054F8 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31249 000054FA E83505                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31250                                  	
 31251                                  	;or	byte [di+5],40h
 31252 000054FD 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31253                                  yesdirty12:
 31254                                  	;;add	di,16
 31255                                  	;add	di,20 ; MSDOS 6.0
 31256                                  	; 02/01/2024
 31257                                  	;ADD	DI,BUFINSIZ
 31258                                  	;DEC	DI
 31259 00005501 83C713                  	add	di,BUFINSIZ-1 ; 19
 31260                                  
 31261                                  	;add	di,[es:bp+2]
 31262 00005504 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31263 00005508 8805                    	MOV	[DI],AL
 31264 0000550A F8                      	CLC
 31265                                  POPP_RET:
 31266 0000550B 16                      	PUSH	SS
 31267 0000550C 1F                      	POP	DS
 31268 0000550D 59                      	POP	CX
 31269 0000550E 5B                      	POP	BX
 31270 0000550F 58                      	POP	AX
 31271 00005510 C3                      	retn
 31272                                  
 31273                                  ; 31/07/2018 - Retro DOS v3.0
 31274                                  
 31275                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31276                                  ;---------------------------------------------------------------------------
 31277                                  ;
 31278                                  ; Procedure Name : MAPCLUSTER
 31279                                  ;
 31280                                  ; Inputs:
 31281                                  ;	ES:BP Points to DPB
 31282                                  ;	BX Is cluster number
 31283                                  ; Function:
 31284                                  ;	Get a pointer to the cluster
 31285                                  ; Outputs:
 31286                                  ;	DS:DI Points to contents of FAT for given cluster
 31287                                  ;	DS:SI Points to start of buffer
 31288                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31289                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31290                                  ;	Carry set if failed.
 31291                                  ; SI is destroyed.
 31292                                  ;
 31293                                  ;---------------------------------------------------------------------------
 31294                                  
 31295                                  	; 20/05/2019 - Retro DOS v4.0
 31296                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31297                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31298                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31299                                  
 31300                                  MAPCLUSTER:
 31301                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31302 00005511 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31303                                  	;SAVE	<AX,BX,CX,DX>
 31304 00005516 50                      	push	ax
 31305 00005517 53                      	push	bx
 31306 00005518 51                      	push	cx
 31307 00005519 52                      	push	dx
 31308 0000551A 89D8                    	MOV	AX,BX			; AX = BX
 31309 0000551C 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31310 00005522 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31311 00005524 D1E8                    	SHR	AX,1			; AX = BX/2
 31312                                  Map16:	
 31313                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31314 00005526 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31315                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31316 00005528 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31317 0000552A 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31318 0000552C 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31319                                  
 31320                                  ;IF FastDiv
 31321                                  ;
 31322                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31323                                  ; case and apply a really fast algorithm to get the desired results
 31324                                  ;
 31325                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31326                                  ; Fast method takes 39+20*4=119
 31327                                  ;
 31328                                  ; This saves a bunch.
 31329                                  
 31330 00005530 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31331 00005534 7510                    	jne	short _DoDiv		; 4  for no jump
 31332 00005536 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31333 00005538 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31334 0000553C 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31335                                  	; MDOS 3.3
 31336                                  	;shr	al,1	
 31337                                  	; MDOS 6.0
 31338 0000553E D1EF                    	shr	di,1			; 2
 31339 00005540 D0D8                    	rcr	al,1			; 2
 31340                                  	; MDOS 3.3 (& MSDOS 6.0)
 31341 00005542 30E4                    	xor	ah,ah			; 3
 31342 00005544 EB04                    	jmp	short DivDone		; 16
 31343                                  _DoDiv:
 31344                                  ;ENDIF
 31345                                  	; MSDOS 3.3
 31346                                  	;xor	dx,dx
 31347                                  	; MSDOS 6.0
 31348 00005546 89FA                    	mov	dx,di			; 2
 31349                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31350 00005548 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31351                                  ;IF FastDiv
 31352                                  DivDone:
 31353                                  ;ENDIF
 31354                                  	;add	ax,[es:bp+6]
 31355 0000554A 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31356 0000554E 49                      	DEC	CX			; CX is sector size - 1
 31357                                  	;SAVE	<AX,DX,CX>
 31358 0000554F 50                      	push	ax
 31359 00005550 52                      	push	dx
 31360 00005551 51                      	push	cx
 31361 00005552 89C2                    	MOV	DX,AX
 31362                                  
 31363                                  	; MSDOS 6.0
 31364                                  	; 22/09/2023
 31365                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31366                                  	;
 31367                                  	; MDOS 3.3 (& MSDOS 6.0)
 31368                                  	;XOR	AL,AL	   ; *
 31369                                  	;MOV	SI,1	   ; *
 31370                                  	;;invoke GETBUFFRB ; *
 31371                                  	;call	GETBUFFRB  ; *
 31372                                  	; 22/09/2023
 31373 00005554 E8C802                  	call	GETBUFFRC  ; *!
 31374                                  
 31375                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31376 00005557 59                      	pop	cx
 31377 00005558 58                      	pop	ax
 31378 00005559 5A                      	pop	dx
 31379 0000555A 724C                    	JC	short MAP_POP
 31380                                  
 31381 0000555C C536[E205]              	LDS	SI,[CURBUF]
 31382                                  	;;lea	di,[si+16]
 31383                                  	;lea	di,[si+20] ; MSDOS 6.0
 31384 00005560 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31385 00005563 01C7                    	ADD	DI,AX
 31386 00005565 39C8                    	CMP	AX,CX
 31387 00005567 752C                    	JNZ	short MAPRET
 31388 00005569 8A05                    	MOV	AL,[DI]
 31389                                  	;Context DS		 	;hkn; SS is DOSDATA
 31390 0000556B 16                      	push	ss
 31391 0000556C 1F                      	pop	ds	
 31392 0000556D FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31393 00005571 A2[8E05]                	MOV	[CLUSSAVE],AL
 31394 00005574 8916[9005]              	MOV	[CLUSSEC],DX
 31395                                  	; MSDOS 6.0
 31396 00005578 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31397 0000557E 42                      	INC	DX
 31398                                  
 31399                                  	; 22/09/2023
 31400                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31401                                  	;
 31402                                  	; MDOS 3.3 (& MSDOS 6.0)
 31403                                  	;XOR	AL,AL	   ; *
 31404                                  	;MOV	SI,1	   ; *
 31405                                  	;;invoke GETBUFFRB ; *
 31406                                  	;call	GETBUFFRB  ; *
 31407                                  	; 22/09/2023
 31408 0000557F E89D02                  	call	GETBUFFRC  ; *!
 31409 00005582 7224                    	JC	short MAP_POP
 31410                                  
 31411 00005584 C536[E205]              	LDS	SI,[CURBUF]
 31412 00005588 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31413 0000558B 8A05                    	MOV	AL,[DI]
 31414                                  	;Context DS			;hkn; SS is DOSDATA
 31415 0000558D 16                      	push	ss
 31416 0000558E 1F                      	pop	ds
 31417 0000558F A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31418                                  
 31419                                  ;hkn; CLUSSAVE is in DOSDATA
 31420 00005592 BF[8E05]                	MOV	DI,CLUSSAVE
 31421                                  MAPRET:
 31422                                  	;RESTORE <DX,CX,BX>
 31423 00005595 5A                      	pop	dx
 31424 00005596 59                      	pop	cx
 31425 00005597 5B                      	pop	bx
 31426 00005598 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31427 0000559A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31428 000055A0 7302                    	JAE	short MapSet		; MZ no, set flags
 31429 000055A2 89D8                    	MOV	AX,BX
 31430                                  MapSet:
 31431 000055A4 A801                    	TEST	AL,1			; set zero flag if not on boundary
 31432                                  	;RESTORE <AX>
 31433 000055A6 58                      	pop	ax
 31434 000055A7 C3                      	retn
 31435                                  
 31436                                  MAP_POP:
 31437                                  	;RESTORE <DX,CX,BX,AX>
 31438 000055A8 5A                      	pop	dx
 31439 000055A9 59                      	pop	cx
 31440 000055AA 5B                      	pop	bx
 31441 000055AB 58                      	pop	ax
 31442                                  fatread_sft_retn: ; 17/12/2022
 31443 000055AC C3                      	retn
 31444                                  
 31445                                  ; 20/05/2019 - Retro DOS v4.0
 31446                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31447                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31448                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31449                                  
 31450                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31451                                  ;----------------------------------------------------------------------------
 31452                                  ;
 31453                                  ; Procedure Name : FATREAD_SFT
 31454                                  ;
 31455                                  ; Inputs:
 31456                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31457                                  ;		giving a NET SFT will produce system crashing results).
 31458                                  ;	DS DOSDATA
 31459                                  ; Function:
 31460                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31461                                  ;	if disk changed.
 31462                                  ;	In other respects, same as FATREAD_CDS.
 31463                                  ;	(note ES:DI destroyed!)
 31464                                  ; Outputs:
 31465                                  ;	Carry set if error (currently user FAILed to I 24)
 31466                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31467                                  ;	as far as invalidating curdir_ID is concerned.
 31468                                  ;	Since getting a true disk changed on this call is a screw up
 31469                                  ;	anyway, that's the way it goes.
 31470                                  ;
 31471                                  ;---------------------------------------------------------------------------
 31472                                  
 31473                                  FATREAD_SFT:
 31474 000055AD 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31475                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31476                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31477                                  	; 15/12/2022
 31478 000055B1 268A4600                	mov	AL,[ES:BP]
 31479 000055B5 A2[7605]                	MOV	[THISDRV],AL
 31480 000055B8 E871B0                  	call	GOTDPB			;Set THISDPB
 31481                                  	;CALL	FAT_GOT_DPB
 31482                                  	; 17/12/2022
 31483 000055BB EB78                    	jmp	FAT_GOT_DPB
 31484                                  ;fatread_sft_retn:
 31485                                  	;retn
 31486                                  
 31487                                  ;----------------------------------------------------------------------------
 31488                                  ;
 31489                                  ; Procedure Name : FATREAD_CDS
 31490                                  ;
 31491                                  ; Inputs:
 31492                                  ;	DS:DOSDATA
 31493                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31494                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31495                                  ; Function:
 31496                                  ;	If disk may have been changed, media is determined and buffers are
 31497                                  ;	flagged invalid. If not, no action is taken.
 31498                                  ; Outputs:
 31499                                  ;	ES:BP = Drive parameter block
 31500                                  ;	THISDPB = ES:BP
 31501                                  ;	THISDRV set
 31502                                  ;	Carry set if error (currently user FAILed to I 24)
 31503                                  ; DS preserved , all other registers destroyed
 31504                                  ;
 31505                                  ;---------------------------------------------------------------------------
 31506                                  
 31507                                  	; 20/05/2019 - Retro DOS v4.0
 31508                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31509                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31510                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31511                                  
 31512                                  FATREAD_CDS:
 31513 000055BD 06                      	PUSH	ES
 31514 000055BE 57                      	PUSH	DI
 31515                                  	;les	bp,[es:di+45h]
 31516 000055BF 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31517                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31518                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31519                                  	; 15/12/2022
 31520 000055C3 268A4600                	mov	AL,[ES:BP]
 31521 000055C7 A2[7605]                	MOV	[THISDRV],AL
 31522 000055CA E85FB0                  	call	GOTDPB			;Set THISDPB
 31523 000055CD E86500                  	CALL	FAT_GOT_DPB
 31524 000055D0 5F                      	POP	DI			;Get back CDS pointer
 31525 000055D1 07                      	POP	ES
 31526 000055D2 72D8                    	jc	short fatread_sft_retn
 31527 000055D4 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31528                                  
 31529                                  ;	Media changed. We now need to find all CDS structures which use this
 31530                                  ;	DPB and invalidate their ID pointers.
 31531                                  
 31532                                  MED_CHANGE:
 31533 000055D6 31C0                    	XOR	AX,AX
 31534 000055D8 48                      	DEC	AX			; AX = -1
 31535 000055D9 1E                      	PUSH	DS
 31536 000055DA 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31537 000055DE 30ED                    	XOR	CH,CH			; CX is number of structures
 31538                                  	;lds	si,[es:di+45h]
 31539 000055E0 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31540                                  
 31541                                  ;hkn; SS override
 31542                                  
 31543                                  ;	Find all CDSs with this DevPtr
 31544                                  ;
 31545                                  ;	(ax) = -1
 31546                                  ;	(ds:si) = DevPtr
 31547                                  
 31548 000055E4 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31549                                  frcd20: 
 31550                                  	;;test	word [es:di+43h],8000h
 31551                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31552 000055E9 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31553 000055EE 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31554                                  
 31555                                  	; MSDOS 3.3
 31556                                  	;push	es
 31557                                  	;push	di
 31558                                  	;les	di,[es:di+45h]
 31559                                  	;;les	di,[ES:DI+curdir.devptr]
 31560                                  	;call	POINTCOMP
 31561                                  	;pop	di
 31562                                  	;pop	es
 31563                                  	;jnz	short frcd25
 31564                                  
 31565                                  	; MSDOS 6.0
 31566 000055F0 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31567 000055F4 7512                    	jne	short frcd25		; no match
 31568 000055F6 8CDB                    	mov	bx,ds
 31569 000055F8 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31570 000055FC 750A                    	jne	short frcd25		; CDS not for this drive
 31571                                  
 31572                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31573                                  	;test	[es:di+49h],ax
 31574 000055FE 26854549                	test	[ES:DI+curdir.ID],AX
 31575 00005602 7404                    	JZ	short frcd25		; If root (0), leave root
 31576                                  	;mov	[es:di+49h],ax
 31577 00005604 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31578                                  frcd25:	
 31579                                  	;;add	di,81  ; MSDOS 3.3
 31580                                  	;add	di,88  ; MSDOS 6.0	 
 31581 00005608 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31582 0000560B E2DC                    	LOOP	frcd20
 31583 0000560D 1F                      	POP	DS
 31584                                  NO_CHANGE:
 31585 0000560E C42E[8A05]              	LES	BP,[THISDPB]
 31586 00005612 F8                      	CLC
 31587 00005613 C3                      	retn
 31588                                  
 31589                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31590                                  ;----------------------------------------------------------------------------
 31591                                  ;
 31592                                  ; Procedure Name : FAT_operation
 31593                                  ;
 31594                                  ;----------------------------------------------------------------------------
 31595                                  
 31596                                  	; 03/01/2024
 31597                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31598                                  
 31599                                  FAT_operation:
 31600                                  	; 31/07/2018 - Retro DOS v3.0
 31601                                  FATERR:
 31602                                  	;mov	word [es:bp+1Eh],-1
 31603                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31604 00005614 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31605                                  					; Err in FAT must force recomp of freespace
 31606                                  	;and	di,0FFh
 31607 0000561A 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31608                                  	;mov	byte [ALLOWED],18h
 31609 0000561E C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31610                                  	;mov	ah,1Ah
 31611 00005623 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31612 00005625 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31613 00005628 E816FC                  	call	FATAL1
 31614 0000562B C42E[8A05]              	LES	BP,[THISDPB]
 31615 0000562F 3C03                    	CMP	AL,3
 31616 00005631 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31617 00005633 F9                      	STC				; User said FAIL
 31618 00005634 C3                      	retn
 31619                                  
 31620                                  FAT_GOT_DPB:
 31621                                  	;Context DS			;hkn; SS is DOSDATA
 31622 00005635 16                      	push	ss			
 31623 00005636 1F                      	pop	ds
 31624                                  	;mov	al,0Fh
 31625 00005637 B00F                    	MOV	AL,DMEDHL
 31626                                  	;mov	ah,[es:bp+1]
 31627 00005639 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31628 0000563D A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31629 00005640 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31630 00005645 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31631                                  	;;mov	al,[es:bp+16h]
 31632                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31633 0000564B 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31634 0000564F A2[6703]                	MOV	[CALLMED],AL
 31635 00005652 06                      	PUSH	ES
 31636 00005653 1E                      	PUSH	DS
 31637                                  
 31638                                  ;hkn; DEVCALL is in DOSDATA
 31639 00005654 BB[5A03]                	MOV	BX,DEVCALL
 31640                                  	;;lds	si,[es:bp+12h]
 31641                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31642 00005657 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31643 0000565B 07                      	POP	ES			; ES:BX Points to call header
 31644 0000565C E809EF                  	call	DEVIOCALL2
 31645                                  	;Context DS		 	;hkn; SS is DOSDATA
 31646 0000565F 16                      	push	ss
 31647 00005660 1F                      	pop	ds
 31648 00005661 07                      	POP	ES			; Restore ES:BP
 31649 00005662 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31650                                  	;test	di,8000h
 31651                                  	;jnz	short FATERR
 31652 00005666 09FF                    	or	di,di
 31653 00005668 78AA                    	js	short FATERR		; have error
 31654 0000566A 30E4                    	XOR	AH,AH
 31655                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31656                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31657 0000566C 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31658 00005670 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31659                                  ; See if we had changed volume id by creating one on the diskette
 31660 00005673 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31661 00005677 7508                    	jnz	short CHECK_BYT
 31662 00005679 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31663 0000567E E9A300                  	jmp	GOGETBPB		; Need to get device driver to read in
 31664                                  					; new volume label.
 31665                                  CHECK_BYT:
 31666 00005681 0A26[6803]              	OR	AH,[CALLRBYT]
 31667                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31668                                  	;JMP	short NEWDSK
 31669                                  	; 17/12/2022
 31670 00005685 7861                    	js	short NEWDSK
 31671                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31672                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31673                                  	;JMP	short NEWDSK
 31674                                  
 31675                                  CHECK_ZR:
 31676 00005687 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31677                                  	; 24/09/2023
 31678                                  	; cf=0 (after 'or' instruction)
 31679                                  	;CLC
 31680 00005689 C3                      	retn				; If Media not changed (NZ)
 31681                                  
 31682                                  DISK_CHNG_ERR:
 31683 0000568A 06                      	PUSH	ES
 31684 0000568B 55                      	PUSH	BP
 31685                                  	;;les	bp,[es:bp+12h]
 31686                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31687 0000568C 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31688                                  	;;test	word [es:bp+4],800h
 31689                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31690 00005690 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31691 00005695 5D                      	POP	BP
 31692 00005696 07                      	POP	ES
 31693                                  	;JZ	short FAIL_OPJ2		; Nope, FAIL
 31694                                  	; 03/03/2024
 31695 00005697 7443                    	jz	short FAIL_OP
 31696 00005699 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31697 0000569A 57                      	PUSH	DI
 31698 0000569B 16                      	push	ss			;hkn; SS is DOSDATA
 31699 0000569C 1F                      	pop	ds
 31700                                  	;mov	byte [ALLOWED],18h
 31701 0000569D C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31702 000056A2 06                      	PUSH	ES
 31703 000056A3 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31704 000056A7 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31705 000056AB 07                      	POP	ES
 31706 000056AC 893E[2803]              	MOV	[EXTERRPT],DI
 31707                                  	;mov	ax,0Fh
 31708 000056B0 B80F00                  	MOV	AX,error_I24_wrong_disk
 31709 000056B3 C606[7505]01            	MOV	byte [READOP],1		; Write
 31710                                  	;invoke	HARDERR
 31711 000056B8 E834FB                  	call	HARDERR
 31712 000056BB 5F                      	POP	DI			; Get back buffer for ignore
 31713 000056BC 1F                      	POP	DS
 31714 000056BD 3C03                    	CMP	AL,3
 31715                                  FAIL_OPJ2:
 31716 000056BF 741B                    	JZ	short FAIL_OP
 31717 000056C1 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31718                                  
 31719                                  CHKBUFFDIRT:
 31720                                  	; 20/05/2019 - Retro DOS v4.0
 31721                                  
 31722                                  	; MSDOS 3.3
 31723                                  	;lds	di,[BUFFHEAD]
 31724                                  
 31725                                  	; MSDOS 6.0
 31726                                  	;cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31727                                  	; 03/03/2024
 31728                                  	; ds=ss
 31729                                  	;;;
 31730 000056C4 833E[7100]00            	cmp	word [DirtyBufferCount],0 ; (Win ME IO.SYS - BIOSCODE:0C7A7h)
 31731                                  	;;;
 31732 000056C9 741D                    	je	short NEWDSK			; no, skip the check
 31733 000056CB E8EC00                  	call	GETCURHEAD			; get pointer to first buffer
 31734                                  nbuffer:
 31735                                  	;cmp	al,[di+4]
 31736 000056CE 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31737 000056D1 750C                    	jne	short lfnxt			; no, go for next buffer
 31738                                  	;test   byte [di+5],40h
 31739 000056D3 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31740 000056D7 7406                    	jz	short lfnxt			; no, go for next buffer
 31741                                  
 31742                                  FAIL_OP2:	; 03/03/2024
 31743                                  	;Context DS
 31744 000056D9 16                      	push	ss
 31745 000056DA 1F                      	pop	ds
 31746                                  	; 24/09/2023
 31747                                  	; cf=0 (after 'test' instruction)
 31748                                  	;clc
 31749 000056DB C3                      	retn
 31750                                  
 31751                                  FAIL_OP:					; This label & code is here
 31752                                  	;Context DS				;  for reachability
 31753                                  	;push	ss
 31754                                  	;pop	ds
 31755 000056DC F9                      	STC
 31756                                  	; 03/03/2024
 31757                                  	;retn
 31758 000056DD EBFA                    	jmp	short FAIL_OP2 ; cf=1
 31759                                  
 31760                                  lfnxt:
 31761                                  	; 15/08/2018 - Retro DOS v3.0
 31762                                  	; MSDOS 3.3
 31763                                  	;lds	di,[di]
 31764                                  
 31765                                  	; 20/05/2019 - Retro DOS v4.0
 31766 000056DF 8B3D                    	mov	di,[di]
 31767                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31768                                  	
 31769                                  	; MSDOS 3.3
 31770                                  	;cmp	di,-1
 31771                                  	;jne	short nbuffer
 31772                                  	
 31773                                  	; MSDOS 6.0
 31774 000056E1 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31775 000056E6 75E6                    	jne	short nbuffer			; no, check this guy also
 31776                                  
 31777                                  ; If no dirty buffers, assume Media changed
 31778                                  NEWDSK:
 31779                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31780                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31781 000056E8 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31782                                  						;  recompute
 31783                                  	; MSDOS 3.3
 31784                                  	;call	SETVISIT
 31785                                  	; MSDOS 6.0
 31786 000056EE E8C900                  	call	 GETCURHEAD
 31787                                  nxbuffer:
 31788                                  	; MSDOS 3.3
 31789                                  	;or 	byte [di+5],20h
 31790                                  	; MSDOS 3.3 & MSDOS 6.0
 31791                                  	;cmp	[di+4],al
 31792 000056F1 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31793 000056F4 7510                    	jne	short lfnxt2
 31794                                  	;test	byte [di+5],40h
 31795 000056F6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31796 000056FA 758E                    	jnz	short DISK_CHNG_ERR
 31797                                  	;mov	word [di+4],20FFh
 31798 000056FC C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31799 00005701 E8C800                  	call	SCANPLACE
 31800                                  	; MSDOS 6.0
 31801 00005704 EB02                    	jmp	short skpbuff
 31802                                  lfnxt2:
 31803 00005706 8B3D                    	mov	di,[di]
 31804                                  	;mov	di,[di+BUFFINFO.buf_next]
 31805                                  skpbuff:
 31806                                  	; MSDOS 6.0
 31807 00005708 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31808 0000570D 75E2                    	jne	short nxbuffer
 31809                                  
 31810 0000570F 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31811 00005715 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31812 00005717 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31813 0000571C 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31814 0000571E 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31815                                  ;lfnxt2:
 31816                                  	; MSDOS 3.3
 31817                                  	;call	SKIPVISIT
 31818                                  	;jnz	short nxbuffer
 31819                                  GOGETBPB:
 31820                                  	; MSDOS 3.3 & MSDOS 6.0
 31821                                  	;;lds	di,[es:bp+12h]
 31822                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31823 00005724 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31824                                  	; 20/05/2019
 31825                                  	;test	word [di+4],2000h
 31826                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31827 00005728 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31828 0000572C 7510                    	JNZ	short GETFREEBUF
 31829                                  	;context DS	    		;hkn; SS is DOSDATA
 31830 0000572E 16                      	push	ss
 31831 0000572F 1F                      	pop	ds
 31832 00005730 BB0200                  	MOV	BX,2
 31833 00005733 E8F1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31834                                  FAIL_OPJ:
 31835                                  	;JC	short FAIL_OP
 31836                                  	; 03/03/2024
 31837 00005736 72A1                    	jc	short FAIL_OP2 ; cf=1
 31838 00005738 C53E[E205]              	LDS	DI,[CURBUF]
 31839 0000573C EB13                    	JMP	SHORT GOTGETBUF
 31840                                  
 31841                                  GETFREEBUF:
 31842 0000573E 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31843 0000573F 55                      	PUSH	BP
 31844                                  	; MSDOS 3.3
 31845                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31846                                  	; MSDOS 6.0
 31847 00005740 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31848                                  ;hkn; SS override
 31849 00005742 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 31850 00005747 E87000                  	call	GETCURHEAD		;LB.			  ;AN000;
 31851                                  	; MSDOS 3.3 & MSDOS 6.0
 31852 0000574A E84B02                  	call	BUFWRITE
 31853 0000574D 5D                      	POP	BP
 31854 0000574E 07                      	POP	ES
 31855                                  	;;JC	short FAIL_OPJ
 31856                                  	;jc	short FAIL_OP
 31857                                  	; 03/03/2024
 31858 0000574F 7288                    	jc	short FAIL_OP2 ; cf=1
 31859                                  
 31860                                  GOTGETBUF:
 31861                                  	;;add	di,16
 31862                                  	;add	di,20 ; MSDOS 6.0
 31863 00005751 83C714                  	ADD	DI,BUFINSIZ
 31864                                  
 31865                                  ;hkn; SS override
 31866 00005754 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31867                                  	;Context DS			;hkn; SS is DOSDATA
 31868 00005759 16                      	push	ss
 31869 0000575A 1F                      	pop	ds
 31870 0000575B 893E[6803]              	MOV	[CALLXAD],DI
 31871                                  	;mov	al,16h
 31872 0000575F B016                    	MOV	AL,DBPBHL
 31873                                  	;mov	ah,[es:bp+1]
 31874 00005761 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31875 00005765 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31876 00005768 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31877 0000576D C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31878                                  	;;mov	al,[es:bp+16h]
 31879                                  	;mov	al,[es:bp+17h]
 31880 00005773 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31881 00005777 A2[6703]                	MOV	[CALLMED],AL
 31882 0000577A 06                      	PUSH	ES ; **
 31883 0000577B 1E                      	PUSH	DS ; *
 31884                                  	;;
 31885                                  ; 03/01/2024
 31886                                  %if 0
 31887                                  	;;push	word [es:bp+14h]
 31888                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31889                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31890                                  	;;push	word [es:bp+12h]
 31891                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31892                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31893                                  
 31894                                  ;hkn; DEVCALL is in DOSDATA
 31895                                  	MOV	BX,DEVCALL
 31896                                  	POP	SI
 31897                                  	POP	DS			; DS:SI Points to device header
 31898                                  %endif
 31899                                  	; 03/01/2024
 31900 0000577C BB[5A03]                	mov	bx,DEVCALL
 31901                                  	;lds	si,[es:bp+13h]
 31902 0000577F 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31903                                  					; DS:SI Points to device header
 31904                                  	;;
 31905 00005783 07                      	POP	ES ; *			; ES:BX Points to call header
 31906                                  	;invoke	DEVIOCALL2
 31907 00005784 E8E1ED                  	call	DEVIOCALL2
 31908 00005787 07                      	POP	ES ; **			; Restore ES:BP
 31909                                  	;Context DS
 31910 00005788 16                      	push	ss		 	;hkn; SS is DOSDATA
 31911 00005789 1F                      	pop	ds
 31912 0000578A 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31913                                  	; MSDOS 3.3
 31914                                  	;test	di,8000h
 31915                                  	;jnz	short FATERRJ
 31916                                  	; MSDOS 6.0
 31917 0000578E 09FF                    	or	di,di
 31918 00005790 7825                    	js	short FATERRJ 		; have error
 31919                                  
 31920                                  ; 04/03/2024
 31921                                  %if 0
 31922                                  	;;mov	al,[es:bp+16h]
 31923                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31924                                  	MOV	AL,[ES:BP+DPB.MEDIA]
 31925                                  %endif
 31926                                  
 31927 00005792 C536[6C03]              	LDS	SI,[CALLBPB]
 31928                                  	;;mov	word [es:bp+1Ch],0
 31929                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31930 00005796 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31931                                  	;invoke	$SETDPB
 31932 0000579C E816B8                  	call	_$SETDPB
 31933                                  
 31934                                  ;hkn; SS override
 31935 0000579F 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31936                                  	;mov	al,[es:bp+8]
 31937 000057A4 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31938                                  
 31939                                  	; MSDOS 3.3
 31940                                  	;;mov	ah,[es:bp+0Fh]
 31941                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31942                                  	;;mov	[DI-8],ax
 31943                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31944                                  
 31945                                  	; MSDOS 6.0
 31946                                  	;mov	[di-0Ah],al
 31947 000057A8 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31948                                  						;>32mb		  ;AN000;
 31949                                  	;mov	ax,[es:bp+0Fh]
 31950 000057AB 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31951                                  	;mov	[di-9h],ax			  ;AC000;
 31952 000057AF 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31953                                  					;>32mb Correct buffer info ;AC000;
 31954                                  	;Context DS			;hkn; SS is DOSDATA
 31955 000057B2 16                      	push	ss
 31956 000057B3 1F                      	pop	ds
 31957 000057B4 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31958 000057B6 C3                      	retn
 31959                                  
 31960                                  FATERRJ: 
 31961 000057B7 E95AFE                  	JMP	FATERR
 31962                                  
 31963                                  ;============================================================================
 31964                                  ; STDBUF.ASM
 31965                                  ;============================================================================
 31966                                  ; Retro DOS v2.0 - 12/03/2018
 31967                                  
 31968                                  ;
 31969                                  ; Standard buffer management for MSDOS
 31970                                  ;
 31971                                  
 31972                                  ;.xlist
 31973                                  ;.xcref
 31974                                  ;INCLUDE STDSW.ASM
 31975                                  ;.cref
 31976                                  ;.list
 31977                                  
 31978                                  ;TITLE	STDBUF - MSDOS buffer management
 31979                                  ;NAME	STDBUF
 31980                                  
 31981                                  ;INCLUDE BUF.ASM
 31982                                  
 31983                                  ;============================================================================
 31984                                  ; BUF.ASM
 31985                                  ;============================================================================
 31986                                  ; 31/07/2018 - Retro DOS v3.0
 31987                                  ; Retro DOS v2.0 - 12/03/2018
 31988                                  ;
 31989                                  ; buffer management for MSDOS
 31990                                  ;
 31991                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31992                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31993                                  ;
 31994                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31995                                  ;
 31996                                  ;SETVISIT:
 31997                                  ;	; 31/07/2018 - Retro DOS v3.0
 31998                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31999                                  ;; Inputs:
 32000                                  ;;      None
 32001                                  ;; Function:
 32002                                  ;;      Set up a scan of I/O buffers
 32003                                  ;; Outputs:
 32004                                  ;;      All visit flags = 0
 32005                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 32006                                  ;;                    may cause a scan to stop in the middle leaving some
 32007                                  ;;                    visit flags set, and some not set.
 32008                                  ;;      DS:DI Points to [BUFFHEAD]
 32009                                  ;; No other registers altered
 32010                                  ;
 32011                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32012                                  ;	PUSH    AX
 32013                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 32014                                  ;	;mov	al,0DFh
 32015                                  ;	mov	al,~buf_visit
 32016                                  ;SETLOOP:
 32017                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 32018                                  ;	;and	[DI+5],al
 32019                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 32020                                  ;       LDS     DI,[DI]
 32021                                  ;       CMP     DI,-1
 32022                                  ;       JNZ     SHORT SETLOOP
 32023                                  ;       POP     AX ; 09/09/2018
 32024                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32025                                  ;SVISIT_RETN:
 32026                                  ;       RETN
 32027                                  ;
 32028                                  ;SKIPVISIT:
 32029                                  ;	; 31/07/2018 - Retro DOS v3.0
 32030                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 32031                                  ;
 32032                                  ;; Inputs:
 32033                                  ;;      DS:DI Points to a buffer
 32034                                  ;; Function:
 32035                                  ;;      Skip visited buffers
 32036                                  ;; Outputs:
 32037                                  ;;      DS:DI Points to next unvisited buffer
 32038                                  ;;      Zero is set if skip to LAST buffer
 32039                                  ;; No other registers altered
 32040                                  ;
 32041                                  ;       CMP     DI,-1
 32042                                  ;       ;retz
 32043                                  ;       JZ	SHORT SVISIT_RETN
 32044                                  ;
 32045                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 32046                                  ;       ;;;retnz
 32047                                  ;       ;;JNZ	SHORT SVISIT_RETN
 32048                                  ;
 32049                                  ;	;test	byte [di+5],20h
 32050                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 32051                                  ;	JNZ	short SKIPLOOP
 32052                                  ;	
 32053                                  ;	push	ax
 32054                                  ;	or	al,1
 32055                                  ;	pop	ax
 32056                                  ;	retn	
 32057                                  ;
 32058                                  ;SKIPLOOP:
 32059                                  ;	LDS     DI,[DI]
 32060                                  ;       JMP     SHORT SKIPVISIT
 32061                                  
 32062                                  ;============================================================================
 32063                                  ; BUF.ASM, MSDOS 6.0, 1991
 32064                                  ;============================================================================
 32065                                  ; 31/07/2018 - Retro DOS v3.0
 32066                                  ; 04/05/2019 - Retro DOS v4.0
 32067                                  
 32068                                  ;	TITLE	BUF - MSDOS buffer management
 32069                                  ;	NAME	BUF
 32070                                  
 32071                                  ;**	BUF.ASM - Low level routines for buffer cache management
 32072                                  ;
 32073                                  ;	GETCURHEAD
 32074                                  ;	ScanPlace
 32075                                  ;	PLACEBUF
 32076                                  ;	PLACEHEAD
 32077                                  ;	PointComp
 32078                                  ;	GETBUFFR
 32079                                  ;	GETBUFFRB
 32080                                  ;	FlushBuf
 32081                                  ;	BufWrite
 32082                                  ;	SET_RQ_SC_PARMS
 32083                                  ;
 32084                                  ;	Revision history:
 32085                                  ;
 32086                                  ;		AN000  version 4.00  Jan. 1988
 32087                                  ;		A004   PTM 3765 -- Disk reset failed
 32088                                  ;		M039 DB 10/17/90 - Disk write optimization
 32089                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 32090                                  
 32091                                  ;Break	<GETCURHEAD -- Get current buffer header>
 32092                                  ;----------------------------------------------------------------------------
 32093                                  ; Procedure Name : GetCurHead
 32094                                  ; Inputs:
 32095                                  ;	 No Inputs
 32096                                  ; Function:
 32097                                  ;	Returns the pointer to the first buffer in Queue
 32098                                  ;	and updates FIRST_BUFF_ADDR
 32099                                  ;       and invalidates LASTBUFFER (recency pointer)
 32100                                  ; Outputs:
 32101                                  ;	DS:DI = pointer to the first buffer in Queue
 32102                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 32103                                  ;       LASTBUFFER = -1
 32104                                  ; No other registers altered
 32105                                  ;----------------------------------------------------------------------------
 32106                                  
 32107                                  ; 04/05/2019 - Retro DOS v4.0
 32108                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 32109                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32110                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 32111                                  
 32112                                  GETCURHEAD:
 32113 000057BA 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 32114 000057BF 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 32115 000057C6 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 32116 000057CB C3                      	retn
 32117                                  
 32118                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 32119                                  ;----------------------------------------------------------------------------
 32120                                  ; Procedure Name : ScanPlace
 32121                                  ; Inputs:
 32122                                  ;	Same as PLACEBUF
 32123                                  ; Function:
 32124                                  ;	Save scan location and call PLACEBUF
 32125                                  ; Outputs:
 32126                                  ;	DS:DI Points to saved scan location
 32127                                  ; All registers, except DS:DI, preserved.
 32128                                  ;----------------------------------------------------------------------------
 32129                                  ;M039: Rewritten to preserve registers.
 32130                                  
 32131                                  ;SCANPLACE:
 32132                                  ;	; 31/07/2018 - Retro DOS v3.0
 32133                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32134                                  ;	push	es
 32135                                  ;	les	si,[di]
 32136                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 32137                                  ;	call	PLACEBUF
 32138                                  ;	push	es
 32139                                  ;	pop	ds
 32140                                  ;	mov	di,si
 32141                                  ;	pop	es
 32142                                  ;scanplace_retn:
 32143                                  ;	retn	
 32144                                  	
 32145                                  	; MSDOS 6.0
 32146                                  SCANPLACE:
 32147 000057CC FF35                    	push	word [di]
 32148                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 32149 000057CE E80200                  	call	PLACEBUF
 32150 000057D1 5F                      	pop	di
 32151 000057D2 C3                      	retn
 32152                                  
 32153                                  ;----------------------------------------------------------------------------
 32154                                  ; Procedure Name : PlaceBuf
 32155                                  ; Input:
 32156                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 32157                                  ; Function:
 32158                                  ;	Remove buffer from queue and re-insert it in proper place.
 32159                                  ; NO registers altered
 32160                                  ;----------------------------------------------------------------------------
 32161                                  
 32162                                  ;procedure PLACEBUF,NEAR
 32163                                  
 32164                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32165                                  	; 20/05/2019 - Retro DOS v4.0
 32166                                  PLACEBUF:
 32167                                  	; 31/07/2018 - Retro DOS v3.0
 32168                                  
 32169                                  	; MSDOS 6.0
 32170 000057D3 50                      	push	AX			;Save only regs we modify	;AN000;
 32171 000057D4 53                      	push	BX							;AN000;
 32172                                  	; 23/09/2023
 32173                                  	;push	SI							;AN000;
 32174                                  	
 32175 000057D5 8B05                    	mov	ax,[di]
 32176                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32177 000057D7 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32178                                  	
 32179 000057DC 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32180 000057DE 7422                    	je	short nret			;Yes, special case	;AN000;
 32181 000057E0 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32182 000057E2 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32183 000057E4 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32184 000057E8 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32185                                  not_first:
 32186                                  	; 23/09/2023
 32187 000057EA 56                      	push	si
 32188                                  	;mov	si,[di+2]
 32189 000057EB 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32190 000057EE 8904                    	mov	[si],ax
 32191                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32192 000057F0 96                      	xchg	si,ax
 32193                                  	;mov	[si+2],ax
 32194 000057F1 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32195                                  	
 32196 000057F4 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32197 000057F7 893C                    	mov	[si],di
 32198                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32199 000057F9 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32200 000057FC 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32201 000057FF 891D                    	mov	[di],bx
 32202                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32203                                  	; 23/09/2023
 32204 00005801 5E                      	pop	si
 32205                                  nret:	
 32206                                  	; 23/09/2023							;AN000;
 32207                                  	;pop	SI							;AN000;
 32208 00005802 5B                      	pop	BX							;AN000;
 32209 00005803 58                      	pop	AX							;AN000;
 32210                                  									;AN000;
 32211                                  	;cmp	byte [di+4],0FFh
 32212 00005804 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32213 00005808 7505                            jne	short pbx			; M039: -no, jump.
 32214 0000580A 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32215                                  pbx:	
 32216 0000580F C3                      	retn								;AN000;
 32217                                  
 32218                                  	; 31/07/2018 - Retro DOS v3.0
 32219                                  
 32220                                  	; MSDOS 3.3
 32221                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32222                                  
 32223                                  ;PLACEBUF:
 32224                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32225                                  ;	
 32226                                  ;       CALL	save_world
 32227                                  ;       LES     CX,[DI]
 32228                                  ;       CMP     CX,-1           	; Buf is LAST?
 32229                                  ;       JZ      SHORT NRET		; Buffer already last
 32230                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32231                                  ;       PUSH    DS
 32232                                  ;       POP     ES              	; Buf is ES:DI
 32233                                  ;	; 15/03/2018
 32234                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32235                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32236                                  ;       JNZ     SHORT BUFLOOP
 32237                                  ;       MOV     [SS:BUFFHEAD],CX
 32238                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32239                                  ;       JMP     SHORT LOOKEND
 32240                                  ;BUFLOOP:
 32241                                  ;	; 31/07/2018
 32242                                  ;	mov	ax,ds
 32243                                  ;	mov	bx,si
 32244                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32245                                  ;       LDS     SI,[SI]
 32246                                  ;       CALL    POINTCOMP
 32247                                  ;       jnz	short BUFLOOP
 32248                                  ;	;
 32249                                  ;	mov	ds,ax
 32250                                  ;	mov	si,bx
 32251                                  ;	mov	[SI],cx
 32252                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32253                                  ;	mov	[SI+2],bp
 32254                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32255                                  ;LOOKEND:
 32256                                  ;	mov	ax,ds
 32257                                  ;	mov	bx,si
 32258                                  ;       LDS     SI,[SI]
 32259                                  ;       CMP     SI,-1
 32260                                  ;       jnz     short LOOKEND
 32261                                  ;GOTHEEND:
 32262                                  ;       mov	ds,ax
 32263                                  ;	mov	[BX],di
 32264                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32265                                  ;       MOV     WORD [ES:DI],-1
 32266                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32267                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32268                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32269                                  ;NRET:
 32270                                  ;       CALL	restore_world
 32271                                  ;	
 32272                                  ;	;cmp	byte [di+4],-1
 32273                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32274                                  ;	jnz     short scanplace_retn
 32275                                  ;	call    PLACEHEAD
 32276                                  ;	retn
 32277                                  
 32278                                  ;EndProc PLACEBUF
 32279                                  
 32280                                  ;M039 - Removed PLACEHEAD.
 32281                                  ;----------------------------------------------------------------------------
 32282                                  ; places buffer at head
 32283                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32284                                  ;	ONE IN THE LIST!!!!!!!
 32285                                  ; BUGBUG ---- this routine can be removed because it has only
 32286                                  ; BUGBUG ---- one instruction. This routine is called from
 32287                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32288                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32289                                  ; BUGBUG ---- But kept as it is for modularity
 32290                                  ;----------------------------------------------------------------------------
 32291                                  ;procedure   PLACEHEAD,NEAR
 32292                                  ;	mov	word ptr [BufferQueue], di
 32293                                  ;	ret
 32294                                  ;EndProc PLACEHEAD
 32295                                  ;M039
 32296                                  
 32297                                  ;----------------------------------------------------------------------------
 32298                                  ; Procedure Name : PLACEHEAD
 32299                                  ;
 32300                                  ; SAME AS PLACEBUF except places buffer at head
 32301                                  ;----------------------------------------------------------------------------
 32302                                  
 32303                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32304                                  	; 05/09/2018
 32305                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32306                                  ;PLACEHEAD:
 32307                                  ;	; 31/07/2018 - Retro DOS v3.0
 32308                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32309                                  ;
 32310                                  ;       CALL	save_world
 32311                                  ;       PUSH	DS
 32312                                  ;       POP	ES
 32313                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32314                                  ;       LDS     SI,[SS:BUFFHEAD]
 32315                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32316                                  ;	CALL    POINTCOMP
 32317                                  ;       JZ      SHORT GOTHEEND2
 32318                                  ;	MOV	[ES:DI],SI
 32319                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32320                                  ;       MOV	[ES:DI+2],DS
 32321                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32322                                  ;       MOV	[SS:BUFFHEAD],DI
 32323                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32324                                  ;LOOKEND2:
 32325                                  ;       mov	ax,ds
 32326                                  ;	mov	bx,si
 32327                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32328                                  ;       LDS     SI,[SI]
 32329                                  ;       CALL    POINTCOMP
 32330                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32331                                  ;       mov	ds,ax
 32332                                  ;	mov	word [bx],-1
 32333                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32334                                  ;	mov	word [bx+2],-1
 32335                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32336                                  ;GOTHEEND2:
 32337                                  ;      	call	restore_world
 32338                                  ;placehead_retn:
 32339                                  ;	retn
 32340                                  
 32341                                  ; 20/05/2019 - Retro DOS v4.0
 32342                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32343                                  
 32344                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32345                                  ;----------------------------------------------------------------------------
 32346                                  ;
 32347                                  ; Procedure Name : PointComp
 32348                                  ; Inputs:
 32349                                  ;         DS:SI & ES:DI
 32350                                  ; Function:
 32351                                  ;          Checks for ((SI==DI) && (ES==DS))
 32352                                  ;	   Assumes that pointers are normalized for the
 32353                                  ;	   same segment
 32354                                  ;
 32355                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32356                                  ; DO NOT USE FOR < or >
 32357                                  ; No Registers altered
 32358                                  ;
 32359                                  ;----------------------------------------------------------------------------
 32360                                  
 32361                                  POINTCOMP:
 32362                                  	; 31/07/2018 - Retro DOS v3.0
 32363                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32364 00005810 39FE                    	CMP	SI,DI
 32365 00005812 750A                    	jnz	short _ret_label	; return if nz
 32366                                  	;jnz	short placehead_retn 
 32367 00005814 51                      	PUSH	CX
 32368 00005815 52                      	PUSH	DX
 32369 00005816 8CD9                    	MOV	CX,DS
 32370 00005818 8CC2                    	MOV	DX,ES
 32371 0000581A 39D1                    	CMP	CX,DX
 32372 0000581C 5A                      	POP	DX
 32373 0000581D 59                      	POP	CX
 32374                                  _ret_label:
 32375 0000581E C3                      	retn
 32376                                  
 32377                                  ; 01/08/2018 - Retro DOS v3.0
 32378                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32379                                  
 32380                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32381                                  
 32382                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32383                                  ;----------------------------------------------------------------------------
 32384                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32385                                  ;	It gets the specified local sector into one of the I/O buffers
 32386                                  ;	and shuffles the queue
 32387                                  ; 
 32388                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32389                                  ;		       ELSE no pre-read
 32390                                  ;		(DX) = Desired physical sector number	      (LOW)
 32391                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32392                                  ;		(ES:BP) = Pointer to drive parameters
 32393                                  ;		ALLOWED set in case of INT 24
 32394                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32395                                  ;		'C' clear if OK
 32396                                  ;		CURBUF Points to the Buffer for the sector
 32397                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32398                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32399                                  ;----------------------------------------------------------------------------
 32400                                  
 32401                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32402                                  ;----------------------------------------------------------------------------
 32403                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32404                                  ;	It gets the specified sector into one of the I/O buffers
 32405                                  ;	and shuffles the queue. We need a special entry point so that
 32406                                  ;	we can read the alternate FAT sector if the first read fails, also
 32407                                  ;	so we can mark the buffer as a FAT sector.
 32408                                  ; 
 32409                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32410                                  ;		       ELSE no pre-read
 32411                                  ;		(DX) = Desired physical sector number	     (LOW)
 32412                                  ;		(SI) != 0
 32413                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32414                                  ;		(ES:BP) = Pointer to drive parameters
 32415                                  ;		ALLOWED set in case of INT 24
 32416                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32417                                  ;		'C' clear if OK
 32418                                  ;		CUR ddBUF Points to the Buffer for the sector
 32419                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32420                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32421                                  ;----------------------------------------------------------------------------
 32422                                  
 32423                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 32424                                  GETBUFFRC:
 32425 0000581F C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32426                                  GETBUFFRA:
 32427 00005825 30C0                    	xor	al,al
 32428 00005827 BE0100                  	mov	si,1
 32429 0000582A EB09                    	jmp	short GETBUFFRB
 32430                                  
 32431                                  	; 22/09/2023
 32432                                  GETBUFFER:
 32433 0000582C 30C0                    	xor	al,al
 32434                                  GETBUFFRD:
 32435                                  	;mov	byte [ALLOWED],18h
 32436 0000582E C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32437                                  
 32438                                  	; 20/05/2019 - Retro DOS v4.0
 32439                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32440                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32441                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32442                                  GETBUFFR:
 32443 00005833 31F6                    	XOR	SI,SI
 32444                                  
 32445                                  ;	This entry point is called for FAT buffering with SI != 0
 32446                                  
 32447                                  GETBUFFRB:
 32448 00005835 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32449                                  	; 15/12/2022
 32450 00005838 268A4600                	mov	al,[ES:BP]
 32451                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32452                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32453 0000583C C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32454                                  	; MSDOS 6.0
 32455                                  ;hkn; SS override
 32456 00005840 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32457                                  
 32458                                  ;	See if this is the buffer that was most recently returned.
 32459                                  ;	A big performance win if it is.
 32460                                  
 32461 00005845 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32462 00005848 7412                    	je	short getb5			; No
 32463                                  	;cmp	dx,[di+6]
 32464 0000584A 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32465 0000584D 750D                    	JNZ	short getb5			; Wrong sector
 32466                                  	
 32467                                  	; MSDOS 6.0
 32468                                  	;cmp	cx,[di+8]
 32469 0000584F 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32470 00005852 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32471                                  	
 32472                                  	;cmp	al,[di+4]
 32473 00005854 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32474                                  	;JZ	getb35				; Just asked for same buffer
 32475 00005857 7503                    	jnz	short getb5
 32476                                  	;jmp	getb35
 32477                                  	; 17/12/2022
 32478                                  	; 28/07/2019
 32479 00005859 E9C700                  	jmp	getb35x
 32480                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32481                                  	;jmp	getb35
 32482                                  
 32483                                  ;	It's not the buffer most recently returned. See if it's in the
 32484                                  ;	cache.
 32485                                  ;
 32486                                  ;	(cx:dx) = sector #
 32487                                  ;	(al) = drive #
 32488                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32489                                  ;	??? list may be incomplete ???
 32490                                  
 32491                                  getb5:	
 32492                                  	; MSDOS 3.3
 32493                                  	;lds	di,[SS:BUFFHEAD]
 32494                                  	; MSDOS 6.0
 32495 0000585C E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32496                                  getb10:	
 32497                                  	;cmp	dx,[di+6]
 32498 0000585F 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32499 00005862 750D                    	jne	short getb12			; wrong sector lo
 32500                                  	
 32501                                  	; MSDOS 6.0
 32502                                  	;cmp	cx,[di+8]
 32503 00005864 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32504 00005867 7508                    	jne	short getb12			; wrong sector hi
 32505                                  	
 32506                                  	;cmp	al,[di+4]
 32507 00005869 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32508                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32509 0000586C 7503                    	jne	short getb12
 32510 0000586E E98C00                  	jmp	getb25
 32511                                  getb12:	
 32512                                  	; MSDOS 3.3
 32513                                  	;;mov	di,[DI]
 32514                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32515                                  	;
 32516                                  	; 15/08/2018
 32517                                  	;lds	di,[di]
 32518                                  
 32519                                  	;cmp	di,-1 ; 0FFFFh
 32520                                  	;jne	short getb10
 32521                                  	;lds	di,[SS:BUFFHEAD]
 32522                                  
 32523                                  	; MSDOS 6.0
 32524 00005871 8B3D                    	mov	di,[di]
 32525                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32526 00005873 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32527 00005878 75E5                    	jne	short getb10			; no, continue looking
 32528                                  
 32529                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32530                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32531                                  ;	new sector into it.
 32532                                  ;
 32533                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32534                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32535                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32536                                  ;	down a chain, but should be hashed.
 32537                                  ;
 32538                                  ;	(DS:DI) = first buffer in the queue
 32539                                  ;	(CX:DX) = sector # we want
 32540                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32541                                  
 32542                                  	; MSDOS 3.3 & MSDOS 6.0
 32543                                  ;hkn; SS override
 32544 0000587A 51                      	PUSH	CX  ; MSDOS 6.0
 32545 0000587B 56                      	push	si
 32546 0000587C 52                      	push	dx
 32547 0000587D 55                      	push	bp
 32548 0000587E 06                      	push	es
 32549 0000587F E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32550 00005882 07                      	pop	es
 32551 00005883 5D                      	pop	bp
 32552 00005884 5A                      	pop	dx
 32553 00005885 5E                      	pop	si
 32554 00005886 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32555                                  	;jc	short getbx			; if got hard error
 32556 0000588B 7303                    	jnc	short getb13
 32557 0000588D E99D00                  	jmp	getbx
 32558                                  
 32559                                  getb13:
 32560                                  	; MSDOS 6.0
 32561 00005890 E88C01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32562                                  
 32563                                  ;	We're ready to read in the buffer, if need be. If the caller
 32564                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32565                                  
 32566 00005893 30E4                    	XOR	AH,AH				; initial flags
 32567                                  ;hkn; SS override
 32568                                  	;test	byte [ss:PREREAD],0FFh
 32569                                  	;jnz	short getb20
 32570 00005895 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32571 0000589A 7549                    	JNZ	short getb20			; no, we're done
 32572                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32573                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32574 0000589C 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32575                                  	;MOV	CX,1
 32576                                  	; 22/09/2023
 32577 0000589F 29C9                    	sub	cx,cx ; 0
 32578 000058A1 56                      	push	si
 32579 000058A2 57                      	push	di
 32580 000058A3 52                      	push	dx
 32581                                  	; MSDOS 6.0
 32582 000058A4 06                      	push	es ; ***
 32583                                  
 32584                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32585                                  ;	this point. -mrw 10/88
 32586                                  	
 32587                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32588                                  	; 22/09/2023
 32589 000058A5 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32590 000058AA 7407                    	jz	short getb14
 32591 000058AC 1E                      	push	ds ; **
 32592 000058AD 53                      	push	bx ; *
 32593 000058AE 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32594                                  getb14:
 32595                                  ;M039: Eliminated redundant HMA code.
 32596                                  
 32597                                  	; 22/09/2023
 32598 000058B3 41                      	inc	cx ; cx = 1
 32599                                  
 32600                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32601 000058B4 09F6                    	OR	SI,SI			; FAT sector ?
 32602 000058B6 7407                    	JZ	short getb15		
 32603                                  
 32604 000058B8 E862DD                  	call	FATSECRD
 32605                                  	;mov	ah,2
 32606 000058BB B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32607                                  
 32608 000058BD EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32609                                  
 32610                                  getb15:
 32611 000058BF E887DD                  	call	DREAD			; Buffer is marked free if read barfs
 32612 000058C2 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32613                                  getb17:
 32614                                  	; 17/12/2022	
 32615                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32616                                  ;%if 0
 32617                                  	; MSDOS 6.0							  ;I001
 32618 000058C4 9C                      	pushf								  ;I001
 32619 000058C5 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32620 000058CB 7411                    	jz	short not_in_hma	; no				  ;I001
 32621                                  	;mov	cx,[es:bp+2]
 32622 000058CD 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32623 000058D1 D1E9                    	shr	cx,1							  ;I001
 32624 000058D3 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32625 000058D4 89DE                    	mov	si,bx							  ;I001
 32626 000058D6 5F                      	pop	di ; *							  ;I001
 32627 000058D7 07                      	pop	es ; **							  ;I001
 32628 000058D8 FC                      	cld								  ;I001
 32629 000058D9 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32630 000058DA F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32631 000058DC 06                      	push	es							  ;I001
 32632 000058DD 1F                      	pop	ds							  ;I001
 32633                                  ;%endif
 32634                                  
 32635                                  ; 17/12/2022
 32636                                  %if 0
 32637                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32638                                  	; MSDOS 5.0
 32639                                  	pushf
 32640                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32641                                  	jz	short not_in_hma	; no
 32642                                  	popf
 32643                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32644                                  	shr	cx,1
 32645                                  	mov	si,bx
 32646                                  	pop	di ; *
 32647                                  	pop	es ; **
 32648                                  	cld
 32649                                  	rep	movsw
 32650                                  	push	es
 32651                                  	pop	ds
 32652                                  	jmp	short getb19 ; 27/11/2022
 32653                                  %endif
 32654                                  
 32655                                  not_in_hma:								  ;I001
 32656 000058DE 9D                      	popf							 	  ;I001
 32657                                  getb19:
 32658 000058DF 07                      	pop	es ; ***
 32659 000058E0 5A                      	pop	dx
 32660 000058E1 5F                      	pop	di
 32661 000058E2 5E                      	pop	si
 32662 000058E3 7248                    	JC	short getbx
 32663                                  
 32664                                  ;	The buffer has the data setup in it (if we were to read)
 32665                                  ;	Setup the various buffer fields
 32666                                  ;
 32667                                  ;	(ds:di) = buffer address
 32668                                  ;	(es:bp) = DPB address
 32669                                  ;	(HIGH_SECTOR:DX) = sector #
 32670                                  ;	(ah) = BUF_FLAGS value
 32671                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32672                                  
 32673                                  ;hkn; SS override
 32674                                  getb20:	; MSDOS 6.0
 32675 000058E5 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32676                                  	;mov	[di+8],cx
 32677 000058EA 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32678                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32679                                   	;mov	[di+6],dx
 32680 000058ED 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32681                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32682                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32683 000058F0 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32684                                  	;;mov	[di+0Ch],es
 32685                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32686 000058F3 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32687                                  	; 15/12/2022
 32688 000058F6 268A4600                	mov	al,[es:bp]
 32689                                  	;mov	al,[es:bp+0]
 32690                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32691                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32692                                  	;mov	[di+4],ax
 32693 000058FA 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32694                                  getb25:	
 32695                                  	; MSDOS 3.3
 32696                                  	;mov     ax,1
 32697                                  
 32698                                  	; MSDOS 6.0
 32699                                  	;mov	byte [di+0Ah],1
 32700 000058FD C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32701 00005901 31C0                    	XOR	AX,AX
 32702                                  
 32703                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32704 00005903 09F6                    	OR	SI,SI				; FAT sector ?
 32705 00005905 740B                    	JZ	short getb30
 32706                                  
 32707                                  	;mov	al,[es:bp+8]
 32708 00005907 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32709                                  	
 32710                                  	; MSDOS 6.0
 32711 0000590B 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32712                                  	;mov	ax,[es:bp+0Fh]
 32713 0000590E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32714                                  						;  sectors
 32715                                  	; MSDOS 3.3
 32716                                  	;;mov	ah,[es:bp+0Fh]
 32717                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32718                                  
 32719                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32720                                  ;		is set
 32721                                  
 32722                                  getb30:	
 32723                                  	; MSDOS 6.0
 32724                                  	;mov	[di+0Bh],ax
 32725 00005912 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32726                                  
 32727                                  	; MSDOS 3.3
 32728                                  	;;mov	[di+8],ax ; 15/08/2018	
 32729                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32730                                  
 32731 00005915 E8BBFE                  	CALL	PLACEBUF
 32732                                  
 32733                                  ;hkn; SS override for next 4
 32734                                  getb35: 
 32735                                  	; 17/12/2022
 32736                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32737                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32738                                  	;MOV	[SS:CURBUF+2],DS
 32739                                  	;MOV	[SS:LastBuffer+2],DS
 32740                                  	;MOV	[SS:CURBUF],DI
 32741                                  	;MOV	[SS:LastBuffer],DI
 32742                                  	;CLC
 32743                                  
 32744                                  	; 17/12/2022
 32745                                  	; 07/12/2022
 32746                                  	; Retro DOS v4.0
 32747 00005918 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32748 0000591D 36893E[1E00]            	mov	[ss:LastBuffer],di
 32749 00005922 F8                      	clc
 32750                                  getb35x: ; 28/07/2019
 32751 00005923 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32752 00005928 36893E[E205]            	MOV	[ss:CURBUF],di
 32753                                  
 32754                                  ;	Return with 'C' set appropriately
 32755                                  ;	(dx) = caller's original value
 32756                                  
 32757                                  getbx:	
 32758 0000592D 16                      	push	ss
 32759 0000592E 1F                      	pop	ds
 32760                                  	;retn
 32761                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32762                                  getbuffrb_retn:
 32763                                  ;flushbuf_retn:	; 17/12/2022
 32764 0000592F C3                      	retn
 32765                                  
 32766                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32767                                  ;----------------------------------------------------------------------------
 32768                                  ; Input:
 32769                                  ;	DS = DOSGROUP
 32770                                  ;	AL = Physical unit number local buffers only
 32771                                  ;	   = -1 for all units and all remote buffers
 32772                                  ; Function:
 32773                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32774                                  ;	Carry set if error (user FAILed to I 24)
 32775                                  ;	    Flush operation completed.
 32776                                  ; DS Preserved, all others destroyed (ES too)
 32777                                  ;----------------------------------------------------------------------------
 32778                                  
 32779                                  	; 20/05/2019 - Retro DOS v4.0
 32780                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32781                                  
 32782                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32783                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32784                                  FLUSHBUF:
 32785                                  	; MSDOS 3.3
 32786                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32787                                  	;lds	di,[BUFFHEAD]
 32788                                  
 32789                                  	; MSDOS 6.0
 32790 00005930 E887FE                  	call	GETCURHEAD
 32791                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32792 00005933 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32793 00005939 7508                    	jnz	short scan_buf_queue
 32794 0000593B 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32795 00005941 7423                    	je	short end_scan
 32796                                  	
 32797                                  scan_buf_queue:
 32798 00005943 E82900                  	call	CHECKFLUSH
 32799                                  	;push	ax  ; MSDOS 3.3
 32800                                  	; MSDOS 6.0
 32801                                  	;mov	ah,[di+4]
 32802 00005946 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32803 00005949 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32804 0000594E 7408                    	je	short free_the_buf
 32805                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32806 00005950 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32807 00005956 7405                    	jz	short dont_free_the_buf
 32808                                  	; MSDOS 3.3
 32809                                  	;;mov	al,[di+4]
 32810                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32811                                  	;cmp	[SS:WPERR],al					;hkn;
 32812                                  	; 15/08/2018
 32813                                  	;jne	short dont_free_the_buf	
 32814                                  free_the_buf:
 32815                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32816 00005958 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32817                                  dont_free_the_buf:
 32818                                  	;pop	ax  ; MSDOS 3.3 	   	
 32819                                  
 32820                                  	; MSDOS 3.3
 32821                                  	;mov	di,[DI]
 32822                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32823                                  	;
 32824                                  	; 15/08/2018
 32825                                  	;lds	di,[di]
 32826                                  	;
 32827                                  	;cmp	di,-1 ; 0FFFFh
 32828                                  	;jnz	short scan_buf_queue 
 32829                                  	
 32830                                  	; MSDOS 6.0
 32831 0000595D 8B3D                    	mov	di,[di]
 32832                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32833 0000595F 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32834 00005964 75DD                    	jne	short scan_buf_queue
 32835                                  
 32836                                  end_scan:
 32837 00005966 16                      	push	ss
 32838 00005967 1F                      	pop	ds
 32839                                  	; 01/08/2018 - Retro DOS v3.0
 32840                                  	;cmp	byte [FAILERR],0
 32841                                  	;jne	short bad_flush
 32842                                  	;retn
 32843                                  ;bad_flush:
 32844                                  	;stc
 32845                                  	;retn
 32846                                  
 32847                                  	; 17/12/2022
 32848                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32849                                  	; 01/08/2018 - Retro DOS v3.0
 32850 00005968 803E[4A03]01            	cmp	byte [FAILERR],1
 32851 0000596D F5                      	cmc
 32852                                  flushbuf_retn:
 32853 0000596E C3                      	retn
 32854                                  	
 32855                                  	; 17/12/2022
 32856                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32857                                  	;cmp	byte [FAILERR],0
 32858                                  	;jne	short bad_flush
 32859                                  	;retn
 32860                                  ;bad_flush:
 32861                                  	;stc
 32862                                  	;retn
 32863                                  
 32864                                  ;----------------------------------------------------------------------------
 32865                                  ;
 32866                                  ; Procedure Name : CHECKFLUSH
 32867                                  ;
 32868                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32869                                  ;	   DS:DI - pointer to buffer
 32870                                  ;
 32871                                  ; Function : Write out a buffer if it is dirty
 32872                                  ;
 32873                                  ; Carry set if problem (currently user FAILed to I 24)
 32874                                  ;
 32875                                  ;----------------------------------------------------------------------------
 32876                                  
 32877                                  CHECKFLUSH:
 32878                                  	; MSDOS 6.0
 32879 0000596F B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 32880                                  	;cmp	[di+4],ah
 32881 00005971 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32882 00005974 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32883 00005976 38C4                    	CMP	AH,AL			; 
 32884 00005978 7406                    	JZ	short DOBUFFER		; do this buffer
 32885                                  	;cmp	al,[di+4]
 32886 0000597A 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32887 0000597D F8                      	CLC
 32888 0000597E 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32889                                  DOBUFFER:
 32890                                  	;test	byte [di+5],40h
 32891 00005980 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32892 00005984 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32893 00005986 50                      	PUSH	AX
 32894                                  	;push	word [di+4]
 32895 00005987 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32896 0000598A E80B00                  	CALL	BUFWRITE
 32897 0000598D 58                      	POP	AX
 32898 0000598E 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32899                                  	;and	ah,0BFh
 32900 00005990 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32901                                  	;mov	[di+4],ax
 32902 00005993 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32903                                  LEAVE_BUF:
 32904 00005996 58                      	POP	AX			; Search info
 32905                                  checkflush_retn:
 32906 00005997 C3                      	retn
 32907                                  
 32908                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32909                                  ;----------------------------------------------------------------------------
 32910                                  ;
 32911                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32912                                  ;
 32913                                  ;	ENTRY	DS:DI Points to the buffer
 32914                                  ;
 32915                                  ;	EXIT	Buffer marked free
 32916                                  ;		Carry set if error (currently user FAILed to I 24)
 32917                                  ;
 32918                                  ;	USES	All buf DS:DI
 32919                                  ;		HIGH_SECTOR
 32920                                  ;----------------------------------------------------------------------------
 32921                                  
 32922                                  	; 20/05/2019 - Retro DOS v4.0
 32923                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32924                                  
 32925                                  
 32926                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32927                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32928                                  
 32929                                  BUFWRITE:
 32930                                  	; 10/09/2018
 32931                                  	; 01/08/2018 - Retro DOS v3.0
 32932                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32933 00005998 B8FF00                  	MOV	AX,00FFH
 32934                                  	;xchg	ax,[di+4]
 32935 0000599B 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32936 0000599E 3CFF                    	CMP	AL,0FFH
 32937 000059A0 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32938                                  	;test	ah,40h
 32939 000059A2 F6C440                  	test	AH,buf_dirty
 32940 000059A5 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32941                                  	; MSDOS 6.0
 32942 000059A7 E88E00                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32943                                  
 32944                                  ;hkn; SS override
 32945 000059AA 363A06[2203]            	CMP	AL,[SS:WPERR]
 32946 000059AF 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32947                                  
 32948                                  ;hkn; SS override
 32949                                  	; MSDOS 6.0
 32950 000059B1 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32951                                  	
 32952                                  	; 07/03/2024
 32953                                  	;;;les	bp,[di+10] ; MSDOS 3.3
 32954                                  	;;les	bp,[di+13] ; MSDOS 6.0
 32955                                  	;LES	BP,[DI+BUFFINFO.buf_DPB]
 32956                                  
 32957                                  	;;lea	bx,[di+16]
 32958                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32959 000059B5 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32960                                  
 32961                                  ; 07/03/2024
 32962                                  %if 0
 32963                                  	;mov	dx,[di+6]
 32964                                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32965                                  	
 32966                                  	; MSDOS 6.0
 32967                                  	;mov	cx,[di+8]
 32968                                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32969                                  
 32970                                  ;hkn; SS override
 32971                                  	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32972                                  %else
 32973                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 32974                                  	;;;
 32975                                  	;les	dx,[di+6]
 32976 000059B8 C45506                  	les	dx,[di+BUFFINFO.buf_sector]
 32977 000059BB 368C06[0706]            	mov	[ss:HIGH_SECTOR],es
 32978                                  
 32979                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32980                                  	;les	bp,[di+13] ; MSDOS 6.0
 32981 000059C0 C46D0D                  	les	bp,[di+BUFFINFO.buf_DPB]
 32982                                  	;;;
 32983                                  %endif
 32984                                  
 32985 000059C3 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32986                                  	; MSDOS 3.3
 32987                                  	;;mov	cx,[DI+8]
 32988                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32989                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32990 000059C6 30ED                    	XOR	CH,CH
 32991                                  	;;mov	ah,ch ; MSDOS 3.3
 32992                                  
 32993                                  ;hkn; SS override for ALLOWED
 32994                                  	;mov	byte [SS:ALLOWED],18h
 32995 000059C8 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32996                                  	;test	byte [di+5],8
 32997                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32998                                  	;test	ah,8
 32999 000059CE F6C408                  	test	AH,buf_isDATA
 33000 000059D1 7406                    	JZ	short NO_IGNORE
 33001                                  	;or	byte [SS:ALLOWED],20h
 33002 000059D3 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 33003                                  NO_IGNORE:
 33004                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 33005                                  	; MSDOS 6.0
 33006                                  	;mov	ax,[di+11]
 33007 000059D9 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 33008                                  
 33009 000059DC 57                      	PUSH	DI		; Save buffer pointer
 33010 000059DD 31FF                    	XOR	DI,DI		; Indicate failure
 33011                                  
 33012 000059DF 1E                      	push	ds ; *
 33013 000059E0 53                      	push	bx ; **
 33014                                  WRTAGAIN:
 33015 000059E1 57                      	push	di ; ***
 33016 000059E2 51                      	push	cx ; ****
 33017 000059E3 50                      	push	ax ; *****
 33018                                  	;MOV	CX,1
 33019                                  	; 17/12/2022
 33020                                  	; ch = 0
 33021 000059E4 B101                    	mov	cl,1 ; 24/07/2019
 33022                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33023                                  	;mov	cx,1
 33024 000059E6 53                      	push	bx ; ******
 33025 000059E7 52                      	push	dx ; *******
 33026 000059E8 1E                      	push	ds ; ********
 33027                                  
 33028                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 33029                                  
 33030                                  	; MSDOS 6.0
 33031                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 33032                                  	; 22/09/2023
 33033 000059E9 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 33034 000059EE 7418                    	jz	short NBUFFINHMA
 33035 000059F0 51                      	push	cx
 33036 000059F1 06                      	push	es
 33037 000059F2 89DE                    	mov	si,bx
 33038 000059F4 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 33039 000059F8 D1E9                    	shr	cx,1
 33040 000059FA 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 33041 000059FF 89FB                    	mov	bx,di
 33042 00005A01 FC                      	cld
 33043 00005A02 F3A5                    	rep	movsw
 33044 00005A04 06                      	push	es
 33045 00005A05 1F                      	pop	ds
 33046 00005A06 07                      	pop	es
 33047 00005A07 59                      	pop	cx
 33048                                  NBUFFINHMA:
 33049 00005A08 E89EDC                  	call	DWRITE		; Write out the dirty buffer
 33050 00005A0B 1F                      	pop	ds ; ********
 33051 00005A0C 5A                      	pop	dx ; *******
 33052 00005A0D 5B                      	pop	bx ; ******
 33053 00005A0E 58                      	pop	ax ; *****
 33054 00005A0F 59                      	pop	cx ; ****
 33055 00005A10 5F                      	pop	di ; ***
 33056 00005A11 7201                    	JC	short NOSET
 33057 00005A13 47                      	INC	DI		; If at least ONE write succeedes, the operation
 33058                                  NOSET:				;	succeedes.
 33059 00005A14 01C2                    	ADD	DX,AX
 33060 00005A16 E2C9                    	LOOP	WRTAGAIN
 33061 00005A18 5B                      	pop	bx ; **
 33062 00005A19 1F                      	pop	ds ; *
 33063                                  	;OR	DI,DI		; Clears carry
 33064                                  	;JNZ	short BWROK	; At least one write worked
 33065                                  	;STC			; DI never got INCed, all writes failed.
 33066                                  	; 22/09/2023
 33067 00005A1A 83FF01                  	cmp	di,1
 33068                                  BWROK:	
 33069 00005A1D 5F                      	POP	DI
 33070 00005A1E C3                      	retn
 33071                                  
 33072                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 33073                                  ;----------------------------------------------------------------------------
 33074                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 33075                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 33076                                  ;	SC_DRIVE even if SC is disabled to save the testing
 33077                                  ;	code and time
 33078                                  ;
 33079                                  ;	ENTRY	ES:BP = drive parameter block
 33080                                  ;
 33081                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 33082                                  ;		[SC_DRIVE]= drive #
 33083                                  ;
 33084                                  ;	USES	Flags
 33085                                  ;----------------------------------------------------------------------------
 33086                                  
 33087                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33088                                  ; 04/05/2019 - Retro DOS v4.0
 33089                                  
 33090                                  SET_RQ_SC_PARMS:
 33091                                  ;hkn; SS override for all variables used in this procedure.
 33092 00005A1F 50                      	push	ax
 33093                                  	;mov	ax,[es:bp+2]
 33094 00005A20 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 33095 00005A24 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 33096                                  	;;mov	al,[es:bp+0]
 33097                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33098                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 33099                                  	; 15/12/2022
 33100 00005A28 268A4600                	mov	al,[ES:BP]
 33101 00005A2C 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 33102 00005A30 58                      	pop	ax
 33103                                  srspx:	
 33104 00005A31 C3                      	retn					;LB. return
 33105                                  
 33106                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 33107                                  ;----------------------------------------------------------------------------
 33108                                  ; Input:
 33109                                  ;	none
 33110                                  ; Function:
 33111                                  ;	increment dirty buffers count
 33112                                  ; Output:
 33113                                  ;	dirty buffers count is incremented
 33114                                  ;
 33115                                  ; All registers preserved
 33116                                  ;----------------------------------------------------------------------------
 33117                                  
 33118                                  INC_DIRTY_COUNT:
 33119                                  ;; BUGBUG  ---- remove this routine
 33120                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 33121 00005A32 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 33122 00005A37 C3                      	retn
 33123                                  
 33124                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 33125                                  ;----------------------------------------------------------------------------
 33126                                  ; Input:
 33127                                  ;	none
 33128                                  ; Function:
 33129                                  ;	decrement dirty buffers count
 33130                                  ; Output:
 33131                                  ;	dirty buffers count is decremented
 33132                                  ;
 33133                                  ; All registers preserved
 33134                                  ;----------------------------------------------------------------------------
 33135                                  
 33136                                  DEC_DIRTY_COUNT:
 33137 00005A38 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 33138 00005A3E 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 33139 00005A40 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 33140                                  					; error condition to underflow here? ;hkn;
 33141                                  ddcx:	
 33142 00005A45 C3                      	retn
 33143                                  
 33144                                  ;============================================================================
 33145                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 33146                                  ;============================================================================
 33147                                  ; 02/08/2018 - Retro DOS v3.0
 33148                                  ; 29/04/2019 - Retro DOS v4.0
 33149                                  
 33150                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 33151                                  
 33152                                  ; Pseudo EXEC system call for DOS
 33153                                  
 33154                                  ;	TITLE	MSPROC - process maintenance
 33155                                  ;	NAME	MSPROC
 33156                                  
 33157                                  ; =========================================================================
 33158                                  ;**	Process related system calls and low level routines for DOS 2.X.
 33159                                  ;	I/O specs are defined in DISPATCH.
 33160                                  ;
 33161                                  ;	$WAIT
 33162                                  ;	$EXEC
 33163                                  ;	$Keep_process
 33164                                  ;	Stay_resident
 33165                                  ;	$EXIT
 33166                                  ;	$ABORT
 33167                                  ;	abort_inner
 33168                                  ;
 33169                                  ;	Modification history:
 33170                                  ;
 33171                                  ;		Created: ARR 30 March 1983
 33172                                  ;		AN000	version 4.0 jan. 1988
 33173                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 33174                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 33175                                  ;
 33176                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33177                                  ;
 33178                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33179                                  ;		       dossym.inc. 7/30/90
 33180                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33181                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33182                                  ;		       stack is provided at the end of the program. Note that
 33183                                  ;		       only SP is changed.
 33184                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33185                                  ;
 33186                                  ;		M028 - 4b04 implementation
 33187                                  ;
 33188                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33189                                  ;			in memory block >= 64K, sp = 0. If memory block
 33190                                  ;			obtained is <64K, point sp at the end of the memory
 33191                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33192                                  ;			added for a stack segment which may be needed if it
 33193                                  ;			is loaded in low memory situations.
 33194                                  ;
 33195                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33196                                  ;
 33197                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33198                                  ;			a bad environment if it reached 32767 bytes. Changed
 33199                                  ;			to allow 32768 bytes of environment.
 33200                                  ;
 33201                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33202                                  ;		       COM file high. Also ensure that if the biggest block
 33203                                  ;		       into which we load the com file is less than 64K then
 33204                                  ;		       we provide atleast 256 bytes of stack to the user.
 33205                                  ;
 33206                                  ;		M050 - Made Lie table search CASE insensitive
 33207                                  ;
 33208                                  ;		M060 - Removed special version table from the kernal and
 33209                                  ;                      put it in a device drive which puts the address
 33210                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33211                                  ;		       as a DWORD.
 33212                                  ;
 33213                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33214                                  ;		       entry do not try to load low if there is no space in
 33215                                  ;		       UMBs.
 33216                                  ;
 33217                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33218                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33219                                  ;		       change return address to LeaveDos if AL=5.
 33220                                  ;
 33221                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33222                                  ;                      controls building a version of MSDOS.SYS that only
 33223                                  ;                      runs programs from a fixed list (defined in the
 33224                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33225                                  ;                      for details.  This feature is used to build a
 33226                                  ;                      "special" version of DOS that can be handed out to
 33227                                  ;                      OEM/ISV customers as part of a "service" disk.
 33228                                  ;
 33229                                  ; =========================================================================
 33230                                  
 33231                                  ;SAVEXIT  EQU  10
 33232                                  
 33233                                  ;BREAK	<$WAIT - return previous process error code>
 33234                                  ; =========================================================================
 33235                                  ;	$WAIT - Return previous process error code.
 33236                                  ;
 33237                                  ;	Assembler usage:
 33238                                  ;
 33239                                  ;	    MOV     AH, WaitProcess
 33240                                  ;	    INT     int_command
 33241                                  ;
 33242                                  ;	ENTRY	none
 33243                                  ;	EXIT	(ax) = exit code
 33244                                  ;	USES	all
 33245                                  ; =========================================================================
 33246                                  
 33247                                  	; 20/05/2019 - Retro DOS v4.0
 33248                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33249                                  
 33250                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33251                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33252                                  _$WAIT:
 33253                                  	; 02/08/2018 - Retro DOS v3.0
 33254                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33255                                  
 33256 00005A46 31C0                    	xor	AX,AX
 33257 00005A48 368706[3403]            	xchg	AX,[ss:exit_code]
 33258 00005A4D E9E5AB                  	jmp	SYS_RET_OK
 33259                                  
 33260                                  ; =========================================================================
 33261                                  ;BREAK <$exec - load/go a program>
 33262                                  ;	EXEC.ASM - EXEC System Call
 33263                                  ;
 33264                                  ;
 33265                                  ; Assembler usage:
 33266                                  ;	    lds     DX, Name
 33267                                  ;	    les     BX, Blk
 33268                                  ;	    mov     AH, Exec
 33269                                  ;	    mov     AL, FUNC
 33270                                  ;	    int     INT_COMMAND
 33271                                  ;
 33272                                  ;	AL  Function
 33273                                  ;	--  --------
 33274                                  ;	 0  Load and execute the program.
 33275                                  ;	 1  Load, create the program header but do not
 33276                                  ;	    begin execution.
 33277                                  ;	 3  Load overlay. No header created.
 33278                                  ;
 33279                                  ;	    AL = 0 -> load/execute program
 33280                                  ;
 33281                                  ;	    +---------------------------+
 33282                                  ;	    | WORD segment address of	|
 33283                                  ;	    | environment.		|
 33284                                  ;	    +---------------------------+
 33285                                  ;	    | DWORD pointer to ASCIZ	|
 33286                                  ;	    | command line at 80h	|
 33287                                  ;	    +---------------------------+
 33288                                  ;	    | DWORD pointer to default	|
 33289                                  ;	    | FCB to be passed at 5Ch	|
 33290                                  ;	    +---------------------------+
 33291                                  ;	    | DWORD pointer to default	|
 33292                                  ;	    | FCB to be passed at 6Ch	|
 33293                                  ;	    +---------------------------+
 33294                                  ;
 33295                                  ;	    AL = 1 -> load program
 33296                                  ;
 33297                                  ;	    +---------------------------+
 33298                                  ;	    | WORD segment address of	|
 33299                                  ;	    | environment.		|
 33300                                  ;	    +---------------------------+
 33301                                  ;	    | DWORD pointer to ASCIZ	|
 33302                                  ;	    | command line at 80h	|
 33303                                  ;	    +---------------------------+
 33304                                  ;	    | DWORD pointer to default	|
 33305                                  ;	    | FCB to be passed at 5Ch	|
 33306                                  ;	    +---------------------------+
 33307                                  ;	    | DWORD pointer to default	|
 33308                                  ;	    | FCB to be passed at 6Ch	|
 33309                                  ;	    +---------------------------+
 33310                                  ;	    | DWORD returned value of	|
 33311                                  ;	    | CS:IP			|
 33312                                  ;	    +---------------------------+
 33313                                  ;	    | DWORD returned value of	|
 33314                                  ;	    | SS:IP			|
 33315                                  ;	    +---------------------------+
 33316                                  ;
 33317                                  ;	    AL = 3 -> load overlay
 33318                                  ;
 33319                                  ;	    +---------------------------+
 33320                                  ;	    | WORD segment address where|
 33321                                  ;	    | file will be loaded.	|
 33322                                  ;	    +---------------------------+
 33323                                  ;	    | WORD relocation factor to |
 33324                                  ;	    | be applied to the image.	|
 33325                                  ;	    +---------------------------+
 33326                                  ;
 33327                                  ; Returns:
 33328                                  ;	    AX = error_invalid_function
 33329                                  ;	       = error_bad_format
 33330                                  ;	       = error_bad_environment
 33331                                  ;	       = error_not_enough_memory
 33332                                  ;	       = error_file_not_found
 33333                                  ; =========================================================================
 33334                                  ;
 33335                                  ;   Revision history:
 33336                                  ;
 33337                                  ;	 A000	version 4.00  Jan. 1988
 33338                                  ;
 33339                                  ; =========================================================================
 33340                                  
 33341                                  Exec_Internal_Buffer		EQU	OPENBUF
 33342                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33343                                  
 33344                                  ; =========================================================================
 33345                                  
 33346                                  ;IF1		; warning message on buffers
 33347                                  ;%out	Please make sure that the following are contiguous and of the
 33348                                  ;%out	following sizes:
 33349                                  ;%out
 33350                                  ;%out	OpenBuf     128
 33351                                  ;%out	RenBuf	    128
 33352                                  ;%out	SearchBuf    53
 33353                                  ;%out	DummyCDS    curdirLen
 33354                                  ;ENDIF
 33355                                  
 33356                                  ; =========================================================================
 33357                                  
 33358                                  ; =========================================================================
 33359                                  ;
 33360                                  ; =========================================================================
 33361                                  
 33362                                  	; 20/05/2019 - Retro DOS v4.0
 33363                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33364                                  
 33365                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33366                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33367                                  	
 33368                                  _$EXEC:
 33369                                  	; 02/08/2018 - Retro DOS v3.0
 33370                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33371                                  
 33372                                  EXEC001S:
 33373                                  	;LocalVar    Exec_Blk		,DWORD
 33374                                  	;LocalVar    Exec_Func		,BYTE
 33375                                  	;LocalVar    Exec_Load_High	,BYTE
 33376                                  	;LocalVar    Exec_FH		,WORD
 33377                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33378                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33379                                  	;LocalVar    Exec_Environ	,WORD
 33380                                  	;LocalVar    Exec_Size		,WORD
 33381                                  	;LocalVar    Exec_Load_Block	,WORD
 33382                                  	;LocalVar    Exec_DMA		,WORD
 33383                                  	;LocalVar    ExecNameLen 	,WORD
 33384                                  	;LocalVar    ExecName		,DWORD
 33385                                  	;
 33386                                  	;LocalVar    Exec_DMA_Save	,WORD
 33387                                  	;LocalVar    Exec_NoStack	,BYTE
 33388                                  
 33389                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33390                                  	;%define	Exec_Blk	dword [bp-4]
 33391                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33392                                  	%define		Exec_BlkL	word [bp-4]	
 33393                                  	%define		Exec_BlkH	word [bp-2]
 33394                                  	%define		Exec_Func	byte [bp-5]
 33395                                  	%define		Exec_Load_High	byte [bp-6]
 33396                                  	%define		Exec_FH		word [bp-8]
 33397                                  	%define		Exec_Rel_Fac	word [bp-10]
 33398                                  	%define		Exec_Res_Len_Para word [bp-12]
 33399                                  	%define		Exec_Environ	word [bp-14]
 33400                                  	%define		Exec_Size	word [bp-16]
 33401                                  	%define		Exec_Load_Block	word [bp-18]
 33402                                  	%define		Exec_DMA	word [bp-20]
 33403                                  	%define		ExecNameLen	word [bp-22]
 33404                                  	;%define	ExecName	dword [bp-26]
 33405                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33406                                  	%define		ExecNameL	word [bp-26]	
 33407                                  	%define		ExecNameH	word [bp-24]
 33408                                  	; MSDOS 6.0
 33409                                  	%define		Exec_DMA_Save	word [bp-28]
 33410                                  	%define		Exec_NoStack	byte [bp-29]
 33411                                  	
 33412                                  	; ==================================================================
 33413                                  	; validate function
 33414                                  	; ==================================================================
 33415                                  		      	
 33416                                  	; M068 - Start
 33417                                  	;
 33418                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33419                                  	; possibility that the count may not be decremented all the way to
 33420                                  	; 0. A typical case is if the program for which we intended to keep 
 33421                                  	; the A20 off for a sufficiently long time (A20OFF_COUNT int 21 
 33422                                  	; calls), exits pre-maturely due to error conditions.
 33423                                  
 33424                                  	; MSDOS 6.0
 33425 00005A50 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33426                                  
 33427                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33428                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33429                                  	; bit set in DOS_FLAG by ExecReady is not cleared in msdisp.asm
 33430                                  
 33431 00005A56 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33432                                  	;jne	short @f
 33433 00005A58 7505                    	jne	short Exec_@f		; N: continue
 33434                                  					; Y: change ret addr. to LeaveDos.
 33435 00005A5A 59                      	pop	cx			; Note CX is not input to ExecReady
 33436 00005A5B B9[0804]                	mov	cx,LeaveDOS
 33437 00005A5E 51                      	push	cx
 33438                                  ;@@:
 33439                                  Exec_@f:
 33440                                  	; M068 - End
 33441                                  	
 33442                                  	;Enter
 33443                                  
 33444 00005A5F 55                      	push	bp
 33445 00005A60 89E5                    	mov	bp,sp
 33446                                  	;;sub	sp,26	; MSDOS 3.3
 33447                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33448                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33449                                  	; 17/12/2022
 33450                                  	; 20/05/2019
 33451 00005A62 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33452                                  
 33453                                  	; MSDOS 6.0
 33454 00005A65 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33455                                  					; M030
 33456 00005A67 7614                    	jna	short Exec_Check_2
 33457                                  
 33458                                  	; MSDOS 3.3
 33459                                  	;cmp	AL,3
 33460                                  	;jna	short Exec_Check_2
 33461                                  
 33462                                  Exec_Bad_Fun:
 33463 00005A69 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33464                                  					; Extended Error Locus	;smr;SS Override
 33465                                  	;mov	al,1
 33466 00005A6F B001                    	mov	al,error_invalid_function
 33467                                  
 33468                                  Exec_Ret_Err:
 33469                                  	;Leave
 33470 00005A71 89EC                    	mov	sp,bp
 33471 00005A73 5D                      	pop	bp
 33472                                  	;transfer SYS_RET_ERR
 33473 00005A74 E9C7AB                  	jmp	SYS_RET_ERR
 33474                                  
 33475                                  	; MSDOS 6.0
 33476                                  ExecReadyJ:
 33477 00005A77 E89C17                  	call	ExecReady		; M028
 33478 00005A7A E90204                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33479                                  
 33480                                  Exec_Check_2:
 33481 00005A7D 3C02                    	cmp	AL,2			
 33482 00005A7F 74E8                    	je	short Exec_Bad_Fun
 33483                                  
 33484                                  	; MSDOS 6.0
 33485 00005A81 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33486 00005A83 74E4                    	je	short Exec_Bad_Fun
 33487                                  	
 33488 00005A85 3C05                    	cmp	al,5			; M028 ; M030
 33489 00005A87 74EE                    	je	short ExecReadyJ	; M028
 33490                                  
 33491                                  	;mov	[bp-4],bx
 33492 00005A89 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33493                                  	;mov	[bp-2],es
 33494 00005A8C 8C46FE                  	mov	Exec_BlkH,ES
 33495                                  	;mov	[bp-5],al
 33496 00005A8F 8846FB                  	mov	Exec_Func,AL
 33497                                  	;mov	byte [bp-6],0
 33498 00005A92 C646FA00                	mov	Exec_Load_High,0
 33499                                  
 33500                                  	;mov	[bp-26],dx
 33501 00005A96 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33502                                  	;mov	[bp-24],ds
 33503 00005A99 8C5EE8                  	mov	ExecNameH,DS
 33504 00005A9C 89D6                    	mov	SI,DX			; move pointer to convenient place
 33505                                  	;invoke	DStrLen
 33506 00005A9E E83DB7                  	call	DStrLen
 33507                                  	;mov	[bp-22],cx
 33508 00005AA1 894EEA                  	mov	ExecNameLen,CX		; save length
 33509                                  
 33510                                  	; MSDOS 6.0
 33511 00005AA4 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33512 00005AA8 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33513                                  
 33514 00005AAC 30C0                    	xor	AL,AL			; open for reading
 33515 00005AAE 55                      	push	BP
 33516                                  
 33517                                  	; MSDOS 6.0
 33518                                  	;or	byte [ss:DOS_FLAG],1
 33519 00005AAF 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33520                                  					; the redir that this open call is
 33521                                  					; due to an exec.
 33522                                  
 33523                                  	;invoke	$OPEN			; is the file there?
 33524 00005AB5 E8E212                  	call	_$OPEN
 33525                                  
 33526                                  	; MSDOS 6.0
 33527 00005AB8 9C                      	pushf
 33528                                  	; 02/06/2019
 33529                                  	;and	byte [ss:DOS_FLAG],0FEh
 33530 00005AB9 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33531 00005ABF 9D                      	popf
 33532                                  
 33533 00005AC0 5D                      	pop	BP
 33534                                  
 33535                                  	; MSDOS 3.3 & MSDOS 6.0
 33536 00005AC1 72AE                    	jc	short Exec_Ret_Err
 33537                                  
 33538                                  	;mov	[bp-8],ax
 33539 00005AC3 8946F8                  	mov	Exec_FH,AX
 33540 00005AC6 89C3                    	mov	BX,AX
 33541 00005AC8 30C0                    	xor	AL,AL
 33542                                  	;invoke	$Ioctl
 33543 00005ACA E850C7                  	call	_$IOCTL
 33544 00005ACD 7207                    	jc	short Exec_BombJ
 33545                                  
 33546                                  	;test	dl,80h
 33547 00005ACF F6C280                  	test	DL,devid_ISDEV
 33548 00005AD2 740A                    	jz	short Exec_Check_Environ
 33549                                  
 33550                                  	;mov	al,2
 33551 00005AD4 B002                    	mov	AL,error_file_not_found
 33552                                  Exec_BombJ:
 33553 00005AD6 E9C800                  	jmp	Exec_Bomb
 33554                                  
 33555                                  BadEnv:
 33556                                  	;mov	al,0Ah
 33557 00005AD9 B00A                    	mov	AL,error_bad_environment
 33558 00005ADB E9C300                  	jmp	Exec_Bomb
 33559                                  
 33560                                  Exec_Check_Environ:
 33561                                  	;mov	word [bp-18],0
 33562 00005ADE C746EE0000              	mov	Exec_Load_Block,0
 33563                                  	;mov	word [bp-14],0
 33564 00005AE3 C746F20000              	mov	Exec_Environ,0
 33565                                  					; overlays... no environment
 33566                                  	;test	byte [bp-5],2
 33567 00005AE8 F646FB02                	test	Exec_Func,exec_func_overlay
 33568 00005AEC 7552                    	jnz	short Exec_Read_Header
 33569                                  
 33570                                  	;lds	si,[bp-4]
 33571 00005AEE C576FC                  	lds	SI,Exec_Blk		; get block
 33572 00005AF1 8B04                    	mov	ax,[SI]
 33573                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33574 00005AF3 09C0                    	or	AX,AX
 33575 00005AF5 750C                    	jnz	short Exec_Scan_Env
 33576                                  
 33577 00005AF7 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33578                                  	;mov	ax,[44]
 33579 00005AFC A12C00                  	mov	AX,[PDB.ENVIRON]
 33580                                  
 33581                                  ; MSDOS 6.0
 33582                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33583                                  ;
 33584                                  ; Exec_environ is being correctly initialized after the environment has been
 33585                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33586                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33587                                  ; parent's environment.
 33588                                  ;	mov	Exec_Environ,AX
 33589                                  ;
 33590                                  ;----------------------------------------------------------------------------
 33591                                  
 33592                                  	;mov	[bp-14],ax
 33593                                  	;mov	Exec_Environ,ax
 33594                                  
 33595 00005AFF 09C0                    	or	AX,AX
 33596 00005B01 743D                    	jz	short Exec_Read_Header
 33597                                  
 33598                                  Exec_Scan_Env:
 33599 00005B03 8EC0                    	mov	ES,AX
 33600 00005B05 31FF                    	xor	DI,DI
 33601                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33602 00005B07 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33603 00005B0A 30C0                    	xor	AL,AL
 33604                                  
 33605                                  Exec_Get_Environ_Len:
 33606 00005B0C F2AE                    	repnz	scasb			; find that nul byte
 33607 00005B0E 75C9                    	jnz	short BadEnv
 33608                                  
 33609 00005B10 49                      	dec	CX			; Dec CX for the next nul byte test
 33610 00005B11 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33611                                  
 33612 00005B13 AE                      	scasb				; is there another nul byte?
 33613 00005B14 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33614                                  
 33615 00005B16 57                      	push	DI
 33616                                  	;lea	bx,[DI+11h]
 33617 00005B17 8D5D11                  	lea	BX,[DI+0Fh+2]
 33618                                  	;add	bx,[bp-22]
 33619 00005B1A 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33620                                  					; remember argv[0] length
 33621                                  					; round up and remember argc
 33622 00005B1D B104                    	mov	CL,4
 33623 00005B1F D3EB                    	shr	BX,CL			; number of paragraphs needed
 33624 00005B21 06                      	push	ES
 33625                                  	;invoke	$Alloc			; can we get the space?
 33626 00005B22 E83706                  	call	_$ALLOC
 33627 00005B25 1F                      	pop	DS
 33628 00005B26 59                      	pop	CX
 33629                                  
 33630                                  	;jnc	short Exec_Save_Environ
 33631                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33632                                  	; 17/12/2022
 33633 00005B27 7272                    	jc	short Exec_No_Mem ; 02/06/2019
 33634                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33635                                  	;jnc	short Exec_Save_Environ
 33636                                  	;jmp	SHORT Exec_No_Mem
 33637                                  
 33638                                  Exec_Save_Environ:
 33639 00005B29 8EC0                    	mov	ES,AX
 33640                                  	;mov	[bp-14],ax
 33641 00005B2B 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33642 00005B2E 31F6                    	xor	SI,SI
 33643 00005B30 89F7                    	mov	DI,SI
 33644 00005B32 F3A4                    	rep	movsb			; copy the environment
 33645 00005B34 B80100                  	mov	AX,1
 33646 00005B37 AB                      	stosw
 33647                                  	;lds	si,[bp-26]
 33648 00005B38 C576E6                  	lds	SI,ExecName
 33649                                  	;mov	cx,[bp-22]
 33650 00005B3B 8B4EEA                  	mov	CX,ExecNameLen
 33651 00005B3E F3A4                    	rep	movsb
 33652                                  
 33653                                  Exec_Read_Header:
 33654                                  	; We read in the program header into the above data area and
 33655                                  	; determine where in this memory the image will be located.
 33656                                  
 33657                                  	;Context DS
 33658 00005B40 16                      	push	ss
 33659 00005B41 1F                      	pop	ds
 33660                                  	;mov	cx,26
 33661 00005B42 B91A00                  	mov	CX,exec_header_len	; header size
 33662 00005B45 BA[C80F]                	mov	DX,exec_signature
 33663 00005B48 06                      	push	ES
 33664 00005B49 1E                      	push	DS
 33665 00005B4A E87704                  	call	ExecRead
 33666 00005B4D 1F                      	pop	DS
 33667 00005B4E 07                      	pop	ES
 33668 00005B4F 724E                    	jc	short Exec_Bad_File
 33669                                  
 33670 00005B51 09C0                    	or	AX,AX
 33671 00005B53 744A                    	jz	short Exec_Bad_File
 33672                                  	;cmp	ax,26
 33673 00005B55 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33674 00005B58 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33675                                  
 33676 00005B5A F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33677 00005B60 7504                    	jnz	short Exec_Check_Sig
 33678                                  
 33679                                  	;mov	byte [bp-6],0FFh
 33680 00005B62 C646FAFF                	mov	Exec_Load_High,-1
 33681                                  
 33682                                  Exec_Check_Sig:
 33683 00005B66 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33684                                  	;cmp	ax,5A4Dh ; 'MZ'
 33685 00005B69 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33686 00005B6C 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33687                                  
 33688                                  	;cmp	ax,4D5Ah ; 'ZM'
 33689 00005B6E 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33690 00005B71 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33691                                  
 33692                                  Exec_Com_Filej:
 33693 00005B73 E9E701                  	jmp	Exec_Com_File
 33694                                  
 33695                                  	; We have the program header... determine memory requirements
 33696                                  
 33697                                  Exec_Save_Start:
 33698 00005B76 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33699 00005B79 B105                    	mov	CL,5			; convert to paragraphs
 33700 00005B7B D3E0                    	shl	AX,CL
 33701 00005B7D 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33702                                  	;mov	[bp-12],ax
 33703 00005B81 8946F4                  	mov	Exec_Res_Len_Para,AX
 33704                                  
 33705                                  		; Do we need to allocate memory?
 33706                                  		; Yes if function is not load-overlay
 33707                                  
 33708                                  	;test	byte [bp-5],2
 33709 00005B84 F646FB02                	test	Exec_Func,exec_func_overlay
 33710 00005B88 7443                    	jz	short Exec_Allocate	; allocation of space
 33711                                  
 33712                                  		; get load address from block
 33713                                  
 33714                                  	;les	di,[bp-4]
 33715 00005B8A C47EFC                  	les	DI,Exec_Blk
 33716                                  
 33717                                  ; 07/03/2024
 33718                                  %if 0
 33719                                  	mov	ax,[es:di]
 33720                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33721                                  	;mov	[bp-20],ax
 33722                                  	mov	Exec_DMA,AX
 33723                                  
 33724                                  	; 17/12/2022
 33725                                  	;;mov	ax,[es:di+2]
 33726                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33727                                  	;;mov	[bp-10],ax
 33728                                  	;mov	Exec_Rel_Fac,AX
 33729                                  
 33730                                  	; 17/12/2022
 33731                                  	; 30/11/2022 (!most proper code!)
 33732                                  	;mov	dx,[es:di+2]
 33733                                  	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33734                                  	;mov	[bp-10],dx
 33735                                  	mov	Exec_Rel_Fac,dx
 33736                                  %else
 33737                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33738                                  	;;;
 33739 00005B8D 06                      	push	es
 33740 00005B8E 26C405                  	les	ax,[es:di]
 33741                                  	;les	ax,[ES:DI+EXEC3.load_addr]
 33742                                  	;mov	[bp-20],ax
 33743 00005B91 8946EC                  	mov	Exec_DMA,ax
 33744                                  	;mov	[bp-10],es
 33745 00005B94 8C46F6                  	mov	Exec_Rel_Fac,es
 33746 00005B97 07                      	pop	es
 33747                                  	;;;
 33748                                  %endif
 33749                                  	; ax = Exec_DMA
 33750 00005B98 E9DE00                  	jmp	Exec_Find_Res
 33751                                  
 33752                                  ; 17/12/2022
 33753                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33754                                  ; 27/09/2023
 33755                                  %if 0
 33756                                  	; 02/06/2019 - Retro DOS v4.0
 33757                                  	;mov	ax,[bp-20]  ; *+*
 33758                                  	mov	AX,Exec_DMA ; *+*
 33759                                  	; 10/08/2018
 33760                                  	jmp	Exec_Find_Res		; M000
 33761                                  %endif
 33762                                  
 33763                                  Exec_No_Mem:
 33764                                  	;mov	al,8
 33765 00005B9B B008                    	mov	AL,error_not_enough_memory
 33766 00005B9D EB02                    	jmp	short Exec_Bomb
 33767                                  
 33768                                  Exec_Bad_File:
 33769                                  	;mov	al,0Bh
 33770 00005B9F B00B                    	mov	AL,error_bad_format
 33771                                  
 33772                                  Exec_Bomb:
 33773                                  	;mov	bx,[bp-8]
 33774 00005BA1 8B5EF8                  	mov	BX,Exec_FH
 33775 00005BA4 E83604                  	call	Exec_Dealloc
 33776                                  	;LeaveCrit CritMem
 33777 00005BA7 E863B7                  	call	LCritMEM
 33778                                  	;save	<AX,BP>
 33779 00005BAA 50                      	push	ax
 33780 00005BAB 55                      	push	bp
 33781                                  	;invoke	$CLOSE
 33782 00005BAC E82D0A                  	call	_$CLOSE
 33783                                  	;restore <BP,AX>
 33784 00005BAF 5D                      	pop	bp
 33785 00005BB0 58                      	pop	ax
 33786 00005BB1 E9BDFE                  	jmp	Exec_Ret_Err
 33787                                  
 33788                                  Exec_Chk_Mem: 
 33789                                  	
 33790                                  	; 24/09/2023
 33791                                  	; ds = DOSDATA
 33792                                  ; 17/12/2022
 33793                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33794                                  ;%if 0
 33795                                  	; MSDOS 6.0    			; M063 - Start
 33796                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33797                                  	; 10/06/2019
 33798 00005BB4 A0[0203]                	mov	al,[AllocMethod]
 33799                                  	;mov	bl,[ss:ALLOCMSAVE]
 33800 00005BB7 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33801                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33802 00005BBB 881E[0203]              	mov	[AllocMethod],bl
 33803                                  	
 33804 00005BBF F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33805 00005BC2 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33806                                  	;				; N: continue
 33807                                  	;
 33808 00005BC4 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33809 00005BC6 74D3                    	jz	short Exec_No_Mem	; N: no memory
 33810                                  	; 02/06/2019
 33811                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33812 00005BC8 A1[8A00]                	mov	ax,[SAVE_AX]
 33813                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33814                                  					; M063 - End
 33815 00005BCB EB2B                    	jmp	short Exec_Norm_Alloc1
 33816                                  ;%endif
 33817                                  
 33818                                  ; 17/12/2022
 33819                                  %if 0
 33820                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33821                                  	; MSDOS 6.0    			; M063 - Start
 33822                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33823                                  	mov	bl,[ss:ALLOCMSAVE]
 33824                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33825                                  
 33826                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33827                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33828                                  	;				; N: continue
 33829                                  	;
 33830                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33831                                  	jz	short Exec_No_Mem	; N: no memory
 33832                                  
 33833                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33834                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33835                                  					; M063 - End
 33836                                  %endif
 33837                                  
 33838                                  Exec_Allocate:
 33839                                  	; 09/09/2018
 33840                                  
 33841                                  	; M005 - START
 33842                                  	; If there is no STACK segment for this exe file and if this
 33843                                  	; not an overlay and the resident size is less than 64K - 
 33844                                  	; 256 bytes we shall add 256 bytes to the programs 
 33845                                  	; resident memory requirement and set Exec_SP to this value.
 33846                                  	
 33847                                  	; 17/12/2022
 33848 00005BCD 29DB                    	sub	bx,bx ; 0	
 33849                                  
 33850                                  	; MSDOS 6.0
 33851                                  	;;mov	byte [bp-29],0
 33852                                  	;mov	Exec_NoStack,0
 33853                                  	; 17/12/2022
 33854 00005BCF 885EE3                  	mov	Exec_NoStack,bl ; 0
 33855 00005BD2 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33856                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33857 00005BD6 7511                    	jne	short ea1		; Y: continue normal processing
 33858 00005BD8 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33859                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33860 00005BDC 750B                    	jne	short ea1		; Y: continue normal processing
 33861                                  
 33862                                  	;inc	byte [bp-29]
 33863 00005BDE FE46E3                  	inc	Exec_NoStack
 33864 00005BE1 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33865 00005BE4 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33866                                  
 33867 00005BE6 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33868                                  ea1:
 33869                                  	; M005 - END
 33870                                  
 33871                                  	; MSDOS 6.0			; M000 - start
 33872                                  	; 20/05/2019
 33873                                  	; (ds = ss = DOSDATA)
 33874 00005BE9 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33875                                  					; Q: is the alloc strat high_first
 33876 00005BEE 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33877                                  					; Y: set high_only bit
 33878 00005BF0 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33879                                  					; M000 - end
 33880                                  Exec_Norm_Alloc:
 33881 00005BF5 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd
 33882                                  Exec_Norm_Alloc1:	; 02/06/2019
 33883                                  					; M000: attempt at allocating memory
 33884                                  	; MSDOS 3.3
 33885                                  	;push	ax			; M000
 33886                                  
 33887 00005BF8 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33888 00005BFB 1E                      	push	DS
 33889                                  	;invoke	$Alloc			; should have carry set and BX has max
 33890 00005BFC E85D05                  	call	_$ALLOC
 33891 00005BFF 1F                      	pop	DS
 33892                                  
 33893                                  	; MSDOS 6.0
 33894 00005C00 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33895                                  	; MSDOS 3.3
 33896                                  	;pop	ax			; M000
 33897                                  
 33898 00005C03 83C010                  	add	AX,10h			; room for header
 33899 00005C06 83FB11                  	cmp	BX,11h			; enough room for a header
 33900                                  	; MSDOS 6.0
 33901 00005C09 72A9                    	jb	short Exec_Chk_Mem	; M000
 33902                                  	; MSDOS 3.3	
 33903                                  	;jb	short Exec_No_Mem
 33904                                  
 33905 00005C0B 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33906                                  	; MSDOS 6.0
 33907 00005C0D 77A5                    	ja	short Exec_Chk_Mem	; M000
 33908                                  	; MSDOS 3.3
 33909                                  	;ja	short Exec_No_Mem
 33910                                  
 33911                                  	;test	byte [bp-6],0FFh
 33912 00005C0F F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33913 00005C13 7518                    	jnz	short Exec_BX_Max	; use max
 33914                                  
 33915                                  	; 09/09/2018
 33916                                  
 33917 00005C15 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33918                                  	; MSDOS 6.0
 33919 00005C19 7299                    	jc	short Exec_Chk_Mem	; M000
 33920                                  	; MSDOS 3.3
 33921                                  	;jc	short Exec_No_Mem
 33922                                  
 33923 00005C1B 39D8                    	cmp	AX,BX			; enough space?
 33924                                  	; MSDOS 6.0
 33925 00005C1D 7795                    	ja	short Exec_Chk_Mem	; M000: nope...
 33926                                  	; MSDOS 3.3
 33927                                  	;ja	short Exec_No_Mem
 33928                                  
 33929 00005C1F 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33930 00005C23 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33931 00005C27 7204                    	jc	short Exec_BX_Max
 33932                                  
 33933 00005C29 39D8                    	cmp	AX,BX
 33934 00005C2B 7602                    	jbe	short Exec_Got_Block
 33935                                  
 33936                                  Exec_BX_Max:
 33937 00005C2D 89D8                    	mov	AX,BX
 33938                                  
 33939                                  Exec_Got_Block:
 33940                                  	; 03/08/2018 - Retro DOS v3.0
 33941                                  
 33942 00005C2F 1E                      	push	DS
 33943 00005C30 89C3                    	mov	BX,AX
 33944                                  	;mov	[bp-16],bx
 33945 00005C32 895EF0                  	mov	Exec_Size,BX
 33946                                  	;invoke	$Alloc			; get the space
 33947 00005C35 E82405                  	call	_$ALLOC
 33948 00005C38 1F                      	pop	DS
 33949                                  	; MSDOS 6.0
 33950                                  	;jc	short Exec_Chk_Mem	; M000
 33951                                  	; MSDOS 3.3
 33952                                  	;;jc	short Exec_No_Mem
 33953                                  	; 20/05/2019
 33954 00005C39 7303                    	jnc	short ea0
 33955 00005C3B E976FF                  	jmp	Exec_Chk_Mem
 33956                                  ea0:
 33957                                  	; MSDOS 6.0
 33958 00005C3E 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33959 00005C42 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33960                                  
 33961                                  ;M029; Begin changes
 33962                                  ; This code does special handling for programs with no stack segment. If so,
 33963                                  ;check if the current block is larger than 64K. If so, we do not modify
 33964                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33965                                  ;case Exec_SS is not changed.
 33966                                  
 33967                                  	; MSDOS 6.0
 33968                                  	;cmp	byte [bp-29],0
 33969 00005C46 807EE300                	cmp	Exec_NoStack,0
 33970                                  	;je	@f
 33971 00005C4A 7412                    	je	short ea2
 33972                                  
 33973 00005C4C 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33974                                  	;jae	@f			; Y: Exec_SP = 0
 33975 00005C50 730C                    	jae	short ea2
 33976                                  
 33977                                  ;Make Exec_SP point at the top of the memory block
 33978                                  
 33979 00005C52 B104                    	mov	cl,4
 33980 00005C54 D3E3                    	shl	bx,cl			; get byte offset
 33981 00005C56 81EB0001                	sub	bx,100h			; take care of PSP
 33982 00005C5A 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33983                                  ea2:
 33984                                  ;@@:
 33985                                  ;M029; end changes
 33986                                  
 33987                                  	;mov	[bp-18],ax
 33988 00005C5E 8946EE                  	mov	Exec_Load_Block,AX
 33989 00005C61 83C010                  	add	AX,10h
 33990                                  	;test	byte [bp-6],0FFh
 33991 00005C64 F646FAFF                	test	Exec_Load_High,-1
 33992 00005C68 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33993                                  
 33994                                  	;add	ax,[bp-16]
 33995 00005C6A 0346F0                  	add	AX,Exec_Size		; go to end
 33996                                  	;sub	ax,[bp-12]
 33997 00005C6D 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33998 00005C70 83E810                  	sub	AX,10h			; drop off pdb
 33999                                  
 34000                                  Exec_Use_AX:
 34001                                  	;mov	[bp-10],ax
 34002 00005C73 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 34003                                  	;mov	[bp-20],ax
 34004 00005C76 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 34005                                  
 34006                                  	; Determine the location in the file of the beginning of
 34007                                  	; the resident
 34008                                  
 34009                                  ; 17/12/2022
 34010                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34011                                  ;%if 0
 34012                                  
 34013                                  Exec_Find_Res:
 34014                                  	; MSDOS 6.0
 34015                                  	;;mov	dx,[bp-20]
 34016                                  	;mov	DX,Exec_DMA ; *+*
 34017                                  	;;mov	[bp-28],dx
 34018                                  	;mov	Exec_DMA_Save,DX
 34019                                  
 34020                                  	; 17/12/2022
 34021                                  	; AX = Exec_DMA
 34022                                  
 34023                                  	; 02/06/2019 - Retro DOS v4.0
 34024                                  	;mov	[bp-28],ax ; *+*
 34025 00005C79 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 34026                                  
 34027                                  ;%endif
 34028                                  
 34029                                  ; 17/12/2022
 34030                                  %if 0
 34031                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34032                                  Exec_Find_Res:
 34033                                  	;mov	dx,[bp-20]
 34034                                  	mov	DX,Exec_DMA ; *+*
 34035                                  	;mov	[bp-28],dx
 34036                                  	mov	Exec_DMA_Save,DX
 34037                                  %endif
 34038                                  
 34039                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34040 00005C7C 8B16[D00F]              	mov	DX,[exec_par_dir]
 34041 00005C80 52                      	push	DX
 34042 00005C81 B104                    	mov	CL,4
 34043 00005C83 D3E2                    	shl	DX,CL			; low word of location
 34044 00005C85 58                      	pop	AX
 34045 00005C86 B10C                    	mov	CL,12
 34046 00005C88 D3E8                    	shr	AX,CL			; high word of location
 34047 00005C8A 89C1                    	mov	CX,AX			; CX <- high
 34048                                  
 34049                                  		; Read in the resident image (first, seek to it)
 34050                                  	;mov	bx,[bp-8]
 34051 00005C8C 8B5EF8                  	mov	BX,Exec_FH
 34052 00005C8F 1E                      	push	DS
 34053 00005C90 30C0                    	xor	AL,AL
 34054                                  	;invoke	$Lseek			; Seek to resident
 34055 00005C92 E8B20A                  	call	_$LSEEK
 34056 00005C95 1F                      	pop	DS
 34057 00005C96 7303                    	jnc	short Exec_Big_Read
 34058                                  
 34059 00005C98 E906FF                  	jmp	Exec_Bomb
 34060                                  
 34061                                  Exec_Big_Read:				; Read resident into memory
 34062                                  	;mov	bx,[bp-12]
 34063 00005C9B 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 34064 00005C9E 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 34065 00005CA2 7203                    	jb	short Exec_Read_OK
 34066                                  
 34067 00005CA4 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 34068                                  
 34069                                  Exec_Read_OK:
 34070                                  	;sub	[bp-12],bx
 34071 00005CA7 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 34072 00005CAA 53                      	push	BX
 34073 00005CAB B104                    	mov	CL,4
 34074 00005CAD D3E3                    	shl	BX,CL			; Get count in bytes from paras
 34075 00005CAF 89D9                    	mov	CX,BX			; Count in correct register
 34076 00005CB1 1E                      	push	DS
 34077                                  	;mov	ds,[bp-20]
 34078 00005CB2 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 34079                                  
 34080 00005CB5 31D2                    	xor	DX,DX
 34081 00005CB7 51                      	push	CX			; Save our count
 34082 00005CB8 E80903                  	call	ExecRead
 34083 00005CBB 59                      	pop	CX			; Get old count to verify
 34084 00005CBC 1F                      	pop	DS
 34085 00005CBD 7248                    	jc	short Exec_Bad_FileJ
 34086                                  
 34087 00005CBF 39C1                    	cmp	CX,AX			; Did we read enough?
 34088 00005CC1 5B                      	pop	BX			; Get paragraph count back
 34089 00005CC2 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 34090                                  
 34091                                  	; The read did not match the request. If we are off by 512
 34092                                  	; bytes or more then the header lied and we have an error.
 34093                                  
 34094 00005CC4 29C1                    	sub	CX,AX
 34095 00005CC6 81F90002                	cmp	CX,512
 34096 00005CCA 733B                    	jae	short Exec_Bad_FileJ
 34097                                  
 34098                                  	; We've read in CX bytes... bump DTA location
 34099                                  
 34100                                  ExecCheckEnd:
 34101                                  	;add	[bp-20],bx
 34102 00005CCC 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 34103                                  	;test	word [bp-12],0FFFFh
 34104 00005CCF F746F4FFFF              	test	Exec_Res_Len_Para,-1
 34105 00005CD4 75C5                    	jnz	short Exec_Big_Read
 34106                                  
 34107                                  	; The image has now been read in. We must perform relocation
 34108                                  	; to the current location.
 34109                                  
 34110                                  exec_do_reloc:
 34111                                  	;mov	cx,[bp-10]
 34112 00005CD6 8B4EF6                  	mov	CX,Exec_Rel_Fac
 34113 00005CD9 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 34114 00005CDC 01C8                    	add	AX,CX			; and relocate him
 34115 00005CDE A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 34116                                  
 34117 00005CE1 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 34118 00005CE4 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 34119                                  
 34120 00005CE7 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 34121 00005CEB A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 34122 00005CEE 8CC0                    	mov	AX,ES			; rms;NSS
 34123 00005CF0 01C8                    	add	AX,CX			; relocated...
 34124 00005CF2 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 34125                                  
 34126 00005CF5 31C9                    	xor	CX,CX
 34127 00005CF7 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 34128                                  	;mov	bx,[bp-8]
 34129 00005CFB 8B5EF8                  	mov	BX,Exec_FH
 34130 00005CFE 1E                      	push	DS
 34131 00005CFF 31C0                    	xor	AX,AX
 34132                                  	;invoke	$Lseek
 34133 00005D01 E8430A                  	call	_$LSEEK
 34134 00005D04 1F                      	pop	DS
 34135 00005D05 7303                    	jnc	short exec_get_entries
 34136                                  
 34137                                  Exec_Bad_FileJ:
 34138 00005D07 E995FE                  	jmp	Exec_Bad_File
 34139                                  
 34140                                  exec_get_entries:
 34141 00005D0A 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 34142                                  
 34143                                  exec_read_reloc:
 34144 00005D0E 52                      	push	DX
 34145                                  	;mov	dx,OPENBUF
 34146 00005D0F BA[BE03]                	mov	DX,Exec_Internal_Buffer
 34147                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 34148                                  	;mov	cx,396 ; MSDOS 6.0
 34149 00005D12 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 34150 00005D15 1E                      	push	DS
 34151 00005D16 E8AB02                  	call	ExecRead
 34152 00005D19 07                      	pop	ES
 34153 00005D1A 5A                      	pop	DX
 34154 00005D1B 72EA                    	jc	short Exec_Bad_FileJ
 34155                                  
 34156                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 34157                                  	;mov	cx,99 ;  MSDOS 6.0
 34158 00005D1D B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 34159                                  					; Pointer to byte location in header
 34160                                  	;mov	di,OPENBUF
 34161 00005D20 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 34162                                  	;mov	si,[bp-10]
 34163 00005D23 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 34164                                  
 34165                                  exec_reloc_one:
 34166 00005D26 09D2                    	or	DX,DX			; Any more entries?
 34167 00005D28 7416                    	jz	short Exec_Set_PDBJ
 34168                                  
 34169                                  exec_get_addr:
 34170 00005D2A 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 34171 00005D2D 8CD8                    	mov	AX,DS			; Relocate address of item
 34172                                  
 34173                                  	; MSDOS 6.0
 34174                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 34175                                  	;add	ax,[bp-28]
 34176 00005D2F 0346E4                  	add	AX,Exec_DMA_Save
 34177                                  
 34178 00005D32 8ED8                    	mov	DS,AX
 34179 00005D34 0137                    	add	[BX],SI
 34180 00005D36 83C704                  	add	DI,4
 34181 00005D39 4A                      	dec	DX
 34182 00005D3A E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 34183                                  
 34184                                  	; We've exhausted a single buffer's worth. Read in the next
 34185                                  	; piece of the relocation table.
 34186                                  
 34187 00005D3C 06                      	push	ES
 34188 00005D3D 1F                      	pop	DS
 34189 00005D3E EBCE                    	jmp	short exec_read_reloc
 34190                                  
 34191                                  Exec_Set_PDBJ:
 34192                                  	; MSDOS 6.0
 34193                                  	
 34194                                  	; We now determine if this is a buggy exe packed file and if
 34195                                  	; so we patch in the right code. Note that fixexepatch will
 34196                                  	; point to a ret if dos loads low. The load segment as
 34197                                  	; determined above will be in exec_dma_save
 34198                                  	
 34199 00005D40 06                      	push	es
 34200 00005D41 50                      	push	ax			; M030
 34201 00005D42 51                      	push	cx			; M030
 34202                                  	;mov	es,[bp-28]
 34203 00005D43 8E46E4                  	mov	es,Exec_DMA_Save
 34204 00005D46 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34205 00005D4A 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34206 00005D4F 36FF16[1212]            	call	word [ss:FixExePatch]
 34207                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34208                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34209                                  	;call	word [ss:Rational386PatchPtr]
 34210 00005D54 59                      	pop	cx			; M030
 34211 00005D55 58                      	pop	ax			; M030
 34212 00005D56 07                      	pop	es
 34213                                  
 34214 00005D57 E9DD00                  	jmp	Exec_Set_PDB
 34215                                  
 34216                                  Exec_No_Memj:
 34217 00005D5A E93EFE                  	jmp	Exec_No_Mem
 34218                                  
 34219                                  	; we have a .COM file. First, determine if we are merely
 34220                                  	; loading an overlay.
 34221                                  
 34222                                  Exec_Com_File:
 34223                                  	;test	byte [bp-5],2
 34224 00005D5D F646FB02                	test	Exec_Func,exec_func_overlay
 34225 00005D61 742D                    	jz	short Exec_Alloc_Com_File
 34226                                  	;lds	si,[bp-4]
 34227 00005D63 C576FC                  	lds	SI,Exec_Blk		; get arg block
 34228 00005D66 AD                      	lodsw				; get load address
 34229                                  	;mov	[bp-20],ax
 34230 00005D67 8946EC                  	mov	Exec_DMA,AX
 34231 00005D6A B8FFFF                  	mov	AX,0FFFFh
 34232 00005D6D EB63                    	jmp	short Exec_Read_Block	; read it all!
 34233                                  
 34234                                  Exec_Chk_Com_Mem:			
 34235                                  	; MSDOS 6.0	     		; M063 - Start
 34236 00005D6F 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34237 00005D73 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34238 00005D78 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34239 00005D7D F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34240 00005D80 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34241                                  					; N: continue
 34242                                  	
 34243 00005D82 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34244 00005D84 74D4                    	jz	short Exec_No_Memj	; N: no memory
 34245                                  	
 34246                                  	;mov	ax,[bp-18]
 34247 00005D86 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated
 34248 00005D89 31DB                    	xor	bx,bx			; M047: bx => free arena
 34249 00005D8B E86B02                  	call	ChangeOwner		; M047: free this block
 34250                                  	
 34251 00005D8E EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34252                                  					; M063 - End
 34253                                  	
 34254                                  	; We must allocate the max possible size block (ick!)
 34255                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34256                                  	; size of block.
 34257                                  
 34258                                  Exec_Alloc_Com_File:
 34259                                  	; MSDOS 6.0			; M000 -start
 34260 00005D90 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34261                                  					; Q: is the alloc strat high_first
 34262 00005D96 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34263                                  					; Y: set high_only bit
 34264 00005D98 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34265                                  					; M000 - end
 34266                                  Exec_Norm_Com_Alloc:			; M000
 34267                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34268 00005D9E BBFFFF                  	mov	BX,0FFFFh
 34269                                  	;invoke	$Alloc			; largest piece available as error
 34270 00005DA1 E8B803                  	call	_$ALLOC
 34271 00005DA4 09DB                    	or	BX,BX
 34272                                  	; MSDOS 6.0
 34273 00005DA6 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34274                                  	; MSDOS 3.3
 34275                                  	;jz	short Exec_No_Memj
 34276                                  
 34277                                  	;mov	[bp-16],bx
 34278 00005DA8 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34279 00005DAB 53                      	push	BX
 34280                                  	;invoke	$ALLOC			; largest piece available
 34281 00005DAC E8AD03                  	call	_$ALLOC
 34282 00005DAF 5B                      	pop	BX			; get size of block...
 34283                                  	;mov	[bp-18],ax
 34284 00005DB0 8946EE                  	mov	Exec_Load_Block,AX
 34285                                  
 34286 00005DB3 83C010                  	add	AX,10h			; increment for header
 34287                                  	;mov	[bp-20],ax
 34288 00005DB6 8946EC                  	mov	Exec_DMA,AX
 34289                                  
 34290 00005DB9 31C0                    	xor	AX,AX			; presume 64K read...
 34291 00005DBB 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34292 00005DBF 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34293                                  
 34294 00005DC1 89D8                    	mov	AX,BX			; convert size to bytes
 34295 00005DC3 B104                    	mov	CL,4
 34296 00005DC5 D3E0                    	shl	AX,CL
 34297                                  	; 17/12/2022
 34298                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34299                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34300                                  	; MSDOS 5.0
 34301                                  	;cmp	AX,100h   
 34302                                  	; 02/06/2019 - Retro DOS v4.0
 34303                                  	; MSDOS 6.0
 34304                                          ; 17/12/2022
 34305 00005DC7 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34306 00005DCA 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34307                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34308                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34309                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34310                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34311                                  
 34312                                  					; M047: size of the block is < 64K
 34313 00005DCC 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34314                                  
 34315                                  Exec_Read_Com:
 34316                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34317 00005DCF 2D0001                  	sub	AX,100h 		; remember size of psp
 34318                                  Exec_Read_Block:
 34319 00005DD2 50                      	push	AX			; save number to read
 34320                                  	;mov	bx,[bp-8]
 34321 00005DD3 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34322 00005DD6 31C9                    	xor	CX,CX			; but seek to 0:0
 34323 00005DD8 31C0                    	xor	AX,AX			; seek relative to beginning
 34324                                  	;mov	DX,CX
 34325                                  	; 08/03/2024
 34326 00005DDA 99                      	cwd
 34327                                  	;invoke	$Lseek			; back to beginning of file
 34328 00005DDB E86909                  	call	_$LSEEK
 34329 00005DDE 59                      	pop	CX			; number to read
 34330                                  	;mov	ds,[bp-20]
 34331 00005DDF 8E5EEC                  	mov	DS,Exec_DMA
 34332 00005DE2 31D2                    	xor	DX,DX
 34333 00005DE4 51                      	push	CX
 34334 00005DE5 E8DC01                  	call	ExecRead
 34335 00005DE8 5E                      	pop	SI			; get number of bytes to read
 34336 00005DE9 7303                    	jnc	short OkRead
 34337 00005DEB E9B1FD                  	jmp	Exec_Bad_File
 34338                                  
 34339                                  	; 10/09/2018
 34340                                  OkRead:
 34341 00005DEE 39F0                    	cmp	AX,SI			; did we read them all?
 34342                                  	; MSDOS 6.0
 34343                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no
 34344                                  	; MSDOS 3.3
 34345                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34346 00005DF0 7503                    	jne	short OkRead2
 34347 00005DF2 E97AFF                  	jmp	Exec_Chk_Com_Mem
 34348                                  OkRead2:
 34349                                  	; MSDOS 6.0
 34350 00005DF5 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34351 00005DFA 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34352                                  
 34353                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34354                                  	;test	byte [bp-5],2
 34355 00005DFF F646FB02                	test	Exec_Func,exec_func_overlay
 34356 00005E03 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34357                                  
 34358                                  	;mov	ax,[bp-20]
 34359 00005E05 8B46EC                  	mov	AX,Exec_DMA
 34360 00005E08 83E810                  	sub	AX,10h
 34361 00005E0B 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34362 00005E0F 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34363                                  
 34364                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34365                                  	; of 0 on stack.
 34366                                  
 34367 00005E16 81C6FE00                	add	SI,0FEh 		; make room for stack
 34368                                  
 34369                                  	; MSDOS 6.0
 34370 00005E1A 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34371 00005E1D 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34372 00005E1F 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34373                                  
 34374                                  Exec_St_Ok:
 34375                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34376 00005E23 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34377 00005E28 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34378 00005E2C 8ED8                    	mov	DS,AX
 34379 00005E2E C7040000                	mov	WORD [SI],0		; 0 for return
 34380                                  
 34381                                  	; MSDOS 6.0
 34382                                  
 34383                                  	; M068
 34384                                  	;
 34385                                  	; We now determine if this is a Copy Protected App. If so the
 34386                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to
 34387                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34388                                  
 34389 00005E32 36FF16[6100]            	call	word [ss:ChkCopyProt]
 34390                                  
 34391                                  Exec_Set_PDB:
 34392                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34393                                  	;mov	bx,[bp-8]
 34394 00005E37 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34395 00005E3A E8A001                  	call	Exec_Dealloc
 34396 00005E3D 55                      	push	BP
 34397                                  	;invoke	$Close			; release the jfn
 34398 00005E3E E89B07                  	call	_$CLOSE
 34399 00005E41 5D                      	pop	BP
 34400 00005E42 E88A01                  	call	Exec_Alloc
 34401                                  	;test	byte [bp-5],2
 34402 00005E45 F646FB02                	test	Exec_Func,exec_func_overlay
 34403 00005E49 743A                    	jz	short Exec_Build_Header
 34404                                  
 34405                                  	; MSDOS 6.0
 34406 00005E4B E8B901                  	call	Scan_Execname
 34407 00005E4E E8CD01                  	call	Scan_Special_Entries
 34408                                  ;SR;
 34409                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34410                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34411                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34412                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34413                                  ;Sysinit and therefore must be a device driver load. We then get the lie
 34414                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34415                                  ;issues the version check, it gets the lie version until the next overlay
 34416                                  ;call is issued.
 34417                                  
 34418 00005E51 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34419 00005E57 7426                    	je	short norm_ovl		;yes, no special handling
 34420 00005E59 56                      	push	si
 34421 00005E5A 06                      	push	es
 34422 00005E5B 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34423                                  	 
 34424                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s)
 34425 00005E60 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34426 00005E64 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34427                                  	
 34428 00005E66 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34429 00005E6B 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34430 00005E70 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34431                                  		;;; PDB.VERSION
 34432 00005E75 EB06                    	jmp	short setver_done
 34433                                  sysinit_done:
 34434 00005E77 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34435                                  setver_done:
 34436 00005E7D 07                      	pop	es
 34437 00005E7E 5E                      	pop	si
 34438                                  norm_ovl:
 34439                                  	;leave
 34440 00005E7F 89EC                    	mov	sp,bp
 34441 00005E81 5D                      	pop	bp
 34442                                  
 34443                                  	;transfer SYS_RET_OK		; overlay load -> done
 34444 00005E82 E9B0A7                  	jmp	SYS_RET_OK
 34445                                  
 34446                                  Exec_Build_Header:
 34447                                  	;mov	dx,[bp-18]
 34448 00005E85 8B56EE                  	mov	DX,Exec_Load_Block
 34449                                  					; assign the space to the process
 34450                                  	;mov	si,1
 34451 00005E88 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34452                                  	;mov	ax,[bp-14]
 34453 00005E8B 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34454 00005E8E 09C0                    	or	AX,AX
 34455 00005E90 7405                    	jz	short No_Owner		; no environment
 34456                                  
 34457 00005E92 48                      	dec	AX			; point to header
 34458 00005E93 8ED8                    	mov	DS,AX
 34459 00005E95 8914                    	mov	[SI],DX 		; assign ownership
 34460                                  No_Owner:
 34461                                  	;mov	ax,[bp-18]
 34462                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34463                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34464                                  	; 17/12/2022
 34465 00005E97 89D0                    	mov	ax,dx ; 06/06/2019
 34466                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34467                                  	
 34468 00005E99 48                      	dec	AX
 34469 00005E9A 8ED8                    	mov	DS,AX			; point to header
 34470 00005E9C 8914                    	mov	[SI],DX 		; assign ownership
 34471                                  
 34472                                  	; MSDOS 6.0
 34473 00005E9E 1E                      	push	DS			;AN000;MS. make ES=DS
 34474 00005E9F 07                      	pop	ES			;AN000;MS.
 34475                                  	;mov	di,8
 34476 00005EA0 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34477 00005EA3 E86101                  	call	Scan_Execname		;AN007;MS. parse execname
 34478                                  					;	   ds:si->name, cx=name length
 34479 00005EA6 51                      	push	CX			;AN007;;MS. save for fake version
 34480 00005EA7 56                      	push	SI			;AN007;;MS. save for fake version
 34481                                  
 34482                                  MoveName:				;AN000;
 34483 00005EA8 AC                      	lodsb				;AN000;;MS. get char
 34484 00005EA9 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.', may be name.exe
 34485 00005EAB 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34486                                  					;AN000;
 34487 00005EAD AA                      	stosb				;AN000;;MS. move char
 34488                                  					; MSKK bug fix - limit length copied
 34489 00005EAE 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34490 00005EB1 7302                    	jae	short Mem_Done		; jump if so
 34491                                  	;
 34492 00005EB3 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34493                                  Mem_Done:				;AN000;
 34494 00005EB5 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34495                                  	;cmp	di,16
 34496 00005EB7 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34497 00005EBA 7301                    	jae	short Fill8		;AN000;MS.
 34498                                  	
 34499 00005EBC AA                      	stosb				;AN000;MS.
 34500                                  	
 34501                                  Fill8:					;AN000;
 34502 00005EBD 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34503 00005EBE 59                      	pop	CX			;AN007;MS.
 34504                                  	
 34505 00005EBF E85C01                  	call	Scan_Special_Entries	;AN007;MS.
 34506                                  
 34507                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34508 00005EC2 52                      	push	DX
 34509                                  	;mov	si,[bp-16]
 34510 00005EC3 8B76F0                  	mov	SI,Exec_Size
 34511 00005EC6 01D6                    	add	SI,DX
 34512                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34513 00005EC8 E8B1B1                  	call	_$DUP_PDB
 34514 00005ECB 5A                      	pop	DX
 34515                                  
 34516                                  	;push	word [bp-14]
 34517 00005ECC FF76F2                  	push	Exec_Environ
 34518                                  	;pop	WORD [ES:2Ch]
 34519 00005ECF 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34520                                  
 34521                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34522                                  					; version number in PSP
 34523 00005ED4 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34524 00005ED9 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34525                                  		; PDB.VERSION
 34526                                  
 34527                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34528                                  	;lds	si,[bp-4]
 34529 00005EDE C576FC                  	lds	SI,Exec_Blk		; get the block
 34530 00005EE1 1E                      	push	DS			; save its location
 34531 00005EE2 56                      	push	SI
 34532                                  	;lds	si,[si+6]
 34533 00005EE3 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34534                                  
 34535                                  	; DS points to user space 5C FCB
 34536                                  
 34537 00005EE6 B90C00                  	mov	CX,12			; copy drive, name and ext
 34538 00005EE9 51                      	push	CX
 34539 00005EEA BF5C00                  	mov	DI,5Ch
 34540 00005EED 8A1C                    	mov	BL,[SI]
 34541 00005EEF F3A4                    	rep	movsb
 34542                                  
 34543                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34544                                  
 34545                                  	;xor	AX,AX			; zero extent, etc for CPM
 34546 00005EF1 91                      	xchg	ax,cx	; 08/03/2024
 34547 00005EF2 AB                      	stosw
 34548 00005EF3 AB                      	stosw
 34549                                  
 34550                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34551                                  
 34552 00005EF4 59                      	pop	CX
 34553 00005EF5 5E                      	pop	SI			; get block
 34554 00005EF6 1F                      	pop	DS
 34555 00005EF7 1E                      	push	DS			; save (again)
 34556 00005EF8 56                      	push	SI
 34557                                  	;lds	si,[si+0Ah]
 34558 00005EF9 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34559                                  
 34560                                  	; DS points to user space 6C FCB
 34561                                  
 34562 00005EFC 8A3C                    	mov	BH,[SI] 		; do same as above
 34563 00005EFE F3A4                    	rep	movsb
 34564 00005F00 AB                      	stosw
 34565 00005F01 AB                      	stosw
 34566 00005F02 5E                      	pop	SI			; get block (last time)
 34567 00005F03 1F                      	pop	DS
 34568                                  	;ld	si,[si+2]
 34569 00005F04 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34570                                  
 34571                                  	; DS points to user space 80 command line
 34572                                  
 34573 00005F07 80C980                  	or	CL,80h
 34574 00005F0A 89CF                    	mov	DI,CX
 34575 00005F0C F3A4                    	rep	movsb			; Wham!
 34576                                  
 34577                                  	; Process BX into default AX (validity of drive specs on args).
 34578                                  	; We no longer care about DS:SI.
 34579                                  
 34580 00005F0E FEC9                    	dec	CL			; get 0FFh in CL
 34581 00005F10 88F8                    	mov	AL,BH
 34582 00005F12 30FF                    	xor	BH,BH
 34583                                  	;invoke	GetVisDrv
 34584 00005F14 E8210A                  	call	GetVisDrv
 34585 00005F17 7302                    	jnc	short Exec_BL
 34586                                  
 34587 00005F19 88CF                    	mov	BH,CL
 34588                                  
 34589                                  Exec_BL:
 34590 00005F1B 88D8                    	mov	AL,BL
 34591 00005F1D 30DB                    	xor	BL,BL
 34592                                  	;invoke	GetVisDrv
 34593 00005F1F E8160A                  	call	GetVisDrv
 34594 00005F22 7302                    	jnc	short Exec_Set_Return
 34595                                  
 34596 00005F24 88CB                    	mov	BL,CL
 34597                                  
 34598                                  Exec_Set_Return:
 34599                                  	;invoke	Get_User_Stack			; get his return address
 34600 00005F26 E85CA5                  	call	Get_User_Stack
 34601                                  
 34602                                  ; 08/03/2024
 34603                                  %if 0
 34604                                  	;push	word [si+14h]
 34605                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34606                                  	;push	word [si+12h]
 34607                                  	push	word [SI+user_env.user_IP]
 34608                                  	;push	word [si+14h]
 34609                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34610                                  	;push	word [si+12h]
 34611                                  	push	word [SI+user_env.user_IP]
 34612                                  	;pop	word [ES:0Ah]
 34613                                  	pop	WORD [ES:PDB.EXIT]
 34614                                  	;pop	word [ES:0Ch]
 34615                                  	pop	WORD [ES:PDB.EXIT+2]
 34616                                  %else
 34617                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 34618                                  	;;;
 34619                                  	;lds	ax,[si+12h]
 34620 00005F29 C54412                  	lds	ax,[SI+user_env.user_IP] ; suck out the CS and IP
 34621 00005F2C 1E                      	push	ds              
 34622 00005F2D 50                      	push	ax
 34623                                  	;mov	[es:0Ah],ax
 34624 00005F2E 26A30A00                	mov	[ES:PDB.EXIT],ax
 34625                                  	;mov	[es:0Ch],ds
 34626 00005F32 268C1E0C00              	mov	[ES:PDB.EXIT+2],ds
 34627                                  	;;;
 34628                                  %endif
 34629                                  	
 34630 00005F37 31C0                    	xor	AX,AX
 34631 00005F39 8ED8                    	mov	DS,AX
 34632                                  					; save them where we can get them
 34633                                  					; later when the child exits.
 34634                                  	;pop	word [88h]
 34635 00005F3B 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34636                                  	;pop	word [90h]
 34637 00005F3F 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34638                                  
 34639 00005F43 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34640 00005F4A 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34641 00005F4F 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34642                                  
 34643                                  	;test	byte [bp-5],1
 34644 00005F54 F646FB01                	test	Exec_Func,exec_func_no_execute
 34645 00005F58 7427                    	jz	short exec_go
 34646                                  
 34647 00005F5A 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34648                                  	;les	di,[bp-4]
 34649 00005F5F C47EFC                  	les	DI,Exec_Blk		; and block for return
 34650                                  	;mov	[es:di+10h],ds
 34651 00005F62 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34652                                  
 34653 00005F66 4E                      	dec	SI			; 'push' default AX
 34654 00005F67 4E                      	dec	SI
 34655 00005F68 891C                    	mov	[SI],BX 		; save default AX reg
 34656                                  	;mov	[es:di+0Eh], si
 34657 00005F6A 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34658                                  
 34659 00005F6E 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34660                                  	;mov	[es:di+14h],ds
 34661 00005F73 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34662                                  	;mov	[es:di+12h],ax
 34663 00005F77 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34664                                  	
 34665                                  	;leave
 34666 00005F7B 89EC                    	mov	sp,bp
 34667 00005F7D 5D                      	pop	bp	
 34668                                  
 34669                                  	;transfer SYS_RET_OK
 34670 00005F7E E9B4A6                  	jmp	SYS_RET_OK
 34671                                  
 34672                                  exec_go:
 34673 00005F81 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34674 00005F86 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34675 00005F8B 8CC0                    	mov	AX,ES
 34676                                  
 34677                                  	; MSDOS 6.0
 34678 00005F8D 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34679 00005F93 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34680                                  
 34681 00005F95 1E                      	push	ds			; Y: control must go to low mem stub
 34682                                  		
 34683 00005F96 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34684                                  					;    control to user 
 34685 00005F9B 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34686                                  					; M004: Set bit to signal int 21
 34687                                  					; ah = 25 & ah= 49. See dossym.inc 
 34688                                  					; under TAG M003 & M009 for 
 34689                                  					; explanation
 34690 00005FA0 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34691                                  					; M068: going to be turned OFF.
 34692                                  	
 34693 00005FA4 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34694 00005FA6 1F                      	pop	ds
 34695                                  	
 34696 00005FA7 50                      	push	ax			; ret far into the low mem stub
 34697 00005FA8 B8[1511]                	mov	ax,disa20_xfer
 34698 00005FAB 50                      	push	ax
 34699 00005FAC 8CC0                    	mov	AX,ES			; restore ax
 34700 00005FAE CB                      	retf
 34701                                  
 34702                                  Xfer_To_User:
 34703                                  	; DS:SI points to entry point
 34704                                  	; AX:DI points to initial stack
 34705                                  	; DX has PDB pointer
 34706                                  	; BX has initial AX value
 34707                                  
 34708 00005FAF FA                      	cli
 34709                                  	; 15/08/2018
 34710 00005FB0 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34711                                  
 34712 00005FB6 8ED0                    	mov	SS,AX			; set up user's stack
 34713 00005FB8 89FC                    	mov	SP,DI			; and SP
 34714 00005FBA FB                      	sti
 34715                                  
 34716 00005FBB 1E                      	push	DS			; fake long call to entry
 34717 00005FBC 56                      	push	SI
 34718 00005FBD 8EC2                    	mov	ES,DX			; set up proper seg registers
 34719 00005FBF 8EDA                    	mov	DS,DX
 34720 00005FC1 89D8                    	mov	AX,BX			; set up proper AX
 34721                                  
 34722 00005FC3 CB                      	retf
 34723                                  
 34724                                  ; 04/08/2018 - Retro DOS v3.0
 34725                                  
 34726                                  ;----------------------------------------------------------------------------
 34727                                  ;
 34728                                  ;----------------------------------------------------------------------------
 34729                                  
 34730                                  ExecRead:
 34731 00005FC4 E81600                  	CALL	Exec_Dealloc
 34732                                  	;mov	bx,[bp-8]
 34733 00005FC7 8B5EF8                  	MOV	bx,Exec_FH
 34734                                  
 34735 00005FCA 55                      	PUSH	BP
 34736 00005FCB E81707                  	call	_$READ
 34737 00005FCE 5D                      	POP	BP
 34738                                  
 34739                                  	;CALL	Exec_Alloc
 34740                                  	;retn
 34741                                  	; 18/12/2022
 34742                                  	;jmp	short Exec_Alloc
 34743                                  
 34744                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34745                                  
 34746                                  ;----------------------------------------------------------------------------
 34747                                  ;
 34748                                  ;----------------------------------------------------------------------------
 34749                                  
 34750                                  Exec_Alloc:
 34751 00005FCF 53                      	push	BX
 34752                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34753                                  	; 20/05/2019 - Retro DOS v4.0
 34754                                  	; MSDOS 6.0
 34755 00005FD0 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34756 00005FD5 E81000                  	call	ChangeOwners
 34757 00005FD8 E832B3                  	call	LCritMEM
 34758 00005FDB 5B                      	pop	BX
 34759 00005FDC C3                      	retn
 34760                                  
 34761                                  ;----------------------------------------------------------------------------
 34762                                  ;
 34763                                  ;----------------------------------------------------------------------------
 34764                                  
 34765                                  Exec_Dealloc:
 34766 00005FDD 53                      	push	BX
 34767                                  	;mov	bx,0
 34768 00005FDE 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34769 00005FE0 E80FB3                  	call	ECritMEM
 34770 00005FE3 E80200                  	call	ChangeOwners
 34771 00005FE6 5B                      	pop	BX
 34772 00005FE7 C3                      	retn
 34773                                  
 34774                                  ; 18/12/2022
 34775                                  %if 0
 34776                                  ;----------------------------------------------------------------------------
 34777                                  ;
 34778                                  ;----------------------------------------------------------------------------
 34779                                  
 34780                                  Exec_Alloc:
 34781                                  	push	BX
 34782                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34783                                  	; 20/05/2019 - Retro DOS v4.0
 34784                                  	; MSDOS 6.0
 34785                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34786                                  	call	ChangeOwners
 34787                                  	call	LCritMEM
 34788                                  	pop	BX
 34789                                  	retn
 34790                                  
 34791                                  %endif
 34792                                  
 34793                                  ;----------------------------------------------------------------------------
 34794                                  ;
 34795                                  ;----------------------------------------------------------------------------
 34796                                  
 34797                                  ChangeOwners:
 34798 00005FE8 9C                      	pushf
 34799 00005FE9 50                      	push	AX
 34800                                  	;mov	ax,[bp-14]
 34801 00005FEA 8B46F2                  	mov	AX,Exec_Environ
 34802 00005FED E80900                  	call	ChangeOwner
 34803                                  	;mov	ax,[bp-18]
 34804 00005FF0 8B46EE                  	mov	AX,Exec_Load_Block
 34805 00005FF3 E80300                  	call	ChangeOwner
 34806 00005FF6 58                      	pop	AX
 34807 00005FF7 9D                      	popf
 34808                                  chgown_retn:
 34809 00005FF8 C3                      	retn
 34810                                  
 34811                                  ;----------------------------------------------------------------------------
 34812                                  ;
 34813                                  ;----------------------------------------------------------------------------
 34814                                  
 34815                                  ChangeOwner:
 34816 00005FF9 09C0                    	or	AX,AX			; is area allocated?
 34817 00005FFB 74FB                    	jz	short chgown_retn	; no, do nothing
 34818 00005FFD 48                      	dec	AX
 34819 00005FFE 1E                      	push	DS
 34820 00005FFF 8ED8                    	mov	DS,AX
 34821 00006001 891E0100                	mov	[ARENA.OWNER],BX
 34822 00006005 1F                      	pop	DS
 34823 00006006 C3                      	retn
 34824                                  
 34825                                  ;----------------------------------------------------------------------------
 34826                                  ;
 34827                                  ;----------------------------------------------------------------------------
 34828                                  
 34829                                  ; 20/05/2019 - Retro DOS v4.0
 34830                                  
 34831                                  	; MSDOS 6.0
 34832                                  Scan_Execname:
 34833 00006007 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34834                                  Scan_Execname1:				; M028
 34835                                  Save_Begin:				;
 34836 0000600A 89F1                    	mov	CX,SI			; CX= starting addr
 34837                                  Scan0:					;
 34838 0000600C AC                      	lodsb				; get char
 34839                                  
 34840 0000600D 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34841 0000600F 74F9                    	jz	short Save_Begin	; yes, save si
 34842 00006011 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34843 00006013 74F5                    	jz	short Save_Begin	; yes, save si
 34844 00006015 3C00                    	cmp	AL,0			; is end of name
 34845 00006017 75F3                    	jnz	short Scan0		; no, continue scanning
 34846 00006019 29CE                    	sub	SI,CX			; get name's length
 34847 0000601B 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34848                                  
 34849 0000601D C3                      	retn
 34850                                  
 34851                                  ;----------------------------------------------------------------------------
 34852                                  ;
 34853                                  ;----------------------------------------------------------------------------
 34854                                  
 34855                                  ; 20/05/2019 - Retro DOS v4.0
 34856                                  
 34857                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34858                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34859                                  
 34860                                  	; MSDOS 6.0
 34861                                  
 34862                                  Scan_Special_Entries:
 34863                                  
 34864 0000601E 49                      	dec	CX			; cx= name length
 34865                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34866                                  					;reset to current version
 34867                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34868                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34869                                  	;mov	word [ss:SPECIAL_VERSION],5
 34870                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34871                                  
 34872                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34873 0000601F 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34874                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34875                                  				; 24/09/2023
 34876                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34877                                  ;***	call	Reset_Version
 34878                                  
 34879                                  ;M060	push	SS
 34880                                  ;M060	pop	ES
 34881                                  
 34882 00006026 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34883 0000602B 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34884 0000602D 09F8                    	or	AX,DI			;M060; be sure the table exists
 34885 0000602F 7427                    	jz	short End_List		;M060; If ZR then no table
 34886                                  
 34887                                  GetEntries:
 34888 00006031 268A05                  	mov	AL,[ES:DI]		; end of list
 34889 00006034 08C0                    	or	AL,AL
 34890 00006036 7420                    	jz	short End_List		; yes
 34891                                  
 34892 00006038 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34893 0000603D 38C8                    	cmp	AL,CL			; same length ?
 34894 0000603F 751B                    	jnz	short SkipOne 		; no
 34895                                  
 34896 00006041 47                      	inc	DI			; es:di -> special name
 34897 00006042 51                      	push	CX			; save length and name addr
 34898 00006043 56                      	push	SI
 34899                                  
 34900                                  ; M050 - BEGIN
 34901                                  
 34902 00006044 50                      	push	ax			; save len
 34903                                  sse_next_char:
 34904 00006045 AC                      	lodsb
 34905 00006046 E8ECEE                  	call	UCase
 34906 00006049 AE                      	scasb
 34907 0000604A 750D                    	jne	short Not_Matched
 34908 0000604C E2F7                    	loop	sse_next_char
 34909                                  	
 34910                                  ;	repz	cmpsb			; same name ?
 34911                                  ;	jnz	short Not_Matched	; no
 34912                                  
 34913 0000604E 58                      	pop	ax			; take len off the stack
 34914                                  
 34915                                  ; M050 - END
 34916                                  
 34917 0000604F 268B05                  	mov	AX,[ES:DI]		; get special version
 34918 00006052 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34919                                  
 34920                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34921                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34922                                  
 34923 00006056 5E                      	pop	SI
 34924 00006057 59                      	pop	CX
 34925                                  	; 18/12/2022
 34926                                  	;jmp	SHORT End_List
 34927                                  
 34928                                  	; 18/12/2022
 34929                                  End_List:
 34930 00006058 C3                      	retn
 34931                                  
 34932                                  Not_Matched:
 34933 00006059 58                      	pop	ax			; get len from stack ; M050
 34934 0000605A 5E                      	pop	SI			; restore si,cx
 34935 0000605B 59                      	pop	CX
 34936                                  
 34937                                  SkipOne:
 34938 0000605C 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34939 00006061 30E4                    	xor	AH,AH			; position to next entry
 34940 00006063 01C7                    	add	DI,AX
 34941                                  
 34942 00006065 83C703                  	add	DI,3			; DI -> next entry length
 34943                                  ;***	add	DI,4			; DI -> next entry length
 34944                                  
 34945 00006068 EBC7                    	jmp	short GetEntries
 34946                                  
 34947                                  	; 18/12/2022
 34948                                  ;End_List:
 34949                                  	;retn
 34950                                  
 34951                                  ; 04/08/2018 - Retro DOS v3.0
 34952                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 633Dh
 34953                                  
 34954                                  ;----------------------------------------------------------------------------
 34955                                  ;SUBTTL Terminate and stay resident handler
 34956                                  ;
 34957                                  ; Input:    DX is an offset from CurrentPDB at which to
 34958                                  ;	    truncate the current block.
 34959                                  ;
 34960                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34961                                  ;	    paragraphs long. An exit is simulated via resetting CurrentPDB
 34962                                  ;	    and restoring the vectors.
 34963                                  ;
 34964                                  ;----------------------------------------------------------------------------
 34965                                  
 34966                                  	; 20/05/2019 - Retro DOS v4.0
 34967                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34968                                  
 34969                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34970                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34971                                  
 34972                                  _$KEEP_PROCESS:
 34973 0000606A 50                      	push	AX			; keep exit code around
 34974                                  	;mov	byte [SS:EXIT_TYPE],3
 34975 0000606B 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34976 00006071 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34977 00006076 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34978 00006079 7303                    	jae	short Keep_Shrink	; info
 34979                                  
 34980 0000607B BA0600                  	mov	DX,6h
 34981                                  
 34982                                  Keep_Shrink:
 34983 0000607E 89D3                    	mov	BX,DX
 34984 00006080 53                      	push	BX
 34985 00006081 06                      	push	ES
 34986 00006082 E82D02                  	call	_$SETBLOCK		; ignore return codes.
 34987 00006085 1F                      	pop	DS
 34988 00006086 5B                      	pop	BX
 34989 00006087 7207                    	jc	short Keep_Done		; failed on modification
 34990                                  
 34991 00006089 8CD8                    	mov	AX,DS
 34992 0000608B 01D8                    	add	AX,BX
 34993                                  	;mov	[2],ax
 34994 0000608D A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34995                                  
 34996                                  Keep_Done:
 34997 00006090 58                      	pop	AX
 34998 00006091 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34999                                  
 35000                                  ;----------------------------------------------------------------------------
 35001                                  ;
 35002                                  ;----------------------------------------------------------------------------
 35003                                  
 35004                                  STAY_RESIDENT:
 35005                                  	;mov	ax,3100h
 35006 00006093 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 35007 00006096 83C20F                  	add	DX,15
 35008 00006099 D1DA                    	rcr	DX,1
 35009 0000609B B103                    	mov	CL,3
 35010 0000609D D3EA                    	shr	DX,CL
 35011                                  
 35012 0000609F E965A2                  	jmp	COMMAND
 35013                                  
 35014                                  ;----------------------------------------------------------------------------
 35015                                  ;SUBTTL $EXIT - return to parent process
 35016                                  ;   Assembler usage:
 35017                                  ;	    MOV     AL, code
 35018                                  ;	    MOV     AH, Exit
 35019                                  ;	    INT     int_command
 35020                                  ;   Error return:
 35021                                  ;	    None.
 35022                                  ;
 35023                                  ;----------------------------------------------------------------------------
 35024                                  
 35025                                  	; 20/05/2019 - Retro DOS v4.0
 35026                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 35027                                  
 35028                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35029                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 35030                                  _$EXIT:
 35031                                  	; 04/08/2018 - Retro DOS v3.0
 35032                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 35033 000060A2 30E4                    	xor	AH,AH
 35034 000060A4 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 35035 000060A9 08E4                    	or	AH,AH
 35036                                  	;mov	BYTE [SS:EXIT_TYPE],0
 35037 000060AB 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 35038 000060B1 7406                    	jz	short exit_inner
 35039                                  	;mov	BYTE [SS:EXIT_TYPE],1
 35040 000060B3 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 35041                                  
 35042                                  	;entry	Exit_inner
 35043                                  exit_inner:
 35044 000060B9 E8C9A3                  	call	Get_User_Stack		;PBUGBUG
 35045                                  
 35046 000060BC 36FF36[3003]            	push	word [ss:CurrentPDB]
 35047                                  	;pop	word [si+14h]
 35048 000060C1 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 35049 000060C4 EB08                    	jmp	short abort_inner
 35050                                  
 35051                                  ;BREAK <$ABORT -- Terminate a process>
 35052                                  ;----------------------------------------------------------------------------
 35053                                  ; Inputs:
 35054                                  ;	user_CS:00 must point to valid program header block
 35055                                  ; Function:
 35056                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 35057                                  ;	to the terminate address
 35058                                  ; Returns:
 35059                                  ;	TO THE TERMINATE ADDRESS
 35060                                  ;----------------------------------------------------------------------------
 35061                                  
 35062                                  _$ABORT:
 35063 000060C6 30C0                    	xor	AL,AL
 35064                                  	;mov	byte [SS:EXIT_TYPE],0
 35065                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 35066 000060C8 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 35067                                  
 35068                                  	; abort_inner must have AL set as the exit code! The exit type
 35069                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 35070                                  	; to be correct as the one that is terminating.
 35071                                  
 35072                                  abort_inner:
 35073 000060CE 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 35074 000060D3 36A3[3403]              	mov	[SS:exit_code],AX
 35075 000060D7 E8ABA3                  	call	Get_User_Stack
 35076                                  
 35077                                  	;mov	ds,[si+14h]
 35078 000060DA 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 35079 000060DD 31C0                    	xor	AX,AX
 35080 000060DF 8EC0                    	mov	ES,AX
 35081                                  	;mov	si,10
 35082 000060E1 BE0A00                  	mov	SI,SAVEXIT
 35083                                  	;mov	di,88h
 35084 000060E4 BF8800                  	mov	DI,addr_int_terminate
 35085 000060E7 A5                      	movsw
 35086 000060E8 A5                      	movsw
 35087 000060E9 A5                      	movsw
 35088 000060EA A5                      	movsw
 35089 000060EB A5                      	movsw
 35090 000060EC A5                      	movsw
 35091 000060ED E959F2                  	jmp	reset_environment
 35092                                  
 35093                                  ;----------------------------------------------------------------------------
 35094                                  ;
 35095                                  ; fixexepatch will point to this is DOS loads low. 
 35096                                  ;
 35097                                  ;----------------------------------------------------------------------------
 35098                                  ; MSDOS 6.0
 35099                                  
 35100                                  ; 29/04/2019 - Retro DOS v4.0
 35101                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 35102                                  
 35103                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35104                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 35105                                  
 35106                                  RetExePatch: ; proc near
 35107                                  	
 35108 000060F0 C3                      	retn
 35109                                  
 35110                                  ;============================================================================
 35111                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 35112                                  ;============================================================================
 35113                                  ; 04/08/2018 - Retro DOS v3.0
 35114                                  ; 14/05/2019 - Retro DOS v4.0
 35115                                  
 35116                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 35117                                  
 35118                                  ;**
 35119                                  ;	Microsoft Confidential
 35120                                  ;	Copyright (C) Microsoft Corporation 1991
 35121                                  ;	All Rights Reserved.
 35122                                  ;
 35123                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 35124                                  ;	I/O specs are defined in DISPATCH.
 35125                                  ;
 35126                                  ;	$ALLOC
 35127                                  ;	$SETBLOCK
 35128                                  ;	$DEALLOC
 35129                                  ;	$AllocOper
 35130                                  ;	arena_free_process
 35131                                  ;	arena_next
 35132                                  ;	check_signature
 35133                                  ;	Coalesce
 35134                                  ;
 35135                                  ;	Modification history:
 35136                                  ;
 35137                                  ;	    Created: ARR 30 March 1983
 35138                                  ;
 35139                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 35140                                  ;		      M003 - added support for link/unlink UMBs from
 35141                                  ;			     DOS arena chain. 7/18/90
 35142                                  ;		      M009 - Added error returns invalid function and 
 35143                                  ;			     arena trashed in set link state call.
 35144                                  ;		      M010 - Release UMB arenas allocated to current PDB
 35145                                  ;			     if UMB_HEAD is initialized.
 35146                                  ;
 35147                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 35148                                  ;			     support. Please see under M009 in 
 35149                                  ;			     ..\inc\dossym.inc. 8/31/90.
 35150                                  ;
 35151                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 35152                                  ;			     sure that umb_head arena is valid and also make
 35153                                  ;			     sure that the previous arena is pointing to 
 35154                                  ;			     umb_head.
 35155                                  ;
 35156                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 35157                                  ;			     set allloc strategy.
 35158                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 35159                                  ;			     bx in AllocSetStrat.
 35160                                  ;
 35161                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 35162                                  ;			     a bit to indicate to dos dispatcher to turn
 35163                                  ;			     a20 off before iret. See M016.
 35164                                  ;
 35165                                  
 35166                                  ;	BREAK	<memory allocation utility routines>
 35167                                  
 35168                                  
 35169                                  ; 15/04/2018 - Retro DOS v2.0
 35170                                  ;----------------------------------------------------------------------------
 35171                                  ; xenix memory calls for MSDOS
 35172                                  ;
 35173                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 35174                                  ; arena_owner_system are all equal to zero and are contained in DI.
 35175                                  ;
 35176                                  ;INCLUDE DOSSEG.ASM
 35177                                  
 35178                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 35179                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 35180                                  
 35181                                  ;.xlist
 35182                                  ;.xcref
 35183                                  ;INCLUDE DOSSYM.ASM
 35184                                  ;INCLUDE DEVSYM.ASM
 35185                                  ;.cref
 35186                                  ;.list
 35187                                  
 35188                                  ;TITLE ALLOC.ASM - memory arena manager
 35189                                  ;NAME Alloc
 35190                                  
 35191                                  ;SUBTTL memory allocation utility routines
 35192                                  ;PAGE
 35193                                  ;
 35194                                  ; arena data
 35195                                  ;
 35196                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 35197                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 35198                                  ;       i_need  FirstArena,WORD         ; first free block found
 35199                                  ;       i_need  BestArena,WORD          ; best free block found
 35200                                  ;       i_need  LastArena,WORD          ; last free block found
 35201                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 35202                                  
 35203                                  ;**	Arena_Free_Process
 35204                                  ;----------------------------------------------------------------------------
 35205                                  ;	Free all arena blocks allocated to a prOcess
 35206                                  ;
 35207                                  ;	ENTRY	(bx) = PID of process
 35208                                  ;	EXIT	none
 35209                                  ;	USES	????? BUGBUG
 35210                                  ;----------------------------------------------------------------------------
 35211                                  
 35212                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35213                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35214                                  
 35215                                  arena_free_process:
 35216                                  	; 14/05/2019 - Retro DOS v4.0
 35217                                  	; 04/08/2018 - Retro DOS v3.0
 35218 000060F1 36A1[2400]                      MOV	AX,[SS:arena_head]
 35219                                  arena_free_process_start:
 35220 000060F5 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35221                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35222 000060F8 E82F00                          CALL	check_signature         ; ES <- AX, check for valid block
 35223                                  
 35224                                  arena_free_process_loop:
 35225                                          ;retc
 35226 000060FB 7225                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35227 000060FD 06                      	PUSH    ES
 35228 000060FE 1F                              POP     DS
 35229                                  	;cmp	[1],bx 
 35230 000060FF 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35231 00006103 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35232                                  	;mov	[1],di
 35233 00006105 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35234                                  
 35235                                  arena_free_next:
 35236                                  	;cmp	byte [di],5Ah ;'Z'
 35237 00006109 803D5A                          CMP     BYTE [DI],arena_signature_end
 35238                                                                          ; end of road, Jack?
 35239                                          ;retz				; never come back no more
 35240                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35241                                  	; 14/05/2019
 35242                                  	; MSDOS 6.0
 35243 0000610C 7405                    	jz	short arena_chk_umbs
 35244                                          
 35245 0000610E E81200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35246 00006111 EBE8                            JMP     SHORT arena_free_process_loop
 35247                                  
 35248                                  	; MSDOS 6.0
 35249                                  arena_chk_umbs:				; M010 - Start
 35250                                  	; 20/05/2019
 35251 00006113 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35252 00006117 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35253 0000611A 741D                    	je	short ret_label		; N: we're done
 35254                                  	
 35255 0000611C 8CDF                    	mov	di,ds			; di = last arena
 35256 0000611E 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35257                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 35258                                  	;jmp	short arena_free_process_start
 35259                                  					; M010 - End
 35260                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 35261 00006120 72D3                    	jb	short arena_free_process_start
 35262                                  
 35263                                  	; 10/03/2024
 35264                                  AFP_RETN:
 35265 00006122 C3                      	RETN
 35266                                  
 35267                                  ;	BREAK	<Arena Helper Routines>
 35268                                  
 35269                                  ;**	Arena_Next - Find Next item in Arena
 35270                                  ;----------------------------------------------------------------------------
 35271                                  ;	ENTRY	DS - pointer to block head
 35272                                  ;		(di) = 0
 35273                                  ;	EXIT	AX,ES - pointers to next head
 35274                                  ;		'C' set iff arena damaged
 35275                                  ;----------------------------------------------------------------------------
 35276                                  
 35277                                  arena_next:
 35278 00006123 8CD8                            MOV     AX,DS                   ; AX <- current block
 35279 00006125 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35280 00006129 40                              INC     AX                      ; remember that header!
 35281                                  
 35282                                  ;       fall into check_signature and return
 35283                                  ;
 35284                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35285                                  ;       RETN
 35286                                  
 35287                                  ;**	Check_Signature - Check Memory Block Signature
 35288                                  ;----------------------------------------------------------------------------
 35289                                  ;	ENTRY	(AX) = address of block header
 35290                                  ;		(di) = 0
 35291                                  ;	EXIT	 ES = AX
 35292                                  ;		'C' clear if signature good
 35293                                  ;		'C' set if signature bad
 35294                                  ;	USES	ES, Flags
 35295                                  ;----------------------------------------------------------------------------
 35296                                  
 35297                                  check_signature:        
 35298                                  
 35299 0000612A 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35300                                  	;cmp	byte [es:di],4Dh ; 'M'
 35301 0000612C 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35302                                                                          ; IF next signature = not_end THEN
 35303 00006130 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35304                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35305 00006132 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35306                                                                          ; IF next signature = end then
 35307 00006136 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35308 00006138 F9                              STC                             ; set error
 35309                                  ret_label: ; MSDOS 6.0
 35310                                  ;AFP_RETN:	; 10/03/2024
 35311                                   	; Retro DOS v2.0 - 05/03/2018
 35312                                  check_signature_ok:
 35313                                  COALESCE_RETN:
 35314 00006139 C3                      	RETN
 35315                                  
 35316                                  ;**	Coalesce - Combine free blocks ahead with current block
 35317                                  ;----------------------------------------------------------------------------
 35318                                  ;	Coalesce adds the block following the argument to the argument block,
 35319                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35320                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35321                                  ;	preceeding allocated block.
 35322                                  ;
 35323                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35324                                  ;		(di) = 0
 35325                                  ;	EXIT	'C' clear if OK
 35326                                  ;		  (ds) unchanged, this block updated
 35327                                  ;		  (ax) = address of next block, IFF not at end
 35328                                  ;		'C' set if arena trashed
 35329                                  ;	USES	(cx)
 35330                                  ;----------------------------------------------------------------------------
 35331                                          
 35332                                  Coalesce:
 35333                                  	;cmp	byte [di],5Ah ; 'Z'
 35334 0000613A 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35335                                                                          ; IF current signature = END THEN
 35336                                          ;retz				;   GOTO ok
 35337 0000613D 74FA                            jz	short COALESCE_RETN
 35338 0000613F E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35339                                          ;retc				; IF no error THEN GOTO check
 35340 00006142 72F5                    	jc	short COALESCE_RETN
 35341                                  
 35342                                  coalesce_check:
 35343                                  	;cmp	[es:1],di
 35344 00006144 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35345                                          ;retnz				; IF next block isnt free THEN return
 35346 00006149 75EE                            JNZ	SHORT COALESCE_RETN
 35347                                  	;mov	cx,[ES:3]
 35348 0000614B 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35349 00006150 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35350                                          ;ADD	[3],CX
 35351 00006151 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35352 00006155 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35353 00006158 880D                            MOV     [DI],CL
 35354 0000615A EBDE                            JMP     SHORT Coalesce		; try again
 35355                                  
 35356                                  ; 04/08/2018 - Retro DOS v3.0
 35357                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35358                                  
 35359                                  ;	BREAK  <$Alloc - allocate space in memory>
 35360                                  
 35361                                  ; MSDOS 6.0
 35362                                  ;----------------------------------------------------------------------------
 35363                                  ;**	$Alloc - Allocate Memory Space
 35364                                  ;
 35365                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35366                                  ;	Alloc returns a pointer to a free block of memory that
 35367                                  ;	has the requested size in paragraphs.
 35368                                  ;
 35369                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35370                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35371                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35372                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35373                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35374                                  ;
 35375                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35376                                  ;	starts from arena_head.
 35377                                  ;
 35378                                  ;	Assembler usage:
 35379                                  ;           MOV     BX,size
 35380                                  ;           MOV     AH,Alloc
 35381                                  ;           INT     21h
 35382                                  ;
 35383                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35384                                  ;	so that we start searching the arena at it's first non-trivial free
 35385                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35386                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35387                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35388                                  ;	verify that this is true; if so, this can stay as is
 35389                                  ;
 35390                                  ;	ENTRY	(bx) = requested size, in bytes
 35391                                  ;		(DS) = (ES) = DOSGROUP
 35392                                  ;	EXIT	'C' clear if memory allocated
 35393                                  ;		  (ax:0) = address of requested memory
 35394                                  ;		'C' set if request failed
 35395                                  ;		  (AX) = error_not_enough_memory
 35396                                  ;		    (bx) = max size we could have allocated
 35397                                  ;		  (ax) = error_arena_trashed
 35398                                  ;	USES	All
 35399                                  ;----------------------------------------------------------------------------
 35400                                  
 35401                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35402                                  ;----------------------------------------------------------------------------
 35403                                  ;SUBTTL $Alloc - allocate space in memory
 35404                                  ;
 35405                                  ;   Assembler usage:
 35406                                  ;           MOV     BX,size
 35407                                  ;           MOV     AH,Alloc
 35408                                  ;           INT     21h
 35409                                  ;         AX:0 is pointer to allocated memory
 35410                                  ;         BX is max size if not enough memory
 35411                                  ;
 35412                                  ;   Description:
 35413                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35414                                  ;       memory that has the requested  size  in  paragraphs.
 35415                                  ;
 35416                                  ;   Error return:
 35417                                  ;           AX = error_not_enough_memory
 35418                                  ;              = error_arena_trashed
 35419                                  ;----------------------------------------------------------------------------
 35420                                  
 35421                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35422                                  
 35423                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35424                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35425                                  
 35426                                  _$ALLOC:
 35427                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35428                                  	; 14/05/2019 - Retro DOS v4.0
 35429                                  	; 04/08/2018 - Retro DOS v3.0
 35430                                  	;EnterCrit critMem
 35431 0000615C E893B1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35432                                  
 35433                                  ; 17/12/2022
 35434                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35435                                  ;%if 0
 35436                                  	; 14/05/2019
 35437 0000615F 16                      	push	ss
 35438 00006160 1F                      	pop	ds
 35439                                  
 35440                                  	; MSDOS 6.0
 35441                                  	;mov	ax,[ss:arena_head]
 35442                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35443                                  
 35444 00006161 A1[2400]                	mov	ax,[arena_head]
 35445 00006164 A3[8E00]                	mov	[START_ARENA],ax
 35446                                  	
 35447                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35448 00006167 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35449                                  					; Q: should we start scanning from 
 35450                                  					;    UMB's
 35451 0000616C 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35452                                  		
 35453                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35454                                  	;cmp	word [UMB_HEAD],-1
 35455                                  	;je	short norm_alloc	; N: scan from arena_head
 35456                                  
 35457                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35458 0000616E F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35459 00006173 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35460                                  	
 35461                                  	;mov	ax,[ss:UMB_HEAD]
 35462                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35463 00006175 A1[8C00]                	mov	ax,[UMB_HEAD]
 35464 00006178 A3[8E00]                	mov	[START_ARENA],ax
 35465                                  					; M000 - end
 35466                                  norm_alloc:
 35467 0000617B 31C0                            XOR     AX,AX
 35468 0000617D 89C7                            MOV     DI,AX
 35469                                  	; 15/03/2018
 35470                                          ;MOV	[SS:FirstArena],AX	; init the options
 35471                                          ;MOV	[SS:BestArena],AX
 35472                                          ;MOV	[SS:LastArena],AX
 35473                                  	; 14/05/2019
 35474 0000617F A3[4003]                	MOV	[FirstArena],AX		; init the options
 35475 00006182 A3[4203]                        MOV	[BestArena],AX
 35476 00006185 A3[4403]                        MOV	[LastArena],AX
 35477 00006188 50                              PUSH    AX                      ; alloc_max <- 0
 35478                                  	; 04/08/2018
 35479                                  start_scan:
 35480                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35481                                  	;MOV	AX,[arena_head]
 35482                                  
 35483                                  	; 14/05/2019	
 35484                                  	; MSDOS 6.0
 35485                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35486 00006189 A1[8E00]                	mov	ax,[START_ARENA]
 35487                                  
 35488                                  	; 27/09/2023 (BugFix) (*)
 35489                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35490                                  start_scan_x:
 35491                                  
 35492 0000618C E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35493 0000618F 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35494                                  
 35495                                  ;%endif
 35496                                  
 35497                                  ; 17/12/2022
 35498                                  %if 0
 35499                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35500                                  
 35501                                  	; MSDOS 6.0
 35502                                  	mov	ax,[ss:arena_head]
 35503                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35504                                  
 35505                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35506                                  					; Q: should we start scanning from
 35507                                  					;    UMB's
 35508                                  	jz	short norm_alloc	; N: scan from arena_head
 35509                                  		
 35510                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35511                                  	;je	short norm_alloc	; N: scan from arena_head
 35512                                  
 35513                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35514                                  	jz	short norm_alloc	; N: scan from arena_head
 35515                                  	
 35516                                  	mov	ax,[ss:UMB_HEAD]
 35517                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35518                                  					; M000 - end
 35519                                  norm_alloc:
 35520                                          XOR     AX,AX
 35521                                          MOV     DI,AX
 35522                                  	; 15/03/2018
 35523                                  	MOV	[SS:FirstArena],AX	; init the options
 35524                                  	MOV	[SS:BestArena],AX
 35525                                  	MOV	[SS:LastArena],AX
 35526                                          PUSH    AX                      ; alloc_max <- 0
 35527                                  	; 04/08/2018
 35528                                  start_scan:
 35529                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35530                                  	; 14/05/2019	
 35531                                  	; MSDOS 6.0
 35532                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35533                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35534                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35535                                  %endif
 35536                                  
 35537                                  alloc_scan:
 35538 00006191 06                              PUSH    ES
 35539 00006192 1F                              POP     DS                      ; DS <- ES
 35540 00006193 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35541 00006197 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35542                                  
 35543                                  alloc_next:
 35544                                  	; MSDOS 6.0			; M000 - start 
 35545 00006199 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35546 0000619F 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35547                                  	
 35548 000061A1 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35549                                  					; Q: is alloc strategy high_first
 35550 000061A7 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35551 000061A9 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35552 000061AD 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35553                                  					;    arena_head
 35554 000061B2 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35555 000061B4 8CD8                    	mov	ax,ds			; ax = current block
 35556 000061B6 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35557 000061BB EB03                    	jmp	short alloc_chk_end
 35558                                  
 35559                                  norm_strat:
 35560                                  	;cmp	byte [di],5Ah ; 'Z'
 35561 000061BD 803D5A                          CMP     BYTE [DI],arena_signature_end
 35562                                                                          ; IF current block is last THEN
 35563                                  alloc_chk_end:
 35564 000061C0 740E                            JZ      SHORT alloc_end		;   GOTO end
 35565 000061C2 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35566 000061C5 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35567                                  
 35568                                  alloc_err:
 35569 000061C7 58                              POP     AX
 35570                                  
 35571                                  alloc_trashed:
 35572                                  	;LeaveCrit critMem
 35573 000061C8 E842B1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35574                                          ;error	error_arena_trashed
 35575                                  	;mov	al,7
 35576 000061CB B007                    	MOV	AL,error_arena_trashed
 35577                                  alloc_errj:
 35578 000061CD E96EA4                  	JMP	SYS_RET_ERR
 35579                                  
 35580                                  alloc_end:
 35581                                  	; 18/05/2019
 35582 000061D0 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35583 000061D6 7403                    	jz	short alloc_chk 
 35584 000061D8 E98400                  	jmp	alloc_do_split
 35585                                  
 35586                                  alloc_chk:
 35587                                  	; MSDOS 6.0
 35588 000061DB 36A1[2400]              	mov	ax,[ss:arena_head]
 35589 000061DF 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35590 000061E4 740E                    	je	short alloc_fail	; Y: not enough memory
 35591                                  					; N:
 35592                                  					; Q: is the alloc strat HIGH_ONLY
 35593 000061E6 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35594 000061EC 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35595                                  	
 35596 000061EE 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35597                                  	; 27/09/2023 (*)
 35598 000061F2 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35599                                  	;jmp	short start_scan
 35600                                  					; M000 - end
 35601                                  
 35602                                  alloc_fail:
 35603                                          ;invoke Get_User_Stack
 35604 000061F4 E88EA2                          CALL	Get_User_Stack
 35605 000061F7 5B                      	POP     BX
 35606                                          ;MOV	[SI].user_BX,BX
 35607                                  	;MOV	[SI+2],BX
 35608 000061F8 895C02                  	mov	[SI+user_env.user_BX],bx
 35609                                  	;LeaveCrit critMem
 35610 000061FB E80FB1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35611                                  	;error	error_not_enough_memory
 35612                                  	;mov	al,8
 35613 000061FE B008                    	MOV	AL,error_not_enough_memory
 35614                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35615 00006200 EBCB                    	jmp	short alloc_errj
 35616                                  	;JMP	SYS_RET_ERR
 35617                                  
 35618                                  alloc_free:
 35619 00006202 E835FF                          CALL    Coalesce		; add following free block to current
 35620 00006205 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35621 00006207 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35622 0000620B 5A                              POP     DX                      ; check for max found size
 35623 0000620C 39D1                            CMP     CX,DX
 35624 0000620E 7602                            JNA     SHORT alloc_test
 35625 00006210 89CA                            MOV     DX,CX
 35626                                  
 35627                                  alloc_test:
 35628 00006212 52                              PUSH    DX
 35629 00006213 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35630 00006215 7782                    	JA      SHORT alloc_next	;   GOTO next
 35631                                  
 35632                                  	; 15/03/2018
 35633 00006217 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35634 0000621D 7505                    	JNZ	SHORT alloc_best
 35635 0000621F 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found
 35636                                  alloc_best:
 35637 00006224 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35638 0000622A 740E                            JZ      SHORT alloc_make_best	; initial best
 35639 0000622C 06                              PUSH	ES
 35640 0000622D 368E06[4203]                    MOV     ES,[SS:BestArena]
 35641 00006232 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35642 00006237 07                              POP	ES
 35643 00006238 7605                            JBE     SHORT alloc_last
 35644                                  alloc_make_best:
 35645 0000623A 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35646                                  alloc_last:
 35647 0000623F 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35648 00006244 E952FF                          JMP     alloc_next
 35649                                  ;
 35650                                  ; split the block high
 35651                                  ;
 35652                                  alloc_do_split_high:
 35653 00006247 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35654 0000624C 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35655 00006250 29D9                            SUB     CX,BX
 35656 00006252 8CDA                            MOV     DX,DS
 35657 00006254 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35658 00006256 01CA                            ADD     DX,CX                   ; point to next block
 35659 00006258 8EC2                            MOV     ES,DX                   ; no decrement!
 35660 0000625A 49                              DEC     CX
 35661 0000625B 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35662 0000625D EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35663                                  ;
 35664                                  ; we have scanned memory and have found all appropriate blocks
 35665                                  ; check for the type of allocation desired; first and best are identical
 35666                                  ; last must be split high
 35667                                  ;
 35668                                  alloc_do_split:
 35669                                  
 35670                                  ; 17/12/2022
 35671                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35672                                  ;%if 0
 35673                                  	; 14/05/2019
 35674                                  	; MSDOS 6.0			; M000 - start
 35675                                  	;xor	cx,cx
 35676 0000625F 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35677                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35678 00006264 80E13F                  	and	cl,3Fh
 35679                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35680 00006267 80F901                  	cmp	cl,BEST_FIT
 35681 0000626A 77DB                    	ja	short alloc_do_split_high
 35682                                  ;%endif
 35683                                  
 35684                                  	; 17/12/2022
 35685                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35686                                  	; MSDOS 6.0 & MSDOS 5.0
 35687                                  	;xor	cx,cx
 35688                                  	;mov	cl,[ss:AllocMethod]
 35689                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35690                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35691                                  	;ja	short alloc_do_split_high
 35692                                  
 35693                                  	; 15/03/2018
 35694                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35695                                  	; 04/08/2018
 35696                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35697                                          ;JA	SHORT alloc_do_split_high
 35698                                          
 35699 0000626C 368E1E[4003]            	MOV     DS,[SS:FirstArena]
 35700 00006271 7205                    	JB      SHORT alloc_get_size
 35701 00006273 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35702                                  
 35703                                  alloc_get_size:
 35704 00006278 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35705 0000627C 29D9                            SUB     CX,BX                   ; get room left over
 35706 0000627E 8CD8                            MOV     AX,DS
 35707 00006280 89C2                            MOV     DX,AX                   ; save for owner setting
 35708 00006282 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35709 00006284 01D8                            ADD     AX,BX
 35710 00006286 40                              INC     AX                      ; remember the header
 35711 00006287 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35712 00006289 49                              DEC     CX                      ; CX <- size of split block
 35713                                  alloc_set_sizes:
 35714 0000628A 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35715 0000628E 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35716                                  	;mov	bl,4Dh ; 'M'
 35717 00006293 B34D                            MOV     BL,arena_signature_normal
 35718 00006295 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35719 00006297 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35720 0000629A 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35721                                  
 35722                                  alloc_set_owner:
 35723 0000629F 8EDA                            MOV     DS,DX
 35724 000062A1 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35725 000062A5 A30100                          MOV     [ARENA.OWNER],AX
 35726 000062A8 8CD8                            MOV     AX,DS
 35727 000062AA 40                              INC     AX
 35728 000062AB 5B                              POP     BX
 35729                                  	;LeaveCrit critMem
 35730 000062AC E85EB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35731                                  	
 35732                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35733                                  alloc_ok:
 35734                                          ;transfer SYS_RET_OK
 35735 000062AF E983A3                  	JMP	SYS_RET_OK
 35736                                  
 35737                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35738                                  
 35739                                  ; MSDOS 6.0
 35740                                  ;----------------------------------------------------------------------------
 35741                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35742                                  ;
 35743                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35744                                  ;	any following free space onto this block; then we try to trim the
 35745                                  ;	block down to the size requested.
 35746                                  ;
 35747                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35748                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35749                                  ;	Thus the maximum-size-possible value that we return has already
 35750                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35751                                  ;
 35752                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35753                                  ;		finish it's work. For this reason we build the allocsf
 35754                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35755                                  ;		code.
 35756                                  ;
 35757                                  ;	ENTRY	(es) = segment of old block
 35758                                  ;		(bx) = newsize
 35759                                  ;		(ah) = SETBLOCK
 35760                                  ;
 35761                                  ;	EXIT	'C' clear if OK
 35762                                  ;		'C' set if error
 35763                                  ;		  (ax) = error_invalid_block
 35764                                  ;		       = error_arena_trashed
 35765                                  ;		       = error_not_enough_memory
 35766                                  ;		       = error_invalid_function
 35767                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35768                                  ;	USES	???? BUGBUG
 35769                                  ;----------------------------------------------------------------------------
 35770                                  
 35771                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35772                                  ;----------------------------------------------------------------------------
 35773                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35774                                  ;
 35775                                  ;   Assembler usage:
 35776                                  ;           MOV     ES,block
 35777                                  ;           MOV     BX,newsize
 35778                                  ;           MOV     AH,setblock
 35779                                  ;           INT     21h
 35780                                  ;         if setblock fails for growing, BX will have the maximum
 35781                                  ;         size possible
 35782                                  ;   Error return:
 35783                                  ;           AX = error_invalid_block
 35784                                  ;              = error_arena_trashed
 35785                                  ;              = error_not_enough_memory
 35786                                  ;              = error_invalid_function
 35787                                  ;----------------------------------------------------------------------------
 35788                                  
 35789                                  _$SETBLOCK:        
 35790                                  	; 04/08/2018 - Retro DOS v3.0
 35791                                  	;EnterCrit   critMem
 35792 000062B2 E83DB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35793                                  
 35794 000062B5 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35795 000062B8 8CC0                            MOV     AX,ES
 35796 000062BA 48                              DEC     AX
 35797 000062BB E86CFE                          CALL    check_signature
 35798 000062BE 7303                            JNC     SHORT setblock_grab
 35799                                  
 35800                                  setblock_bad:
 35801 000062C0 E905FF                          JMP     alloc_trashed
 35802                                  
 35803                                  setblock_grab:
 35804 000062C3 8ED8                            MOV     DS,AX
 35805 000062C5 E872FE                          CALL    Coalesce
 35806 000062C8 72F6                            JC      SHORT setblock_bad
 35807 000062CA 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35808 000062CE 51                              PUSH    CX
 35809 000062CF 39CB                            CMP     BX,CX
 35810 000062D1 76A5                            JBE     SHORT alloc_get_size
 35811 000062D3 E91EFF                          JMP     alloc_fail
 35812                                  
 35813                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35814                                  
 35815                                  ; MSDOS 6.0
 35816                                  ;----------------------------------------------------------------------------
 35817                                  ;**	$DEALLOC - Free Heap Memory
 35818                                  ;
 35819                                  ;	ENTRY	(es) = address of item
 35820                                  ;
 35821                                  ;	EXIT	'C' clear of OK
 35822                                  ;		'C' set if error
 35823                                  ;		  (AX) = error_invalid_block
 35824                                  ;	USES	???? BUGBUG
 35825                                  
 35826                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35827                                  ;----------------------------------------------------------------------------
 35828                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35829                                  ;
 35830                                  ;   Assembler usage:
 35831                                  ;           MOV     ES,block
 35832                                  ;           MOV     AH,dealloc
 35833                                  ;           INT     21h
 35834                                  ;
 35835                                  ;   Error return:
 35836                                  ;           AX = error_invalid_block
 35837                                  ;              = error_arena_trashed
 35838                                  ;---------------------------------------------------------------------------- 
 35839                                  
 35840                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35841                                  _$DEALLOC:
 35842                                  	; 14/05/2019 - Retro DOS v4.0    
 35843                                  	; 04/08/2018 - Retro DOS v3.0
 35844                                  	;EnterCrit   critMem
 35845 000062D6 E819B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35846                                  
 35847                                  	; MSDOS 6.0			; M016, M068 - Start
 35848 000062D9 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35849                                  					; Q: was the previous call an int 21
 35850                                  					;    exec call
 35851 000062DF 740D                    	jz	short deallocate	; N: continue
 35852 000062E1 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35853 000062E7 7505                    	jne	short deallocate	; N: continue
 35854                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35855                                  	; 25/09/2023
 35856 000062E9 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35857                                  deallocate:				; M016, M068 - End
 35858 000062EE BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35859 000062F1 8CC0                            MOV     AX,ES
 35860 000062F3 48                              DEC     AX
 35861 000062F4 E833FE                          CALL    check_signature
 35862 000062F7 720A                            JC      SHORT dealloc_err
 35863 000062F9 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35864                                  	;LeaveCrit critMem
 35865 000062FE E80CB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35866                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35867                                          ;transfer SYS_RET_OK
 35868                                  dealloc_ok:
 35869 00006301 EBAC                    	jmp	short alloc_ok
 35870                                  	;JMP	SYS_RET_OK
 35871                                  
 35872                                  dealloc_err:
 35873                                  	;LeaveCrit critMem
 35874 00006303 E807B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35875                                          ;error	error_invalid_block
 35876                                  	;mov	al,9
 35877 00006306 B009                    	MOV	AL,error_invalid_block
 35878                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35879                                  dealloc_errj:
 35880                                  AllocOperErrj:	; 17/12/2022
 35881 00006308 E933A3                  	JMP	SYS_RET_ERR
 35882                                  
 35883                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35884                                  
 35885                                  ; MSDOS 6.0
 35886                                  ;----------------------------------------------------------------------------
 35887                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35888                                  ;
 35889                                  ;	Assembler usage:
 35890                                  ;           MOV     AH,AllocOper
 35891                                  ;           MOV     BX,method
 35892                                  ;           MOV     AL,func
 35893                                  ;           INT     21h
 35894                                  ;
 35895                                  ;	ENTRY	
 35896                                  ;		(al) = 0
 35897                                  ;		  Get allocation Strategy in (ax)
 35898                                  ;
 35899                                  ;		(al) = 1, (bx) = method = zw0000xy
 35900                                  ;		  Set allocation strategy.
 35901                                  ;		   w  = 1  => HIGH_ONLY
 35902                                  ;		   z  = 1  => HIGH_FIRST
 35903                                  ;		   xy = 00 => FIRST_FIT
 35904                                  ;		      = 01 => BEST_FIT
 35905                                  ;		      = 10 => LAST_FIT
 35906                                  ;
 35907                                  ;		(al) = 2
 35908                                  ;		  Get UMB link state in (al)
 35909                                  ;
 35910                                  ;		(al) = 3
 35911                                  ;		  Set UMB link state
 35912                                  ;		   (bx) = 0 => Unlink UMBs
 35913                                  ;		   (bx) = 1 => Link UMBs
 35914                                  ;
 35915                                  ;
 35916                                  ;	EXIT	'C' clear if OK
 35917                                  ;
 35918                                  ;		 if (al) = 0
 35919                                  ;		  (ax) = existing method
 35920                                  ;		 if (al) = 1
 35921                                  ;		  Sets allocation strategy
 35922                                  ;		 if (al) = 2
 35923                                  ;		  (al) = 0 => UMBs not linked
 35924                                  ;		  (al) = 1 => UMBs linked in
 35925                                  ;		 if (al) = 3
 35926                                  ;		  Links/Unlinks the UMBs into DOS chain
 35927                                  ;
 35928                                  ;		'C' set if error
 35929                                  ;		  AX = error_invalid_function
 35930                                  ;
 35931                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35932                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35933                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35934                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35935                                  ;		    arena' if an arena sig is damaged.
 35936                                  ;----------------------------------------------------------------------------
 35937                                  
 35938                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35939                                  ;----------------------------------------------------------------------------
 35940                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35941                                  ;
 35942                                  ;   Assembler usage:
 35943                                  ;           MOV     AH,AllocOper
 35944                                  ;           MOV     BX,method
 35945                                  ;           MOV     AL,func
 35946                                  ;           INT     21h
 35947                                  ;
 35948                                  ;   Error return:
 35949                                  ;           AX = error_invalid_function
 35950                                  ;----------------------------------------------------------------------------
 35951                                  
 35952                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35953                                  _$ALLOCOPER:
 35954                                  	; 14/05/2019 - Retro DOS v4.0
 35955                                  	; MSDOS 6.0
 35956 0000630B 08C0                    	or	al,al ; 0
 35957 0000630D 741E                    	jz	short AllocGetStrat
 35958                                  	; 17/12/2022
 35959                                  	;cmp	al,1
 35960                                  	;jz	short AllocSetStrat
 35961                                  
 35962                                  	; 01/12/2022
 35963                                  	;cmp	al, 2
 35964                                  	;jb	short AllocSetStrat
 35965                                  	;ja	short AllocSetLink
 35966                                  	;;jmp	short AllocGetLink
 35967                                  ;AllocGetLink:
 35968                                  	; MSDOS 6.0
 35969                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35970                                  	;and 	al,LINKSTATE
 35971                                  	;;transfer SYS_RET_OK
 35972                                  	;jmp	SYS_RET_OK
 35973                                  
 35974 0000630F 3C02                    	cmp	al,2
 35975                                  	; 17/12/2022
 35976 00006311 7223                    	jb	short AllocSetStrat ; al = 1
 35977 00006313 7432                    	je	short AllocGetLink
 35978                                  
 35979                                  	;cmp	al,2
 35980                                  	;jz	short AllocGetLink
 35981 00006315 3C03                    	cmp	al,3
 35982 00006317 7436                    	jz	short AllocSetLink
 35983                                  
 35984                                  	; 15/04/2018
 35985                                  	;CMP	AL,1
 35986                                          ;JB	SHORT AllocOperGet
 35987                                          ;JZ	SHORT AllocOperSet
 35988                                  
 35989                                  AllocOperError:
 35990                                  	; 04/08/2018 - Retro DOS v3.0
 35991                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus
 35992                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35993 00006319 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35994                                  	;error	error_invalid_function
 35995                                  	;mov	al,1
 35996 0000631F B001                    	MOV	AL,error_invalid_function
 35997                                  	; 17/12/2022
 35998                                  ;AllocOperErrj:
 35999                                  	;JMP	SYS_RET_ERR
 36000                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36001                                  	;jmp	short dealloc_errj
 36002                                  	; 17/12/2022
 36003 00006321 EBE5                    	jmp	short AllocOperErrj
 36004                                  
 36005                                  AllocArenaError:
 36006                                  	; MSDOS 6.0
 36007 00006323 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36008                                  					; M009: Extended Error Locus
 36009                                  	;error	error_arena_trashed	; M009:
 36010                                  	;mov	al,7
 36011 00006329 B007                    	MOV	AL,error_arena_trashed
 36012                                  	;JMP	SYS_RET_ERR
 36013 0000632B EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 36014                                  
 36015                                  AllocGetStrat: 
 36016                                  	; MSDOS 6.0
 36017                                  AllocOperGet:
 36018 0000632D 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 36019 00006331 30E4                            XOR     AH,AH
 36020                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36021                                  	;transfer SYS_RET_OK
 36022                                  AllocOperOk:
 36023                                  	; 17/12/2022
 36024                                  	;jmp	short dealloc_ok
 36025 00006333 E9FFA2                  	JMP	SYS_RET_OK
 36026                                  
 36027                                  AllocSetStrat: 
 36028                                  	; 14/05/2019
 36029                                  	; MSDOS 6.0
 36030 00006336 53                      	push	bx			; M000 - start
 36031                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36032                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 36033                                  	; 17/12/2022
 36034 00006337 80E33F                  	and	bl,3Fh
 36035 0000633A 83FB02                  	cmp	bx,2			; BX must be 0-2
 36036                                  	;cmp	bl,2
 36037 0000633D 5B                      	pop	bx			; M000 - end
 36038 0000633E 77D9                    	ja	short AllocOperError
 36039                                  
 36040                                  AllocOperSet:
 36041 00006340 36881E[0203]                    MOV     [SS:AllocMethod],BL
 36042                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36043                                  	;transfer SYS_RET_OK
 36044                                  AllocOperOkj:
 36045 00006345 EBEC                    	jmp	short AllocOperOk
 36046                                  	;JMP	SYS_RET_OK
 36047                                  
 36048                                  AllocGetLink:
 36049                                  	; MSDOS 6.0
 36050 00006347 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 36051                                  	;and	al,1
 36052 0000634B 2401                    	and 	al,LINKSTATE
 36053                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36054                                  	;transfer SYS_RET_OK
 36055                                  AllocOperOkj2:
 36056                                  	; 17/12/2022
 36057 0000634D EBE4                    	jmp	short AllocOperOk
 36058                                  	;jmp	short AllocOperOkj
 36059                                  	;;JMP	SYS_RET_OK
 36060                                  
 36061                                  AllocSetLink:
 36062                                  	; MSDOS 6.0			; M009 - start
 36063 0000634F 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 36064 00006354 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 36065 00006357 74C0                    	je	short AllocOperError	; N: error
 36066                                  					; Y: continue
 36067                                  					; M009 - end
 36068 00006359 83FB01                  	cmp	bx,1
 36069                                  	;jb	short UnlinkUmbs
 36070                                  	;jz	short LinkUmbs
 36071                                  	;jmp	short AllocOperError
 36072                                  	; 10/03/2024
 36073 0000635C 741C                    	jz	short LinkUmbs
 36074 0000635E 77B9                    	ja	short AllocOperError
 36075                                  
 36076                                  UnlinkUmbs:
 36077                                  	;test	byte [ss:UMBFLAG],1
 36078 00006360 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 36079 00006366 7410                    	jz	short unlinked		; Y: return 
 36080                                  	
 36081 00006368 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 36082 0000636B 72B6                    	jc	short AllocArenaError	; M009: arena trashed
 36083                                  	
 36084                                  					; make it last
 36085 0000636D C60600005A              	mov	byte [0],arena_signature_end
 36086                                  	
 36087                                  	;and	byte [ss:UMBFLAG],0FEh
 36088 00006372 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 36089                                  	
 36090                                  unlinked:
 36091                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36092                                  	;transfer SYS_RET_OK
 36093                                  	; 17/12/2022
 36094 00006378 EBB9                    	jmp	short AllocOperOk
 36095                                  	;jmp	short AllocOperOkj2
 36096                                  	;;JMP	SYS_RET_OK
 36097                                  
 36098                                  LinkUmbs:
 36099 0000637A 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 36100 00006380 7510                    	jnz	short linked		; Y: return
 36101                                  	
 36102 00006382 E80F00                  	call	GetLastArena		; get arena before umb_head
 36103 00006385 729C                    	jc	short AllocArenaError	; M009: arena trashed
 36104                                  	
 36105                                  					; make it normal. M061: ds points to
 36106                                  					; arena before umb_head
 36107 00006387 C60600004D              	mov	byte [0],arena_signature_normal
 36108                                  	
 36109 0000638C 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 36110                                  linked:
 36111                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36112                                  	;transfer SYS_RET_OK
 36113                                  	; 17/12/2022
 36114 00006392 EB9F                    	jmp	short AllocOperOk
 36115                                  	;jmp	short unlinked
 36116                                  	;;JMP	SYS_RET_OK
 36117                                  
 36118                                  ; MSDOS 6.0
 36119                                  ;--------------------------------------------------------------------------
 36120                                  ; Procedure Name : GetLastArena		-  M003
 36121                                  ;
 36122                                  ; Inputs	 : cx = umb_head
 36123                                  ;
 36124                                  ;
 36125                                  ; Outputs	 : If UMBs are linked
 36126                                  ;			ES = umb_head
 36127                                  ;			DS = arena before umb_head
 36128                                  ;		   else
 36129                                  ;			DS = last arena
 36130                                  ;			ES = next arena. will be umb_head if NC.
 36131                                  ;
 36132                                  ;		   CY if error
 36133                                  ;
 36134                                  ; Uses		 : DS, ES, DI, BX
 36135                                  ;--------------------------------------------------------------------------
 36136                                  
 36137                                  ; 14/05/2019 - Retro DOS v4.0
 36138                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 36139                                  
 36140                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36141                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 36142                                  	
 36143                                  GetLastArena:
 36144 00006394 50                      	push	ax			; save ax
 36145                                  
 36146 00006395 36A1[2400]              	mov	ax,[ss:arena_head]
 36147 00006399 8EC0                    	mov	es,ax			; es = arena_head
 36148 0000639B 31FF                    	xor	di,di
 36149                                  
 36150 0000639D 26803D5A                	cmp     byte [es:di],arena_signature_end
 36151                                  					; Q: is this the last arena
 36152 000063A1 7419                    	je	short GLA_done		; Y: return last arena in ES
 36153                                  
 36154                                  GLA_next:
 36155 000063A3 8ED8                    	mov	ds,ax
 36156 000063A5 E87BFD                  	call	arena_next		; ax, es -> next arena
 36157                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36158                                  	;jc	short GLA_err
 36159                                  	; 17/12/2022
 36160 000063A8 7228                    	jc	short GLA_err2
 36161                                  
 36162 000063AA 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36163 000063B0 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is
 36164                                  					;    umb_head
 36165                                  					; N: terminating condition is 05Ah
 36166                                  
 36167 000063B2 26803D5A                	cmp     byte [es:di],arena_signature_end
 36168                                  					; Q: is this the last arena
 36169 000063B6 EB02                    	jmp	short GLA_@f
 36170                                  GLA_chkumb:
 36171 000063B8 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36172                                  GLA_@f:
 36173 000063BA 75E7                    	jne	short GLA_next		; N: get next arena
 36174                                  
 36175                                  GLA_done:
 36176                                  					; M061 - Start
 36177 000063BC 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36178 000063C2 750B                    	jnz	short GLA_ret		; Y: we're done
 36179                                  					; N: let us confirm that the next
 36180                                  					;    arena is umb_head
 36181 000063C4 8ED8                    	mov	ds,ax
 36182 000063C6 E85AFD                  	call	arena_next		; ax, es -> next arena
 36183                                  	;jc	short GLA_err
 36184 000063C9 7207                    	jc	short GLA_err2
 36185 000063CB 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36186 000063CD 7502                    	jne	short GLA_err		; N: error
 36187                                  					; M061 - End
 36188                                  GLA_ret:
 36189                                  	; 17/12/2022
 36190                                  	;clc
 36191                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36192                                  	;clc
 36193 000063CF 58                      	pop	ax			; M061
 36194 000063D0 C3                      	retn				; M061
 36195                                  
 36196                                  GLA_err:
 36197 000063D1 F9                      	stc				; M061
 36198                                  GLA_err2:
 36199 000063D2 58                      	pop	ax
 36200 000063D3 C3                      	retn
 36201                                  
 36202                                  ;============================================================================
 36203                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 36204                                  ;============================================================================
 36205                                  ; 04/08/2018 - Retro DOS v3.0
 36206                                  
 36207                                  ;	TITLE SRVCALL - Server DOS call
 36208                                  ;	NAME  SRVCALL
 36209                                  
 36210                                  ;**	SRVCALL.ASM - Server DOS call functions
 36211                                  ;
 36212                                  ;
 36213                                  ;	$ServerCall
 36214                                  ;
 36215                                  ;	Modification history:
 36216                                  ;
 36217                                  ;	    Created: ARR 08 August 1983
 36218                                  
 36219                                  ;AsmVars <Installed>
 36220                                  
 36221                                  ;include dpl.asm
 36222                                  
 36223                                  ;Installed = TRUE
 36224                                  
 36225                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36226                                  ; ---------------------------------------------------------------------------
 36227                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36228                                  
 36229                                  ;BREAK <ServerCall -- Server DOS call>
 36230                                  
 36231                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36232                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36233                                  
 36234                                  ;hkn; TABLE	SEGMENT
 36235                                  ;Public SRVC001S,SRVC001E
 36236                                  ;SRVC001S label byte
 36237                                  
 36238                                  SRVC001S:
 36239                                  
 36240 000063D4 [D863]                  SERVERTAB:	dw	SERVER_DISP
 36241 000063D6 [2A64]                  SERVERLEAVE:	dw	SERVERRETURN
 36242 000063D8 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36243 000063D9 [9064]                  		dw	SRV_CALL	; 0
 36244 000063DB [2B64]                  		dw	COMMIT_ALL	; 1
 36245 000063DD [6164]                  		dw	CLOSE_NAME	; 2
 36246 000063DF [6A64]                  		dw	CLOSE_UID	; 3
 36247 000063E1 [7164]                  		dw	CLOSE_UID_PID	; 4
 36248 000063E3 [7864]                  		dw	GET_LIST	; 5
 36249 000063E5 [D164]                  		dw	GET_DOS_DATA	; 6
 36250 000063E7 [F564]                  		dw	SPOOL_OPER	; 7
 36251 000063E9 [F564]                  		dw	SPOOL_OPER	; 8
 36252 000063EB [F564]                  		dw	SPOOL_OPER	; 9
 36253 000063ED [0165]                  		dw	_$SetExtendedError  ; 10
 36254                                  
 36255                                  SERVER_DISP_END:  ;  LABEL BYTE
 36256                                  
 36257                                  ;SRVC001E label byte
 36258                                  
 36259                                  SRVC001E:
 36260                                  
 36261                                  ;hkn; TABLE	ENDS
 36262                                  
 36263                                  ;----------------------------------------------------------------------------
 36264                                  ;
 36265                                  ; Procedure Name : $ServerCall
 36266                                  ;
 36267                                  ; Inputs:
 36268                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36269                                  ; Function:
 36270                                  ;	AL=0	Server DOS call
 36271                                  ;	AL=1	Commit All files
 36272                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36273                                  ;	AL=3	Close all files for DPL_UID
 36274                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36275                                  ;	AL=5	Get open file list entry
 36276                                  ;		    IN: BX File Index
 36277                                  ;			CX User Index
 36278                                  ;		    OUT:ES:DI -> Name
 36279                                  ;			BX = UID
 36280                                  ;		    CX = # locked blocks held by this UID
 36281                                  ;	AL=6	Get DOS data area
 36282                                  ;		    OUT: DS:SI -> Start
 36283                                  ;			CX size in bytes of swap if indos
 36284                                  ;			DX size in bytes of swap always
 36285                                  ;	AL=7	Get truncate flag
 36286                                  ;	AL=8	Set truncate flag
 36287                                  ;	AL=9	Close all spool files
 36288                                  ;	AL=10	SetExtendedError
 36289                                  ;
 36290                                  ;----------------------------------------------------------------------------
 36291                                  
 36292                                  _$ServerCall:
 36293                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36294                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36295                                  	; 10/06/2019
 36296                                  	; 29/04/2019 - Retro DOS v4.0
 36297                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36298                                  
 36299                                  	; 05/08/2018 - Retro DOS v3.0
 36300                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36301 000063EF 3C07                    	CMP	AL,7
 36302 000063F1 7204                    	JB	short SET_STUFF
 36303 000063F3 3C09                    	CMP	AL,9
 36304 000063F5 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36305                                  SET_STUFF:
 36306 000063F7 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36307                                  	;mov	bx,[si+12h]
 36308 000063F9 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36309                                  
 36310                                  	; MSDOS 6.0
 36311                                  ;SR;
 36312                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36313                                  ; of USER_ID
 36314                                  
 36315 000063FC 36F606[3010]01          	test	byte [SS:IsWin386],1
 36316 00006402 7505                    	jnz	short skip_win386
 36317                                  
 36318                                  ;hkn; SS override for user_id and proc_id
 36319                                  	; 15/08/2018
 36320 00006404 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36321                                  
 36322                                  skip_win386:
 36323 00006409 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36324 0000640C 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36325                                  NO_SET_ID:
 36326                                  	; 10/06/2019 - Retro DOS v4.0
 36327 00006411 2EFF36[D663]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36328 00006416 2EFF36[D463]            	PUSH	word [cS:SERVERTAB]	; push table address
 36329 0000641B 50                      	PUSH	AX
 36330 0000641C E8E6AD                  	call	TableDispatch
 36331                                  
 36332                                  ;hkn; SS override
 36333                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36334 0000641F 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36335                                  	;error	error_invalid_function
 36336                                  	;mov	al,1
 36337 00006425 B001                    	MOV	AL,error_invalid_function
 36338                                  servercall_error:
 36339 00006427 E914A2                  	JMP	SYS_RET_ERR
 36340                                  
 36341                                  SERVERRETURN:
 36342 0000642A C3                      	retn
 36343                                  
 36344                                  ; Commit - iterate through the open file list and make sure that the
 36345                                  ; directory entries are correctly updated.
 36346                                  
 36347                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36348                                  COMMIT_ALL:
 36349 0000642B 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36350 0000642D 16                      	push	ss
 36351 0000642E 1F                      	pop	ds
 36352 0000642F E8C0AE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36353                                  CommitLoop:
 36354 00006432 53                      	push	bx
 36355 00006433 E82201                  	call	SFFromSFN
 36356 00006436 7222                    	JC	short CommitDone
 36357 00006438 26833D00                	cmp	word [es:di],0
 36358                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36359                                  					; if (ThisSFT->refcount != 0)
 36360 0000643C 7418                    	JZ	short CommitNext
 36361                                  	;cmp	word [es:di],0FFFFh ; -1
 36362 0000643E 26833DFF                	cmp	word [ES:DI],sf_busy
 36363                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36364                                  					; BUSY SFTs have god knows what
 36365 00006442 7412                    	JZ	short CommitNext	;   in them.
 36366                                  	; 17/12/2022
 36367 00006444 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36368                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36369 00006449 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36370                                  					;	doesn't deadlock
 36371 0000644B 893E[9E05]              	MOV	[THISSFT],DI
 36372 0000644F 8C06[A005]              	MOV	[THISSFT+2],ES
 36373 00006453 E896CB                  	call	DOS_COMMIT		;	DOSCommit ();
 36374                                  CommitNext:
 36375 00006456 5B                      	pop	bx
 36376 00006457 43                      	INC	BX
 36377 00006458 EBD8                    	JMP	short CommitLoop
 36378                                  CommitDone:
 36379 0000645A E8B0AE                  	call	LCritSFT
 36380 0000645D 5B                      	pop	bx
 36381                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36382                                  Commit_Ok:
 36383 0000645E E9D4A1                  	jmp	SYS_RET_OK
 36384                                  	
 36385                                  CLOSE_NAME:
 36386                                  
 36387                                  ;if installed
 36388                                  
 36389                                  ;hkn; SS override
 36390                                  	;call	far [ss:MFTcloN]
 36391 00006461 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36392                                  ;else
 36393                                  ;	Call	MFTcloN
 36394                                  ;endif
 36395                                  
 36396                                  CheckReturns:
 36397                                  
 36398                                  ; 10/03/2024
 36399                                  %if 0
 36400                                  	JC	short func_err
 36401                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36402                                  	;transfer SYS_RET_OK
 36403                                  Commit_Okj:
 36404                                  	jmp	short Commit_Ok
 36405                                  	;jmp	SYS_RET_OK
 36406                                  %else
 36407 00006466 73F6                    	jnc	short Commit_Ok
 36408                                  %endif
 36409                                  
 36410                                  func_err:
 36411                                  	;transfer SYS_RET_ERR
 36412                                  	;jmp	SYS_RET_ERR
 36413 00006468 EBBD                    	jmp	short servercall_error
 36414                                  
 36415                                  CLOSE_UID:
 36416                                  
 36417                                  ;if installed
 36418                                  ;hkn; SS override
 36419                                  	;call	far [ss:MFTclU]
 36420 0000646A 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36421                                  ;else
 36422                                  ;	Call	MFTclU
 36423                                  ;endif
 36424 0000646F EBF5                    	JMP	short CheckReturns
 36425                                  
 36426                                  CLOSE_UID_PID:
 36427                                  
 36428                                  ;if installed
 36429                                  ;hkn; SS override
 36430                                  	;call	far [ss:MFTCloseP]
 36431 00006471 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP
 36432                                  ;else
 36433                                  ;	Call	MFTCloseP
 36434                                  ;endif
 36435 00006476 EBEE                    	JMP	short CheckReturns
 36436                                  
 36437                                  GET_LIST:
 36438                                  
 36439                                  ;if installed
 36440                                  ;hkn; SS override
 36441                                  	;call	far [ss:MFT_get]
 36442 00006478 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36443                                  ;else
 36444                                  ;	Call	MFT_get
 36445                                  ;endif
 36446 0000647D 72E9                    	JC	short func_err
 36447 0000647F E803A0                  	call	Get_User_Stack
 36448                                  	;mov	[si+2],bx
 36449 00006482 895C02                  	MOV	[SI+user_env.user_BX],BX
 36450                                  	;mov	[si+10],di
 36451 00006485 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36452                                  	;mov	[si+16],es
 36453 00006488 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36454                                  SetCXOK:
 36455                                  	;mov	[si+4],cx
 36456 0000648B 894C04                  	MOV	[SI+user_env.user_CX],CX
 36457                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36458                                  	;transfer SYS_RET_OK
 36459                                  Commit_Okj2:
 36460                                  	; 17/12/2022
 36461 0000648E EBCE                    	jmp	short Commit_Ok
 36462                                  	;jmp	short Commit_Okj
 36463                                  	;;jmp	SYS_RET_OK
 36464                                  
 36465                                  SRV_CALL:
 36466 00006490 58                      	POP	AX			; get rid of call to $srvcall
 36467 00006491 1E                      	push	ds
 36468 00006492 56                      	push	si
 36469 00006493 E8EF9F                  	call	Get_User_Stack
 36470 00006496 5F                      	pop	di
 36471 00006497 07                      	pop	es
 36472                                  
 36473                                  ; DS:SI point to stack
 36474                                  ; ES:DI point to DPL
 36475                                  
 36476 00006498 E849AD                  	call	XCHGP
 36477                                  
 36478                                  ; DS:SI point to DPL
 36479                                  ; ES:DI point to stack
 36480                                  ;
 36481                                  ; We now copy the registers from DPL to save stack
 36482                                  
 36483 0000649B 56                      	push	si
 36484 0000649C B90600                  	MOV	CX,6
 36485 0000649F F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36486 000064A1 47                      	INC	DI
 36487 000064A2 47                      	INC	DI			; Skip user_BP
 36488 000064A3 A5                      	MOVSW				; DS
 36489 000064A4 A5                      	MOVSW				; ES
 36490 000064A5 5E                      	pop	si			; DS:SI -> DPL
 36491 000064A6 8B04                    	mov	ax,[SI]
 36492                                  	;MOV	AX,[SI+DPL.AX]
 36493                                  	;mov	bx,[si+2]
 36494 000064A8 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36495                                  	;mov	cx,[si+4]
 36496 000064AB 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36497                                  	;mov	dx,[si+6]
 36498 000064AE 8B5406                  	MOV	DX,[SI+DPL.DX]
 36499                                  	;mov	di,[si+10]
 36500 000064B1 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36501                                  	;mov	es,[si+14]
 36502 000064B4 8E440E                  	MOV	ES,[SI+DPL.ES]
 36503                                  	;push	word [si+8]
 36504 000064B7 FF7408                  	PUSH	word [SI+DPL.SI]
 36505                                  	;mov	ds,[si+12]
 36506 000064BA 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36507 000064BD 5E                      	POP	SI
 36508                                  
 36509                                  ;hkn; SS override for next 3
 36510 000064BE 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36511 000064C3 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36512 000064C8 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36513 000064CE E9B69E                  	jmp	REDISP
 36514                                  
 36515                                  GET_DOS_DATA:
 36516 000064D1 16                      	push	ss
 36517 000064D2 07                      	pop	es
 36518 000064D3 BF[2003]                	MOV     DI,SWAP_START
 36519 000064D6 B9[AC0A]                	MOV     CX,SWAP_END
 36520 000064D9 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36521 000064DC 29F9                    	SUB     CX,DI
 36522 000064DE 29FA                    	SUB     DX,DI
 36523 000064E0 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36524 000064E2 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36525 000064E5 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36526 000064E7 E89B9F                  	call	Get_User_Stack
 36527                                  	;mov	[si+14],es
 36528 000064EA 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36529                                  	;mov	[si+8],di
 36530 000064ED 897C08                  	MOV     [SI+user_env.user_SI],DI
 36531                                  	;mov	[si+6],dx
 36532 000064F0 895406                  	MOV     [SI+user_env.user_DX],DX
 36533 000064F3 EB96                    	JMP	short SetCXOK
 36534                                  
 36535                                  SPOOL_OPER:
 36536                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36537                                  
 36538 000064F5 50                      	push    ax
 36539 000064F6 B82511                  	mov     ax,1125h
 36540 000064F9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36541                                  			; STACK: WORD subfunction
 36542                                  			; Return: CF set on error, AX = error code
 36543                                  			; STACK unchanged
 36544 000064FB 5B                      	pop	bx
 36545                                  	; 17/12/2022
 36546                                  	;JC	short func_err2
 36547 000064FC 7390                    	jnc	short Commit_Okj2
 36548                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36549                                  	;;jmp	SYS_RET_OK
 36550                                  	;jmp	short Commit_Okj2
 36551                                  	
 36552                                  func_err2:
 36553 000064FE E93DA1                  	jmp	SYS_RET_ERR
 36554                                  
 36555                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36556                                  ;--------------------------------------------------------------------------
 36557                                  ;
 36558                                  ; Procedure Name : $SetExtendedError
 36559                                  ;
 36560                                  ; $SetExtendedError takes extended error information and loads it up for the
 36561                                  ; next extended error call. This is used by interrupt-level proccessors to
 36562                                  ; mask their actions.
 36563                                  ;
 36564                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36565                                  ;   Outputs: none
 36566                                  ;
 36567                                  ;---------------------------------------------------------------------------
 36568                                  
 36569                                  _$SetExtendedError:
 36570                                  
 36571                                  ;hkn; SS override for all variables used
 36572                                  
 36573 00006501 8B04                    	mov	ax,[si]
 36574                                  	;MOV	AX,[SI+DPL.AX]
 36575 00006503 36A3[2403]              	MOV	[SS:EXTERR],AX
 36576                                  	;mov	ax,[si+10]
 36577 00006507 8B440A                  	MOV	AX,[SI+DPL.DI]
 36578 0000650A 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36579                                  	;mov	ax,[si+14]
 36580 0000650E 8B440E                  	MOV	AX,[SI+DPL.ES]
 36581 00006511 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36582                                  	;mov	ax,[si+2]
 36583 00006515 8B4402                  	MOV	AX,[SI+DPL.BX]
 36584 00006518 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36585                                  	;mov	ax,[si+4]
 36586 0000651C 8B4404                  	MOV	AX,[SI+DPL.CX]
 36587 0000651F 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36588 00006524 C3                      	retn
 36589                                  
 36590                                  ;============================================================================
 36591                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36592                                  ;============================================================================
 36593                                  ; 05/08/2018 - Retro DOS v3.0
 36594                                  ; 05/05/2019 - Retro DOS v4.0
 36595                                  
 36596                                  ;**	Handle related utilities for MSDOS 2.X.
 36597                                  ;----------------------------------------------------------------------------
 36598                                  ;	pJFNFromHandle	written
 36599                                  ;	SFFromHandle	written
 36600                                  ;	SFFromSFN	written
 36601                                  ;	JFNFree 	written
 36602                                  ;	SFNFree 	written
 36603                                  ;
 36604                                  ;	Modification history:
 36605                                  ;
 36606                                  ;	    Created: MZ 1 April 1983
 36607                                  ;----------------------------------------------------------------------------
 36608                                  
 36609                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36610                                  
 36611                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36612                                  ;----------------------------------------------------------------------------
 36613                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36614                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36615                                  ;
 36616                                  ;	NOTE:
 36617                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36618                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36619                                  ;
 36620                                  ;	ENTRY	(bx) = handle
 36621                                  ;	EXIT	'C' clear if ok
 36622                                  ;		  (es:di) = address of JFN value
 36623                                  ;		'C' set if error
 36624                                  ;		  (ax) = error code
 36625                                  ;	USES	AX, DI, ES, Flags
 36626                                  ;----------------------------------------------------------------------------
 36627                                  
 36628                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36629                                  
 36630                                  pJFNFromHandle:
 36631                                  	; 05/05/2019 - Retro DOS v4.0
 36632                                  	;getdseg <es>			; es -> dosdata
 36633 00006525 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36634                                  	
 36635                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36636 0000652A 268E06[3003]            	mov	es,[es:CurrentPDB]
 36637                                  
 36638                                  	;cmp	bx,[ES:32h]
 36639 0000652F 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36640 00006534 7204                    	JB	short pjfn10		; no, get offset
 36641                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36642                                  	;mov	al,6
 36643 00006536 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36644                                  ReturnCarry:
 36645 00006538 F9                      	STC                             ; signal error
 36646 00006539 C3                      	retn				; go back
 36647                                  pjfn10: 
 36648                                  	;les	di,[es:34h]
 36649 0000653A 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36650 0000653F 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36651                                  	;clc
 36652                                  pJFNFromHandle_error:
 36653 00006541 C3                      	retn
 36654                                  
 36655                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36656                                  ;----------------------------------------------------------------------------
 36657                                  ;
 36658                                  ; Procedure Name : SFFromHandle
 36659                                  ;
 36660                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36661                                  ;
 36662                                  ;   Input:      BX has handle
 36663                                  ;   Output:     Carry Set
 36664                                  ;                   AX has error code
 36665                                  ;               Carry Reset
 36666                                  ;                   ES:DI has pointer to SF entry
 36667                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36668                                  ; NOTE:
 36669                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36670                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36671                                  ;
 36672                                  ;----------------------------------------------------------------------------
 36673                                  
 36674                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36675                                  
 36676                                  SFFromHandle:
 36677 00006542 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36678                                  	;retc				; return if error
 36679 00006545 72FA                    	jc	short pJFNFromHandle_error
 36680 00006547 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36681                                  	;JNZ	short GetSF		; nope, suck out SF
 36682                                  	;;mov	al,6
 36683                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36684                                  	;jmp	short ReturnCarry	; signal it
 36685                                  	; 17/12/2022
 36686                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36687 0000654B 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36688                                  	;JNZ	short GetSF		; nope, suck out SF
 36689                                  	;;mov	al,6
 36690                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36691                                  	;jmp	short ReturnCarry	; signal it
 36692                                  GetSF:
 36693 0000654D 53                      	push	bx			; save handle
 36694 0000654E 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36695 00006551 30FF                    	XOR     BH,BH                   ; ignore upper half
 36696 00006553 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36697 00006556 5B                      	pop	bx			; restore
 36698 00006557 C3                      	retn                        	; say goodbye
 36699                                  
 36700                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36701                                  
 36702                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36703                                  ;----------------------------------------------------------------------------
 36704                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36705                                  ;	is more than just a simple index instruction because the SF table
 36706                                  ;	can be made up of multiple pieces chained together. We follow the
 36707                                  ;	chain to the right piece and then do the index operation.
 36708                                  ;
 36709                                  ;   NOTE:
 36710                                  ;	This routine is called from SFFromHandle which is called
 36711                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36712                                  ;
 36713                                  ;	ENTRY	BX has SF index
 36714                                  ;	EXIT	'C' clear if OK
 36715                                  ;		  ES:DI points to SF entry
 36716                                  ;		'C' set if index too large
 36717                                  ;	USES	BX, DI, ES
 36718                                  ;----------------------------------------------------------------------------
 36719                                  
 36720                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36721                                  
 36722                                  SFFromSFN:
 36723                                  	; 05/05/2019 - Retro DOS v4.0
 36724                                  	;getdseg <es>			; es -> dosdata
 36725 00006558 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36726                                  
 36727                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36728 0000655D 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36729                                  sfsfn5:	
 36730                                  	;cmp	bx,[es:di+4]
 36731 00006562 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36732 00006566 720E                    	JB	short sfsfn7		; yes, go grab it
 36733                                  	;sub	bx,[es:di+4]
 36734 00006568 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36735 0000656C 26C43D                  	les	di,[es:di] ; 14/08/2018
 36736                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36737 0000656F 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36738 00006572 75EE                    	JNZ	short sfsfn5		; no, try again
 36739 00006574 F9                      	STC
 36740 00006575 C3                      	retn				; return with error, not found
 36741                                  sfsfn7:
 36742 00006576 50                      	push	ax
 36743                                  	;mov	ax,53 ; MSDOS 3.3
 36744                                  	;mov	ax,59 ; MSDOS 6.0
 36745                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36746                                  	
 36747                                  	; 17/12/2022
 36748 00006577 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36749                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36750                                  	;mov	ax,SF_ENTRY.size ; 59
 36751                                  	
 36752 00006579 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36753 0000657B 01C7                    	ADD	DI,AX			; add base of SF block
 36754 0000657D 58                      	pop	ax
 36755                                  	;add	di,6
 36756 0000657E 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36757 00006581 C3                      	retn				; return with 'C' clear
 36758                                  
 36759                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36760                                  
 36761                                  ;**	JFNFree - Find a Free JFN Slot
 36762                                  ;----------------------------------------------------------------------------
 36763                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36764                                  ;
 36765                                  ;	ENTRY	(ss) = DOSDATA
 36766                                  ;	EXIT	'C' clear if OK
 36767                                  ;		  (bx) = new handle
 36768                                  ;		  (es:di) = pointer to JFN slot
 36769                                  ;		'C' set if error
 36770                                  ;		  (al) = error code
 36771                                  ;	USES	bx, di, es, flags
 36772                                  ;----------------------------------------------------------------------------
 36773                                  
 36774                                  JFNFree:
 36775 00006582 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36776                                  jfnf1:	
 36777 00006584 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36778 00006587 7209                    	JC	short jfnf5		; no more handles
 36779 00006589 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36780 0000658D 7405                    	je	short jfnfx		; yes, carry is clear
 36781 0000658F 43                      	INC     BX                      ; no, next handle
 36782 00006590 EBF2                    	JMP	short jfnf1		; and try again
 36783                                  
 36784                                  	; Error. 'C' set
 36785                                  jfnf5:	
 36786                                  	;mov	al,4
 36787 00006592 B004                    	MOV	AL,error_too_many_open_files
 36788                                  jfnfx:	
 36789 00006594 C3                      	retn				; bye
 36790                                  
 36791                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36792                                  
 36793                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36794                                  ;----------------------------------------------------------------------------
 36795                                  ;	SFNFree scans through the sf table looking for a free entry
 36796                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36797                                  ;
 36798                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36799                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36800                                  ;	we can't just mark it busy because we may get blown out of our open
 36801                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36802                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36803                                  ;	an SFT with this value we look to see if it belongs to this user
 36804                                  ;	and process.  If it does belong to us then it must be an orphan
 36805                                  ;	and we reclaim it.
 36806                                  ;
 36807                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36808                                  ;		over and over, but we could at least set a high water mark...
 36809                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36810                                  ;		even though this is not a frequently called routine - jgl
 36811                                  ;
 36812                                  ;	ENTRY	(ss) = DOSDATA
 36813                                  ;	EXIT	'C' clear if no error
 36814                                  ;		  (bx) = SFN
 36815                                  ;		  (es:di) = pointer to SFT
 36816                                  ;		  es:[di].SFT_REF_COUNT = -1
 36817                                  ;		'C' set if error
 36818                                  ;		  (al) = error code
 36819                                  ;	USES	bx, di, es, Flags
 36820                                  ;----------------------------------------------------------------------------
 36821                                  
 36822                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36823                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36824                                  
 36825                                  SFNFree:
 36826                                  	; 12/08/2018
 36827                                  	; 05/08/2018 - Retro DOS v3.0
 36828                                  	;
 36829                                  	; MSDOS 6.0
 36830 00006595 50                      	push	ax
 36831 00006596 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36832                                  sfnf5:	
 36833 00006598 53                      	push	bx
 36834 00006599 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36835 0000659C 5B                      	pop	bx
 36836 0000659D 723A                    	jc	short sfnf95		; no more free SFNs
 36837 0000659F 26833D00                	cmp	word [ES:DI],0
 36838                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36839 000065A3 741D                    	je	short sfnf20			; yep, got one
 36840                                  	
 36841                                  	;cmp	word [es:di],0FFFFh ; -1
 36842 000065A5 26833DFF                	cmp	word [ES:DI],sf_busy
 36843                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36844 000065A9 7403                    	je	short sfnf10		; special busy mark
 36845                                  sfnf7:	
 36846 000065AB 43                      	inc	bx			; try the next one
 36847 000065AC EBEA                    	jmp	short sfnf5
 36848                                  
 36849                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36850                                  ;	it was abandoned during a earlier call and we can use it.
 36851                                  ;
 36852                                  ;	(bx)	= SFN
 36853                                  ;	(es:di) = pointer to SFT
 36854                                  ;	(TOS)	= caller's (ax)
 36855                                  
 36856                                  sfnf10:	
 36857 000065AE 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36858                                  	;cmp	[es:di+2Fh],ax
 36859 000065B2 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36860 000065B6 75F3                    	jnz	short sfnf7		; not ours
 36861 000065B8 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36862                                  	;cmp	[es:di+31h],ax
 36863 000065BC 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36864 000065C0 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36865                                  
 36866                                  ;	We have an SFT to allocate
 36867                                  ;
 36868                                  ;	(bx)	= SFN
 36869                                  ;	(es:di) = pointer to SFT
 36870                                  ;	(TOS)	= caller's (ax)
 36871                                  
 36872                                  sfnf20:
 36873                                  	; cf = 0 ;; Retro DOS v3.0
 36874                                  
 36875                                  	;mov	word [es:di],0FFFFh
 36876 000065C2 26C705FFFF              	mov	word [ES:DI],sf_busy
 36877                                  					; make sure that this is allocated
 36878                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36879                                  
 36880 000065C7 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36881                                  	;mov	[es:di+2Fh],ax
 36882 000065CB 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36883 000065CF 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36884                                  	;mov	[es:di+31h],ax
 36885 000065D3 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36886                                  sfnf21: ;; Retro DOS v3.0
 36887                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36888                                  	;pop	ax
 36889                                  	;;clc
 36890                                  	;retn				; return with no error
 36891                                  	; 17/12/2022
 36892 000065D7 58                      	pop	ax
 36893                                  	;clc
 36894 000065D8 C3                      	retn
 36895                                  
 36896                                  ;**	Error - no more free SFNs
 36897                                  ;
 36898                                  ;	'C' set
 36899                                  ;	(TOS) = saved ax
 36900                                  
 36901                                  sfnf95: 
 36902 000065D9 58                      	pop	ax
 36903                                  
 36904                                  ; 11/03/2024
 36905                                  %if 0
 36906                                  	;mov	al,4
 36907                                  	mov	al,error_too_many_open_files
 36908                                  	retn				; return with 'C' and error
 36909                                  %else
 36910                                  	; 11/03/2024
 36911 000065DA EBB6                    	jmp	short jfnf5
 36912                                  %endif
 36913                                  
 36914                                  ;============================================================================
 36915                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36916                                  ;============================================================================
 36917                                  ; 13/07/2018 - Retro DOS v3.0
 36918                                  ; 20/05/2019 - Retro DOS v4.0
 36919                                  
 36920                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36921                                  
 36922                                  ;	BREAK <$Close - return a handle to the system>
 36923                                  ;----------------------------------------------------------------------------
 36924                                  ;
 36925                                  ;**	$Close - Close a file Handle
 36926                                  ;
 36927                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36928                                  ;		path
 36929                                  ;
 36930                                  ;	Assembler usage:
 36931                                  ;	    MOV     BX, handle
 36932                                  ;	    MOV     AH, Close
 36933                                  ;	    INT     int_command
 36934                                  ;
 36935                                  ;	ENTRY	(bx) = handle
 36936                                  ;	EXIT	<normal INT21 return convention>
 36937                                  ;	USES	all
 36938                                  ;
 36939                                  ;----------------------------------------------------------------------------
 36940                                  
 36941                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36942                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36943                                  
 36944                                  _$CLOSE:
 36945                                  ;	Grab the SFT pointer from the JFN.
 36946                                  
 36947 000065DC E84902                  	call	CheckOwner		; get system file entry
 36948 000065DF 722B                    	jc	short CloseError	; error return
 36949 000065E1 16                      	push	ss
 36950 000065E2 1F                      	pop	ds			; For DOS_CLOSE
 36951 000065E3 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36952 000065E7 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36953                                  
 36954                                  ; DS:SI point to JFN table entry.
 36955                                  ; ES:DI point to SFT
 36956                                  ;
 36957                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36958                                  ; FCB, we examine the ref count on the SFT; if it was 1, we free the JFN.
 36959                                  ; If the file was not a net FCB, we free the JFN too.
 36960                                  
 36961                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36962 000065EB 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36963 000065EF 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36964                                  	;mov	al,[ES:DI+2]
 36965 000065F1 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36966                                  	;and	al,0F0h
 36967 000065F5 24F0                    	AND	AL,SHARING_MASK
 36968                                  	;cmp	al,70h
 36969 000065F7 3C70                    	CMP	AL,SHARING_NET_FCB
 36970 000065F9 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36971                                  
 36972                                  ; The JFN must be freed. Get the pointer to it and replace the contents with
 36973                                  ; -1.
 36974                                  
 36975                                  FreeJFN:
 36976 000065FB E827FF                  	call	pJFNFromHandle		; d = pJFN (handle);
 36977 000065FE 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36978                                  PostFree:
 36979                                  
 36980                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36981                                  
 36982 00006602 E8A5C8                  	call	DOS_CLOSE
 36983                                  
 36984                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36985                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36986                                  
 36987 00006605 7205                    	JC	short CloseError
 36988                                  	;mov	ah,3Eh
 36989 00006607 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36990                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36991                                  CloseOk:
 36992 00006609 E929A0                  	jmp	SYS_RET_OK
 36993                                  CloseError:
 36994                                  CommitError:	; 11/03/2024
 36995 0000660C E92FA0                  	jmp	SYS_RET_ERR
 36996                                  
 36997                                  ;	BREAK <$Commit - commit the file>
 36998                                  ;----------------------------------------------------------------------------
 36999                                  ;
 37000                                  ;**	$Commit - Commit a File
 37001                                  ;
 37002                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 37003                                  ;	flushed out. BUGBUG - I'm pretty sure that $Commit doesn't update
 37004                                  ;	the directory entry, etc., so this commit is pretty useless. check
 37005                                  ;	and fix this!! jgl
 37006                                  ;
 37007                                  ;	Assembler usage:
 37008                                  ;	    MOV     BX, handle
 37009                                  ;	    MOV     AH, Commit
 37010                                  ;	    INT     int_command
 37011                                  ;
 37012                                  ;	ENTRY	(bx) = handle
 37013                                  ;	EXIT	none
 37014                                  ;	USES	all
 37015                                  ;;----------------------------------------------------------------------------
 37016                                  
 37017                                  _$COMMIT:
 37018                                  ;	Grab the SFT pointer from the JFN.
 37019                                  
 37020 0000660F E81602                  	call	CheckOwner		; get system file entry
 37021                                  	;JC	short CommitError	; error return
 37022                                  	; 11/03/2024
 37023 00006612 72F8                    	jc	short CommitError
 37024                                  
 37025 00006614 16                      	push	ss
 37026 00006615 1F                      	pop	ds			; For DOS_COMMIT
 37027 00006616 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37028 0000661A 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37029                                  
 37030                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 37031                                  ;
 37032                                  ;	ES:DI point to SFT
 37033                                  
 37034 0000661E E8CBC9                  	call	DOS_COMMIT
 37035 00006621 72E9                    	JC	short CommitError
 37036                                  	; 07/12/2022
 37037                                  	;jc	short CloseError
 37038                                  	;mov	ah,68h
 37039 00006623 B468                    	MOV	AH,COMMIT
 37040                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37041                                  	;jmp	SYS_RET_OK
 37042                                  CommitOk:
 37043 00006625 EBE2                    	jmp	short CloseOk
 37044                                  
 37045                                  ; 11/03/2024
 37046                                  ;CommitError:
 37047                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37048                                  ;	;jmp	SYS_RET_ERR
 37049                                  ;	jmp	short CloseError
 37050                                  
 37051                                  ;	BREAK <$ExtHandle - extend handle count>
 37052                                  
 37053                                  ;**	$ExtHandle - Extend Handle Count
 37054                                  ;----------------------------------------------------------------------------
 37055                                  ;	Assembler usage:
 37056                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 37057                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 37058                                  ;	    INT     int_command 		 busy )
 37059                                  ;
 37060                                  ;	ENTRY	(bx) = new number of handles
 37061                                  ;	EXIT	'C' clear if OK
 37062                                  ;		'C' set iff err
 37063                                  ;		  (ax) = error code
 37064                                  ;			 AX = error_not_enough_memory
 37065                                  ;			      error_too_many_open_files
 37066                                  ;	USES	all
 37067                                  ;----------------------------------------------------------------------------
 37068                                  
 37069                                  _$ExtHandle:
 37070 00006627 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 37071                                  	;cmp	bx,20
 37072 00006629 83FB14                  	CMP	BX,FILPERPROC
 37073 0000662C 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 37074 0000662E BB1400                  	MOV	BX,FILPERPROC
 37075                                  exth2:	
 37076 00006631 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 37077                                  	;mov	cx,[ES:32h]
 37078 00006636 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 37079 0000663B 39CB                    	CMP	BX,CX			; the requested == current
 37080                                  	;JE	short ok_done 		; yes and exit
 37081                                  	; 11/03/2024
 37082 0000663D 74CA                    	je	short CloseOk
 37083 0000663F 771E                    	JA	short larger		; go allocate new table
 37084                                  
 37085                                  ;	We're going to shrink the # of handles available
 37086                                  
 37087                                  	;MOV	BP,1			; shrink
 37088                                  	; 11/03/2024
 37089 00006641 45                      	inc	bp
 37090                                  	;mov	ds,[ES:36h]
 37091 00006642 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 37092 00006647 89DE                    	MOV	SI,BX			;
 37093 00006649 29D9                    	SUB	CX,BX			; get difference
 37094                                  
 37095                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 37096                                  chck_handles:
 37097 0000664B 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 37098 0000664E 753B                    	JNZ	short too_many_files	; status
 37099 00006650 46                      	INC	SI
 37100 00006651 E2F8                    	LOOP	chck_handles
 37101 00006653 83FB14                  	CMP	BX,FILPERPROC		; = 20
 37102 00006656 7707                    	JA	short larger		; no
 37103                                  
 37104                                  	;MOV	BP,2			; psp
 37105                                  	; 11/03/2024
 37106 00006658 45                      	inc	bp
 37107                                  	;mov	di,24
 37108 00006659 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 37109 0000665C 53                      	PUSH	BX
 37110 0000665D EB1D                    	JMP	short movhandl
 37111                                  
 37112                                  larger:
 37113 0000665F 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 37114 00006662 747D                    	JZ	short invalid_func	; 10/08/2018
 37115 00006664 F8                      	CLC
 37116 00006665 53                      	PUSH	BX			; save requested number
 37117 00006666 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 37118 00006669 B104                    	MOV	CL,4
 37119                                  	;ror	bx,cl			; MSDOS 3.3
 37120 0000666B D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 37121 0000666D 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 37122                                  
 37123 00006671 55                      	PUSH	BP
 37124 00006672 E8E7FA                  	call	_$ALLOC			; allocate memory
 37125 00006675 5D                      	POP	BP
 37126 00006676 7264                    	JC	short no_memory		; not enough memory
 37127                                  
 37128 00006678 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 37129 0000667A 31FF                    	XOR	DI,DI
 37130                                  movhandl:
 37131 0000667C 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 37132                                  
 37133 00006681 F7C50300                	test	BP,3			; enlarge ?
 37134 00006685 7409                    	JZ	short enlarge 		; yes
 37135 00006687 59                      	POP	CX			; cx = the amount you shrink
 37136 00006688 51                      	PUSH	CX
 37137 00006689 EB09                    	JMP	short copy_hand
 37138                                  
 37139                                  ;	Done.  'C' clear
 37140                                  
 37141                                  ; 17/12/2022
 37142                                  ;ok_done:
 37143                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37144                                  ;	;jmp	short CommitOk
 37145                                  ;	; 17/12/2022
 37146                                  ;	jmp	SYS_RET_OK
 37147                                  
 37148                                  too_many_files:
 37149                                  	;mov	al,4
 37150 0000668B B004                    	MOV	AL,error_too_many_open_files
 37151                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37152                                  	;jmp	SYS_RET_ERR
 37153                                  CommitErrorj:
 37154                                  	;jmp	short CommitError
 37155                                  	; 17/12/2022
 37156 0000668D E9AE9F                  	jmp	SYS_RET_ERR
 37157                                  
 37158                                  ; 11/03/2024
 37159                                  ; 17/12/2022
 37160                                  ;ok_done:
 37161                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37162                                  ;	;jmp	short CommitOk
 37163                                  ;	; 17/12/2022
 37164                                  ;	jmp	SYS_RET_OK
 37165                                  
 37166                                  enlarge:
 37167                                  	;mov	cx,[32h]
 37168 00006690 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 37169                                  copy_hand:
 37170 00006694 89CA                    	MOV	DX,CX
 37171                                  	;lds	si,[34h]
 37172 00006696 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 37173 0000669A F3A4                    	REP	MOVSB			; copy information to new table
 37174 0000669C 59                      	POP	CX			; get new number of handles
 37175 0000669D 51                      	PUSH	CX			; save it again
 37176 0000669E 29D1                    	SUB	CX,DX			; get the difference
 37177 000066A0 B0FF                    	MOV	AL,-1			; set availability to handles
 37178 000066A2 F3AA                    	REP	STOSB
 37179 000066A4 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 37180                                  	;cmp	word [34h],0
 37181 000066A9 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 37182 000066AE 750D                    	JNZ	short update_info	; yes, go update PDB entries
 37183 000066B0 55                      	PUSH	BP
 37184 000066B1 1E                      	PUSH	DS			; save old table segment
 37185 000066B2 06                      	PUSH	ES			; save new table segment
 37186 000066B3 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 37187 000066B7 E81CFC                  	call	_$DEALLOC		; deallocate old table memory
 37188 000066BA 07                      	POP	ES			; restore new table segment
 37189 000066BB 1F                      	POP	DS			; restore old table segment
 37190 000066BC 5D                      	POP	BP
 37191                                  
 37192                                  update_info:
 37193 000066BD F7C50200                	test	BP,2			; psp?
 37194 000066C1 7408                    	JZ	short non_psp 		; no
 37195                                  	;mov	word [34h],18h ; 24
 37196 000066C3 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 37197 000066C9 EB06                    	JMP	short final
 37198                                  non_psp:
 37199                                  	;mov	word [34h],0
 37200 000066CB C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 37201                                  final:
 37202                                  	;mov	[36h],es	
 37203 000066D1 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 37204                                  	;pop	word [32h]
 37205 000066D5 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 37206                                  	; 11/03/2024
 37207                                  ok_done:
 37208                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37209 000066D9 E9599F                  	jmp	SYS_RET_OK
 37210                                  ;ok_done_j:
 37211                                  ;	jmp	short ok_done
 37212                                  
 37213                                  no_memory:
 37214 000066DC 5B                      	POP	BX			; clean stack
 37215                                  	;mov	al,8
 37216 000066DD B008                    	MOV	AL,error_not_enough_memory
 37217                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37218                                  	;jmp	SYS_RET_ERR
 37219                                  CommitErrorj2:
 37220 000066DF EBAC                    	jmp	short CommitErrorj
 37221                                  
 37222                                  invalid_func:
 37223                                  	;mov	al,1
 37224 000066E1 B001                    	MOV	AL,error_invalid_function
 37225                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37226                                  	;jmp	SYS_RET_ERR
 37227                                  CommitErrorj3:
 37228                                  	;jmp	short CommitErrorj2
 37229                                  	; 17/12/2022
 37230 000066E3 EBA8                    	jmp	short CommitErrorj
 37231                                  
 37232                                  ; 20/05/2019 - Retro DOS v4.0
 37233                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 37234                                  
 37235                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37236                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 37237                                  
 37238                                  ;	BREAK <$READ - Read from a file handle>
 37239                                  ;----------------------------------------------------------------------------
 37240                                  ;
 37241                                  ;**	$Read - Read from a File Handle
 37242                                  ;
 37243                                  ;   Assembler usage:
 37244                                  ;
 37245                                  ;	LDS	DX, buf
 37246                                  ;	MOV	CX, count
 37247                                  ;	MOV	BX, handle
 37248                                  ;	MOV	AH, Read
 37249                                  ;	INT	int_command
 37250                                  ;	  AX has number of bytes read
 37251                                  ;
 37252                                  ;	ENTRY	(bx) = file handle
 37253                                  ;		(cx) = byte count
 37254                                  ;		(ds:dx) = buffer address
 37255                                  ;	EXIT	Through system call return so that to user:
 37256                                  ;		  'C' clear if OK
 37257                                  ;		    (ax) = bytes read
 37258                                  ;		  'C' set if error
 37259                                  ;		    (ax) = error code
 37260                                  ;
 37261                                  ;----------------------------------------------------------------------------
 37262                                  
 37263                                  	; 12/03/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 37264                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A83Ah
 37265                                  
 37266                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA2Eh)
 37267                                  
 37268                                  _$READ:
 37269 000066E5 BE[3E32]                	MOV	SI,DOS_READ
 37270                                  ReadDo:
 37271 000066E8 E83AFE                  	call	pJFNFromHandle
 37272 000066EB 7208                    	JC	short ReadError
 37273                                  
 37274 000066ED 268A05                  	MOV	AL,[ES:DI]
 37275 000066F0 E83501                  	call	CheckOwner		; get the handle
 37276 000066F3 7303                    	JNC	short ReadSetup		; no errors do the operation
 37277                                  
 37278                                  ;	Have an error. 'C' set
 37279                                  
 37280                                  ReadError:
 37281                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37282                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37283                                  	;jmp	short CommitErrorj3
 37284                                  	; 17/12/2022
 37285 000066F5 E9469F                  	jmp	SYS_RET_ERR
 37286                                  
 37287                                  ReadSetup:
 37288 000066F8 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37289 000066FD 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37290                                  	; 20/05/2019 - Retro DOS v4.0
 37291                                  	; MSDOS 6.0 
 37292                                  ;; Extended Open
 37293                                  	;test	byte [es:di+3],20h
 37294 00006702 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37295                                  						 ;AN000;;EO. need i24
 37296 00006707 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37297 00006709 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37298                                  					;AN000;;EO. set it off;smr;SS Override
 37299                                  needi24:				;AN000;
 37300                                  
 37301                                  ; 12/03/2024
 37302                                  %if 0
 37303                                  
 37304                                  ;; Extended Open
 37305                                  	push	word [SS:DMAADD]
 37306                                  	push	word [SS:DMAADD+2]	;smr;SS Override
 37307                                  
 37308                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37309                                  
 37310                                  	; 26/07/2019
 37311                                  
 37312                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37313                                  	;
 37314                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37315                                  	; there is not another caller; it is better to put the code in this proc
 37316                                   	; here instead of calling it as a subroutine; but I have modified code
 37317                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37318                                  
 37319                                  	; MSDOS 6.0
 37320                                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37321                                  	
 37322                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37323                                  	; MSDOS 3.3
 37324                                  	;MOV	BX,DX			; copy offset
 37325                                  	;push	cx			; don't stomp on count
 37326                                  	;MOV	CL,4			; bits to shift bytes->para
 37327                                  	;SHR	BX,CL			; get number of paragraphs
 37328                                  	;pop	cx			; get count back
 37329                                  	;MOV	AX,DS			; get original segment
 37330                                  	;ADD	AX,BX			; get new segment
 37331                                  	;MOV	DS,AX			; in seg register
 37332                                  	;AND	DX,0Fh			; normalize offset
 37333                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37334                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37335                                  						;smr;SS Override
 37336                                  %else
 37337                                  	; 12/03/2024 (PCDOS 7.1 IBMDOS.COM)
 37338                                  	;;;
 37339 0000670F 8CD8                    	mov	ax,ds			; original segment
 37340 00006711 36C51E[2C03]            	lds	bx,[ss:DMAADD]
 37341 00006716 53                      	push	bx
 37342 00006717 1E                      	push	ds
 37343 00006718 89D3                    	mov	bx,dx
 37344 0000671A D1EB                    	shr	bx,1
 37345 0000671C D1EB                    	shr 	bx,1
 37346 0000671E D1EB                    	shr	bx,1
 37347 00006720 D1EB                    	shr	bx,1
 37348 00006722 01D8                    	add	ax,bx			; new segment
 37349 00006724 83E20F                  	and	dx,0Fh			; normalize offset
 37350                                  	;mov	[ss:DMAADD],dx		; use user DX as offset
 37351                                  	; 23/03/2024
 37352 00006727 36A3[2E03]              	mov	[ss:DMAADD+2],ax 	; use user DS as segment for DMA
 37353                                  	;;;
 37354                                  
 37355                                  %endif
 37356                                  
 37357                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37358                                  	
 37359 0000672B 16                      	push	ss			; go for DOS addressability
 37360 0000672C 1F                      	pop	ds
 37361                                  
 37362                                  	; 12/03/2024 - Retro DOS v4.1
 37363                                  	;;;
 37364 0000672D 8916[2C03]              	mov	[DMAADD],dx	
 37365                                  	;;;
 37366                                  
 37367 00006731 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37368                                  
 37369 00006733 8F06[2E03]              	pop	word [DMAADD+2]
 37370 00006737 8F06[2C03]              	pop	word [DMAADD]
 37371                                  	;JNC	short READ_OK		;AN002;
 37372                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37373                                  	; 17/12/2022
 37374 0000673B 72B8                    	jc	short ReadError
 37375                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37376                                  	;jnc	short READ_OK		;AN002;
 37377                                  	;jmp	short ReadError
 37378                                  
 37379                                  READ_OK:
 37380 0000673D 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37381                                  Read_Okj:
 37382                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37383                                  	;;jmp	SYS_RET_OK		; successful return
 37384                                  	;jmp	short ok_done_j
 37385                                  	; 17/12/2022
 37386 0000673F E9F39E                  	jmp	SYS_RET_OK
 37387                                  
 37388                                  ; 13/07/2018 - Retro DOS v3.0
 37389                                  
 37390                                  ;----------------------------------------------------------------------------
 37391                                  
 37392                                  ; 12/03/2024
 37393                                  %if 0
 37394                                  
 37395                                  ;   Input: DS:DX points to user's buffer addr
 37396                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37397                                  ;   Output: [DMAADD] set
 37398                                  
 37399                                  ; 20/05/2019 - Retro DOS v4.0
 37400                                  ; 26/07/2019
 37401                                  ;	; MSDOS 6.0
 37402                                  ;Align_Buffer:
 37403                                  ;	MOV	BX,DX			; copy offset
 37404                                  ;	push	cx			; don't stomp on count
 37405                                  ;	MOV	CL,4			; bits to shift bytes->para
 37406                                  ;	SHR	BX,CL			; get number of paragraphs
 37407                                  ;	pop	cx			; get count back
 37408                                  ;	MOV	AX,DS			; get original segment
 37409                                  ;	ADD	AX,BX			; get new segment
 37410                                  ;	MOV	DS,AX			; in seg register
 37411                                  ;	AND	DX,0Fh			; normalize offset
 37412                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37413                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37414                                  ;						;smr;SS Override
 37415                                  ;	retn
 37416                                  
 37417                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37418                                  Align_Buffer:
 37419                                  	MOV	BX,DX			; copy offset
 37420                                  	push	cx			; don't stomp on count
 37421                                  	MOV	CL,4			; bits to shift bytes->para
 37422                                  	SHR	BX,CL			; get number of paragraphs
 37423                                  	pop	cx			; get count back
 37424                                  	MOV	AX,DS			; get original segment
 37425                                  	ADD	AX,BX			; get new segment
 37426                                  	MOV	DS,AX			; in seg register
 37427                                  	AND	DX,0Fh			; normalize offset
 37428                                  	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37429                                  	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37430                                  						;smr;SS Override
 37431                                  	retn
 37432                                  
 37433                                  %endif
 37434                                  
 37435                                  ; 20/05/2019 - Retro DOS v4.0
 37436                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37437                                  
 37438                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37439                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37440                                  
 37441                                  ; 12/03/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 37442                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A8A0h
 37443                                  
 37444                                  ; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA8Ch)
 37445                                  
 37446                                  ;BREAK <$WRITE - write to a file handle>
 37447                                  ;----------------------------------------------------------------------------
 37448                                  ;
 37449                                  ;   Assembler usage:
 37450                                  ;	    LDS     DX, buf
 37451                                  ;	    MOV     CX, count
 37452                                  ;	    MOV     BX, handle
 37453                                  ;	    MOV     AH, Write
 37454                                  ;	    INT     int_command
 37455                                  ;	  AX has number of bytes written
 37456                                  ;   Errors:
 37457                                  ;	    AX = write_invalid_handle
 37458                                  ;	       = write_access_denied
 37459                                  ;
 37460                                  ;   Returns in register AX
 37461                                  ;
 37462                                  ;----------------------------------------------------------------------------
 37463                                  
 37464                                  _$WRITE:
 37465 00006742 BE[3F34]                	MOV	SI,DOS_WRITE
 37466 00006745 EBA1                    	JMP	short ReadDo
 37467                                  
 37468                                  ;BREAK <$LSEEK - move r/w pointer>
 37469                                  ;----------------------------------------------------------------------------
 37470                                  ;
 37471                                  ;   Assembler usage:
 37472                                  ;	    MOV     DX, offsetlow
 37473                                  ;	    MOV     CX, offsethigh
 37474                                  ;	    MOV     BX, handle
 37475                                  ;	    MOV     AL, method
 37476                                  ;	    MOV     AH, LSeek
 37477                                  ;	    INT     int_command
 37478                                  ;	  DX:AX has the new location of the pointer
 37479                                  ;   Error returns:
 37480                                  ;	    AX = error_invalid_handle
 37481                                  ;	       = error_invalid_function
 37482                                  ;   Returns in registers DX:AX
 37483                                  ;
 37484                                  ;----------------------------------------------------------------------------
 37485                                  
 37486                                  ; 21/05/2019 - Retro DOS v4.0
 37487                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37488                                  
 37489                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37490                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37491                                  
 37492                                  _$LSEEK:
 37493 00006747 E8DE00                  	call	CheckOwner		; get system file entry
 37494                                  
 37495                                  	; 17/12/2022
 37496                                  ;LSeekError:
 37497                                  	;JNC	short CHKOWN_OK		;AN002;
 37498                                  	;JMP	short ReadError		;AN002; error return
 37499                                  	; 17/12/2022
 37500                                  	; 02/06/2019
 37501 0000674A 72A9                    	jc	short ReadError
 37502                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37503                                  	;JNC	short CHKOWN_OK		;AN002;
 37504                                  	;JMP	short ReadError		;AN002; error return
 37505                                  
 37506                                  CHKOWN_OK:
 37507                                  					;AN002;
 37508 0000674C 3C02                    	CMP	AL,2			; is the seek value correct?
 37509 0000674E 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37510                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37511 00006750 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37512                                  					;smr;SS Override
 37513                                  	;mov	al,1
 37514 00006756 B001                    	mov	al,error_invalid_function ; invalid method
 37515                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37516                                  LSeekError2:
 37517 00006758 EB9B                    	jmp	short ReadError
 37518                                  
 37519                                  LSeekDisp:
 37520 0000675A 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37521 0000675C 720A                    	JB	short LSeekStore	; just store CX:DX
 37522 0000675E 771B                    	JA	short LSeekEOF		; seek from end of file
 37523                                  	;add	dx,[es:di+21]
 37524 00006760 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37525                                  	;adc	cx,[es:di+23]
 37526 00006764 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37527                                  LSeekStore:
 37528 00006768 89C8                    	MOV	AX,CX			; AX:DX
 37529 0000676A 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37530                                  LSeekSetpos:
 37531                                  	;mov	[es:di+21],ax
 37532 0000676B 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37533                                  	;mov	[es:di+23],dx
 37534 0000676F 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37535 00006773 E80F9D                  	call	Get_User_Stack
 37536                                  	;mov	[si+6],dx
 37537 00006776 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37538                                  	;jmp	SYS_RET_OK		; successful return
 37539                                  	; 25/06/2019
 37540                                  	;jmp	SYS_RET_OK_clc
 37541                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37542                                  	;jmp	SYS_RET_OK_clc
 37543                                  LSeekOk:
 37544 00006779 EBC4                    	jmp     short Read_Okj
 37545                                  
 37546                                  LSeekEOF:
 37547                                  	;;test	word [es:di+5],8000h
 37548                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37549                                  	; 21/05/2019 - Retro DOS v4.0
 37550 0000677B 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37551 00006780 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37552                                  LOCAL_LSeek:
 37553                                  	;add	dx,[es:di+17]
 37554 00006782 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37555                                  	;adc	cx,[es:di+19]
 37556 00006786 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37557 0000678A EBDC                    	JMP	short LSeekStore	; go and set the position
 37558                                  
 37559                                  Check_LSeek_Mode:
 37560                                  	;;test	word [es:di+2],8000h
 37561                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37562                                  	; 21/05/2019
 37563 0000678C 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37564 00006791 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37565                                  	;mov	ax,[es:di+2]
 37566 00006793 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37567                                  	;and	ax,0F0h
 37568 00006797 25F000                  	AND	AX,SHARING_MASK
 37569                                  	;cmp	ax,40h
 37570 0000679A 83F840                  	CMP	AX,SHARING_DENY_NONE
 37571 0000679D 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37572                                  	;cmp	ax,30h
 37573 0000679F 83F830                  	CMP	AX,SHARING_DENY_READ
 37574 000067A2 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37575                                  NET_LSEEK:
 37576                                  ;	JMP	short LOCAL_LSeek
 37577                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37578                                  	;CallInstall Net_Lseek,MultNET,33
 37579                                  	;JNC	short LSeekSetPos
 37580                                  
 37581 000067A4 B82111                  	mov     ax,1121h
 37582 000067A7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37583                                  			; CX:DX = offset (in bytes) from end
 37584                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37585                                  			; SS = DOS CS
 37586                                  			; Return: CF set on error
 37587                                  			; CF clear if successful, DX:AX = new file position
 37588 000067A9 73C0                    	jnb     short LSeekSetpos
 37589                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37590                                  	;jmp	SYS_RET_ERR
 37591                                  ;LSeekError3:
 37592                                  	; 17/12/2022
 37593                                  LSeekError:
 37594                                  	;jmp	short LSeekError2
 37595                                  DupErr:	; 17/12/2022
 37596 000067AB E9909E                  	jmp	SYS_RET_ERR
 37597                                  
 37598                                  ;BREAK <FileTimes - modify write times on a handle>
 37599                                  ;----------------------------------------------------------------------------
 37600                                  ;
 37601                                  ;   Assembler usage:
 37602                                  ;	    MOV AH, FileTimes (57H)
 37603                                  ;	    MOV AL, func
 37604                                  ;	    MOV BX, handle
 37605                                  ;	; if AL = 1 then then next two are mandatory
 37606                                  ;	    MOV CX, time
 37607                                  ;	    MOV DX, date
 37608                                  ;	    INT 21h
 37609                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37610                                  ;	; for the handle.
 37611                                  ;
 37612                                  ;	AL=02		 get extended attributes
 37613                                  ;	   BX=handle
 37614                                  ;	   CX=size of buffer (0, return max size )
 37615                                  ;	   DS:SI query list (si=-1, selects all EA)
 37616                                  ;	   ES:DI buffer to hold EA list
 37617                                  ;
 37618                                  ;	AL=03		 get EA name list
 37619                                  ;	   BX=handle
 37620                                  ;	   CX=size of buffer (0, return max size )
 37621                                  ;	   ES:DI buffer to hold name list
 37622                                  ;
 37623                                  ;	AL=04		 set extended attributes
 37624                                  ;	   BX=handle
 37625                                  ;	   ES:DI buffer of EA list
 37626                                  ;
 37627                                  ;
 37628                                  ;   Error returns:
 37629                                  ;	    AX = error_invalid_function
 37630                                  ;	       = error_invalid_handle
 37631                                  ;
 37632                                  ;----------------------------------------------------------------------------
 37633                                  
 37634                                  ; 21/05/2019 - Retro DOS v4.0
 37635                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37636                                  
 37637                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37638                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37639                                  
 37640                                  _$FILE_TIMES:
 37641                                  	; 13/07/2018 - Retro DOS v3.0
 37642                                  
 37643                                  	; MSDOS 3.3
 37644                                  	;cmp	al,2			; correct subfunction ?
 37645                                  	;jb	short ft1
 37646                                  
 37647                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37648                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37649                                  						;SS Overr
 37650                                  	;;mov	al,1
 37651                                  	;mov	al,error_invalid_function ; give bad return
 37652                                  	;jmp	SYS_RET_ERR
 37653                                  
 37654                                  	; MSDOS 6.0
 37655 000067AE 3C02                    	cmp	al,2			; correct subfunction ?
 37656 000067B0 7340                    	jae	short inval_func
 37657                                  ;ft1:
 37658 000067B2 E87300                  	call	CheckOwner		; get sft
 37659                                  	; 17/12/2022
 37660 000067B5 72F4                    	jc	short LSeekError	; bad handle
 37661                                  
 37662 000067B7 08C0                    	or	al,al			; get time/date ?
 37663 000067B9 7515                    	jnz	short ft_set_time
 37664                                  
 37665                                  ;------ here we get the time & date from the sft for the user
 37666                                  
 37667 000067BB FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37668                                  	;mov	cx,[es:di+13]
 37669 000067BC 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37670                                  	;mov	dx,[es:di+15]
 37671 000067C0 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37672 000067C4 FB                      	sti
 37673 000067C5 E8BD9C                  	call	Get_User_Stack
 37674                                  	;mov	[si+4],cx
 37675 000067C8 894C04                  	mov	[si+user_env.user_CX],cx
 37676                                  	;mov	[si+6],dx
 37677 000067CB 895406                  	mov	[si+user_env.user_DX],dx
 37678 000067CE EB1F                    	jmp	short ok_ret
 37679                                  
 37680                                  ;------ here we set the time in sft
 37681                                  
 37682                                  ft_set_time:
 37683 000067D0 E81FAB                  	call    ECritSFT
 37684                                  	;mov	[es:di+13],cx
 37685 000067D3 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37686                                  	;mov	[es:di+15],dx
 37687 000067D7 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37688                                  
 37689 000067DB 31C0                    	xor	ax, ax
 37690 000067DD 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37691                                  
 37692                                  ;------ set the flags in SFT entry
 37693                                  	;and	word [es:di+5],0FFBFh
 37694                                  	; 18/12/2022
 37695                                  	;and	byte [es:di+5],0BFh
 37696 000067E2 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37697                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37698                                  							; mark file as dirty
 37699                                  	;or	word [es:di+5],4000h
 37700                                  	; 17/12/2022
 37701                                  	;or	byte [es:di+6],40h
 37702 000067E7 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37703                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37704                                  							; ask close not to
 37705                                  							;   bother about date
 37706                                  							;   and time
 37707 000067EC E81EAB                  	call	LCritSFT
 37708                                  ok_ret:
 37709                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37710                                  	; 17/12/2022
 37711 000067EF E9439E                  	jmp	SYS_RET_OK
 37712                                  	;jmp	short LSeekOk
 37713                                  
 37714                                  inval_func:
 37715                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37716 000067F2 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37717                                  						;SS Overr
 37718                                  	;mov	al,1
 37719 000067F8 B001                    	mov	al,error_invalid_function ; give bad return
 37720                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37721                                  ft_error:
 37722                                  	;;jmp	SYS_RET_ERR
 37723                                  	;jmp	short LSeekError3
 37724                                  	; 17/12/2022
 37725 000067FA EBAF                    	jmp	short LSeekError
 37726                                  
 37727                                  ; 21/05/2019 - Retro DOS v4.0
 37728                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37729                                  
 37730                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37731                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37732                                  
 37733                                  ;BREAK <$DUP - duplicate a jfn>
 37734                                  ;----------------------------------------------------------------------------
 37735                                  ;
 37736                                  ;   Assembler usage:
 37737                                  ;	    MOV     BX, fh
 37738                                  ;	    MOV     AH, Dup
 37739                                  ;	    INT     int_command
 37740                                  ;	  AX has the returned handle
 37741                                  ;   Errors:
 37742                                  ;	    AX = dup_invalid_handle
 37743                                  ;	       = dup_too_many_open_files
 37744                                  ;
 37745                                  ;----------------------------------------------------------------------------
 37746                                  
 37747                                  _$DUP:
 37748 000067FC 89D8                    	MOV	AX,BX			; save away old handle in AX
 37749 000067FE E881FD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37750                                  DupErrorCheck:
 37751 00006801 72A8                    	JC	short DupErr		; nope, bye
 37752 00006803 06                      	push	es
 37753 00006804 57                      	push	di			; save away SFT
 37754 00006805 5E                      	pop	si			; into convenient place DS:SI
 37755 00006806 1F                      	pop	ds
 37756 00006807 93                      	XCHG	AX,BX			; get back old handle
 37757 00006808 E81D00                  	call	CheckOwner		; get sft in ES:DI
 37758 0000680B 729E                    	JC	short DupErr		; errors go home
 37759 0000680D E8B2C1                  	call	DOS_Dup_Direct
 37760 00006810 E812FD                  	call	pJFNFromHandle		; get pointer
 37761 00006813 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37762 00006816 881C                    	MOV	[SI],BL			; stuff in new SFT
 37763                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37764                                  	;jmp	SYS_RET_OK		; and go home
 37765 00006818 EBD5                    	jmp	short ok_ret
 37766                                  
 37767                                  	; 17/12/2022
 37768                                  ;DupErr:
 37769                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37770                                  	;;jmp	SYS_RET_ERR
 37771                                  	;jmp	short ft_error
 37772                                  
 37773                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37774                                  ;----------------------------------------------------------------------------
 37775                                  ;
 37776                                  ;   Assembler usage:
 37777                                  ;	    MOV     BX, fh
 37778                                  ;	    MOV     CX, newfh
 37779                                  ;	    MOV     AH, Dup2
 37780                                  ;	    INT     int_command
 37781                                  ;   Error returns:
 37782                                  ;	    AX = error_invalid_handle
 37783                                  ;
 37784                                  ;----------------------------------------------------------------------------
 37785                                  
 37786                                  _$DUP2:
 37787 0000681A 53                      	push	bx
 37788 0000681B 51                      	push	cx			; save source
 37789 0000681C 89CB                    	MOV	BX,CX			; get one to close
 37790 0000681E E8BBFD                  	call	_$CLOSE			; close destination handle
 37791 00006821 5B                      	pop	bx
 37792 00006822 58                      	pop	ax			; old in AX, new in BX
 37793 00006823 E8FFFC                  	call	pJFNFromHandle		; get pointer
 37794 00006826 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37795                                  
 37796                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37797                                  ;----------------------------------------------------------------------------
 37798                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37799                                  ;   process without the process knowing it (delete/rename of open files, for
 37800                                  ;   example), it is possible for the redirector to issue a call to a handle
 37801                                  ;   that it soes not rightfully own. We check here to make sure that the
 37802                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37803                                  ;   SFFromHandle to really make sure that the SFT is good.
 37804                                  ;
 37805                                  ;	ENTRY	BX has the handle
 37806                                  ;		User_ID is the current user
 37807                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37808                                  ;		Carry Set => AX has error code
 37809                                  ;	USES	none
 37810                                  ;----------------------------------------------------------------------------
 37811                                  
 37812                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37813                                  	; 21/05/2019 - Retro DOS v4.0
 37814                                  CheckOwner:
 37815                                  	; 13/07/2018 - Retro DOS v3.0
 37816                                  
 37817 00006828 E817FD                  	call	SFFromHandle
 37818 0000682B 721B                    	jc	short co_ret_label	; retc
 37819                                  
 37820 0000682D 50                      	push	ax
 37821                                  
 37822                                  	; MSDOS 6.0
 37823                                  
 37824                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37825                                  ;SR; are shared across multiple VMs in win386.
 37826                                  
 37827 0000682E 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37828 00006834 7404                    	jz	short no_win386		;win386 is not present
 37829 00006836 31C0                    	xor	ax,ax			;set the zero flag
 37830 00006838 EB08                    	jmp	short _skip_win386	
 37831                                  
 37832                                  no_win386:
 37833 0000683A 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37834                                  	;cmp	ax,[es:di+47]
 37835 0000683E 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37836                                  
 37837                                  _skip_win386:
 37838 00006842 58                      	pop	ax
 37839                                  	
 37840                                  	; 17/12/2022
 37841 00006843 7403                    	jz	short co_ret_label
 37842                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37843                                  	;jnz	short CheckOwner_err
 37844                                  	;retn
 37845                                  	
 37846                                  CheckOwner_err:
 37847                                  	;mov	al,6
 37848 00006845 B006                    	mov	al,error_invalid_handle
 37849 00006847 F9                      	stc
 37850                                  
 37851                                  co_ret_label:
 37852 00006848 C3                      	retn
 37853                                  
 37854                                  ;============================================================================
 37855                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37856                                  ;============================================================================
 37857                                  ; Retro	DOS v3.0 - 11/07/2018
 37858                                  ; 21/05/2019 - Retro DOS v4.0
 37859                                  
 37860                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37861                                  ;	NAME	MACRO
 37862                                  
 37863                                  ;	Microsoft Confidential
 37864                                  ;	Copyright (C) Microsoft Corporation 1991
 37865                                  ;	All Rights Reserved.
 37866                                  
 37867                                  ;**	MACRO.ASM
 37868                                  ;
 37869                                  ;	$AssignOper
 37870                                  ;	FIND_DPB
 37871                                  ;	InitCDS
 37872                                  ;	$UserOper
 37873                                  ;	GetVisDrv
 37874                                  ;	GetThisDrv
 37875                                  ;	GetCDSFromDrv
 37876                                  ;
 37877                                  ;   Revision history:
 37878                                  ;
 37879                                  ;	Created: MZ 4 April 1983
 37880                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37881                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37882                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37883                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37884                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37885                                  ;				    aliasing.
 37886                                  ;
 37887                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37888                                  ;   each valid drive letter the text of the current directory on that drive.
 37889                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37890                                  ;   be at the root. A current directory is either the raw local directory
 37891                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37892                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37893                                  ;
 37894                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37895                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37896                                  ;   this and all * are expanded into ?'s.
 37897                                  ;
 37898                                  ;   The second part of name translation involves subtree aliasing. A list of
 37899                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37900                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37901                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37902                                  ;   replaced with the other subtree in the pair.
 37903                                  ;
 37904                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37905                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37906                                  ;   The output of the previous translation is examined to see if any of the
 37907                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37908                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37909                                  ;   'mount' one device under another.
 37910                                  ;
 37911                                  ;   The final form of name translation involves the mapping of a user's
 37912                                  ;   logical drive number into the internal physical drive. This is
 37913                                  ;   accomplished by converting the drive number into letter:CON, performing
 37914                                  ;   the above translation and then converting the character back into a drive
 37915                                  ;   number.
 37916                                  ;
 37917                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37918                                  ;   take a path and form the real text of the pathname with all . and ..
 37919                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37920                                  ;   TransPath.
 37921                                  ;
 37922                                  ;	A000	version 4.00  Jan. 1988
 37923                                  
 37924                                  ;Installed = TRUE
 37925                                  
 37926                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37927                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37928                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37929                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37930                                  ;					; current drive)
 37931                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37932                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37933                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37934                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37935                                  ;	I_need	MYNAME,16		; machine name
 37936                                  ;	I_need	MYNUM,WORD		; machine number
 37937                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37938                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37939                                  ;	I_need	DrvErr,BYTE		; drive error
 37940                                  
 37941                                  ;BREAK <$AssignOper -- Set up a Macro>
 37942                                  ;----------------------------------------------------------------------------
 37943                                  ; Inputs:
 37944                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37945                                  ;	AL = 01 set assign mode 		    (SetMode)
 37946                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37947                                  ;	AL = 03 Define Macro (attch start)
 37948                                  ;	    BL = Macro type
 37949                                  ;	       = 0 alias
 37950                                  ;	       = 1 file/device
 37951                                  ;	       = 2 drive
 37952                                  ;	       = 3 Char device -> network
 37953                                  ;	       = 4 File device -> network
 37954                                  ;	    DS:SI -> ASCIZ source name
 37955                                  ;	    ES:DI -> ASCIZ destination name
 37956                                  ;	AL = 04 Cancel Macro
 37957                                  ;	    DS:SI -> ASCIZ source name
 37958                                  ;	AL = 05 Modified get attach list entry
 37959                                  ;	AL = 06 Get ifsfunc item
 37960                                  ;	AL = 07 set in_use of a drive's CDS
 37961                                  ;	     DL = drive number, 0=default  0=A,,
 37962                                  ;	AL = 08 reset in_use of a drive's CDS
 37963                                  ;	     DL = drive number, 0=A, 1=B,,,
 37964                                  ; Function:
 37965                                  ;	Do macro stuff
 37966                                  ; Returns:
 37967                                  ;	Std Xenix style error return
 37968                                  ;----------------------------------------------------------------------------
 37969                                  
 37970                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37971                                  	; 21/05/2019 - Retro DOS v4.0
 37972                                  _$AssignOper:
 37973                                  	; MSDOS 6.0
 37974 00006849 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37975 0000684B 7525                    	JNZ	short chk08		      ; no			;AN000;
 37976                                  srinuse:								;AN000;
 37977 0000684D 50                      	PUSH	AX			      ; save al 		;AN000;
 37978 0000684E 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37979 00006850 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37980 00006853 58                      	POP	AX			      ; 			;AN000;
 37981 00006854 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37982                                  	;cmp	word [si+45h],0
 37983 00006856 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37984 0000685A 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37985 0000685C 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37986 0000685E 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37987                                  	;or	word [si+43h],4000h
 37988                                  	; 17/12/2022
 37989                                  	;or	byte [si+44h],40h
 37990 00006860 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37991                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37992 00006864 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37993                                  resetdrv:
 37994                                  	;and	word [si+43h],0BFFFh									;AN000;
 37995                                  	; 18/12/2022
 37996 00006866 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37997                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37998 0000686A EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37999                                  
 38000                                  	; 17/12/2022
 38001                                  baddrv: 								;AN000;
 38002 0000686C B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 38003                                  
 38004                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38005                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 38006                                  	; 17/12/2022
 38007                                  	; 21/05/2019
 38008                                  ASS_ERR:
 38009 0000686F E9CC9D                  	jmp	SYS_RET_ERR
 38010                                  
 38011                                  chk08:									;AN000;
 38012 00006872 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 38013 00006874 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 38014                                  
 38015                                    ;IF	NOT INSTALLED
 38016                                  	;transfer NET_ASSOPER
 38017                                    ;ELSE
 38018                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38019 00006876 50                      	PUSH	AX
 38020                                  	;mov	ax,111Eh
 38021                                  	;MOV	AX,(MultNET SHL 8) OR 30
 38022 00006877 B81E11                  	mov	ax,(MultNET*256)+30
 38023 0000687A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 38024                                  			; SS = DOS CS
 38025                                  			; STACK: WORD function to execute
 38026                                  			; Return: CF set on error, AX = error code
 38027                                  			; STACK unchanged
 38028 0000687C 5B                      	POP	BX			; Don't zap error code in AX
 38029 0000687D 72F0                    	JC	short ASS_ERR
 38030                                  okdone:
 38031 0000687F E9B39D                  	jmp	SYS_RET_OK
 38032                                  
 38033                                  	; 17/12/2022
 38034                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38035                                  ;ASS_ERR:
 38036                                  	;jmp	SYS_RET_ERR
 38037                                  
 38038                                    ;ENDIF
 38039                                  
 38040                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 38041                                  ;----------------------------------------------------------------------------
 38042                                  ;**	FIND_DPB - Find a DPB from a Drive #
 38043                                  ;
 38044                                  ;	ENTRY	AL has drive number A = 0
 38045                                  ;	EXIT	'C' set
 38046                                  ;		    No DPB for this drive number
 38047                                  ;		'C' clear
 38048                                  ;		    DS:SI points to DPB for drive
 38049                                  ;	USES	SI, DS, Flags
 38050                                  ;----------------------------------------------------------------------------
 38051                                  
 38052                                  	; 21/05/2019 - Retro DOS v4.0
 38053                                  FIND_DPB:
 38054 00006882 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 38055                                  fdpb5:	
 38056 00006887 83FEFF                  	CMP	SI,-1
 38057 0000688A 7409                    	JZ	short fdpb10
 38058 0000688C 3A04                    	cmp	al,[si]
 38059                                  	;CMP	AL,[SI+DPB.DRIVE]
 38060 0000688E 7406                    	jz	short ret_label15	; Carry clear (retz)
 38061                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 38062                                  	;lds	si,[si+19h] ; MSDOS 6.0
 38063 00006890 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 38064 00006893 EBF2                    	JMP	short fdpb5
 38065                                  fdpb10:	
 38066 00006895 F9                      	STC
 38067                                  ret_label15:
 38068 00006896 C3                      	retn
 38069                                  
 38070                                  ;	Break <InitCDS - set up an empty CDS>
 38071                                  ;----------------------------------------------------------------------------
 38072                                  ;**	InitCDS - Setup an Empty CDS
 38073                                  ;
 38074                                  ;	ENTRY	ThisCDS points to CDS
 38075                                  ;		AL has uppercase drive letter
 38076                                  ;	EXIT	ThisCDS is now empty
 38077                                  ;		(ES:DI) = CDS
 38078                                  ;		'C' set if no DPB associated with drive
 38079                                  ;	USES	AH,ES,DI, Flags
 38080                                  ;----------------------------------------------------------------------------
 38081                                  
 38082                                  ; 21/05/2019 - Retro DOS v4.0
 38083                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 38084                                  
 38085                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38086                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 38087                                  
 38088                                  InitCDS:
 38089                                  	; 19/08/2018
 38090                                  	; 05/08/2018 - Retro DOS v3.0
 38091                                  	; MSDOS 6.0
 38092 00006897 50                      	push	ax			; save (AL) for caller
 38093 00006898 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 38094                                  	;mov	word [es:di+67],0
 38095 0000689D 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 38096 000068A3 2C40                    	SUB	AL,"A"-1                ; A = 1
 38097 000068A5 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 38098 000068AA 7236                    	JC	short icdsx		; Drive does not map a physical drive
 38099 000068AC 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 38100 000068AD 50                      	PUSH	AX			; save drive number for later
 38101 000068AE 0441                    	add	al,"A"
 38102 000068B0 B43A                    	MOV	AH,':'
 38103 000068B2 268905                  	mov	[ES:DI],ax
 38104                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 38105                                  	;mov	ax,"\"
 38106                                  	;mov	[es:di+2],ax
 38107                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 38108 000068B5 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 38109                                  	;or	word [es:di+67],4000h
 38110                                  	;or	byte [es:di+68],40h
 38111 000068BB 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38112 000068C0 29C0                    	sub	ax,ax
 38113                                  	;MOV	[es:di+73],ax ; 0
 38114 000068C2 26894549                	MOV	[ES:DI+curdir.ID],ax
 38115                                  	;mov	[es:di+75],ax ; 0
 38116 000068C6 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 38117 000068CA B002                    	mov	al,2
 38118                                  	;mov	[es:di+79],aX ; 2
 38119 000068CC 2689454F                	MOV	[ES:DI+curdir.end],ax
 38120 000068D0 58                      	POP	AX			; (al) = drive number
 38121 000068D1 1E                      	push	ds
 38122 000068D2 56                      	push	si
 38123 000068D3 E8ACFF                  	call	FIND_DPB
 38124 000068D6 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 38125                                  	;mov	[es:di+69],si
 38126 000068D8 26897545                	MOV	[ES:DI+curdir.devptr],SI
 38127                                  	;mov	[es:di+71],ds
 38128 000068DC 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 38129                                  icds5:	
 38130 000068E0 5E                      	pop	si
 38131 000068E1 1F                      	pop	ds
 38132                                  icdsx:	
 38133 000068E2 58                      	pop	ax
 38134                                  RET45:
 38135 000068E3 C3                      	retn
 38136                                  
 38137                                  ;Break <$UserOper - get/set current user ID (for net)>
 38138                                  ;----------------------------------------------------------------------------
 38139                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 38140                                  ;	maintain this string and do no verifications.
 38141                                  ;
 38142                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 38143                                  ;				      4-printer-set-flags,5-printer-get-flags)
 38144                                  ;		DS:DX is user string pointer (calls 1,2)
 38145                                  ;		ES:DI is user buffer (call 3)
 38146                                  ;		BX is assign index (calls 2,3,4,5)
 38147                                  ;		CX is user number (call 1)
 38148                                  ;		DX is flag word (call 4)
 38149                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 38150                                  ;			and user CX is set to the user number
 38151                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 38152                                  ;		If AL = 5 then DX is flag word
 38153                                  ;----------------------------------------------------------------------------
 38154                                  
 38155                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38156                                  	; 21/05/2019 - Retro DOS v4.0
 38157                                  _$UserOper:
 38158                                  	; 05/08/2018 - Retro DOS v3.0
 38159                                  	; MSDOS 6.0 (& MSDOS 3.3)
 38160 000068E4 50                      	PUSH	AX
 38161 000068E5 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 38162 000068E7 58                      	POP	AX
 38163 000068E8 7211                    	JB	short UserGet 		; return to user the string
 38164 000068EA 742E                    	JZ	short UserSet 		; set the current user
 38165 000068EC 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 38166 000068EE 763D                    	JBE	short UserPrint		; yep
 38167                                  	;mov	byte [ss:EXTERR_LOCUS],1
 38168 000068F0 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 38169                                  					; Extended Error Locus
 38170                                  	;error	error_invalid_function	; not 0,1,2,3
 38171                                  	;mov	al,1
 38172 000068F6 B001                    	MOV	AL,error_invalid_function
 38173                                  useroper_error:
 38174                                  	; 17/12/2022
 38175                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38176 000068F8 E9439D                  	JMP	SYS_RET_ERR
 38177                                  	;jmp	short ASS_ERR
 38178                                  
 38179                                  UserGet:
 38180                                  ; Transfer MYNAME to DS:DX
 38181                                  ; Set Return CX to MYNUM
 38182 000068FB 1E                      	PUSH	DS			; switch registers
 38183 000068FC 07                      	POP	ES
 38184 000068FD 89D7                    	MOV	DI,DX			; destination
 38185 000068FF 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 38186 00006904 E87E9B                  	call	Get_User_Stack
 38187                                  	;mov	[si+4],cx
 38188 00006907 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 38189 0000690A 16                      	push	ss			; point to DOSDATA
 38190 0000690B 1F                      	pop	ds
 38191 0000690C BE[0503]                	MOV	SI,MYNAME		; point source to user string
 38192                                  UserMove:
 38193 0000690F B90F00                  	MOV	CX,15
 38194 00006912 F3A4                    	REP	MOVSB			; blam.
 38195 00006914 31C0                    	XOR	AX,AX			; 16th byte is 0
 38196 00006916 AA                      	STOSB
 38197                                  UserBye:
 38198 00006917 E91B9D                  	jmp	SYS_RET_OK		; no errors here
 38199                                  
 38200                                  UserSet:
 38201                                  ; Transfer DS:DX to MYNAME
 38202                                  ; CX to MYNUM
 38203 0000691A 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 38204 0000691F 89D6                    	MOV	SI,DX			; user space has source
 38205 00006921 16                      	push	ss
 38206 00006922 07                      	pop	es
 38207 00006923 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 38208 00006926 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 38209 0000692B EBE2                    	JMP	short UserMove
 38210                                  
 38211                                  UserPrint:
 38212                                  
 38213                                    ;IF NOT Installed
 38214                                    ;	transfer PRINTER_GETSET_STRING
 38215                                    ;ELSE
 38216 0000692D 50                      	PUSH	AX
 38217                                  	;mov	ax,111Fh
 38218                                  	;MOV	AX,(MultNET SHL 8) OR 31
 38219 0000692E B81F11                  	mov	ax,(MultNET<<8)|31
 38220 00006931 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 38221                                  			; STACK: WORD function
 38222                                  			; Return: CF set on error, AX = error code
 38223                                  			; STACK unchanged
 38224 00006933 5A                      	POP	DX			; Clean stack
 38225                                  	;JNC	short OKPA
 38226 00006934 73E1                    	jnc	short UserBye ; 21/05/2019
 38227                                  	; 17/12/2022
 38228 00006936 EBC0                    	jmp	short useroper_error
 38229                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38230                                  	;jnb     short OKPA
 38231                                  	;jmp     short useroper_error
 38232                                  
 38233                                  	; 17/12/2022
 38234                                  ;OKPA:
 38235                                  ;	jmp	short UserBye
 38236                                  
 38237                                    ;ENDIF
 38238                                  
 38239                                  
 38240                                  ;Break	<GetVisDrv - return visible drive>
 38241                                  ;----------------------------------------------------------------------------
 38242                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 38243                                  ;
 38244                                  ;   Inputs:	AL has drive identifier (0=default)
 38245                                  ;   Outputs:	Carry Set - invalid drive/macro
 38246                                  ;		Carry Clear - AL has physical drive (0=A)
 38247                                  ;		    ThisCDS points to CDS
 38248                                  ;   Registers modified: AL
 38249                                  ;----------------------------------------------------------------------------
 38250                                  
 38251                                  	; 21/05/2019 - Retro DOS v4.0
 38252                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 38253                                  
 38254                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38255                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 38256                                  GetVisDrv:
 38257                                  	; 05/08/2018 - Retro DOS v3.0
 38258                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 38259 00006938 E81900                  	CALL	GETTHISDRV		; get inuse drive
 38260 0000693B 72A6                    	jc	short RET45
 38261 0000693D 1E                      	push	ds
 38262 0000693E 56                      	push	si
 38263 0000693F 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 38264                                  	;test	word [si+67],2000h
 38265                                  	; 17/12/2022
 38266                                  	;test	byte [si+68],20h
 38267 00006944 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 38268                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38269 00006948 5E                      	pop	si
 38270 00006949 1F                      	pop	ds
 38271 0000694A 7497                    	jz	short RET45		; if not spliced, return OK
 38272                                  	; MSDOS 6.0
 38273                                  	;mov	byte [ss:DrvErr],0Fh
 38274 0000694C 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 38275 00006952 F9                      	STC				; signal error
 38276 00006953 C3                      	retn
 38277                                  
 38278                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 38279                                  ;----------------------------------------------------------------------------
 38280                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 38281                                  ;	macro pointer
 38282                                  ;
 38283                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 38284                                  ;   Outputs:
 38285                                  ;		Carry Set - invalid drive/macro
 38286                                  ;		Carry Clear - AL has physical drive (0=A)
 38287                                  ;		   ThisCDS points to macro
 38288                                  ;   Registers modified: AL
 38289                                  ;----------------------------------------------------------------------------
 38290                                  
 38291                                  	; 21/05/2019 - Retro DOS v4.0
 38292                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38293                                  
 38294                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38295                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 38296                                  GETTHISDRV:
 38297                                  	; 05/08/2018
 38298                                  	; 12/07/2018 - Retro DOS v3.0
 38299                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38300                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38301 00006954 08C0                    	OR	AL,AL			; are we using default drive?
 38302 00006956 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38303 00006958 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38304                                  	;INC	ax			; Counteract next instruction
 38305                                  	; 04/09/2018
 38306                                  	;inc	al
 38307                                  	; 07/12/2022
 38308 0000695C 40                      	inc	ax
 38309                                  GTD10:	
 38310                                  	;DEC	AX
 38311                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38312 0000695D 48                      	dec	ax			; 0 = A
 38313                                  	;dec	al
 38314 0000695E 1E                      	PUSH	DS			; save world
 38315 0000695F 56                      	PUSH	SI
 38316                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38317 00006960 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38318                                  
 38319                                  	;TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38320                                  	;JZ	SHORT GTD20		; Logical
 38321                                  	; 13/03/2024 (PCDOS71. IBMDOS.COM)
 38322                                  	;;;
 38323 00006966 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38324 0000696C 7420                    	jz	short GTD20
 38325                                  	;;;
 38326                                  
 38327 0000696E 50                      	PUSH	AX
 38328 0000696F 06                      	PUSH	ES
 38329 00006970 57                      	PUSH	DI
 38330 00006971 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38331                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38332 00006978 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38333 0000697D 0441                    	ADD	AL,'A'
 38334 0000697F E815FF                  	CALL	InitCDS			; InitCDS(c);
 38335                                  	;test	word [es:di+67],4000h
 38336                                  	; 17/12/2022
 38337                                  	;test	byte [es:di+68],40h
 38338 00006982 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38339                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38340 00006987 5F                      	POP	DI
 38341 00006988 07                      	POP	ES
 38342 00006989 58                      	POP	AX
 38343 0000698A 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38344 0000698C EB18                    	JMP	SHORT GTDX		; carry clear
 38345                                  GTD20:
 38346 0000698E E81800                  	CALL	GetCDSFromDrv
 38347 00006991 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38348                                  	;test	word [si+43h],4000h
 38349                                  	; 17/12/2022
 38350                                  	;test	byte [si+44h],40h
 38351 00006993 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38352                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38353 00006997 750D                    	JNZ	SHORT GTDX		; carry clear
 38354                                  GTD30:	
 38355                                  	; 21/05/2019
 38356                                  	; MSDOS 6.0
 38357 00006999 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38358 0000699B 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38359                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38360 0000699F 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38361 000069A5 F9                      	STC
 38362                                  GTDX:	
 38363 000069A6 5E                      	POP	SI			; restore world
 38364 000069A7 1F                      	POP	DS
 38365 000069A8 C3                      	RETN
 38366                                  
 38367                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38368                                  ;----------------------------------------------------------------------------
 38369                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38370                                  ;	pointer, returning an error if the drive number is greater than the
 38371                                  ;	number of CDS's
 38372                                  ;
 38373                                  ;   Inputs:	AL is physical unit # A=0...
 38374                                  ;   Outputs:	Carry Set if Bad Drive
 38375                                  ;		Carry Clear
 38376                                  ;		    DS:SI -> CDS
 38377                                  ;		    [THISCDS] = DS:SI
 38378                                  ;   Registers modified: DS,SI
 38379                                  ;----------------------------------------------------------------------------
 38380                                  
 38381                                  	; 21/05/2019 - Retro DOS v4.0
 38382                                  GetCDSFromDrv:
 38383 000069A9 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38384                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38385                                  	;STC				; signal error
 38386                                  	;RETN				; bye
 38387                                  	; 23/09/2023
 38388 000069AE F5                      	cmc	; cf=1 <-> cf=0
 38389 000069AF 7217                    	jc	short GetCDS_retn
 38390                                  GetCDS:
 38391                                  	; 23/09/2023
 38392                                  	;PUSH	BX
 38393 000069B1 50                      	PUSH	AX
 38394 000069B2 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38395                                  	;mov	bl,81 ; MSDOS 3.3
 38396                                  	;mov	bl,88 ; MSDOS 6.0 
 38397                                  	; 23/09/2023
 38398                                  	;MOV	BL,curdir.size		; size in convenient spot
 38399                                  	;MUL	BL			; get net offset
 38400 000069B7 B458                    	mov	ah,curdir.size
 38401 000069B9 F6E4                    	mul	ah
 38402 000069BB 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38403 000069BD 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38404 000069C2 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38405 000069C7 58                      	POP	AX
 38406                                  	; 23/09/2023
 38407                                  	;POP	BX
 38408                                  	; (cf must be 0 here) ; *
 38409                                  	;CLC				; no error
 38410                                  GetCDS_retn:
 38411 000069C8 C3                      	RETN				; bye!
 38412                                  
 38413                                  ;============================================================================
 38414                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38415                                  ;============================================================================
 38416                                  ; Retro	DOS v3.0 - 12/07/2018
 38417                                  ; 22/05/2019 - Retro DOS v4.0
 38418                                  
 38419                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38420                                  ;----------------------------------------------------------------------------
 38421                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38422                                  ;       gritty substitution.
 38423                                  ;
 38424                                  ;   Inputs:     DS:DX - pointer to FCB
 38425                                  ;               ES:DI - point to destination
 38426                                  ;   Outputs:    Carry Set - invalid path in final map
 38427                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38428                                  ;                   Sattrib is set from possibly extended FCB
 38429                                  ;                   ExtFCB set if extended FCB found
 38430                                  ;   Registers modified: most
 38431                                  ;----------------------------------------------------------------------------
 38432                                  
 38433                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38434                                  TransFCB:
 38435                                  	; 22/05/2019 - Retro DOS v4.0
 38436                                  	; 12/07/2018 - Retro DOS v3.0
 38437                                  	;LocalVar FCBTmp,16
 38438                                  	;ENTER
 38439 000069C9 55                      	push	bp
 38440 000069CA 89E5                    	mov	bp,sp
 38441                                  	;sub	sp,15	; MSDOS 3.3
 38442 000069CC 83EC10                  	sub	sp,16	; MSDOS 6.0
 38443 000069CF 16                      	push	ss
 38444 000069D0 07                      	pop	es
 38445 000069D1 06                      	push	es
 38446 000069D2 57                      	push	di
 38447                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38448                                  	;LEA	DI,FCBTmp 
 38449 000069D3 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38450 000069D6 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38451 000069DC 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38452 000069E2 E851B2                  	call	GetExtended             ; get FCB, extended or not
 38453                                  	; 06/12/2022
 38454 000069E5 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38455 000069E7 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38456 000069EA 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38457 000069EE 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38458                                  GetDrive:
 38459 000069F4 AC                      	lodsb				; get drive byte
 38460 000069F5 E85CFF                  	call	GETTHISDRV
 38461 000069F8 722A                    	jc	short BadPack
 38462 000069FA E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38463                                  
 38464                                  ; Scan the source to see if there are any illegal chars
 38465                                  
 38466                                  	;mov	bx,CharType		; load lookup table
 38467 000069FD B90B00                  	mov	cx,11
 38468 00006A00 56                      	push	si			; back over name, ext
 38469                                  FCBScan:
 38470 00006A01 AC                      	lodsb				; get a byte
 38471                                  	
 38472                                  	; 09/08/2018
 38473                                  	;;xlat	byte [es:bx]
 38474                                  	;es	xlat
 38475                                  
 38476                                  	; 22/05/2019 - Retro DOS v4.0	
 38477 00006A02 E868E5                  	call	GetCharType		; get flags
 38478                                  
 38479                                  	;test	al,8	
 38480 00006A05 A808                    	test	al,FFCB
 38481 00006A07 741B                    	jz	short BadPack
 38482                                  NextCh: 
 38483 00006A09 E2F6                    	loop	FCBScan
 38484 00006A0B 5E                      	pop	si
 38485 00006A0C 89FB                    	mov	bx,di
 38486 00006A0E E861B6                  	call	PackName                ; crunch the path
 38487 00006A11 5F                      	pop	di			; get original destination
 38488 00006A12 07                      	pop	es
 38489 00006A13 16                      	push	ss			; get DS addressability
 38490 00006A14 1F                      	pop	ds
 38491                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38492                                  	;LEA	SI,FCBTmp		; point at new pathname
 38493 00006A15 8D76F0                  	lea	si,[bp-16]
 38494 00006A18 803F00                  	cmp	byte [bx],0
 38495 00006A1B 7407                    	jz	short BadPack
 38496 00006A1D 55                      	push	bp
 38497 00006A1E E80E00                  	call	TransPathSet            ; convert the path
 38498 00006A21 5D                      	pop	bp
 38499 00006A22 7303                    	jnc	short FCBRet		; bye with transPath error code
 38500                                  BadPack:
 38501 00006A24 F9                      	STC
 38502                                  	;mov	al,3
 38503 00006A25 B003                    	MOV     AL,error_path_not_found
 38504                                  FCBRet: 
 38505                                  	;LEAVE
 38506 00006A27 89EC                    	mov	sp,bp
 38507 00006A29 5D                      	pop	bp
 38508                                  TransPath_retn:
 38509 00006A2A C3                      	retn
 38510                                  
 38511                                  ; 12/07/2018 - Retro DOS v3.0
 38512                                  
 38513                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38514                                  ;----------------------------------------------------------------------------
 38515                                  ;
 38516                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38517                                  ;       substitution, insertion of current directory and fixing . and ..
 38518                                  ;       entries. Perform splicing. Allow input string to match splice
 38519                                  ;       exactly.
 38520                                  ;
 38521                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38522                                  ;       matches splice.
 38523                                  ;
 38524                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38525                                  ;
 38526                                  ;   The following anomalous behaviour is required:
 38527                                  ;
 38528                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38529                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38530                                  ;       Raw net I/O sets ThisCDS => NULL.
 38531                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38532                                  ;
 38533                                  ;   Other behaviour:
 38534                                  ;
 38535                                  ;       ThisCDS set up.
 38536                                  ;       FatRead done on local CDS.
 38537                                  ;       ValidateCDS done on local CDS.
 38538                                  ;
 38539                                  ;   Brief flowchart:
 38540                                  ;
 38541                                  ;       if fSharing then
 38542                                  ;           set up DummyCDS (ThisCDS)
 38543                                  ;           canonicalize (sets cMeta)
 38544                                  ;           splice
 38545                                  ;           fatRead
 38546                                  ;           return
 38547                                  ;       if \\ or d:\\ lead then
 38548                                  ;           set up null CDS (ThisCDS)
 38549                                  ;           canonicalize (sets cMeta)
 38550                                  ;           return
 38551                                  ;       if device then
 38552                                  ;           set up dummyCDS (ThisCDS)
 38553                                  ;           canonicalize (sets cMeta)
 38554                                  ;           return
 38555                                  ;       if file then
 38556                                  ;           getCDS (sets (ThisCDS) from name)
 38557                                  ;           validateCDS (may reset current dir)
 38558                                  ;           Copy current dir
 38559                                  ;           canonicalize (set cMeta)
 38560                                  ;           splice
 38561                                  ;           generate correct CDS (ThisCDS)
 38562                                  ;           if local then
 38563                                  ;               fatread
 38564                                  ;           return
 38565                                  ;
 38566                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38567                                  ;               DI - point to buffer in DOSDATA
 38568                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38569                                  ;                   syntax, etc. or user FAILed to I 24.
 38570                                  ;               WFP_Start - points to beginning of buffer
 38571                                  ;               Curr_Dir_End - points to end of current dir in path
 38572                                  ;               DS - DOSDATA
 38573                                  ;   Registers modified: most
 38574                                  ;
 38575                                  ;----------------------------------------------------------------------------
 38576                                  
 38577                                  ; 22/05/2019
 38578                                  ; 13/05/2019 - Retro DOS v4.0
 38579                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38580                                  
 38581                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38582                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38583                                  
 38584                                  TransPath:
 38585 00006A2B 30C0                    	XOR     AL,AL
 38586 00006A2D EB02                    	JMP     SHORT SetSplice
 38587                                  TransPathSet:
 38588 00006A2F B0FF                    	MOV     AL,-1
 38589                                  SetSplice:
 38590 00006A31 36A2[4C03]              	MOV	[SS:NoSetDir],AL	; NoSetDir = !fExact;	;smr;SS Override
 38591 00006A35 B0FF                    	MOV     AL,-1
 38592                                  TransPathNoSet:
 38593 00006A37 36A2[7105]              	MOV	[SS:FSPLICE],AL		; fSplice = TRUE;	;smr;SS Override
 38594 00006A3B 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38595 00006A41 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38596 00006A46 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38597 00006A4D 16                      	push	ss
 38598 00006A4E 07                      	pop	es
 38599                                  	;lea	bp,[di+134]
 38600 00006A4F 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38601                                  ;
 38602                                  ; if this is through the server dos call, fsharing is set. We set up a
 38603                                  ; dummy cds and let the operation go.
 38604                                  ;
 38605                                  	;TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38606                                  	;JZ	short CheckUNC		; skip to UNC check
 38607                                  	; 13/03/2024 (PCDOS 7.1 IBMDOS.COM)
 38608                                  	;;;
 38609 00006A53 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38610 00006A59 7435                    	jz	short CheckUNC
 38611                                  	;;;
 38612                                  ;
 38613                                  ; ES:DI point to buffer
 38614                                  ;
 38615 00006A5B E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38616 00006A5E E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38617 00006A61 722A                    	jc	short NoPath
 38618 00006A63 E80A03                  	CALL	TextFromDrive		; drop in new
 38619 00006A66 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38620 00006A69 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38621 00006A6C 72BC                    	jc	short TransPath_retn	; errors
 38622                                  ;
 38623                                  ; Perform splices for net guys.
 38624                                  ;
 38625 00006A6E 16                      	push	ss
 38626 00006A6F 1F                      	pop	ds
 38627 00006A70 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38628 00006A74 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38629 00006A79 7403                    	JZ	short NoServerSplice
 38630 00006A7B E83102                  	CALL    Splice
 38631                                  NoServerSplice:
 38632 00006A7E 16                      	push	ss
 38633 00006A7F 1F                      	pop	ds                      ; for FATREAD
 38634 00006A80 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38635 00006A84 E86BA8                  	call	ECritDisk
 38636 00006A87 E833EB                  	call	FATREAD_CDS
 38637 00006A8A E880A8                  	call	LCritDisk
 38638                                  NoPath:
 38639                                  	;mov	al,3
 38640 00006A8D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38641 00006A8F C3                      	retn				; any errors are in Carry flag
 38642                                  
 38643                                  ; Let the network decide if the name is for a spooled device. It will map
 38644                                  ; the name if so.
 38645                                  
 38646                                  CheckUNC:
 38647 00006A90 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38648                                  	;CallInstall NetSpoolCheck,MultNET,35
 38649 00006A97 B82311                  	mov	ax,1123h
 38650 00006A9A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38651                                  			; DS:SI -> ASCIZ filename to canonicalize
 38652                                  			; ES:DI -> 128-byte buffer for qualified name
 38653                                  			; Return: CF set if not resolved
 38654 00006A9C 7329                    	JNC	short UNCDone
 38655                                  
 38656                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38657                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38658                                  ; input, then the name has been changed to the remote spooler by the above net
 38659                                  ; call. Also, there may be a drive in front of the \\.
 38660                                  
 38661                                  NO_CHECK:
 38662 00006A9E E8B902                  	CALL    DriveFromText		; eat drive letter
 38663 00006AA1 50                      	PUSH    AX                      ; save it
 38664 00006AA2 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38665 00006AA4 E8E3E4                  	call    PATHCHRCMP              ; convert to normal form
 38666 00006AA7 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38667 00006AA9 E8DEE4                  	call    PATHCHRCMP              ; convert to normal form
 38668 00006AAC 751F                    	JNZ	short CheckDevice	; not a path char
 38669 00006AAE 38C4                    	CMP     AH,AL                   ; are they same?
 38670 00006AB0 751B                    	JNZ	short CheckDevice	; nope
 38671                                  
 38672                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38673                                  ; local machine root path
 38674                                  
 38675 00006AB2 58                      	POP     AX
 38676 00006AB3 A5                      	MOVSW                           ; get the lead \\.
 38677                                  UNCCpy:
 38678 00006AB4 AC                      	LODSB                           ; get a byte
 38679 00006AB5 E87DE4                   	call	UCase                   ;AN000;; convert the char
 38680 00006AB8 08C0                    	OR      AL,AL
 38681 00006ABA 740E                    	JZ	short UNCTerm		; end of string. All done.
 38682 00006ABC E8CBE4                  	call    PATHCHRCMP              ; is it a path char?
 38683 00006ABF 89FB                    	MOV     BX,DI                   ; backup position
 38684 00006AC1 AA                      	STOSB
 38685 00006AC2 75F0                    	JNZ	short UNCCpy		; no, go copy
 38686 00006AC4 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38687                                  UNCDone:
 38688 00006AC7 16                      	push	ss
 38689 00006AC8 1F                      	pop	ds
 38690 00006AC9 C3                       	retn				; return error code
 38691                                  UNCTerm:
 38692 00006ACA AA                      	STOSB                           ;AN000;
 38693 00006ACB EBFA                    	JMP	short UNCDone		;AN000;
 38694                                  
 38695                                  CheckDevice:
 38696                                  
 38697                                  ; Check DS:SI for device. First eat any path stuff
 38698                                  
 38699 00006ACD 58                      	POP     AX                      ; retrieve drive info
 38700 00006ACE 803C00                  	CMP     BYTE [SI],0		; check for null file
 38701 00006AD1 7504                    	JNZ	short CheckPath
 38702                                  	;mov	al,2 
 38703 00006AD3 B002                    	MOV     AL,error_file_not_found ; bad file error
 38704 00006AD5 F9                      	STC                             ; signal error on null input
 38705 00006AD6 C3                      	RETN				; bye!
 38706                                  CheckPath:
 38707 00006AD7 50                      	push	ax
 38708 00006AD8 55                      	push	bp			; save drive number
 38709                                  
 38710                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38711                                  %if 0
 38712                                  	; MSDOS 6.0
 38713                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38714                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38715                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38716                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38717                                  ;;;end up having a 5D in the opcode's displacement field. The
 38718                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38719                                  ;;;
 38720                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38721                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38722                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38723                                  ;;;
 38724                                  ;;;More info:
 38725                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38726                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38727                                  ;;;
 38728                                  	call	no5Dshere
 38729                                  start5Dhack:
 38730                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice
 38731                                  backfrom5Dhack:
 38732                                  
 38733                                  %endif
 38734                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38735                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38736 00006AD9 E840D7                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38737                                  
 38738 00006ADC 5D                      	pop	bp
 38739 00006ADD 58                      	pop	ax			; get drive letter back
 38740 00006ADE 731C                    	JNC	short DoFile		; yes we have a file.
 38741                                  
 38742                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38743                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38744                                  ; call.
 38745                                  
 38746 00006AE0 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38747 00006AE6 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38748 00006AE9 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38749                                  
 38750                                  ; Now that we have noted that we have a device, we put it into a form that
 38751                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38752                                  ; string. We relax this to state that if the d:\ is present then the path
 38753                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38754                                  ; a device.
 38755                                  
 38756 00006AEF E87E02                  	CALL    TextFromDrive
 38757 00006AF2 B02F                    	MOV     AL,'/'                  ; path sep.
 38758 00006AF4 AA                      	STOSB
 38759 00006AF5 E8C0A6                  	call	StrCpy			; move remainder of string
 38760                                  
 38761 00006AF8 F8                      	CLC                             ; everything OK.
 38762 00006AF9 16                      	push	ss
 38763 00006AFA 1F                      	pop	ds                      ; remainder of OK stuff
 38764                                  DoFile_retn:
 38765 00006AFB C3                      	retn
 38766                                  
 38767                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38768                                  %if 0
 38769                                  
 38770                                  no5Dshere:
 38771                                  	; 10/08/2018
 38772                                  	jmp	CheckThisDevice		; snoop for device
 38773                                  %endif
 38774                                  
 38775                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38776                                  
 38777                                  ; We have a file. Get the raw CDS.
 38778                                  
 38779                                  DoFile:
 38780                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38781                                  
 38782 00006AFC E839FE                  	call	GetVisDrv               ; get proper CDS
 38783                                  	;mov	al,3 
 38784 00006AFF B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38785 00006B01 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38786                                  
 38787                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38788                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38789                                  ; Use the one that we are going to use (ES:DI).
 38790                                  
 38791                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38792 00006B03 1E                      	push	ds
 38793 00006B04 56                      	push	si
 38794 00006B05 06                      	push	es
 38795 00006B06 57                      	push	di
 38796 00006B07 E85BD6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38797                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38798 00006B0A 5F                      	pop	di
 38799 00006B0B 07                      	pop	es
 38800 00006B0C 5E                      	pop	si
 38801 00006B0D 1F                      	pop	ds
 38802                                  	;mov	al,3
 38803 00006B0E B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38804                                  	;retc				; someone failed an operation
 38805 00006B10 72E9                    	jc	short DoFile_retn
 38806                                  
 38807                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38808                                  ; current directory. Copy it in.
 38809                                  
 38810 00006B12 1E                      	push	ds
 38811 00006B13 56                      	push	si
 38812 00006B14 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38813 00006B19 89FB                    	MOV     BX,DI                   ; point to destination
 38814                                  	;add	bx,[si+79] ; MSDOS 6.0
 38815 00006B1B 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38816                                  	;lea	bp,[di+134]
 38817 00006B1E 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38818                                  					;AN000;
 38819 00006B22 E8A2A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38820 00006B25 4F                      	DEC     DI                      ; point to NUL byte
 38821                                  
 38822                                  ; Make sure that there is a path char at end.
 38823                                  
 38824 00006B26 B05C                    	MOV     AL,'\'
 38825 00006B28 263845FF                	CMP     [ES:DI-1],AL
 38826 00006B2C 7401                    	JZ	short GetOrig
 38827 00006B2E AA                      	STOSB
 38828                                  
 38829                                  ; Now get original string.
 38830                                  
 38831                                  GetOrig:
 38832 00006B2F 4F                      	DEC     DI                      ; point to path char
 38833 00006B30 5E                      	pop	si
 38834 00006B31 1F                      	pop	ds
 38835                                  
 38836                                  ; BX points to the end of the root part of the CDS (at where a path char
 38837                                  ; should be). Now, we decide whether we use this root or extend it with the
 38838                                  ; current directory. See if the input string begins with a leading 
 38840 00006B32 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38841 00006B35 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38842 00006B37 08C0                    	OR      AL,AL                   ; end of string?
 38843 00006B39 7410                    	JZ	short DoCanon		; yes, skip.
 38844                                  ;
 38845                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38846                                  ; to this root. Make sure that there is a path char there and advance the
 38847                                  ; source string over all leading \'s.
 38848                                  ;
 38849 00006B3B 89DF                    	MOV     DI,BX                   ; back up to root point.
 38850                                  SkipPath:
 38851 00006B3D AC                      	LODSB
 38852 00006B3E E849E4                  	call    PATHCHRCMP
 38853 00006B41 74FA                    	JZ	short SkipPath
 38854 00006B43 4E                      	DEC     SI
 38855 00006B44 08C0                    	OR      AL,AL
 38856 00006B46 7403                    	JZ	short DoCanon
 38857                                  
 38858                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38859                                  ; for yucks.
 38860                                  
 38861                                  PathAssure:
 38862 00006B48 B05C                    	MOV     AL,'\'	; 5Ch
 38863 00006B4A AA                      	STOSB
 38864                                  
 38865                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38866                                  ; BP is the max extent to advance DI
 38867                                  ; BX is the backup limit for ..
 38868                                  
 38869                                  DoCanon:
 38870 00006B4B E85200                  	CALL    Canonicalize            ; wham.
 38871                                  	;retc				; badly formatted path.
 38872 00006B4E 72AB                    	jc	short DoFile_retn
 38873                                  
 38874                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38875                                  ; to wfp_start and do string substitution. BP is still the max position in
 38876                                  ; buffer.
 38877                                  
 38878 00006B50 16                      	push	ss
 38879 00006B51 1F                      	pop	ds
 38880 00006B52 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38881 00006B56 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38882 00006B5A E81B02                  	CALL    PathPref                ; is there a prefix?
 38883 00006B5D 7514                    	JNZ	short DoSplice		; no, do splice
 38884                                  
 38885                                  ; We have a match. Check to see if we ended in a path char.
 38886                                  
 38887 00006B5F 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38888 00006B62 E825E4                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38889 00006B65 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38890                                  Pathline:                               ; 2/13/KK
 38891 00006B67 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38892 00006B6B 7406                    	JZ	short DoSplice
 38893 00006B6D 47                      	INC     DI                      ; point to after current path char
 38894 00006B6E 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38895                                  
 38896                                  ; Splice the result.
 38897                                  
 38898                                  DoSplice:
 38899 00006B73 16                      	push	ss
 38900 00006B74 1F                      	pop	ds			; back to DOSDATA
 38901 00006B75 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38902 00006B79 31C9                    	XOR     CX,CX
 38903 00006B7B F606[7105]FF            	TEST	byte [FSPLICE],-1
 38904 00006B80 7403                    	JZ	short SkipSplice
 38905 00006B82 E82A01                  	CALL    Splice                  ; replaces in place.
 38906                                  SkipSplice:
 38907                                  
 38908                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38909                                  ; device.
 38910                                  
 38911 00006B85 16                      	push	ss
 38912 00006B86 1F                      	pop	ds
 38913 00006B87 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38914                                  	;test	word [es:di+67],8000h
 38915                                  	; 17/12/2022
 38916                                  	;test	byte [es:di+68],80h
 38917 00006B8B 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38918                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38919 00006B90 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38920 00006B92 E30B                    	JCXZ    Done
 38921 00006B94 E85BA7                  	call	ECritDisk
 38922 00006B97 E823EA                  	call	FATREAD_CDS
 38923 00006B9A E870A7                  	call	LCritDisk
 38924                                  	;mov	al, 3
 38925 00006B9D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38926                                  Done:   
 38927 00006B9F C3                      	retn                         ; any errors in carry flag.
 38928                                  
 38929                                  ; 13/07/2018
 38930                                  
 38931                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38932                                  ;----------------------------------------------------------------------------
 38933                                  ;   Canonicalize - copy path removing . and .. entries.
 38934                                  ;
 38935                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38936                                  ;               ES:DI - point to buffer
 38937                                  ;               BX - backup limit (offset from ES) points to slash
 38938                                  ;               BP - end of buffer
 38939                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38940                                  ;                   syntax, etc.
 38941                                  ;               Carry Clear -
 38942                                  ;                   DS:DI - advanced to end of string
 38943                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38944                                  ;   Registers modified: AX CX DX (in addition to those above)
 38945                                  ;----------------------------------------------------------------------------
 38946                                  
 38947                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38948                                  
 38949                                  Canonicalize:
 38950                                  
 38951                                  ; We copy all leading path separators.
 38952                                  
 38953 00006BA0 AC                      	LODSB                           ;   while (PathChr (*s))
 38954 00006BA1 E8E6E3                  	call    PATHCHRCMP
 38955 00006BA4 7507                    	JNZ	short CanonDec
 38956 00006BA6 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38957 00006BA8 7319                    	JAE	short CanonBad		;           goto error;
 38958 00006BAA AA                      	STOSB
 38959 00006BAB EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38960                                  CanonDec:
 38961 00006BAD 4E                      	DEC     SI
 38962                                  
 38963                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38964                                  ; component (no leading path separators) and ES:DI being the destination
 38965                                  ; buffer.
 38966                                  
 38967                                  CanonLoop:
 38968                                  
 38969                                  ; If we are at the end of the source string, then we need to check to see that
 38970                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38971                                  ; Otherwise, do nothing
 38972                                  
 38973 00006BAE 31C0                    	XOR     AX,AX
 38974 00006BB0 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38975 00006BB2 751A                    	JNZ	short DoComponent
 38976 00006BB4 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38977 00006BB9 7505                    	JNZ	short DoTerminate
 38978 00006BBB B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38979 00006BBD AA                      	STOSB
 38980 00006BBE 88E0                    	MOV     AL,AH
 38981                                  DoTerminate:
 38982 00006BC0 AA                      	STOSB                           ;           *d++ = 0;
 38983 00006BC1 F8                      	CLC                             ;           return (0);
 38984 00006BC2 C3                      	retn
 38985                                  
 38986                                  CanonBad:
 38987 00006BC3 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38988                                  	;mov	al,3
 38989 00006BC6 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38990 00006BC8 7402                    	JZ	short PathEnc		; path character encountered in string
 38991                                  	;mov	al,2
 38992 00006BCA B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38993                                  PathEnc:
 38994 00006BCC F9                      	STC
 38995                                  CanonBad_retn:
 38996 00006BCD C3                      	retn
 38997                                  
 38998                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38999                                  ; it to 8.3
 39000                                  
 39001                                  DoComponent:                            ;           }
 39002 00006BCE E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 39003 00006BD1 72FA                    	jc	short CanonBad_retn	;           return (-1);
 39004                                  
 39005                                  ; We special case the . and .. cases. These will be backed up.
 39006                                  
 39007                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 39008 00006BD3 26833D2E                	CMP	WORD [ES:DI],002Eh
 39009 00006BD7 7408                    	JZ	short Skip1
 39010                                  	;CMP	WORD PTR ES:[DI],'..'
 39011 00006BD9 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 39012 00006BDE 750A                    	JNZ	short CanonNormal
 39013 00006BE0 4F                      	DEC     DI                      ;           d--;
 39014                                  Skip1:  
 39015 00006BE1 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 39016                                  	;mov	al,3
 39017 00006BE4 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39018 00006BE6 72E5                    	jc	short CanonBad_retn
 39019 00006BE8 EB02                    	JMP     short CanonPath         ;           }
 39020                                  
 39021                                  ; We have a normal path. Advance destination pointer over it.
 39022                                  
 39023                                  CanonNormal:                            ;       else
 39024 00006BEA 01CF                    	ADD     DI,CX                   ;           d += ct;
 39025                                  
 39026                                  ; We have successfully copied a component. We are now pointing at a path
 39027                                  ; sep char or are pointing at a nul or are pointing at something else.
 39028                                  ; If we point at something else, then we have an error.
 39029                                  
 39030                                  CanonPath:
 39031 00006BEC E81600                  	CALL    PathSep
 39032 00006BEF 75D2                    	JNZ	short CanonBad		; something else...
 39033                                  
 39034                                  ; Copy the first path char we see.
 39035                                  
 39036 00006BF1 AC                      	LODSB                           ; get the char
 39037 00006BF2 E895E3                  	call    PATHCHRCMP              ; is it path char?
 39038 00006BF5 75B6                    	JNZ	short CanonDec		; no, go test for nul
 39039 00006BF7 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 39040 00006BF9 73C8                    	JAE	short CanonBad		; yep, error.
 39041 00006BFB AA                      	STOSB                           ; copy the one byte
 39042                                  
 39043                                  ; Skip all remaining path chars
 39044                                  
 39045                                  CanonPathLoop:
 39046 00006BFC AC                      	LODSB                           ; get next byte
 39047 00006BFD E88AE3                  	call    PATHCHRCMP              ; path char again?
 39048 00006C00 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 39049 00006C02 4E                      	DEC     SI                      ; back up
 39050 00006C03 EBA9                    	JMP	short  CanonLoop	; go copy component
 39051                                  
 39052                                  ;BREAK <PathSep - determine if char is a path separator>
 39053                                  ;----------------------------------------------------------------------------
 39054                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 39055                                  ;   Inputs:     DS:SI - point to a char
 39056                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 39057                                  ;               Zero set if AL is / \ or NUL
 39058                                  ;               Zero reset otherwise
 39059                                  ;   Registers modified: AL
 39060                                  ;----------------------------------------------------------------------------
 39061                                  
 39062                                  PathSep:
 39063 00006C05 8A04                    	MOV     AL,[SI]                 ; get the character
 39064                                  PathSepGotCh:				; already have character
 39065 00006C07 08C0                    	OR      AL,AL                   ; test for zero
 39066 00006C09 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 39067                                  	;call	PATHCHRCMP              ; check for path character
 39068                                  	;retn				; and return HIS determination
 39069                                  	; 18/12/2022
 39070 00006C0B E97CE3                  	jmp	PATHCHRCMP
 39071                                  
 39072                                  ;BREAK <SkipBack - move backwards to a path separator>
 39073                                  ;----------------------------------------------------------------------------
 39074                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 39076                                  ;               BX has current directory back up limit (point to a / \)
 39077                                  ;   Outputs:    ES:DI backed up to point to a path char
 39078                                  ;               AL has char from output ES:DI (path sep if carry clear)
 39079                                  ;               Carry set if illegal backup
 39080                                  ;               Carry Clear if ok
 39081                                  ;   Registers modified: DI,AL
 39082                                  ;----------------------------------------------------------------------------
 39083                                  
 39084                                  SkipBack:
 39085 00006C0E 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 39086 00006C10 720B                    	JB	short SkipBad		;       if (d < dlim)
 39087 00006C12 4F                      	DEC     DI                      ;           goto err;
 39088 00006C13 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 39089 00006C16 E871E3                  	call    PATHCHRCMP              ;           break;
 39090 00006C19 75F3                    	JNZ	short SkipBack		;       }
 39091 00006C1B F8                      	CLC                             ;   return (0);
 39092 00006C1C C3                      	retn				;
 39093                                  SkipBad:                                ;err:
 39094                                  	;mov	al,3
 39095 00006C1D B003                    	MOV     AL,error_path_not_found ; bad path error
 39096 00006C1F F9                      	STC                             ;   return (-1);
 39097 00006C20 C3                      	retn				;
 39098                                  
 39099                                  ;Break <CopyComponent - copy out a file path component>
 39100                                  ;----------------------------------------------------------------------------
 39101                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 39102                                  ;
 39103                                  ;   Inputs:     DS:SI - source path
 39104                                  ;               ES:DI - destination
 39105                                  ;               ES:BP - end of buffer
 39106                                  ;   Outputs:    Carry Set - too long
 39107                                  ;               Carry Clear - DS:SI moved past component
 39108                                  ;                   CX has length of destination
 39109                                  ;   Registers modified: AX,CX,DX
 39110                                  ;----------------------------------------------------------------------------
 39111                                  
 39112                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39113                                  
 39114                                  CopyComponent:
 39115                                  
 39116                                  %define CopyBP	 [BP]		; word
 39117                                  %define CopyD	 [BP+2]		; dword
 39118                                  %define CopyDoff [BP+2]		; word
 39119                                  %define CopyS	 [BP+6]		; dword
 39120                                  %define CopySoff [BP+6]		; word
 39121                                  %define CopyTemp [BP+10]	; byte
 39122                                  
 39123 00006C21 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 39124 00006C24 1E                      	push	ds
 39125 00006C25 56                      	push	si
 39126 00006C26 06                      	push	es
 39127 00006C27 57                      	push	di
 39128 00006C28 55                      	push	bp
 39129 00006C29 89E5                    	MOV     BP,SP
 39130 00006C2B B42E                    	MOV     AH,'.'
 39131 00006C2D AC                      	LODSB
 39132 00006C2E AA                      	STOSB
 39133 00006C2F 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 39134 00006C31 7518                    	JNZ	short NormalComp
 39135 00006C33 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 39136 00006C36 740B                    	JZ	short NulTerm
 39137                                  TryTwoDot:
 39138 00006C38 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 39139 00006C39 AA                      	STOSB
 39140 00006C3A 38E0                    	CMP     AL,AH
 39141 00006C3C 7557                    	JNZ	short CopyBad
 39142 00006C3E E8C4FF                  	CALL    PathSep
 39143 00006C41 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 39144                                  NulTerm:                                ;               return -1;
 39145 00006C43 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 39146 00006C45 AA                      	STOSB
 39147 00006C46 897606                  	MOV     CopySoff,SI
 39148 00006C49 EB47                    	JMP     SHORT _GoodRet		;       }
 39149                                  NormalComp:                             ;   else {
 39150 00006C4B 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 39151 00006C4E E87BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 39152 00006C51 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 39153 00006C54 743F                    	JZ	short CopyBad		;           return (-1);
 39154 00006C56 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 39155 00006C5C 7510                    	JNZ	short DoPack
 39156 00006C5E 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 39157 00006C61 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 39158 00006C66 7F2D                    	JG	short CopyBad		;               return (-1);
 39159 00006C68 7504                    	JNZ	short DoPack		;           else
 39160 00006C6A 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 39161 00006C6C 742F                    	JZ	short CopyBadPath	;               return (-1);
 39162                                  DoPack:                                 ;           }
 39163 00006C6E 897606                  	MOV     CopySoff,SI ; [bp+6]
 39164 00006C71 16                      	push	ss
 39165 00006C72 1F                      	pop	ds
 39166 00006C73 BE[4B05]                	MOV     SI,NAME1
 39167 00006C76 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 39168 00006C79 57                      	push	di
 39169 00006C7A E8F5B3                  	call	PackName                ;       PackName (Name1, temp);
 39170 00006C7D 5F                      	pop	di
 39171 00006C7E E84FA5                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 39172 00006C81 49                      	DEC     CX
 39173 00006C82 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 39174                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39175                                  	;cmp	cx,[bp+0]
 39176                                  	; 15/12/2022
 39177                                  	;cmp	cx,[bp]
 39178 00006C85 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 39179 00006C88 730B                    	JAE	short CopyBad		;           return (-1);
 39180 00006C8A 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 39181 00006C8C C47E02                  	LES     DI,CopyD    ; [bp+2]	
 39182 00006C8F E835A5                  	call	FStrCpy
 39183                                  _GoodRet:				;       }
 39184 00006C92 F8                      	CLC
 39185 00006C93 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 39186                                  CopyBad:
 39187 00006C95 F9                      	STC
 39188 00006C96 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 39189                                  	;mov	al,2
 39190 00006C99 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 39191 00006C9B 7503                    	JNZ	short CopyEnd
 39192                                  CopyBadPath:
 39193 00006C9D F9                      	STC
 39194                                  	;mov	al,3
 39195 00006C9E B003                    	MOV     AL,error_path_not_found ; Set bad path error
 39196                                  CopyEnd:
 39197 00006CA0 5D                      	pop	bp
 39198 00006CA1 5F                      	pop	di
 39199 00006CA2 07                      	pop	es
 39200 00006CA3 5E                      	pop	si
 39201 00006CA4 1F                      	pop	ds
 39202 00006CA5 9F                      	LAHF
 39203 00006CA6 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 39204 00006CA9 E824A5                  	call	StrLen
 39205 00006CAC 49                      	DEC     CX
 39206 00006CAD 9E                      	SAHF
 39207 00006CAE C3                      	retn
 39208                                  
 39209                                  ; 14/05/2019 - Retro DOS v4.0
 39210                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 39211                                  
 39212                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39213                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 39214                                  
 39215                                  ;Break <Splice - pseudo mount by string substitution>
 39216                                  ;----------------------------------------------------------------------------
 39217                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 39218                                  ;       ThisCDS to point to physical drive CDS.
 39219                                  ;   Inputs:     DS:SI point to string
 39220                                  ;               NoSetDir = TRUE => exact matches with splice fail
 39221                                  ;   Outputs:    DS:SI points to thisCDS
 39222                                  ;               ES:DI points to DPB
 39223                                  ;               String at DS:SI may be reduced in length by removing prefix
 39224                                  ;               and substituting drive letter.
 39225                                  ;               CX = 0 If no splice done
 39226                                  ;               CX <> 0 otherwise
 39227                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 39228                                  ;                   left alone
 39229                                  ;               ThisDPB points to proper DPB
 39230                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 39231                                  ;----------------------------------------------------------------------------
 39232                                  
 39233                                  Splice:
 39234 00006CAF 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 39235 00006CB5 7469                    	JZ	short AllDone
 39236 00006CB7 36FF36[A205]            	push	word [SS:THISCDS]
 39237 00006CBC 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 39238 00006CC1 1E                      	push	ds
 39239 00006CC2 56                      	push	si
 39240 00006CC3 5F                      	pop	di
 39241 00006CC4 07                      	pop	es
 39242 00006CC5 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 39243                                  SpliceScan:
 39244 00006CC7 E8DFFC                  	call	GetCDSFromDrv
 39245 00006CCA 724A                    	JC	short SpliceDone
 39246 00006CCC FEC0                    	INC     AL
 39247                                  	; 17/12/2022
 39248                                  	;test	byte [si+68],20h
 39249 00006CCE F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 39250                                  	;;test	word [si+67],2000h
 39251                                  	;TEST	word [SI+curdir.flags],curdir_splice
 39252 00006CD2 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 39253 00006CD4 57                      	push	di
 39254 00006CD5 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 39255 00006CD8 7403                    	JZ	short SpliceFound	;
 39256                                  SpliceSkip:
 39257 00006CDA 5F                      	pop	di
 39258 00006CDB EBEA                    	JMP	short SpliceScan	;               continue;
 39259                                  SpliceFound:
 39260 00006CDD 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 39261 00006CE1 7508                    	JNZ	short SpliceDo
 39262 00006CE3 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 39263 00006CE9 75EF                    	JNZ	short SpliceSkip
 39264                                  SpliceDo:
 39265 00006CEB 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 39266 00006CED 06                      	push	es
 39267 00006CEE 1F                      	pop	ds
 39268 00006CEF 5F                      	pop	di
 39269 00006CF0 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 39270 00006CF3 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 39271 00006CF7 09C0                    	OR      AX,AX
 39272 00006CF9 7808                    	JS	short NoPoke
 39273 00006CFB 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 39274 00006CFD 29F0                    	SUB     AX,SI
 39275 00006CFF 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 39276                                  NoPoke:
 39277 00006D03 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 39278 00006D06 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 39279 00006D08 B05C                    	MOV     AL,"\"
 39280 00006D0A AA                      	STOSB
 39281                                  SpliceCopy:                             ;               strcpy (src, p);
 39282 00006D0B E8B9A4                  	call	FStrCpy
 39283 00006D0E 83C404                  	ADD     SP,4                    ; throw away saved stuff
 39284 00006D11 80C901                  	OR      CL,1                    ; signal splice done.
 39285 00006D14 EB0C                    	JMP     SHORT DoSet             ;               return;
 39286                                  SpliceDone:                             ;               }
 39287 00006D16 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 39288 00006D1B 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 39289                                  AllDone:
 39290 00006D20 31C9                    	XOR     CX,CX
 39291                                  DoSet:
 39292 00006D22 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 39293                                  	;les	di,[si+69]
 39294 00006D27 C47C45                  	LES     DI,[SI+curdir.devptr]	
 39295 00006D2A 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 39296 00006D2F 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39297                                  Splice_retn:
 39298 00006D34 C3                      	retn
 39299                                  
 39300                                  ; 15/05/2019 - Retro DOS v4.0
 39301                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39302                                  
 39303                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39304                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39305                                  
 39306                                  ;Break <$NameTrans - partially process a name>
 39307                                  ;----------------------------------------------------------------------------
 39308                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39309                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39310                                  ;   to Transpath playing games with devices, we need to insure that the output
 39311                                  ;   has drive letter and : in it.
 39312                                  ;
 39313                                  ;   Inputs:     DS:SI - source string for translation
 39314                                  ;               ES:DI - pointer to buffer
 39315                                  ;   Outputs:
 39316                                  ;       Carry Clear
 39317                                  ;               Buffer at ES:DI is filled in with data
 39318                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39319                                  ;       Carry Set
 39320                                  ;               AX = error_path_not_found
 39321                                  ;   Registers modified: all
 39322                                  ;----------------------------------------------------------------------------
 39323                                  
 39324                                  _$NameTrans:
 39325 00006D35 1E                      	push	ds
 39326 00006D36 56                      	push	si
 39327 00006D37 06                      	push	es
 39328 00006D38 57                      	push	di
 39329 00006D39 51                      	push	cx ; MSDOS 6.0
 39330                                  	
 39331                                  	; MSDOS 6.0	
 39332                                  ; M027 - Start
 39333                                  ;
 39334                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39335                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39336                                  ; device if the old call set the volume attribute bit. Note that devname in
 39337                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39338                                  ; and restore CX.
 39339                                  
 39340                                  	;mov	ch,16h
 39341 00006D3A B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39342 00006D3C E8B102                  	call	SetAttrib
 39343                                  
 39344                                  ; M027 - End
 39345                                  
 39346                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39347 00006D3F BF[BE03]                	MOV     DI,OPENBUF
 39348 00006D42 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 39349 00006D45 59                      	pop	cx ; MSDOS 6.0
 39350 00006D46 5F                      	pop     di
 39351 00006D47 07                      	pop	es
 39352 00006D48 5E                      	pop     si
 39353 00006D49 1F                      	pop     ds
 39354 00006D4A 7303                    	JNC	short TransOK
 39355 00006D4C E9EF98                  	jmp	SYS_RET_ERR
 39356                                  TransOK:
 39357 00006D4F BE[BE03]                	MOV     SI,OPENBUF
 39358 00006D52 16                      	push	ss
 39359 00006D53 1F                      	pop	ds
 39360                                  ;GotText:
 39361 00006D54 E870A4                  	call	FStrCpy
 39362 00006D57 E9DB98                  	jmp	SYS_RET_OK
 39363                                  
 39364                                  ;Break   <DriveFromText - return drive number from a text string>
 39365                                  ;----------------------------------------------------------------------------
 39366                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39367                                  ;   pointer.
 39368                                  ;
 39369                                  ;   Inputs:     DS:SI point to a text string
 39370                                  ;   Outputs:    AL has drive number
 39371                                  ;               DS:SI advanced
 39372                                  ;   Registers modified: AX,SI.
 39373                                  ;----------------------------------------------------------------------------
 39374                                  
 39375                                  DriveFromText:
 39376 00006D5A 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39377                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39378                                  	; 23/09/2023
 39379 00006D5C 3804                    	cmp	[si],al ; 0
 39380 00006D5E 74D4                    	jz	short Splice_retn
 39381 00006D60 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39382 00006D64 75CE                    	jnz	short Splice_retn
 39383 00006D66 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39384 00006D67 0C20                    	OR      AL,20h
 39385                                  	;sub	al,60h
 39386 00006D69 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39387 00006D6B 75C7                    	jnz	short Splice_retn
 39388 00006D6D B0FF                    	MOV	AL,-1                   ; nuke AL...
 39389                                  	; 23/09/2023
 39390                                  	;dec	al ; -1
 39391 00006D6F C3                      	retn				;           }
 39392                                  
 39393                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39394                                  ;----------------------------------------------------------------------------
 39395                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39396                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39397                                  ;
 39398                                  ;   Inputs:     AL has 0-based drive number
 39399                                  ;   Outputs:    ES:DI advanced
 39400                                  ;   Registers modified: AX
 39401                                  ;----------------------------------------------------------------------------
 39402                                  
 39403                                  TextFromDrive:
 39404 00006D70 FEC0                    	INC     AL
 39405                                  TextFromDrive1:
 39406                                  	;add	al,40h
 39407 00006D72 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39408 00006D74 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39409 00006D76 AB                      	STOSW
 39410                                  PathPref_retn:
 39411 00006D77 C3                      	retn
 39412                                  
 39413                                  ;Break   <PathPref - see if one path is a prefix of another>
 39414                                  ;----------------------------------------------------------------------------
 39415                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39416                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39417                                  ;   prefix: A:\ and A:\FOO
 39418                                  ;
 39419                                  ;   Inputs:     DS:SI potential prefix
 39420                                  ;               ES:DI string
 39421                                  ;   Outputs:    Zero set => prefix found
 39422                                  ;                   DI/SI advanced past matching part
 39423                                  ;               Zero reset => no prefix, DS/SI garbage
 39424                                  ;   Registers modified: CX
 39425                                  ;----------------------------------------------------------------------------
 39426                                  
 39427                                  PathPref:
 39428 00006D78 E863A4                  	call	DStrLen                 ; get length
 39429 00006D7B 49                      	DEC     CX                      ; do not include nul byte
 39430 00006D7C F3A6                    	REPZ    CMPSB                   ; compare
 39431 00006D7E 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39432 00006D80 50                      	push	ax			; save char register
 39433 00006D81 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39434 00006D84 E803E2                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39435 00006D87 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39436                                  NotSep:                                 ; 2/13/KK
 39437 00006D89 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39438 00006D8C E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39439                                  Prefix:
 39440 00006D8F 58                      	pop	ax			; get back original
 39441 00006D90 C3                      	retn
 39442                                  
 39443                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39444                                  ;----------------------------------------------------------------------------
 39445                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39446                                  ;     a path separator.
 39447                                  ;
 39448                                  ;     Input:    DS:SI target string (null terminated)
 39449                                  ;     Output:   Zero set => path separator encountered in string
 39450                                  ;               Zero clear => null encountered
 39451                                  ;     Registers modified: SI
 39452                                  ;----------------------------------------------------------------------------
 39453                                  
 39454                                  ScanPathChar:
 39455 00006D91 AC                      	LODSB                           ; fetch a character
 39456 00006D92 E872FE                  	call    PathSepGotCh
 39457 00006D95 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39458                                  	;call	PATHCHRCMP              ; path separator?
 39459                                  	;retn
 39460                                  	; 18/12/2022
 39461 00006D97 E9F0E1                  	jmp	PATHCHRCMP
 39462                                  
 39463                                  ;============================================================================
 39464                                  ; FILE.ASM, MSDOS 6.0, 1991
 39465                                  ;============================================================================
 39466                                  ; 14/07/2018 - Retro DOS v3.0
 39467                                  
 39468                                  ; 13/05/2019 - Retro DOS v4.0
 39469                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39470                                  
 39471                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39472                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39473                                  
 39474                                  ; MSDOS 2.11
 39475                                  ;BREAK <$Open - open a file handle>
 39476                                  ;----------------------------------------------------------------------------
 39477                                  ;   Assembler usage:
 39478                                  ;           LDS     DX, Name
 39479                                  ;           MOV     AH, Open
 39480                                  ;           MOV     AL, access
 39481                                  ;           INT     int_command
 39482                                  ;
 39483                                  ;       ACCESS          Function
 39484                                  ;       ------          --------
 39485                                  ;       open_for_read   file is opened for reading
 39486                                  ;       open_for_write  file is opened for writing
 39487                                  ;       open_for_both   file is opened for both reading and writing.
 39488                                  ;
 39489                                  ;   Error returns:
 39490                                  ;           AX = error_invalid_access
 39491                                  ;              = error_file_not_found
 39492                                  ;              = error_access_denied
 39493                                  ;              = error_too_many_open_files
 39494                                  ;----------------------------------------------------------------------------
 39495                                  
 39496                                  ; MSDOS 6.0
 39497                                  ;	BREAK <$Open - open a file from a path string>
 39498                                  ;----------------------------------------------------------------------------
 39499                                  ;
 39500                                  ;**	$OPen - Open a File
 39501                                  ;
 39502                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39503                                  ;	file and and returns a handle
 39504                                  ;
 39505                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39506                                  ;		(AL) = open mode
 39507                                  ;	EXIT	'C' clear if OK
 39508                                  ;		  (ax) = file handle
 39509                                  ;		'C' set if error
 39510                                  ;		  (ax) = error code
 39511                                  ;	USES	all
 39512                                  ;
 39513                                  ;----------------------------------------------------------------------------
 39514                                  
 39515                                  ; 13/05/2019 - Retro DOS v4.0
 39516                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39517                                  
 39518                                  ; 14/03/2024 - Retro DOS v4.1
 39519                                  
 39520                                  _$OPEN:       
 39521 00006D9A 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39522                                  _$Open2:
 39523                                  	;mov	ch,16h
 39524 00006D9C B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39525 00006D9E E84F02                  	call	SetAttrib
 39526 00006DA1 B9[F42A]                	mov	cx,DOS_OPEN
 39527                                  
 39528                                  	;xor	ah,ah  ; MSDOS 3.3
 39529                                  
 39530 00006DA4 50                      	push	ax
 39531                                  
 39532                                  ;*	General file open/create code. The $CREATE call and the various
 39533                                  ;	$OPEN calls all come here.
 39534                                  ;
 39535                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39536                                  ;	path names, etc., and then dispatch to our individual handlers.
 39537                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39538                                  ;
 39539                                  ;	(TOS) = create mode
 39540                                  ;	(CX) = address of routine to call to do actual function
 39541                                  ;	(DS:DX) = ASCIZ name
 39542                                  ;	SAttrib = Attribute mask
 39543                                  
 39544                                  ;	Get a free SFT and mark it "being allocated"
 39545                                  
 39546                                  AccessFile:
 39547 00006DA5 E84AA5                  	call	ECritSFT
 39548 00006DA8 E8EAF7                  	call	SFNFree			; get a free sfn
 39549 00006DAB E85FA5                  	call	LCritSFT
 39550                                  	;jc	short OpenFailJ		; oops, no free sft's
 39551                                  	; 14/03/2024
 39552 00006DAE 7248                    	jc	short OpenFail
 39553                                  
 39554 00006DB0 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39555 00006DB5 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39556 00006DBA 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39557                                  
 39558                                  ;	Find a free area in the user's JFN table.
 39559                                  
 39560 00006DBF E8C0F7                  	call	JFNFree			; get a free jfn
 39561                                  	;jnc	short SaveJFN
 39562                                  	; 14/03/2024
 39563 00006DC2 7234                    	jc	short OpenFail
 39564                                  	;
 39565                                  ;OpenFailJ:
 39566                                  	;JMP	OpenFail		; there were free JFNs... try SFN
 39567                                  
 39568                                  SaveJFN:
 39569 00006DC4 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39570 00006DC9 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39571 00006DCE 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39572                                  
 39573                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39574                                  ;	reusing the same JFN.
 39575                                  
 39576 00006DD3 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39577 00006DD8 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39578 00006DDB 89D6                    	MOV	SI,DX			; get name in appropriate place
 39579 00006DDD BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39580 00006DE0 51                      	push	cx			; save routine to call
 39581 00006DE1 E847FC                  	call	TransPath		; convert the path
 39582 00006DE4 5B                      	pop	bx			; (bx) = routine to call
 39583                                  
 39584 00006DE5 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39585                                  	;JC	short OpenCleanJ	; no error, go and open file
 39586                                  	; 14/03/2024
 39587 00006DEA 7260                    	jc	short OpenClean
 39588                                  
 39589 00006DEC 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39590 00006DF2 7408                    	JZ	short SetSearch
 39591                                  	;mov	al,2
 39592 00006DF4 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39593                                  OpenCleanJ:
 39594 00006DF6 EB54                    	JMP	short OpenClean
 39595                                  
 39596                                  	; 14/03/2024 (PCDOS 7.1 IBMDOS.COM)
 39597                                  	;;;
 39598                                  OpenFail:
 39599 00006DF8 FB                      	STI
 39600 00006DF9 59                      	pop	cx			; Clean stack
 39601                                  	;
 39602 00006DFA EB5D                    	jmp	short OpenCritLeave
 39603                                  	;;;
 39604                                  
 39605                                  SetSearch:
 39606 00006DFC 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39607                                  
 39608                                  ;	We need to get the new inheritance bits.
 39609                                  
 39610 00006DFD 31C9                    	xor	cx,cx
 39611                                  	; MSDOS 6.0
 39612                                  	;mov	[si+2],cx ; 0
 39613 00006DFF 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39614                                  	;mov    [si+51],cx ; 0
 39615 00006E02 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39616                                  	;
 39617 00006E05 81FB[F42A]              	CMP	BX,DOS_OPEN
 39618 00006E09 7509                    	JNZ	short _DoOper
 39619                                  	;test   al,80h
 39620 00006E0B A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39621 00006E0D 7405                    	JZ	short _DoOper ; 10/08/2018
 39622 00006E0F 247F                    	AND	AL,7Fh			; mask off inherit bit
 39623                                  	;mov	cx,1000h
 39624 00006E11 B90010                  	MOV	CX,sf_no_inherit
 39625                                  _DoOper:
 39626                                  	;; MSDOS 3.3
 39627                                  	;;mov	word [si+2], 0
 39628                                  	;;mov	word [si+33h], 0
 39629                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39630                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39631                                  
 39632                                  	; MSDOS 6.0
 39633                                  ;**	Check if this is an extended open. If so you must set the
 39634                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39635                                  ;	Set_EXT_mode in creat.asm
 39636                                  
 39637                                  	; MSDOS 6.0
 39638                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39639 00006E14 57                      	push	di
 39640 00006E15 06                      	push	es
 39641 00006E16 1E                      	push	ds
 39642 00006E17 07                      	pop	es
 39643 00006E18 56                      	push	si
 39644 00006E19 5F                      	pop	di			; (es:di) = SFT address
 39645 00006E1A E8C3BC                  	call	Set_EXT_mode
 39646                                  	;RESTORE <es, di>
 39647 00006E1D 07                      	pop	es
 39648 00006E1E 5F                      	pop	di
 39649                                  
 39650                                  	;Context DS
 39651 00006E1F 16                      	push	ss
 39652 00006E20 1F                      	pop	ds	
 39653                                  
 39654 00006E21 51                      	push	cx
 39655 00006E22 FFD3                    	CALL	BX			; blam!
 39656 00006E24 59                      	pop	cx
 39657 00006E25 C536[9E05]              	LDS	SI,[THISSFT]
 39658 00006E29 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39659                                  	;jc	short OpenE ; MSDOS 3.3
 39660                                  
 39661                                  ;	The SFT was successfully opened. Remove busy mark.
 39662                                  
 39663                                  OpenOK:
 39664                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39665 00006E2B C7040100                	mov	word [SI],1
 39666                                  	;or	[SI+5],cx
 39667 00006E2F 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39668                                  
 39669                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39670                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39671                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39672                                  ;
 39673                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39674                                  ; sharer.
 39675                                  
 39676 00006E32 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39677 00006E36 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39678                                  
 39679 00006E3B 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39680                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39681                                  OpenOkj:
 39682 00006E42 E9F097                  	jmp	SYS_RET_OK		; bye with no errors
 39683                                  
 39684                                  	; MSDOS 6.0
 39685                                  ;Extended Open hooks check
 39686                                  OpenE2:					;AN000;;EO.
 39687 00006E45 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39688 00006E48 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39689 00006E4A EB0D                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39690                                  
 39691                                  ;	Extended Open hooks check
 39692                                  ;
 39693                                  ;	AL has error code. Stack has argument to dos_open/dos_create.
 39694                                  
 39695                                  OpenClean:
 39696 00006E4C 5B                      	pop	bx			; clean off stack
 39697                                  OpenE:
 39698                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39699 00006E4D C7040000                	mov	word [SI],0
 39700 00006E51 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39701 00006E56 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39702                                  
 39703                                  	; 14/03/2024
 39704                                  	;JMP	SHORT OpenCritLeave
 39705                                  	;
 39706                                  ;OpenFail:
 39707                                  	;STI
 39708                                  	;pop	cx			; Clean stack
 39709                                  
 39710                                  OpenCritLeave:
 39711 00006E59 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39712                                  
 39713                                  	; MSDOS 6.0
 39714                                  ; File Tagging DOS 4.00
 39715 00006E60 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39716                                  					;AN000;;FT. code page mismatch
 39717 00006E66 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39718 00006E68 E9DB97                  	jmp	From_GetSet		;AN000;;FT. yes
 39719                                  NORERR: 				;AN000;
 39720                                  ; File Tagging DOS 4.00
 39721                                  
 39722 00006E6B E9D097                  	jmp	SYS_RET_ERR		; no free, return error
 39723                                  
 39724                                  ; MSDOS 2.11
 39725                                  ;BREAK <$CREAT - create a new file and open him for input>
 39726                                  ;----------------------------------------------------------------------------
 39727                                  ;   Assembler usage:
 39728                                  ;           LDS     DX, name
 39729                                  ;           MOV     AH, Creat
 39730                                  ;           MOV     CX, access
 39731                                  ;           INT     21h
 39732                                  ;       ; AX now has the handle
 39733                                  ;
 39734                                  ;   Error returns:
 39735                                  ;           AX = error_access_denied
 39736                                  ;              = error_path_not_found
 39737                                  ;              = error_too_many_open_files
 39738                                  ;----------------------------------------------------------------------------
 39739                                  
 39740                                  ; MSDOS 6.0
 39741                                  ;	BREAK <$Creat - create a brand-new file>
 39742                                  ;----------------------------------------------------------------------------
 39743                                  ;
 39744                                  ;**	$Creat - Create a File
 39745                                  ;
 39746                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39747                                  ;	initial attributes contained in CX
 39748                                  ;
 39749                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39750                                  ;		(CX) = initial attributes
 39751                                  ;	EXIT	'C' set if error
 39752                                  ;		  (ax) = error code
 39753                                  ;		'C' clear if OK
 39754                                  ;		  (ax) = file handle
 39755                                  ;	USES	all
 39756                                  ;
 39757                                  ;----------------------------------------------------------------------------
 39758                                  
 39759                                  _$CREAT:
 39760 00006E6E 51                      	push	cx			; Save attributes on stack
 39761 00006E6F B9[CE29]                	mov	CX,DOS_CREATE		; routine to call
 39762                                  AccessSet:
 39763                                  	;mov	byte [ss:SATTRIB],6
 39764 00006E72 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39765                                  	; 10/08/2018
 39766 00006E78 E92AFF                  	JMP	AccessFile		; use good ol' open
 39767                                  
 39768                                  ; MSDOS 6.0 (MSDOS 3.3)
 39769                                  ;	BREAK <$CHMOD - change file attributes>
 39770                                  ;----------------------------------------------------------------------------
 39771                                  ;
 39772                                  ;**	$CHMOD - Change File Attributes
 39773                                  ;
 39774                                  ;   Assembler usage:
 39775                                  ;	    LDS     DX, name
 39776                                  ;	    MOV     CX, attributes
 39777                                  ;	    MOV     AL,func (0=get, 1=set)
 39778                                  ;	    INT     21h
 39779                                  ;   Error returns:
 39780                                  ;	    AX = error_path_not_found
 39781                                  ;	    AX = error_access_denied
 39782                                  ;
 39783                                  ;----------------------------------------------------------------------------
 39784                                  
 39785                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39786                                  _$CHMOD:
 39787                                  	; 05/08/2018 - Retro DOS v3.0
 39788                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh
 39789 00006E7B BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39790 00006E7E 50                      	push	ax
 39791 00006E7F 51                      	push	cx			; save function and attributes
 39792 00006E80 89D6                    	MOV	SI,DX			; get things in appropriate places
 39793 00006E82 E8AAFB                  	call	TransPathSet		; get correct path
 39794 00006E85 59                      	pop	cx
 39795 00006E86 58                      	pop	ax			; and get function and attrs back
 39796 00006E87 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39797 00006E89 16                      	push	ss			; set up for later possible calls
 39798 00006E8A 1F                      	pop	ds
 39799 00006E8B 803E[7A05]FF            	CMP	byte [CMETA],-1
 39800 00006E90 754E                    	JNZ	short ChModErr
 39801                                  	;mov	byte [SATTRIB],16h
 39802 00006E92 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39803 00006E97 2C01                    	SUB	AL,1			; fast way to discriminate
 39804 00006E99 720B                    	JB	short ChModGet		; 0 -> go get value
 39805 00006E9B 7417                    	JZ	short ChModSet		; 1 -> go set value
 39806                                  	;mov	byte [EXTERR_LOCUS],1
 39807 00006E9D C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39808                                  	;mov	al,1
 39809 00006EA2 B001                    	mov	al,error_invalid_function ; bad value
 39810                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39811                                  chmod_errj:	
 39812                                  	;;jmp	SYS_RET_ERR
 39813                                  	;jmp	short ChModE	
 39814 00006EA4 EBC5                    	jmp	short NORERR	; 06/12/2022
 39815                                  ChModGet:
 39816 00006EA6 E810BA                  	call	GET_FILE_INFO		; suck out the ol' info
 39817 00006EA9 7237                    	JC	short ChModE		; error codes are already set for ret
 39818 00006EAB E8D795                  	call	Get_User_Stack		; point to user saved vaiables
 39819                                  	;mov	[SI+4],ax
 39820 00006EAE 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39821                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39822                                  OpenOkj2:
 39823                                  	; 17/12/2022
 39824                                  	;;jmp	SYS_RET_OK		; say sayonara
 39825                                  	;jmp	short OpenOkj
 39826                                  	; 25/06/2019
 39827 00006EB1 E98497                  	jmp	SYS_RET_OK_clc
 39828                                  
 39829                                  ChModSet:
 39830 00006EB4 89C8                    	MOV	AX,CX			; get attrs in position
 39831 00006EB6 E85EBA                  	call	SET_FILE_ATTRIBUTE	; go set
 39832 00006EB9 7227                    	JC	short ChModE		; errors are set
 39833                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39834                                  	;jmp	SYS_RET_OK
 39835                                  OpenOkj3:
 39836                                  	;jmp	short OpenOkj2
 39837                                  	; 17/12/2022
 39838 00006EBB E97797                  	jmp	SYS_RET_OK
 39839                                  
 39840                                  ; 17/12/2022
 39841                                  %if 0
 39842                                  ChModErr:
 39843                                  NotFound:	; 17/12/2022
 39844                                  	;mov	al,3
 39845                                  	mov	al,error_path_not_found
 39846                                  ChModE:
 39847                                  UnlinkE:	; 17/12/2022
 39848                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39849                                  	;;jmp	SYS_RET_ERR
 39850                                  	;jmp	short chmod_errj
 39851                                  	; 17/12/2022
 39852                                  	jmp	short NORERR
 39853                                  %endif
 39854                                  
 39855                                  ; 22/05/2019 - Retro DOS v4.0
 39856                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39857                                  
 39858                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39859                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39860                                  
 39861                                  ;	BREAK <$UNLINK - delete a file entry>
 39862                                  ;----------------------------------------------------------------------------
 39863                                  ;
 39864                                  ;**	$UNLINK - Delete a File
 39865                                  ;
 39866                                  ;
 39867                                  ;	Assembler usage:
 39868                                  ;	    LDS     DX, name
 39869                                  ;	    IF VIA SERVER DOS CALL
 39870                                  ;	     MOV     CX,SEARCH_ATTRIB
 39871                                  ;	    MOV     AH, Unlink
 39872                                  ;	    INT     21h
 39873                                  ;
 39874                                  ;	ENTRY	(ds:dx) = path name
 39875                                  ;		(cx) = search_attribute, if via server_dos
 39876                                  ;	EXIT	'C' clear if no error
 39877                                  ;		'C' set if error
 39878                                  ;		  (ax) = error code
 39879                                  ;			= error_file_not_found
 39880                                  ;			= error_access_denied
 39881                                  ;
 39882                                  ;----------------------------------------------------------------------------
 39883                                  
 39884                                  _$UNLINK:
 39885 00006EBE 51                      	push	cx			; Save possible CX input parm
 39886 00006EBF 89D6                    	MOV	SI,DX			; Point at input string
 39887 00006EC1 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39888 00006EC4 E868FB                  	call	TransPathSet		; go get normalized path
 39889 00006EC7 59                      	pop	cx
 39890 00006EC8 7216                    	JC	short ChModErr		; badly formed path
 39891 00006ECA 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39892 00006ED0 750E                    	JNZ	short NotFound
 39893 00006ED2 16                      	push	ss
 39894 00006ED3 1F                      	pop	ds
 39895                                  	;mov	ch,6
 39896 00006ED4 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39897 00006ED6 E81701                  	call	SetAttrib
 39898 00006ED9 E8DFB5                  	call	DOS_DELETE		; remove that file
 39899                                  	;JC	short UnlinkE 		; error is there
 39900                                  	; 17/12/2022
 39901 00006EDC 728D                    	jc	short NORERR
 39902                                  
 39903                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39904                                  UnlinkOk:
 39905                                  	;jmp	SYS_RET_OK		; okey doksy
 39906 00006EDE EBDB                    	jmp	short OpenOkj3
 39907                                  
 39908                                  	; 17/12/2022
 39909                                  ChModErr:	; 17/12/2022
 39910                                  NotFound:
 39911                                  	;mov	al,3
 39912 00006EE0 B003                    	MOV	AL,error_path_not_found
 39913                                  ChModE:		; 17/12/2022
 39914                                  UnlinkE:
 39915                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39916                                  	;;jmp	SYS_RET_ERR		; bye
 39917                                  	;jmp	short ChModE
 39918                                  	; 17/12/2022
 39919 00006EE2 EB87                    	jmp	short NORERR
 39920                                  
 39921                                  ;BREAK <$RENAME - move directory entries around>
 39922                                  ;----------------------------------------------------------------------------
 39923                                  ;
 39924                                  ;   Assembler usage:
 39925                                  ;	    LDS     DX, source
 39926                                  ;	    LES     DI, dest
 39927                                  ;	    IF VIA SERVER DOS CALL
 39928                                  ;	      MOV   CX,SEARCH_ATTRIB
 39929                                  ;	    MOV     AH, Rename
 39930                                  ;	    INT     21h
 39931                                  ;
 39932                                  ;   Error returns:
 39933                                  ;	    AX = error_file_not_found
 39934                                  ;	       = error_not_same_device
 39935                                  ;	       = error_access_denied
 39936                                  ;
 39937                                  ;----------------------------------------------------------------------------
 39938                                  
 39939                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39940                                  _$RENAME:
 39941                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39942 00006EE4 51                      	push	cx
 39943 00006EE5 1E                      	push	ds
 39944 00006EE6 52                      	push	dx			; save source and possible CX arg
 39945 00006EE7 06                      	PUSH	ES
 39946 00006EE8 1F                      	POP	DS			; move dest to source
 39947 00006EE9 89FE                    	MOV	SI,DI			; save for offsets
 39948 00006EEB BF[3E04]                	MOV	DI,RENBUF
 39949 00006EEE E83EFB                  	call	TransPathSet		; munge the paths
 39950 00006EF1 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39951 00006EF6 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39952 00006EFB 5E                      	pop	si
 39953 00006EFC 1F                      	pop	ds
 39954 00006EFD 59                      	pop	cx			; get back source and possible CX arg
 39955                                  epjc2:	
 39956 00006EFE 72E0                    	JC	short ChModErr		; get old error
 39957 00006F00 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39958 00006F06 75D8                    	JNZ	short NotFound
 39959 00006F08 51                      	push	cx			; Save possible CX arg
 39960 00006F09 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39961 00006F0C E820FB                  	call	TransPathSet		; wham
 39962 00006F0F 59                      	pop	cx
 39963                                  	;JC	short epjc2
 39964                                  	; 15/03/2024
 39965 00006F10 72CE                    	jc	short ChModErr
 39966                                  	
 39967 00006F12 16                      	push	ss
 39968 00006F13 1F                      	pop	ds
 39969 00006F14 803E[7A05]FF            	CMP	byte [CMETA],-1
 39970 00006F19 72C5                    	JB	short NotFound
 39971                                  
 39972                                  	; MSDOS 6.0
 39973                                  	;PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39974                                  	;PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39975                                  	; 15/03/2024
 39976                                  	;;;
 39977 00006F1B C43E[A205]              	les	di,[THISCDS]
 39978 00006F1F 57                      	push	di
 39979 00006F20 06                      	push	es
 39980                                  	;;;
 39981                                  
 39982 00006F21 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39983 00006F24 16                      	PUSH	SS			   ;AN000;;MS.
 39984 00006F25 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39985 00006F26 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39986                                  rnloop: 				   ;AN000;
 39987 00006F28 E87EFA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39988 00006F2B 720F                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39989 00006F2D E866A2                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39990 00006F30 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39991 00006F32 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39992 00006F34 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39993                                  rnerr:					   ;AN000;
 39994                                  	;ADD	SP,4			   ;AN000;;MS. pop thiscds
 39995                                  	; 15/03/2024 (PCDOS 7.1 IBMDOS.COM)
 39996 00006F36 58                      	pop	ax
 39997 00006F37 58                      	pop	ax
 39998                                  
 39999                                  	;error	error_current_directory    ;AN000;;MS.
 40000 00006F38 B010                    	mov	al,error_current_directory
 40001                                  	;jmp	SYS_RET_ERR
 40002                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40003 00006F3A EBA6                    	jmp	short UnlinkE
 40004                                  dorn:
 40005                                  
 40006                                  ; 15/03/2024
 40007                                  %if 0					   ;AN000;
 40008                                  	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40009                                  	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40010                                  %endif
 40011 00006F3C 16                      	push	ss
 40012 00006F3D 1F                      	pop	ds
 40013                                  
 40014                                  ; 15/03/2024
 40015                                  %if 1
 40016 00006F3E 8F06[A405]              	pop	word [THISCDS+2]
 40017 00006F42 8F06[A205]              	pop	word [THISCDS]
 40018                                  %endif
 40019                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40020                                  	;mov	ch,16h
 40021 00006F46 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 40022                                  					; rename appropriate files
 40023 00006F48 E8A500                  	call	SetAttrib
 40024 00006F4B E841B7                  	call	DOS_RENAME		; do the deed
 40025 00006F4E 7292                    	JC	short UnlinkE 		; errors
 40026                                  
 40027                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40028                                  	;jmp	SYS_RET_OK
 40029 00006F50 EB8C                    	jmp	short UnlinkOk
 40030                                  
 40031                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40032                                  
 40033                                  ; 14/07/2018 - Retro DOS v3.0
 40034                                  ; MSDOS 3.3 (& MSDOS 6.0)
 40035                                  
 40036                                  ;Break <$CreateNewFile - Create a new directory entry>
 40037                                  ;----------------------------------------------------------------------------
 40038                                  ;   CreateNew - Create a new directory entry. Return a file handle if there
 40039                                  ;	was no previous directory entry, and fail if a directory entry with
 40040                                  ;	the same name existed previously.
 40041                                  ;
 40042                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 40043                                  ;		CX contains default file attributes
 40044                                  ;   Outputs:	Carry Clear:
 40045                                  ;		    AX has file handle opened for read/write
 40046                                  ;		Carry Set:
 40047                                  ;		    AX has error code
 40048                                  ;   Registers modified: All
 40049                                  ;----------------------------------------------------------------------------
 40050                                  
 40051                                  _$CreateNewFile:
 40052 00006F52 51                      	push	cx			; Save attributes on stack
 40053 00006F53 B9[972A]                	MOV	CX,DOS_Create_New	; routine to call
 40054 00006F56 E919FF                  	JMP	AccessSet		; use good ol' open
 40055                                  
 40056                                  ;**	BinToAscii - convert a number to a string.
 40057                                  ;----------------------------------------------------------------------------
 40058                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 40059                                  ;	This routine is used to generate temp file names so we don't spend
 40060                                  ;	the time and code needed for a true hex number, we just use
 40061                                  ;	A thorugh O.
 40062                                  ;
 40063                                  ;	ENTRY	(ax) = value
 40064                                  ;		(es:di) = destination
 40065                                  ;	EXIT	(es:di) updated by 4
 40066                                  ;	USES	cx, di, flags
 40067                                  ;----------------------------------------------------------------------------
 40068                                  
 40069                                  ; MSDOS 3.3
 40070                                  ;BinToAscii:
 40071                                  ;	mov     cx,4
 40072                                  ;bta5:
 40073                                  ;	push    cx
 40074                                  ;	mov     cl,4
 40075                                  ;	rol     ax,cl
 40076                                  ;	push    ax
 40077                                  ;	and     al,0Fh
 40078                                  ;	add     al,'0'
 40079                                  ;	cmp     al,'9'
 40080                                  ;	jbe     short bta6
 40081                                  ;	add     al,7
 40082                                  ;bta6: 
 40083                                  ;	stosb
 40084                                  ;	pop     ax
 40085                                  ;	pop     cx
 40086                                  ;	loop    bta5
 40087                                  ;	retn
 40088                                  
 40089                                  ; MSDOS 6.0
 40090                                  BinToAscii:
 40091 00006F59 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 40092                                  bta5:	
 40093 00006F5C D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 40094 00006F5E 50                      	push	ax			; preserve remainder of digits
 40095 00006F5F 240F                    	AND	AL,0Fh			; grab low nibble
 40096 00006F61 0441                    	ADD	AL,'A'			; turn into ascii
 40097 00006F63 AA                      	STOSB				; drop in the character
 40098 00006F64 58                      	pop	ax			; (ax) = shifted number
 40099 00006F65 FECD                    	dec	ch
 40100 00006F67 75F3                    	jnz	short bta5		; process 4 digits
 40101 00006F69 C3                      	retn
 40102                                  
 40103                                  ;Break	<$CreateTempFile - create a unique name>
 40104                                  ;----------------------------------------------------------------------------
 40105                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 40106                                  ;	Method used is to get the current time, convert to a name and attempt
 40107                                  ;	a create new. Repeat until create new succeeds.
 40108                                  ;
 40109                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 40110                                  ;		CX  contains default attributes
 40111                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 40112                                  ;		AX has handle
 40113                                  ;   Registers modified: all
 40114                                  ;----------------------------------------------------------------------------
 40115                                  
 40116                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40117                                  
 40118                                  _$CreateTempFile:
 40119                                  	;Enter
 40120 00006F6A 55                      	push	bp
 40121 00006F6B 89E5                    	mov	bp,sp
 40122                                  
 40123                                  	;LocalVar  EndPtr,DWORD
 40124                                  	;LocalVar  FilPtr,DWORD
 40125                                  	;LocalVar  Attr,WORD
 40126                                  
 40127 00006F6D 83EC0A                  	sub	sp,10
 40128                                  
 40129                                  	;test	cx,0FFD8h
 40130 00006F70 F7C1D8FF                	test	CX,~attr_changeable
 40131 00006F74 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 40132                                  
 40133                                  ; We need this "hook" here to detect these cases (like user sets one both of
 40134                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 40135                                  ; below. The code loops on error_access_denied, but if one of the non
 40136                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 40137                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 40138                                  ; need to detect these cases before getting to the loop.
 40139                                  
 40140                                  	;mov	ax, 5
 40141 00006F76 B80500                  	MOV	AX,error_access_denied
 40142 00006F79 EB69                    	JMP	SHORT SETTMPERR
 40143                                  
 40144                                  OKatts:
 40145                                  	;MOV	attr,CX 		; save attribute
 40146 00006F7B 894EF6                  	mov     [bp-10],cx
 40147                                  	;MOV	FilPtrL,DX		; pointer to file
 40148 00006F7E 8956F8                  	mov	[bp-8],dx
 40149                                  	;MOV	FilPtrH,DS
 40150 00006F81 8C5EFA                  	mov	[bp-6],ds
 40151                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 40152 00006F84 8C5EFE                  	mov	[bp-2],ds
 40153 00006F87 1E                      	PUSH	DS
 40154 00006F88 07                      	POP	ES			; destination for nul search
 40155 00006F89 89D7                    	MOV	DI,DX
 40156 00006F8B 89F9                    	MOV	CX,DI
 40157 00006F8D F7D9                    	NEG	CX			; number of bytes remaining in segment
 40158                                  	; MSDOS 6.0
 40159 00006F8F 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 40160 00006F91 7501                    	JNZ	short okok		;AN000;MS. no
 40161                                  	;MOV	CX,-1			;AN000;MS.
 40162                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40163                                  	; 17/12/2022
 40164 00006F93 49                      	dec	cx  ; mov cx,-1
 40165                                  	;mov	cx,-1 ; 0FFFh
 40166                                  okok:					;AN000;
 40167 00006F94 31C0                    	XOR	AX,AX			;AN000;
 40168 00006F96 F2AE                    	REPNZ	SCASB			;AN000;
 40169                                  					;AN000;
 40170 00006F98 4F                      	DEC	DI			; point back to the null
 40171 00006F99 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 40172 00006F9D E8EADF                  	call	PATHCHRCMP		; Is it a path separator?
 40173 00006FA0 7403                    	JZ	short SETENDPTR		; Yes
 40174                                  STOREPTH:
 40175 00006FA2 B05C                    	MOV	AL,'\'
 40176 00006FA4 AA                      	STOSB				; Add a path separator (and INC DI)
 40177                                  SETENDPTR:
 40178                                  	;MOV	EndPtrL,DI		; pointer to the tail
 40179 00006FA5 8856FC                  	mov	[bp-4],dl
 40180                                  CreateLoop:
 40181 00006FA8 16                      	push	ss			; let ReadTime see variables
 40182 00006FA9 1F                      	pop	ds
 40183 00006FAA 55                      	push	bp
 40184 00006FAB E8619B                  	call	READTIME		; go get time
 40185 00006FAE 5D                      	pop	bp
 40186                                  ;
 40187                                  ; Time is in CX:DX. Go drop it into the string.
 40188                                  ;
 40189                                  	;les	di,EndPtr		; point to the string
 40190 00006FAF C47EFC                  	les	di,[BP-4]
 40191 00006FB2 89C8                    	mov	ax,cx
 40192 00006FB4 E8A2FF                  	call	BinToAscii		; store upper word
 40193 00006FB7 89D0                    	mov	ax,dx
 40194 00006FB9 E89DFF                  	call	BinToAscii		; store lower word
 40195 00006FBC 30C0                    	xor	al,al
 40196 00006FBE AA                      	STOSB				; nul terminate
 40197                                  	;LDS	DX,FilPtr		; get name
 40198 00006FBF C556F8                  	lds	dx,[bp-8]
 40199                                  	;MOV	CX,Attr 		; get attr
 40200 00006FC2 8B4EF6                  	mov	cx,[bp-10]
 40201 00006FC5 55                      	push	bp
 40202 00006FC6 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 40203 00006FC9 5D                      	pop	bp
 40204 00006FCA 7319                    	JNC	short CreateDone	; failed, go try again
 40205                                  
 40206                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 40207                                  ; error and figure out what to do.
 40208                                  
 40209                                  	;; MSDOS 3.3			; M049 - start
 40210                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 40211                                  ;;	cmp	al,error_file_exists
 40212                                  ;;	jz	short CreateLoop	; file existed => try with new name
 40213                                  ;;	cmp	al,error_access_denied
 40214                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 40215                                  
 40216                                  	; MSDOS 6.0
 40217                                  	;cmp	al,50h
 40218 00006FCC 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 40219 00006FCE 74D8                    	JZ	short CreateLoop	; Y: try again
 40220                                  	;cmp	al,5
 40221 00006FD0 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 40222 00006FD2 7510                    	JNZ	short SETTMPERR		; N: Error out
 40223                                  					; Y: Check to see if we got this due
 40224                                  					;    to the network drive. Note that
 40225                                  					;    the redir will set the exterr
 40226                                  					;    to error_cannot_make if this is 
 40227                                  					;    so. 
 40228 00006FD4 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 40229                                  					; See if it's REALLY an att mismatch
 40230 00006FDA 7408                    	je	short SETTMPERR		; no, network error, stop
 40231                                  ;M070
 40232                                  ; If the user failed on an I24, we do not want to try again
 40233                                  ;
 40234 00006FDC 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 40235                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 40236                                  
 40237                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 40238                                  	; 17/12/2022
 40239 00006FE2 75C4                    	jne	short CreateLoop ; 10/06/2019 
 40240                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40241                                  	;jz	short SETTMPERR
 40242                                  	;jmp	short CreateLoop
 40243                                  
 40244                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 40245                                  					; M049 - end
 40246                                  SETTMPERR:
 40247 00006FE4 F9                      	STC
 40248                                  CreateDone:
 40249                                  	;Leave
 40250 00006FE5 89EC                    	mov	sp,bp
 40251 00006FE7 5D                      	pop	bp
 40252 00006FE8 7203                    	JC	short CreateFail
 40253 00006FEA E94896                  	jmp	SYS_RET_OK		; success!
 40254                                  CreateFail:
 40255 00006FED E94E96                  	jmp	SYS_RET_ERR
 40256                                  
 40257                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 40258                                  ;   (CH) or to the value in CL if the current system call is through
 40259                                  ;   serverdoscall.
 40260                                  ;
 40261                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 40262                                  ;		fSharing == TRUE => set sattrib to CL
 40263                                  ;   Outputs:	none
 40264                                  ;   Registers changed:	CX
 40265                                  
 40266                                  SetAttrib:
 40267 00006FF0 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 40268 00006FF6 7502                    	jnz	short Set
 40269 00006FF8 88E9                    	mov	cl,ch
 40270                                  Set:
 40271 00006FFA 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 40272 00006FFF C3                      	retn
 40273                                  
 40274                                  ;----------------------------------------------------------------------------
 40275                                  	; 16/03/2024 - Retro DOS v4.1
 40276                                  ext_inval2:
 40277                                  	;mov	al,1
 40278 00007000 B001                    	mov	al,error_invalid_function
 40279                                  eo_err:
 40280                                  	;jmp	SYS_RET_ERR
 40281 00007002 EBE9                    	jmp	short CreateFail
 40282                                  
 40283                                  ; 14/07/2018 - Retro DOS v3.0
 40284                                  ; MSDOS 6.0
 40285                                  
 40286                                  ; 29/04/2019 - Retro DOS v4.0
 40287                                  
 40288                                  ;Break	<Extended_Open- Extended open the file>
 40289                                  ;----------------------------------------------------------------------------
 40290                                  ; Input: AL= 0 reserved  AH=6CH
 40291                                  ;	 BX= mode
 40292                                  ;	 CL= create attribute  CH=search attribute (from server)
 40293                                  ;	 DX= flag
 40294                                  ;	 DS:SI = file name
 40295                                  ;	 ES:DI = parm list
 40296                                  ;			   DD  SET EA list (-1) null
 40297                                  ;			   DW  n  parameters
 40298                                  ;			   DB  type (TTTTTTLL)
 40299                                  ;			   DW  IOMODE
 40300                                  ; Function: Extended Open
 40301                                  ; Output: carry clear
 40302                                  ;		     AX= handle
 40303                                  ;		     CX=1 file opened
 40304                                  ;			2 file created/opened
 40305                                  ;			3 file replaced/opened
 40306                                  ;	  carry set: AX has error code
 40307                                  ;----------------------------------------------------------------------------
 40308                                  
 40309                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40310                                  _$Extended_Open:			  ;AN000;
 40311                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 40312 00007004 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 40313 00007009 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 40314                                  	; 17/12/2022
 40315 00007010 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 40316                                  	;;test	dx,0FE00h
 40317                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0 ?
 40318 00007013 75EB                    	JNZ	short ext_inval2	  ;AN000;EO. no
 40319 00007015 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 40320 00007017 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 40321 0000701A 74E4                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 40322                                  	;and	dl,0Fh
 40323 0000701C 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 40324 0000701F 80FA02                  	CMP	DL,2			  ;AN000;EO, > 2
 40325 00007022 77DC                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40326                                  	;and	ah,0F0h
 40327 00007024 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 40328 00007027 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 40329 0000702A 77D4                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40330                                  
 40331 0000702C 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 40332 00007031 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 40333 00007036 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 40334 0000703B 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 40335 00007040 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 40336 00007045 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 40337 0000704A 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 40338 0000704F 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 40339 00007054 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 40340 00007056 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 40341                                  ; 16/03/2024
 40342                                  %if 0
 40343                                  	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 40344                                  ext_inval2:				  ;AN000;;EO.
 40345                                  	;mov	al,1
 40346                                  	mov	al,error_invalid_function ;AN000;EO.. invalid function
 40347                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40348                                  eo_err:
 40349                                  	;jmp	SYS_RET_ERR
 40350                                  	jmp	short CreateFail
 40351                                  %endif
 40352                                  
 40353                                  ; 16/03/2024
 40354                                  %if 0
 40355                                  ext_inval_parm:				  ;AN000;EO..
 40356                                  	POP	CX			  ;AN000;EO..  pop up satck
 40357                                  	POP	SI			  ;AN000;EO..
 40358                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40359                                  	;mov	al,13
 40360                                  	mov	al,error_invalid_data
 40361                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40362                                  	;;jmp	SYS_RET_ERR
 40363                                  	;jmp	short eo_err
 40364                                  	; 17/12/2022
 40365                                  	jmp	short CreateFail
 40366                                  %endif
 40367                                  
 40368                                  	; 17/12/2022	
 40369                                  ;error_return:				  ;AN000;EO.
 40370                                  ;	retn				  ;AN000;EO.. return with error
 40371                                  
 40372                                  goopen2:				  ;AN000;
 40373                                  	; 17/12/2022
 40374                                  	;test	bh,20h				 
 40375 00007058 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40376                                  	;;test	bx,2000h
 40377                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40378 0000705B 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40379                                  	;or	byte [SS:EXTOPEN_ON],2
 40380 0000705D 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40381                                  goopen:					  ;AN000;
 40382                                  	;or	byte [SS:EXTOPEN_ON],1 
 40383 00007063 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40384                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40385                                  	; 18/12/2022
 40386 00007069 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40387                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40388 0000706F 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40389 00007075 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40390 00007077 E8D8FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40391 0000707A 723F                    	JC	short error_return	  ;AN000;;EO. error
 40392                                  
 40393 0000707C 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40394 00007082 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40395                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40396 00007084 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. created/opened;smr;SS Override
 40397 0000708B EB7F                    	JMP	short setXAttr ; 16/03/2024 ;AN000;;EO. set XAs
 40398                                  
 40399                                  	; 17/12/2022
 40400                                  ;ok_return2:
 40401                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40402                                  
 40403                                  chknext:
 40404                                  	; 17/12/2022
 40405 0000708D 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40406                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40407                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40408 00007093 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40409 00007095 E8D6FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40410 00007098 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40411 0000709A 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40412 000070A0 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40413 000070A2 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. presume create/open;smr;SS Override
 40414 000070A9 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40415 000070AF 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40416 000070B1 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40417 000070B8 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40418                                  error_return2:
 40419 000070BA F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40420                                  error_return:	 ; 17/12/2022
 40421 000070BB C3                      	retn				  ;AN000;;EO. return with error
 40422                                  
 40423                                  	; 17/12/2022
 40424                                  ok_return:
 40425                                  ok_return2:
 40426 000070BC E97695                  	jmp	SYS_RET_OK
 40427                                  
 40428                                  exist_open:				  ;AN000;
 40429                                  	;test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40430                                  	;jz	short noserver		  ;AN000;;EO. no
 40431                                  	; 16/03/2024
 40432                                  	;;;
 40433 000070BF 36803E[7205]00          	cmp	byte [ss:FSHARING],0	; server doscall?
 40434 000070C5 7402                    	jz	short noserver		; no
 40435                                  	;;;
 40436 000070C7 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40437                                  noserver:
 40438 000070C9 E8D0FC                  	call	_$Open2			  ;AN000;;EO. do open
 40439 000070CC 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40440 000070CE 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40441 000070D4 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40442                                  local_extopen:
 40443                                  	;cmp	ax,2
 40444 000070D6 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40445 000070D9 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40446                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40447                                  	; 17/12/2022
 40448 000070DB 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40449                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40450                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40451                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40452                                  	; 17/12/2022
 40453 000070E1 7446                    	jz	short extexit ; 10/06/2019
 40454                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40455                                  	;jnz	short do_creat
 40456                                  	;jmp	short extexit
 40457                                  do_creat:
 40458 000070E3 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40459 000070E8 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40460 000070ED 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40461 000070EF E87CFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40462 000070F2 7235                    	JC	short extexit 		  ;AN000;;EO. error
 40463                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40464 000070F4 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40465                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40466 000070FB EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40467                                  
 40468                                  ext_ok:
 40469 000070FD 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40470 00007103 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40471                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40472 00007105 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40473                                  setXAttr:
 40474                                  	; 29/04/2019
 40475 0000710C 50                      	push	ax
 40476 0000710D E87593                  	call	Get_User_Stack		  ;AN000;;EO.
 40477 00007110 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40478                                  	;mov	[si+4],ax
 40479 00007114 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40480 00007117 58                      	pop	ax			  ;AN000;;EO.
 40481 00007118 8904                    	mov	[si],ax
 40482                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40483                                  	; 17/12/2022
 40484 0000711A EBA0                    	jmp	short ok_return
 40485                                  ;ok_return:				  ;AN000;
 40486                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40487                                  
 40488                                  ; 16/03/2024
 40489                                  %if 0
 40490                                  extexit2:				  ;AN000; ERROR RECOVERY
 40491                                  	POP	BX			  ;AN000;EO. close the handle
 40492                                  	PUSH	AX			  ;AN000;EO. save error code from set XA
 40493                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40494                                  	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40495                                  					  ;AN000;EO. from create;smr;SS Override
 40496                                  	JNZ	short justopen		  ;AN000;EO.
 40497                                  	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40498                                  	LDS	DX,[SI]			  ;AN000;EO.
 40499                                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40500                                  	JMP	SHORT reserror		  ;AN000;EO.
 40501                                  
 40502                                  justopen:				  ;AN000;
 40503                                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40504                                  reserror:				  ;AN000;
 40505                                  	POP	AX			  ;AN000;EO. restore error code from set XA
 40506                                  
 40507                                  	JMP	SHORT extexit		  ;AN000;EO.
 40508                                  
 40509                                  ext_file_unfound:			  ;AN000;
 40510                                  	;mov	ax,2
 40511                                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40512                                  	JMP	SHORT extexit		  ;AN000;EO.
 40513                                  ext_inval:				  ;AN000;
 40514                                  	;mov	ax,1
 40515                                  	MOV	AX,error_invalid_function ;AN000;EO.
 40516                                  
 40517                                  lockoperr:	; 17/12/2022
 40518                                  extexit:
 40519                                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40520                                  
 40521                                  %endif
 40522                                  
 40523                                  ;============================================================================
 40524                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40525                                  ;============================================================================
 40526                                  ; 14/07/2018 - Retro DOS v3.0
 40527                                  ; 22/05/2019 - Retro DOS v4.0
 40528                                  
 40529                                  ;BREAK <$LockOper - Lock Calls>
 40530                                  ;----------------------------------------------------------------------------
 40531                                  ;
 40532                                  ;   Assembler usage:
 40533                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40534                                  ;	    MOV     CX, OffsetHigh
 40535                                  ;	    MOV     DX, OffsetLow
 40536                                  ;	    MOV     SI, LengthHigh
 40537                                  ;	    MOV     DI, LengthLow
 40538                                  ;	    MOV     AH, LockOper
 40539                                  ;	    MOV     AL, Request
 40540                                  ;	    INT     21h
 40541                                  ;
 40542                                  ;   Error returns:
 40543                                  ;	    AX = error_invalid_handle
 40544                                  ;	       = error_invalid_function
 40545                                  ;	       = error_lock_violation
 40546                                  ;
 40547                                  ;   Assembler usage:
 40548                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40549                                  ;
 40550                                  ;				    0? lock all
 40551                                  ;				    8? lock write
 40552                                  ;				    ?2 lock multiple
 40553                                  ;				    ?3 unlock multiple
 40554                                  ;				    ?4 lock/read
 40555                                  ;				    ?5 write/unlock
 40556                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40557                                  ;	    MOV     BX, Handle
 40558                                  ;	    MOV     CX, count or size
 40559                                  ;	    LDS     DX, buffer
 40560                                  ;	    INT     21h
 40561                                  ;
 40562                                  ;   Error returns:
 40563                                  ;	    AX = error_invalid_handle
 40564                                  ;	       = error_invalid_function
 40565                                  ;	       = error_lock_violation
 40566                                  ;
 40567                                  ;----------------------------------------------------------------------------
 40568                                  
 40569                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40570                                  
 40571                                  	; 17/03/2024
 40572                                  	; 16/03/2024 - Retro DOS v4.1
 40573                                  _$LockOper:
 40574 0000711C 3C01                    	CMP	AL,1
 40575 0000711E 770C                    	JA	short lock_bad_func
 40576                                  
 40577 00007120 57                      	PUSH	DI			       ; Save LengthLow
 40578 00007121 E81EF4                  	call	SFFromHandle		       ; ES:DI -> SFT
 40579 00007124 731E                    	JNC	short lock_do 		       ; have valid handle
 40580 00007126 5F                      	POP	DI			       ; Clean stack
 40581                                  	;mov	al,6
 40582 00007127 B006                    	mov	al,error_invalid_handle
 40583                                  
 40584                                  	; 16/03/2024
 40585                                  extexit:
 40586                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40587                                  lockoperr:
 40588 00007129 E91295                  	jmp	SYS_RET_ERR
 40589                                  	; 17/12/2022
 40590                                  	;jmp	short lockoperr ; jmp SYS_RET_ERR
 40591                                  
 40592                                  lock_bad_func:
 40593                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40594 0000712C 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40595                                  	;mov	al,1
 40596 00007132 B001                    	mov	al,error_invalid_function
 40597                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40598                                  lockoperrj:
 40599                                  	;jmp	SYS_RET_ERR
 40600 00007134 EBF3                    	jmp	short lockoperr
 40601                                  
 40602                                  	; 22/05/2019 - Retro DOS v4.0
 40603                                  
 40604                                  	; MSDOS 6.0 
 40605                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40606                                  ; Dead code deleted, MD, 23 Mar 90
 40607                                  
 40608                                  ;lock_do:
 40609                                  ;	; MSDOS 3.3
 40610                                  ;	or	al,al
 40611                                  ;	pop	ax
 40612                                  ;	jz	short DOS_Lock
 40613                                  ;DOS_Unlock:
 40614                                  ;	;test	word [es:di+5],8000h
 40615                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40616                                  ;	JZ	short LOCAL_UNLOCK
 40617                                  ;	push    ax
 40618                                  ;	mov     ax,110Bh
 40619                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40620                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40621                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40622                                  ;			; SFT DPB field -> DPB of drive containing file
 40623                                  ;			; Return: CF set error
 40624                                  ;	pop     bx
 40625                                  ;	jmp     short ValChk
 40626                                  ;
 40627                                  ;LOCAL_UNLOCK:
 40628                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40629                                  ;ValChk:
 40630                                  ;	JNC	short Lock_OK
 40631                                  ;lockerror:
 40632                                  ;	jmp	SYS_RET_ERR
 40633                                  ;Lock_OK:
 40634                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40635                                  ;	jmp	SYS_RET_OK
 40636                                  ;DOS_Lock:
 40637                                  ;	;test	word [es:di+5],8000h
 40638                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40639                                  ;	JZ	short LOCAL_LOCK
 40640                                  ;	;CallInstall NET_XLock,MultNET,10
 40641                                  ;	mov     ax, 110Ah
 40642                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40643                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40644                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40645                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40646                                  ;			; Return: CF set error
 40647                                  ;	JMP	short ValChk
 40648                                  ;
 40649                                  ;LOCAL_LOCK:
 40650                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40651                                  ;	JMP	short ValChk
 40652                                  
 40653                                  ; 17/12/2022
 40654                                  LOCAL_UNLOCK:
 40655                                  	; MSDOS 3.3
 40656                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40657                                  	; MSDOS 6.0
 40658 00007136 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40659                                  ValChk:
 40660 0000713A 7302                    	JNC	short Lock_OK
 40661                                  lockerror:
 40662                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40663                                  	;;jmp	SYS_RET_ERR
 40664                                  	;jmp	short lockoperrj
 40665                                  	; 17/12/2022
 40666 0000713C EBEB                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40667                                  Lock_OK:
 40668                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40669                                  	; 10/06/2019
 40670 0000713E A1[0C06]                	mov	ax,[TEMP_VAR]
 40671 00007141 E9F194                  	jmp	SYS_RET_OK
 40672                                  
 40673                                  	; 22/05/2019
 40674                                  lock_do:
 40675                                  	; MSDOS 6.0
 40676 00007144 89C3                    	MOV	BX,AX				; save AX
 40677 00007146 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40678                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40679                                  	;;mov	[bp+0],dx
 40680                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40681                                  	; 15/12/2022
 40682 00007149 895600                  	mov	[bp],dx
 40683                                  	;mov	[bp+2],cx
 40684 0000714C 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40685                                  
 40686                                  	; 16/03/2024
 40687                                  	;POP	CX				; get low length
 40688                                  	;;mov	[bp+4],cx
 40689                                  	;MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40690 0000714F 8F4604                  	pop	word [bp+LockBuf.Lock_length]
 40691                                  
 40692                                  	;mov	[bp+6],si
 40693 00007152 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40694 00007155 B90100                  	MOV	CX,1				; one range
 40695                                  
 40696                                  ;	PUSH	CS				;
 40697                                  ;	POP	DS				; DS:DX points to
 40698                                  
 40699 00007158 16                      	push	ss
 40700 00007159 1F                      	pop	ds
 40701                                  
 40702 0000715A 89EA                    	MOV	DX,BP				; Lock_Buffer
 40703                                  	;test	al,1
 40704 0000715C A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40705                                  	;JNZ	short DOS_Unlock		; yes
 40706                                  	;JMP	short DOS_Lock			; function 0
 40707                                  	; 17/12/2022
 40708                                  	; 10/06/2019
 40709 0000715E 740E                    	jz	short DOS_Lock
 40710                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40711                                  	;JNZ	short DOS_Unlock
 40712                                  	;JMP	short DOS_Lock
 40713                                  
 40714                                  DOS_Unlock:
 40715                                  	;;test	word [es:di+5],8000h
 40716                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40717 00007160 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40718 00007165 74CF                    	JZ	short LOCAL_UNLOCK
 40719                                  
 40720                                  ; 17/03/2024
 40721                                  ;lock_unlock: ; 22/05/2019
 40722                                  
 40723                                  	;CallInstall Net_Xlock,MultNET,10
 40724                                  ;	
 40725                                  ;	; MSDOS 3.3
 40726                                  ;	;mov     ax,110Bh
 40727                                  ;	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40728                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40729                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40730                                  ;			; SFT DPB field -> DPB of drive containing file
 40731                                  ;			; Return: CF set error
 40732                                  
 40733                                  ; 17/03/2024 - Retro DOS v4.1
 40734                                  lock_unlock:
 40735                                  
 40736                                  	; MSDOS 6.0
 40737 00007167 B80A11                  	mov     ax,110Ah
 40738 0000716A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40739                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40740                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40741                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40742                                  			; Return: CF set error
 40743                                  
 40744 0000716C EBCC                    	JMP	SHORT ValChk
 40745                                  
 40746                                  ; 17/12/2022
 40747                                  %if 0
 40748                                  LOCAL_UNLOCK:
 40749                                  	; MSDOS 3.3
 40750                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40751                                  	; MSDOS 6.0
 40752                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40753                                  ValChk:
 40754                                  	JNC	short Lock_OK
 40755                                  lockerror:
 40756                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40757                                  	;jmp	SYS_RET_ERR
 40758                                  	jmp	short lockoperrj
 40759                                  Lock_OK:
 40760                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40761                                  	; 10/06/2019
 40762                                  	mov	ax,[TEMP_VAR]
 40763                                  	jmp	SYS_RET_OK
 40764                                  %endif
 40765                                  
 40766                                  DOS_Lock:
 40767                                  	;;test	word [es:di+5],8000h
 40768                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40769 0000716E 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40770                                  	;JZ	short LOCAL_LOCK
 40771                                  	; 17/03/2024
 40772 00007173 75F2                    	jnz	short lock_unlock
 40773                                  
 40774                                  ; 17/03/2024
 40775                                  %if 0
 40776                                  	;CallInstall NET_XLock,MultNET,10
 40777                                  
 40778                                  	mov     ax,110Ah
 40779                                  	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40780                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40781                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40782                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40783                                  			; Return: CF set error
 40784                                  
 40785                                  	JMP	short ValChk
 40786                                  %endif
 40787                                  
 40788                                  LOCAL_LOCK:
 40789                                  	; MSDOS 3.3
 40790                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40791                                  	; MSDOS 6.0
 40792 00007175 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40793                                  
 40794 00007179 EBBF                    	JMP	short ValChk
 40795                                  
 40796                                  ; 14/07/2018 - Retro DOS v3.0
 40797                                  ; LOCK_CHECK
 40798                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40799                                  
 40800                                  ;----------------------------------------------------------------------------
 40801                                  ; Inputs:
 40802                                  ;	Outputs of SETUP
 40803                                  ;	[USER_ID] Set
 40804                                  ;	[PROC_ID] Set
 40805                                  ; Function:
 40806                                  ;	Check for lock violations on local I/O
 40807                                  ;	Retries are attempted with sleeps in between
 40808                                  ; Outputs:
 40809                                  ;    Carry clear
 40810                                  ;	Operation is OK
 40811                                  ;    Carry set
 40812                                  ;	A lock violation detected
 40813                                  ; Outputs of SETUP preserved
 40814                                  ;----------------------------------------------------------------------------
 40815                                  
 40816                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40817                                  	; 22/05/2019 - Retro DOS v4.0
 40818                                  LOCK_CHECK:
 40819 0000717B 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40820                                  LockRetry:
 40821 0000717F 53                      	push	bx		; save regs
 40822 00007180 50                      	push	ax ; MSDOS 6.0
 40823                                  
 40824                                  	;MSDOS 3.3
 40825                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40826                                  	;MSDOS 6.0
 40827 00007181 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40828                                  
 40829 00007185 58                      	pop	ax ; MSDOS 6.0
 40830 00007186 5B                      	pop	bx		; restrore regs
 40831 00007187 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40832                                  LockN:
 40833 00007189 E85FA0                  	call	Idle		; wait a while
 40834 0000718C 4B                      	DEC	BX		; remember a retry
 40835 0000718D 75F0                    	JNZ	short LockRetry	; more retries left...
 40836 0000718F F9                      	STC
 40837                                  lc_ret_label:
 40838 00007190 C3                      	retn
 40839                                  
 40840                                  ; 14/07/2018 - Retro DOS v3.0
 40841                                  ; LOCK_VIOLATION
 40842                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40843                                  
 40844                                  ;----------------------------------------------------------------------------
 40845                                  ; Inputs:
 40846                                  ;	[THISDPB] set
 40847                                  ;	[READOP] indicates whether error on read or write
 40848                                  ; Function:
 40849                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40850                                  ; Outputs:
 40851                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40852                                  ;	Carry clear if user wants a retry
 40853                                  ;
 40854                                  ; DS, ES, DI, CX preserved, others destroyed
 40855                                  ;----------------------------------------------------------------------------
 40856                                  
 40857                                  LOCK_VIOLATION:
 40858 00007191 1E                      	PUSH	DS
 40859 00007192 06                      	PUSH	ES
 40860 00007193 57                      	PUSH	DI
 40861 00007194 51                      	PUSH	CX
 40862                                  	;mov	ax,21h
 40863 00007195 B82100                  	MOV	AX,error_lock_violation
 40864                                  	;mov	byte [ALLOWED],18h
 40865 00007198 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40866 0000719D C42E[8A05]              	LES	BP,[THISDPB]
 40867 000071A1 BF0100                  	MOV	DI,1		; Fake some registers
 40868 000071A4 89F9                    	MOV	CX,DI
 40869                                  	;mov	dx,[es:bp+11]
 40870 000071A6 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40871 000071AA E842E0                  	call	HARDERR
 40872 000071AD 59                      	POP	CX
 40873 000071AE 5F                      	POP	DI
 40874 000071AF 07                      	POP	ES
 40875 000071B0 1F                      	POP	DS
 40876 000071B1 3C01                    	CMP	AL,1
 40877 000071B3 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40878 000071B5 F9                      	STC
 40879 000071B6 C3                      	retn
 40880                                  
 40881                                  ; 14/07/2018 - Retro DOS v3.0
 40882                                  
 40883                                  ;----------------------------------------------------------------------------
 40884                                  
 40885                                  ;	do a retz to return error
 40886                                  
 40887                                  	; 22/05/2019 - Retro DOS v4.0
 40888                                  CheckShare:
 40889                                  	; MSDOS 3.3
 40890                                  	;cmp	byte [cs:fShare],0
 40891                                  	;retn
 40892                                  
 40893                                  	; MSDOS 6.0
 40894 000071B7 1E                      	push	ds			;smr;
 40895                                  	;getdseg <ds>			; ds -> dosdata
 40896 000071B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40897 000071BD 803E[0303]00            	cmp	byte [fShare],0
 40898 000071C2 1F                      	pop	ds			;smr;
 40899 000071C3 C3                      	retn
 40900                                  	
 40901                                  ;============================================================================
 40902                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40903                                  ;============================================================================
 40904                                  ; 14/07/2018 - Retro DOS v3.0
 40905                                  ; 22/05/2019 - Retro DOS v4.0
 40906                                  
 40907                                  ; SHARE_CHECK
 40908                                  ;----------------------------------------------------------------------------
 40909                                  ; Inputs:
 40910                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40911                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40912                                  ;       [WFP_START] has full path of name
 40913                                  ;       [USER_ID] Set
 40914                                  ;       [PROC_ID] Set
 40915                                  ; Function:
 40916                                  ;       Check for sharing violations on local file/device access
 40917                                  ; Outputs:
 40918                                  ;    Carry clear
 40919                                  ;       Sharing approved
 40920                                  ;    Carry set
 40921                                  ;       A sharing violation detected
 40922                                  ;           AX is error code
 40923                                  ; USES    ALL but DS
 40924                                  ;----------------------------------------------------------------------------
 40925                                  
 40926                                  	; 22/05/2019 - Retro DOS v4.0
 40927                                  SHARE_CHECK:
 40928                                  	; 26/07/2019
 40929 000071C4 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40930                                  shchk_retn:
 40931 000071C8 C3                      	retn
 40932                                  
 40933                                  ; SHARE_VIOLATION
 40934                                  ;----------------------------------------------------------------------------
 40935                                  ; Inputs:
 40936                                  ;       [THISDPB] Set
 40937                                  ;       AX has error code
 40938                                  ; Function:
 40939                                  ;       Handle Sharing errors
 40940                                  ; Outputs:
 40941                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40942                                  ;       Carry clear if user wants a retry
 40943                                  ;
 40944                                  ; DS, ES, DI preserved, others destroyed
 40945                                  ;----------------------------------------------------------------------------
 40946                                  
 40947                                  SHARE_VIOLATION:
 40948 000071C9 1E                      	PUSH    DS
 40949 000071CA 06                      	PUSH	ES
 40950 000071CB 57                      	PUSH    DI
 40951 000071CC C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40952                                  	;mov	byte [ALLOWED],18h
 40953 000071D1 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40954 000071D6 C42E[8A05]              	LES     BP,[THISDPB]
 40955 000071DA BF0100                  	MOV     DI,1			; Fake some registers
 40956 000071DD 89F9                    	MOV     CX,DI
 40957                                  	;mov	dx,[es:bp+17]
 40958 000071DF 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40959 000071E3 E809E0                  	call	HARDERR
 40960 000071E6 5F                      	POP     DI
 40961 000071E7 07                      	POP	ES
 40962 000071E8 1F                      	POP     DS
 40963 000071E9 3C01                    	CMP     AL,1
 40964 000071EB 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40965 000071ED F9                      	STC
 40966 000071EE C3                      	retn
 40967                                  
 40968                                  ;----------------------------------------------------------------------------
 40969                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40970                                  ;       NOT perform a close, it merely asserts that the sharing information
 40971                                  ;       for the SFT/UID/PID may be safely released.
 40972                                  ;
 40973                                  ;   Inputs:     ES:DI points to an SFT
 40974                                  ;   Outputs:    None
 40975                                  ;   Registers modified: all except DS,ES,DI
 40976                                  ;----------------------------------------------------------------------------
 40977                                  
 40978                                  ShareEnd:
 40979                                  	; 26/07/2019
 40980 000071EF FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40981 000071F3 C3                      	retn
 40982                                  
 40983                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40984                                  ;----------------------------------------------------------------------------
 40985                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40986                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40987                                  ;
 40988                                  ;   Inputs:     ThisSFT points to the SFT
 40989                                  ;               WFP_Start points to the WFP
 40990                                  ;   Outputs:    Carry clear => successful entry
 40991                                  ;               Carry set => failed system call
 40992                                  ;   Registers modified: all
 40993                                  ;----------------------------------------------------------------------------
 40994                                  
 40995                                  ShareEnter:
 40996 000071F4 51                      	push	cx
 40997                                  retry:
 40998 000071F5 8B0E[1A00]              	mov     cx,[RetryCount]
 40999                                  attempt:
 41000 000071F9 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 41001 000071FD 31C0                    	XOR     AX,AX
 41002                                   	;mov	[es:di+51],ax
 41003 000071FF 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 41004 00007203 51                      	push	cx
 41005 00007204 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 41006 00007207 59                      	pop	cx
 41007 00007208 730A                    	jnc	short done		; success, let the user see this
 41008 0000720A E8DE9F                  	call	Idle                    ; wait a while
 41009 0000720D E2EA                    	loop    attempt                 ; go back for another attempt
 41010 0000720F E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 41011 00007212 73E1                    	jnc	short retry		; user said to retry, go do it
 41012                                  done:
 41013 00007214 59                      	pop	cx
 41014 00007215 C3                      	retn
 41015                                  
 41016                                  ;============================================================================
 41017                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 41018                                  ;============================================================================
 41019                                  ; 29/04/2019 - Retro DOS 4.0
 41020                                  
 41021                                  ;** EXEPATCH.ASM 
 41022                                  ;----------------------------------------------------------------------------
 41023                                  ;	Contains the foll:
 41024                                  ;
 41025                                  ;		- code to find and overlay buggy unpack code
 41026                                  ;		- new code to be overlayed on buggy unpack code 
 41027                                  ;		- old code sequence to identify buggy unpack code
 41028                                  ;
 41029                                  ;	Revision history:
 41030                                  ;
 41031                                  ;		Created: 5/14/90
 41032                                  ;----------------------------------------------------------------------------
 41033                                  
 41034                                  ;----------------------------------------------------------------------------
 41035                                  ;
 41036                                  ; M020 : Fix for rational bug - for details see routine header
 41037                                  ; M028 : 4b04 implementation
 41038                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 41039                                  ; M032 : set turnoff bit only if DOS in HMA.
 41040                                  ; M033 : if IP < 2 then not exepacked.
 41041                                  ; M046 : support for a 4th version of exepacked files.
 41042                                  ; M068 : support for copy protected apps.
 41043                                  ; M071 : use A20OFF_COUNT of 10.
 41044                                  ;
 41045                                  ;----------------------------------------------------------------------------
 41046                                  
 41047                                  PATCH1_COM_OFFSET	EQU	06CH
 41048                                  PATCH1_OFFSET		EQU	028H
 41049                                  PATCH1_CHKSUM		EQU	0EF4EH
 41050                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 41051                                  
 41052                                  PATCH2_COM_OFFSET	EQU	076H
 41053                                  PATCH2_OFFSET		EQU	032H
 41054                                  
 41055                                  	; The strings that start at offset 076h have two possible 
 41056                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 41057                                  
 41058                                  PATCH2_CHKSUM		EQU	78B2H
 41059                                  CHKSUM2_LEN		EQU	119H/2
 41060                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 41061                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 41062                                  
 41063                                  PATCH3_COM_OFFSET	EQU	074H
 41064                                  PATCH3_OFFSET		EQU	032H
 41065                                  PATCH3_CHKSUM		EQU	4EDEH
 41066                                  CHKSUM3_LEN		EQU	117H/2
 41067                                  
 41068                                  ;**	Data structure passed for ExecReady call
 41069                                  ;
 41070                                  ;struc ERStruc
 41071                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 41072                                  ; .ER_Flags:	resw	1
 41073                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 41074                                  ; .ER_PSP:	resw	1	; PSP of the program
 41075                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 41076                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 41077                                  ; .size:
 41078                                  ;endstruc
 41079                                  
 41080                                  ;DOSCODE SEGMENT
 41081                                  
 41082                                  	; 22/05/2019 - Retro DOS v4.0
 41083                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 41084                                  
 41085                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41086                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 41087                                  
 41088                                  ; M028 - BEGIN
 41089                                  
 41090                                  ;--------------------------------------------------------------------------
 41091                                  ;
 41092                                  ;	Procedure Name		: ExecReady
 41093                                  ;
 41094                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 41095                                  ;
 41096                                  ;--------------------------------------------------------------------------
 41097                                  
 41098                                  ExecReady:
 41099 00007216 89D6                    	mov	si,dx			; move the pointer into a friendly one
 41100                                  	;;test	word [si+2],1
 41101                                  	; 17/12/2022
 41102 00007218 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41103                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 41104 0000721C 7413                    	jz	short er_setver		; only setver for .COM files
 41105                                  
 41106                                  	;mov	ax,[si+8]
 41107 0000721E 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 41108 00007221 83C010                  	add	ax,10h
 41109 00007224 8EC0                    	mov	es,ax
 41110                                  
 41111                                  	;mov	cx,[si+10]
 41112 00007226 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 41113                                  	;mov	ax,[si+12]	; 11/04/2024
 41114 00007229 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 41115                                  
 41116                                  	;call	[ss:FixExePatch]
 41117 0000722C 36FF16[1212]            	call	word [ss:FixExePatch] ; 28/12/2022
 41118                                  	
 41119                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41120                                  	;call	[ss:Rational386PatchPtr]
 41121                                  
 41122                                  er_setver:
 41123                                  	;;test	word [si+2],2		; Q: is this an overlay
 41124                                  	; 17/12/2022
 41125 00007231 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 41126                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 41127 00007235 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 41128                                  					; N: set up lie version first
 41129 00007237 1E                      	push	ds
 41130 00007238 56                      	push	si
 41131                                  	;lds	si,[si+4]
 41132 00007239 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 41133 0000723C E8CBED                  	call	Scan_Execname1
 41134 0000723F E8DCED                  	call	Scan_Special_Entries
 41135 00007242 5E                      	pop	si
 41136 00007243 1F                      	pop	ds
 41137                                  	;mov	es,[si+8]
 41138 00007244 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 41139 00007247 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 41140 0000724B 26A34000                	mov	[es:PDB.Version],ax
 41141                                  
 41142                                  er_chkdoshi:
 41143 0000724F 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 41144 00007255 741F                    	je	short er_done		; M032: N: done
 41145                                  
 41146                                  					; M068 - Start
 41147                                  	;mov	ax,[si+8]
 41148 00007257 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 41149                                  
 41150                                  	;or	byte [ss:DOS_FLAG],4
 41151 0000725A 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 41152                                  					; ah = 25 & ah= 49. See dossym.inc 
 41153                                  					; under TAG M003 & M009 for 
 41154                                  					; explanation
 41155                                  	;;test	word [si+2],1
 41156                                  	; 17/12/2022
 41157 00007260 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41158                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 41159 00007264 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 41160                                  					;    a20off_psp and ret
 41161 00007266 1E                         	push	ds
 41162 00007267 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 41163 00007269 E87E02                  	call	IsCopyProt		; check if copy protected
 41164 0000726C 1F                      	pop	ds
 41165                                  
 41166                                  er_setA20:
 41167                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 41168                                  	; is non-zero at this point it indicates that the A20 is to be 
 41169                                  	; turned off for that many int 21 calls made by the app. In 
 41170                                  	; addition the A20 has to be turned off when we exit from this 
 41171                                  	; call. Hence the inc.
 41172                                  
 41173 0000726D 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 41174 00007272 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 41175                                  					; turned OFF.
 41176                                  er_done:				; M068 - End
 41177 00007276 31C0                    	xor	ax,ax
 41178 00007278 C3                      	retn
 41179                                  
 41180                                  ; M028 - END
 41181                                  
 41182                                  ; 23/03/2024
 41183                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41184                                  %if 0
 41185                                  
 41186                                  ;----------------------------------------------------------------------------
 41187                                  ;
 41188                                  ; procedure : Rational386Patch
 41189                                  ;
 41190                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 41191                                  ; 386 registers (usually just the high word of 32 bit registers) during
 41192                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 41193                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 41194                                  ;
 41195                                  ; This routine applies patches to the Rational DOS Extender to work around
 41196                                  ; most of the register trashing bugs.
 41197                                  ;
 41198                                  ; Note that there are additional register trashing bugs not fixed by these
 41199                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 41200                                  ; may be modified on interrupts.
 41201                                  ;
 41202                                  ; There are two different Rational DOS Extender patchs in this module.
 41203                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 41204                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 41205                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 41206                                  ; or not.
 41207                                  ;
 41208                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 41209                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 41210                                  ; running in the HMA.
 41211                                  ;
 41212                                  ; This patch detection and replacement is based on an example supplied by
 41213                                  ; Ben Williams at Rational.
 41214                                  ;
 41215                                  ;----------------------------------------------------------------------------
 41216                                  
 41217                                  ; 22/05/2019 - Retro DOS v4.0
 41218                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 41219                                  
 41220                                  ;----------------------------------------------------------------------------
 41221                                  ;
 41222                                  ; INPUT : ES = segment where program got loaded
 41223                                  ;
 41224                                  ;----------------------------------------------------------------------------
 41225                                  
 41226                                  rpFind1:
 41227                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 41228                                  
 41229                                  rpFind1Len equ	$ - rpFind1
 41230                                  
 41231                                  ;	cli
 41232                                  ;	in	al, 21h
 41233                                  ;	pusha
 41234                                  ;	xor	ax, ax
 41235                                  ;	out	43h, al
 41236                                  ;	mov	dx, ...
 41237                                  
 41238                                  rpFind1a:
 41239                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 41240                                  
 41241                                  rpFind1aLen equ	$ - rpFind1a
 41242                                  
 41243                                  ;	mov	al, 0Eh
 41244                                  ;	out	37h, al
 41245                                  ;	xor	ax, ax
 41246                                  ;	out	0F2h, al
 41247                                  
 41248                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41249                                  
 41250                                  rpFind2:
 41251                                  	db	0Fh, 20h, 0C0h
 41252                                  
 41253                                  rpFind2Len equ	$ - rpFind2
 41254                                  
 41255                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 41256                                  
 41257                                  rpFind3:
 41258                                  	db	0Fh, 22h, 0C0h, 0EAh
 41259                                  
 41260                                  rpFind3Len equ	$ - rpFind3
 41261                                  
 41262                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 41263                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 41264                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 41265                                  
 41266                                  ; note, there is no rpRepl1 string
 41267                                  
 41268                                  rpRepl2:
 41269                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 41270                                  
 41271                                  rpRepl2Len equ	$ - rpRepl2
 41272                                  
 41273                                  ;	push	eax
 41274                                  ;	push	cx
 41275                                  ;	mov	eax, cr0
 41276                                  
 41277                                  rpRepl3:
 41278                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 41279                                  
 41280                                  rpRepl3Len equ	$ - rpRepl3
 41281                                  
 41282                                  ;	mov	ss, bx
 41283                                  ;	pop	cx
 41284                                  ;	pop	eax
 41285                                  
 41286                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 41287                                  
 41288                                  rpFind4:
 41289                                  	db	93h, 58h, 8Bh, 0CCh
 41290                                  
 41291                                  rpFind4Len equ	$ - rpFind4
 41292                                  
 41293                                  ;	xchg	bx, ax
 41294                                  ;	pop	ax
 41295                                  ;	mov	cx, sp
 41296                                  
 41297                                  rpFind5:
 41298                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 41299                                  
 41300                                  rpFind5Len equ	$ - rpFind5
 41301                                  
 41302                                  ;	mov	ax, DE0Ch
 41303                                  ;	int	67h
 41304                                  ;	mov	sp, cx
 41305                                  ;	jmp	bx
 41306                                  
 41307                                  rpRepl4:
 41308                                  	db	93h, 58h, 8Bh, 0CCh
 41309                                  	db	02Eh, 066h, 0A3h
 41310                                  
 41311                                  rpRepl4o1Len equ $ - rpRepl4
 41312                                  
 41313                                  	db	00h, 00h
 41314                                  	db	02Eh, 066h, 89h, 36h
 41315                                  
 41316                                  rpRepl4o2Len equ $ - rpRepl4
 41317                                  
 41318                                  	db	00h, 00h
 41319                                  
 41320                                  rpRepl4Len equ	$ - rpRepl4
 41321                                  
 41322                                  ;	xchg	bx, ax
 41323                                  ;	pop	ax
 41324                                  ;	mov	cx, sp
 41325                                  ;	mov	dword ptr cs:[xxxx], eax
 41326                                  ;	mov	dword ptr cs:[xxxx], esi
 41327                                  
 41328                                  rpRepl5:
 41329                                  	db	8Bh, 0E1h
 41330                                  	db	2Eh, 66h, 0A1h
 41331                                  
 41332                                  rpRepl5o1Len equ $ - rpRepl5
 41333                                  
 41334                                  	db	00h, 00h
 41335                                  	db	2Eh, 66h, 8Bh, 36h
 41336                                  
 41337                                  rpRepl5o2Len equ $ - rpRepl5
 41338                                  
 41339                                  	db	00h, 00h
 41340                                  	db	0FFh, 0E3h
 41341                                  
 41342                                  rpRepl5Len equ	$ - rpRepl5
 41343                                  
 41344                                  ;	mov	sp, cx
 41345                                  ;	mov	eax, dword ptr cs:[xxxx]
 41346                                  ;	mov	esi, dword ptr cs:[xxxx]
 41347                                  ;	jmp	bx
 41348                                  
 41349                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 41350                                  
 41351                                  rpFind6:
 41352                                  	db	0FAh, 52h, 51h
 41353                                  
 41354                                  rpFind6Len equ	$ - rpFind6
 41355                                  
 41356                                  ;	cli
 41357                                  ;	push	dx
 41358                                  ;	push	cx
 41359                                  
 41360                                  rpFind7a:
 41361                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 41362                                  
 41363                                  rpFind7aLen equ	$ - rpFind7a
 41364                                  
 41365                                  ;	mov	ax, 0DE0Ch
 41366                                  ;	call	fword ptr es:[xxxx]
 41367                                  
 41368                                  rpFind7b:
 41369                                  	db	59h, 5Ah, 5Bh
 41370                                  
 41371                                  rpFind7bLen equ	$ - rpFind7b
 41372                                  
 41373                                  ;	pop	cx
 41374                                  ;	pop	dx
 41375                                  ;	pop	bx
 41376                                  
 41377                                  rpRepl6:
 41378                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 41379                                  
 41380                                  rpRepl6Len equ	$ - rpRepl6
 41381                                  
 41382                                  ;	cli
 41383                                  ;	push	eax
 41384                                  ;	push	ebx
 41385                                  ;	push	ecx
 41386                                  ;	push	edx
 41387                                  
 41388                                  rpRepl7:
 41389                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41390                                  
 41391                                  rpRepl7Len equ	$ - rpRepl7
 41392                                  
 41393                                  ;	pop	edx
 41394                                  ;	pop	ecx
 41395                                  ;	pop	ebx
 41396                                  ;	pop	eax
 41397                                  ;	pop	bx
 41398                                  
 41399                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41400                                  
 41401                                  rpFind8:
 41402                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41403                                  
 41404                                  rpFind8Len equ	$ - rpFind8
 41405                                  
 41406                                  ;	pusha
 41407                                  ;	push	es
 41408                                  ;	push	ds
 41409                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41410                                  ;	mov	ds, ax
 41411                                  
 41412                                  rpFind9 :
 41413                                  	db	1Fh, 07h, 61h
 41414                                  
 41415                                  rpFind9Len equ	$ - rpFind9
 41416                                  
 41417                                  ;	pop	ds
 41418                                  ;	pop	es
 41419                                  ;	popa
 41420                                  
 41421                                  rpRepl8:
 41422                                   	db	66h, 60h, 06h, 1Eh
 41423                                  
 41424                                  rpRepl8Len equ	$ - rpRepl8
 41425                                  
 41426                                  ;	pushad
 41427                                  ;	push	es
 41428                                  ;	push	ds
 41429                                  
 41430                                  rpRepl9:
 41431                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41432                                  
 41433                                  rpRepl9Len equ	$ - rpRepl9
 41434                                  
 41435                                  ;	pop	ds
 41436                                  ;	pop	es
 41437                                  ;	popad
 41438                                  ;	retn			;no need to jmp back to main-line
 41439                                  
 41440                                  ;----------------------------------------------------------------------------
 41441                                  
 41442                                  struc SearchPair
 41443                                   .sp_off1: resw 1	; offset of 1st search string
 41444                                   .sp_len1: resw 1	; length of 1st search string
 41445                                   .sp_off2: resw 1	; 2nd string
 41446                                   .sp_len2: resw 1	; 2nd string
 41447                                   .sp_diff: resw 1	; max difference between offsets
 41448                                   .size:
 41449                                  endstruc
 41450                                  
 41451                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41452                                  
 41453                                  rpBug1Strs:
 41454                                  	dw	rpFind2
 41455                                  	dw	rpFind2Len ; 3
 41456                                  	dw	rpFind3
 41457                                  	dw	rpFind3Len ; 4
 41458                                  	dw	20h
 41459                                  
 41460                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41461                                  
 41462                                  rpBug2Strs:
 41463                                  	dw	rpFind4
 41464                                  	dw	rpFind4Len ; 4
 41465                                  	dw	rpFind5
 41466                                  	dw	rpFind5Len ; 9
 41467                                  	dw	80h
 41468                                  
 41469                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41470                                  
 41471                                  rpBug3Strs:
 41472                                  	dw	rpFind6
 41473                                  	dw	rpFind6Len ; 3
 41474                                  	dw	rpFind7a
 41475                                  	dw	rpFind7aLen ; 7
 41476                                  	dw	80h
 41477                                  
 41478                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41479                                  
 41480                                  rpBug4Strs:
 41481                                  	dw	rpFind8
 41482                                  	dw	4
 41483                                  	dw	rpFind9
 41484                                  	dw	rpFind9Len ; 3
 41485                                  	dw	80h
 41486                                  
 41487                                  ;----------------------------------------------------------------------------
 41488                                  
 41489                                  struc StackVars
 41490                                   .sv_wVersion:	resw 1		; Rational extender version #
 41491                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41492                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41493                                   .size:
 41494                                  endstruc
 41495                                  
 41496                                  ;----------------------------------------------------------------------------
 41497                                  
 41498                                  ; 22/05/2019 - Retro DOS v4.0
 41499                                  
 41500                                  Rational386Patch:
 41501                                  	; Do a few quick checks to see if this looks like a Rational
 41502                                  	; Extended application. Hopefully this will quickly weed out
 41503                                  	; most non Rational apps.
 41504                                  
 41505                                  	cmp	word [es:0],395		; version number goes here - versions
 41506                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41507                                  
 41508                                  	cmp	word [es:0Ch],20h	; always has this value here
 41509                                  	jne	short rp3QuickOut
 41510                                  
 41511                                  	push	ax
 41512                                  
 41513                                  	mov	ax,18h 			; extender has 18h at
 41514                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41515                                  	jne	short rp3QO_ax
 41516                                  	cmp	[es:28],ax
 41517                                  	jne	short rp3QO_ax
 41518                                  	cmp	[es:36],ax
 41519                                  	je	short rp3Maybe
 41520                                  rp3QO_ax:
 41521                                  	pop	ax
 41522                                  rp3QuickOut:
 41523                                  	retn
 41524                                  
 41525                                  ; It might be the rational extender, do more extensive checking
 41526                                  
 41527                                  rp3Maybe:
 41528                                  	cld
 41529                                  	push	bx			; note ax pushed above
 41530                                  	push	cx
 41531                                  	push	dx
 41532                                  	push	si
 41533                                  	push	di
 41534                                  	push	es
 41535                                  	push	ds			; we use all of them
 41536                                  	push	bp
 41537                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41538                                  	mov	bp,sp
 41539                                  
 41540                                  	push	cs
 41541                                  	pop	ds
 41542                                  
 41543                                  	mov	ax,[es:0]		; save version #
 41544                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41545                                  	mov	[bp],ax	
 41546                                  					; check that binary version # matches
 41547                                  	call	VerifyVersion		;   ascii string
 41548                                  	jne	short rp3Exit_j
 41549                                  
 41550                                  ; Looks like this is it, find where to put the patch code.  The
 41551                                  ; patch will be located on top of Rational code specific to 80286
 41552                                  ; processors, so these patchs MUST NOT be applied if running on
 41553                                  ; an 80286 system.
 41554                                  
 41555                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41556                                  
 41557                                  	mov	cx,4500h		; force search len to 4700h (searches
 41558                                  	;mov	[bp+2],cx
 41559                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41560                                  
 41561                                  	mov	es,[es:20h]		; es=code segment
 41562                                  
 41563                                  	mov	si,rpFind1		; string to find
 41564                                  	mov	dx,rpFind1Len ; 10	; length to match
 41565                                  	call	ScanCodeSeq		; look for code seq
 41566                                  	jz	short rpGotPatch
 41567                                  
 41568                                  ; According to Rational, some very old versions of the extender may not
 41569                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41570                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41571                                  
 41572                                  	mov	si,rpFind1a
 41573                                  	mov	dx,rpFind1aLen  ;8
 41574                                  	call	ScanCodeSeq
 41575                                  	jz	short rpGotPatch
 41576                                  
 41577                                  rp3Exit_j:
 41578                                  	jmp	rp3Exit
 41579                                  
 41580                                  ; Found the location to write patch code! DI = offset in code seg.
 41581                                  
 41582                                  rpGotPatch:
 41583                                  	;mov	[bp+4],di
 41584                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41585                                  
 41586                                  ;----------------------------------------------------------------------------
 41587                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41588                                  
 41589                                  	;cmp	word [bp+0],381
 41590                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41591                                  	cmp	word [bp],381
 41592                                  	jae	short rpBug2			;   < 3.81
 41593                                  
 41594                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41595                                  	call	FindBadCode
 41596                                  	jc	short rpBug2
 41597                                  
 41598                                  ; si = rpFind2 offset, di = rpFind3 offset
 41599                                  
 41600                                  	push	di
 41601                                  	mov	di,si				; rpFind2 offset
 41602                                  	mov	dx,rpFind2Len ; 3
 41603                                  
 41604                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41605                                  	jne	short rp_no_cx
 41606                                  
 41607                                  	dec	di				;   yes, gobble up push cx too
 41608                                  	inc	dx
 41609                                  rp_no_cx:
 41610                                  	mov	si,rpRepl2			; patch out find2 sequence
 41611                                  	mov	cx,rpRepl2Len  ; 6
 41612                                  	call	GenPatch
 41613                                  
 41614                                  	pop	di				; rpFind3 offset
 41615                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41616                                  	jne	short rp_no_cx2
 41617                                  
 41618                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41619                                  rp_no_cx2:
 41620                                  	;mov	ax,[bp+4]
 41621                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41622                                  	;mov	[es:di+4],ax
 41623                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41624                                  
 41625                                  	push	di				; save find3 offset
 41626                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41627                                  	mov	cx,rpRepl3Len ; 5
 41628                                  	call	CopyPatch
 41629                                  
 41630                                  	pop	bx				; find3 offset
 41631                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41632                                  	call	GenJump 			; jmp back from patch area
 41633                                  	;mov	[bp+4],di
 41634                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41635                                  						;   area pointer
 41636                                  
 41637                                  ;----------------------------------------------------------------------------
 41638                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41639                                  
 41640                                  rpBug2:
 41641                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41642                                  	call	FindBadCode
 41643                                  	jc	short rpBug3
 41644                                  
 41645                                  ; si = rpFind4 offset, di = rpFind5 offset
 41646                                  
 41647                                  	;push	word [bp+4]
 41648                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41649                                  						;   (where repl4 goes)
 41650                                  	push	di				; save find5 offset
 41651                                  
 41652                                  	mov	di,si
 41653                                  	mov	dx,rpFind4Len ; 4
 41654                                  	mov	si,rpRepl4
 41655                                  	mov	cx,rpRepl4Len ; 15
 41656                                  	call	GenPatch			; patch out find4 code
 41657                                  
 41658                                  	pop	di				; find5 offset
 41659                                  	add	di,5				; keep 5 bytes of find5 code
 41660                                  	;mov	bx,[bp+4]
 41661                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41662                                  	push	bx				; save repl5 location
 41663                                  	call	GenJump
 41664                                  
 41665                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41666                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41667                                  	call	CopyPatch			;   so no need to jmp back to
 41668                                  						;   main-line code
 41669                                  
 41670                                  ; patches have been made, now update the patch code to store/load dwords just
 41671                                  ; after the code in the patch area
 41672                                  
 41673                                  	pop	di				; repl5 location
 41674                                  	pop	si				; repl4 location
 41675                                  
 41676                                  	;mov	ax,[bp+4]
 41677                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41678                                  
 41679                                  	;mov	[es:si+7],ax
 41680                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41681                                  	;mov	[es:di+5],ax
 41682                                  	mov	[es:di+rpRepl5o1Len],ax
 41683                                  	add	ax,4
 41684                                  	;mov	[es:si+0Dh],ax
 41685                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41686                                  	;mov	[es:di+0Bh],ax
 41687                                  	mov	[es:di+rpRepl5o2Len],ax
 41688                                  
 41689                                  	;add	word [bp+4],8
 41690                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41691                                  						; patch area
 41692                                  
 41693                                  ;----------------------------------------------------------------------------
 41694                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41695                                  
 41696                                  rpBug3:
 41697                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41698                                  	call	FindBadCode
 41699                                  	jc	short rpBug4
 41700                                  
 41701                                  	;add	di,9
 41702                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41703                                  	push	si				;   code and locate find7b
 41704                                  	mov	si,rpFind7b			;   sequence
 41705                                  	mov	dx,rpFind7bLen ; 3
 41706                                  	call	ScanCodeSeq_di
 41707                                  	pop	si
 41708                                  	jnz	short rpBug4
 41709                                  
 41710                                  	push	di				; save find7b code offset
 41711                                  
 41712                                  	mov	di,si
 41713                                  	mov	dx,rpFind6Len ; 3
 41714                                  	mov	si,rpRepl6
 41715                                  	mov	cx,rpRepl6Len ; 9
 41716                                  	call	GenPatch			; patch out find6 code
 41717                                  
 41718                                  	pop	di
 41719                                  	mov	dx,rpFind7bLen ; 3
 41720                                  	mov	si,rpRepl7
 41721                                  	mov	cx,rpRepl7Len ; 9
 41722                                  	call	GenPatch			; patch out find7b code
 41723                                  
 41724                                  ;----------------------------------------------------------------------------
 41725                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41726                                  
 41727                                  rpBug4:
 41728                                  	;cmp	word [bp+0],360
 41729                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41730                                  	cmp	word [bp],360
 41731                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41732                                  
 41733                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41734                                  	call	FindBadCode
 41735                                  	jc	short rp3Exit
 41736                                  
 41737                                  	push	di				; save find9 code offset
 41738                                  
 41739                                  	mov	di,si
 41740                                  	mov	dx,3
 41741                                  	mov	si,rpRepl8
 41742                                  	mov	cx,rpRepl8Len ; 4
 41743                                  	call	GenPatch			; patch out find8 code
 41744                                  
 41745                                  	pop	di				; find9 offset
 41746                                  	;mov	bx,[bp+4]
 41747                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41748                                  	call	GenJump 			;   patch area
 41749                                  
 41750                                  	mov	si,rpRepl9			; copy replacement code to
 41751                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41752                                  	call	CopyPatch			;   so no jmp back to main-line
 41753                                  
 41754                                  rp3Exit:
 41755                                  	add	sp,StackVars.size
 41756                                  	pop	bp
 41757                                  	pop	ds
 41758                                  	pop	es
 41759                                  	pop	di
 41760                                  	pop	si
 41761                                  	pop	dx
 41762                                  	pop	cx
 41763                                  	pop	bx
 41764                                  	pop	ax
 41765                                  	retn
 41766                                  
 41767                                  ;----------------------------------------------------------------------------
 41768                                  ;
 41769                                  ; FindBadCode
 41770                                  ;
 41771                                  ; Searches Rational code segment looking for a pair of find strings (all
 41772                                  ; patches have at least two find strings).
 41773                                  ;
 41774                                  ; Entry:
 41775                                  ;	ES    = code segment to search
 41776                                  ;	DS:BX = search pair structure for this search
 41777                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41778                                  ;
 41779                                  ; Exit:
 41780                                  ;	CY flag clear if both strings found, and
 41781                                  ;	SI    = offset in ES of 1st string
 41782                                  ;	DI    = offset in ES of 2nd string
 41783                                  ;	CY set if either string not found, or strings too far apart
 41784                                  ;
 41785                                  ; Used:
 41786                                  ;	CX
 41787                                  ;
 41788                                  ;----------------------------------------------------------------------------
 41789                                  
 41790                                  ;struc SearchPair
 41791                                  ; .sp_off1: resw 1	; offset of 1st search string
 41792                                  ; .sp_len1: resw 1	; length of 1st search string
 41793                                  ; .sp_off2: resw 1	; 2nd string
 41794                                  ; .sp_len2: resw 1	; 2nd string
 41795                                  ; .sp_diff: resw 1	; max difference between offsets
 41796                                  ; .size:
 41797                                  ;endstruc
 41798                                  
 41799                                  FindBadCode:
 41800                                  	;mov	cx,[bp+2]
 41801                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41802                                  
 41803                                  	mov	si,[bx]	; mov si,[bx+0]
 41804                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41805                                  	
 41806                                  	;mov	dx,[bx+2]
 41807                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41808                                  	call	ScanCodeSeq
 41809                                  	jnz	short fbc_error		; done if 1st not found
 41810                                  
 41811                                  	push	di			; save 1st string offset
 41812                                  
 41813                                  	;mov	si,[bx+4]
 41814                                  	mov	si,[bx+SearchPair.sp_off2]
 41815                                  	;mov	dx,[bx+6]
 41816                                  	mov	dx,[bx+SearchPair.sp_len2]
 41817                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41818                                  
 41819                                  	pop	si			; restore 1st string offset
 41820                                  	jnz	short fbc_error
 41821                                  
 41822                                  	mov	ax,di			; sanity check that
 41823                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41824                                  	jc	short fbc_error
 41825                                  	;cmp	ax,[bx+8]
 41826                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41827                                  	ja	short fbc_error
 41828                                  
 41829                                  	clc
 41830                                  	retn
 41831                                  
 41832                                  fbc_error:
 41833                                  	stc
 41834                                  	retn
 41835                                  
 41836                                  ;----------------------------------------------------------------------------
 41837                                  ;
 41838                                  ; GenPatch
 41839                                  ;
 41840                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41841                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41842                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41843                                  ; code.
 41844                                  ;
 41845                                  ; Entry:
 41846                                  ;	ES:DI = start of buggy code to be patched
 41847                                  ;	DX    = length of buggy code to be patched
 41848                                  ;	DS:SI = replacement patch code
 41849                                  ;	CX    = length of replacement patch code
 41850                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41851                                  ;
 41852                                  ; Exit:
 41853                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41854                                  ;
 41855                                  ; Used:
 41856                                  ;	AX, BX, SI, Flags
 41857                                  ;
 41858                                  ;----------------------------------------------------------------------------
 41859                                  
 41860                                  GenPatch:
 41861                                  	push	di			;save offset of buggy code
 41862                                  
 41863                                  	;mov	bx,[bp+4]
 41864                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41865                                  					;jump from buggy code to patch area
 41866                                  	call	GenJump
 41867                                  
 41868                                  	call	CopyPatch		;copy replacement code to patch area
 41869                                  
 41870                                  	pop	bx			;offset of buggy code + buggy code
 41871                                  	add	bx,dx			;  length = return from patch offset
 41872                                  
 41873                                  	call	GenJump 		;jump from patch area back to main-
 41874                                  	;mov	[bp+4],di
 41875                                  	mov	[bp+StackVars.sv_pPatch],di
 41876                                  					;  line code, update patch pointer
 41877                                  	retn
 41878                                  
 41879                                  ;----------------------------------------------------------------------------
 41880                                  ;
 41881                                  ; CopyPatch
 41882                                  ;
 41883                                  ; Copies patch code to patch location.
 41884                                  ;
 41885                                  ; Entry:
 41886                                  ;	DS:SI = patch code to be copied
 41887                                  ;	ES    = segment of code to patch
 41888                                  ;	CX    = length of code to copy
 41889                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41890                                  ;
 41891                                  ; Exit:
 41892                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41893                                  ;
 41894                                  ; Used:
 41895                                  ;	SI, Flags
 41896                                  ;
 41897                                  ;----------------------------------------------------------------------------
 41898                                  
 41899                                  CopyPatch:
 41900                                  	push	cx
 41901                                  	;mov	di,[bp+4]
 41902                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41903                                  	cld
 41904                                  	rep movsb
 41905                                  	pop	cx
 41906                                  	;mov	[bp+4],di
 41907                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41908                                  	retn
 41909                                  
 41910                                  ;----------------------------------------------------------------------------
 41911                                  ;
 41912                                  ; GenJump
 41913                                  ;
 41914                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41915                                  ;
 41916                                  ; Entry:
 41917                                  ;	ES:DI = from location (where to put jmp instruction)
 41918                                  ;	BX    = to location (where to jump to)
 41919                                  ;
 41920                                  ; Exit:
 41921                                  ;	DI = byte after generated jump
 41922                                  ;
 41923                                  ; Used:
 41924                                  ;	AX
 41925                                  ;
 41926                                  ;----------------------------------------------------------------------------
 41927                                  
 41928                                  GenJump:
 41929                                  	mov	al,0E9h		; jmp rel16 opcode
 41930                                  	stosb
 41931                                  
 41932                                  	mov	ax,bx		; calc offset to 'to' location
 41933                                  	sub	ax,di
 41934                                  	sub	ax,2
 41935                                  
 41936                                  	stosw			; output offset
 41937                                  
 41938                                  	retn
 41939                                  
 41940                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41941                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41942                                  
 41943                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41944                                  
 41945                                  ;----------------------------------------------------------------------------
 41946                                  ;
 41947                                  ; ScanCodeSeq
 41948                                  ;
 41949                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41950                                  ;
 41951                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41952                                  ;
 41953                                  ;----------------------------------------------------------------------------
 41954                                  
 41955                                  ScanCodeSeq:
 41956                                  	mov	di,200h
 41957                                  ScanCodeSeq_di:
 41958                                  	push	cx
 41959                                  	sub	cx,dx
 41960                                  	inc	cx
 41961                                  scsagain:
 41962                                  	push	si
 41963                                  	push	di
 41964                                  	push	cx
 41965                                  	mov	cx,dx
 41966                                  	rep	cmpsb
 41967                                  	pop	cx
 41968                                  	pop	di
 41969                                  	pop	si
 41970                                  	je	short scsfound
 41971                                  	inc	di
 41972                                  	loop	scsagain
 41973                                  scsfound:
 41974                                  	pop	cx
 41975                                  vvexit:		; 18/12/2022
 41976                                  	retn
 41977                                  
 41978                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41979                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41980                                  
 41981                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41982                                  	
 41983                                  ;----------------------------------------------------------------------------
 41984                                  ;
 41985                                  ; VerifyVersion
 41986                                  ;
 41987                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41988                                  ; from ES:2A.
 41989                                  ;
 41990                                  ;       Entry: AX = binary version number 
 41991                                  ;       Exit : Z flag set if version numbers match
 41992                                  ;
 41993                                  ;----------------------------------------------------------------------------
 41994                                  
 41995                                  VerifyVersion:
 41996                                  	mov	si,[es:2Ah]		; offset of version number
 41997                                  					;  in ascii
 41998                                  	mov	bl,10
 41999                                  	add	si,3			; point to last digit
 42000                                  
 42001                                  	call	VVDigit
 42002                                  	jne	short vvexit
 42003                                  	call	VVDigit
 42004                                  	jne	short vvexit
 42005                                  	cmp	byte [es:si],'.'
 42006                                  	jne	short vvexit
 42007                                  	dec	si
 42008                                  	;call	VVDigit
 42009                                  	; 18/12/2022
 42010                                  	;jmp	short VVDigit
 42011                                  ;vvexit:
 42012                                  	;retn
 42013                                  VVDigit:
 42014                                  	div	bl
 42015                                  	add	ah,'0'
 42016                                  	dec	si
 42017                                  	cmp	[es:si+1],ah
 42018                                  	mov	ah,0			; do not xor or sub we need Z
 42019                                  	retn
 42020                                  
 42021                                  %endif
 42022                                  
 42023                                  ;-----------------------------------------------------------------------
 42024                                  
 42025                                  ; 23/05/2019 - Retro DOS v4.0
 42026                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 42027                                  
 42028                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42029                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 42030                                  
 42031                                  exepatch_start:	 ; label byte
 42032                                  
 42033                                  	; The following is the code that'll be layed over the buggy unpack
 42034                                  	; code.
 42035                                  str1:
 42036 00007279 06                      	db  06h	  		;push	es
 42037 0000727A 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42038                                  
 42039                                  first_stop equ	$-str1
 42040                                  			
 42041 0000727C 2BC2                    	db  2Bh, 0C2h		;sub	ax,dx
 42042                                  
 42043                                  first:  ; label	byte
 42044                                  
 42045 0000727E 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42046 00007280 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42047 00007282 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42048 00007285 57                      	db  57h	    		;push	di
 42049 00007286 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42050 00007289 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH
 42051 0000728B F3AE                    	db  0F3h,0AEh 		;repz	scasb
 42052 0000728D 47                      	db  47h	    		;inc	di
 42053 0000728E 8BF7                    	db  8Bh,0F7h  		;mov	si,di
 42054 00007290 5F                      	db  5Fh	    		;pop	di
 42055 00007291 58                      	db  58h	    		;pop	ax
 42056                                  
 42057                                  second_stop equ	$-first
 42058                                  
 42059 00007292 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx
 42060                                  
 42061                                  second: ; label	byte
 42062                                  
 42063 00007294 8EC0                    	db  8Eh,0C0h  		;mov	es,ax
 42064                                  		    		;NextRec:
 42065 00007296 B90402                  	db  0B9h,04h,02h	;mov	cx,0204h
 42066                                  		    		;norm_agn:
 42067 00007299 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42068 0000729B F7D0                    	db  0F7h,0D0h		;not	ax
 42069 0000729D D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42070 0000729F 7413                    	db  74h,13h		;jz	short SI_ok
 42071 000072A1 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42072 000072A3 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42073 000072A6 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42074 000072A8 7308                    	db  73h,08h		;jnc	short SItoDS
 42075 000072AA F7DA                    	db  0F7h,0DAh		;neg	dx
 42076 000072AC D3E2                    	db  0D3h,0E2h		;shl	dx,cl
 42077 000072AE 2BF2                    	db  2Bh,0F2h		;sub	si,dx
 42078 000072B0 33D2                    	db  33h,0D2h		;xor	dx,dx
 42079                                  				;SItoDS:
 42080 000072B2 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42081                                  				;SI_ok:
 42082 000072B4 87F7                    	db  87h,0F7h		;xchg	si,di
 42083 000072B6 1E                      	db  1Eh			;push	ds
 42084 000072B7 06                      	db  06h			;push	es
 42085 000072B8 1F                      	db  1Fh			;pop	ds
 42086 000072B9 07                      	db  07h			;pop	es
 42087 000072BA FECD                    	db  0FEh,0CDh		;dec	ch
 42088 000072BC 75DB                    	db  75h,0DBh		;jnz	short norm_agn
 42089 000072BE AC                      	db  0ACh		;lodsb
 42090 000072BF 92                      	db  92h			;xchg	dx,ax
 42091 000072C0 4E                      	db  4Eh			;dec	si
 42092 000072C1 AD                      	db  0ADh		;lodsw
 42093 000072C2 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42094 000072C4 46                      	db  46h			;inc	si
 42095 000072C5 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42096 000072C7 24FE                    	db  24h,0FEh		;and	al,0FEH
 42097 000072C9 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42098 000072CB 7505                    	db  75h,05h		;jne	short TryEnum
 42099 000072CD AC                      	db  0ACh		;lodsb
 42100 000072CE F3AA                    	db  0F3h,0AAh		;rep stosb
 42101                                  
 42102                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 42103 000072D0 EB06                    	db  0EBh,06h		;jmp	short TryNext
 42104                                  
 42105                                  				;TryEnum:
 42106 000072D2 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42107 000072D4 756C                    	db  75h,6Ch		;jne	short CorruptExe
 42108 000072D6 F3A4                    	db  0F3h,0A4h		;rep movsb
 42109                                  				;TryNext:
 42110                                  
 42111 000072D8 92                      	db  92h			;xchg	dx,ax
 42112                                  ;	db  8Ah,0C2h		;mov	al,dl
 42113                                  
 42114 000072D9 A801                    	db  0A8h,01h		;test	al,1
 42115 000072DB 74B9                    	db  74h,0B9h		;jz	short NextRec
 42116 000072DD 9090                    	db  90h,90h		;nop,nop
 42117                                  	
 42118                                  last_stop equ $-second
 42119                                  size_str1 equ $-str1
 42120                                  
 42121                                  	; The following is the code that we need to look for in the exe
 42122                                  	; file.
 42123                                  
 42124                                  scan_patch1: ; label byte
 42125                                  
 42126 000072DF 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42127 000072E1 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42128 000072E3 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 42129 000072E5 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42130 000072E7 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42131 000072E9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42132 000072EC B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42133 000072EF B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42134 000072F1 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42135 000072F3 47                      	db  47h			;inc	di
 42136 000072F4 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42137 000072F6 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42138 000072F8 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 42139 000072FA 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42140 000072FC BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42141                                  				;NextRec:
 42142 000072FF B104                    	db  0B1h,04h		;mov	cl,4
 42143 00007301 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42144 00007303 F7D0                    	db  0F7h,0D0h		;not	ax
 42145 00007305 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42146 00007307 7409                    	db  74h,09h		;jz	short SI_ok
 42147 00007309 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42148 0000730B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42149 0000730D 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42150 0000730F 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42151                                  	       			;SI_ok:
 42152 00007312 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42153 00007314 F7D0                    	db  0F7h,0D0h		;not	ax
 42154 00007316 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42155 00007318 7409                    	db  74h,09h		;jz	short DI_ok
 42156 0000731A 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42157 0000731C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42158 0000731E 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42159 00007320 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42160                                  				;DI_ok:
 42161                                  
 42162                                  size_scan_patch1 equ $-scan_patch1
 42163                                  
 42164                                  scan_patch2: ; label byte
 42165                                  			
 42166 00007323 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42167 00007325 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42168 00007327 48                      	db  48h			;dec	ax
 42169 00007328 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42170 0000732A 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42171 0000732C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42172 0000732F B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42173 00007332 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42174 00007334 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42175 00007336 47                      	db  47h			;inc	di
 42176 00007337 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42177 00007339 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42178 0000733B 48                      	db  48h			;dec	ax
 42179 0000733C 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42180 0000733E BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42181                                  				;NextRec:
 42182 00007341 B104                    	db  0B1h,04h		;mov	cl,4
 42183 00007343 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42184 00007345 F7D0                    	db  0F7h,0D0h		;not	ax
 42185 00007347 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42186 00007349 740A                    	db  74h,0Ah		;jz	short SI_ok
 42187 0000734B 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42188 0000734D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42189 0000734F 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42190 00007351 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 42191                                  				;or	si,0FFF0H
 42192                                  				;SI_ok:
 42193 00007355 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42194 00007357 F7D0                    	db  0F7h,0D0h		;not	ax
 42195 00007359 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42196 0000735B 740A                    	db  74h,0Ah		;jz	short DI_ok
 42197 0000735D 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42198 0000735F 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42199 00007361 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42200 00007363 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 42201                                  				;or	di,0FFF0H
 42202                                  				;DI_ok:
 42203                                  
 42204                                  size_scan_patch2 equ $-scan_patch2
 42205                                  
 42206                                  scan_patch3: ; label byte
 42207                                  
 42208 00007367 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42209 00007369 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42210 0000736B 48                      	db  48h			;dec	ax
 42211 0000736C 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42212 0000736E 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42213 00007370 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42214 00007373 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42215 00007376 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42216 00007378 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42217 0000737A 47                      	db  47h			;inc	di
 42218 0000737B 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42219 0000737D 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42220 0000737F 48                      	db  48h			;dec	ax
 42221 00007380 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42222 00007382 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42223                                  				;NextRec:
 42224 00007385 B104                    	db  0B1h,04h		;mov	cl,4
 42225 00007387 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42226 00007389 F7D0                    	db  0F7h,0D0h		;not	ax
 42227 0000738B D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42228 0000738D 7409                    	db  74h,09h		;jz	short SI_ok
 42229 0000738F 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42230 00007391 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42231 00007393 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42232 00007395 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42233                                  				;SI_ok:
 42234 00007398 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42235 0000739A F7D0                    	db  0F7h,0D0h		;not	ax
 42236 0000739C D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42237 0000739E 7409                    	db  74h,09h		;jz	short DI_ok
 42238 000073A0 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42239 000073A2 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42240 000073A4 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42241 000073A6 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42242                                  				;DI_ok:
 42243                                  
 42244                                  size_scan_patch3 equ $-scan_patch3
 42245                                  
 42246                                  scan_com: ; label byte
 42247                                  
 42248 000073A9 AC                      	db  0ACh		;lodsb
 42249 000073AA 8AD0                    	db  8Ah,0D0h		;mov	dl,al
 42250 000073AC 4E                      	db  4Eh			;dec	si
 42251 000073AD AD                      	db  0ADh		;lodsw
 42252 000073AE 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42253 000073B0 46                      	db  46h			;inc	si
 42254 000073B1 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42255 000073B3 24FE                    	db  24h,0FEh		;and	al,0FEH
 42256 000073B5 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42257 000073B7 7506                    	db  75h,06h		;jne	short TryEnum
 42258 000073B9 AC                      	db  0ACh		;lodsb
 42259 000073BA F3AA                    	db  0F3h,0AAh		;rep stosb
 42260 000073BC EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 42261                                  				;TryEnum:
 42262 000073BF 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42263 000073C1 756B                    	db  75h,6Bh		;jne	short CorruptExe
 42264 000073C3 F3A4                    	db  0F3h,0A4h		;rep movsb
 42265                                  				;TryNext:
 42266 000073C5 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42267 000073C7 A801                    	db  0A8h,01h		;test	al,1
 42268                                  ;	db  74h,0BAh		;jz	short NextRec
 42269                                  
 42270                                  size_scan_com	equ	$-scan_com
 42271                                  
 42272                                  ;-----------------------------------------------------------------------
 42273                                  
 42274                                  ; 23/05/2019 - Retro DOS v4.0
 42275                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 42276                                  
 42277                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42278                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 42279                                  
 42280                                  ExePatch:
 42281                                  	; 28/12/2022 - Retro DOS v4.1
 42282                                  	;call	ExePackPatch
 42283                                  	;;call	word [ss:RationalPatchPtr]
 42284                                  	;retn
 42285                                  	; 28/12/2022
 42286                                  	;jmp	short ExePackPatch
 42287                                  
 42288                                  ;-----------------------------------------------------------------------
 42289                                  ;
 42290                                  ; Procedure Name 	: ExePackPatch
 42291                                  ;
 42292                                  ; Inputs	 	: DS 			-> DOSDATA
 42293                                  ;			  ES:0 			-> read in image
 42294                                  ;			  ax:cx = start cs:ip of program
 42295                                  ; Output		:		
 42296                                  ;
 42297                                  ;	1. If ES <= 0fffh
 42298                                  ;	   2. if exepack signature ('RB') found
 42299                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 42300                                  ;	       	 4. if rest of the code & checksum compares
 42301                                  ;	  	    5. overlay buggy code with code in 
 42302                                  ;		       doscode:str1.
 42303                                  ;		 6. endif
 42304                                  ;	      7. endif
 42305                                  ;	   8. endif
 42306                                  ;	9. endif
 42307                                  ;
 42308                                  ;
 42309                                  ; Uses			: NONE
 42310                                  ;
 42311                                  ;-----------------------------------------------------------------------
 42312                                  
 42313                                  	; 21/03/2024 - Retro DOS v4.1
 42314                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42315                                  	; 23/05/2019 - Retro DOS v4.0	
 42316                                  ExePackPatch:
 42317 000073C9 53                      	push	bx
 42318 000073CA 8CC3                    	mov	bx,es			; bx has load segment
 42319 000073CC 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 42320 000073D0 7602                    	jbe	short ep_cont		; N: 
 42321 000073D2 5B                      	pop	bx			; Y: no need to patch
 42322 000073D3 C3                      	retn
 42323                                  ep_cont:
 42324 000073D4 1E                      	push	ds
 42325 000073D5 06                      	push	es
 42326 000073D6 50                      	push	ax
 42327 000073D7 51                      	push	cx
 42328 000073D8 56                      	push	si
 42329 000073D9 57                      	push	di
 42330                                  	
 42331                                  		; M033 - start
 42332                                  		; exepacked programs have an IP of 12h (>=2)
 42333                                  
 42334 000073DA 83E902                  	sub	cx,2			; Q: is IP >=2
 42335 000073DD 7303                    	jnb	short epp_1		; N: exit
 42336 000073DF E9B500                  	jmp	ep_notpacked
 42337                                  					; ax:cx now points to location of
 42338                                  					; 'RB' if this is an exepacked file.
 42339                                  		; M033 - end
 42340                                  epp_1:
 42341 000073E2 89CF                    	mov	di,cx
 42342 000073E4 8EC0                    	mov	es,ax
 42343 000073E6 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in
 42344                                  					; unpack_offset
 42345                                  
 42346 000073EB 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 42347                                  	;ljne	ep_notpacked
 42348 000073F0 7403                    	je	short epp_2
 42349 000073F2 E9A200                  	jmp	ep_notpacked
 42350                                  epp_2:
 42351 000073F5 0E                      	push	cs
 42352 000073F6 1F                      	pop	ds			; set ds to cs
 42353                                  
 42354                                  	;add	di,6Ch
 42355 000073F7 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed
 42356                                  					;          file where we hope to find
 42357                                  					;	   scan string. 
 42358                                  
 42359 000073FA E8A200                  	call	chk_common_str		; check for match
 42360                                  
 42361 000073FD 7521                    	jnz	short ep_chkpatch2	; Q: does the patch match
 42362                                  					; N: check at patch2_offset
 42363                                  					; Y: check for rest of patch string
 42364 000073FF BE[DF72]                	mov	si,scan_patch1
 42365                                  					; ds:si -> scan string 
 42366 00007402 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 42367                                  
 42368                                  	;add	di,28h
 42369                                  	; 07/12/2022
 42370 00007407 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed
 42371                                  					;          file where we hope to find
 42372                                  					;	   scan string. 
 42373                                  	;;mov	cx,68
 42374                                  	;mov	cx,size_scan_patch1
 42375                                  	; 21/03/2024
 42376 0000740A B144                    	mov	cl,size_scan_patch1 ; 68
 42377                                  
 42378                                  	;mov	bx,142
 42379 0000740C BB8E00                  	mov	bx,CHKSUM1_LEN
 42380                                  	;mov	ax,0EF4Eh
 42381 0000740F B84EEF                  	mov	ax,PATCH1_CHKSUM
 42382 00007412 E89E00                  	call	chk_patchsum		; check if patch and chk sum compare
 42383 00007415 7207                    	jc	short ep_done1		; Q: did we pass the test
 42384                                  					; N: exit
 42385                                  					; Y: overlay code with new 
 42386 00007417 BE[7972]                	mov	si,str1
 42387                                  	;;mov	cx,102
 42388                                  	;mov	cx,size_str1
 42389                                  	; 21/03/2024
 42390 0000741A B166                    	mov	cl,size_str1 ; 102
 42391                                  
 42392 0000741C F3A4                    	rep	movsb
 42393                                  ep_done1:
 42394 0000741E EB77                    	jmp	short ep_done ; 21/03/2024
 42395                                  
 42396                                  ep_chkpatch2:
 42397                                  	;mov	di,76h
 42398 00007420 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 42399                                  					; in another version of unpack
 42400 00007423 E87900                  	call	chk_common_str		; check for match
 42401                                  
 42402 00007426 753D                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42403                                  					; N: check for patch3_offset
 42404                                  					; Y: check for rest of patch string
 42405                                  
 42406 00007428 BE[2373]                	mov	si,scan_patch2
 42407                                  					; ds:si -> scan string
 42408                                  	;mov	di,32h
 42409 0000742B BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed
 42410                                  					;          file where we hope to find
 42411                                  	;;mov	cx,68			;	   scan string.
 42412                                  	;mov	cx,size_scan_patch2
 42413                                  	; 21/03/2024
 42414 0000742E B144                    	mov	cl,size_scan_patch2 ; 68
 42415                                  	;mov	bx,140
 42416 00007430 BB8C00                  	mov	bx,CHKSUM2_LEN
 42417                                  	;mov	ax,78B2h
 42418 00007433 B8B278                  	mov	ax,PATCH2_CHKSUM
 42419 00007436 E87A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42420                                  
 42421                                  					; M046 - Start
 42422                                  					; Q: did we pass the test
 42423 00007439 7310                    	jnc	short ep_patchcode2	; Y: overlay code with new
 42424                                  					; N: try with a different chksum
 42425                                  
 42426 0000743B BE[2373]                	mov	si,scan_patch2
 42427                                  					; ds:si -> scan string
 42428                                  	;;mov	cx,68
 42429                                  	;mov	cx,size_scan_patch2
 42430                                  	; 21/03/2024
 42431 0000743E B144                    	mov	cl,size_scan_patch2 ; 68
 42432                                  	;mov	bx,129
 42433 00007440 BB8100                  	mov	bx,CHKSUM2A_LEN
 42434                                  	;mov	ax,1C47h
 42435 00007443 B8471C                  	mov	ax,PATCH2A_CHKSUM
 42436 00007446 E86A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42437                                  					; Q: did we pass the test
 42438 00007449 724C                    	jc	short ep_notpacked	; N: try with a different chksum
 42439                                  					; Y: overlay code with new
 42440                                  						
 42441                                  ep_patchcode2:			       	; M046 - End
 42442 0000744B BE[7972]                	mov	si,str1
 42443                                  	;;mov	cx,3
 42444                                  	;mov	cx,first_stop
 42445                                  	; 21/03/2024
 42446 0000744E B103                    	mov	cl,first_stop ; 3
 42447 00007450 F3A4                    	rep	movsb
 42448 00007452 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42449 00007455 AB                      	stosw
 42450                                  	;add	si,2
 42451                                  	; 21/03/2024
 42452 00007456 46                      	inc	si
 42453 00007457 46                      	inc	si	
 42454                                  	;;mov	cx,20
 42455                                  	;mov	cx,second_stop
 42456                                  	; 21/03/2024
 42457 00007458 B114                    	mov	cl,second_stop ; 20
 42458 0000745A F3A4                    	rep	movsb
 42459 0000745C AB                      	stosw				; put in dec ax and nop
 42460                                  	;add	si,2
 42461                                  	; 21/03/2024
 42462 0000745D 46                      	inc	si
 42463 0000745E 46                      	inc	si
 42464                                  	;;mov	cx,75
 42465                                  	;mov	cx,last_stop
 42466                                  	; 21/03/2024
 42467 0000745F B14B                    	mov	cl,last_stop ; 75
 42468 00007461 F3A4                    	rep	movsb
 42469 00007463 EB32                    	jmp	short ep_done
 42470                                  
 42471                                  ep_chkpatch3:
 42472                                  	;mov	di,74h
 42473 00007465 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42474                                  					; in another version of unpack
 42475 00007468 E83400                  	call	chk_common_str		; check for match
 42476                                  
 42477 0000746B 752A                    	jnz	short ep_notpacked	; Q: does the patch match
 42478                                  					; N: exit
 42479                                  					; Y: check for rest of patch string
 42480 0000746D BE[6773]                	mov	si,scan_patch3
 42481                                  					; ds:si -> scan string
 42482                                  	;mov	di,32h
 42483 00007470 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed
 42484                                  					;          file where we hope to find
 42485                                  					;	   scan string. 
 42486                                  	;;mov	cx,66
 42487                                  	;mov	cx,size_scan_patch3
 42488                                  	; 21/03/2024
 42489 00007473 B142                    	mov	cl,size_scan_patch3 ; 66
 42490                                  	;mov	bx,139
 42491 00007475 BB8B00                  	mov	bx,CHKSUM3_LEN
 42492                                  	;mov	ax,4EDEh
 42493 00007478 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42494 0000747B E83500                  	call	chk_patchsum		; check if patch and chk sum compare
 42495 0000747E 7217                    	jc	short ep_notpacked	; Q: did we pass the test
 42496                                  					; N: exit
 42497                                  					; Y: overlay code with new
 42498 00007480 BE[7972]                	mov	si,str1
 42499                                  	;;mov	cx,3
 42500                                  	;mov	cx,first_stop
 42501                                  	; 21/03/2024
 42502 00007483 B103                    	mov	cl,first_stop ; 3
 42503 00007485 F3A4                    	rep	movsb
 42504 00007487 B048                    	mov	al,48h			; al = opcode for dec ax
 42505 00007489 AA                      	stosb
 42506                                  	;add	si,2
 42507                                  	; 21/03/2024
 42508 0000748A 46                      	inc	si
 42509 0000748B 46                      	inc	si
 42510                                  	;;mov	cx,20
 42511                                  	;mov	cx,second_stop
 42512                                  	; 21/03/2024
 42513 0000748C B114                    	mov	cl,second_stop ; 20
 42514 0000748E F3A4                    	rep	movsb
 42515 00007490 AA                      	stosb				; put in dec ax
 42516                                  	;add	si,2
 42517                                  	; 21/03/2024
 42518 00007491 46                      	inc	si
 42519 00007492 46                      	inc	si
 42520                                  	;;mov	cx,75
 42521                                  	;mov	cx,last_stop
 42522                                  	; 21/03/2024
 42523 00007493 B14B                    	mov	cl,last_stop ; 75
 42524 00007495 F3A4                    	rep	movsb
 42525                                  
 42526                                  ep_notpacked:
 42527                                  	;stc
 42528                                  ep_done:
 42529 00007497 5F                      	pop	di
 42530 00007498 5E                      	pop	si
 42531 00007499 59                      	pop	cx
 42532 0000749A 58                      	pop	ax
 42533 0000749B 07                      	pop	es
 42534 0000749C 1F                      	pop	ds
 42535 0000749D 5B                      	pop	bx
 42536 0000749E C3                      	retn
 42537                                  
 42538                                  ;-------------------------------------------------------------------------
 42539                                  ;
 42540                                  ; 	Procedure Name	: chk_common_str
 42541                                  ;
 42542                                  ;	Input		: DS = DOSCODE
 42543                                  ;			; ES:DI points to string in packed file
 42544                                  ;
 42545                                  ;	Output		; Z if match else NZ
 42546                                  ;
 42547                                  ;-------------------------------------------------------------------------
 42548                                  
 42549                                  	; 23/05/2019 - Retro DOS v4.0
 42550                                  chk_common_str:
 42551 0000749F BE[A973]                	mov	si,scan_com
 42552                                  					; ds:si -> scan string
 42553                                  	;mov	cx,32
 42554 000074A2 B92000                  	mov	cx,size_scan_com
 42555                                  
 42556 000074A5 F3A6                    	repe	cmpsb
 42557                                  
 42558                                  					; M046 - start
 42559                                  	; a fourth possible version of these exepacked programs have a
 42560                                  	; 056h instead of 06Bh. See scan_com above
 42561                                  	;
 42562                                  	; 	db  75h, 6Bh		;jne CorruptExe
 42563                                  	;
 42564                                  	; If the mismatch at this point is due to a 56h instead of 6Bh
 42565                                  	; we shall try to match the rest of the string
 42566                                  	;
 42567                                  
 42568 000074A7 7409                    	jz	short ccs_done
 42569 000074A9 26807DFF56              	cmp	byte [es:di-1],56h
 42570 000074AE 7502                    	jnz	short ccs_done
 42571                                  
 42572 000074B0 F3A6                    	repe	cmpsb
 42573                                  ccs_done:				; M046 - end
 42574 000074B2 C3                      	retn
 42575                                  
 42576                                  ;-------------------------------------------------------------------------
 42577                                  ;
 42578                                  ;	Procedure Name	: chk_patchsum
 42579                                  ;
 42580                                  ;	Input		: DS:SI -> string we're looking for
 42581                                  ;			: ES:DI -> offset in packed file
 42582                                  ;			: CX 	= scan length
 42583                                  ;			: BX	= length of check sum
 42584                                  ;			: AX 	= value of check sum
 42585                                  ;
 42586                                  ;	Output		: if patch & check sum compare
 42587                                  ;				NC
 42588                                  ;			  else
 42589                                  ;				CY
 42590                                  ;
 42591                                  ;	Uses		: AX, BX, CX, SI
 42592                                  ;
 42593                                  ;-------------------------------------------------------------------------
 42594                                  
 42595                                  	; 23/05/2019 - Retro DOS v4.0
 42596                                  chk_patchsum:
 42597 000074B3 57                      	push	di
 42598                                  
 42599 000074B4 F3A6                    	repe	cmpsb
 42600                                  
 42601 000074B6 7518                    	jnz	short cp_fail		; Q: does the patch match
 42602                                  					; N: exit
 42603                                  					; Y:
 42604                                  
 42605                                  		; we do a check sum starting from the location of the
 42606                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42607                                  		; unpacking code.
 42608                                  
 42609 000074B8 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42610 000074BD 89D9                    	mov	cx,bx			; cx = length of check sum
 42611                                  
 42612 000074BF 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42613 000074C1 31C0                    	xor	ax,ax
 42614                                  ep_chksum:
 42615 000074C3 260305                  	add	ax,[es:di]
 42616 000074C6 83C702                  	add	di,2
 42617 000074C9 E2F8                    	loop	ep_chksum
 42618                                  
 42619 000074CB 5F                      	pop	di			; restore di
 42620                                  
 42621 000074CC 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42622                                  	;jne	short cp_fail		; N: exit
 42623                                  					; Y:
 42624                                  	; 25/09/2023
 42625                                  	;clc	
 42626                                  	;retn
 42627 000074CE 74E2                    	je	short ccs_done ; cf=0
 42628                                  	
 42629                                  cp_fail:
 42630 000074D0 F9                      	stc
 42631 000074D1 C3                      	retn
 42632                                  
 42633                                  ; 28/12/2022 - Retro DOS v4.1
 42634                                  %if 0
 42635                                  ;--------------------------------------------------------------------------- 
 42636                                  
 42637                                  
 42638                                  ; M020 : BEGIN
 42639                                  ;
 42640                                  ;---------------------------------------------------------------------------
 42641                                  ;
 42642                                  ; procedure : RationalPatch
 42643                                  ;
 42644                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42645                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42646                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42647                                  ;
 42648                                  ; THE BUG is in the following code sequence:
 42649                                  ;
 42650                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42651                                  ;90		even				; word align
 42652                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42653                                  ;e8 xx xx	call	set_A20			; enable A20
 42654                                  ;
 42655                                  ; This patch routine replaces the mov & the loop with a far call into a
 42656                                  ; routine in DOS data segment which is in low memory (because A20 line
 42657                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42658                                  ; a mov & loop.
 42659                                  ;
 42660                                  ; Identification of Buggy Rational EXE
 42661                                  ; ====================================
 42662                                  ;
 42663                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42664                                  ;
 42665                                  ; OFFSET				Contains
 42666                                  ; ------				--------
 42667                                  ; 0000h			100 times Version number in binary
 42668                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42669                                  ;
 42670                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42671                                  ;
 42672                                  ; 002ah			offset where version number is stored in ASCII
 42673                                  ;				e.g. '3.48A'
 42674                                  ;
 42675                                  ; 0030h			offset of copyright string. Copyright strings either
 42676                                  ;			start with "DOS/16M Copyright...." or
 42677                                  ;			"Copyright.....". The string contains
 42678                                  ;			"Rational Systems, Inc."
 42679                                  ;
 42680                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42681                                  ;				from the program image
 42682                                  ; 0016h			word : size of buggy code segment
 42683                                  ;
 42684                                  ;	Buggy code is definite to start after offset 200h in its segment
 42685                                  ;
 42686                                  ;----------------------------------------------------------------------------
 42687                                  
 42688                                  ; 23/05/2019 - Retro DOS v4.0
 42689                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42690                                  
 42691                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42692                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42693                                  
 42694                                  RScanPattern1:
 42695                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42696                                  
 42697                                  RLen1 equ $ - RScanPattern1
 42698                                  
 42699                                  RScanPattern2:
 42700                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42701                                  
 42702                                  RLen2 equ $ - RScanPattern2
 42703                                  
 42704                                  RScanPattern3:
 42705                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42706                                  
 42707                                  RLen3 equ $ - RScanPattern2
 42708                                  
 42709                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42710                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42711                                  
 42712                                  ;----------------------------------------------------------------------------
 42713                                  ;
 42714                                  ; INPUT : ES = segment where program got loaded
 42715                                  ;
 42716                                  ;----------------------------------------------------------------------------
 42717                                  
 42718                                  RationalPatch:
 42719                                  	cld
 42720                                  
 42721                                  ; 21/03/2024
 42722                                  %if 0
 42723                                  	push	ax
 42724                                  	push	bx
 42725                                  	push	cx
 42726                                  	push	dx
 42727                                  	push	si
 42728                                  	push	di
 42729                                  %else
 42730                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42731                                  	;;;
 42732                                  	pusha
 42733                                  	;;;
 42734                                  %endif
 42735                                  	push	es
 42736                                  	push	ds			; we use all of them
 42737                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42738                                  	push	cs
 42739                                  	pop	ds
 42740                                  	
 42741                                  	mov	si,RScanPattern1
 42742                                  	;mov	cx,10
 42743                                  	mov	cx,RLen1
 42744                                  	rep	cmpsb			; do we have the pattern ?
 42745                                  	jne	short rpexit
 42746                                  	mov	ax,[es:0]
 42747                                  	cmp	ax,348			; is it a buggy version ?
 42748                                  	jb	short rpexit
 42749                                  	cmp	ax,383			; is it a buggy version ?
 42750                                  	ja	short rpexit
 42751                                  
 42752                                  	call	VerifyVersion
 42753                                  	jne	short rpexit
 42754                                  
 42755                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42756                                  	sub	cx,200h			; Length we search (we start
 42757                                  					;  at offset 200h)
 42758                                  	mov	es,[es:20h]		; es=buggy code segment
 42759                                  	mov	si,RScanPattern2
 42760                                  	;mov	dx,8	
 42761                                  	mov	dx,RLen2
 42762                                  	call	ScanCodeSeq		; look for code seq with nop
 42763                                  	jz	short rpfound
 42764                                  
 42765                                  	mov	si,RScanPattern3
 42766                                  	;mov	dx,15
 42767                                  	mov	dx,RLen3
 42768                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42769                                  	jnz	short rpexit
 42770                                  
 42771                                  rpfound:
 42772                                  	
 42773                                  ;	we set up a far call into DOS data
 42774                                  ;	dx has the length of the code seq we were searching for
 42775                                  
 42776                                  	mov	al,9Ah			; far call opcode
 42777                                  	stosb
 42778                                  	mov	ax,RatBugCode
 42779                                  	stosw
 42780                                  	mov	ax,ss
 42781                                  	stosw
 42782                                  	mov	cx,dx
 42783                                  	sub	cx,6			; filler (with NOPs)
 42784                                  	mov	al,90h
 42785                                  	rep	stosb
 42786                                  rpexit:
 42787                                  	pop	ds
 42788                                  	pop	es
 42789                                  
 42790                                  ; 21/03/2024
 42791                                  %if 0
 42792                                  	pop	di
 42793                                  	pop	si
 42794                                  	pop	dx
 42795                                  	pop	cx
 42796                                  	pop	bx
 42797                                  	pop	ax
 42798                                  %else
 42799                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42800                                  	;;;
 42801                                  	popa
 42802                                  	;;;
 42803                                  %endif
 42804                                  	retn
 42805                                  
 42806                                  ; M020 END
 42807                                  
 42808                                  ;--------------------------------------------------------------------------- 
 42809                                  %endif	; 28/12/2022
 42810                                  
 42811                                  ;---------------------------------------------------------------------------
 42812                                  ;
 42813                                  ;	M068
 42814                                  ;
 42815                                  ; 	Procedure Name	: IsCopyProt
 42816                                  ;
 42817                                  ;	Inputs		: DS:100 -> start of com file just read in
 42818                                  ;
 42819                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42820                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42821                                  ;			  copy protect scheme that relies on the A20 line
 42822                                  ;			  being turned off for it's scheme to work.
 42823                                  ;
 42824                                  ;			  Note: The int 21 function dispatcher will turn 
 42825                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42826                                  ;				and dec the A20OFF_COUNT before	iretting 
 42827                                  ;				to the user. 
 42828                                  ;
 42829                                  ;	Uses		: ES, DI, SI, CX
 42830                                  ;
 42831                                  ;---------------------------------------------------------------------------
 42832                                  
 42833                                  ; 23/05/2019 - Retro DOS v4.0
 42834                                  
 42835                                  CPStartOffset	EQU	0175h
 42836                                  CPID1Offset	EQU	011Bh
 42837                                  CPID2Offset	EQU	0173h
 42838                                  CPID3Offset	EQU	0146h
 42839                                  CPID4Offset	EQU	0124h
 42840                                  ID1		EQU	05343h
 42841                                  ID2		EQU	05044h
 42842                                  ID3		EQU	0F413h
 42843                                  ID4		EQU	08000h
 42844                                  
 42845                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42846                                  
 42847                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42848                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42849                                  
 42850                                  CPScanPattern:
 42851 000074D2 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42852 000074D6 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42853 000074DA C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42854 000074E0 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42855 000074E4 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42856 000074E7 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42857                                  
 42858                                  CPSPlen	EQU $ - CPScanPattern
 42859                                  
 42860                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42861                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42862                                  
 42863                                  IsCopyProt:
 42864 000074EA 813E1B014353            	cmp	word [CPID1Offset],ID1
 42865 000074F0 752D                    	jne	short CP_done
 42866                                  
 42867 000074F2 813E73014450            	cmp	word [CPID2Offset],ID2
 42868 000074F8 7525                    	jne	short CP_done
 42869                                  
 42870 000074FA 813E460113F4            	cmp	word [CPID3Offset],ID3
 42871 00007500 751D                    	jne	short CP_done
 42872                                  
 42873 00007502 813E24010080            	cmp	word [CPID4Offset],ID4
 42874 00007508 7515                    	jne	short CP_done
 42875                                  
 42876 0000750A 0E                      	push	cs
 42877 0000750B 07                      	pop	es
 42878 0000750C BF[D274]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42879                                  
 42880 0000750F BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42881                                  					; of pattern
 42882                                  
 42883 00007512 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42884 00007515 F3A6                    	repe	cmpsb
 42885 00007517 7506                    	jnz	short CP_done
 42886                                  
 42887 00007519 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42888                                  CP_done:
 42889 0000751F C3                      	retn
 42890                                  	
 42891                                  ;DOSCODE ENDS
 42892                                  
 42893                                  	;END
 42894                                  
 42895                                  ;----------------------------------------------------------------------------
 42896                                  
 42897                                  ;align 2 ; 05/09/2018 (Error!)
 42898                                  
 42899                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42900                                  ;align 16 ; 08/09/2018 (OK.)
 42901                                  align 2
 42902                                  
 42903                                  ; 06/08/2018 - Retro DOS v3.0
 42904                                  ;============================================================================
 42905                                  ; MSINIT.ASM
 42906                                  ;============================================================================
 42907                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42908                                  ;
 42909                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42910                                  ;
 42911                                  	; 15/07/2018 - Retro DOS v3.0
 42912                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42913                                  
 42914                                  ; temp iret instruction
 42915                                  
 42916                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42917                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42918                                  
 42919                                  initiret: ; MSDOS 6.0
 42920                                  SYSBUF:
 42921                                  ;IRETT: ; 06/05/2019
 42922 00007520 CF                      	iret
 42923                                  
 42924                                  ; 22/04/2019 - Retro DOS v4.0
 42925                                  
 42926                                  ; pointer to the BIOS data segment that will be available just to the
 42927                                  ; initialization code
 42928                                  
 42929 00007521 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42930                                  
 42931                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42932                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42933                                  
 42934                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42935                                  
 42936                                  ParaRound:
 42937 00007523 83C00F                  	add	ax, 15
 42938 00007526 D1D8                    	rcr	ax, 1
 42939 00007528 D1E8                    	shr	ax, 1
 42940 0000752A D1E8                    	shr	ax, 1
 42941 0000752C D1E8                    	shr	ax, 1
 42942 0000752E C3                      	retn
 42943                                  
 42944                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42945                                  
 42946                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42947                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42948                                  	
 42949                                  	; 30/05/2019
 42950                                  	; 22/04/2019 - Retro DOS v4.0
 42951                                  	; 07/07/2018 - Retro DOS v3.0
 42952                                  	; Retro DOS v2.0 - 03/03/2018
 42953                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42954                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42955                                  DOSINIT:
 42956                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42957                                  	;
 42958                                  	; Far call from SYSINIT
 42959                                  	; DX = Memory size in paragraphs
 42960                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42961                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42962                                  	;
 42963                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42964                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42965                                  
 42966 0000752F FA                              CLI
 42967 00007530 FC                              CLD
 42968                                  
 42969                                  	; 03/11/2022
 42970                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42971                                  	
 42972                                  	; 17/12/2022
 42973                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42974                                  	;push	dx ; =*=		; save parameters from BIOS
 42975                                  	
 42976 00007531 56                      	push	si
 42977 00007532 1E                      	push	ds
 42978 00007533 57                      	push	di			;save di (ptr to BiosComBlock)
 42979                                  
 42980 00007534 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42981                                  
 42982                                  ; First, move the DOS data segment to its final location in low memory
 42983                                  
 42984                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42985                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h
 42986 00007536 B8[AD79]                	mov	ax,MEMSTRT		; get offset of end of init code
 42987                                  
 42988                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42989                                  	;and	ax,~15	; 0FFF0h	; boundary
 42990                                  
 42991                                  	;mov	si,ax			; si = offset of DOSDATA in current
 42992                                  					; code segment
 42993                                  
 42994                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42995 00007539 83C00F                  	add	ax,15			; round to nearest paragraph
 42996                                  	;and	ax,~15			; boundary
 42997                                  	; 12/04/2024
 42998 0000753C 24F0                    	and	al,0F0h
 42999                                  
 43000 0000753E 89C6                    	mov	si,ax			; si = offset of DOSDATA in current
 43001                                  					; code segment
 43002                                  	; 05/12/2022
 43003                                  	; 30/04/2019 - Retro DOS v4.0
 43004                                  	;xor	si,si
 43005                                  	
 43006                                  	;mov	ax,cs
 43007                                  	;mov	ds,ax			; ds = current code segment
 43008                                  					; DS:SI now points to dosdata
 43009                                  	; 22/03/2024
 43010 00007540 0E                      	push	cs
 43011 00007541 1F                      	pop	ds
 43012                                  
 43013                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 43014                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 43015                                  					;  BData segment. Cannot use
 43016                                  					;  getdseg macro here!!!
 43017                                  	; 17/12/2022
 43018 00007542 8E06[2175]              	mov	es,[InitBioDataSeg]
 43019                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43020                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 43021                                  
 43022                                  	;mov	es,[es:3]
 43023 00007546 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 43024                                  
 43025 0000754B 31FF                    	xor	di,di			; ES:DI now points to RAM data
 43026                                  
 43027                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 43028                                  	;mov	cx,4976  ; 25/05/2019
 43029                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43030                                  	;mov	cx,4962
 43031                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 43032 0000754D B9CF12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 43033 00007550 F3A4                    	rep	movsb			; move data to final location
 43034                                  	
 43035 00007552 5F                      	pop	di			; restore ptr to BiosComBlock
 43036 00007553 1F                      	pop	ds			; restore parms from BIOS
 43037 00007554 5E                      	pop	si
 43038                                  	; 17/12/2022
 43039                                  	;pop	dx ; 30/05/2019
 43040                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43041                                  	;pop	dx ; =*=
 43042                                  
 43043 00007555 06                      	push	es
 43044 00007556 1E                      	push	ds
 43045 00007557 07                      	pop	es			; es:si -> device chain
 43046 00007558 1F                      	pop	ds			; ds points to dosdata
 43047                                  
 43048                                  ;SR;
 43049                                  ;We get a ptr to the BIOS exchange data block. This has been setup right
 43050                                  ;now so that the EXEC call knows when SysInit is present to do the special
 43051                                  ;lie table handling for device drivers. This can be expanded later on to
 43052                                  ;establish a communication block from the BIOS to the DOS.
 43053                                  
 43054                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 43055                                  	;mov	[1042h],bx
 43056 00007559 893E[4010]              	mov	[BiosDataPtr],di
 43057 0000755D 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 43058                                  
 43059 00007561 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 43060                                  
 43061                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 43062                                  
 43063 00007566 2E8C1E[994F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 43064 0000756B 2E8C1E[9D4F]            	mov	[cs:LowInt24Addr+2],ds
 43065 00007570 2E8C1E[A14F]            	mov	[cs:LowInt28Addr+2],ds
 43066                                  
 43067                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 43068                                  	;mov	[584h],sp
 43069                                  	;mov	[586h],ss
 43070 00007575 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 43071 00007579 8926[8405]              	mov	[USER_SP],sp
 43072 0000757D 8C16[8605]              	mov	[USER_SS],ss
 43073                                  
 43074 00007581 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 43075 00007583 8ED0                    	mov	ss,ax
 43076                                  
 43077                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 43078                                  	;mov	sp,offset dosdata:dskstack
 43079 00007585 BC[2009]                	mov	sp,DSKSTACK
 43080                                  
 43081                                  ;M023
 43082                                  ; Init patch ptrs to default values
 43083                                  
 43084                                  ; 22/03/2024
 43085                                  %if 0
 43086                                  	;mov	word [1212h],RetExePatch
 43087                                  	;mov	word [1214h],RetExePatch
 43088                                  	;mov	word [61h],RetExePatch
 43089                                  	mov	word [FixExePatch],RetExePatch	; M023
 43090                                  	; 28/12/2022 - Retro DOS v4.1
 43091                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 43092                                  	mov	word [ChkCopyProt],RetExePatch	; M068
 43093                                  %else
 43094                                  	; 22/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43095                                  	;;;	
 43096 00007588 B8[F060]                	mov	ax,RetExePatch
 43097 0000758B A3[1212]                	mov	[FixExePatch],ax
 43098                                  	;mov	[RationalPatchPtr],ax
 43099 0000758E A3[6100]                	mov	[ChkCopyProt],ax
 43100                                  	;;;
 43101                                  %endif
 43102                                  
 43103                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43104                                  %if 0	
 43105                                  
 43106                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 43107                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 43108                                  ; running in the HMA.
 43109                                  
 43110                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 43111                                  	cmp	al,2		;   386 or later?
 43112                                  	mov	ax,Rational386Patch
 43113                                  	jae	short di_set_patch
 43114                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 43115                                  di_set_patch:
 43116                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 43117                                  
 43118                                  %endif
 43119                                  	; Set up the variable temp_dosloc to point to the dos code segment
 43120                                  
 43121 00007591 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 43122                                  
 43123                                  	; ax now holds segment of DOS code
 43124 00007593 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 43125                                  
 43126 00007596 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 43127 0000759A 8936[4800]              	mov	word [NULDEV],si
 43128                                  ;SR;
 43129                                  ; There are some locations in the Win386 instance data structures
 43130                                  ; which need to be set up with the DOS data segment. First, initialize
 43131                                  ; the segment part of the instance table pointer in the SIS.
 43132                                  
 43133                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]
 43134 0000759E 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 43135                                  
 43136                                  ; Now initialize the segment part of the pointer to the data in each
 43137                                  ; instance table entry.
 43138                                  
 43139 000075A2 56                      	push	si		; preserve pointer to device chain
 43140                                  	; 18/12/2022
 43141                                  	; cx = 0
 43142 000075A3 B107                    	mov	cl,7
 43143                                  	;mov	cx,7		; There are 7 entries in the instance table
 43144                                  				; M019
 43145                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 43146 000075A5 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 43147                                  Instance_init_loop:
 43148 000075A8 8C1C                    	mov	[si],ds		; set offset in instance entry
 43149                                  	;add	si,6
 43150 000075AA 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 43151 000075AD E2F9                    	loop	Instance_init_loop
 43152                                  
 43153                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 43154                                  
 43155                                  	; 18/12/2022
 43156 000075AF B105                    	mov	cl,5
 43157                                  	;mov	cx,5		; There are five entries in the instance table
 43158                                  
 43159                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 43160                                  	;mov	si,11EDh	; point si to segment field
 43161 000075B1 BE[ED11]                	mov	si,OldInstanceJunk+6
 43162                                  OldInstance_init_loop:
 43163 000075B4 8C1C                    	mov	[si],ds		; set offset in instance entry
 43164 000075B6 83C606                  	add	si,6		; move on to next entry
 43165 000075B9 E2F9                    	loop	OldInstance_init_loop
 43166 000075BB 5E                      	pop	si		; restore pointer to device chain
 43167                                  
 43168                                  ; End of WIN386 2.xx compatibility bullshit
 43169                                  
 43170                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43171                                  %if 0	
 43172                                     	; 30/04/2019
 43173                                  	;push	es
 43174                                  	;pop	ds
 43175                                  			; ds:si points to console device
 43176                                  
 43177                                  	; 24/04/2019 - Retro DOS v4.0
 43178                                  
 43179                                  	; 15/07/2018
 43180                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 43181                                  	; (Set INT 2Ah handler address to an 'IRET')
 43182                                  
 43183                                  	; need crit vector inited to use deviocall
 43184                                  	;push	ds			; preserve segment of device chain
 43185                                  	push	es ; 30/04/2019
 43186                                  
 43187                                  %endif
 43188                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43189 000075BC 06                      	push	es
 43190                                  	; 17/12/2022
 43191                                  	;pop	ds
 43192                                  	;push	ds
 43193                                  
 43194 000075BD 31C0                    	xor	ax,ax
 43195 000075BF 8ED8                    	mov	ds,ax			; point DS to int vector table
 43196 000075C1 B8[2075]                	mov	ax,initiret
 43197                                  	;mov	[0A8h],ax  ; [2Ah*4]
 43198 000075C4 A3A800                  	mov	[addr_int_ibm],ax
 43199 000075C7 8CC8                    	mov	ax,cs
 43200                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2]
 43201 000075C9 A3AA00                  	mov	[addr_int_ibm+2],ax
 43202 000075CC 1F                      	pop	ds			; restore segment of device chain
 43203                                  
 43204 000075CD E81A02                  	call	CHARINIT  		; initialize console driver
 43205 000075D0 56                      	push	si			; save pointer to header
 43206                                  
 43207 000075D1 16                      	push	ss			; move pointer to dos data...
 43208 000075D2 07                      	pop	es			; ...into ES
 43209                                  
 43210                                  	;initialize sft for file 0 (CON)
 43211                                  
 43212                                          ; 07/07/2018 - Retro DOS v3.0
 43213                                  	; 24/04/2019 - Retro DOS v4.0
 43214                                  	;mov	di,SFTABL+6 
 43215 000075D3 BF[D200]                	MOV	DI,SFTABL+SFT.SFTable	; Point to sft 0
 43216 000075D6 B80300                  	MOV	AX,3
 43217 000075D9 AB                      	STOSW           	; Refcount
 43218                                          ;DEC	AL
 43219                                  	; 22/03/2024
 43220 000075DA 48                      	dec	ax
 43221 000075DB AB                      	STOSW			; Access rd/wr, compatibility
 43222 000075DC 30C0                    	XOR	AL,AL
 43223 000075DE AA                      	STOSB           	; attribute
 43224                                  	;mov	al,0C3h
 43225 000075DF B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 43226 000075E1 AB                      	STOSW			; flags
 43227 000075E2 89F0                    	mov	ax,si
 43228 000075E4 AB                      	stosw			; device pointer in devptr
 43229 000075E5 8CD8                    	mov	ax,ds
 43230 000075E7 AB                      	stosw
 43231 000075E8 31C0                    	xor	ax,ax	; 0
 43232 000075EA AB                      	stosw			; firclus
 43233 000075EB AB                      	stosw			; time
 43234 000075EC AB                      	stosw			; date
 43235 000075ED 48                      	dec	ax	; -1
 43236 000075EE AB                      	stosw			; size
 43237 000075EF AB                      	stosw
 43238 000075F0 40                      	inc	ax	; 0
 43239 000075F1 AB                      	stosw			; position
 43240 000075F2 AB                      	stosw
 43241                                  	;add	di,7
 43242 000075F3 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 43243                                  				; point at name
 43244                                  	;add	si,10
 43245 000075F6 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 43246                                  				; point to name
 43247 000075F9 B90400                  	mov	cx,4
 43248 000075FC F3A5                    	rep	movsw		; name
 43249 000075FE B103                    	mov	cl,3
 43250 00007600 B020                    	mov	al," "
 43251 00007602 F3AA                    	rep	stosb		; extension
 43252                                  
 43253 00007604 5E                      	pop	si		; get back pointer to header
 43254                                  
 43255                                  				; mark device as CON I/O
 43256                                  	; 15/07/2018
 43257                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 43258 00007605 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 43259                                  	; 12/03/2018
 43260                                  	;mov	[ss:32h],si
 43261 00007609 368936[3200]            	MOV     [SS:BCON],SI
 43262                                  	;mov	[ss:34h],ds
 43263 0000760E 368C1E[3400]                    MOV     [SS:BCON+2],DS
 43264                                  
 43265                                  	; initialize each device until the clock device is found
 43266                                  
 43267                                  CHAR_INIT_LOOP:
 43268 00007613 C534                            LDS     SI,[SI]			; AUX device
 43269 00007615 E8D201                  	call	CHARINIT 
 43270                                         	;15/07/2018
 43271                                  	;test	byte [SI+4],8
 43272 00007618 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 43273 0000761C 74F5                            JZ      SHORT CHAR_INIT_LOOP
 43274                                  	; 12/03/2018
 43275                                  	;mov	[ss:2Eh],si
 43276 0000761E 368936[2E00]                    MOV     [SS:BCLOCK],SI
 43277                                  	;mov	[ss:30h],ds
 43278 00007623 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 43279                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 43280                                  
 43281                                  	;mov	bp,4970			; bp = pointer to free mem
 43282                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 43283                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 43284                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 43285 00007628 BDCF12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 43286                                  
 43287 0000762B 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 43288 00007630 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 43289                                  PERDRV:
 43290                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 43291 00007635 C534                            LDS	SI,[SI]			; Next device
 43292 00007637 83FEFF                          CMP	SI,-1	; 0FFFFh
 43293 0000763A 7479                    	JZ	SHORT CONTINIT
 43294                                  
 43295 0000763C E8AB01                          call	CHARINIT
 43296                                  
 43297                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 43298                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 43299                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 43300                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 43301                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 43302                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 43303                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 43304                                  
 43305                                          ; 15/07/2018
 43306                                  	;test	word [SI+4],8000h		; DEVTYP
 43307                                          ; 17/12/2022
 43308                                  	;test	byte [SI+5],80h
 43309 0000763F F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 43310                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 43311 00007643 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 43312                                  
 43313 00007645 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 43314 0000764A 30ED                    	XOR     CH,CH
 43315                                          ; 07/07/2018
 43316                                  	;MOV	[SI+10],CL		; Number of units in name field
 43317 0000764C 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname
 43318 0000764F 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 43319 00007654 30F6                    	XOR     DH,DH
 43320 00007656 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 43321 0000765B 1E                      	PUSH    DS
 43322 0000765C 56                              PUSH    SI
 43323 0000765D 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 43324                                  
 43325                                  PERUNIT:
 43326 00007662 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 43327 00007664 43                              INC     BX
 43328 00007665 43                              INC     BX                      ; On to next BPB
 43329                                  	; 15/12/2022
 43330                                  	; 07/07/2018
 43331                                          ;mov	[ES:BP+DPB.DRIVE],DL
 43332 00007666 26885600                	MOV     [ES:BP],DL
 43333                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43334                                  	;;mov	[ES:BP+0],DL
 43335                                  	;mov	[ES:BP+DPB.DRIVE],DL
 43336                                  
 43337                                  	;MOV	[ES:BP+1],DH
 43338 0000766A 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 43339 0000766E 53                              PUSH    BX
 43340 0000766F 51                              PUSH    CX
 43341 00007670 52                              PUSH    DX
 43342                                  
 43343                                          ;invoke	$SETDPB
 43344 00007671 E84199                          CALL	_$SETDPB		; build DPB!
 43345                                  
 43346                                  	; 07/07/2018
 43347                                  	;MOV	AX,[ES:BP+2]
 43348 00007674 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 43349                                          ; 12/03/2018
 43350 00007678 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 43351 0000767D 7604                    	JBE     SHORT NOTMAX		; N:
 43352 0000767F 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 43353                                  NOTMAX:					
 43354                                  	; set the next dpb field in the currently built bpb
 43355                                  	; and mark as never accessed
 43356                                          
 43357                                  	; 24/04/2019
 43358 00007683 89E8                    	mov	ax,bp			; get pointer to DPB
 43359                                  	;add	ax,33
 43360 00007685 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 43361                                  					; set seg & offset of next DPB
 43362                                  	;mov	[es:bp+25],ax
 43363 00007688 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 43364                                  	;mov	[es:bp+27],es
 43365 0000768C 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 43366                                  					; mark as never accessed
 43367                                  	;mov	byte [es:bp+24],0FFh
 43368 00007690 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 43369                                  
 43370 00007695 5A                      	POP     DX
 43371 00007696 59                              POP     CX
 43372 00007697 5B                              POP     BX
 43373 00007698 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 43374 0000769A 5E                              POP     SI
 43375 0000769B 1F                              POP     DS
 43376                                  					; ds:si -> device header
 43377                                  					; store it in the corresponding dpb
 43378                                  	; 07/07/2018
 43379                                  	;MOV	[ES:BP+19],SI ; 24/04/2019
 43380 0000769C 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 43381                                  	;MOV	[ES:BP+21],DS ; 24/04/2019
 43382 000076A0 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43383                                  
 43384 000076A4 1E                      	PUSH	DS			; save pointer to device header
 43385 000076A5 56                      	PUSH	SI
 43386 000076A6 FEC6                    	INC	DH			; inc unit #
 43387 000076A8 FEC2                    	INC	DL			; inc drive #
 43388 000076AA 8ED8                    	MOV	DS,AX			; restore segment of BPB array
 43389                                  	;add	bp,33 ; 24/04/2019
 43390 000076AC 83C521                  	ADD	BP,DPBSIZ		; advance pointer to next dpb
 43391 000076AF E2B1                    	LOOP	PERUNIT			; process all units in each driver
 43392                                  
 43393 000076B1 5E                      	POP     SI			; restore pointer to device header
 43394 000076B2 1F                      	POP     DS
 43395 000076B3 EB80                    	JMP	PERDRV			; process all drivers in chain
 43396                                  
 43397                                  CONTINIT:
 43398                                  	; 24/04/2019
 43399                                  	;sub	bp,33			; set link in last DPB to -1
 43400 000076B5 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43401                                  					; set last link offset & segment
 43402                                  ; 23/03/2024 - Retro DOS v4.1
 43403                                  %if 0
 43404                                  	;mov	word [bp+25],0FFFFh
 43405                                  	mov	word [bp+DPB.NEXT_DPB],-1
 43406                                  	;mov	word [bp+27],0FFFFh
 43407                                  	mov	word [bp+DPB.NEXT_DPB+2],-1
 43408                                  %else
 43409                                  	; 23/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43410                                  	;;;
 43411 000076B8 B8FFFF                  	mov	ax,0FFFFh ; -1
 43412                                  	;mov	word [bp+25],ax
 43413 000076BB 894619                  	mov	word [bp+DPB.NEXT_DPB],ax ; -1
 43414                                  	;mov	word [bp+27],ax
 43415 000076BE 89461B                  	mov	word [bp+DPB.NEXT_DPB+2],ax ; -1
 43416                                  	;;;
 43417                                  %endif
 43418                                  	;add	bp,33
 43419 000076C1 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43420                                  					; the DPB chain is done.
 43421 000076C4 16                      	push	ss
 43422 000076C5 1F                      	pop	ds
 43423                                  
 43424 000076C6 89E8                    	mov	ax,bp
 43425 000076C8 E858FE                  	call	ParaRound		; round up to segment
 43426                                  
 43427 000076CB 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43428 000076CD 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43429                                  
 43430 000076CF BB0F00                  	mov	bx,0Fh
 43431                                  	
 43432                                  	; 24/05/2019
 43433                                  	;mov	cx,[ENDMEM]
 43434                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43435                                  	; 17/12/2022
 43436                                  	;mov	cx,[ENDMEM]
 43437                                  					; set seg inpacketto dosdata
 43438 000076D2 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds
 43439                                  
 43440                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43441                                  ; Also patch in the segment of the pointers in the dosdata area.
 43442                                  ;
 43443                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43444                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43445                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43446                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43447                                  
 43448 000076D6 52                      	push	dx			; preserve first free segment
 43449                                  
 43450 000076D7 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43451 000076DA 8EC0                    	mov	es,ax			; es = segment of DOS
 43452 000076DC C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43453                                  
 43454 000076E2 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43455 000076E5 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 43456                                  					; other tables with seg in ES.
 43457                                  	; 17/12/2022
 43458                                  	; cx = 0
 43459 000076E8 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43460                                  
 43461 000076EC 5A                      	pop	dx			; restore first free segment
 43462                                  
 43463                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43464                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43465                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43466                                  ; low_mem_stub by seg_reinit.
 43467                                  
 43468                                  	;xor	ax,ax ; 0
 43469                                  	;mov	ds,ax
 43470                                  	;mov	es,ax
 43471                                  	; 17/12/2022
 43472                                  	; cx = 0
 43473                                  	;xor	cx,cx ; 0
 43474 000076ED 8ED9                    	mov	ds,cx
 43475 000076EF 8EC1                    	mov	es,cx
 43476                                  
 43477                                  	; set the segment of int 24 vector that was
 43478                                  	; left out by patch_vec_segments above.
 43479                                  
 43480                                  	; 17/12/2022
 43481                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43482                                  ;%if 0
 43483                                  	; 24/05/2019
 43484                                  	;;mov	di,90h
 43485                                  	;;mov	di,4*int_fatal_abort
 43486                                  	;mov	di,addr_int_fatal_abort
 43487 000076F1 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43488                                  
 43489 000076F4 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43490                                  	;mov	[di+2],ax  ; int 24h segment
 43491 000076F8 8905                    	mov	[di],ax ; 24/05/2019
 43492                                  
 43493                                  	;;mov	di,82h
 43494                                  	;mov	di,INTBASE+2
 43495                                  
 43496                                  ;%endif
 43497                                  	; 17/12/2022
 43498                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43499                                  	;;mov	di,90h
 43500                                  	;;mov	di,4*int_fatal_abort
 43501                                  	;mov	di,addr_int_fatal_abort
 43502                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43503                                  	;mov	[di+2],ax  ; int 24h segment
 43504                                  	;;mov	di,82h
 43505                                  	;mov	di,INTBASE+2
 43506                                  
 43507                                  	; set default divide trap offset
 43508                                  
 43509                                  	;mov	word ptr ds:[0],offset doscode:divov
 43510 000076FA C7060000[7051]          	mov	word [0],DIVOV
 43511                                  
 43512                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43513                                  
 43514                                  	;mov	di,80h
 43515 00007700 BF8000                  	mov	di,INTBASE
 43516                                  	;mov	ax,offset doscode:irett
 43517 00007703 B8[E102]                	mov	ax,IRETT
 43518                                  
 43519                                  	; 17/12/2022
 43520                                  	; cx = 0
 43521 00007706 B109                    	mov	cl,9
 43522                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43523                                  					;   sets offsets for ints 20h-28h
 43524                                  iset1:
 43525 00007708 AB                      	stosw
 43526                                  	;add	di,2
 43527                                  	; 20/06/2023
 43528 00007709 47                      	inc	di
 43529 0000770A 47                      	inc	di
 43530 0000770B E2FB                    	loop	iset1
 43531                                  
 43532 0000770D 83C704                  	add	di,4			; skip vector 29h
 43533                                  
 43534                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43535                                  ;					;   sets offsets for ints 2ah-2fh
 43536                                  ;iset2:
 43537                                  ;	stosw
 43538                                  ;	add	di,2
 43539                                  ;	loop	iset2
 43540                                  
 43541                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43542                                  ; patch_vec_segments above. So skip it.
 43543                                  
 43544                                  ;	add	di,8			; skip vector 30h & 31h 
 43545                                  
 43546                                  	;;;
 43547                                  	; 06/05/2019 - Retro DOS v4.0
 43548                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43549                                  	; 17/12/2022
 43550 00007710 B105                    	mov	cl,5 ; 28/06/2019
 43551                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43552                                  	;mov	cx,6
 43553                                  iset2:
 43554 00007712 AB                      	stosw
 43555                                  	;add	di,2
 43556                                  	; 20/09/2023
 43557 00007713 47                      	inc	di
 43558 00007714 47                      	inc	di
 43559 00007715 E2FB                    	loop	iset2
 43560                                  
 43561                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43562                                  	; 17/12/2022
 43563 00007717 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43564                                  	;add	di,8
 43565                                  	;;;
 43566                                  
 43567                                  	; 17/12/2022
 43568 0000771A B10E                    	mov	cl,14
 43569                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43570                                  					;   sets offsets for ints 32h-3fh
 43571                                  iset3:
 43572 0000771C AB                      	stosw
 43573                                  	;add	di,2
 43574                                  	; 20/09/2023
 43575 0000771D 47                      	inc	di
 43576 0000771E 47                      	inc	di
 43577 0000771F E2FB                    	loop	iset3
 43578                                  
 43579                                  ;if installed
 43580                                  	; set the offset of int2f handler
 43581                                  	;mov	word [0BCh],INT2F
 43582 00007721 C706BC00[0107]          	mov	word [02Fh*4],INT2F
 43583                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43584 00007727 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43585                                  	;mov	[0BEh],ax
 43586 0000772B A3BE00                  	mov	[(02Fh*4)+2],ax
 43587                                  ;endif
 43588                                  	; set up entry point call at vectors 30-31h. Note the segment of the
 43589                                  	; long jump will be patched in by seg_reinit
 43590                                  
 43591                                  	;mov	byte [C0h],0EAh
 43592 0000772E C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43593                                  	;mov	byte [C1h],CALL_ENTRY
 43594 00007733 C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43595                                  
 43596 00007739 C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43597 0000773F C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43598 00007745 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43599 0000774B 89168A00                	mov	word [addr_int_terminate+2],dx
 43600 0000774F C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43601 00007755 C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43602 0000775B C7069C00[9360]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43603                                  
 43604 00007761 16                      	push	ss
 43605 00007762 1F                      	pop	ds
 43606                                  	
 43607                                  	; 24/05/2019
 43608                                  	;push	ss
 43609                                  	;pop	es
 43610                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43611                                  	; 17/12/2022
 43612                                  	;push	ss
 43613                                  	;pop	es
 43614                                  
 43615 00007763 52                      	push	dx			; remember address of arena
 43616                                  
 43617 00007764 42                      	inc	dx			; leave room for arena header
 43618                                  	;mov	[330h],dx
 43619 00007765 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43620                                  
 43621 00007769 31FF                    	xor	di,di			; point es:di at end of memory
 43622 0000776B 8EC2                    	mov	es,dx			; ...where psp will be
 43623 0000776D 31C0                    	xor	ax,ax
 43624                                  	;mov	cx,80h			; psp is 128 words
 43625                                  	; 17/12/2022
 43626 0000776F B180                    	mov	cl,128 ; 28/06/2019
 43627                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43628                                  	;mov	cx,128
 43629                                  
 43630 00007771 F3AB                    	rep	stosw			; zero out psp area
 43631 00007773 A1[4603]                        mov     ax,[ENDMEM]
 43632                                  	
 43633                                  	; 17/12/2022
 43634                                  	; cx = 0
 43635 00007776 E88A99                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43636                                  
 43637                                  	; ds, es now point to PSP
 43638                                  
 43639 00007779 16                      	push	ss
 43640 0000777A 1F                      	pop	ds
 43641                                  
 43642                                  	;mov	di,24
 43643 0000777B BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43644 0000777E 31C0                    	xor	ax,ax
 43645 00007780 AB                      	stosw
 43646 00007781 AA                      	stosb				; 0,1 and 2 are con device
 43647 00007782 B0FF                    	mov	al,0FFh
 43648                                  	;mov	cx,FILPERPROC-3 ; 17
 43649                                  	; 17/12/2022
 43650                                  	; cx = 4
 43651 00007784 B111                    	mov	cl,FILPERPROC-3 ; 17
 43652 00007786 F3AA                    	rep	stosb			; rest are unused
 43653                                  
 43654 00007788 16                      	push	ss
 43655 00007789 07                      	pop	es
 43656                                  					; must be set to print messages
 43657 0000778A 8C1E[2C00]              	mov	[SFT_ADDR+2],ds
 43658                                  
 43659                                  ; after this point the char device functions for con will work for
 43660                                  ; printing messages
 43661                                  
 43662                                  	; 24/04/2019 - Retro DOS v4.0
 43663                                  
 43664                                  ; 12/05/2019
 43665                                  ;
 43666                                  ;write_version_msg:
 43667                                  ;
 43668                                  ;	;if	(not ibm)
 43669                                  ;	;mov	si,offset doscode:header
 43670                                  ;	mov	si,HEADER
 43671                                  ;outmes:
 43672                                  ;	;lods	cs:byte ptr [si]
 43673                                  ;	cs
 43674                                  ;	lodsb
 43675                                  ;	cmp	al,"$"
 43676                                  ;	je	short outdone
 43677                                  ;	call	OUTT
 43678                                  ;	jmp	short outmes
 43679                                  ;outdone:
 43680                                  ;	push	ss			; out stomps on segments
 43681                                  ;	pop	ds
 43682                                  ;	push	ss
 43683                                  ;	pop	es
 43684                                  ;	;endif
 43685                                  
 43686                                  	; at this point es is dosdata
 43687                                  
 43688                                  	; Fill in the segment addresses of sysinitvar and country_cdpg
 43689                                  	; in sysinittable (ms_data.asm)
 43690                                  
 43691                                  	;mov	si,0D28h
 43692 0000778E BE[280D]                	mov	si,SysInitTable
 43693                                  
 43694                                  	; 17/12/2022
 43695                                  	; ds = es = ss
 43696                                  
 43697                                  	; 17/12/2022
 43698                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43699                                  ;%if 0
 43700                                  	;;mov	[es:si+6],es
 43701                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43702                                  	;;mov	[es:si+2],es
 43703                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43704                                  	
 43705 00007791 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43706 00007794 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43707                                  
 43708                                  	; buffhead -> dosdata:hashinitvar
 43709                                  
 43710                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43711 00007797 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43712                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43713                                  	;mov	si,6Dh
 43714 0000779B BE[6D00]                	mov	si,HASHINITVAR
 43715                                  	;mov	[es:BUFFHEAD],si
 43716 0000779E 8936[3800]              	mov	[BUFFHEAD],si
 43717                                  
 43718 000077A2 5A                              pop     dx                      ; restore address of arena
 43719                                  
 43720                                  	;mov	[032Ch+2],dx
 43721 000077A3 8916[2E03]                      mov     [DMAADD+2],dx
 43722                                  
 43723                                  	;mov	[es:arena_head],dx
 43724 000077A7 8916[2400]              	mov	[arena_head],dx
 43725                                  
 43726                                  ;%endif
 43727                                  
 43728                                  ; 17/12/2022
 43729                                  %if 0
 43730                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43731                                  	;;;
 43732                                  	;mov	[es:si+6],es
 43733                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43734                                  	;mov	[es:si+2],es
 43735                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43736                                  
 43737                                  	; buffhead -> dosdata:hashinitvar
 43738                                  
 43739                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43740                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43741                                  	;mov	si,6Dh
 43742                                  	mov	si,HASHINITVAR
 43743                                  	mov	[es:BUFFHEAD],si
 43744                                  
 43745                                          pop     dx                      ; restore address of arena
 43746                                  
 43747                                  	;mov	[032Ch+2],dx
 43748                                          mov     [DMAADD+2],dx
 43749                                  
 43750                                  	mov	[es:arena_head],dx
 43751                                  	;;;
 43752                                  %endif
 43753                                  
 43754 000077AB 8EDA                            mov     ds,dx
 43755                                  
 43756                                  	;mov	byte [0],'Z'
 43757 000077AD C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43758                                          ;mov	word [1],0
 43759 000077B2 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43760                                  
 43761 000077B8 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43762 000077BC 29D0                    	sub	ax,dx
 43763 000077BE 48                              dec     ax
 43764 000077BF A30300                          mov     [ARENA.SIZE],ax
 43765                                  
 43766                                  	; point to sft 0
 43767                                  
 43768                                  	;mov	di,offset dosdata:sftabl + sftable
 43769                                  	;mov	di,SFTABL+6
 43770 000077C2 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43771 000077C5 B80300                          mov     ax,3
 43772 000077C8 AB                              stosw           		; adjust refcount
 43773                                  
 43774                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43775                                  
 43776                                  	;mov	di,offset dosdata:sysinittable
 43777                                  	;mov	di,0D28h
 43778 000077C9 BF[280D]                	mov	di,SysInitTable
 43779                                  
 43780 000077CC 42                      	inc	dx			; advance dx from arena to psp
 43781 000077CD 8EDA                    	mov	ds,dx			; point ds to psp
 43782                                  
 43783                                  					; pass the address os seg_reinit
 43784                                  					; in dx
 43785 000077CF BA[3D78]                	mov	dx,seg_reinit
 43786 000077D2 B9[7972]                	mov	cx,exepatch_start
 43787 000077D5 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43788                                  
 43789 000077D9 B8[2075]                	mov	ax,SYSBUF
 43790 000077DC 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43791                                  	
 43792 000077DF 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43793 000077E4 368E16[8605]                    mov     ss,[ss:USER_SS]
 43794                                  
 43795 000077E9 CB                              retf
 43796                                  
 43797                                  ;
 43798                                  ; END OF DOSINIT
 43799                                  ;
 43800                                  ;--------------------------------------------------------------------------
 43801                                  
 43802                                  CHARINIT:
 43803                                  	; 24/04/2019 - Retro DOS v4.0
 43804                                  	; 07/07/2018 - Retro DOS v3.0
 43805                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43806 000077EA 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43807                                  	;mov	byte [ss:035Bh],0
 43808 000077F0 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43809                                  	;mov	byte [ss:035Ch],0
 43810 000077F6 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43811                                  	;mov	word [ss:035BD],0
 43812 000077FC 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43813 00007803 06                              PUSH	ES
 43814 00007804 53                              PUSH	BX
 43815 00007805 50                              PUSH	AX
 43816 00007806 BB[5A03]                        MOV	BX,DEVCALL
 43817                                          ;PUSH	CS
 43818 00007809 16                      	PUSH	SS ; 30/04/2019
 43819 0000780A 07                              POP	ES
 43820 0000780B E85ACD                          CALL	DEVIOCALL2
 43821 0000780E 58                      	POP	AX
 43822 0000780F 5B                              POP	BX
 43823 00007810 07                              POP	ES
 43824 00007811 C3                              RETN
 43825                                  
 43826                                  ; 25/04/2019 - Retro DOS v4.0
 43827                                  
 43828                                  ;-----------------------------------------------------------------------------
 43829                                  ;
 43830                                  ;	check_XMM: routine to check presence of XMM driver
 43831                                  ;
 43832                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43833                                  ;
 43834                                  ;	USED:	none
 43835                                  ;
 43836                                  ;-----------------------------------------------------------------------------
 43837                                  
 43838                                  check_XMM: ; proc near
 43839                                  ;
 43840                                  ; determine whether or not an XMM driver is installed
 43841                                  ;
 43842 00007812 50                      	push	ax
 43843                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43844 00007813 B80043                  	mov	ax,4300h
 43845 00007816 CD2F                    	int	2Fh
 43846                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43847                                  		; Return: AL = 80h XMS driver installed
 43848                                  		; AL <> 80h no driver
 43849 00007818 3C80                    	cmp	al,80h			; Q: installed
 43850 0000781A 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43851                                  ;
 43852                                  ; get the XMM control functions entry point, save it, we
 43853                                  ; need to call it later.
 43854                                  ;
 43855 0000781C 53                      	push	bx
 43856 0000781D 52                      	push	dx
 43857 0000781E 1E                      	push	ds
 43858 0000781F 06                      	push	es
 43859                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43860 00007820 B81043                  	mov	ax,4310h
 43861 00007823 CD2F                    	int	2Fh
 43862                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43863                                  		; Return: ES:BX -> driver entry point
 43864                                  
 43865 00007825 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43866                                  
 43867 0000782A 891E[6311]              	mov	[XMMcontrol],bx
 43868 0000782E 8C06[6511]              	mov	[XMMcontrol+2],es
 43869                                  cXMMexit:
 43870 00007832 F8                      	clc
 43871 00007833 07                      	pop	es
 43872 00007834 1F                      	pop	ds
 43873 00007835 5A                      	pop	dx
 43874 00007836 5B                      	pop	bx
 43875 00007837 58                      	pop	ax
 43876 00007838 C3                      	retn				; done
 43877                                  ;
 43878                                  ; set carry if XMM driver not present
 43879                                  ;
 43880                                  cXMM_no_driver:
 43881 00007839 F9                      	stc
 43882 0000783A 58                      	pop	ax
 43883 0000783B C3                      	retn
 43884                                  
 43885                                  ;-----------------------------------------------------------------------------
 43886                                  ;
 43887                                  ; Procedure Name : seg_reinit
 43888                                  ;
 43889                                  ; Inputs	 : ES has final dos code location
 43890                                  ;		   AX = 0 / 1
 43891                                  ;
 43892                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43893                                  ;		   if AX =0
 43894                                  ;		      if first entry
 43895                                  ;			 patch segment & offset of vectors with stub
 43896                                  ;			 and stub with segment in ES
 43897                                  ;		      else
 43898                                  ;			 patch stub with segment in ES
 43899                                  ;
 43900                                  ;		   else if AX = 1
 43901                                  ;			patch segment of vectors with segment in ES	
 43902                                  ;
 43903                                  ; NOTE		 : This routine can be called at most twice!
 43904                                  ;
 43905                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43906                                  ;-----------------------------------------------------------------------------
 43907                                  
 43908 0000783C 00                      num_entry: db	0		; keeps track of the # of times this routine
 43909                                  				; has been called. (0 or 1)
 43910                                  
 43911                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43912                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43913                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43914                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43915                                  
 43916                                  seg_reinit:	; proc	far
 43917 0000783D 1E                      	push	ds
 43918                                  
 43919 0000783E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43920                                  
 43921 00007843 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43922                                  					; other tables with seg in ES.
 43923                                  	; 17/12/2022
 43924                                  	; cx = 0
 43925 00007846 39C8                    	cmp	ax,cx ; 0
 43926                                  	;cmp	ax,0
 43927 00007848 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43928                                  
 43929                                  	; 17/12/2022
 43930 0000784A 2E380E[3C78]            	cmp	[cs:num_entry],cl ; 0
 43931                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43932 0000784F 7508                    	jne	short second_entry	; N: just patch the stub with 
 43933                                  					;    segment in ES
 43934                                  					; Y: patch the vectors with stub 
 43935 00007851 8CD8                    	mov	ax,ds
 43936 00007853 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43937 00007856 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43938                                  					; with those in the stub.
 43939                                  	; 17/12/2022
 43940                                  	; cx = 0
 43941                                  second_entry:
 43942 00007859 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43943                                  
 43944                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43945                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43946 0000785B BF[6210]                	mov	di,DOSINTTABLE
 43947                                  	; 17/12/2022
 43948                                  	; cx = 0
 43949                                  	;mov	cx,9
 43950 0000785E B109                    	mov	cl,9
 43951 00007860 1E                      	push	ds			
 43952 00007861 07                      	pop	es			; es:di -> DOSINTTABLE
 43953                                  
 43954                                  dosinttabloop:
 43955                                  	;add	di,2
 43956                                  	; 19/09/2023
 43957 00007862 47                      	inc	di
 43958 00007863 47                      	inc	di
 43959 00007864 AB                      	stosw
 43960 00007865 E2FB                    	loop	dosinttabloop	
 43961                                  
 43962                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43963                                  ; use the HMA, so we don't want to check CS
 43964                                  
 43965                                  ;ifndef ROMDOS
 43966 00007867 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43967 0000786A 7220                    	jb	short sr_done		; N: done
 43968                                  ;endif
 43969 0000786C E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43970 0000786F 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43971                                  					; A20 toggling in the stub.
 43972                                  	; 17/12/2022
 43973                                  	; cx = 0
 43974 00007871 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43975                                  ; M021-
 43976                                  	;mov	byte [1211h],1
 43977 00007874 C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43978                                  				
 43979                                  					; set pointer to the routine that 
 43980                                  					; patches buggy exepacked code.
 43981                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43982 00007879 C706[1212][C973]        	mov	word [FixExePatch],ExePatch
 43983                                  					; M068: set pointer to the routine 
 43984                                  					; M068: that detects copy protected
 43985                                  					; M068: apps
 43986                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43987 0000787F C706[6100][EA74]        	mov	word [ChkCopyProt],IsCopyProt
 43988                                  
 43989                                  ; 28/12/2022 - Retro DOS v4.1
 43990                                  %if 0
 43991                                  ;----------------------------------------------------------------------------
 43992                                  
 43993                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43994                                  
 43995                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43996                                  ;
 43997                                  ;; M020 - begin
 43998                                  ;
 43999                                  ;	call	WhatCPUType
 44000                                  ;	cmp	al,1
 44001                                  ;	jne	short sr_done 		; we need Rational Patch only
 44002                                  ;					;  on 286 systems
 44003                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 44004                                  ;	mov	word [RationalPatchPtr],RationalPatch
 44005                                  ;
 44006                                  ;; M020 - end
 44007                                  ;
 44008                                  ;	jmp	short sr_done
 44009                                  ;
 44010                                  ;patch_vec_seg:				; patch vectors with segment in es
 44011                                  ;	mov	ax,es
 44012                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 44013                                  ;					; NOTE we don't have to patch the 
 44014                                  ;					; offsets as they have been already
 44015                                  ;					; set to the doscode offsets at
 44016                                  ;					; DOSINIT.
 44017                                  ;sr_done:
 44018                                  ;	mov	byte [cs:num_entry],1
 44019                                  ;	pop	ds
 44020                                  ;	retf	; ! far return !
 44021                                  
 44022                                  ;----------------------------------------------------------------------------
 44023                                  ;
 44024                                  ; Procedure Name : WhatCPUType
 44025                                  ;
 44026                                  ; Inputs	 : none
 44027                                  ;
 44028                                  ; Outputs	 : AL = 0 if CPU <  286
 44029                                  ;		      = 1 if CPU == 286
 44030                                  ;		      = 2 if CPU >= 386
 44031                                  ;
 44032                                  ; Regs. Mod.	 : AX
 44033                                  ;
 44034                                  ;----------------------------------------------------------------------------
 44035                                  
 44036                                  WhatCPUType:
 44037                                  	; 25/04/2019 - Retro DOS v4.0
 44038                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 44039                                  
 44040                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 44041                                  
 44042                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 44043                                  ; 	it is called from both CODE and SYSINITSEG.
 44044                                  ;
 44045                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 44046                                  ;  Returns: AX = 0 if 8086 or 8088
 44047                                  ;              = 1 if 80286
 44048                                  ;              = 2 if 80386
 44049                                  
 44050                                  	; 04/11/2022
 44051                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 44052                                  
 44053                                  Get_CPU_Type:	;macro
 44054                                  	pushf
 44055                                  	push	bx			; preserve bx
 44056                                  	xor	bx,bx			; init bx to zero
 44057                                  
 44058                                  	xor	ax,ax			; 0000 into AX
 44059                                  	push	ax			; put it on the stack...
 44060                                  	popf				; ...then shove it into the flags
 44061                                  	pushf				; get it back out of the flags...
 44062                                  	pop	ax			; ...and into ax
 44063                                  	and	ax,0F000h		; mask off high four bits
 44064                                  	cmp	ax,0F000h		; was it all 1's?
 44065                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 44066                                  
 44067                                  	mov	ax,0F000h		; now try to set the high four bits..
 44068                                  	push	ax
 44069                                  	popf
 44070                                  	pushf
 44071                                  	pop	ax			; ...and see what happens
 44072                                  	and	ax,0F000h		; any high bits set ?
 44073                                  	jz	short cpu_286		; nay; it's an 80286
 44074                                  
 44075                                  cpu_386:				; bx starts as zero
 44076                                  	inc	bx			; inc twice if 386
 44077                                  cpu_286:				; just inc once if 286
 44078                                  	inc	bx
 44079                                  cpu_8086:				; don't inc at all if 086
 44080                                  	mov	ax,bx			; put CPU type value in ax
 44081                                  	pop	bx			; restore original bx
 44082                                  	popf
 44083                                  	
 44084                                  	;endm
 44085                                  
 44086                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 44087                                  	;retn
 44088                                  
 44089                                  	; 04/11/2022
 44090                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 44091                                  	cmp	al,1
 44092                                  	jne	short sr_done 		; we need Rational Patch only
 44093                                  					;  on 286 systems
 44094                                  	mov	word [RationalPatchPtr],RationalPatch
 44095                                  
 44096                                  ;----------------------------------------------------------------------------
 44097                                  %endif	; 28/12/2022
 44098                                  
 44099 00007885 EB05                    	jmp	short sr_done
 44100                                  
 44101                                  patch_vec_seg:				; patch vectors with segment in es
 44102 00007887 8CC0                    	mov	ax,es
 44103 00007889 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 44104                                  					; NOTE we don't have to patch the 
 44105                                  					; offsets as they have been already
 44106                                  					; set to the doscode offsets at
 44107                                  					; DOSINIT.
 44108                                  sr_done:
 44109 0000788C 2EC606[3C78]01          	mov	byte [cs:num_entry],1
 44110 00007892 1F                      	pop	ds
 44111 00007893 CB                      	retf	; ! far return !
 44112                                  
 44113                                  ;----------------------------------------------------------------------------
 44114                                  ;
 44115                                  ; Procedure Name : patch_vec_segments
 44116                                  ;
 44117                                  ; Inputs	 : ax -> has segment address to patch in
 44118                                  ;		   ds -> DOSDATA
 44119                                  ;
 44120                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 44121                                  ;			
 44122                                  ;			0,20-28,3a-3f
 44123                                  ;
 44124                                  ; Regs. Mod.	 : DI,CX,DX,AX
 44125                                  ;
 44126                                  ;----------------------------------------------------------------------------
 44127                                  
 44128                                  patch_vec_segments:
 44129                                  
 44130 00007894 06                      	push	es
 44131                                  
 44132 00007895 31C9                    	xor	cx,cx ; 0
 44133 00007897 8EC1                    	mov	es,cx
 44134                                  
 44135                                  	;mov	di,82h
 44136 00007899 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 44137                                  
 44138 0000789C 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 44139                                  
 44140                                  					; set vectors 20 & 21
 44141                                  	; 04/11/2022
 44142                                  	;mov	cx,2
 44143                                  	; 17/12/2022
 44144                                  	;mov	cl,2
 44145                                  ps_set1:
 44146 000078A0 AB                      	stosw
 44147                                  	;add	di,2
 44148                                  	; 17/12/2022
 44149 000078A1 47                      	inc	di
 44150 000078A2 47                      	inc	di
 44151                                  	;loop	ps_set1
 44152                                  
 44153                                  	; 17/12/2022
 44154 000078A3 AB                      	stosw	; int 21h segment
 44155                                  	;inc	di
 44156                                  	;inc	di
 44157                                  
 44158                                  	;add	di,4			; skip int 22h vector
 44159 000078A4 83C706                  	add	di,6 ; *
 44160                                  
 44161 000078A7 AB                      	stosw				; set int 23h
 44162 000078A8 83C706                  	add	di,6			; skip int 24h
 44163                                  
 44164                                  					; set vectors 25-28 and 2a-3f
 44165                                  	; 04/11/2022
 44166                                  	;mov	cx,4			; set 4 segments
 44167                                  	; 17/12/2022
 44168 000078AB B104                    	mov	cl,4
 44169                                  ps_set2:
 44170 000078AD AB                      	stosw
 44171                                  	;add	di,2
 44172                                  	; 17/12/2022
 44173 000078AE 47                      	inc	di
 44174 000078AF 47                      	inc	di
 44175 000078B0 E2FB                    	loop	ps_set2
 44176                                  
 44177 000078B2 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 44178                                  					;   already be set.
 44179                                  	; 04/11/2022
 44180                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 44181                                  	; 17/12/2022
 44182 000078B5 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 44183                                  ps_set3:
 44184 000078B7 AB                      	stosw
 44185                                  	;add	di,2
 44186                                  	; 17/12/2022
 44187 000078B8 47                      	inc	di
 44188 000078B9 47                      	inc	di
 44189 000078BA E2FB                    	loop	ps_set3
 44190                                  
 44191                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 44192                                  ; below. So skip it.
 44193                                  
 44194 000078BC 83C708                  	add	di,8			; skip vector 30h & 31h 
 44195                                  	
 44196                                  	; 04/11/2022
 44197                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 44198                                  	; 17/12/2022
 44199 000078BF B10E                    	mov	cl,14			;  sets segs for ints 32h-3fh
 44200                                  ps_set4:
 44201 000078C1 AB                      	stosw
 44202                                  	;add	di,2
 44203                                  	; 17/12/2022
 44204 000078C2 47                      	inc	di
 44205 000078C3 47                      	inc	di
 44206 000078C4 E2FB                    	loop	ps_set4
 44207                                  
 44208                                  ; set offset of int2f
 44209                                  
 44210                                  ;if installed
 44211                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 44212                                  ;endif
 44213                                  	;mov	[es:0C3h],ax
 44214 000078C6 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 44215                                  	; 17/12/2022
 44216                                  	; cx = 0
 44217 000078CA 07                      	pop	es
 44218 000078CB C3                      	retn
 44219                                  
 44220                                  ;---------------------------------------------------------------------------
 44221                                  ;
 44222                                  ; Procedure Name : patch_misc_segments
 44223                                  ;
 44224                                  ; Inputs	 : es = segment to patch in
 44225                                  ;		   ds = dosdata
 44226                                  ;
 44227                                  ; outputs	 : patches in the sharer and other tables in the dos
 44228                                  ;		   with right dos code segment in es
 44229                                  ;
 44230                                  ; Regs Mod	 : DI,SI,CX
 44231                                  ;
 44232                                  ;---------------------------------------------------------------------------
 44233                                  
 44234                                  patch_misc_segments:
 44235                                  
 44236 000078CC 53                      	push	bx
 44237 000078CD 06                      	push	es
 44238 000078CE 50                      	push	ax
 44239                                  
 44240 000078CF 8CC0                    	mov	ax,es			; ax - > DOS segment
 44241                                  	
 44242 000078D1 1E                      	push	ds
 44243 000078D2 07                      	pop	es			; es -> DOSDATA
 44244                                  	
 44245                                  ; initialize the jump table for the sharer...
 44246                                  
 44247                                  	;mov	di,offset dosdata:jshare
 44248                                  	;mov	di,90h
 44249 000078D3 BF[9000]                	mov	di,JShare
 44250                                  	;mov	bx,[0AAAh]
 44251 000078D6 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 44252                                  					; table was patched during the first
 44253                                  					; call to this routine
 44254 000078DA B90F00                  	mov	cx,15
 44255                                  jumptabloop:
 44256                                  	;add	di,2			; skip offset
 44257                                  	; 17/12/2022
 44258 000078DD 47                      	inc	di
 44259 000078DE 47                      	inc	di
 44260 000078DF 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 44261 000078E2 7405                    	je	short share_patch	; Y: patch in sharer table
 44262                                  					; N: 
 44263 000078E4 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 44264 000078E7 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 44265                                  share_patch:
 44266 000078E9 AB                      	stosw				; drop in segment
 44267                                  no_share_patch:
 44268 000078EA E2F1                    	loop	jumptabloop
 44269                                  					; BUGBUG patching the country info 
 44270                                  					; with dosdata can be done inline
 44271                                  					; in dosinit.
 44272                                  					; for dos 3.3 country info
 44273                                  					; table address
 44274                                  
 44275                                  	;mov	si,offset dosdata:country_cdpg
 44276                                  	;mov	si,122Ah   
 44277 000078EC BE[2A12]                	mov	si,COUNTRY_CDPG
 44278                                  					; initialize double word
 44279                                  					; pointers with dosdata in ds
 44280                                  	;mov	[si+4Fh],ds
 44281                                  	;mov	[si+54h],ds
 44282                                  	;mov	[si+59h],ds
 44283                                  	;mov	[si+5Eh],ds
 44284                                  	;mov	[si+80h],ds
 44285                                  	;mov	[si+63h],ds
 44286 000078EF 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 44287 000078F2 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 44288 000078F5 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 44289 000078F8 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 44290 000078FB 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 44291 000078FF 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 44292                                  
 44293                                  					; fastopen routines are in doscode
 44294                                  					; so patch with doscode seg in ax
 44295                                  
 44296                                  	;mov	si,offset dosdata:fastopentable
 44297                                  	;mov	si,0D30h
 44298 00007902 BE[300D]                	mov	si,FastOpenTable
 44299                                  
 44300                                  	; 17/12/2022
 44301                                  	; bx = [TEMP_DOSLOC]
 44302 00007905 83FBFF                  	cmp	bx,-1
 44303                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 44304 00007908 7405                    	je	short fast_patch	; Y: patch segment
 44305                                  	;mov	cx,[TEMP_DOSLOC]
 44306                                  					; Q: has fastopen patched in it's
 44307                                  					;    segment
 44308                                  	; 17/12/2022
 44309 0000790A 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 44310                                  	;;cmp	cx,[si+4]
 44311                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 44312 0000790D 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 44313                                  
 44314                                  fast_patch:
 44315                                  	;mov	[si+4],ax
 44316 0000790F 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 44317                                  no_fast_patch:
 44318                                  	; 17/12/2022
 44319                                  	; cx = 0
 44320 00007912 58                      	pop	ax
 44321 00007913 07                      	pop	es
 44322 00007914 5B                      	pop	bx
 44323                                  
 44324 00007915 C3                      	retn
 44325                                  
 44326                                  ;--------------------------------------------------------------------------
 44327                                  ;
 44328                                  ; Procedure Name : patch_offset
 44329                                  ; 
 44330                                  ; Inputs	 : NONE
 44331                                  ;
 44332                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 44333                                  ;		   0,20-28,3a-3f, and 30,31
 44334                                  ;
 44335                                  ;
 44336                                  ; Regs. Mod	 : AX,DI,CX
 44337                                  ;--------------------------------------------------------------------------
 44338                                  
 44339                                  patch_offset:
 44340 00007916 06                      	push	es		; preserve es
 44341                                  
 44342 00007917 31C0                    	xor	ax,ax
 44343 00007919 8EC0                    	mov	es,ax
 44344                                  				; set default divide trap address
 44345                                  	;mov	word ptr es:[0],offset dosdata:ldivov
 44346                                  	;mov	word [es:0],108Ah
 44347 0000791B 26C7060000[8A10]        	mov	word [es:0],ldivov
 44348                                  
 44349                                  	;mov	di,80h
 44350 00007922 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 44351                                  	;mov	ax,offset dosdata:lirett
 44352                                  	;mov	ax,10DAh
 44353 00007925 B8[DA10]                	mov	ax,lirett
 44354                                  				; set vectors 20 & 21 to point to iret.
 44355                                  	; 17/12/2022
 44356                                  	; cx = 0
 44357                                  
 44358                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 44359                                  po_iset1:
 44360 00007928 AB                      	stosw	; int 20h offset
 44361                                  	;add	di,2 ; *
 44362                                  	;loop	po_iset1
 44363                                  	; 17/12/2022
 44364 00007929 47                      	inc	di
 44365 0000792A 47                      	inc	di
 44366 0000792B AB                      	stosw	; int 21h offset
 44367                                  
 44368                                  	;add	di,4		; skip vector 22h
 44369                                  	; 17/12/2022
 44370 0000792C 83C706                  	add	di,6 ; *
 44371                                  
 44372 0000792F AB                      	stosw			; set offset of 23h
 44373                                  	;add	di,6		; skip 24h
 44374                                  	; 19/09/2023
 44375 00007930 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 44376                                  
 44377                                  				; set vectors 25-28 and 2a-3f to iret.
 44378                                  	; 04/11/2022
 44379                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 44380                                  	; 19/09/2023
 44381                                  	; 17/12/2022
 44382                                  	;mov	cl,4		; sets offsets for ints 25h-28h
 44383                                  po_iset2:
 44384 00007933 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 44385                                  	;add	di,2
 44386                                  	; 19/09/2023
 44387                                  	; 17/12/2022
 44388                                  	;inc	di
 44389                                  	;inc	di
 44390                                  	; 19/09/2023
 44391                                  	;loop	po_iset2
 44392                                  
 44393                                  	;add	di,4		; skip vector 29h
 44394                                  	; 19/09/2023
 44395 00007934 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44396                                  
 44397                                  	; 04/11/2022
 44398                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44399                                  	; 17/12/2022
 44400                                  	;mov	cl,6		; sets offsets for ints 2ah-2fh
 44401 00007937 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44402                                  po_iset3:
 44403 00007939 AB                      	stosw
 44404                                  	;add	di,2
 44405                                  	; 17/12/2022
 44406 0000793A 47                      	inc	di
 44407 0000793B 47                      	inc	di
 44408 0000793C E2FB                    	loop	po_iset3
 44409                                  
 44410                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44411                                  ; below. So skip it.
 44412                                  
 44413                                  	;add	di,8		; skip vector 30h & 31h
 44414                                  	; 17/12/2022
 44415 0000793E 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44416                                  
 44417                                  	; 04/11/2022
 44418                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44419                                  				;  sets offsets for ints 32h-3fh
 44420                                  	; 17/12/2022
 44421 00007941 B10E                    	mov	cl,14 ; 26/06/2019
 44422                                  po_iset4:
 44423 00007943 AB                      	stosw
 44424                                  	;add	di,2
 44425                                  	; 17/12/2022
 44426 00007944 47                      	inc	di
 44427 00007945 47                      	inc	di
 44428 00007946 E2FB                    	loop	po_iset4
 44429                                  
 44430                                  ;if installed
 44431                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44432                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44433 00007948 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 44434                                  ;endif
 44435                                  
 44436                                  ; set up entry point call at vectors 30-31h
 44437                                  	;mov	byte [es:0C0h],0EAh
 44438 0000794F 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44439                                  	;mov	word [es:0C1h],10D0h
 44440                                  
 44441 00007955 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44442                                  
 44443                                  							; 19/09/2023
 44444                                  	;mov	word [es:80h],1094h
 44445 0000795C 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44446                                  	;mov	word [es:84h],109Eh
 44447 00007963 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44448                                  	;mov	word [es:94h],10A8h
 44449 0000796A 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44450                                  	;mov	word [es:98h],10B2h
 44451 00007971 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44452                                  	;mov	word [es:9Ch],10BCh
 44453 00007978 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44454                                  
 44455                                  	; 17/12/2022
 44456                                  	; CX = 0
 44457 0000797F 07                      	pop	es		; restore es
 44458 00007980 C3                      	retn
 44459                                  
 44460                                  ;--------------------------------------------------------------------------
 44461                                  ;
 44462                                  ; 	Procedure Name	:	patch_in_nops
 44463                                  ;
 44464                                  ; 	Entry		: 	ES -> DOSDATA
 44465                                  ;
 44466                                  ;	Regs Mod	: 	cx, di
 44467                                  ;
 44468                                  ;	Description:
 44469                                  ;		This routine patches in 2 nops at the offsets specified in 
 44470                                  ;	patch_table. This basically enables the low mem stub to start 
 44471                                  ;	making XMS calls.
 44472                                  ;
 44473                                  ;--------------------------------------------------------------------------
 44474                                  
 44475                                  	; 04/11/2022
 44476                                  	; (MSDOS 5.0 MSDOS.SYS)
 44477                                  	; DOSCODE:0BC50h
 44478                                  
 44479                                  patch_table:	; label	byte
 44480                                  	;dw	offset dosdata:i0patch
 44481                                  	;dw	offset dosdata:i20patch
 44482                                  	;dw	offset dosdata:i21patch
 44483                                  	;dw	offset dosdata:i25patch
 44484                                  	;dw	offset dosdata:i26patch
 44485                                  	;dw	offset dosdata:i27patch
 44486                                  	;dw	offset dosdata:i2fpatch
 44487                                  	;dw	offset dosdata:cpmpatch
 44488 00007981 [8A10]                  	dw	i0patch
 44489 00007983 [9410]                  	dw	i20patch
 44490 00007985 [9E10]                  	dw	i21patch
 44491 00007987 [A810]                  	dw	i25patch
 44492 00007989 [B210]                  	dw	i26patch
 44493 0000798B [BC10]                  	dw	i27patch
 44494 0000798D [C610]                  	dw	i2fpatch
 44495 0000798F [D010]                  	dw	cpmpatch
 44496                                  
 44497                                  patch_table_size equ ($-patch_table)/2
 44498                                  
 44499                                  patch_in_nops:
 44500 00007991 50                      	push	ax
 44501 00007992 56                      	push	si
 44502 00007993 BE[8179]                	mov	si,patch_table
 44503 00007996 B89090                  	mov	ax,9090h ; nop, nop
 44504                                  	; 17/12/2022
 44505                                  	; cx = 0
 44506                                  	;mov	cx,8
 44507                                  	;mov	cx,patch_table_size ; 8
 44508 00007999 B108                    	mov	cl,patch_table_size ; 8
 44509                                  pin_loop:
 44510 0000799B 2E8B3C                  	mov	di,[cs:si]
 44511 0000799E AB                      	stosw
 44512                                  	;add	si,2
 44513                                  	; 17/12/2022
 44514 0000799F 46                      	inc	si
 44515 000079A0 46                      	inc	si
 44516 000079A1 E2F8                    	loop	pin_loop
 44517 000079A3 5E                      	pop	si
 44518 000079A4 58                      	pop	ax
 44519 000079A5 C3                      	retn
 44520                                  
 44521                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44522                                  ; ---------------------------------------------------------------------------
 44523                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44524                                  ; ---------------------------------------------------------------------------
 44525                                  
 44526                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 44527                                  DOSCODE_END:
 44528                                  	;times	9 db 0	; db 9 dup(0)
 44529                                  	; 18/12/2022
 44530                                  	;dw	0	; times 2 db 0
 44531                                  	; 23/03/2024 - Retro DOS v4.1
 44532 000079A6 00<rep 7h>              	times	7 db 0
 44533                                  
 44534                                  ;align 16
 44535                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44536                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44537                                  
 44538                                  ; ---------------------------------------------------------------------------
 44539                                  
 44540                                  
 44541                                  ;memstrt label word
 44542                                  ; ---------------------------------------------------------------------------
 44543                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44544                                  ; ---------------------------------------------------------------------------
 44545                                  
 44546                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44547                                  
 44548                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44549                                  ; the dos initialization segment
 44550                                  
 44551                                  ;ifndef ROMDOS
 44552                                  
 44553                                  ;doscode ends
 44554                                  
 44555                                  ;else
 44556                                  
 44557                                  ;;dosinitseg ends
 44558                                  
 44559                                  ;endif ; ROMDOS
 44560                                  
 44561                                  ;============================================================================
 44562                                  
 44563                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44564                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44565                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44566                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44567                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44568                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44569                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44570                                  
 44571                                  ;; burasý doscode sonu
 44572                                  
 44573                                  ;============================================================================
 44574                                  ; DOSDATA
 44575                                  ;============================================================================
 44576                                  ; 29/04/2019 - Retro DOS 4.0
 44577                                  
 44578                                  ;[BITS 16]
 44579                                  
 44580                                  ;[ORG 0]
 44581                                  
 44582                                  ; 25/04/2019 - Retro DOS v4.0
 44583                                  
 44584                                  ;============================================================================
 44585                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44586                                  ;============================================================================
 44587                                  
 44588                                  ;align 16
 44589                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44590                                  	; (4970 bytes for MSDOS 6.21)
 44591                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44592                                  
 44593                                  ;============================================================================
 44594                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44595                                  ;============================================================================
 44596                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44597                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44598                                  ; 16/07/2018 - Retro DOS 3.0	
 44599                                  
 44600                                  ;Break <Initialized data and data used at DOS initialization>
 44601                                  ;----------------------------------------------------------------------------
 44602                                  
 44603                                  ; We need to identify the parts of the data area that are relevant to tasks
 44604                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44605                                  ; data will be gathered with the system code. The process data under 2.x will
 44606                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44607                                  ;
 44608                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44609                                  ; describing that data item.
 44610                                  
 44611                                  ;DOSDATA SEGMENT
 44612                                  
 44613                                  ; 04/11/2022
 44614                                  ;[ORG 0]
 44615                                  
 44616                                  ; ----------------------------------------------------------------------------
 44617                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44618                                  ; ----------------------------------------------------------------------------
 44619                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44620                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44621                                  ; ----------------------------------------------------------------------------
 44622                                  
 44623                                  ; 04/11/2022
 44624                                  
 44625                                  ;DOSDATA:0000h
 44626                                  
 44627 000079AD 90<rep 3h>              align 16
 44628                                  
 44629                                  ; ----------------------------------------------------------------------------
 44630                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44631                                  ; ----------------------------------------------------------------------------
 44632                                  
 44633                                  segment .data  vstart=0 ; 06/12/2022
 44634                                  								
 44635                                  ; ============================================================================
 44636                                  
 44637                                  ; 06/12/2022
 44638                                  ;DOSDATASTART equ $
 44639                                  DOSDATASTART:
 44640                                  
 44641                                  
 44642                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44643                                  
 44644                                  	;; 03/11/2022
 44645                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44646                                  
 44647                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44648                                  	;db	4 dup (?)	
 44649 00000000 00<rep 4h>              	times	4 db 0
 44650                                  
 44651                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44652                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44653                                  	;dw	0
 44654                                  
 44655                                  	;EVEN
 44656                                  
 44657                                  ;align 2
 44658                                  
 44659                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44660                                  ; area compatability. This location must be incremented EACH TIME the data
 44661                                  ; area here gets mucked with.
 44662                                  ;
 44663                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44664                                  
 44665                                  MSCT001S:	; LABEL BYTE
 44666                                  	
 44667                                  DataVersion:	
 44668 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44669                                  
 44670                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44671                                  ;hkn; been removed to DOSCODE above
 44672                                  
 44673                                  ;M044
 44674                                  ; First part of save area for saving last para of Window memory
 44675                                  
 44676                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44677 00000006 00<rep 8h>              	times	8 db 0
 44678                                  
 44679                                  	; MSDOS 6.21 DOSDATA:000Eh
 44680                                  MYNUM:			; Offset 000Eh
 44681 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44682                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44683 00000010 0000                    	dw	0
 44684                                  OpenLRU:
 44685 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44686                                  OEM_HANDLER: 		
 44687 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44688                                  
 44689                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44690                                  ;;			way that we leave DOS???? - jgl
 44691                                  
 44692                                  LeaveAddr:
 44693 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44694                                  RetryCount:		
 44695 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44696                                  RetryLoop:
 44697 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44698                                  LastBuffer:
 44699 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44700                                  CONTPOS:
 44701 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44702                                  arena_head:
 44703 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44704                                  
 44705                                  ;; 16/07/2018
 44706                                  ;;***************************************************************************
 44707                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44708                                  ;;***************************************************************************
 44709                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44710                                  ;;
 44711                                  ;;	AH = 52h
 44712                                  ;;
 44713                                  ;;	on return:
 44714                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44715                                  ;;		Known "invars" fields follow (varies with DOS version):
 44716                                  ;;
 44717                                  ;;	Offset Size		 Description
 44718                                  ;;
 44719                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44720                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44721                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44722                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44723                                  ;;		      0 indicates no unread input (DOS 3.x)
 44724                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44725                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44726                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44727                                  ;;	  08   dword  pointer to $CLOCK device driver
 44728                                  ;;	  0C   dword  pointer to CON device driver
 44729                                  ;;	  10   byte   number of logical drives in system
 44730                                  ;;	  11   word   maximum bytes/block of any block device
 44731                                  ;;	  13   dword  pointer to DOS cache buffer header
 44732                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44733                                  ;;		      point to the next device in device chain
 44734                                  ;;
 44735                                  ;;***************************************************************************
 44736                                  
 44737                                  ; The following block of data is used by SYSINIT. 
 44738                                  ; Do not change the order or size of this block
 44739                                  
 44740                                  ;SYSINITVAR:
 44741                                  ;----------------------------------------------------------------------------
 44742                                  SYSINITVARS:
 44743                                  DPBHEAD:
 44744 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44745                                  SFT_ADDR:
 44746 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44747                                  BCLOCK:
 44748 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44749                                  BCON:
 44750 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44751                                  MAXSEC:
 44752 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44753                                  BUFFHEAD:
 44754 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44755                                  CDSADDR:
 44756 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44757                                  SFTFCB:
 44758 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44759                                  KEEPCOUNT:
 44760 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44761                                  NUMIO:
 44762 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44763                                  CDSCOUNT:
 44764 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44765                                  
 44766                                  ; A fake header for the NUL device
 44767                                  NULDEV:
 44768 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44769                                  	;dw	8004h
 44770 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44771 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44772 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44773 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44774                                  SPLICES:
 44775 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44776                                  
 44777                                  Special_Entries:
 44778 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44779                                  UU_IFS_DOS_CALL:
 44780 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44781                                  ; 
 44782                                  ; UU_IFS_HEADER:
 44783                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44784                                  
 44785                                  ChkCopyProt:
 44786 00000061 0000                    	dw	0	; M068
 44787                                  A20OFF_PSP:
 44788 00000063 0000                    	dw	0	; M068
 44789                                  BUFFERS_PARM1:
 44790 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44791                                  BUFFERS_PARM2:
 44792 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44793                                  BOOTDRIVE:
 44794 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44795                                  DDMOVE:
 44796 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44797                                  EXT_MEM_SIZE:
 44798 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44799                                  
 44800                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44801                                  ;
 44802                                  ; Replaced by next two declarations
 44803                                  ;
 44804                                  ;UU_BUF_HASH_PTR:
 44805                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44806                                  ;UU_BUF_HASH_COUNT:
 44807                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44808                                  
 44809                                  BufferQueue:
 44810 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44811                                  DirtyBufferCount:
 44812 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44813                                  			; BUGBUG ---- change to byte
 44814                                  SC_CACHE_PTR:
 44815 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44816                                  SC_CACHE_COUNT:
 44817 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44818                                  BuffInHMA:
 44819 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44820                                  LoMemBuff:
 44821 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44822                                  			;  in Low mem when buffs are in HMA
 44823                                  ;
 44824                                  ; All variables which have UU_ as prefix can be reused for other
 44825                                  ; purposes and can be renamed. All these variables were used for
 44826                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44827                                  ; manager ---- MOHANS
 44828                                  ;
 44829                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44830                                  UU_BUF_EMS_FIRST_PAGE:	
 44831 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44832                                  
 44833                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44834                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44835                                  ;	dw	0			
 44836                                  
 44837                                  CL0FATENTRY:
 44838 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44839                                  			; is used in pack/unpack rts.
 44840                                  			; in fat.asm if cluster 0 is specified.
 44841                                  			; SR;
 44842                                  IoStatFail:
 44843 00000083 00                      	db	0	; IoStatFail has been added to 
 44844                                  			; record a fail on an I24 
 44845                                  			; issued from IOFUNC on a status call. 
 44846                                  
 44847                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44848                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44849                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44850                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44851                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44852                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44853                                  ;
 44854                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44855                                  						; state of the 	buffers page.
 44856                                  						; This one byte is retained to 
 44857                                  						; keep the size of this data 
 44858                                  						; block the same.;
 44859                                  ALLOCMSAVE:
 44860 00000084 00                      	db	0	; M063: temp var. used to 
 44861                                  			; M063: save alloc method in
 44862                                  			; M063: msproc.asm
 44863                                  A20OFF_COUNT:
 44864 00000085 00                      	db	0	; M068: indiactes the # of 
 44865                                  			; M068: int 21 calls for 
 44866                                  			; M068: which A20 is off
 44867                                  DOS_FLAG:
 44868 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44869                                  			; definitions
 44870                                  UNPACK_OFFSET:
 44871 00000087 0000                    	dw	0	; saves pointer to the start
 44872                                  			; of unpack code in exepatch.
 44873                                  			; asm.
 44874                                  UMBFLAG:
 44875 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44876                                  			; M003: link state of the UMBs
 44877                                  			; M003: whether linked or not 
 44878                                  			; M003: to the DOS arena chain
 44879                                  SAVE_AX:
 44880 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44881                                  			; M000: in msproc.asm
 44882                                  UMB_HEAD:
 44883 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44884                                  			; M000: the first umb arena by 
 44885                                  			; M000: BIOS sysinit.
 44886                                  START_ARENA:
 44887 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44888                                  			; M000: from which DOS will 
 44889                                  			; M000: start its scan for alloc.
 44890                                  
 44891                                  ; End of SYSINITVar block
 44892                                  ;----------------------------------------------------------------------------
 44893                                  
 44894                                  ; 25/04/2019 - Retro DOS v4.0
 44895                                  
 44896                                  ; 16/07/2018
 44897                                  ; MSDOS 3.3 (& MDOS 6.0)
 44898                                  
 44899                                  ;
 44900                                  ; Sharer jump table
 44901                                  ;
 44902                                  
 44903                                  ;PUBLIC	JShare
 44904                                  	;EVEN
 44905                                  
 44906                                  ;JShare	LABEL	DWORD
 44907                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44908                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44909                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44910                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44911                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44912                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44913                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44914                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44915                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44916                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44917                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44918                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44919                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44920                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44921                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44922                                  
 44923                                  align 2
 44924                                  
 44925                                  JShare:
 44926 00000090 [FB06]0000              		DW	BadCall,0
 44927 00000094 [FF06]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44928 00000098 [FF06]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44929 0000009C [FB06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44930 000000A0 [FB06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44931 000000A4 [FB06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44932 000000A8 [FB06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44933 000000AC [FB06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44934 000000B0 [FF06]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44935 000000B4 [FB06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44936 000000B8 [FB06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44937 000000BC [FB06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44938 000000C0 [FF06]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44939 000000C4 [FB06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44940 000000C8 [FB06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44941                                  
 44942                                  
 44943                                  ;============================================================================
 44944                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44945                                  ;============================================================================
 44946                                  ; 25/04/2019 - Retro DOS 4.0 
 44947                                  ; 16/07/2018 - Retro DOS 3.0	
 44948                                  
 44949                                  ;Break <Initialized data and data used at DOS initialization>
 44950                                  ;----------------------------------------------------------------------------
 44951                                  
 44952                                  ; We need to identify the parts of the data area that are relevant to tasks
 44953                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44954                                  ; data will be gathered with the system code.  The process data under 2.x will
 44955                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44956                                  ;
 44957                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44958                                  ; describing that data item.
 44959                                  
 44960                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44961                                  
 44962                                  ;
 44963                                  ; Table of routines for assignable devices
 44964                                  ;
 44965                                  ; MSDOS allows assignment if the following standard devices:
 44966                                  ;   stdin  (usually CON input)
 44967                                  ;   stdout (usually CON output)
 44968                                  ;   auxin  (usually AUX input)
 44969                                  ;   auxout (usually AUX output)
 44970                                  ;   stdlpt (usually PRN output)
 44971                                  ;
 44972                                  ; SPECIAL NOTE:
 44973                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44974                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44975                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44976                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44977                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44978                                  ;   as EOF).
 44979                                  
 44980                                  ; Default SFTs for boot up
 44981                                  
 44982                                  		;PUBLIC	SFTABL
 44983                                  
 44984                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44985 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44986 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44987 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44988                                  		;times 295 db 0 ; MSDOS 6.0
 44989 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44990                                  
 44991                                  ; the next two variables relate to the position of the logical stdout/stdin
 44992                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44993                                  ; console.
 44994                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44995 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44996 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44997                                  					;	   of buffered input call
 44998 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44999 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 45000                                  		; DOSDATA:02FEh (MSDOS 6.21)
 45001 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 45002 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 45003 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 45004                                  switch_character:
 45005 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 45006 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 45007 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 45008 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 45009 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 45010                                  
 45011                                  ; The following table is a list of addresses that the sharer patches to be
 45012                                  ; PUSH AX to enable the critical sections
 45013                                  
 45014                                  		; DOSDATA:0315h (MSDOS 6.21)
 45015                                  
 45016                                  ;PUBLIC	CritPatch
 45017                                  
 45018                                  CritPatch:	; LABEL WORD
 45019                                  
 45020                                  ;IRP sect,<critDisk,critDevice>
 45021                                  
 45022                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 45023                                  ;
 45024                                  ;SR; Change code patch address to a variable in data segment
 45025                                  ;
 45026                                  ;       dw OFFSET DOSDATA: redir_patch
 45027                                  ;       dw OFFSET DOSDATA: redir_patch
 45028                                  ;
 45029                                  ;;hkn	Short_Addr  E&sect
 45030                                  ;;hkn	Short_Addr  L&sect
 45031                                  ;
 45032                                  ;ELSE
 45033                                  ;	DW	0
 45034                                  ;	DW	0
 45035                                  ;ENDIF
 45036                                  ;ENDM
 45037                                  ;	DW	0
 45038                                  
 45039                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 45040                                   
 45041 00000315 [0C0D]                  	dw 	redir_patch
 45042 00000317 [0C0D]                  	dw 	redir_patch			
 45043 00000319 [0C0D]                  	dw	redir_patch
 45044 0000031B [0C0D]                  	dw 	redir_patch
 45045                                  
 45046 0000031D 0000                    	dw	0
 45047                                  
 45048                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 45049                                  ; Also, IBM server 1.0 requires this also.
 45050                                  
 45051                                  	;EVEN			; Force swap area to start on word boundry
 45052 0000031F 90                      align 2
 45053                                  	;PUBLIC	SWAP_START
 45054                                  SWAP_START:	; LABEL BYTE
 45055 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 45056 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 45057 00000322 FF                      WPERR:		db -1		; Write protect error flag
 45058 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 45059 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 45060                                  
 45061                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 45062 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 45063 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 45064                                  ; end warning
 45065                                   
 45066 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 45067                                  
 45068 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 45069 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 45070 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 45071 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 45072 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 45073 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 45074                                  ;				; F.C. 2/17/86
 45075 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 45076 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 45077                                  ;align 2
 45078                                  SWAP_ALWAYS:	; 05/08/2018
 45079 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 45080                                  				;   extended error type stuff.
 45081                                  				;   NOTE: does not have Correct value on
 45082                                  				;   1-12, OEM, Get/Set CurrentPDB,
 45083                                  				;   GetExtendedError system calls)
 45084 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 45085 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 45086 00000340 0000                    FirstArena:	dw 0		; first free block found
 45087 00000342 0000                    BestArena:	dw 0		; best free block found
 45088 00000344 0000                    LastArena:	dw 0		; last free block found
 45089 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 45090 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 45091 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 45092 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 45093 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 45094 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 45095 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 45096                                  
 45097                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 45098                                  	;EVEN
 45099 0000034F 90                      align 2
 45100                                  		; DOSDATA:0350h (MSDOS 6.21)
 45101 00000350 00                      DAY:		db 0		; Day of month
 45102 00000351 00                      MONTH:		db 0		; Month of year
 45103 00000352 0000                    YEAR:		dw 0		; Year (with century)
 45104 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 45105 00000356 00                      WEEKDAY:	db 0		; Day of week
 45106                                  ; end warning
 45107                                  
 45108 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 45109 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 45110 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 45111                                  
 45112                                  ; Combination of all device call parameters
 45113                                  	;PUBLIC	DEVCALL 	;
 45114                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 45115                                  DEVCALL: ; 08/08/2018
 45116 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 45117 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 45118 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 45119 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 45120 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 45121                                  
 45122                                  	;PUBLIC	CALLUNIT
 45123                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 45124                                  CALLFLSH: ; LABEL   WORD	;
 45125 00000367 00                      CALLMED:	db 0		; media byte
 45126                                  CALLBR:	  ; LABEL   DWORD	;
 45127                                  	;PUBLIC	CALLXAD 	;
 45128                                  CALLXAD:  ; LABEL   DWORD	;
 45129 00000368 00                      CALLRBYT:	db 0		;
 45130                                  	;PUBLIC	CALLVIDM	;
 45131                                  CALLVIDM: ; LABEL   DWORD	;
 45132 00000369 00<rep 3h>              	times 3 db 0	;
 45133                                  	;PUBLIC CallBPB		;
 45134                                  CALLBPB:  ; LABEL   DWORD	;
 45135                                  CALLSCNT:			;
 45136 0000036C 0000                    		dw 0		;
 45137                                  	;PUBLIC	CALLSSEC	;
 45138                                  CALLSSEC: ; LABEL   WORD	;
 45139 0000036E 0000                    		dw 0		;
 45140 00000370 00000000                CALLVIDRW:	dd 0		;
 45141                                  ;MSDOS 6.0
 45142 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 45143 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 45144                                  
 45145                                  ; Same as above for I/O calls	;
 45146                                  				;
 45147                                  	;PUBLIC	IOCall		;
 45148                                  ;IOCALL	SRHEAD	<>		;
 45149                                  IOCALL:	; 07/08/2018
 45150 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 45151 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 45152 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 45153 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 45154 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 45155                                  IOFLSH:	  ; LABEL   WORD	;
 45156                                          ;PUBLIC  IORCHR		;
 45157                                  IORCHR:	  ; LABEL   BYTE	;
 45158 00000389 00                      IOMED:		db 0		;
 45159 0000038A 00000000                IOXAD:		dd 0		;
 45160 0000038E 0000                    IOSCNT:		dw 0		;	
 45161 00000390 0000                    IOSSEC:		dw 0		;
 45162                                  
 45163                                  ; Call struct for DSKSTATCHK	;
 45164 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 45165 00000393 00                      		db 0
 45166 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 45167 00000395 0000                    DSKSTST:	dw 0		;
 45168 00000397 00<rep 8h>              	times 8	db 0		;
 45169 0000039F 00                      DSKCHRET:	db 0		;
 45170                                  
 45171                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 45172                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 45173                                  ;hkn   short_addr  DEVIOBUF	;
 45174                                  	
 45175 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 45176 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 45177 000003A4 0100                    DSKSTCNT:	dw 1		;
 45178 000003A6 0000                    		dw 0		;
 45179                                  
 45180 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 45181                                  
 45182                                  ;MSDOS 6.0
 45183                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 45184 000003A9 00000000                		dd 0		;MS. position
 45185 000003AD 00000000                		dd 0		;MS. length
 45186                                  
 45187                                  ;hkn; the foll. was moved from dosmes.asm.
 45188                                  
 45189                                  	;EVEN
 45190 000003B1 90                      align 2				; needed to maintain offsets
 45191                                  
 45192                                  		; DOSDATA:03B2h (MSDOS 6.21)
 45193                                  USERNUM:
 45194 000003B2 0000                     		dw 0		; 24 bit user number
 45195 000003B4 00                      		db 0
 45196                                  ;IF IBM
 45197                                  ;IF IBMCOPYRIGHT
 45198                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 45199                                  ;ELSE
 45200                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 45201                                  ;ENDIF
 45202                                  ;ELSE
 45203 000003B5 FF                      OEMNUM:		DB 0FFh
 45204                                  ;ENDIF
 45205                                  
 45206                                  ;============================================================================
 45207                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 45208                                  ;============================================================================
 45209                                  ; 25/04/2019 - Retro DOS 4.0
 45210                                  
 45211                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 45212                                  ; ----------------------------------------------------------
 45213                                  ; This data section which was named as uninitialized data
 45214                                  ; (as overlayed by initialization code) but follows 
 45215                                  ; initialized data section from DOSDATA:03B6h address
 45216                                  ; (in otherwords, the method is different than MSDOS 3.3,
 45217                                  ; and there is not overlaying..)
 45218                                  ; **********************************************************
 45219                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 45220                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 45221                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 45222                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 45223                                  ; TIMEBUF is at offset 03B6h.
 45224                                  ; **********************************************************	
 45225                                  
 45226                                  ;Break <Uninitialized data overlayed by initialization code>
 45227                                  ;----------------------------------------------------------------------------
 45228                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 45229                                  ; Init code overlaps with data area below
 45230                                  
 45231                                  ; 	ORG     0
 45232                                  
 45233                                  MSDAT001S:	; label byte
 45234                                  
 45235                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 45236                                  TIMEBUF: ;	times 6 db 0
 45237 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 45238 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 45239                                  
 45240                                  ; The following areas are used as temp buffer in EXEC system call
 45241                                  
 45242                                  ; DOSDATA:03BEh
 45243                                  OPENBUF: ;times 64  dw	0
 45244 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 45245                                  RENBUF:	
 45246 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 45247                                  
 45248                                  ; Buffer for search calls
 45249                                  SEARCHBUF:	
 45250 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 45251                                  DUMMYCDS:  ;times 88 db 0
 45252 000004F3 00<rep 58h>             	times	curdirLen db 0
 45253                                  
 45254                                  ; End of contiguous buffer
 45255                                   
 45256                                  ; Temporary directory entry for use by many routines. Device directory
 45257                                  ; entries (bogus) are built here.
 45258                                  
 45259                                  ; DOSDATA:054Bh
 45260                                  
 45261                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 45262                                  
 45263                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 45264                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 45265                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 45266                                  
 45267                                  NAME1:	
 45268 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 45269                                  NAME2:
 45270 00000557 00<rep Dh>              	times	13 db	0 		;
 45271                                  DESTSTART:
 45272 00000564 0000                    	dw	0			;
 45273                                          ;DB	((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 45274                                  	;times	5  db	0
 45275 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 45276                                  
 45277                                  ; End Temporary directory entry.
 45278                                  
 45279 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 45280                                  EXTFCB:	
 45281 0000056C 00                      	db	0		; TRUE => extended FCB in use
 45282                                  SATTRIB:
 45283 0000056D 00                      	db	0		; Storage for search attributes
 45284                                  OPEN_ACCESS:
 45285 0000056E 00                      	db	0		; access of open system call
 45286                                  FOUNDDEL:
 45287 0000056F 00                      	db	0		; true => file was deleted
 45288                                  FOUND_DEV:
 45289 00000570 00                      	db	0		; true => search found a device
 45290                                  FSPLICE:
 45291 00000571 00                      	db	0		; true => do a splice in transpath
 45292                                  FSHARING:
 45293 00000572 00                      	db	0		; TRUE => no redirection
 45294                                  SECCLUSPOS:
 45295 00000573 00                      	db	0		; Position of first sector within cluster
 45296 00000574 00                      TRANS:	db	0		;
 45297 00000575 00                      READOP:	db	0		;
 45298                                  THISDRV:
 45299 00000576 00                      	db	0		;
 45300                                  CLUSFAC:
 45301 00000577 00                      	db	0		;
 45302                                  CLUSSPLIT:
 45303 00000578 00                      	db	0		;
 45304                                  INSMODE:
 45305 00000579 00                      	db	0		; true => insert mode in buffered read
 45306 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 45307 0000057B 00                      VOLID:	db	0		;
 45308                                  EXIT_TYPE:
 45309 0000057C 00                      	db	0		; type of exit...
 45310                                   
 45311                                  	;EVEN
 45312                                  
 45313 0000057D 90                      align 2
 45314                                  
 45315                                  ; DOSDATA:057Eh
 45316                                  
 45317                                  ; WARNING - the following two items are accessed as a word
 45318                                  
 45319                                  CREATING:
 45320 0000057E 00                      	db	0		; true => creating a file
 45321 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 45322                                  				; = DIRFREE iff BUGBUG
 45323                                  EXITHOLD:
 45324 00000580 00000000                	dd	0		; Temp location for proc terminate
 45325                                  USER_SP:
 45326 00000584 0000                    	dw	0		; User SP for system call
 45327                                  USER_SS:
 45328 00000586 0000                    	dw	0		; User SS for system call
 45329                                  CONTSTK:
 45330 00000588 0000                    	dw	0		;
 45331                                  THISDPB:
 45332 0000058A 00000000                	dd	0		;
 45333                                  CLUSSAVE:
 45334 0000058E 0000                    	dw	0		;
 45335                                  CLUSSEC:
 45336 00000590 00000000                	dd	0		;>32mb			AC0000
 45337                                  PREREAD:
 45338 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 45339 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 45340                                  FATBYTE:
 45341 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 45342                                  ; DOSDATA:059Ah
 45343 0000059A 00000000                DEVPT:	dd	0		;
 45344                                  THISSFT:
 45345 0000059E 00000000                	dd	0		; Address of user SFT
 45346                                  THISCDS:
 45347 000005A2 00000000                	dd	0		; Address of current CDS
 45348                                  THISFCB:
 45349 000005A6 00000000                	dd	0		; Address of user FCB
 45350 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 45351 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 45352 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 45353                                  WFP_START:
 45354 000005B2 0000                    	dw	0		;
 45355                                  REN_WFP:
 45356 000005B4 0000                    	dw	0		;
 45357                                  CURR_DIR_END:
 45358 000005B6 0000                    	dw	0		;
 45359                                  NEXTADD:
 45360 000005B8 0000                    	dw	0		;
 45361                                  LASTPOS:
 45362 000005BA 0000                    	dw	0		;
 45363                                  CLUSNUM:
 45364 000005BC 0000                    	dw	0		;
 45365 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 45366                                  DIRSTART:
 45367 000005C2 0000                    	dw	0		;
 45368 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 45369 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 45370                                                                  ; sectors
 45371                                  BYTSECPOS:
 45372 000005CC 0000                    	dw	0		; Position of first byte within sector
 45373                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 45374 000005CE 0000<rep 2h>                    times	2 dw 0
 45375                                  BYTCNT1:
 45376 000005D2 0000                    	dw	0		; No. of bytes in first sector
 45377                                  BYTCNT2:
 45378 000005D4 0000                    	dw	0		; No. of bytes in last sector
 45379 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 45380                                  ; DOSDATA:05D8h
 45381                                  ENTFREE:
 45382 000005D8 0000                    	dw	0		;
 45383                                  ENTLAST:
 45384 000005DA 0000                    	dw	0		;
 45385                                  NXTCLUSNUM:
 45386 000005DC 0000                    	dw	0		;
 45387                                  GROWCNT:
 45388 000005DE 00000000                	dd	0		;
 45389 000005E2 00000000                CURBUF:	dd	0		;
 45390 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45391 000005EA 0000                    SAVEBX:	dw	0		;
 45392 000005EC 0000                    SAVEDS:	dw	0		;
 45393                                  RESTORE_TMP:
 45394 000005EE 0000                    	dw	0		; return address for restore world
 45395 000005F0 0000                    NSS:	dw	0
 45396 000005F2 0000                    NSP:	dw	0
 45397                                  ; DOSDATA:05F4h
 45398                                  EXTOPEN_FLAG:
 45399 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45400                                  EXTOPEN_ON:
 45401 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45402                                  EXTOPEN_IO_MODE:
 45403 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45404                                  SAVE_DI:
 45405 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45406                                  SAVE_ES:
 45407 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45408                                  SAVE_DX:
 45409 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45410                                  SAVE_CX:
 45411 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45412                                  SAVE_BX:
 45413 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45414                                  SAVE_SI:
 45415 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45416                                  SAVE_DS:
 45417 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45418                                  
 45419                                  ; DOSDATA:0607h
 45420                                  
 45421                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45422                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45423                                  ; the high 16, the low 16 are still in the register.
 45424                                  
 45425                                  HIGH_SECTOR:	
 45426 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45427                                  ;OffsetMagicPatch:
 45428                                  ;	dw	MagicPatch ;scottq 8/6/92
 45429                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45430 00000609 0000                    	dw	0
 45431                                  				;see dos\mpatch.asm
 45432                                  DISK_FULL:
 45433 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45434                                  TEMP_VAR:
 45435 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45436                                  TEMP_VAR2:
 45437 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45438 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45439                                  DOS34_FLAG:
 45440 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45441                                  NO_FILTER_PATH:
 45442 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45443                                  NO_FILTER_DPATH:
 45444 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45445                                  ; M008
 45446                                  AbsRdWr_SS:
 45447 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45448                                  AbsRdWr_SP:
 45449 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45450                                  
 45451                                  	; I_am  UU_Callback_flag,BYTE,<0>  ; Unused
 45452                                  ; M008
 45453                                  	; 24/03/2024
 45454                                  	; MSDOS 5.0 MSDOS.SYS - DOSDATA:061Fh
 45455                                  	; MSDOS 6.22 MSDOS.SYS - DOSDATA:061Fh
 45456 0000061F 00                      	db 	0
 45457                                   
 45458                                  ; make those pushes fast!!!
 45459                                  ;EVEN
 45460                                  
 45461                                  align 2
 45462                                  
 45463                                  StackSize   equ 180h  ; 384	; gross but effective
 45464                                  
 45465                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45466                                  ;				; made up their minds about
 45467                                   
 45468                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45469                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45470                                  
 45471                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45472                                   
 45473 00000620 00<rep 180h>                    times	StackSize db	0	;
 45474                                  AUXSTACK:			; LABEL   BYTE
 45475                                   
 45476 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45477                                  DSKSTACK:			; LABEL   BYTE
 45478                                   
 45479 00000920 00<rep 180h>                    times	StackSize db	0	;
 45480                                  IOSTACK:			; LABEL   BYTE
 45481                                  
 45482                                  ; DOSDATA:0AA0h 
 45483                                   
 45484                                  ; patch space for Boca folks.
 45485                                  ; Say What????!!! This does NOT go into the swappable area!
 45486                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45487                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45488                                   
 45489                                  IBMPATCH: ; label byte
 45490                                  PRINTER_FLAG:
 45491 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45492                                  VOLCHNG_FLAG:
 45493 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45494                                  VIRTUAL_OPEN:
 45495 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45496                                   
 45497                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45498                                  
 45499                                  FSeek_drive:
 45500 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45501                                  FSeek_firclus:
 45502 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45503                                  FSeek_logclus:
 45504 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45505                                  FSeek_logsave:
 45506 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45507                                  
 45508                                  ; DOSDATA:0AAAh
 45509                                  
 45510                                  TEMP_DOSLOC:
 45511 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45512                                  				;at SYSINIT time.
 45513                                  SWAP_END:  ; LABEL   BYTE
 45514                                   
 45515                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45516                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45517                                  ; to include this byte.
 45518                                   
 45519 00000AAC 00                      	db	0
 45520                                  
 45521                                  ; DOSDATA:0AADh
 45522                                   
 45523                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45524                                  
 45525                                  ;DOSDATA    ENDS
 45526                                  
 45527                                  ;============================================================================
 45528                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45529                                  ;============================================================================
 45530                                  ; 27/04/2019 - Retro DOS 4.0
 45531                                  ; 16/07/2018 - Retro DOS 3.0
 45532                                  
 45533                                  ;DOSDATA Segment
 45534                                  
 45535                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45536                                  
 45537                                  ;
 45538                                  ; upper case table
 45539                                  ; ---------------------------------------------------------------------------
 45540                                  UCASE_TAB:	; label   byte
 45541 00000AAD 8000                    	dw	128
 45542 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45543 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45544 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45545 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45546 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45547 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45548 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45549 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45550 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45551 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45552 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45553 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45554 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45555 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45556 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45557 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45558                                  ;
 45559                                  ; file upper case table
 45560                                  ; ---------------------------------------------------------------------------
 45561                                  FILE_UCASE_TAB:	; label  byte
 45562 00000B2F 8000                    	dw	128
 45563 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45564 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45565 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45566 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45567 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45568 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45569 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45570 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45571 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45572 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45573 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45574 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45575 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45576 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45577 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45578 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45579                                  ;
 45580                                  ; file char list
 45581                                  ; ---------------------------------------------------------------------------
 45582                                  FILE_CHAR_TAB:	; label  byte
 45583 00000BB1 1600                    	dw	22				; length
 45584 00000BB3 0100FF                  	db	1,0,255 			; include all
 45585 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45586 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45586 00000BC2 7C3C3E2B3D3B2C     
 45587                                  	;db	24 dup (?)			; reserved
 45588 00000BC9 00<rep 18h>             	times	24 db 0
 45589                                  
 45590                                  ;
 45591                                  ; collate table
 45592                                  ; ---------------------------------------------------------------------------
 45593                                  COLLATE_TAB:	; label   byte
 45594 00000BE1 0001                    	dw	256
 45595 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45596 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45597 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45598 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45599 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45600 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45601 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45602 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45603 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45604 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45605 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45606 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45607 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45608 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45609 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45610 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45611 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45612 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45613 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45614 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45615 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45616 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45617 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45618 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45619 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45620 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45621 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45622 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45623 00000CC3 E053                    	db	224,"S"
 45624 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45625 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45626 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45627 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45628                                  
 45629                                  ; ------------------------------------------------<MSKK01>----------------------
 45630                                  
 45631                                  ; DOSDATA:0CE3h
 45632                                  
 45633                                  ; 29/04/2019
 45634                                  
 45635                                  ; dbcs is not supported in DOS 3.3
 45636                                  ;		   DBCS_TAB	    CC_DBCS <>
 45637                                  ;
 45638                                  ; DBCS for DOS 4.00			   2/12/KK
 45639                                  
 45640                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45641                                  ; ------------------------------------------------<MSKK01>----------------------
 45642                                  ;ifdef	DBCS
 45643                                  ; ifdef	  JAPAN
 45644                                  ;		dw	6		; <MSKK01>
 45645                                  ;		db	081h,09fh	; <MSKK01>
 45646                                  ;		db	0e0h,0fch	; <MSKK01>
 45647                                  ;		db	0,0		; <MSKK01>
 45648                                  ;
 45649                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45650                                  ; endif
 45651                                  ; ifdef	  TAIWAN
 45652                                  ;		dw	4		; <TAIWAN>
 45653                                  ;		db	081h,0FEh	; <TAIWAN>
 45654                                  ;		db	0,0		; <TAIWAN>
 45655                                  ;
 45656                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45657                                  ; endif
 45658                                  ; ifdef   KOREA                         ; Keyl
 45659                                  ;               dw      4               ; <KOREA>
 45660                                  ;               db      0A1h,0FEh       ; <KOREA>
 45661                                  ;               db      0,0             ; <KOREA>
 45662                                  ;
 45663                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45664                                  ;  endif
 45665                                  ;else
 45666 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45667                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45668 00000CE5 00<rep 10h>             		times	16 db 0
 45669                                  
 45670                                  ;		dw	6		;  2/12/KK
 45671                                  ;		db	081h,09Fh	;  2/12/KK
 45672                                  ;		db	0E0h,0FCh	;  2/12/KK
 45673                                  ;		db	0,0		;  2/12/KK
 45674                                  ;
 45675                                  ;endif
 45676                                  ; ------------------------------------------------<MSKK01>----------------------
 45677                                  
 45678                                  ; DOSDATA:0CF5h
 45679                                  
 45680                                  ; ---------------------------------------------------------------------------
 45681                                  ;
 45682                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45683                                  ;     ENTRY: AL = Character to map
 45684                                  ;     EXIT:  AL = The converted character
 45685                                  ; Alters no registers except AL and flags.
 45686                                  ; The routine should do nothing to chars below 80H.
 45687                                  ; ---------------------------------------------------------------------------
 45688                                  ; Example:
 45689                                  
 45690                                  MAP_CASE:
 45691                                  ;Procedure MAP_CASE,FAR
 45692                                  
 45693 00000CF5 3C80                    	CMP	AL,80h
 45694 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45695 00000CF9 CB                      	RETF
 45696                                  Map1:
 45697 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45698 00000CFC 1E                      	PUSH	DS
 45699 00000CFD 53                      	PUSH	BX
 45700 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45701                                  FINISH:
 45702 00000D01 0E                      	PUSH	CS		;Move to DS
 45703 00000D02 1F                      	POP	DS
 45704 00000D03 D7                      	XLAT			;Get upper case character
 45705 00000D04 5B                      	POP	BX
 45706 00000D05 1F                      	POP	DS
 45707                                  L_RET:	
 45708 00000D06 CB                      	RETF
 45709                                  
 45710                                  ;EndProc MAP_CASE
 45711                                  
 45712                                  ; ---------------------------------------------------------------------------
 45713                                  
 45714                                  ; The variables for ECS version are moved here for the same data alignments
 45715                                  ; as IBM-DOS and MS-DOS.
 45716                                  
 45717                                  InterChar:
 45718 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45719                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45720                                  DUMMY:	; LABEL   WORD
 45721                                  InterCon:  
 45722 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45723                                  SaveCurFlg:
 45724 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45725                                  
 45726                                  ; ---------------------------------------------------------------------------
 45727                                  
 45728 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45729                                  redir_patch:
 45730 00000D0C 00                      	  db	0
 45731                                  
 45732                                  ; DOSDATA:0D0Dh
 45733                                  
 45734                                  Mark1:	; label byte
 45735                                  
 45736                                  ;IF2
 45737                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45738                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45739                                  ;	ENDIF
 45740                                  ;ENDIF
 45741                                  
 45742 00000D0D 00<rep 5h>              	  times 5 db 0
 45743                                  
 45744                                  ;############################################################################
 45745                                  ;
 45746                                  ; ** HACK FOR DOS 4.0 REDIR **
 45747                                  ; 
 45748                                  ; The redir requires the following:
 45749                                  ;
 45750                                  ;	MSVERS	offset D12H
 45751                                  ;	YRTAB	offset D14H
 45752                                  ; 	MONTAB	offset D1CH
 45753                                  ;
 45754                                  ; WARNING! WARNING!
 45755                                  ; 
 45756                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45757                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45758                                  ;
 45759                                  ; CURRENTLY MARK1 = 0D0DH
 45760                                  ;
 45761                                  ;############################################################################
 45762                                  
 45763                                  	;ORG	0D12h
 45764                                  
 45765                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45766                                  
 45767                                  	;db	6
 45768                                  	;db	20
 45769                                  
 45770                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45771                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45772 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45773 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45774                                  
 45775                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45776                                  ;
 45777                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>
 45778                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31>
 45779                                  
 45780                                  ; Days in year
 45781                                  
 45782                                  YRTAB:   
 45783 00000D14 C8A6                    	DB	200,166			; Leap year
 45784 00000D16 C8A5                    	DB	200,165
 45785 00000D18 C8A5                    	DB	200,165
 45786 00000D1A C8A5                    	DB	200,165
 45787                                  
 45788                                  ; Days of each month
 45789                                  
 45790                                  MONTAB:        
 45791 00000D1C 1F                      	DB      31                      ; January
 45792                                  february:
 45793 00000D1D 1C                      	DB	28 			; February--reset each
 45794                                  					; time year changes
 45795 00000D1E 1F                              DB      31                      ; March
 45796 00000D1F 1E                              DB      30                      ; April
 45797 00000D20 1F                              DB      31                      ; May
 45798 00000D21 1E                              DB      30                      ; June
 45799 00000D22 1F                              DB      31                      ; July
 45800 00000D23 1F                              DB      31                      ; August
 45801 00000D24 1E                              DB      30                      ; September
 45802 00000D25 1F                              DB      31                      ; October
 45803 00000D26 1E                              DB      30                      ; November
 45804 00000D27 1F                              DB      31                      ; December
 45805                                  
 45806                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45807                                  
 45808                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45809                                  
 45810                                  SysInitTable:
 45811                                  	;dw	SYSINITVAR
 45812 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45813 00000D2A 0000                            dw      0		; segment
 45814 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45815 00000D2E 0000                            dw      0		; segment of pointer
 45816                                  
 45817                                  ; DOS 3.3 F.C. 6/12/86
 45818                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45819                                  
 45820                                  FastTable:				; a better name
 45821                                  FastOpenTable:
 45822 00000D30 0200                    	dw      2                       ; number of entries
 45823 00000D32 [8912]                  	dw      FastRet			; pointer to ret instr.
 45824 00000D34 0000                    	dw      0                       ; and will be modified by
 45825 00000D36 [8912]                  	dw      FastRet			; FASTxxx when loaded in
 45826 00000D38 0000                    	dw      0
 45827                                  
 45828                                  ; DOS 3.3 F.C. 6/12/86
 45829                                  
 45830                                  FastFlg:				; flags
 45831                                  FastOpenFlg:
 45832 00000D3A 00                      	db	0			; don't change the foll: order
 45833                                  
 45834                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45835                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45836                                  ; or filled by FastOPen when calling FastOpen Lookup
 45837                                  
 45838                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45839                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45840                                  	;times	11 db 0
 45841 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45842                                  
 45843                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45844                                  ; when calling FastOpen Lookup
 45845                                  
 45846                                  Dir_Info_Buff:	; label  byte
 45847                                  	;db   	SIZE dir_entry dup (0)
 45848                                  	;times	32 db 0
 45849 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45850                                  
 45851                                  Next_Element_Start:
 45852 00000D66 0000                    	dw	0			; save next element start offset
 45853                                  Del_ExtCluster:
 45854 00000D68 0000                    	dw	0			; for dos_delete
 45855                                  
 45856                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45857                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45858                                  ; not to destroy the INT 21 stack saved for the user.
 45859                                  
 45860                                  USER_SP_2F:	; LABEL  WORD
 45861 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45862                                  
 45863                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45864                                  DOS_TEMP:	; label  word		; temporary word
 45865                                  FAKE_STACK_2F:  
 45866                                  	; dw  14 dup (0)		; 12 register temporary storage
 45867 00000D6C 0000<rep Eh>            	times 14 dw 0
 45868                                  
 45869                                  Hash_Temp: 	;label  word		; temporary word
 45870                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45871 00000D88 0000<rep 4h>            	times 4 dw 0
 45872                                  
 45873                                  SCAN_FLAG:
 45874 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45875                                  DATE_FLAG:
 45876 00000D91 0000                    	dw     0                	; flag to update the date
 45877                                  
 45878                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45879 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45880                                  
 45881                                  MSG_EXTERROR:	; label  DWORD		; for system message addr
 45882 00000D95 00000000                	dd     0               		; for extended error
 45883 00000D99 00000000                	dd     0			; for parser
 45884 00000D9D 00000000                	dd     0			; for critical errror
 45885 00000DA1 00000000                	dd     0			; for IFS
 45886 00000DA5 00000000                	dd     0			; for code reduction
 45887                                  
 45888                                  SEQ_SECTOR:	; label  DWORD 		; last sector read
 45889 00000DA9 FFFFFFFF                	dd     -1
 45890                                  SC_SECTOR_SIZE:
 45891 00000DAD 0000                    	dw	0			; sector size for SC
 45892                                  SC_DRIVE:
 45893 00000DAF 00                      	db	0			; drive # for secondary cache
 45894                                  CurSC_DRIVE:
 45895 00000DB0 FF                      	db	-1			; current SC drive
 45896                                  CurSC_SECTOR:
 45897 00000DB1 00000000                	dd	0			; current SC starting sector
 45898                                  SC_STATUS:
 45899 00000DB5 0000                    	dw	0			; SC status word
 45900                                  SC_FLAG:
 45901 00000DB7 00                      	db	0			; SC flag
 45902                                  AbsDskErr:
 45903 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45904                                  
 45905                                  NO_NAME_ID:	; label byte
 45906 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id
 45906 00000DC3 2020               
 45907                                  
 45908                                  ;hkn; moved from TABLE segment in kstrin.asm
 45909                                  
 45910                                  KISTR001S:	; label	byte		; 2/17/KK
 45911 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45912                                  KISTR001E:	; label	byte		; 2/17/KK
 45913                                  
 45914                                  ; the nul device driver used to be part of the code. However, since the 
 45915                                  ; header is in the data, and the entry points are only given as an offset,
 45916                                  ; the strategy and interrupt entry points must also be in the data now.
 45917                                  
 45918                                  ; DOSDATA:0DC6h
 45919                                  
 45920                                  SNULDEV:
 45921                                  ;procedure snuldev,far
 45922                                  	;or	word [es:bx+3],100h
 45923                                  	; 17/12/2022
 45924                                  	;or	byte [es:bx+4],01h
 45925                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45926                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45927 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45928                                  INULDEV:
 45929 00000DCC CB                      	retf				; must not be a return!
 45930                                  ;endproc snuldev
 45931                                  
 45932                                  ;M044
 45933                                  ; Second part of save area for saving last para of Windows memory
 45934                                  
 45935                                  WinoldPatch2:
 45936                                  	;db	8 dup (?)	; M044
 45937 00000DCD 00<rep 8h>              	times	8 db 0	
 45938                                  UmbSave2:
 45939                                  	;db	5 dup (?)	; M062
 45940 00000DD5 00<rep 5h>              	times	5 db 0
 45941                                  UmbSaveFlag:
 45942 00000DDA 00                      	db	0		; M062
 45943                                  
 45944                                  ; DOSDATA:0DDBh
 45945                                  
 45946                                  Mark2:	; label byte
 45947                                  
 45948                                  ;IF2
 45949                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45950                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45951                                  ;	ENDIF
 45952                                  ;ENDIF
 45953                                  
 45954                                  ;############################################################################
 45955                                  ;
 45956                                  ; ** HACK FOR DOS 4.0 REDIR **
 45957                                  ; 
 45958                                  ; The redir requires the following:
 45959                                  ;
 45960                                  ;	ERR_TABLE_21	offset DDBH
 45961                                  ;	ERR_TABLE_24	offset E5BH
 45962                                  ; 	ErrMap24	offset EABH
 45963                                  ;
 45964                                  ; WARNING! WARNING!
 45965                                  ;
 45966                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45967                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45968                                  ;
 45969                                  ; CURRENTLY MARK2 = 0DD0H
 45970                                  ;
 45971                                  ;############################################################################
 45972                                  
 45973                                  	;ORG	0DDBh
 45974                                  
 45975                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45976                                  
 45977                                  ; ---------------------------------------------------------------------------
 45978                                  ;
 45979                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45980                                  ; errors. Each entry is 4 bytes long:
 45981                                  ;
 45982                                  ;       Err#,Class,Action,Locus
 45983                                  ;
 45984                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45985                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45986                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45987                                  ;
 45988                                  ; ---------------------------------------------------------------------------
 45989                                  
 45990                                  ;ErrTab  Macro   err,class,action,locus
 45991                                  ;ifidn <locus>,<0FFh>
 45992                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45993                                  ;ELSE
 45994                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45995                                  ;ENDIF
 45996                                  ;ENDM
 45997                                  
 45998                                  ERR_TABLE_21: ; LABEL   BYTE
 45999 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 46000 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46001 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46002 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 46003 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 46004 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46005 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 46006 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46007 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46008 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46009 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46010 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46011 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 46012 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46013 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 46014 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 46015 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46016 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 46017 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46018 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46019 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 46020 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 46021 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 46022 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46023 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 46024 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46025 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 46026 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46027                                      ; MSDOS 6.0
 46028 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46029 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46030 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 46031 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 46032                                  
 46033                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 46034                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 46035                                  ;		db 2,8,3,2
 46036                                  ;		db 3,8,3,2
 46037                                  ;		db 4,1,4,1
 46038                                  ;		db 5,3,3,0FFh
 46039                                  ;		db 6,7,4,1
 46040                                  ;		db 7,7,5,5
 46041                                  ;		db 8,1,4,5
 46042                                  ;		db 9,7,4,5
 46043                                  ;		db 0Ah,7,4,5
 46044                                  ;		db 0Bh,9,3,1
 46045                                  ;		db 0Ch,7,4,1
 46046                                  ;		db 0Dh,9,4,1
 46047                                  ;		db 0Fh,8,3,2
 46048                                  ;		db 10h,3,3,2
 46049                                  ;		db 11h,0Dh,3,2
 46050                                  ;		db 12h,8,3,2
 46051                                  ;		db 50h,0Ch,3,2
 46052                                  ;		db 20h,0Ah,2,2
 46053                                  ;		db 21h,0Ah,2,2
 46054                                  ;		db 54h,1,4,0FFh
 46055                                  ;		db 56h,3,3,1
 46056                                  ;		db 52h,1,4,2
 46057                                  ;		db 32h,9,3,3
 46058                                  ;		db 55h,0Ch,3,3
 46059                                  ;		db 57h,9,3,1
 46060                                  ;		db 53h,0Dh,4,1
 46061                                  ;		db 24h,1,4,5
 46062                                  ; MSDOS 6.0 (MSDOS 6.21)
 46063                                  ;		db 26h,1,4,1
 46064                                  ;		db 27h,1,4,1
 46065                                  ;		db 5Ah,0Dh,4,2
 46066                                  ; MSDOS 6.0 & MSDOS 3.3
 46067                                  ;		db 0FFh,0FFh,0FFh,0FFh
 46068                                  
 46069                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 46070                                  
 46071                                  ; ---------------------------------------------------------------------------
 46072                                  ;
 46073                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 46074                                  ; errors. Each entry is 4 bytes long:
 46075                                  ;
 46076                                  ;       Err#,Class,Action,Locus
 46077                                  ;
 46078                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 46079                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46080                                  ; THE END.
 46081                                  ;
 46082                                  ; ---------------------------------------------------------------------------
 46083                                  
 46084                                  ERR_TABLE_24: ; LABEL   BYTE
 46085 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46086 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46087 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 46088 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46089 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46090 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46091 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 46092 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46093 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46094 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 46095 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 46096 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 46097 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 46098 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46099 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46100 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46101 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46102 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46103 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46104 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 46105                                  
 46106                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 46107                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 46108                                  ;		db 14h,4,5,1
 46109                                  ;		db 15h,5,7,0FFh
 46110                                  ;		db 16h,4,5,1
 46111                                  ;		db 17h,0Bh,4,2
 46112                                  ;		db 18h,4,5,1
 46113                                  ;		db 19h,5,1,2
 46114                                  ;		db 1Ah,0Bh,7,2
 46115                                  ;		db 1Bh,0Bh,4,2
 46116                                  ;		db 1Ch,2,7,4
 46117                                  ;		db 1Dh,5,4,0FFh
 46118                                  ;		db 1Eh,5,4,0FFh
 46119                                  ;		db 1Fh,0Dh,4,0FFh
 46120                                  ;		db 20h,0Ah,2,2
 46121                                  ;		db 21h,0Ah,2,2
 46122                                  ;		db 22h,0Bh,7,2
 46123                                  ;		db 32h,9,3,3
 46124                                  ;		db 23h,7,4,1
 46125                                  ;		db 24h,1,4,5
 46126                                  ;		db 0FFh,0Dh,5,0FFh
 46127                                  
 46128                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 46129                                  
 46130                                  ; ---------------------------------------------------------------------------
 46131                                  ;
 46132                                  ; We need to map old int 24 errors and device driver errors into the new set
 46133                                  ; of errors. The following table is indexed by the new errors
 46134                                  ;
 46135                                  ; ---------------------------------------------------------------------------
 46136                                  
 46137                                  ;Public  ErrMap24
 46138                                  ErrMap24: ; Label   BYTE
 46139 00000EAB 13                          DB  error_write_protect	; 0
 46140 00000EAC 14                          DB  error_bad_unit		; 1
 46141 00000EAD 15                          DB  error_not_ready		; 2
 46142 00000EAE 16                          DB  error_bad_command	; 3
 46143 00000EAF 17                          DB  error_CRC		; 4
 46144 00000EB0 18                          DB  error_bad_length	; 5
 46145 00000EB1 19                          DB  error_seek		; 6
 46146 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 46147 00000EB3 1B                          DB  error_sector_not_found	; 8
 46148 00000EB4 1C                          DB  error_out_of_paper	; 9
 46149 00000EB5 1D                          DB  error_write_fault	; A
 46150 00000EB6 1E                          DB  error_read_fault	; B
 46151 00000EB7 1F                          DB  error_gen_failure	; C
 46152 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 46153 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 46154 00000EBA 22                          DB  error_wrong_disk	; F
 46155                                  
 46156                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 46157                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 46158                                  	
 46159                                  ErrMap24End: ; LABEL   BYTE
 46160                                  
 46161                                  ; DOSDATA:0EBBh (MSDOS 6.21, MSDOS.SYS)
 46162                                  
 46163                                  ; ---------------------------------------------------------------------------
 46164                                  
 46165                                  ; 27/04/2019 - Retro DOS v4.0
 46166                                  
 46167                                  FIRST_BUFF_ADDR:
 46168 00000EBB 0000                    	dw	0			; first buffer address
 46169                                  SPECIAL_VERSION:
 46170 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 46171                                  FAKE_COUNT:
 46172 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 46173                                  OLD_FIRSTCLUS:
 46174 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 46175                                  
 46176                                  ; ---------------------------------------------------------------------------
 46177                                  
 46178                                  ;smr; moved from TABLE segment in exec.asm
 46179                                  
 46180 00000FC0 0000                    exec_init_SP: dw 0
 46181 00000FC2 0000                    exec_init_SS: dw 0
 46182 00000FC4 0000                    exec_init_IP: dw 0
 46183 00000FC6 0000                    exec_init_CS: dw 0
 46184                                  
 46185                                  exec_signature:
 46186 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 46187                                  exec_len_mod_512:
 46188 00000FCA 0000                    	dw	0	; low 9 bits of length
 46189                                  exec_pages:
 46190 00000FCC 0000                    	dw	0	; number of 512b pages in file
 46191                                  exec_rle_count:
 46192 00000FCE 0000                    	dw	0	; count of reloc entries
 46193                                  exec_par_dir:
 46194 00000FD0 0000                    	dw	0	; number of paragraphs before image
 46195                                  exec_min_BSS:
 46196 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 46197                                  exec_max_BSS:
 46198 00000FD4 0000                    	dw	0	; max number of para of BSS
 46199                                  exec_SS:
 46200 00000FD6 0000                    	dw	0	; stack of image
 46201                                  exec_SP:
 46202 00000FD8 0000                    	dw	0	; SP of image
 46203                                  exec_chksum:
 46204 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 46205                                  exec_IP:
 46206 00000FDC 0000                    	dw	0	; IP of entry
 46207                                  exec_CS:
 46208 00000FDE 0000                    	dw	0	; CS of entry
 46209                                  exec_rle_table:
 46210 00000FE0 0000                    	dw	0	; byte offset of reloc table
 46211                                  
 46212                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 46213                                  
 46214                                  ;smr; eom
 46215                                  
 46216                                  ; ---------------------------------------------------------------------------
 46217                                  
 46218                                  ;SR;
 46219                                  ; WIN386 instance table for DOS
 46220                                  
 46221                                  Win386_Info:
 46222 00000FE2 0300                    	db	3, 0
 46223 00000FE4 000000000000000000-     	dd	0, 0, 0
 46223 00000FED 000000             
 46224 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 46225                                  
 46226                                  Instance_Table:
 46227 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 46228 00000FFA [3200]00000400          	dw	BCON, 0, 4
 46229 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 46230 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 46231 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 46232 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 46233 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 46234 0000101E 00000000                	dw	0, 0
 46235                                  
 46236                                  ; M001; SR;
 46237                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 46238                                  ; M001; some DOS variables. Note that the only really important variable in 
 46239                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 46240                                  ; M001; which does not need to be done in DOS 5.0. 
 46241                                  
 46242                                  ; 29/12/2022
 46243                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 46244                                  
 46245                                  Win386_DOSVars:
 46246 00001022 05                      	db	5	;Major version 5 ; M001
 46247 00001023 00                      	db	0	;Minor version 0 ; M001
 46248 00001024 [EC05]                  	dw	SAVEDS	; M001
 46249 00001026 [EA05]                  	dw	SAVEBX	; M001
 46250 00001028 [2103]                  	dw	INDOS	; M001
 46251 0000102A [3E03]                  	dw	USER_ID	; M001
 46252 0000102C [1503]                  	dw	CritPatch ; M001
 46253 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 46254                                  
 46255                                  ;SR;
 46256                                  ; Flag to indicate whether WIN386 is running or not
 46257                                  
 46258 00001030 00                      IsWin386: db	0
 46259                                  
 46260                                  ;M018
 46261                                  ; This variable contains the path to the VxD device needed for Win386
 46262                                  
 46263 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 46263 0000103A 2E33383600         
 46264                                  
 46265                                  ;End WIN386 support
 46266                                  
 46267                                  ; ---------------------------------------------------------------------------
 46268                                  
 46269                                  ;SR;
 46270                                  ; These variables have been added for the special lie support for device
 46271                                  ;drivers.
 46272                                  ;
 46273                                  
 46274                                  DriverLoad:	
 46275 0000103F 01                      	db	1	;initialized to do special handling
 46276                                  BiosDataPtr:
 46277 00001040 00000000                	dd	0
 46278                                  
 46279                                  ; 25/03/2024
 46280                                  %if 1
 46281                                  ; 29/12/2022 - Retro DOS v4.1
 46282                                  ;%if 0
 46283                                  
 46284                                  ; 27/04/2019 - Retro DOS v4.0
 46285                                  ; 04/11/2022
 46286                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 46287                                  
 46288                                  ;------------------------------------------------------------------------
 46289                                  ; Patch for Sidekick
 46290                                  ;
 46291                                  ; A documented method for finding the offset of the Errormode flag in the 
 46292                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 46293                                  ; for the following sequence of instructions.
 46294                                  ;
 46295                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 46296                                  ;
 46297                                  ; The Offset of Errormode flag is 0320h
 46298                                  ;
 46299                                  ;------------------------------------------------------------------------
 46300                                  
 46301 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 46302 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 46303 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 46304 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 46305                                  
 46306                                  ;--------------------------------------------------------------------------
 46307                                  ; Patch for PortOfEntry - M036
 46308                                  ;
 46309                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 46310                                  ; the offset of Errormode flag. The following patch is to support them in 
 46311                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 46312                                  ;
 46313                                  ;---------------------------------------------------------------------------
 46314                                  
 46315 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 46316 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 46317 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 46318                                  
 46319                                  %endif ; 29/12/2022
 46320                                  
 46321                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 46322                                  
 46323                                  ;--------------------------------------------------------------------------
 46324                                  
 46325                                  ;*** New FCB Implementation
 46326                                  ; This variable is used as a cache in the new FCB implementation to remember
 46327                                  ;the address of a local SFT that can be recycled for a regenerate operation
 46328                                  
 46329 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 46330                                  
 46331                                  ;DOSDATA ENDS
 46332                                  
 46333                                  ;============================================================================
 46334                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 46335                                  ;============================================================================
 46336                                  ; 27/04/2019 - Retro DOS 4.0
 46337                                  
 46338                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 46339                                  
 46340                                  ;---------------------------------------------------------------------------
 46341                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 46342                                  ;----------------------------------------------------------------------------
 46343                                  	
 46344                                  	;db	90h
 46345                                  
 46346                                  	;EVEN
 46347 00001061 90                      align 2
 46348                                  
 46349                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 46350                                  
 46351                                  DOSINTTABLE:	; LABEL	DWORD
 46352                                  
 46353                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 46354                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 46355                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 46356                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 46357                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 46358                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 46359                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 46360                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 46361                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 46362                                  	
 46363 00001062 [7051]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 46364 00001066 [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4
 46365 0000106A [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 46366 0000106E [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 46367 00001072 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 46368 00001076 [9360]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 46369 0000107A [0107]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 46370 0000107E [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 46371 00001082 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 46372                                  
 46373 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 46374 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 46375                                  
 46376                                  ;-------------------------------------------------------------------------
 46377                                  ;
 46378                                  ; LOW MEM STUB:
 46379                                  ;
 46380                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 46381                                  ; handled by DOS. This stub is installed if the user specifies that the 
 46382                                  ; DOS load in HIMEM. Each entry point does this.
 46383                                  ;
 46384                                  ; 	1. if jmp to 8 has been patched out
 46385                                  ;	   2. if A20 OFF
 46386                                  ;	      3. Enable A20
 46387                                  ;	   4. else 
 46388                                  ;	      5. just go to dos entry
 46389                                  ;	   6. endif
 46390                                  ;	7. else
 46391                                  ;	   8. just go to dos entry
 46392                                  ;	9. endif
 46393                                  ;
 46394                                  ;--------------------------------------------------------------------------
 46395                                  
 46396                                  ; 27/04/2019 - Retro DOS v4.0
 46397                                  
 46398                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46399                                  
 46400                                  ;--------------------------------------------------------------------------
 46401                                  ;
 46402                                  ; DIVIDE BY 0 handler
 46403                                  ;
 46404                                  ;--------------------------------------------------------------------------
 46405                                  
 46406                                  ldivov:
 46407                                  	; The following jump, skipping the XMS calls will be patched to
 46408                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46409                                  	; needed because the stub is installed even before the XMS driver
 46410                                  	; is loaded if the user specifies dos=high in the config.sys
 46411                                  i0patch:
 46412 0000108A EB03                    	jmp	short divov_cont
 46413                                  
 46414 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46415                                  divov_cont:
 46416 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46417                                  
 46418                                  ;------------------------------------------------------------------------
 46419                                  ;
 46420                                  ; INT 20 Handler
 46421                                  ;
 46422                                  ; Here we do not have to set up the stack to return here as the abort call
 46423                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46424                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46425                                  ; will be restored then.
 46426                                  ;
 46427                                  ;-------------------------------------------------------------------------
 46428                                  
 46429                                  lquit:
 46430                                  	; The following jump, skipping the XMS calls will be patched to
 46431                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46432                                  	; needed because the stub is installed even before the XMS driver
 46433                                  	; is loaded if the user specifies dos=high in the config.sys
 46434                                  i20patch:
 46435 00001094 EB03                    	jmp	short quit_cont	
 46436                                  
 46437 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46438                                  quit_cont:
 46439 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46440                                  
 46441                                  ;--------------------------------------------------------------------------
 46442                                  ;
 46443                                  ; INT 21 Handler
 46444                                  ;
 46445                                  ;--------------------------------------------------------------------------
 46446                                  
 46447                                  lcommand:
 46448                                  	; The following jump, skipping the XMS calls will be patched to
 46449                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46450                                  	; needed because the stub is installed even before the XMS driver
 46451                                  	; is loaded if the user specifies dos=high in the config.sys
 46452                                  i21patch:
 46453 0000109E EB03                    	jmp	short command_cont
 46454                                  
 46455 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46456                                  command_cont:
 46457 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46458                                  
 46459                                  ;------------------------------------------------------------------------
 46460                                  ;
 46461                                  ; INT 25 
 46462                                  ;
 46463                                  ;----------------------------------------------------------------------------
 46464                                  
 46465                                  labsdrd:
 46466                                  	; The following jump, skipping the XMS calls will be patched to
 46467                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46468                                  	; needed because the stub is installed even before the XMS driver
 46469                                  	; is loaded if the user specifies dos=high in the config.sys
 46470                                  i25patch:
 46471 000010A8 EB03                    	jmp	short absdrd_cont
 46472                                  
 46473 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46474                                  absdrd_cont:
 46475 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46476                                  
 46477                                  ;-------------------------------------------------------------------------
 46478                                  ;
 46479                                  ; INT 26
 46480                                  ;
 46481                                  ;-----------------------------------------------------------------------
 46482                                  
 46483                                  labsdwrt:
 46484                                  	; The following jump, skipping the XMS calls will be patched to
 46485                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46486                                  	; needed because the stub is installed even before the XMS driver
 46487                                  	; is loaded if the user specifies dos=high in the config.sys
 46488                                  i26patch:
 46489 000010B2 EB03                    	jmp	short absdwrt_cont
 46490                                  
 46491 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46492                                  absdwrt_cont:
 46493 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46494                                  
 46495                                  ;------------------------------------------------------------------------
 46496                                  ;
 46497                                  ; INT 27
 46498                                  ;
 46499                                  ;-----------------------------------------------------------------------
 46500                                  
 46501                                  lstay_resident:
 46502                                  	; The following jump, skipping the XMS calls will be patched to
 46503                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46504                                  	; needed because the stub is installed even before the XMS driver
 46505                                  	; is loaded if the user specifies dos=high in the config.sys
 46506                                  i27patch:
 46507 000010BC EB03                    	jmp	short sr_cont
 46508                                  
 46509 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46510                                  sr_cont:
 46511 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46512                                  
 46513                                  ;-----------------------------------------------------------------------------
 46514                                  ;
 46515                                  ; INT 2f
 46516                                  ;
 46517                                  ;-------------------------------------------------------------------------
 46518                                  
 46519                                  lint2f:
 46520                                  	; The following jump, skipping the XMS calls will be patched to
 46521                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46522                                  	; needed because the stub is installed even before the XMS driver
 46523                                  	; is loaded if the user specifies dos=high in the config.sys
 46524                                  i2fpatch:
 46525 000010C6 EB03                    	jmp	short int2f_cont
 46526                                  
 46527 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46528                                  int2f_cont:
 46529 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46530                                  
 46531                                  ;-----------------------------------------------------------------------------
 46532                                  ;
 46533                                  ; CPM entry
 46534                                  ;
 46535                                  ;------------------------------------------------------------------------
 46536                                  
 46537                                  lcall_entry:
 46538                                  	; The following jump, skipping the XMS calls will be patched to
 46539                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46540                                  	; needed because the stub is installed even before the XMS driver
 46541                                  	; is loaded if the user specifies dos=high in the config.sys
 46542                                  cpmpatch:
 46543 000010D0 EB03                    	jmp	short callentry_cont
 46544                                  
 46545 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46546                                  callentry_cont:
 46547 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46548                                  
 46549                                  ;--------------------------------------------------------------------------
 46550                                  
 46551                                  lirett:
 46552 000010DA CF                      	iret
 46553                                  
 46554                                  ;---------------------------------------------------------------------------
 46555                                  ;
 46556                                  ; LowIntXX:
 46557                                  ;
 46558                                  ; Interrupts from DOS that pass control to a user program must be done from
 46559                                  ; low memory, as the user program may change the state of the A20 line or
 46560                                  ; they may require that the A20 line be OFF. The following piece of code is
 46561                                  ; far call'd from the following places in DOS:
 46562                                  ;
 46563                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46564                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46565                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46566                                  ;
 46567                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46568                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46569                                  ; before doing the ints and then do a far junp back into DOS.
 46570                                  ;
 46571                                  ;---------------------------------------------------------------------------
 46572                                  
 46573 000010DB 00000000                DosRetAddr23:	dd	0
 46574 000010DF 00000000                DosRetAddr24:	dd	0
 46575 000010E3 00000000                DosRetAddr28:	dd	0
 46576                                  
 46577                                  	; Execute int 23h from low memory
 46578                                  LowInt23:
 46579                                  					; save the return address that is on
 46580                                  					; the stack
 46581 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 46582 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 46583                                  
 46584 000010F1 CD23                    	int	23h			; ctrl C
 46585                                  					; turn on A20 it has been turned OFF
 46586                                  					; by int 28/23/24 handler.
 46587                                  
 46588 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46589                                  
 46590 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46591                                  
 46592                                  
 46593                                  	; Execute int 24h from low memory
 46594                                  LowInt24:
 46595                                  					; save the return address that is on
 46596                                  					; the stack
 46597 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 46598 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 46599                                  
 46600 00001105 CD24                    	int	24h			; crit error
 46601                                  					; turn on A20 it has been turned OFF
 46602                                  					; by int 28/23/24 handler.
 46603                                  
 46604 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46605                                  
 46606 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46607                                  
 46608                                  
 46609                                   
 46610                                  	; Execute int 28h from low memory
 46611                                  LowInt28:
 46612 0000110F CD28                    	int	28h			; idle int
 46613                                  					; turn on A20 it has been turned OFF
 46614                                  					; by int 28/23/24 handler.
 46615                                  
 46616 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46617                                  
 46618 00001114 CB                      	retf
 46619                                  
 46620                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46621                                  
 46622                                  ;-------------------------------------------------------------------------
 46623                                  ;
 46624                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46625                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46626                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46627                                  ; This is so because exepac'd programs rely on address wrap.
 46628                                  ;
 46629                                  ;-------------------------------------------------------------------------
 46630                                  
 46631                                  disa20_xfer:
 46632 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 46633                                  
 46634                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46635                                  
 46636                                  	; DS:SI points to entry point
 46637                                  	; AX:DI points to initial stack
 46638                                  	; DX has PDB pointer
 46639                                  	; BX has initial AX value
 46640                                  
 46641 00001118 FA                      	cli
 46642 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46643                                  
 46644 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 46645 00001121 89FC                    	mov	SP,DI			; and SP
 46646 00001123 FB                      	sti
 46647                                  
 46648 00001124 1E                      	push	DS			; fake long call to entry
 46649 00001125 56                      	push	SI
 46650 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 46651 00001128 8EDA                    	mov	DS,DX
 46652 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 46653 0000112C CB                      	retf
 46654                                  
 46655                                  ;-------------------------------------------------------------------------
 46656                                  ;
 46657                                  ; M003:
 46658                                  ;
 46659                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46660                                  ; come here, turn A20 OFF restore user stack and registers before returning
 46661                                  ; to user. This is done in dos\msdisp.asm. This has been done to support
 46662                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for
 46663                                  ; more info.	
 46664                                  ;
 46665                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that
 46666                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46667                                  ; stack to avoid additional stack overhead for the user.
 46668                                  ;
 46669                                  ; -------------------------------------------------------------------------
 46670                                  
 46671                                  disa20_iret:
 46672 0000112D E82700                  	call	XMMDisableA20
 46673 00001130 FE0E[2103]              	dec	byte [INDOS]
 46674 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46675 00001138 8B26[8405]              	mov	SP,[USER_SP]
 46676 0000113C 89E5                    	mov	BP,SP
 46677                                  	;mov	[BP+user_env.user_AX],AL
 46678 0000113E 884600                  	mov	[bp],al
 46679 00001141 A1[F205]                	mov	AX,[NSP]
 46680 00001144 A3[8405]                	mov	[USER_SP],AX
 46681 00001147 A1[F005]                	mov	AX,[NSS]
 46682 0000114A A3[8605]                	mov	[USER_SS],AX
 46683                                  
 46684 0000114D 58                      	pop	AX			; restore user regs
 46685 0000114E 5B                      	pop	BX
 46686 0000114F 59                      	pop	CX
 46687 00001150 5A                      	pop	DX
 46688 00001151 5E                      	pop	SI
 46689 00001152 5F                      	pop	DI
 46690 00001153 5D                      	pop	BP
 46691 00001154 1F                      	pop	DS
 46692 00001155 07                      	pop	ES
 46693 00001156 CF                      	iret
 46694                                  
 46695                                  ;**************************************************************************
 46696                                  ;***	XMMDisableA20 - switch 20th address line
 46697                                  ;
 46698                                  ;	This routine is used to disable the 20th address line in
 46699                                  ;	the system using XMM calls.
 46700                                  ;
 46701                                  ;	ENTRY	none		;ds = _DATA
 46702                                  ;	EXIT	A20 line disabled
 46703                                  ;	USES	NOTHING
 46704                                  ;
 46705                                  ;**************************************************************************
 46706                                  
 46707                                  XMMDisableA20:
 46708 00001157 53                      	push	bx
 46709 00001158 50                      	push	ax
 46710                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46711 00001159 B406                    	mov	ah,6
 46712 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46713 00001160 58                      	pop	ax
 46714 00001161 5B                      	pop	bx
 46715 00001162 C3                      	retn
 46716                                  
 46717                                  ; The entry point in the BIOS XMS driver is defined here.
 46718                                  
 46719                                  XMMcontrol:
 46720 00001163 00000000                	dd	0
 46721                                  
 46722                                  ;--------------------------------------------------------------------------
 46723                                  ;
 46724                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46725                                  ;
 46726                                  ;	This routine is used to query the A20 state in
 46727                                  ;	the system using XMM calls.
 46728                                  ;
 46729                                  ;	ENTRY: none
 46730                                  ;
 46731                                  ;	EXIT : A20 will be ON
 46732                                  ;
 46733                                  ; 	USES : NONE
 46734                                  ;
 46735                                  ;--------------------------------------------------------------------------
 46736                                  
 46737                                  LowMemory:	; label dword		; Set equal to 0000:0080
 46738 00001167 8000                    	dw	00080h
 46739 00001169 0000                    	dw	00000h
 46740                                  
 46741                                  HighMemory:	; label dword
 46742 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 46743 0000116D FFFF                    	dw	0FFFFh
 46744                                  
 46745                                  EnsureA20ON:
 46746 0000116F 9C                      	pushf
 46747 00001170 1E                      	push    ds
 46748 00001171 06                      	push	es
 46749 00001172 51                      	push	cx
 46750 00001173 56                      	push	si
 46751 00001174 57                      	push	di
 46752                                  
 46753 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46754 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46755 0000117F B90400                  	mov	cx,4
 46756 00001182 FC                      	cld
 46757 00001183 F3A7                    	repe    cmpsw
 46758                                  
 46759 00001185 7407                    	jz	short EA20_OFF
 46760                                  EA20_RET:
 46761 00001187 5F                      	pop	di
 46762 00001188 5E                      	pop	si
 46763 00001189 59                      	pop	cx
 46764 0000118A 07                      	pop	es
 46765 0000118B 1F                      	pop	ds
 46766 0000118C 9D                      	popf
 46767 0000118D C3                      	retn
 46768                                  
 46769                                  EA20_OFF:
 46770                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46771                                  	; NOTE: ints are disabled at this point.
 46772                                  
 46773 0000118E 53                      	push	bx
 46774 0000118F 50                      	push	ax
 46775                                  
 46776 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 46777 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 46778 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 46779 0000119B 8CC8                    	mov	ax,cs
 46780 0000119D 8ED0                    	mov	ss,ax
 46781 0000119F BC[A007]                	mov	sp,AUXSTACK
 46782                                  					; ss:sp -> DOSDATA:AuxStack
 46783                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46784 000011A2 B405                    	mov	ah,5
 46785 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46786 000011A9 09C0                    	or	ax,ax
 46787 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46788                                  
 46789 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 46790 000011B1 8ED0                    	mov	ss,ax
 46791 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 46792                                  
 46793 000011B8 58                      	pop	ax
 46794 000011B9 5B                      	pop	bx
 46795                                  
 46796 000011BA EBCB                    	jmp	short EA20_RET
 46797                                  
 46798                                  XMMerror:				; M006 - Start
 46799 000011BC B40F                    	mov	ah,0Fh			; get video mode
 46800 000011BE CD10                    	int	10h
 46801 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 46802 000011C2 7406                    	je	short XMMcont		; Y: do not change mode
 46803 000011C4 30E4                    	xor	ah,ah ; 0		; set video mode
 46804 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 46805 000011C8 CD10                    	int	10h
 46806                                  XMMcont:
 46807 000011CA B405                    	mov	ah,05h			; set display page
 46808 000011CC 30C0                    	xor	al,al			; page 0
 46809 000011CE CD10                    	int	10h
 46810                                  	
 46811 000011D0 BE[B812]                	mov	si,XMMERRMSG
 46812 000011D3 0E                      	push	cs
 46813 000011D4 1F                      	pop	ds
 46814 000011D5 FC                      	cld				; clear direction flag
 46815                                  XMMprnt:
 46816 000011D6 AC                      	lodsb
 46817 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46818 000011D9 7409                    	jz	short XMMStall		; function 0Eh	
 46819 000011DB B40E                    	mov	ah,0Eh
 46820 000011DD BB0700                  	mov	bx,7
 46821 000011E0 CD10                    	int	10h
 46822 000011E2 EBF2                    	jmp	short XMMprnt
 46823                                  
 46824                                  XMMStall:
 46825 000011E4 FB                      	sti				; allow the user to warm boot
 46826 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 46827                                  
 46828                                  ;---------------------------------------------------------------------------
 46829                                  
 46830                                  ; 27/04/2019 - Retro DOS v4.0
 46831                                  
 46832                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46833                                  ALTAH	equ 0Ch
 46834                                  
 46835                                  ;This has been put in for WIN386 2.XX support. The format of the instance
 46836                                  ;table was different for this. Segments will be patched in at init time.
 46837                                  
 46838                                  OldInstanceJunk:
 46839 000011E7 7000                    	dw	70h	;segment of BIOS
 46840 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 46841 000011EB 0600                    	dw	6	;5 instance items
 46842                                  
 46843                                  	;dw	0,offset dosdata:contpos, 2
 46844                                  	;dw	0,offset dosdata:bcon, 4
 46845                                  	;dw	0,offset dosdata:carpos,106h
 46846                                  	;dw	0,offset dosdata:charco, 1
 46847                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46848                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46849                                  
 46850 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 46851 000011F3 0000[3200]0400          	dw	0,BCON,4
 46852 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 46853 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 46854 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 46855 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46856                                  
 46857                                  ;---------------------------------------------------------------------------
 46858                                  
 46859                                  ; M021-
 46860                                  ;
 46861                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46862                                  ; 	takes control of the HMA. When running, this word is a reliable
 46863                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46864                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46865                                  
 46866                                  DosHasHMA:
 46867 00001211 00                      	db	0
 46868                                  FixExePatch:
 46869 00001212 0000                    	dw	0		; M012
 46870                                  
 46871                                  ; 25/03/2024
 46872                                  ;; 28/12/2022 - Retro DOS v4.1
 46873                                  RationalPatchPtr:
 46874 00001214 0000                    	dw	0		; M012
 46875                                  
 46876                                  ; End M021
 46877                                  
 46878                                  ;---------------------------------------------------------------------------
 46879                                  
 46880                                  ; 25/03/2024
 46881                                  %if 1
 46882                                  ; 28/12/2022 - Retro DOS v4.1
 46883                                  ;%if 0
 46884                                  ; M020 Begin
 46885                                  
 46886                                  RatBugCode:	; proc	far
 46887 00001216 51                      	push	cx
 46888 00001217 8B0E1000                	mov	cx,[10h]
 46889                                  rbc_loop:
 46890                                  	;loop	$
 46891 0000121B E2FE                    	loop	rbc_loop
 46892 0000121D 59                      	pop	cx
 46893 0000121E CB                      	retf
 46894                                  
 46895                                  ; M020 End
 46896                                  %endif
 46897                                  
 46898                                  ;---------------------------------------------------------------------------
 46899                                  	
 46900                                  UmbSave1:
 46901                                  	;db	11 dup (?)	; M023
 46902 0000121F 00<rep Bh>              	times	11 db 0	
 46903                                  
 46904                                  ; DOSDATA:122Ah
 46905                                  
 46906                                  Mark3:	; label byte
 46907                                  
 46908                                  ;IF2
 46909                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46910                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46911                                  ;	ENDIF
 46912                                  ;ENDIF
 46913                                  
 46914                                  ;############################################################################
 46915                                  ;
 46916                                  ; ** HACK FOR DOS 4.0 REDIR **
 46917                                  ;
 46918                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46919                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46920                                  ; COUNTRY_CDPG if it can. 
 46921                                  ;
 46922                                  ; MARK3 SHOULD NOT BE > 122AH 
 46923                                  ;
 46924                                  ; As of 9/6/90, this area is FULL!
 46925                                  ;
 46926                                  ;############################################################################
 46927                                   
 46928                                  	;ORG	0122Ah
 46929                                  
 46930                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46931                                  
 46932                                  ; The following table is used for DOS 3.3
 46933                                  ;DOS country and code page information is defined here for DOS 3.3.
 46934                                  ;The initial value for ccDosCountry is 1 (USA).
 46935                                  ;The initial value for ccDosCodepage is 850.
 46936                                  
 46937                                  ; country and code page information
 46938                                  ; ---------------------------------------------------------------------------
 46939                                  COUNTRY_CDPG:	; label  byte
 46940 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46941 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46941 0000123B 53595300           
 46942                                  	;db   51 dup (?)
 46943 0000123F 00<rep 33h>             	times 51 db 0
 46944                                  ; ------------------------------------------------<MSKK01>-------------------
 46945                                  ;ifdef	DBCS
 46946                                  ;  ifdef JAPAN
 46947                                  ;	dw   932			; system code page id (JAPAN)
 46948                                  ;  endif
 46949                                  ;  ifdef TAIWAN
 46950                                  ;	dw   938			; system code page id (TAIWAN)
 46951                                  ;  endif
 46952                                  ;  ifdef KOREA
 46953                                  ;	dw   934			; system code page id (KOREA IBM)
 46954                                  ;  endif
 46955                                  ;else
 46956 00001272 B501                    	dw   437			; system code page id
 46957                                  ;endif
 46958                                  ; ------------------------------------------------<MSKK01>-------------------
 46959 00001274 0600                    	dw   6				; number of entries
 46960 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 46961 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46962 00001279 0000                    	dw   0				; segment of poiter
 46963 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46964 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46965 0000127E 0000                    	dw   0				; segment of poiter
 46966 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 46967 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46968 00001283 0000                    	dw   0				; segment of poiter
 46969 00001285 06                      	db   SetCollate	; 6		; collate type
 46970 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46971 00001288 0000                    	dw   0				; segment of poiter
 46972 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46973 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46974 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46975 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 46976 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46977                                  ; ------------------------------------------------<MSKK01>-------------------
 46978                                  ;ifdef	DBCS
 46979                                  ;	...... 
 46980                                  ;else
 46981 00001292 0100                    	dw   1				; USA country id
 46982 00001294 B501                    	dw   437			; USA system code page id
 46983 00001296 0000                    	dw   0 				; date format
 46984 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 46985 0000129D 2C00                    	db   ',',0			; thousand separator
 46986 0000129F 2E00                    	db   '.',0			; decimal separator
 46987 000012A1 2D00                    	db   '-',0			; date separator
 46988 000012A3 3A00                    	db   ':',0			; time separator
 46989 000012A5 00                      	db   0				; currency format flag
 46990 000012A6 02                      	db   2				; # of digits in currency
 46991 000012A7 00                      	db   0 				; time format
 46992 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46993 000012AA 0000                    	dw   0				; segment of entry point
 46994 000012AC 2C00                    	db   ',',0			; data list separator
 46995 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46995 000012B7 00                 
 46996                                  ;endif
 46997                                  ; ------------------------------------------------<MSKK01>-------------------
 46998                                  
 46999                                  ; 27/04/2019 - Retro DOS v4.0
 47000                                  
 47001                                  ;include msdos.cl2			; XMMERRMSG
 47002                                  
 47003                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 47004                                  
 47005                                  XMMERRMSG:
 47006 000012B8 0D0A                    	db	0Dh,0Ah
 47007 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 47007 000012C3 617265204572726F72-
 47007 000012CC 0D0A24             
 47008                                  
 47009                                  ; DOSDATA ends
 47010                                  
 47011                                  ; 05/11/2022
 47012                                  ;----------------------------------------------------------------------------
 47013                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 47014                                  ;----------------------------------------------------------------------------
 47015                                  
 47016                                  ; 28/12/2022 - Retro DOS v4.1
 47017                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 47018                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 47019                                  ;----------------------------------------------------------------------------
 47020                                  %if 0
 47021                                  ;----------------------------------------------------------------------------
 47022                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47023                                  
 47024                                  ;============================================================================
 47025                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 47026                                  ;============================================================================
 47027                                  ; 27/04/2019 - Retro DOS 4.0
 47028                                  
 47029                                  ;DOSDATA Segment
 47030                                  
 47031                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 47032                                  
 47033                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47034                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 47035                                  
 47036                                  ; first and second DOS patches
 47037                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 47038                                  ;
 47039                                  ; Code in disk.asm, 2 locations, one for read, one for write
 47040                                  ;	DVRDLP:
 47041                                  ;	DVWRTLP:
 47042                                  ;
 47043                                  ;
 47044                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 47045                                  ;	lds	si,si+7 				  ; sf_devptr
 47046                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 47047                                  
 47048                                  DOSP1_ID:	db	036h,0C5h,036h
 47049                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47050                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 47051                                  
 47052                                  		db	90h, 90h
 47053                                  
 47054                                  DOSP12_ID:	db	036h,0C5h,036h
 47055                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47056                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 47057                                  
 47058                                  ; DOSDATA:12E3h
 47059                                  
 47060                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 47061                                  ;
 47062                                  ; Code in disk.asm, 1 location
 47063                                  ;	GETBUF:
 47064                                  ;
 47065                                  ; 051h	push	cx	<- begin special int28 mode
 47066                                  ;	push	es
 47067                                  ;	push	di
 47068                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 47069                                  ;	call	????	; $STD_CON_STRING_INPUT
 47070                                  ;	pop	di
 47071                                  ;	pop	es
 47072                                  ; 059h	pop	cx	<- end special int28 mode
 47073                                  
 47074                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 47075                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 47076                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 47077                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 47078                                  DOSP4_ID:	db	059h			; pop cx
 47079                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 47080                                  	
 47081                                  ; DOSDATA:12EFh
 47082                                  
 47083                                  ; Fifth DOS patch - System call 40h (Write) to console
 47084                                  ;
 47085                                  ; Code in disk.asm, 1 location
 47086                                  ;
 47087                                  ;		push	cx
 47088                                  ;      WRCONLP: lodsb
 47089                                  ;		cmp	al,1Ah
 47090                                  ;		jz	????
 47091                                  ;		call	????	<- "simulate" int28 event
 47092                                  ;		loop	WRCONLP
 47093                                  ;      CONEOF:	pop	ax
 47094                                  
 47095                                  DOSP5_ID:	db	051h			; push cx
 47096                                  		db	0ACh,03Ch,01Ah,074h,005h
 47097                                  		db	0E8h			; call
 47098                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 47099                                  
 47100                                  ; DOSDATA:12F6h
 47101                                  
 47102                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 47103                                  ;
 47104                                  ; Code in disp.asm, 1 location
 47105                                  ;
 47106                                  ;
 47107                                  ;	mov [SaveDS],ds
 47108                                  ;	mov [SaveBX],bx
 47109                                  ;	mov bx,cs
 47110                                  ;	mov ds,bx
 47111                                  ;	inc [indos]
 47112                                  ;	xor ax,ax
 47113                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 47114                                  
 47115                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 47116                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 47117                                  		db	02Eh,089h,01Eh
 47118                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 47119                                  		db	08Ch,0CBh		; mov bx,cs
 47120                                  		db	08Eh,0DBh		; mov ds,bx
 47121                                  		db	0FEh,006h
 47122                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 47123                                  		db	033h,0C0h		; xor ax,ax
 47124                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 47125                                  
 47126                                  ; DOSDATA:130Ah
 47127                                  
 47128                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 47129                                  ;
 47130                                  ; Code in handle.asm, 1 location in routine CheckOwner
 47131                                  ;
 47132                                  ;
 47133                                  ;
 47134                                  ;	push	ax
 47135                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 47136                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 47137                                  ;	pop	ax
 47138                                  ;	jz	????
 47139                                  
 47140                                  DOSP8_ID:	db	050h			; push ax
 47141                                  		db	036h,0A1h
 47142                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 47143                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 47144                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 47145                                  		db	02Fh,058h		; pop  ax
 47146                                  
 47147                                  ; DOSDATA:1314h
 47148                                  
 47149                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 47150                                  ;
 47151                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 47152                                  ;   a yeild when a character is not ready to be read.
 47153                                  ;
 47154                                  ; Code in disk.asm, 3 locations
 47155                                  ;
 47156                                  ;   DVRDRAW:
 47157                                  ;	    PUSH    ES
 47158                                  ;	    POP     DS
 47159                                  ;   ReadRawRetry:				<- Patch 10
 47160                                  ;	    MOV     BX,DI
 47161                                  ;	    XOR     AX,AX			<- Reenter #2
 47162                                  ;	    MOV     DX,AX
 47163                                  ;	    call    SETREAD
 47164                                  ;	    PUSH    DS				<- Reenter #1
 47165                                  ;	    LDS     SI,[THISSFT]
 47166                                  ;	    call    DEVIOCALL
 47167                                  ;	    MOV     DX,DI
 47168                                  ;	    MOV     AH,86H
 47169                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 47170                                  ;	    TEST    DI,STERR
 47171                                  ;	    JZ	    CRDROK
 47172                                  ;	    call    CHARHARD
 47173                                  ;	    MOV     DI,DX
 47174                                  ;	    OR	    AL,AL
 47175                                  ;	    JZ	    CRDROK
 47176                                  ;	    CMP     AL,3
 47177                                  ;	    JZ	    CRDFERR
 47178                                  ;	    POP     DS
 47179                                  ;	    JMP     ReadRawRetry
 47180                                  ;
 47181                                  ;   CRDFERR:
 47182                                  ;	    POP     DI				<- Patch 11
 47183                                  ;   DEVIOFERR:
 47184                                  ;	    LES     DI,[THISSFT]
 47185                                  ;	    jmp     SET_ACC_ERR_DS
 47186                                  ;
 47187                                  ;   CRDROK:
 47188                                  ;	    POP     DI				<- Patch 12
 47189                                  ;	    MOV     DI,DX
 47190                                  ;	    ADD     DI,[CALLSCNT]
 47191                                  ;	    JMP     SHORT ENDRDDEVJ3
 47192                                  
 47193                                  DOSP10_ID:		db	006H,01FH
 47194                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 47195                                  DOSP10_LOC:		db	08BH,0DFH
 47196                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 47197                                  			db	033H,0C0H,08BH,0D0H,0E8H
 47198                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 47199                                  			db	0DFH,00EH
 47200                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 47201                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 47202                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 47203                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 47204                                  			db	009H,003H
 47205                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 47206                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 47207                                  			db	01FH,0EBH,0CFH
 47208                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 47209                                  			db	05FH
 47210                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 47211                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 47212                                  
 47213                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 47214                                  			db	05FH,08BH,0FAH
 47215                                  ; DOSDATA:1353h
 47216                                  
 47217                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 47218                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 47219                                  ;
 47220                                  ;	    Sets focus to current VM so user can see fatal message.
 47221                                  ;
 47222                                  ;
 47223                                  ;	l0: lodsb		<- Setfocus here
 47224                                  ;	    cmp al, '$'
 47225                                  ;	    je l1
 47226                                  ;	    mov bl, 7
 47227                                  ;	    mov ah, 0Eh
 47228                                  ;	    int 10h
 47229                                  ;	    jmp l0
 47230                                  ;	l1: jmp $
 47231                                  
 47232                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 47233                                  		db	03Ch,024h		;     cmp al, '$'
 47234                                  		db	074h,008h		;     je l1
 47235                                  		db	0B3h,007h		;     mov bl, 7
 47236                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 47237                                  		db	0CDh,010h		;     int 10h
 47238                                  		db	0EBh,0F3h		;     jmp l0
 47239                                  		db	0EBh,0FEh		; l1: jmp $
 47240                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 47241                                  
 47242                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47243                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 47244                                  
 47245                                  ; 06/12/2022
 47246                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 47247                                  
 47248                                  ; DOSDATA ends
 47249                                  
 47250                                  ;============================================================================
 47251                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 47252                                  ;============================================================================
 47253                                  ; 27/04/2019 - Retro DOS 4.0
 47254                                  
 47255                                  ;mpatch.asm -- holds data patch location for callouts 
 47256                                  ; -- allocate cluster in rom.asm
 47257                                  ;
 47258                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 47259                                  ; Currently, this location is used only by magicdrv.sys's patch to
 47260                                  ; cluster allocation, however it can be expanded to be used by other
 47261                                  ; patches. This is important since we have an easy-access pointer to
 47262                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 47263                                  ; only patch out a far call/retf, so any space after that could be
 47264                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 47265                                  ; to call out here.
 47266                                  ;
 47267                                  ; Currently, we allocate only the minimum space required for the 6
 47268                                  ; byte magicdrv patch, so if you change the dos data, you may want
 47269                                  ; to reserve space here if your new data will be position dependent
 47270                                  ; and would prohibit growing of this table.
 47271                                  ;       
 47272                                  ;history	-	created 8-7-92 by scottq
 47273                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 47274                                  ;
 47275                                  ;Exported Functions
 47276                                  ;==================
 47277                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 47278                                  
 47279                                  ; DosData Segment
 47280                                  
 47281                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 47282                                  
 47283                                  ; ---------------------------------------------------------------------------
 47284                                  
 47285                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 47286                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 47287                                  ; greater). Added to this file because it needed to be somewhere and is
 47288                                  ; 'patch' related.
 47289                                  
 47290                                  Rational386PatchPtr:
 47291                                  	dw	0	; points to patch routine or RET instr.
 47292                                  ; ---------------------------------------------------------------------------
 47293                                  
 47294                                  MagicPatch:
 47295                                  ;MagicPatch proc far
 47296                                          retf            ;default is to just return to allocate
 47297                                          nop             ;however, this code will be patched
 47298                                          nop             ;by magicdrv.sys to
 47299                                          nop             ; call far ?:?     
 47300                                          nop             ; retf or perhaps just jmp far
 47301                                          nop             ;retf/nop take one byte, so we need six instructions
 47302                                                          ;for 6 byte patch
 47303                                  ;MagicPatch endp
 47304                                  
 47305                                  ; ---------------------------------------------------------------------------
 47306                                  
 47307                                  ;DosData Ends
 47308                                  
 47309                                  ; DOSDATA:136Ah
 47310                                  
 47311                                  ;----------------------------------------------------------------------------
 47312                                  
 47313                                  ;DOSDATALAST SEGMENT
 47314                                  
 47315                                  ; 29/04/2019 - Retro DOS v4.0
 47316                                  
 47317                                  ;----------------------------------------------------------------------------
 47318                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 47319                                  
 47320                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 47321                                  
 47322                                  ;align 16
 47323                                  
 47324                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 47325                                  
 47326                                  ;----------------------------------------------------------------------------
 47327                                  
 47328                                  %endif	; 05/11/2022
 47329                                  
 47330                                  ; 05/12/2022
 47331                                  ;MSDAT001E:	; label byte
 47332                                  
 47333                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47334                                  DOSDATAEND equ $
 47335                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 47336                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 47337                                  
 47338                                  ;DOSDATALAST ENDS
 47339                                  
 47340                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 47341                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 47342                                  ;============================================================================
 47343                                  ;	END
 47344                                  ;============================================================================
 47345                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 47346                                  ; -----------------------------
 47347                                  ; MAY 2019, ISTANBUL - TURKIYE.
